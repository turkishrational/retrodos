     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 28/08/2023 - Retro DOS v4.1 (Previous: 22/07/2023)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 25/05/2018 (Retro DOS 3.0), 26/12/2018 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15 (2.11)
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))		-	
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB    (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  
   881                                  section .BIOSDATA vstart=0
   882                                  
   883                                  ;--- DOSBIOS data segment ----------------------------------------------------
   884                                  ;-----------------------------------------------------------------------------
   885                                  
   886                                  ;Bios_Data segment
   887                                  
   888                                  BData_start:				
   889 00000000 E96017                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   890                                  ; ----------------------------------------------------------------------------
   891                                  
   892 00000003 0000                    DosDataSg:	dw 0
   893                                  
   894                                  ; DOS's int 2f handler will exit via a jump through here.
   895                                  ; This is how the BIOS hooks int2f
   896                                  			
   897 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   898 00000006 [9108]                  off_706:	dw int_2f
   899 00000008 7000                    word_708:	dw 70h			; KERNEL_SEGMENT
   900                                  
   901 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   902                                  					; This is to maintain binary compatibility
   903                                  					; with DISK based DOS 5.0
   904                                  
   905                                  ; This is a byte used for special key handling in the resident
   906                                  ; console device driver. It must be here so that it can be included
   907                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   908                                  
   909 0000000C 00                      altah:		db 0			; special key handling
   910                                  			
   911 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   912 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   913                                  
   914                                  ; PTRSAV - pointer save
   915                                  ;
   916                                  ; This variable holds the pointer to the Request Header passed by a program
   917                                  ; wishing to use a device driver. When the strategy routine is called it 
   918                                  ; puts the address of the Request header in this variable and returns.
   919                                  		
   920 00000012 00000000                ptrsav:		dd 0			
   921                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   922 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   923 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   924 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   925 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   926 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   927 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   928                                  
   929                                  ;-----------------------------------------------------------------------------
   930                                  
   931                                  res_dev_list:
   932                                  
   933                                  ; Device Header for the CON Device Driver
   934                                  
   935                                  CONHeader:				; HEADER FOR DEVICE "CON"
   936 00000023 [3500]                  		dw auxdev2
   937 00000025 7000                    		dw 70h	
   938 00000027 1380                    word_727:	dw 8013h
   939 00000029 [F506]                  		dw strategy
   940 0000002B [0007]                  		dw con_entry
   941 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   942 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   943 00000037 7000                    		dw 70h
   944 00000039 0080                    		dw 8000h
   945 0000003B [F506]                  		dw strategy
   946 0000003D [2107]                  		dw aux0_entry
   947 0000003F 4155582020202020        aAux:		db 'AUX     '
   948 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   949 00000049 7000                    		dw 70h
   950 0000004B C0A0                    word_74B:	dw 0A0C0h
   951 0000004D [F506]                  		dw strategy
   952 0000004F [0507]                  		dw prn0_entry
   953 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   954 00000059 [6B00]                  timdev:		dw dskdev	
   955 0000005B 7000                    		dw 70h
   956 0000005D 0880                    		dw 8008h
   957 0000005F [F506]                  		dw strategy
   958 00000061 [3907]                  		dw tim_entry
   959 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   960 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   961 0000006D 7000                    		dw 70h
   962 0000006F C208                    		dw 8C2h
   963                                  		;dw offset strategy
   964                                  		;dw offset dsk_entry
   965                                  		; 19/10/2022
   966 00000071 [F506]                  		dw strategy
   967 00000073 [3E07]                  		dw dsk_entry
   968                                  
   969                                  ; maximum number of drives
   970                                  
   971 00000075 04                      drvmax:		db 4			
   972 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   973 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   974                                  					; 96tpi support		
   975 00000078 00                      single:		db 0			; used to detect single drive systems		
   976 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   977                                  					; used by console driver.			
   978 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   979                                  					; drive. (examined by checksingle).
   980                                  		
   981 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   982 0000007D 7000                    		dw 70h
   983 0000007F 0080                    		dw 8000h
   984 00000081 [F506]                  		dw strategy
   985 00000083 [2107]                  		dw aux0_entry
   986 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   987 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   988 0000008F 7000                    		dw 70h
   989 00000091 C0A0                    		dw 0A0C0h
   990 00000093 [F506]                  		dw strategy
   991 00000095 [0C07]                  		dw prn1_entry
   992 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
   993 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
   994 000000A1 7000                    		dw 70h
   995 000000A3 C0A0                    		dw 0A0C0h
   996 000000A5 [F506]                  		dw strategy
   997 000000A7 [1307]                  		dw prn2_entry
   998 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
   998 000000B2 0000               
   999                                  
  1000                                  ;M058; Start of changes
  1001                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1002                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1003                                  ;cannot change for them to work. Even ProComm does this.
  1004                                  
  1005 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1006                                  
  1007 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1008 000000BA 7000                    		dw 70h
  1009 000000BC C0A0                    		dw 0A0C0h
  1010 000000BE [F506]                  		dw strategy
  1011 000000C0 [1A07]                  		dw prn3_entry
  1012 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1013 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1014 000000CC 7000                    		dw 70h
  1015 000000CE 0080                    		dw 8000h
  1016 000000D0 [F506]                  		dw strategy
  1017 000000D2 [2707]                  		dw aux1_entry
  1018                                  		; 19/10/2022
  1019 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1020                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1021 000000DC [EE00]                  		dw com4dev
  1022 000000DE 7000                    		dw 70h
  1023 000000E0 0080                    		dw 8000h
  1024                                  		;dw offset strategy
  1025                                  		;dw offset aux2_entry
  1026 000000E2 [F506]                  		dw strategy
  1027 000000E4 [2D07]                  		dw aux2_entry	
  1028 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1029 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1030 000000F0 7000                    		dw 70h
  1031 000000F2 0080                    		dw 8000h
  1032 000000F4 [F506]                  		dw strategy
  1033 000000F6 [3307]                  		dw aux3_entry
  1034 000000F8 434F4D3420202020        		db 'COM4    '
  1035                                  
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  
  1038 00000100 10                      RomVectors:	db 10h			
  1039 00000101 00000000                Old10:		dd 0
  1040 00000105 13                      		db 13h
  1041 00000106 00000000                Old13:		dd 0			
  1042 0000010A 15                      		db 15h
  1043 0000010B 00000000                Old15:		dd 0			
  1044 0000010F 19                      		db 19h
  1045 00000110 00000000                Old19:		dd 0
  1046 00000114 1B                      		db 1Bh
  1047 00000115 00000000                Old1B:		dd 0
  1048                                  
  1049                                  ;EndRomVectors	equ $
  1050                                  
  1051                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1052                                  
  1053                                  ;-----------------------------------------------------------------------------
  1054                                  
  1055 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1056 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1057                                  
  1058                                  ; (MSDOS 3.3) NOTE:
  1059                                  ; Some floppy drives do not have changeline support. The result is a
  1060                                  ; large amount of inefficiency in the code. A media-check always returns
  1061                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1062                                  ; always discard any cached data.
  1063                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1064                                  ; The following three items are used to do this. The logical door latch is
  1065                                  ; based on the premise that it is not physically possible to change floppy
  1066                                  ; disks in a drive in under two seconds (most people take about 10). The
  1067                                  ; logical door latch is implemented by saving the time of the last successful
  1068                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1069                                  ; current time is compared to the saved time. If less than two seconds have
  1070                                  ; passed then the value "No Change" is returned. If more than two seconds
  1071                                  ; have passed the value "Don't Know" is returned.
  1072                                  ;    There is one complecation to this algorithm. Some programs change the
  1073                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1074                                  ; This possibility is detected by counting the number of disk operations
  1075                                  ; which occur without any time passing. If this count exceeds the value of
  1076                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1077                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1078                                  ; of disk operation which occur without the time changing.
  1079                                  
  1080 0000011D 00                      accesscount:	db 0			
  1081 0000011E FF                      tim_drv:	db 0FFh			
  1082 0000011F 00                      medbyt:		db 0
  1083                                  wrtverify:	; 15/10/2022			
  1084 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1085 00000121 00                      verify:		db 0			; 1 if verify after write
  1086 00000122 0000                    seccnt:		dw 0			
  1087 00000124 00                      		db 0			; -- pad where hardnum was
  1088 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1089                                  
  1090                                  ; (MSDOS 3.3) NOTE:
  1091                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1092                                  ; have to be made to read the diskette. Consequently a large head settle
  1093                                  ; time was always used in the I/O operations. To get around this problem
  1094                                  ; we need to continually adjust the head settle time. The following
  1095                                  ; algorithm is used:
  1096                                  ;
  1097                                  ;   Get the current head settle value.
  1098                                  ;   If it is 1, then
  1099                                  ;	set slow = 15
  1100                                  ;   else
  1101                                  ;	set slow = value
  1102                                  ;   ...
  1103                                  ;   if we are seeking and writing then
  1104                                  ;	use slow
  1105                                  ;   else
  1106                                  ;	use fast
  1107                                  ;   ...
  1108                                  ;   restore current head settle value
  1109                                  
  1110 00000126 00                      motorstartup:	db 0			; value from table
  1111 00000127 00                      settlecurrent:	db 0			; value	from table
  1112 00000128 00                      settleslow:	db 0			; slow settle value
  1113 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1114 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1115 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1116 0000012C 09                      eot:		db 9			
  1117 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table			
  1118 00000131 00                      cursec:		db 0			; current sector
  1119 00000132 00                      curhd:		db 0			; current head
  1120 00000133 0000                    curtrk:		dw 0			; current track
  1121 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1122 00000137 08                      formt_eot:	db 8			; eot used for format
  1123 00000138 00                      hdnum:		db 0			; head number
  1124 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1125 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1126                                  
  1127                                  ;-----------------------------------------------------------------------------
  1128                                  
  1129                                  ; disk errors returned from the IBM rom
  1130                                  
  1131 0000013C CC                      errin:		db 0CCh			; write	fault error
  1132 0000013D 80                      		db 80h			; no response
  1133 0000013E 40                      		db 40h			; seek failure
  1134 0000013F 10                      		db 10h			; bad crc
  1135 00000140 08                      		db 8			; dma overrun
  1136 00000141 06                      		db 6			; media	change
  1137 00000142 04                      		db 4			; sector not found
  1138 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1139 00000144 00                      lsterr:		db 0			; all other errors
  1140                                  
  1141                                  ; returned error codes corresponding to above
  1142                                  
  1143 00000145 0A                      errout:		db 10			; write	fault error
  1144 00000146 02                      		db 2			; no response
  1145 00000147 06                      		db 6			; seek failure
  1146 00000148 04                      		db 4			; bad crc
  1147 00000149 04                      		db 4			; dma overrun
  1148 0000014A 0F                      		db 15			; invalid media	change
  1149 0000014B 08                      		db 8			; sector not found
  1150 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1151 0000014D 0C                      		db 12			; general error
  1152                                  
  1153                                  ;-----------------------------------------------------------------------------
  1154                                  
  1155                                  ; 30/12/2018 - Retro DOS v4.0
  1156                                  
  1157                                  ; read in boot sector here, read done in readboot.
  1158                                  ; also read sector for dma check for hard disk.
  1159                                  ;
  1160                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1161                                  ; in them which causes the byte after the buffer to be trashed
  1162                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1163                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1164                                  ; makes that system more-or-less work.
  1165                                  
  1166                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1167                                  		; 19/10/2022
  1168 0000014E 00<rep 200h>            		times 512 db 0
  1169                                  
  1170                                  ;-----------------------------------------------------------------------------
  1171                                  
  1172                                  ; 30/12/2018 - Retro DOS v4.0
  1173                                  ;-----------------------------------------------------------------------------
  1174                                  ; 25/05/2018 (04/04/2018)
  1175                                  ;*****************************************************************************
  1176                                  ;	"bds" contains information for each drive in the system.
  1177                                  ;	various values are patched whenever actions are performed.
  1178                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1179                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1180                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1181                                  ;	that the parameters have not been set.
  1182                                  
  1183                                  bds1:		;dw offset bds2
  1184 0000034E [B203]                  		dw bds2	; 19/10/2022
  1185 00000350 7000                    		dw 70h			; dword	link to	next structure
  1186 00000352 00                      		db 0			; int 13h drive	number
  1187 00000353 00                      		db 0			; logical drive	letter
  1188 00000354 0002                    fdrive1:	dw 512			
  1189                                  					; physical sector size in bytes
  1190 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1191 00000357 0100                    		dw 1			; reserved sectors for dos
  1192 00000359 02                      		db 2			; no of	file allocation	tables
  1193 0000035A 4000                    		dw 64			; number of root directory entries
  1194 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1195 0000035E 00                      		db 0			; media	descriptor, initially 0
  1196 0000035F 0200                    		dw 2			; number of fat	sectors
  1197 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1198 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1199 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1200 00000367 0000                    		dw 0			; hidden sector	(high)
  1201 00000369 0000                    		dw 0			; number sectors (low)
  1202 0000036B 0000                    		dw 0			; number sectors (high)
  1203 0000036D 00                      		db 0			; true => large	fats
  1204 0000036E 0000                    		dw 0			; open ref. count
  1205 00000370 03                      		db 3			; form factor
  1206 00000371 2000                    		dw 20h			; various flags
  1207 00000373 2800                    		dw 40			; number of cylinders
  1208 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1209 00000377 01                      		db 1
  1210 00000378 0100                    		dw 1
  1211 0000037A 02                      		db 2
  1212 0000037B E000                    		dw 224			; number of root directory entries
  1213 0000037D 6801                    		dw 360
  1214 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1215 00000380 0200                    		dw 2
  1216 00000382 0900                    		dw 9
  1217 00000384 0200                    		dw 2
  1218 00000386 0000                    		dw 0
  1219 00000388 0000                    		dw 0
  1220 0000038A 0000                    		dw 0
  1221 0000038C 0000                    		dw 0
  1222                                  		;db 6 dup(0)
  1223 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1224 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1225 00000395 FFFF                    word_A95:	dw 0FFFFh		; keep these two contiguous (?)
  1226 00000397 FFFF                    		dw 0FFFFh
  1227 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1227 000003A2 202000             
  1228 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1229 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1230                                  ; ----
  1231                                  
  1232 000003B2 [1604]                  bds2:		dw bds3		
  1233 000003B4 7000                    		dw 70h
  1234 000003B6 00                      		db 0
  1235 000003B7 00                      		db 0
  1236 000003B8 0002                    fdrive2:	dw 512			
  1237 000003BA FF0100024000680100-     byte_ABA:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1237 000003C3 020009000100       
  1238 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1238 000003D2 00000320002800     
  1239 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1239 000003E2 01F002000900       
  1240 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1240 000003F1 00000000000000FF   
  1241 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1241 00000402 4D                 
  1242 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1242 0000040C 00464154           
  1243 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1244                                  ; ----
  1245                                  
  1246 00000416 [7A04]                  bds3:		dw bds4		
  1247 00000418 7000                    		dw 70h
  1248 0000041A 00                      		db 0
  1249 0000041B 00                      		db 0
  1250 0000041C 0002                    fdrive3:	dw 512			
  1251 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1251 00000427 020009000100       
  1252 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1252 00000436 00000320002800     
  1253 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1253 00000446 01F002000900       
  1254 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1254 00000455 00000000000000FF   
  1255 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1255 00000466 4D                 
  1256 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1256 00000470 00464154           
  1257 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1258                                  ; ----
  1259                                  
  1260 0000047A FFFF                    bds4:		dw 0FFFFh		
  1261 0000047C 7000                    		dw 70h
  1262 0000047E 00                      		db 0
  1263 0000047F 00                      		db 0
  1264 00000480 0002                    fdrive4:	dw 512			
  1265 00000482 FF0100024000680100-     byte_B82:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1265 0000048B 020009000100       
  1266 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1266 0000049A 00000320002800     
  1267 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1267 000004AA 01F002000900       
  1268 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1268 000004B9 00000000000000FF   
  1269 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1269 000004CA 4D                 
  1270 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1270 000004D4 00464154           
  1271 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1272                                  
  1273                                  ;-----------------------------------------------------------------------------
  1274                                  
  1275 000004DE 03                      sm92:		db 3			; .spf			
  1276 000004DF 09                      		db 9			; .spt
  1277 000004E0 70                      		db 112	; 70h		; .cdire
  1278 000004E1 A005                    		dw 1440	; 2*9*80	; .csec
  1279 000004E3 02                      		db 2			; .spau
  1280 000004E4 02                      		db 2			; .chead
  1281                                  
  1282 000004E5 00                      keyrd_func:	db 0			
  1283 000004E6 01                      keysts_func:	db 1			
  1284 000004E7 00                      printdev:	db 0			; printer device index
  1285                                  
  1286                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1287 000004E8 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1288                                  
  1289 000004F0 0000                    daycnt:		dw 0			
  1290 000004F2 00                      t_switch:	db 0			; flag for updating daycnt
  1291 000004F3 00                      havecmosclock:	db 0			
  1292 000004F4 13                      base_century:	db 19			
  1293 000004F5 50                      base_year:	db 80			
  1294 000004F6 1F1C1F1E1F1E1F1F1E-     month_tab:	db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
  1294 000004FF 1F1E1F             
  1295 00000502 [FD14]                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1296 00000504 7000                    		dw 70h ; 17/10/2022	
  1297 00000506 [2C14]                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1298 00000508 7000                    		dw 70h ; 17/10/2022
  1299 0000050A 00                      set_id_flag:	db 0			; flag for getbp routine
  1300 0000050B 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1301 00000514 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1302 0000051D 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1302 00000526 202000             
  1303                                  
  1304 00000529 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1305 0000052B 0000                    start_sec_h:	dw 0			; starting sector number high word
  1306 0000052D 0000                    saved_word:	dw 0			; tempory saving place for a word
  1307 0000052F 0000                    multrk_flag:	dw 0			
  1308 00000531 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1309 00000532 0000                    vretry_cnt:	dw 0			
  1310 00000534 0000                    soft_ecc_cnt:	dw 0			
  1311 00000536 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1312 00000537 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1313                                  
  1314                                  ; variables for msdioctl.asm module
  1315                                  
  1316                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1317                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1318                                  ;	n	bytes per sector
  1319                                  ;      ---	----------------
  1320                                  ;	0	      128
  1321                                  ;	1	      256
  1322                                  ;	2	      512
  1323                                  ;	3	     1024
  1324                                  
  1325                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1326                                  ;					; we support (was 40 in dos 3.2)
  1327                                  
  1328 00000539 2400                    sectorspertrack: dw 36			
  1329 0000053B 00000102                tracktable:	db 0, 0, 1, 2		
  1330 0000053F 00000202                		db 0, 0, 2, 2
  1331 00000543 00000302                		db 0, 0, 3, 2
  1332 00000547 00000402                		db 0, 0, 4, 2
  1333 0000054B 00000502                		db 0, 0, 5, 2
  1334 0000054F 00000602                		db 0, 0, 6, 2
  1335 00000553 00000702                		db 0, 0, 7, 2
  1336 00000557 00000802                		db 0, 0, 8, 2
  1337 0000055B 00000902                		db 0, 0, 9, 2
  1338 0000055F 00000A02                		db 0, 0, 10, 2
  1339 00000563 00000B02                		db 0, 0, 11, 2
  1340 00000567 00000C02                		db 0, 0, 12, 2
  1341 0000056B 00000D02                		db 0, 0, 13, 2
  1342 0000056F 00000E02                		db 0, 0, 14, 2
  1343 00000573 00000F02                		db 0, 0, 15, 2
  1344 00000577 00001002                		db 0, 0, 16, 2
  1345 0000057B 00001102                		db 0, 0, 17, 2
  1346 0000057F 00001202                		db 0, 0, 18, 2
  1347 00000583 00001302                		db 0, 0, 19, 2
  1348 00000587 00001402                		db 0, 0, 20, 2
  1349 0000058B 00001502                		db 0, 0, 21, 2
  1350 0000058F 00001602                		db 0, 0, 22, 2
  1351 00000593 00001702                		db 0, 0, 23, 2
  1352 00000597 00001802                		db 0, 0, 24, 2
  1353 0000059B 00001902                		db 0, 0, 25, 2
  1354 0000059F 00001A02                		db 0, 0, 26, 2
  1355 000005A3 00001B02                		db 0, 0, 27, 2
  1356 000005A7 00001C02                		db 0, 0, 28, 2
  1357 000005AB 00001D02                		db 0, 0, 29, 2
  1358 000005AF 00001E02                		db 0, 0, 30, 2
  1359 000005B3 00001F02                		db 0, 0, 31, 2
  1360 000005B7 00002002                		db 0, 0, 32, 2
  1361 000005BB 00002102                		db 0, 0, 33, 2
  1362 000005BF 00002202                		db 0, 0, 34, 2
  1363 000005C3 00002302                		db 0, 0, 35, 2
  1364 000005C7 00002402                		db 0, 0, 36, 2
  1365 000005CB 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1366                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1367                                  					; times	((4*63)	- 144) db 0
  1368                                  
  1369                                  ;-----------------------------------------------------------------------------
  1370                                  
  1371                                  ; this is a real ugly place to put this
  1372                                  ; it should really go in the bds
  1373                                  
  1374 00000637 00                      mediatype:	db 0			
  1375 00000638 00                      media_set_for_format: db 0		; 1 if we have done an int 13 set media
  1376                                  					; type for format call
  1377 00000639 00                      had_format_error: db 0			; 1 if the previous format operation
  1378                                  					; failed.
  1379                                  
  1380                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1381                                  ; the one passed by "new roms" before we perform a format operation. the old
  1382                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1383                                  ; this table does not contain the previously saved dpt.
  1384                                  		
  1385 0000063A FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1386 0000063E FF                      model_byte:	db 0FFh			; model	byte set at init time
  1387 0000063F 00                      secondary_model_byte: db 0
  1388                                  		
  1389 00000640 00                      int19sem:	db 0			; indicate that all int 19
  1390                                  					; initialization is complete
  1391                                  		
  1392                                  ;; we assume the following remain contiguous and their order doesn't change
  1393                                  ;i19_lst:
  1394                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1395                                  ;	public	int19old&aa
  1396                                  ;		db	aa&h	; store the number as a byte
  1397                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1398                                  ;	endm
  1399                                  
  1400                                  ; 21/10/2022
  1401                                  
  1402 00000641 02                      i19_lst:	db 2			
  1403                                  					; Int19old&aa
  1404 00000642 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1405 00000646 08                      		db 8
  1406 00000647 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1407 0000064B 09                      		db 9
  1408 0000064C FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1409 00000650 0A                      		db 0Ah
  1410 00000651 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1411 00000655 0B                      		db 0Bh
  1412 00000656 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1413 0000065A 0C                      		db 0Ch
  1414 0000065B FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1415 0000065F 0D                      		db 0Dh
  1416 00000660 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1417 00000664 0E                      		db 0Eh
  1418 00000665 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1419 00000669 70                      		db 70h
  1420 0000066A FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1421 0000066E 72                      		db 72h
  1422 0000066F FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1423 00000673 73                      		db 73h
  1424 00000674 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1425 00000678 74                      		db 74h
  1426 00000679 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1427 0000067D 76                      		db 76h
  1428 0000067E FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1429 00000682 77                      		db 77h
  1430 00000683 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1431                                  
  1432                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1433                                  
  1434                                  ;-----------------------------------------------------------------------------
  1435                                  
  1436 00000687 [5403]                  dskdrvs:	dw fdrive1	
  1437 00000689 [B803]                  		dw fdrive2
  1438 0000068B [1C04]                  		dw fdrive3
  1439 0000068D [8004]                  		dw fdrive4
  1440                                  
  1441                                  ;M011 -- made all hard drive stuff variable
  1442                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1443 0000068F 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1444                                  
  1445                                  ;-----------------------------------------------------------------------------
  1446                                  
  1447                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1448                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1449                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1450                                  
  1451                                  ;variables for dynamic relocatable modules
  1452                                  ;these should be stay resident.
  1453                                  
  1454 000006BB 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1455                                  					; for p12 machine
  1456                                  
  1457                                  ; data structures for real-time date and time
  1458                                  			
  1459 000006BF 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1460                                  
  1461 000006C3 0000                    month_table:	dw 0			; january
  1462 000006C5 1F00                    		dw 31			; february
  1463 000006C7 3B00                    		dw 59
  1464 000006C9 5A00                    		dw 90
  1465 000006CB 7800                    		dw 120
  1466 000006CD 9700                    		dw 151
  1467 000006CF B500                    		dw 181
  1468 000006D1 D400                    		dw 212
  1469 000006D3 F300                    		dw 243
  1470 000006D5 1101                    		dw 273
  1471 000006D7 3001                    		dw 304
  1472 000006D9 4E01                    		dw 334			; december
  1473                                  
  1474 000006DB 0000                    daycnt2:	dw 0			
  1475 000006DD 00                      feb29:		db 0			; february 29 in a leap	year flag
  1476                                  
  1477                                  ;-----------------------------------------------------------------------------
  1478                                  ;
  1479                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1480                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1481                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1482                                  
  1483                                  ; ----------------------------------------------------------------------------
  1484                                  
  1485                                  ;************************************************************************
  1486                                  ;*									*
  1487                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1488                                  ;*	  are plugged in by seg_reinit.					*
  1489                                  ;*									*
  1490                                  ;************************************************************************
  1491                                  
  1492                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1493                                  ; BIOSCODE_SEGMENT equ 2C7h
  1494                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1495                                  
  1496                                  ; 01/10/2022 - Erdogan Tan
  1497                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1498                                  ;  addresses, they will be changed to table labels later)
  1499                                  
  1500                                  ; 09/12/2022
  1501                                  %if 0
  1502                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1503                                  					; at 2C7h:43h =	70h:25B3h
  1504                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1505                                  					; at 2C7h:396h = 70h:2906h
  1506                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1507                                  					; at 2C7h:1302h	= 70h:3872h
  1508                                  i13x:		dw 154Bh, 2C7h		; i13z
  1509                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1510                                  %endif
  1511                                  
  1512                                  ; 09/12/2022
  1513 000006DE [4300]9D02              cdev:		dw chardev_entry, IOSYSCODESEG
  1514 000006E2 [8B03]9D02              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1515 000006E6 [B812]9D02              bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1516 000006EA [F514]9D02              i13x:		dw i13z, IOSYSCODESEG
  1517                                  
  1518                                  end_BC_entries:	; 15/10/2022
  1519                                  
  1520                                  ;************************************************************************
  1521                                  ;*									*
  1522                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1523                                  ;*									*
  1524                                  ;************************************************************************
  1525                                  
  1526                                  cbreak:					
  1527 000006EE 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1528                                  					; indicate break key set
  1529                                  intret:					
  1530 000006F4 CF                      		iret
  1531                                  
  1532                                  ; =============== S U B	R O U T	I N E ========================================
  1533                                  
  1534                                  
  1535                                  ;************************************************************************
  1536                                  ;*									*
  1537                                  ;*	strategy - store es:bx (device driver request packet)		*
  1538                                  ;*		     away at [ptrsav] for next driver function call	*
  1539                                  ;*									*
  1540                                  ;************************************************************************
  1541                                  
  1542                                  strategy:	; proc far		
  1543 000006F5 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1544                                  					; away at [ptrsav] for next driver function call
  1545 000006FA 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1546 000006FF CB                      		retf
  1547                                  
  1548                                  ; ----------------------------------------------------------------------------
  1549                                  
  1550                                  ;************************************************************************
  1551                                  ;*									*
  1552                                  ;*	device driver entry points. these are the initial		*
  1553                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1554                                  ;*	  in the case of our resident drivers, they'll just		*
  1555                                  ;*	  stick a fake return address on the stack which		*
  1556                                  ;*	  points to dispatch tables and possibly some unit		*
  1557                                  ;*	  numbers, and then call through a common entry point		*
  1558                                  ;*	  which can take care of a20 switching				*
  1559                                  ;*									*
  1560                                  ;************************************************************************
  1561                                  
  1562                                  ; 01/10/2022 - Erdogan Tan
  1563                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1564                                  ;  addresses, they will be changed to table labels later)
  1565                                  
  1566                                  ; 09/12/2022
  1567                                  
  1568                                  con_entry:				
  1569 00000700 E84000                  		call	cdev_entry
  1570                                  ; ----------------------------------------------------------------------------
  1571                                  		;dw 0E4h		; con_table
  1572 00000703 [E300]                  		dw con_table	
  1573                                  					; 2C7h:0E4h = 70h:2654h
  1574                                  ; ----------------------------------------------------------------------------
  1575                                  
  1576                                  prn0_entry:				
  1577 00000705 E83B00                  		call	cdev_entry
  1578                                  ; ----------------------------------------------------------------------------
  1579                                  		;dw 0FBh		; prn_table
  1580 00000708 [FA00]                  		dw prn_table
  1581                                  					; 2C7h:0FBh = 70h:266Bh
  1582 0000070A 0000                    		db 0, 0
  1583                                  ; ----------------------------------------------------------------------------
  1584                                  
  1585                                  prn1_entry:				
  1586 0000070C E83400                  		call	cdev_entry
  1587                                  ; ----------------------------------------------------------------------------
  1588                                  		;dw 0FBh		; prn_table
  1589 0000070F [FA00]                  		dw prn_table
  1590                                  					; 2C7h:0FBh = 70h:266Bh
  1591 00000711 0001                    		db 0, 1
  1592                                  ; ----------------------------------------------------------------------------
  1593                                  
  1594                                  prn2_entry:				
  1595 00000713 E82D00                  		call	cdev_entry
  1596                                  ; ----------------------------------------------------------------------------
  1597                                  		;dw 0FBh		; prn_table
  1598 00000716 [FA00]                  		dw prn_table
  1599                                  					; 2C7h:0FBh = 70h:266Bh
  1600 00000718 0102                    		db 1, 2
  1601                                  ; ----------------------------------------------------------------------------
  1602                                  
  1603                                  prn3_entry:				
  1604 0000071A E82600                  		call	cdev_entry
  1605                                  ; ----------------------------------------------------------------------------
  1606                                  		;dw 0FBh		; prn_table
  1607 0000071D [FA00]                  		dw prn_table
  1608                                  					; 2C7h:0FBh = 70h:266Bh
  1609 0000071F 0203                    		db 2, 3
  1610                                  ; ----------------------------------------------------------------------------
  1611                                  
  1612                                  aux0_entry:				
  1613 00000721 E81F00                  		call	cdev_entry
  1614                                  ; ----------------------------------------------------------------------------
  1615                                  		;dw 130h		; aux_table
  1616 00000724 [2F01]                  		dw aux_table
  1617                                  					; 2C7h:130h = 70h:26A0h
  1618 00000726 00                      		db 0
  1619                                  ; ----------------------------------------------------------------------------
  1620                                  
  1621                                  aux1_entry:				
  1622 00000727 E81900                  		call	cdev_entry
  1623                                  ; ----------------------------------------------------------------------------
  1624                                  		;dw 130h		; aux_table
  1625 0000072A [2F01]                  		dw aux_table
  1626                                  					; 2C7h:130h = 70h:26A0h
  1627 0000072C 01                      		db 1
  1628                                  ; ----------------------------------------------------------------------------
  1629                                  
  1630                                  aux2_entry:				
  1631 0000072D E81300                  		call	cdev_entry
  1632                                  ; ----------------------------------------------------------------------------
  1633                                  		;dw 130h		; aux_table
  1634 00000730 [2F01]                  		dw aux_table
  1635                                  					; 2C7h:130h = 70h:26A0h
  1636 00000732 02                      		db 2
  1637                                  ; ----------------------------------------------------------------------------
  1638                                  
  1639                                  aux3_entry:				
  1640 00000733 E80D00                  		call	cdev_entry
  1641                                  ; ----------------------------------------------------------------------------
  1642                                  		;dw 130h		; aux_table
  1643 00000736 [2F01]                  		dw aux_table
  1644                                  					; 2C7h:130h = 70h:26A0h
  1645 00000738 03                      		db 3
  1646                                  ; ----------------------------------------------------------------------------
  1647                                  
  1648                                  tim_entry:				
  1649 00000739 E80700                  		call	cdev_entry
  1650                                  ; ----------------------------------------------------------------------------
  1651                                  		;dw 147h		; tim_table
  1652 0000073C [4601]                  		dw tim_table
  1653                                  					; 2C7h:147h = 70h:26B7h
  1654                                  ; ----------------------------------------------------------------------------
  1655                                  
  1656                                  ; 15/10/2022
  1657                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1658                                  ; 09/12/2022
  1659                                  DSKTBL equ dsktbl
  1660                                  
  1661                                  dsk_entry:				
  1662 0000073E E80200                  		call	cdev_entry
  1663                                  ; ----------------------------------------------------------------------------
  1664                                  		;dw 4A2h		; dsktbl
  1665 00000741 [9604]                  		dw DSKTBL		; 09/12/2022
  1666                                  					; 2C7h:4A2h = 70h:2A12h
  1667                                  
  1668                                  ; =============== S U B	R O U T	I N E ========================================
  1669                                  
  1670                                  ;************************************************************************
  1671                                  ;*									*
  1672                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1673                                  ;*	This code assumes that if Segment of Device request packet is	*
  1674                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1675                                  ;*	A20 is already on.						*
  1676                                  ;*									*
  1677                                  ;************************************************************************
  1678                                  
  1679                                  cdev_entry:	; proc near		
  1680 00000743 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1681 00000749 740D                    		jz	short ce_enter_codeseg
  1682                                  				; optimized for DOS in HMA
  1683 0000074B 50                      		push	ax
  1684 0000074C 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1685 00000750 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1686 00000755 58                      		pop	ax
  1687 00000756 7505                    		jnz	short not_from_dos
  1688                                  				; jump is coded this way to fall thru
  1689                                  				; in 99.99% of the cases
  1690                                  ce_enter_codeseg:
  1691 00000758 2EFF2E[DE06]            		jmp	far [cs:cdev]			
  1692                                  		;jmp	dword ptr cs:cdev
  1693                                  ;-----------------------------------------------------------------------------
  1694                                  
  1695                                  not_from_dos:				
  1696 0000075D E86200                  		call	EnsureA20On
  1697 00000760 EBF6                    		jmp	short ce_enter_codeseg
  1698                                  
  1699                                  ;************************************************************************
  1700                                  ;*									*
  1701                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1702                                  ;*	   character in al on the display using int 10h ttywrite	*
  1703                                  ;*									*
  1704                                  ;************************************************************************
  1705                                  
  1706                                  outchr:					
  1707 00000762 50                      		push	ax		; int 29h handler
  1708 00000763 56                      		push	si
  1709 00000764 57                      		push	di
  1710 00000765 55                      		push	bp
  1711 00000766 53                      		push	bx
  1712 00000767 B40E                    		mov	ah, 0Eh
  1713 00000769 BB0700                  		mov	bx, 7
  1714 0000076C CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1715                                  					; AL = character, BH = display page (alpha modes)
  1716                                  					; BL = foreground color	(graphics modes)
  1717 0000076E 5B                      		pop	bx
  1718 0000076F 5D                      		pop	bp
  1719 00000770 5F                      		pop	di
  1720 00000771 5E                      		pop	si
  1721 00000772 58                      		pop	ax
  1722 00000773 CF                      		iret
  1723                                  ;-----------------------------------------------------------------------------
  1724                                  
  1725                                  ;************************************************************************
  1726                                  ;*									*
  1727                                  ;*	block13 - our int13 hooker					*
  1728                                  ;*									*
  1729                                  ;************************************************************************
  1730                                  
  1731                                  block13:				
  1732 00000774 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1733 0000077A 7408                    		jz	short skipa20
  1734 0000077C E85400                  		call	IsA20Off	; A20 Off?
  1735 0000077F 7503                    		jnz	short skipa20
  1736 00000781 E84300                  		call	EnableA20	; assure a20 enabled
  1737                                  
  1738                                  skipa20:				
  1739 00000784 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1740 00000789 9C                      		pushf			; fake interrupt
  1741 0000078A 2EFF1E[EA06]            		call	far [cs:i13x]
  1742                                  		;call	dword ptr cs:i13x
  1743                                  					; call through Bios_Code entry table
  1744 0000078F 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1745 00000794 CA0200                  		retf	2
  1746                                  
  1747                                  ; =============== S U B	R O U T	I N E =======================================
  1748                                  
  1749                                  ; the int13 hook calls back here to call-through to the ROM
  1750                                  ; this is necessary because some people have extended their
  1751                                  ; ROM BIOSs to use ds as a parameter/result register and
  1752                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1753                                  
  1754                                  call_orig13:	; proc far		
  1755 00000797 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1756 0000079B 9C                      		pushf			; simulate an int13
  1757 0000079C 2EFF1E[B400]            		call	far [cs:Orig13]
  1758                                  		;call	cs:Orig13
  1759 000007A1 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1760 000007A6 0E                      		push	cs
  1761 000007A7 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1762                                  
  1763 000007A8 9C                      		pushf
  1764                                  		; 10/12/2022
  1765                                  		; ds = cs
  1766 000007A9 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1767                                  		;cmp	byte [cs:inHMA], 0
  1768 000007AE 7408                    		jz	short corig13_popf_retf
  1769 000007B0 E82000                  		call	IsA20Off
  1770 000007B3 7503                    		jnz	short corig13_popf_retf
  1771 000007B5 E80F00                  		call	EnableA20
  1772                                  corig13_popf_retf:			
  1773 000007B8 9D                      		popf
  1774 000007B9 CB                      		retf
  1775                                  
  1776                                  ;-----------------------------------------------------------------------------
  1777                                  
  1778                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1779                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1780                                  
  1781 000007BA 9000FFFF                HiMem:		dd 0FFFF0090h		
  1782 000007BE 80000000                LoMem:		dd 80h
  1783                                  
  1784                                  ; ----------------------------------------------------------------------------			
  1785                                  
  1786                                  ; =============== S U B	R O U T	I N E ========================================
  1787                                  
  1788                                  
  1789                                  ;************************************************************************
  1790                                  ;*									*
  1791                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1792                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1793                                  ;*									*
  1794                                  ;************************************************************************
  1795                                  
  1796                                  EnsureA20On:	; proc near		
  1797 000007C2 E80E00                  		call	IsA20Off
  1798                                  		;jz	short EnableA20
  1799                                  		;retn
  1800                                  		; 18/12/2022
  1801 000007C5 750B                    		jnz	short A20On_retn	
  1802                                  
  1803                                  ; =============== S U B	R O U T	I N E ========================================
  1804                                  
  1805                                  
  1806                                  EnableA20:	; proc near		
  1807 000007C7 50                      		push	ax
  1808 000007C8 53                      		push	bx
  1809 000007C9 B405                    		mov	ah, 5	 ; local enable a20
  1810                                  		;call	cs:xms
  1811 000007CB 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1812 000007D0 5B                      		pop	bx
  1813 000007D1 58                      		pop	ax
  1814                                  A20On_retn:	; 18/12/2022	
  1815 000007D2 C3                      		retn
  1816                                  
  1817                                  ; =============== S U B	R O U T	I N E ========================================
  1818                                  
  1819                                  
  1820                                  IsA20Off:	; proc near		
  1821 000007D3 1E                      		push	ds
  1822 000007D4 06                      		push	es
  1823 000007D5 51                      		push	cx
  1824 000007D6 56                      		push	si
  1825 000007D7 57                      		push	di
  1826 000007D8 2EC536[BA07]            		lds	si, [cs:HiMem]
  1827 000007DD 2EC43E[BE07]            		les	di, [cs:LoMem]
  1828 000007E2 B90800                  		mov	cx, 8
  1829 000007E5 F3A7                    		repe cmpsw
  1830 000007E7 5F                      		pop	di
  1831 000007E8 5E                      		pop	si
  1832 000007E9 59                      		pop	cx
  1833 000007EA 07                      		pop	es
  1834 000007EB 1F                      		pop	ds
  1835 000007EC C3                      		retn
  1836                                  
  1837                                  ; ----------------------------------------------------------------------------
  1838                                  
  1839                                  DisableA20:
  1840 000007ED 50                      		push	ax
  1841 000007EE 53                      		push	bx
  1842 000007EF B406                    		mov	ah, 6		; local disable A20
  1843 000007F1 2EFF1E[0E00]            		call	far [cs:xms]
  1844                                  		;call	cs:xms
  1845 000007F6 5B                      		pop	bx
  1846 000007F7 58                      		pop	ax
  1847 000007F8 C3                      		retn
  1848                                  
  1849                                  ; ----------------------------------------------------------------------------
  1850                                  
  1851                                  ;************************************************************************
  1852                                  ;*									*
  1853                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1854                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1855                                  ;*									*
  1856                                  ;************************************************************************
  1857                                  
  1858                                  int19:					
  1859 000007F9 0E                      		push	cs
  1860 000007FA 1F                      		pop	ds
  1861 000007FB 8E06[1A00]              		mov	es, [zeroseg]	; 16/10/2022
  1862 000007FF B90500                  		mov	cx, 5		; NUMROMVECTORS
  1863                                  		;mov	si, offset RomVectors
  1864 00000802 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1865                                  next_int:				
  1866 00000805 AC                      		lodsb			; get int number
  1867 00000806 98                      		cbw			; assume < 128
  1868 00000807 D1E0                    		shl	ax, 1
  1869 00000809 D1E0                    		shl	ax, 1		; int *	4
  1870 0000080B 89C7                    		mov	di, ax
  1871 0000080D AD                      		lodsw
  1872 0000080E AB                      		stosw
  1873 0000080F AD                      		lodsw
  1874 00000810 AB                      		stosw			; install the saved vector
  1875 00000811 E2F2                    		loop	next_int
  1876 00000813 803E[4006]00            		cmp	byte [int19sem], 0 ; 19/10/2022
  1877 00000818 7422                    		jz	short doint19
  1878 0000081A BE[4106]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1879                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1880 0000081D B90E00                  		mov	cx, 14		; num_i19
  1881                                  
  1882                                  i19_restore_loop:			
  1883 00000820 AC                      		lodsb			; get interrupt	number
  1884 00000821 98                      		cbw			; assume < 128
  1885 00000822 89C7                    		mov	di, ax
  1886 00000824 AD                      		lodsw			; get original vector offset
  1887 00000825 89C3                    		mov	bx, ax		; save it
  1888 00000827 AD                      		lodsw
  1889 00000828 83FBFF                  		cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1890 0000082B 740D                    		jz	short i19_restor_1 ; opt no need to check selector too
  1891 0000082D 83F8FF                  		cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1892 00000830 7408                    		jz	short i19_restor_1
  1893 00000832 01FF                    		add	di, di
  1894 00000834 01FF                    		add	di, di
  1895 00000836 93                      		xchg	ax, bx
  1896 00000837 AB                      		stosw
  1897 00000838 93                      		xchg	ax, bx
  1898 00000839 AB                      		stosw			; put the vector back
  1899                                  
  1900                                  i19_restor_1:				
  1901 0000083A E2E4                    		loop	i19_restore_loop
  1902                                  
  1903                                  doint19:				
  1904 0000083C 803E[0D00]00            		cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1905 00000841 7403                    		jz	short SkipVDisk
  1906 00000843 E83000                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1907                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1908                                  					; the memory above 1MB during a	warm boot.
  1909                                  SkipVDisk:				
  1910 00000846 CD19                    		int	19h		; DISK BOOT
  1911                                  					; causes reboot	of disk	system
  1912                                  
  1913                                  ; =============== S U B	R O U T	I N E ========================================
  1914                                  
  1915                                  ;-----------------------------------------------------------------------------
  1916                                  ;
  1917                                  ; procedure : int15
  1918                                  ;
  1919                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1920                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1921                                  ;		is running high, it Erases the VDISK header
  1922                                  ;		present at 1MB boundary
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------
  1925                                  
  1926                                  ; 16/10/2022
  1927                                  ;DELKEY		equ	53h
  1928                                  ;ROMDATASEG	equ	40h
  1929                                  KBFLAG		equ	17h
  1930                                  ;CTRLSTATE	equ	04h
  1931                                  ;ALTSTATE	equ	08h
  1932                                  
  1933                                  Int15:		; proc near		
  1934                                  		;cmp	ax, 4F00h+DELKEY
  1935 00000848 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1936 0000084B 7405                    		jz	short int15_1
  1937 0000084D 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1938                                  		;jmp	cs:Old15
  1939                                  ; ----------------------------------------------------------------------------
  1940                                  
  1941                                  int15_1:				
  1942 00000852 1E                      		push	ds
  1943 00000853 50                      		push	ax
  1944 00000854 B84000                  		mov	ax, 40h		; ROMDATASEG
  1945 00000857 8ED8                    		mov	ds, ax
  1946                                  		;mov	al, ds:17h	; [KBFLAG]
  1947                                  		; 16/10/2022
  1948 00000859 A01700                  		mov	al, [KBFLAG]
  1949 0000085C 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1950 0000085E 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1951 00000860 750C                    		jnz	short int15_2
  1952 00000862 0E                      		push	cs
  1953 00000863 1F                      		pop	ds
  1954 00000864 803E[0D00]00            		cmp	byte [inHMA], 0	; is DOS running from HMA
  1955 00000869 7403                    		jz	short int15_2
  1956 0000086B E80800                  		call	EraseVDiskHead
  1957                                  int15_2:				
  1958 0000086E 58                      		pop	ax
  1959 0000086F 1F                      		pop	ds
  1960 00000870 F9                      		stc
  1961 00000871 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1962                                  		;jmp	cs:Old15
  1963                                  
  1964                                  ; =============== S U B	R O U T	I N E ========================================
  1965                                  
  1966                                  ;-----------------------------------------------------------------------------
  1967                                  ;
  1968                                  ; procedure : EraseVDiskHead
  1969                                  ;
  1970                                  ;		Erases the VDisk Header present in the 1MB boundary
  1971                                  ;
  1972                                  ;-----------------------------------------------------------------------------
  1973                                  
  1974                                  EraseVDiskHead:	; proc near		
  1975 00000876 50                      		push	ax
  1976 00000877 51                      		push	cx
  1977 00000878 57                      		push	di
  1978 00000879 06                      		push	es
  1979 0000087A E845FF                  		call	EnsureA20On
  1980 0000087D B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  1981 00000880 8EC0                    		mov	es, ax
  1982 00000882 BF1000                  		mov	di, 10h		; point	to VDISK header
  1983 00000885 B91000                  		mov	cx, 10h		; size of vdisk	header
  1984 00000888 31C0                    		xor	ax, ax
  1985 0000088A F3AB                    		rep stosw		; clear	it
  1986 0000088C 07                      		pop	es
  1987 0000088D 5F                      		pop	di
  1988 0000088E 59                      		pop	cx
  1989 0000088F 58                      		pop	ax
  1990 00000890 C3                      		retn
  1991                                  
  1992                                  ; ----------------------------------------------------------------------------
  1993                                  
  1994                                  ;************************************************************************
  1995                                  ;*									*
  1996                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  1997                                  ;*	  it returns through one of the three functions that follow.	*
  1998                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  1999                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2000                                  ;*									*
  2001                                  ;************************************************************************
  2002                                  
  2003                                  int_2f:		
  2004 00000891 2EFF2E[E606]            		jmp	far [cs:bcode_i2f] ; 16/10/2022			
  2005                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2006                                  
  2007                                  ; ----------------------------------------------------------------------------
  2008                                  
  2009                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2010                                  ; note:  is it really necessary to transiton out and then back in?
  2011                                  ;	 It's not as if this is a really speed critical function.
  2012                                  ;	 might as well do whatever's most compact.
  2013                                  
  2014                                  i2f_dskentry:				
  2015 00000896 E9A5FE                  		jmp	dsk_entry
  2016                                  
  2017                                  ; ----------------------------------------------------------------------------
  2018                                  
  2019                                  ;************************************************************************
  2020                                  ;*									*
  2021                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2022                                  ;*		is done. presently does nothing. affects no		*
  2023                                  ;*		registers!						*
  2024                                  ;*									*
  2025                                  ;************************************************************************
  2026                                  
  2027                                  ; 09/12/2022
  2028                                  ; re_init_:
  2029                                  re_init:				; called back by sysinit after
  2030 00000899 CB                      		retf			; a bunch of stuff is done.
  2031                                  					; presently does nothing
  2032                                  
  2033                                  ; ----------------------------------------------------------------------------
  2034                                  
  2035                                  ;SR; WIN386 support
  2036                                  
  2037                                  ; WIN386 instance data structure
  2038                                  ;
  2039                                  ; Here is a Win386 startup info structure which we set up and to which
  2040                                  ; we return a pointer when Win386 initializes.
  2041                                  
  2042 0000089A 0300                    Win386_SI:	db 3, 0			; SI_Version
  2043                                  					; Startup Info for Win386
  2044 0000089C 00000000                SI_Next:	dd 0			; pointer to next info structure
  2045 000008A0 00000000                		dd 0			; a field we don't need
  2046 000008A4 00000000                		dd 0			; another field	we don't need
  2047 000008A8 [AC08]                  SI_Instance:	dw Instance_Table
  2048 000008AA 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2049                                  
  2050                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2051                                  ; areas. Note that the address and size of the hardware stacks must
  2052                                  ; be calculated and inserted at boot time.
  2053                                  
  2054 000008AC 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2055 000008B0 0200                    		dw 2			; ... 2	bytes
  2056 000008B2 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2057 000008B6 1400                    		dw 14h			; ... 14H bytes
  2058 000008B8 [0C00]                  		dw altah		; a con	device buffer...
  2059 000008BA 7000                    		dw 70h			; Bios_Data segment
  2060 000008BC 0100                    		dw 1			; ... 1 byte
  2061                                  
  2062                                  NextStack:
  2063                                  
  2064                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2065                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2066                                  ;	That's just fine as long as these are the last items
  2067                                  ;	in the instance list since the first item is initialized
  2068                                  ;	to 0000 at load time.
  2069                                  
  2070 000008BE 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2071 000008C2 0200                    		dw 2			; ... 2 bytes
  2072 000008C4 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2073 000008C8 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2074 000008CA 00000000                		dd 0			; terminate the	instance table
  2075                                  
  2076                                  					;SR;
  2077 000008CE 00                      IsWin386:	db 0			; Flag to indicate whether
  2078                                  					; Win386 is running or not
  2079                                  ;-----------------------------------------------------------------------------
  2080                                  
  2081                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2082                                  ;when we call it including checking of A20. The code being only about 
  2083                                  ;30 bytes, we might as well put it in BIOS_DATA
  2084                                  
  2085                                  V86_Crit_SetFocus:			
  2086 000008CF 57                      		push	di
  2087 000008D0 06                      		push	es
  2088 000008D1 53                      		push	bx
  2089 000008D2 50                      		push	ax
  2090 000008D3 31FF                    		xor	di, di
  2091 000008D5 8EC7                    		mov	es, di
  2092 000008D7 BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2093 000008DA B88416                  		mov	ax, 1684h	; Get API entry	point
  2094 000008DD CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2095                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2096                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2097 000008DF 8CC0                    		mov	ax, es
  2098 000008E1 09F8                    		or	ax, di
  2099 000008E3 740B                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2100                                  					; Set up stack frame to	simulate a call.
  2101 000008E5 0E                      		push	cs
  2102                                  		;mov	ax, offset Skip
  2103 000008E6 B8[F008]                		mov	ax, Skip
  2104 000008E9 50                      		push	ax
  2105 000008EA 06                      		push	es
  2106 000008EB 57                      		push	di		; API far call address
  2107 000008EC B80100                  		mov	ax, 1		; SetFocus function number
  2108 000008EF CB                      		retf			; do the call
  2109                                  ;-----------------------------------------------------------------------------
  2110                                  
  2111                                  Skip:					
  2112 000008F0 58                      		pop	ax
  2113 000008F1 5B                      		pop	bx
  2114 000008F2 07                      		pop	es
  2115 000008F3 5F                      		pop	di
  2116 000008F4 CB                      		retf
  2117                                  
  2118                                  ;End WIN386 support
  2119                                  
  2120                                  ; ----------------------------------------------------------------------------
  2121                                  
  2122                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2123                                  
  2124                                  ; 09/12/2022
  2125                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2126                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2127                                  ; (followings are in sysinit segment)
  2128                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2129                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2130                                  ;DEVICELIST	equ 273h
  2131                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2132                                  ;MEMORYSIZE	equ 292h	
  2133                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2134                                  ;DEFAULTDRIVE	equ 296h
  2135                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2136                                  ;;currentdoslocation equ 271h
  2137                                  ;CURRENTDOSLOCATION equ 271h
  2138                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2139                                  ;SYSINITSTART	equ 267h
  2140                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2141                                  ; 18/10/2022
  2142                                  ;toomanydrivesflag equ 3FFh 
  2143                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2144                                  
  2145                                  ; ----------------------------------------------------------------------------
  2146                                  
  2147 000008F5 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2148                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2149                                  					; (procedure in	SYSINIT	segment)
  2150                                  ; 17/10/2022
  2151 000008F7 [280A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2152 000008F9 3D04                    		dw SYSINITSEG	
  2153                                  
  2154                                  ;SR;
  2155                                  ; A communication block has been setup between the DOS and the BIOS. All
  2156                                  ;the data starting from SysinitPresent will be part of the data block. 
  2157                                  ;Right now, this is the only data being communicated. It can be expanded 
  2158                                  ;later to add more stuff
  2159                                  
  2160 000008FB 00                      SysinitPresent:	db 0			
  2161 000008FC 0000                    endfloppy:	db 0, 0
  2162                                  
  2163                                  ; ----------------------------------------------------------------------------			
  2164                                  
  2165                                  ; Bios_Data ends
  2166                                  	
  2167                                  ; Possibly disposable BIOS data
  2168                                  ; This data follows the	regular	BIOS data,
  2169                                  ; and is part of the same group.
  2170                                  
  2171 000008FE 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2171 00000907 202000             
  2172                                  					; null volume id
  2173 0000090A 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2173 00000913 202000             
  2174                                  					; vid scratch buffer
  2175 00000916 80                      harddrv:	db 80h			
  2176                                  
  2177                                  end96tpi:
  2178                                  
  2179                                  ;;*********************************************************************
  2180                                  ;;memory allocation for bdss
  2181                                  ;;*********************************************************************
  2182                                  ;
  2183                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2184                                  ;
  2185                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2186                                  ;
  2187                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2188                                  
  2189 00000917 FFFF                    bdss:		dw 0FFFFh		
  2190 00000919 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2190 00000922 0210000000F8       
  2191 00000928 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2191 00000931 000000000000000003 
  2192 0000093A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2192 00000943 00000000000000     
  2193 0000094A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2193 00000953 000000000000000000 
  2194 0000095C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2194 00000965 4E414D45           
  2195 00000969 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2195 00000972 46415431           
  2196 00000976 3220202000              		db 32h,	20h, 20h, 20h, 0
  2197 0000097B FFFF                    		dw 0FFFFh
  2198 0000097D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2198 00000986 0210000000F8       
  2199 0000098C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2199 00000995 000000000000000003 
  2200 0000099E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2200 000009A7 00000000000000     
  2201 000009AE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2201 000009B7 000000000000000000 
  2202 000009C0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2202 000009C9 4E414D45           
  2203 000009CD 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2203 000009D6 46415431           
  2204 000009DA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2205 000009DF FFFF                    		dw 0FFFFh
  2206 000009E1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2206 000009EA 0210000000F8       
  2207 000009F0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2207 000009F9 000000000000000003 
  2208 00000A02 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2208 00000A0B 00000000000000     
  2209 00000A12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2209 00000A1B 000000000000000000 
  2210 00000A24 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2210 00000A2D 4E414D45           
  2211 00000A31 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2211 00000A3A 46415431           
  2212 00000A3E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2213 00000A43 FFFF                    		dw 0FFFFh
  2214 00000A45 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2214 00000A4E 0210000000F8       
  2215 00000A54 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2215 00000A5D 000000000000000003 
  2216 00000A66 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2216 00000A6F 00000000000000     
  2217 00000A76 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2217 00000A7F 000000000000000000 
  2218 00000A88 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2218 00000A91 4E414D45           
  2219 00000A95 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2219 00000A9E 46415431           
  2220 00000AA2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2221 00000AA7 FFFF                    		dw 0FFFFh
  2222 00000AA9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2222 00000AB2 0210000000F8       
  2223 00000AB8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2223 00000AC1 000000000000000003 
  2224 00000ACA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2224 00000AD3 00000000000000     
  2225 00000ADA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2225 00000AE3 000000000000000000 
  2226 00000AEC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2226 00000AF5 4E414D45           
  2227 00000AF9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2227 00000B02 46415431           
  2228 00000B06 3220202000              		db 32h,	20h, 20h, 20h, 0
  2229 00000B0B FFFF                    		dw 0FFFFh
  2230 00000B0D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2230 00000B16 0210000000F8       
  2231 00000B1C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2231 00000B25 000000000000000003 
  2232 00000B2E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2232 00000B37 00000000000000     
  2233 00000B3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2233 00000B47 000000000000000000 
  2234 00000B50 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2234 00000B59 4E414D45           
  2235 00000B5D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2235 00000B66 46415431           
  2236 00000B6A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2237 00000B6F FFFF                    		dw 0FFFFh
  2238 00000B71 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2238 00000B7A 0210000000F8       
  2239 00000B80 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2239 00000B89 000000000000000003 
  2240 00000B92 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2240 00000B9B 00000000000000     
  2241 00000BA2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2241 00000BAB 000000000000000000 
  2242 00000BB4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2242 00000BBD 4E414D45           
  2243 00000BC1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2243 00000BCA 46415431           
  2244 00000BCE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2245 00000BD3 FFFF                    		dw 0FFFFh
  2246 00000BD5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2246 00000BDE 0210000000F8       
  2247 00000BE4 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2247 00000BED 000000000000000003 
  2248 00000BF6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2248 00000BFF 00000000000000     
  2249 00000C06 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2249 00000C0F 000000000000000000 
  2250 00000C18 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2250 00000C21 4E414D45           
  2251 00000C25 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2251 00000C2E 46415431           
  2252 00000C32 3220202000              		db 32h,	20h, 20h, 20h, 0
  2253 00000C37 FFFF                    		dw 0FFFFh
  2254 00000C39 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2254 00000C42 0210000000F8       
  2255 00000C48 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2255 00000C51 000000000000000003 
  2256 00000C5A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2256 00000C63 00000000000000     
  2257 00000C6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2257 00000C73 000000000000000000 
  2258 00000C7C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2258 00000C85 4E414D45           
  2259 00000C89 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2259 00000C92 46415431           
  2260 00000C96 3220202000              		db 32h,	20h, 20h, 20h, 0
  2261 00000C9B FFFF                    		dw 0FFFFh
  2262 00000C9D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2262 00000CA6 0210000000F8       
  2263 00000CAC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2263 00000CB5 000000000000000003 
  2264 00000CBE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2264 00000CC7 00000000000000     
  2265 00000CCE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2265 00000CD7 000000000000000000 
  2266 00000CE0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2266 00000CE9 4E414D45           
  2267 00000CED 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2267 00000CF6 46415431           
  2268 00000CFA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2269 00000CFF FFFF                    		dw 0FFFFh
  2270 00000D01 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2270 00000D0A 0210000000F8       
  2271 00000D10 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2271 00000D19 000000000000000003 
  2272 00000D22 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2272 00000D2B 00000000000000     
  2273 00000D32 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2273 00000D3B 000000000000000000 
  2274 00000D44 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2274 00000D4D 4E414D45           
  2275 00000D51 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2275 00000D5A 46415431           
  2276 00000D5E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2277 00000D63 FFFF                    		dw 0FFFFh
  2278 00000D65 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2278 00000D6E 0210000000F8       
  2279 00000D74 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2279 00000D7D 000000000000000003 
  2280 00000D86 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2280 00000D8F 00000000000000     
  2281 00000D96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2281 00000D9F 000000000000000000 
  2282 00000DA8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2282 00000DB1 4E414D45           
  2283 00000DB5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2283 00000DBE 46415431           
  2284 00000DC2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2285 00000DC7 FFFF                    		dw 0FFFFh
  2286 00000DC9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2286 00000DD2 0210000000F8       
  2287 00000DD8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2287 00000DE1 000000000000000003 
  2288 00000DEA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2288 00000DF3 00000000000000     
  2289 00000DFA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2289 00000E03 000000000000000000 
  2290 00000E0C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2290 00000E15 4E414D45           
  2291 00000E19 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2291 00000E22 46415431           
  2292 00000E26 3220202000              		db 32h,	20h, 20h, 20h, 0
  2293 00000E2B FFFF                    		dw 0FFFFh
  2294 00000E2D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2294 00000E36 0210000000F8       
  2295 00000E3C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2295 00000E45 000000000000000003 
  2296 00000E4E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2296 00000E57 00000000000000     
  2297 00000E5E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2297 00000E67 000000000000000000 
  2298 00000E70 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2298 00000E79 4E414D45           
  2299 00000E7D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2299 00000E86 46415431           
  2300 00000E8A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2301 00000E8F FFFF                    		dw 0FFFFh
  2302 00000E91 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2302 00000E9A 0210000000F8       
  2303 00000EA0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2303 00000EA9 000000000000000003 
  2304 00000EB2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2304 00000EBB 00000000000000     
  2305 00000EC2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2305 00000ECB 000000000000000000 
  2306 00000ED4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2306 00000EDD 4E414D45           
  2307 00000EE1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2307 00000EEA 46415431           
  2308 00000EEE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2309 00000EF3 FFFF                    		dw 0FFFFh
  2310 00000EF5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2310 00000EFE 0210000000F8       
  2311 00000F04 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2311 00000F0D 000000000000000003 
  2312 00000F16 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2312 00000F1F 00000000000000     
  2313 00000F26 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2313 00000F2F 000000000000000000 
  2314 00000F38 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2314 00000F41 4E414D45           
  2315 00000F45 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2315 00000F4E 46415431           
  2316 00000F52 3220202000              		db 32h,	20h, 20h, 20h, 0
  2317 00000F57 FFFF                    		dw 0FFFFh
  2318 00000F59 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2318 00000F62 0210000000F8       
  2319 00000F68 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2319 00000F71 000000000000000003 
  2320 00000F7A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2320 00000F83 00000000000000     
  2321 00000F8A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2321 00000F93 000000000000000000 
  2322 00000F9C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2322 00000FA5 4E414D45           
  2323 00000FA9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2323 00000FB2 46415431           
  2324 00000FB6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2325 00000FBB FFFF                    		dw 0FFFFh
  2326 00000FBD 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2326 00000FC6 0210000000F8       
  2327 00000FCC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2327 00000FD5 000000000000000003 
  2328 00000FDE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2328 00000FE7 00000000000000     
  2329 00000FEE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2329 00000FF7 000000000000000000 
  2330 00001000 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2330 00001009 4E414D45           
  2331 0000100D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2331 00001016 46415431           
  2332 0000101A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2333 0000101F FFFF                    		dw 0FFFFh
  2334 00001021 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2334 0000102A 0210000000F8       
  2335 00001030 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2335 00001039 000000000000000003 
  2336 00001042 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2336 0000104B 00000000000000     
  2337 00001052 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2337 0000105B 000000000000000000 
  2338 00001064 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2338 0000106D 4E414D45           
  2339 00001071 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2339 0000107A 46415431           
  2340 0000107E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2341 00001083 FFFF                    		dw 0FFFFh
  2342 00001085 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2342 0000108E 0210000000F8       
  2343 00001094 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2343 0000109D 000000000000000003 
  2344 000010A6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2344 000010AF 00000000000000     
  2345 000010B6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2345 000010BF 000000000000000000 
  2346 000010C8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2346 000010D1 4E414D45           
  2347 000010D5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2347 000010DE 46415431           
  2348 000010E2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2349 000010E7 FFFF                    		dw 0FFFFh
  2350 000010E9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2350 000010F2 0210000000F8       
  2351 000010F8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2351 00001101 000000000000000003 
  2352 0000110A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2352 00001113 00000000000000     
  2353 0000111A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2353 00001123 000000000000000000 
  2354 0000112C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2354 00001135 4E414D45           
  2355 00001139 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2355 00001142 46415431           
  2356 00001146 3220202000              		db 32h,	20h, 20h, 20h, 0
  2357 0000114B FFFF                    		dw 0FFFFh
  2358 0000114D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2358 00001156 0210000000F8       
  2359 0000115C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2359 00001165 000000000000000003 
  2360 0000116E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2360 00001177 00000000000000     
  2361 0000117E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2361 00001187 000000000000000000 
  2362 00001190 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2362 00001199 4E414D45           
  2363 0000119D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2363 000011A6 46415431           
  2364 000011AA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2365 000011AF FFFF                    		dw 0FFFFh
  2366 000011B1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2366 000011BA 0210000000F8       
  2367 000011C0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2367 000011C9 000000000000000003 
  2368 000011D2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2368 000011DB 00000000000000     
  2369 000011E2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2369 000011EB 000000000000000000 
  2370 000011F4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2370 000011FD 4E414D45           
  2371 00001201 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2371 0000120A 46415431           
  2372 0000120E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2373 00001213 FFFF                    		dw 0FFFFh
  2374 00001215 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2374 0000121E 0210000000F8       
  2375 00001224 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2375 0000122D 000000000000000003 
  2376 00001236 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2376 0000123F 00000000000000     
  2377 00001246 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2377 0000124F 000000000000000000 
  2378 00001258 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2378 00001261 4E414D45           
  2379 00001265 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2379 0000126E 46415431           
  2380 00001272 3220202000              		db 32h,	20h, 20h, 20h, 0
  2381 00001277 FFFF                    		dw 0FFFFh
  2382 00001279 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2382 00001282 0210000000F8       
  2383 00001288 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2383 00001291 000000000000000003 
  2384 0000129A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2384 000012A3 00000000000000     
  2385 000012AA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2385 000012B3 000000000000000000 
  2386 000012BC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2386 000012C5 4E414D45           
  2387 000012C9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2387 000012D2 46415431           
  2388 000012D6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2389 000012DB 00                      		db 0
  2390                                  
  2391                                  ;---------------------------------------------------------------------------
  2392                                  ; Possibly disposable data, goes at end of data group
  2393                                  ;***************************************************************************
  2394                                  
  2395                                  ; Possibly disposable data, goes at end of data group
  2396                                  
  2397                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2398                                  ;
  2399                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2400                                  ;		(dl) = drive number (80h or 81h).
  2401                                  ;		(dh) = head number.
  2402                                  ;		(ch) = cylinder number.
  2403                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2404                                  ;		(al) = number of sectors.
  2405                                  ;		(es:bx) = address of read buffer.
  2406                                  ;		for more on register contents see rom bios listing.
  2407                                  ;		stack set up for return by an iret.
  2408                                  ;
  2409                                  ;	exit:	(ah) = status of current operation.
  2410                                  ;		(cy) = 1 if failed, 0 if successful.
  2411                                  ;		for other register contents see rom bios listing.
  2412                                  ;
  2413                                  ;	uses:	
  2414                                  ;
  2415                                  ;
  2416                                  ;	warning: uses old13 vector for non-read calls.
  2417                                  ;		does direct calls to the at rom.
  2418                                  ;		does segment arithmatic.
  2419                                  ;
  2420                                  ;	effects: performs disk i/o operation.
  2421                                  
  2422                                  ; 16/10/2022
  2423                                  ; 28/05/2019
  2424                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2425                                  
  2426                                  ;* offsets into cmd_block for registers
  2427                                  
  2428                                  pre_comp equ 0	;write pre-compensation
  2429                                  sec_cnt	 equ 1	;sector count
  2430                                  sec_num	 equ 2	;sector number
  2431                                  cyl_low	 equ 3	;cylinder number, low part
  2432                                  cyl_high equ 4	;cylinder number, high part
  2433                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2434                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2435                                  cmd_reg  equ 6	;command register
  2436                                  
  2437                                  ; 01/10/2022
  2438                                  disk_status1	equ 74h
  2439                                  hf_num		equ 75h
  2440                                  control_byte	equ 76h
  2441                                  
  2442                                  ibm_disk_io:				
  2443 000012DC 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2444 000012DF 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2445 000012E1 80FC02                  		cmp	ah, 2
  2446 000012E4 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2447 000012E6 80FC0A                  		cmp	ah, 0Ah
  2448 000012E9 7405                    		jz	short atd2	; and call 0Ah (read long).
  2449                                  atd1:
  2450 000012EB 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2451                                  		;jmp	cs:Old13	; use rom int 13h handler
  2452                                  ;-----------------------------------------------------------------------------
  2453                                  
  2454                                  atd2:					
  2455 000012F0 53                      		push	bx
  2456 000012F1 51                      		push	cx
  2457 000012F2 52                      		push	dx
  2458 000012F3 57                      		push	di
  2459 000012F4 1E                      		push	ds
  2460 000012F5 06                      		push	es
  2461 000012F6 50                      		push	ax
  2462 000012F7 B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2463                                  					; establish bios segment addressing
  2464 000012FA 8ED8                    		mov	ds, ax
  2465                                  		; 16/10/2022
  2466 000012FC C606740000              		mov	byte [disk_status1], 0
  2467                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2468                                  					; initially no error code.
  2469 00001301 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2470 00001304 3A167500                		cmp	dl, [hf_num]
  2471                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2472 00001308 7207                    		jb	short atd3	; disk number in range
  2473                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2474 0000130A C606740001              		mov	byte [disk_status1], 1
  2475 0000130F EB20                    		jmp	short atd4	; disk number out of range error,
  2476                                  					; return
  2477                                  ; ----------------------------------------------------------------------------
  2478                                  
  2479                                  atd3:					
  2480 00001311 53                      		push	bx
  2481 00001312 8CC0                    		mov	ax, es
  2482 00001314 C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2483 00001317 01D8                    		add	ax, bx
  2484 00001319 8EC0                    		mov	es, ax
  2485 0000131B 5B                      		pop	bx
  2486 0000131C 83E30F                  		and	bx, 0Fh
  2487 0000131F 0E                      		push	cs
  2488 00001320 E8DF00                  		call	check_dma
  2489 00001323 720C                    		jb	short atd4	; abort if dma across segment boundary
  2490 00001325 58                      		pop	ax
  2491 00001326 50                      		push	ax
  2492 00001327 E81A00                  		call	setcmd		; set up command block for disk op
  2493 0000132A BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2494 0000132D EE                      		out	dx, al		; write out command modifier
  2495 0000132E E86B00                  		call	docmd		; carry out command
  2496                                  ; ----------------------------------------------------------------------------
  2497                                  
  2498                                  atd4:	
  2499                                  
  2500                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2501                                  ;	      and save a couple bytes while were at it.
  2502                                  				
  2503 00001331 58                      		pop	ax
  2504                                  		;mov	ah, ds:74h	; [disk_status1]
  2505 00001332 8A267400                		mov	ah, [disk_status1]
  2506 00001336 08E4                    		or	ah, ah
  2507 00001338 7401                    		jz	short atd5
  2508 0000133A F9                      		stc
  2509                                  atd5:					
  2510 0000133B 07                      		pop	es
  2511 0000133C 1F                      		pop	ds
  2512 0000133D 5F                      		pop	di
  2513 0000133E 5A                      		pop	dx
  2514 0000133F 59                      		pop	cx
  2515 00001340 5B                      		pop	bx
  2516 00001341 CA0200                  		retf	2		; far return, dropping flags
  2517                                  
  2518                                  ; =============== S U B	R O U T	I N E ========================================
  2519                                  
  2520                                  ;***	setcmd - set up cmd_block for the disk operation
  2521                                  ;
  2522                                  ;	entry:	(ds) = bios data segment.
  2523                                  ;		(es:bx) in seg:000x form.
  2524                                  ;		other registers as in int 13h call
  2525                                  ;	
  2526                                  ;	exit:	cmd_block set up for disk read call.
  2527                                  ;		control_byte set up for disk operation.
  2528                                  ;		(al) = control byte modifier
  2529                                  ;
  2530                                  ;	sets the fields of cmd_block using the register contents
  2531                                  ;	and the contents of the disk parameter block for the given drive.
  2532                                  ;
  2533                                  ;	warning: (ax) destroyed.
  2534                                  ;		does direct calls to the at rom.
  2535                                  
  2536                                  setcmd:		; proc near		
  2537                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2538                                  		; 16/10/2022
  2539 00001344 A24300                  		mov	[cmd_block+sec_cnt], al
  2540                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2541 00001347 C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2542 0000134C 80FC02                  		cmp	ah, 2
  2543 0000134F 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2544 00001351 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2545                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2546                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2547                                  setc1:					
  2548 00001356 88C8                    		mov	al, cl
  2549 00001358 243F                    		and	al, 3Fh		; mask sector number
  2550                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2551                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2552 0000135A A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2553 0000135D 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2554 00001361 88C8                    		mov	al, cl
  2555 00001363 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2556                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2557 00001366 A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2558 00001369 89D0                    		mov	ax, dx
  2559 0000136B C0E004                  		shl	al, 4		; drive	number
  2560 0000136E 80E40F                  		and	ah, 0Fh
  2561 00001371 08E0                    		or	al, ah		; head number
  2562 00001373 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2563                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2564 00001375 A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2565 00001378 06                      		push	es
  2566 00001379 53                      		push	bx
  2567 0000137A 0E                      		push	cs
  2568 0000137B E85C00                  		call	get_vec
  2569 0000137E 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2570                                  			 		; write pre-comp from disk parameters
  2571 00001382 C1E802                  		shr	ax, 2
  2572                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2573 00001385 A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2574                                  					; only use low part
  2575 00001388 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2576                                  					; control byte modifier
  2577 0000138C 5B                      		pop	bx
  2578 0000138D 07                      		pop	es
  2579                                  		;mov	ah, ds:76h	; [control_byte]
  2580 0000138E 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2581 00001392 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2582 00001395 08C4                    		or	ah, al
  2583                                  		;mov	ds:76h,	ah
  2584 00001397 88267600                		mov	[control_byte], ah ; mov [76h],al
  2585 0000139B C3                      		retn
  2586                                  
  2587                                  ; =============== S U B	R O U T	I N E ========================================
  2588                                  
  2589                                  ;***	docmd - carry out read operation to at hard disk
  2590                                  ;
  2591                                  ;	entry:	(es:bx) = address for read in data.
  2592                                  ;		cmd_block set up for disk read.
  2593                                  ;
  2594                                  ;	exit:	buffer at (es:bx) contains data read.
  2595                                  ;		disk_status1 set to error code (0 if success).
  2596                                  ;
  2597                                  ;	
  2598                                  ;
  2599                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2600                                  ;		no check is made for dma boundary overrun.
  2601                                  ;
  2602                                  ;	effects: programs disk controller.
  2603                                  ;		performs disk input.
  2604                                  
  2605                                  docmd:		; proc near		
  2606 0000139C 89DF                    		mov	di, bx
  2607 0000139E 0E                      		push	cs
  2608 0000139F E84000                  		call	command
  2609 000013A2 7535                    		jnz	short doc3
  2610                                  doc1:					
  2611 000013A4 0E                      		push	cs
  2612 000013A5 E84200                  		call	waitt		; wait for controller to complete read
  2613 000013A8 752F                    		jnz	short doc3
  2614 000013AA B90001                  		mov	cx, 256		; 256 words per sector
  2615 000013AD BAF001                  		mov	dx, 1F0h	; hf_port
  2616 000013B0 FC                      		cld			; string op goes up
  2617 000013B1 FA                      		cli			; disable interrupts
  2618                                  					; (bug was forgetting this)
  2619                                  
  2620                                  ;	M062 -- some of these old machines have intermittent failures
  2621                                  ;		when the read is done at full speed. Instead of using
  2622                                  ;		a string rep instruction, we'll use a loop. There is
  2623                                  ;		a slight performance hit, but it only affects these
  2624                                  ;		very old machines with an exact date code match, and
  2625                                  ;		it makes said machines more reliable
  2626                                  ;
  2627                                  ;M062	repz	insw		;read in sector
  2628                                  
  2629                                  rsct_loop:				
  2630 000013B2 6D                      		insw
  2631 000013B3 E2FD                    		loop	rsct_loop
  2632 000013B5 FB                      		sti
  2633                                  		; 16/10/2022
  2634 000013B6 F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2635                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2636                                  					; (ds =	40h)
  2637 000013BB 7410                    		jz	short doc2	; no ecc bytes to read.
  2638 000013BD 0E                      		push	cs
  2639 000013BE E83100                  		call	wait_drq	; wait for controller to complete read
  2640 000013C1 7216                    		jb	short doc3
  2641 000013C3 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2642 000013C6 BAF001                  		mov	dx, 1F0h	; hf_port
  2643 000013C9 FA                      		cli
  2644 000013CA F36C                    		rep insb		; read in ecc
  2645 000013CC FB                      		sti
  2646                                  doc2:					
  2647 000013CD 0E                      		push	cs
  2648 000013CE E82900                  		call	check_status
  2649 000013D1 7506                    		jnz	short doc3	; operation failed
  2650                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2651 000013D3 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2652 000013D7 75CB                    		jnz	short doc1	; loop while more sectors to read
  2653                                  doc3:					
  2654 000013D9 C3                      		retn
  2655                                  
  2656                                  ; =============== S U B	R O U T	I N E ========================================
  2657                                  
  2658                                  ;***	define where the rom routines are actually located
  2659                                  ;	   in the buggy old AT BIOS that we might need to
  2660                                  ;	   install a special level of int13 handler for
  2661                                  
  2662                                  ; 16/10/2022
  2663                                  
  2664                                  romsegment 	equ 0F000h  ; segment
  2665                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2666                                  romwait		equ 2E7Fh   ; offset in romsegment
  2667                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2668                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2669                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2670                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2671                                  romfret		equ 0FF65h  ; far return in rom	
  2672                                  
  2673                                  ;***	get_vec - get pointer to hard disk parameters.
  2674                                  ;
  2675                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2676                                  ;
  2677                                  ;	exit:	(es:bx) = address of disk parameters table.
  2678                                  ;
  2679                                  ;	uses:	ax for segment computation.
  2680                                  ;
  2681                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2682                                  ;	or 70h (disk 1).
  2683                                  ;	
  2684                                  ;	warning: (ax) destroyed.
  2685                                  ;		this does a direct call to the at rom.
  2686                                  
  2687                                  get_vec:	; proc near		
  2688                                  		;push	0FF65h		; romfret ; far	return in rom
  2689                                  		;jmp	far ptr	0F000h:2F8Eh
  2690                                  		; 16/10/2022
  2691 000013DA 6865FF                  		push	romfret		; far return in rom
  2692 000013DD EA8E2F00F0              		jmp	romsegment:romget_vec
  2693                                  
  2694                                  ; =============== S U B	R O U T	I N E ========================================
  2695                                  
  2696                                  ;***	command - send contents of cmd_block to disk controller.
  2697                                  ;
  2698                                  ;	entry:	control_byte 
  2699                                  ;		cmd_block - set up with values for hard disk controller.
  2700                                  ;
  2701                                  ;	exit:	disk_status1 = error code.
  2702                                  ;		nz if error, zr for no error.
  2703                                  ;
  2704                                  ;
  2705                                  ;	warning: (ax), (cx), (dx) destroyed.
  2706                                  ;		does a direct call to the at rom.
  2707                                  ;
  2708                                  ;	effects: programs disk controller.
  2709                                  
  2710                                  command:	; proc near		
  2711                                  		;push	0FF65h		; romfret ; far	return in rom
  2712                                  		;jmp	far ptr	0F000h:2E1Eh
  2713                                  		; 16/10/2022
  2714 000013E2 6865FF                  		push	romfret		; far return in rom
  2715 000013E5 EA1E2E00F0              		jmp	romsegment:romcommand
  2716                                  
  2717                                  ; =============== S U B	R O U T	I N E ========================================
  2718                                  
  2719                                  ;***	waitt - wait for disk interrupt
  2720                                  ;
  2721                                  ;	entry:	nothing.
  2722                                  ;
  2723                                  ;	exit:	disk_status1 = error code.
  2724                                  ;		nz if error, zr if no error.
  2725                                  ;
  2726                                  ;
  2727                                  ;	warning: (ax), (bl), (cx) destroyed.
  2728                                  ;		does a direct call to the at rom.
  2729                                  ;		
  2730                                  ;	effects: calls int 15h, function 9000h.
  2731                                  
  2732                                  waitt:		; proc near		
  2733                                  		;push	0FF65h		; romfret ; far	return in rom
  2734                                  		;jmp	far ptr	0F000h:2E7Fh
  2735                                  		; 16/10/2022
  2736 000013EA 6865FF                  		push	romfret		; far return in rom
  2737 000013ED EA7F2E00F0              		jmp	romsegment:romwait
  2738                                  
  2739                                  ; =============== S U B	R O U T	I N E ========================================
  2740                                  
  2741                                  ;***	wait_drq - wait for data request.
  2742                                  ;
  2743                                  ;	entry:	nothing.
  2744                                  ;
  2745                                  ;	exit:	disk_status1 = error code.
  2746                                  ;		cy if error, nc if no error.
  2747                                  ;
  2748                                  ;	warning: (al), (cx), (dx) destroyed.
  2749                                  ;		does a direct call to the at rom.
  2750                                  
  2751                                  wait_drq:	; proc near		
  2752                                  		;push	0FF65h		; romfret ; far	return in rom
  2753                                  		;jmp	far ptr	0F000h:2EE2h
  2754                                  		; 16/10/2022
  2755 000013F2 6865FF                  		push	romfret		; far return in rom
  2756 000013F5 EAE22E00F0              		jmp	romsegment:romwait_drq
  2757                                  
  2758                                  ; =============== S U B	R O U T	I N E ========================================
  2759                                  
  2760                                  ;***	check_status - check hard disk status.
  2761                                  ;
  2762                                  ;	entry:	nothing.
  2763                                  ;
  2764                                  ;	exit:	disk_status1 = error code.
  2765                                  ;		nz if error, zr if no error.
  2766                                  ;
  2767                                  ;	warning: (ax), (cx), (dx) destroyed.
  2768                                  ;		does a direct call to the at rom.
  2769                                  
  2770                                  check_status:	; proc near		
  2771                                  		;push	0FF65h		; romfret ; far	return in rom
  2772                                  		;jmp	far ptr	0F000h:2EF8h
  2773                                  		; 16/10/2022
  2774 000013FA 6865FF                  		push	romfret		; far return in rom
  2775 000013FD EAF82E00F0              		jmp	romsegment:romcheck_status
  2776                                  
  2777                                  ; =============== S U B	R O U T	I N E ========================================
  2778                                  
  2779                                  ;***	check_dma - check for dma overrun 64k segment.
  2780                                  ;
  2781                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2782                                  ;		cmd_block set up for operation.
  2783                                  ;
  2784                                  ;	exit:	disk_status1 - error code.
  2785                                  ;		cy if error, nc if no error.
  2786                                  ;
  2787                                  ;	warning: does a direct call to the at rom.
  2788                                  
  2789                                  check_dma:	; proc near		
  2790                                  		;push	0FF65h		; romfret ; far	return in rom
  2791                                  		;jmp	far ptr	0F000h:2F69h
  2792                                  		; 16/10/2022
  2793 00001402 6865FF                  		push	romfret		; far return in rom
  2794 00001405 EA692F00F0              		jmp	romsegment:romcheck_dma
  2795                                  
  2796                                  ;-----------------------------------------------------------------------------
  2797                                  
  2798                                  endatrom:
  2799                                  
  2800                                  ; ----------------------------------------------------------------------------
  2801                                  
  2802                                  ;; M015 -- begin changes
  2803                                  ;;
  2804                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2805                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2806                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2807                                  ;; If our init code detects this error, it will install this
  2808                                  ;; special Int13 hook through the same mechanism that was set
  2809                                  ;; up for the IBM patch above. This code is also dynamically
  2810                                  ;; relocated by MSINIT.
  2811                                  
  2812                                  compaq_disk_io:
  2813 0000140A 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2814                                  					;
  2815                                  					; the following	label defines the end of the at	rom patch.
  2816                                  					; this is used at configuration	time.
  2817                                  					;
  2818                                  					; warning!!!
  2819                                  					; this code will be dynamically	relocated by msinit
  2820 0000140D 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2821                                  no_hookit:				
  2822                                  		;jmp	cs:Old13
  2823                                  		; 16/10/2022
  2824 0000140F 2EFF2E[0601]            		jmp	far [cs:Old13]
  2825                                  
  2826                                  ; ----------------------------------------------------------------------------
  2827                                  
  2828                                  mebbe_hookit:				
  2829 00001414 80FA80                  		cmp	dl, 80h
  2830 00001417 72F6                    		jb	short no_hookit
  2831 00001419 1E                      		push	ds
  2832 0000141A 50                      		push	ax
  2833 0000141B B84000                  		mov	ax, 40h
  2834 0000141E 8ED8                    		mov	ds, ax
  2835 00001420 58                      		pop	ax
  2836 00001421 9C                      		pushf
  2837                                  		;call	cs:Old13
  2838                                  		; 16/10/2022
  2839 00001422 2EFF1E[0601]            		call	far [cs:Old13]
  2840 00001427 1F                      		pop	ds
  2841 00001428 CA0200                  		retf	2
  2842                                  
  2843                                  ; ----------------------------------------------------------------------------
  2844                                  
  2845 0000142B 00                      end_compaq_i13hook: db 0			
  2846                                  
  2847                                  ; =============== S U B	R O U T	I N E ========================================
  2848                                  
  2849                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2850                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2851                                  
  2852                                  daycnt_to_day:	; proc far
  2853                                  
  2854                                  ; entry: [daycnt] = number of days since 1-1-80
  2855                                  ;
  2856                                  ; return: ch - century in bcd
  2857                                  ;	  cl - year in bcd
  2858                                  ;	  dh - month in bcd
  2859                                  ;	  dl - day in bcd
  2860                                  
  2861                                  		; 16/10/2022		
  2862 0000142C 2EFF36[F004]            		push	word [cs:daycnt] ; save daycnt
  2863 00001431 2E813E[F004]891C        		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2864                                  					; # days from 1-1-1980 to 1-1-2000
  2865 00001438 730E                    		jnb	short century20
  2866 0000143A 2EC606[F404]13          		mov	byte [cs:base_century], 19
  2867 00001440 2EC606[F504]50          		mov	byte [cs:base_year], 80
  2868 00001446 EB13                    		jmp	short years
  2869                                  ; ----------------------------------------------------------------------------
  2870                                  		
  2871                                  century20:				
  2872 00001448 2EC606[F404]14          		mov	byte [cs:base_century], 20
  2873 0000144E 2EC606[F504]00          		mov	byte [cs:base_year], 0
  2874 00001454 2E812E[F004]891C        		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2875                                  					; adjust daycnt
  2876                                  years:					
  2877 0000145B 31D2                    		xor	dx, dx
  2878 0000145D 2EA1[F004]              		mov	ax, [cs:daycnt]
  2879 00001461 BBB505                  		mov	bx, 1461	; (366+365*3)
  2880                                  					; # of days in a Leap year block
  2881 00001464 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  2882 00001466 2E8916[F004]            		mov	[cs:daycnt], dx	; save daycnt left
  2883 0000146B B304                    		mov	bl, 4
  2884 0000146D F6E3                    		mul	bl		; AX = # of years. Less	than 100
  2885 0000146F 2E0006[F504]            		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2886 00001474 2EFF06[F004]            		inc	word [cs:daycnt]	; set daycnt to	1 base
  2887 00001479 2E813E[F004]6E01        		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2888 00001480 7626                    		jbe	short leapyear	; within 366+355+355+355 days.
  2889 00001482 2EFE06[F504]            		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2890 00001487 2E812E[F004]6E01        		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2891 0000148E B90300                  		mov	cx, 3		; And next three years are normal
  2892                                  regularyear:				
  2893 00001491 2E813E[F004]6D01        		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2894 00001498 7614                    		jbe	short yeardone	; {if (daycnt >	365)
  2895 0000149A 2EFE06[F504]            		inc	byte [cs:base_year]	;   { daycnt -=	365
  2896 0000149F 2E812E[F004]6D01        		sub	word [cs:daycnt], 365	;   }
  2897 000014A6 E2E9                    		loop	regularyear	; }
  2898                                  					;
  2899                                  					; should never fall through loop
  2900                                  leapyear:				
  2901 000014A8 2EC606[F704]1D          		mov	byte [cs:month_tab+1], 29 ; leap year.
  2902                                  					; change month table.
  2903                                  yeardone:				
  2904 000014AE 31DB                    		xor	bx, bx
  2905 000014B0 31D2                    		xor	dx, dx
  2906 000014B2 2EA1[F004]              		mov	ax, [cs:daycnt]
  2907                                  		;mov	si, offset month_tab
  2908 000014B6 BE[F604]                		mov	si, month_tab	; 19/10/2022
  2909 000014B9 B90C00                  		mov	cx, 12
  2910                                  months:					
  2911 000014BC FEC3                    		inc	bl
  2912                                  
  2913                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  2914                                  		;mov	dl, [cs:si]
  2915                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  2916                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  2917                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  2918                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  2919                                  		
  2920 000014BE 8A14                    		mov	dl, [si] ; ?	; mov dl, [cs:si]
  2921 000014C0 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  2922                                  					; dh=0
  2923 000014C2 7605                    		jbe	short month_done
  2924 000014C4 46                      		inc	si		; next month
  2925 000014C5 29D0                    		sub	ax, dx		; adjust daycnt
  2926 000014C7 E2F3                    		loop	months		;
  2927                                  					; should never fall through loop
  2928                                  month_done:				
  2929 000014C9 2EC606[F704]1C          		mov	byte [cs:month_tab+1], 28
  2930                                  					; restore month table value
  2931 000014CF 88DA                    		mov	dl, bl
  2932 000014D1 2E8A36[F504]            		mov	dh, [cs:base_year]
  2933 000014D6 2E8A0E[F404]            		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  2934 000014DB 2EFF1E[0205]            		call	far [cs:bintobcd]
  2935                                  		;call	cs:bintobcd	; convert "day"	to bcd
  2936                                  					; dl = bcd day,	al = month
  2937 000014E0 86D0                    		xchg	dl, al
  2938 000014E2 2EFF1E[0205]            		call	far [cs:bintobcd]
  2939                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  2940 000014E7 86F0                    		xchg	dh, al
  2941 000014E9 2EFF1E[0205]            		call	far [cs:bintobcd]
  2942                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  2943 000014EE 86C8                    		xchg	cl, al
  2944 000014F0 2EFF1E[0205]            		call	far [cs:bintobcd]
  2945                                  		;call	cs:bintobcd	; ch = bcd century
  2946 000014F5 88C5                    		mov	ch, al
  2947 000014F7 2E8F06[F004]            		pop	word [cs:daycnt] ; restore original value
  2948 000014FC CB                      		retf
  2949                                  
  2950                                  enddaycnttoday:	
  2951                                  
  2952                                  ; =============== S U B	R O U T	I N E ========================================
  2953                                  
  2954                                  bin_to_bcd:	; proc far		; real time clock support
  2955                                  
  2956                                  ;convert a binary input in al (less than 63h or 99 decimal)
  2957                                  ;into a bcd value in al. ah destroyed.	
  2958                                  		
  2959 000014FD 51                      		push	cx		
  2960 000014FE D40A                    		aam			; al=high digit	bcd, ah=low digit bc
  2961 00001500 B104                    		mov	cl, 4
  2962 00001502 D2E4                    		shl	ah, cl		; mov the high digit to	high nibble
  2963 00001504 08E0                    		or	al, ah
  2964 00001506 59                      		pop	cx
  2965 00001507 CB                      		retf
  2966                                  
  2967                                  ; ----------------------------------------------------------------------------
  2968                                  
  2969                                  ; the k09 requires the routines for reading the clock because of the suspend/
  2970                                  ; resume facility. the system clock needs to be reset after resume.
  2971                                  
  2972                                  ; the following routine is executed at resume time when the system
  2973                                  ; powered on after suspension. it reads the real time clock and
  2974                                  ; resets the system time and date, and then irets.
  2975                                  
  2976                                  ; warning!!! this code will be dynamically relocated by msinit.
  2977                                  
  2978                                  int6c:					
  2979 00001508 0E                      		push	cs
  2980 00001509 1F                      		pop	ds
  2981 0000150A 8F06[BB06]              		pop	word [int6c_ret_addr]	; pop off return address
  2982 0000150E 8F06[BD06]              		pop	word [int6c_ret_addr+2]
  2983 00001512 9D                      		popf
  2984 00001513 E81300                  		call	read_real_date	; get the date from the clock
  2985 00001516 FA                      		cli
  2986 00001517 8936[F004]              		mov	[daycnt], si	; update dos copy of date
  2987 0000151B FB                      		sti
  2988 0000151C E8CB00                  		call	read_real_time	; get the time from the	rtc
  2989 0000151F FA                      		cli
  2990 00001520 B401                    		mov	ah, 1
  2991 00001522 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  2992                                  					; CX:DX	= clock	count
  2993                                  					; Return: time of day set
  2994 00001524 FB                      		sti
  2995                                  		;jmp	int6c_ret_addr	; long jump
  2996                                  		; 16/10/2022
  2997 00001525 FF2E[BB06]              		jmp	far [int6c_ret_addr] ; long jump
  2998                                  
  2999                                  ; =============== S U B	R O U T	I N E ========================================
  3000                                  
  3001                                  ;   read_real_date reads real-time clock for date and returns the number
  3002                                  ;   of days elapsed since 1-1-80 in si
  3003                                  
  3004                                  read_real_date:	; proc near		
  3005 00001529 50                      		push	ax
  3006 0000152A 51                      		push	cx
  3007 0000152B 52                      		push	dx
  3008 0000152C 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3009 0000152E CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3010                                  					; Return: CX:DX	= clock	count
  3011                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3012                                  					; midnight
  3013                                  					; Otherwise, AL	> 0
  3014 00001530 5A                      		pop	dx
  3015 00001531 59                      		pop	cx
  3016 00001532 58                      		pop	ax
  3017 00001533 50                      		push	ax
  3018 00001534 53                      		push	bx
  3019 00001535 51                      		push	cx
  3020 00001536 52                      		push	dx
  3021 00001537 2EC706[DB06]0100        		mov	word [cs:daycnt2], 1
  3022                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3023 0000153E B404                    		mov	ah, 4
  3024 00001540 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3025                                  					; Return: DL = day in BCD
  3026                                  					; DH = month in	BCD
  3027                                  					; CL = year in BCD
  3028                                  					; CH = century (19h or 20h)
  3029 00001542 7303                    		jnb	short read_ok
  3030 00001544 E99300                  		jmp	r_d_ret
  3031                                  ;-----------------------------------------------------------------------------
  3032                                  
  3033                                  read_ok:				
  3034 00001547 882E[BF06]              		mov	[bin_date_time], ch
  3035 0000154B 880E[C006]              		mov	[bin_date_time+1], cl
  3036 0000154F 8836[C106]              		mov	[bin_date_time+2], dh
  3037 00001553 8816[C206]              		mov	[bin_date_time+3], dl
  3038 00001557 2EC706[DB06]0200        		mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3039 0000155E E84201                  		call	bcd_verify	; verify bcd values in range
  3040 00001561 7277                    		jb	short r_d_ret	;  some	value out of range
  3041 00001563 2EC706[DB06]0300        		mov	word [cs:daycnt2], 3
  3042 0000156A E8E600                  		call	date_verify
  3043 0000156D 726B                    		jb	short r_d_ret
  3044 0000156F 2EC706[DB06]0000        		mov	word [cs:daycnt2], 0
  3045 00001576 E8AA00                  		call	in_bin
  3046 00001579 A0[C006]                		mov	al, [bin_date_time+1]
  3047 0000157C 98                      		cbw
  3048 0000157D 803E[BF06]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3049 00001582 7503                    		jnz	short century_19 ; no
  3050 00001584 83C064                  		add	ax, 100		; add in a century
  3051                                  
  3052                                  century_19:				
  3053 00001587 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3054 0000158A B104                    		mov	cl, 4		; leap year every 4
  3055 0000158C F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3056 0000158E 88E3                    		mov	bl, ah		; save odd years
  3057 00001590 98                      		cbw			; zero ah
  3058 00001591 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3059                                  					; # of days in leap year blocks
  3060 00001594 F7E1                    		mul	cx
  3061 00001596 2EA3[DB06]              		mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3062 0000159A 88D8                    		mov	al, bl		; get odd years	count
  3063 0000159C 98                      		cbw
  3064 0000159D 09C0                    		or	ax, ax
  3065 0000159F 740C                    		jz	short leap_year
  3066 000015A1 B96D01                  		mov	cx, 365		; days in year
  3067 000015A4 F7E1                    		mul	cx
  3068 000015A6 2E0106[DB06]            		add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3069 000015AB EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3070                                  					; possibly account for a leap day
  3071                                  ;-----------------------------------------------------------------------------
  3072                                  
  3073                                  leap_year:				
  3074 000015AD 803E[C106]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3075 000015B2 7605                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3076                                  leap_adjustment:			
  3077 000015B4 2EFF06[DB06]            		inc	word [cs:daycnt2] ; account for leap day
  3078                                  no_leap_adjustment:			
  3079 000015B9 8A0E[C206]              		mov	cl, [bin_date_time+3] ; get days of month
  3080 000015BD 30ED                    		xor	ch, ch
  3081 000015BF 49                      		dec	cx		; because of offset from day 1,	not day	0
  3082 000015C0 2E010E[DB06]            		add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3083 000015C5 8A0E[C106]              		mov	cl, [bin_date_time+2] ; get month
  3084 000015C9 30ED                    		xor	ch, ch
  3085 000015CB 49                      		dec	cx		; january starts at offset 0
  3086 000015CC D1E1                    		shl	cx, 1		; word offset
  3087 000015CE BE[C306]                		mov	si, month_table
  3088 000015D1 01CE                    		add	si, cx
  3089                                  		; 16/10/2022
  3090                                  		; ds must be same with cs here, if so..
  3091                                  		; what for cs: prefixes are used !?)
  3092                                  		; mov	ax, [cs:si]
  3093                                  		; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3094 000015D3 8B04                    		mov	ax, [si]	; mov ax, [cs:si]
  3095                                  					; get #	days in	previous months
  3096 000015D5 2E0106[DB06]            		add	[cs:daycnt2], ax
  3097                                  r_d_ret:				
  3098 000015DA 2E8B36[DB06]            		mov	si, [cs:daycnt2]
  3099 000015DF 5A                      		pop	dx
  3100 000015E0 59                      		pop	cx
  3101 000015E1 5B                      		pop	bx
  3102 000015E2 58                      		pop	ax
  3103 000015E3 C3                      		retn
  3104                                  
  3105                                  ;-----------------------------------------------------------------------------
  3106                                  
  3107                                  r_t_retj:				
  3108 000015E4 31C9                    		xor	cx, cx
  3109 000015E6 31D2                    		xor	dx, dx
  3110 000015E8 EB38                    		jmp	short r_t_ret
  3111                                  
  3112                                  ; =============== S U B	R O U T	I N E ========================================
  3113                                  
  3114                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3115                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3116                                  
  3117                                  read_real_time:	; proc near		
  3118 000015EA B402                    		mov	ah, 2
  3119 000015EC CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3120                                  					; Return: CH = hours in	BCD
  3121                                  					; CL = minutes in BCD
  3122                                  					; DH = seconds in BCD
  3123 000015EE 72F4                    		jb	short r_t_retj
  3124 000015F0 882E[BF06]              		mov	[bin_date_time], ch ; hours
  3125 000015F4 880E[C006]              		mov	[bin_date_time+1], cl ; minutes
  3126 000015F8 8836[C106]              		mov	[bin_date_time+2], dh ; seconds
  3127 000015FC C606[C206]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3128 00001601 E89F00                  		call	bcd_verify
  3129 00001604 72DE                    		jb	short r_t_retj
  3130 00001606 E88500                  		call	time_verify
  3131 00001609 72D9                    		jb	short r_t_retj
  3132 0000160B E81500                  		call	in_bin		; from bcd to bin
  3133 0000160E 8A2E[BF06]              		mov	ch, [bin_date_time]
  3134 00001612 8A0E[C006]              		mov	cl, [bin_date_time+1]
  3135 00001616 8A36[C106]              		mov	dh, [bin_date_time+2]
  3136 0000161A 8A16[C206]              		mov	dl, [bin_date_time+3]
  3137                                  		; 16/10/2022
  3138                                  		; 17/09/2022
  3139                                  		; 31/05/2019
  3140 0000161E FF1E[E206]              		call	far [ttticks] 
  3141                                  		;call	dword ptr ttticks ; note: indirect far call
  3142                                  					; cx:dx	= number of ticks
  3143                                  					; (at 18.2 ticks per sec.)
  3144                                  r_t_ret:				
  3145 00001622 C3                      		retn
  3146                                  
  3147                                  ; =============== S U B	R O U T	I N E =======================================
  3148                                  
  3149                                  ;   in_bin converts bin_date_time values from bcd to bin
  3150                                  
  3151                                  in_bin:		; proc near		
  3152 00001623 A0[BF06]                		mov	al, [bin_date_time] ; century or hours
  3153 00001626 E81F00                  		call	bcd_to_bin
  3154 00001629 A2[BF06]                		mov	[bin_date_time], al
  3155 0000162C A0[C006]                		mov	al, [bin_date_time+1] ; years or minutes
  3156 0000162F E81600                  		call	bcd_to_bin
  3157 00001632 A2[C006]                		mov	[bin_date_time+1], al
  3158 00001635 A0[C106]                		mov	al, [bin_date_time+2] ; months or seconds
  3159 00001638 E80D00                  		call	bcd_to_bin
  3160 0000163B A2[C106]                		mov	[bin_date_time+2], al
  3161 0000163E A0[C206]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3162 00001641 E80400                  		call	bcd_to_bin
  3163 00001644 A2[C206]                		mov	[bin_date_time+3], al
  3164 00001647 C3                      		retn
  3165                                  
  3166                                  ; =============== S U B	R O U T	I N E =======================================
  3167                                  
  3168                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3169                                  ;   a binary representation in al
  3170                                  ;   ah is destroyed
  3171                                  
  3172                                  bcd_to_bin:	; proc near		
  3173 00001648 88C4                    		mov	ah, al
  3174 0000164A 240F                    		and	al, 0Fh
  3175 0000164C B104                    		mov	cl, 4
  3176 0000164E D2EC                    		shr	ah, cl
  3177 00001650 D50A                    		aad
  3178 00001652 C3                      		retn
  3179                                  
  3180                                  ; =============== S U B	R O U T	I N E ========================================
  3181                                  
  3182                                  ;   date_verify loosely checks bcd date values to be in range
  3183                                  ;   in bin_date_time
  3184                                  
  3185                                  date_verify:	; proc near		
  3186 00001653 803E[BF06]20            		cmp	byte [bin_date_time], 20h ; century check
  3187 00001658 7732                    		ja	short date_error
  3188 0000165A 740E                    		jz	short century_20 ; jmp in 21th century
  3189 0000165C 803E[BF06]19            		cmp	byte [bin_date_time], 19h ; century check
  3190                                  		;jb	short date_error
  3191                                  		; 12/12/2022
  3192 00001661 722A                    		jb	short date_err2
  3193 00001663 803E[C006]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3194                                  		;jb	short date_error
  3195                                  		; 12/12/2022
  3196 00001668 7223                    		jb	short date_err2
  3197                                  century_20:				
  3198 0000166A 803E[C006]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3199 0000166F 771B                    		ja	short date_error
  3200 00001671 803E[C106]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3201 00001676 7714                    		ja	short date_error
  3202 00001678 803E[C106]00            		cmp	byte [bin_date_time+2], 0
  3203                                  		;jbe	short date_error
  3204 0000167D 760D                    		jna	short date_error
  3205 0000167F 803E[C206]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3206 00001684 7706                    		ja	short date_error
  3207                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3208                                  		;;jbe	short date_error
  3209                                  		;jna	short date_error
  3210                                  		; 12/12/2022
  3211                                  		; cf=0
  3212                                  		;clc
  3213                                  		; 12/12/2022
  3214 00001686 803E[C206]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3215 0000168B C3                      		retn
  3216                                  ;-----------------------------------------------------------------------------
  3217                                  
  3218                                  date_error:				
  3219 0000168C F9                      		stc
  3220                                  date_err2:
  3221 0000168D C3                      		retn
  3222                                  
  3223                                  ; =============== S U B	R O U T	I N E ========================================
  3224                                  
  3225                                  ; time_verify very loosely checks bcd date values to be in range
  3226                                  ; in bin_date_time
  3227                                  
  3228                                  time_verify:	; proc near		
  3229 0000168E 803E[BF06]24            		cmp	byte [bin_date_time], 24h ; hour check
  3230 00001693 770C                    		ja	short time_error
  3231 00001695 803E[C006]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3232 0000169A 7705                    		ja	short time_error
  3233                                  		; 12/12/2022h
  3234                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3235                                  		;ja	short time_error
  3236                                  		;clc
  3237                                  		;retn
  3238                                  		; 12/12/2022
  3239 0000169C 803E[C106]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3240                                  time_error:
  3241                                  bv_error:	
  3242 000016A1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3243 000016A2 C3                      		retn
  3244                                  
  3245                                  ; ----------------------------------------------------------------------------
  3246                                  
  3247                                  ;time_error:				
  3248                                  		;stc
  3249                                  		;retn
  3250                                  
  3251                                  ; =============== S U B	R O U T	I N E ========================================
  3252                                  
  3253                                  ;   bcd_verify checks values in bin_date_time to be valid
  3254                                  ;   bcd numerals.  carry set if any nibble out of range
  3255                                  
  3256                                  bcd_verify:	; proc near		
  3257 000016A3 B90400                  		mov	cx, 4		; 4 bytes to check
  3258 000016A6 BB[BF06]                		mov	bx, bin_date_time
  3259                                  bv_loop:				
  3260 000016A9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3261 000016AB 88C4                    		mov	ah, al
  3262 000016AD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3263                                  					; is 1's place in range?
  3264 000016B0 3C0A                    		cmp	al, 10
  3265 000016B2 77ED                    		ja	short bv_error	; jmp out of range
  3266 000016B4 D0EC                    		shr	ah, 1
  3267 000016B6 D0EC                    		shr	ah, 1
  3268 000016B8 D0EC                    		shr	ah, 1
  3269 000016BA D0EC                    		shr	ah, 1
  3270 000016BC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3271 000016BF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3272 000016C2 77DD                    		ja	short bv_error	; jmp out of range
  3273 000016C4 43                      		inc	bx		; next byte
  3274 000016C5 49                      		dec	cx
  3275 000016C6 75E1                    		jnz	short bv_loop
  3276 000016C8 F8                      		clc			; set success flag
  3277 000016C9 C3                      		retn
  3278                                  ; ----------------------------------------------------------------------------
  3279                                  
  3280                                  		; 12/12/2022
  3281                                  ;bv_error:				
  3282                                  		;stc			; set error flag
  3283                                  		;retn
  3284                                  
  3285                                  ; ----------------------------------------------------------------------------
  3286                                  
  3287                                  endk09:
  3288                                  
  3289                                  ; ----------------------------------------------------------------------------
  3290                                  
  3291                                  ;------------------------------------------------------------------------
  3292                                  ;									:
  3293                                  ;	System initialization						:
  3294                                  ;									:
  3295                                  ;	The entry conditions are established by the bootstrap		:
  3296                                  ;	loader and are considered unknown. The following jobs		:
  3297                                  ;	will be performed by this module:				:
  3298                                  ;									:
  3299                                  ;	1.	All device initialization is performed			:
  3300                                  ;	2.	A local stack is set up and DS:SI are set		:
  3301                                  ;		to point to an initialization table. Then		:
  3302                                  ;		an inter-segment call is made to the first		:
  3303                                  ;		byte of the dos 					:
  3304                                  ;	3.	Once the dos returns from this call the ds		:
  3305                                  ;		register has been set up to point to the start		:
  3306                                  ;		of free memory. The initialization will then		:
  3307                                  ;		load the command program into this area 		:
  3308                                  ;		beginning at 100 hex and transfer control to		:
  3309                                  ;		this program.						:
  3310                                  ;									:
  3311                                  ;------------------------------------------------------------------------
  3312                                  
  3313                                  ; 01/10/2022
  3314                                  ; 08/01/2018 - Retro DOS v4.0
  3315                                  
  3316                                  ; drvfat must be the first location of freeable space!
  3317                                  
  3318                                  
  3319                                  align 2
  3320                                  		;db 90h
  3321                                  
  3322                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3323                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3324                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3325                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3326                                  	
  3327 000016CA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3328                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3329                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3330                                  ;doscnt:	dw 0			; how many sectors to read
  3331 000016CC 00                      fbigfat:	db 0			; flags	for drive
  3332                                  ;fatloc:	dw 0			; seg addr of fat sector
  3333 000016CD 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3334 000016CF 80                      rom_drv_num:	db 80h			; rom drive number
  3335                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3336                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3337                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3338                                  
  3339                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3340                                  ; call to determine drive parameters.
  3341                                  
  3342 000016D0 02                      num_heads:	db 2			; number of heads returned by rom
  3343 000016D1 09                      sec_trk:	db 9			; sec/trk returned by rom
  3344 000016D2 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3345 000016D3 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3346                                  
  3347                                  ; ----------------------------------------------------------------------------
  3348                                  
  3349 000016D4 0002000140000000        disktable:	dw 512,	256, 64, 0	; warning !!! old values
  3350 000016DC 0008010270000000        		dw 2048, 513, 112, 0
  3351 000016E4 0020020400010000        		dw 8192, 1026, 256, 0
  3352 000016EC A87F030800020000        		dw 32680, 2051,	512, 0	; warning !!! old values
  3353 000016F4 FFFF041000040000        		dw 65535, 4100,	1024, 0	; default disktable under
  3354                                  					; the assumption of total fat size <= 128 kb,
  3355                                  					; and the maximum size of fat entry = 16 bit.
  3356                                  
  3357 000016FC 0000A87F0308000200-     disktable2:	dw 0, 32680, 2051, 512,	0 
  3357 00001705 00                 
  3358                                  					; for compatibility.
  3359 00001706 040000000204000240-     		dw 4, 0, 402h, 200h, 40h ; covers upto 134 mb media.
  3359 0000170F 00                 
  3360                                  					; fbig = 40h
  3361 00001710 080000000308000240-     		dw 8, 0, 803h, 200h, 40h ; upto	268 mb
  3361 00001719 00                 
  3362 0000171A 100000000410000240-     		dw 10h,	0, 1004h, 200h,	40h ; upto 536 mb
  3362 00001723 00                 
  3363 00001724 200000000520000240-     		dw 20h,	0, 2005h, 200h,	40h ; upto 1072	mb
  3363 0000172D 00                 
  3364 0000172E 400000000640000240-     		dw 40h,	0, 4006h, 200h,	40h ; upto 2144	mb
  3364 00001737 00                 
  3365 00001738 800000000780000240-     		dw 80h,	0, 8007h, 200h,	40h ; upto 4288	mb...
  3365 00001741 00                 
  3366                                  					
  3367                                  ; ----------------------------------------------------------------------------
  3368                                  
  3369                                  ;******************************************************
  3370                                  ;variables for mini disk initialization
  3371                                  ;******************************************************
  3372                                  
  3373                                  ; 01/10/2022
  3374                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3375                                  
  3376 00001742 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3377 00001743 00                      hnum:		db 0			; real number of hardfiles
  3378 00001744 [8706]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3379 00001746 [1709]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3380                                  					; of bds table. needed to figure out
  3381                                  					; the dosdatasg address.
  3382 00001748 0000                    mini_hdlim:	dw 0			
  3383 0000174A 0000                    mini_seclim:	dw 0
  3384                                  
  3385                                  ;end of mini disk init variables **********************
  3386                                  
  3387                                  ; ----------------------------------------------------------------------------
  3388                                  			
  3389 0000174C 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3390                                  
  3391                                  ; 13/12/2022
  3392                                  %if 0
  3393                                  
  3394                                  ;align 2
  3395                                  		db  90h	
  3396                                  
  3397                                  ; the following are the recommended bpbs for the media that we know of so far.
  3398                                  
  3399                                  ;struc bpbx
  3400                                  ;   resw 1 ; 512
  3401                                  ;   resb 1
  3402                                  ;   resw 1 ; 1
  3403                                  ;   resb 1 ; 2
  3404                                  ;   resw 1
  3405                                  ;   resw 1
  3406                                  ;   resb 1
  3407                                  ;   resw 1
  3408                                  ;   resw 1
  3409                                  ;   resw 1 ; 2
  3410                                  ;   resw 1
  3411                                  ;   resw 1 ; hidden sector high
  3412                                  ;   resd 1 ; extended total sectors
  3413                                  ;.size:
  3414                                  ;endstruc
  3415                                  
  3416                                  ; 08/01/2019 - Retro DOS v4.0
  3417                                  
  3418                                  ; 20/04/2019
  3419                                  
  3420                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3421                                  
  3422                                  ; 09/12/2022
  3423                                  BPB48T:
  3424                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3425                                  		; 48 tpi diskettes	;
  3426                                  		dw	512		; physical sector size in bytes
  3427                                  		db	2		; sectors/allocation unit
  3428                                  		dw	1		; reserved sectors for dos
  3429                                  		db	2		; number of allocation tables
  3430                                  		dw	112		; number of directory entries
  3431                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3432                                  		db	0FDh		; media descriptor
  3433                                  		dw	2		; number of fat sectors
  3434                                  		dw	9		; sectors per track
  3435                                  		dw	2		; heads
  3436                                  		dw	0		; hidden sector count (low word)
  3437                                  		dw	0		; hidden sector (high)
  3438                                  		dw	0		; number of sectors (low)
  3439                                  		dw	0		; number of sectors (high)					
  3440                                  
  3441                                  		db 90h
  3442                                  ;align 2
  3443                                  BPB96T:
  3444                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3445                                  		; 96 tpi diskettes	;
  3446                                  		dw	512		; physical sector size in bytes
  3447                                  		db	1		; sectors/allocation unit
  3448                                  		dw	1		; reserved sectors for dos
  3449                                  		db	2		; number of allocation tables
  3450                                  		dw	224		; number of directory entries
  3451                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3452                                  		db	0F9h		; media descriptor
  3453                                  		dw	7		; number of fat sectors
  3454                                  		dw	15		; sectors per track
  3455                                  		dw	2		; heads
  3456                                  		dw	0		; hidden sector count (low word)
  3457                                  		dw	0		; hidden sector (high)
  3458                                  		dw	0		; number of sectors (low)
  3459                                  		dw	0		; number of sectors (high)
  3460                                  
  3461                                  		db 90h
  3462                                  ;align 2
  3463                                  BPB35:
  3464                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3465                                  		; 3.5" diskettes - 720 KB ;		
  3466                                  		dw	512		; physical sector size in bytes
  3467                                  		db	2		; sectors/allocation unit
  3468                                  		dw	1		; reserved sectors for dos
  3469                                  		db	2		; number of allocation tables
  3470                                  		dw	112		; number of directory entries
  3471                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3472                                  		db	0F9h		; media descriptor
  3473                                  		dw	3		; number of fat sectors
  3474                                  		dw	9		; sectors per track
  3475                                  		dw	2		; heads
  3476                                  		dw	0		; hidden sector count (low word)
  3477                                  		dw	0		; hidden sector (high)
  3478                                  		dw	0		; number of sectors (low)
  3479                                  		dw	0		; number of sectors (high)
  3480                                  
  3481                                  		db 90h
  3482                                  ;align 2
  3483                                  
  3484                                  ;align 2
  3485                                  ;BPB144:
  3486                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3487                                  ;
  3488                                  ;		dw	512		; physical sector size in bytes
  3489                                  ;		db	1		; sectors/allocation unit
  3490                                  ;		dw	1		; reserved sectors for dos
  3491                                  ;		db	2		; number of allocation tables
  3492                                  ;		dw	224		; number of directory entries
  3493                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3494                                  ;		db	0F0h		; media descriptor
  3495                                  ;		dw	9		; number of fat sectors
  3496                                  ;		dw	18		; sectors per track
  3497                                  ;		dw	2		; heads
  3498                                  ;		dw	0		; hidden sector count (low word)
  3499                                  ;		dw	0		; hidden sector (high)
  3500                                  ;		dw	0		; number of sectors (low)
  3501                                  ;		dw	0		; number of sectors (high)
  3502                                  ;
  3503                                  ;		db 90h
  3504                                  ;align 2
  3505                                  
  3506                                  BPB288:
  3507                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3508                                  		; 3.5" diskettes - 2.88 MB ;	 
  3509                                  		dw	512		; physical sector size in bytes
  3510                                  		db	2		; sectors/allocation unit
  3511                                  		dw	1		; reserved sectors for dos
  3512                                  		db	2		; number of allocation tables
  3513                                  		dw	240		; number of directory entries
  3514                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3515                                  		db	0F0h		; media descriptor
  3516                                  		dw	3		; number of fat sectors
  3517                                  		dw	9		; sectors per track
  3518                                  		dw	2		; heads
  3519                                  		dw	0		; hidden sector count (low word)
  3520                                  		dw	0		; hidden sector (high)
  3521                                  		dw	0		; number of sectors (low)
  3522                                  		dw	0		; number of sectors (high)
  3523                                  
  3524                                  		db 90h			;
  3525                                  ;align 2
  3526                                  
  3527                                  %endif
  3528                                  
  3529                                  ; ----------------------------------------------------------------------------
  3530                                  					; align	2
  3531                                  ; 09/12/2022
  3532                                  %if 0
  3533                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3534                                  		dw bpb96t		; 96tpi	drives
  3535                                  		dw bpb35		; 3.5" drives
  3536                                  		dw bpb35		; unused 8" diskette
  3537                                  		dw bpb35		; unused 8" diskette
  3538                                  		dw bpb35		; used for hard	disk
  3539                                  		dw bpb35		; used for tape	drive
  3540                                  		dw bpb35		; FFOTHER
  3541                                  		dw bpb35		; ERIMO
  3542                                  		dw bpb288		; 2.88MB drive
  3543                                  		;
  3544                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3545                                  %endif
  3546                                  
  3547                                  ; 13/12/2022
  3548                                  %if 0
  3549                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3550                                  		dw BPB96T		; 96tpi	drives
  3551                                  		dw BPB35		; 3.5" drives
  3552                                  		dw BPB35		; unused 8" diskette
  3553                                  		dw BPB35		; unused 8" diskette
  3554                                  		dw BPB35		; used for hard	disk
  3555                                  		dw BPB35		; used for tape	drive
  3556                                  		dw BPB35		; FFOTHER
  3557                                  		dw BPB35		; ERIMO
  3558                                  		dw BPB288		; 2.88MB drive
  3559                                  		;
  3560                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3561                                  
  3562                                  %endif
  3563                                  
  3564                                  ; ----------------------------------------------------------------------------
  3565                                  
  3566                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3567                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3568                                  ;	  will not yet be moved to its final resting place, so we know
  3569                                  ;	  it'll be low.
  3570                                  ;
  3571                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3572                                  ;	  the function you want to call in Bios_Code. This routine will
  3573                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3574                                  ;	  will get executed when the utility function finishes. It will
  3575                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3576                                  ;	  and a retf
  3577                                  
  3578                                  ; 16/10/2022
  3579                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3580                                  ; 09/12/2022
  3581                                  BC_RETF equ bc_retf
  3582                                  
  3583                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3584                                  					; 2C7h:0C8h = 70h:2638h
  3585 00001755 [C800]                  		dw BC_RETF
  3586                                  
  3587                                  ; ----------------------------------------------------------------------------
  3588                                  
  3589                                  call_bios_code:	; proc far			
  3590 00001757 2EFF36[5517]            		push	word [cs:addr_of_bcretf] 
  3591                                  					; set up near return to far return
  3592 0000175C 2EFF36[E006]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3593 00001761 55                      		push	bp		; save offset of utility function
  3594 00001762 CB                      		retf			; far jump to (DOS)BIOS code
  3595                                  
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  		
  3598                                  		; 20/12/2022
  3599                                  ;flp_drvs	db 0			
  3600                                  
  3601                                  ; ----------------------------------------------------------------------------
  3602                                  
  3603                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3604                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3605                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3606                                  
  3607                                  ;-----------------------------------------------------------------------------
  3608                                  ; entry point from boot sector
  3609                                  ;-----------------------------------------------------------------------------
  3610                                  
  3611                                  init:		; 27/12/2018
  3612                                  		; MSDOS 6.0 (MSINIT.ASM)
  3613                                  		;=============================================================
  3614                                  		;
  3615                                  		; entry from boot sector. the register contents are:
  3616                                  		;
  3617                                  		;   dl = int 13 drive number we booted from
  3618                                  		;   ch = media byte
  3619                                  		;   bx = first data sector on disk.
  3620                                  		;   ax = first data sector (high)
  3621                                  		;   di = sectors/fat for the boot media.
  3622                                  
  3623                                  		; 07/04/2018
  3624                                  		;=============================================================
  3625                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3626                                                  ; DL = [bsDriveNumber]
  3627                                  		; DH = [bsMedia]
  3628                                  		; AX = [bsSectors] ; Total sectors
  3629                                  		; DS = 0, SS = 0
  3630                                  		; BP = 7C00h
  3631                                  	
  3632                                  ; 20/12/2022
  3633                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3634                                  %if 0	
  3635                                  		cli
  3636                                  
  3637                                  		push	ax
  3638                                  		xor	ax, ax
  3639                                  		mov	ds, ax
  3640                                  		pop	ax
  3641                                  %endif
  3642                                  
  3643                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3644                                  
  3645                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3646                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3647                                  
  3648                                  ;-----------------------------------------------------------------------------
  3649                                  ; initialization - stage 1
  3650                                  ;-----------------------------------------------------------------------------
  3651                                  ; 02/06/2018 - Retro DOS v3.0
  3652                                  		
  3653                                  		; 21/12/2022
  3654                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3655                                  		;mov	bx, 60h
  3656                                  		;mov	es, bx
  3657                                  		;mov	si, bp
  3658                                  		;sub	di, di
  3659                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3660                                  		;;mov	cl, 35
  3661                                  		;rep	movsw
  3662                                  
  3663 00001763 0E                      		push	cs
  3664 00001764 1F                      		pop	ds
  3665                                  
  3666                                  		; 20/03/2019 - Retro DOS v4.0
  3667                                  		;cli		; turn interrupts off while manupulating stack
  3668                                  		;mov	ss, cx	; set stack segment register
  3669 00001765 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3670                                  		;sti		; turn interrupts on
  3671                                  
  3672                                  		; 27/03/2018
  3673                                  		;mov	cx, KERNEL_SIZE	; words !
  3674                                  
  3675                                  		; 20/03/2019
  3676 00001768 B90080                  		mov	cx, 32768 ; 65536 bytes
  3677                                  
  3678                                  		; 21/12/2022
  3679                                  		; 07/04/2018
  3680 0000176B BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3681                                  		;mov	bl, KERNEL_SEGMENT
  3682 0000176E 8EC3                    		mov	es, bx
  3683 00001770 31FF                    		xor	di, di
  3684 00001772 89FE                    		mov	si, di
  3685                                  		
  3686                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3687                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3688 00001774 F3A5                    		rep	movsw
  3689                                  
  3690                                  		; 20/03/2019 - Retro DOS v4.0
  3691 00001776 53                      		push	bx
  3692 00001777 68[7B17]                		push	init0
  3693 0000177A CB                      		retf
  3694                                  init0:	
  3695                                  		; 20/12/2022
  3696                                  		; (combined kernel file > 64KB)
  3697                                  
  3698                                  		; 20/03/2019
  3699 0000177B B520                    		mov	ch, 20h
  3700 0000177D 8ED9                    		mov	ds, cx ; 2000h
  3701                                  		;mov	cx, 1070h
  3702 0000177F B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3703 00001782 8EC1                    		mov	es, cx
  3704                                  		
  3705                                  		; 21/12/2022
  3706                                  		KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3707                                  
  3708 00001784 B9[AA47]                		mov	cx, KERNEL_SIZE - 32768
  3709                                  		;xor	si, si
  3710                                  		;xor	di, di
  3711 00001787 F3A5                    		rep	movsw
  3712                                  
  3713                                  		; 17/06/2018 
  3714 00001789 8EDB                    		mov	ds, bx
  3715                                  		; 21/03/2019
  3716 0000178B 8EC3                    		mov	es, bx
  3717                                  ;init0:
  3718                                  ;		;push	es
  3719                                  ;		push	bx ; 20/03/2019
  3720                                  ;		push	init1 ; 07/04/2018
  3721                                  ;		retf	; jump to 0070h:init1
  3722                                  ;init:
  3723                                  init1:
  3724                                  		; 20/12/2022
  3725                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3726                                  		; for full MSDOS compatibility.
  3727                                  
  3728 0000178D 8EC1                    		mov	es, cx ; 0
  3729 0000178F 8ED9                    		mov	ds, cx ; 0
  3730                                  
  3731 00001791 B82205                  		mov	ax, SEC9
  3732                                  
  3733                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3734 00001794 B378                    		mov	bl, 1Eh*4
  3735                                  				; INT 1Eh points to diskette parms table
  3736                                  
  3737                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3738                                   		; (do not move the DPT if is not original ROMBIOS table)
  3739                                  
  3740                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3741                                  		;;jnz	short mov_dpt
  3742                                  
  3743                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3744                                  		;je	short dont_mov_dpt
  3745                                  
  3746                                  		;mov	si, [bx] ; [1Eh*4]		
  3747                                  ;mov_dpt:
  3748                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3749 00001796 C537                    		lds	si, [bx]
  3750 00001798 89C7                    		mov	di, ax  ; SEC9
  3751 0000179A B10B                    		mov	cl, 11
  3752                                  		;cld
  3753 0000179C F3A4                    		rep	movsb
  3754                                  
  3755                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3756 0000179E 8ED9                    		mov	ds, cx ; 0
  3757 000017A0 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3758 000017A2 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3759                                  ;dont_mov_dpt:
  3760                                  
  3761                                  ; 20/12/2022 - Retro DOS v4.0
  3762                                  %if 0
  3763                                  		; 27/12/2018 - Retro DOS v4.0
  3764                                  		; 'Starting MS-DOS...' message
  3765                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3766                                  		; (0070h:96A3h)
  3767                                  
  3768                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3769                                  		mov     ah, 0Eh
  3770                                  		;bh = 0
  3771                                          	mov     bl, 7		; "normal" attribute and page
  3772                                  startmsg_nxt_chr:  
  3773                                  		lodsb
  3774                                  		or	al, al
  3775                                          	jz	short startmsg_ok
  3776                                         
  3777                                  		int	10h		; video write
  3778                                          	jmp	short startmsg_nxt_chr
  3779                                  
  3780                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3781                                  
  3782                                  startmsg_ok:
  3783                                  
  3784                                  %endif
  3785                                  
  3786                                  ;-----------------------------------------------------------------------------
  3787                                  ; initialization - stage 2
  3788                                  ;-----------------------------------------------------------------------------
  3789                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3790                                  
  3791                                  
  3792                                  ; 19/03/2018
  3793                                  ; Retro DOS v2.0 (24/02/2018)
  3794                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3795                                  
  3796                                  ;------------------------------------------------------------------------
  3797                                  ;									:
  3798                                  ;	System initialization						:
  3799                                  ;									:
  3800                                  ;	The entry conditions are established by the bootstrap		:
  3801                                  ;	loader and are considered unknown. The following jobs		:
  3802                                  ;	will be performed by this module:				:
  3803                                  ;									:
  3804                                  ;	1.	All device initialization is performed			:
  3805                                  ;	2.	A local stack is set up and DS:SI are set		:
  3806                                  ;		to point to an initialization table. Then		:
  3807                                  ;		an inter-segment call is made to the first		:
  3808                                  ;		byte of the dos 					:
  3809                                  ;	3.	Once the dos returns from this call the ds		:
  3810                                  ;		register has been set up to point to the start		:
  3811                                  ;		of free memory. The initialization will then		:
  3812                                  ;		load the command program into this area 		:
  3813                                  ;		beginning at 100 hex and transfer control to		:
  3814                                  ;		this program.						:
  3815                                  ;									:
  3816                                  ;------------------------------------------------------------------------
  3817                                  		
  3818                                  		; 20/12/2022
  3819                                  		; ----------------------
  3820                                  		; Registers
  3821                                  		; ----------------------
  3822                                  		; DL = [bsDriveNumber]
  3823                                  		; DH = [bsMedia]
  3824                                  		; DS = 0, ES = 0, SS = 0
  3825                                  		; BP = 7C00h
  3826                                  		; SP = 700h
  3827                                  		; ----------------------
  3828                                  		; CX = 0				
  3829                                  
  3830                                  ; 02/10/2022 - 20/12/2022
  3831                                  ; ------------------------------------------------------------------------------
  3832                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3833                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3834                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3835                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3836                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3837                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3838                                  ; ------------------------------------------------------------------------------
  3839                                  
  3840                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3841                                  ;
  3842                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3843                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3844                                  ;;	data sector of the bios.
  3845                                  ;
  3846                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3847                                  ;		mov	[cs:bios_l], bx
  3848                                  
  3849                                  ; with the following information from msload, we don't need the
  3850                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3851                                  ;     limitation of msbio.com file.
  3852                                  
  3853                                  		; 21/12/2022
  3854 000017A5 FA                      		cli
  3855                                  
  3856 000017A6 0E                      		push	cs		; Save a peck of interrupt vectors...
  3857 000017A7 07                      		pop	es
  3858                                  		;push	cx
  3859                                  		;push	di
  3860                                  		; 20/12/2022
  3861 000017A8 B105                    		mov	cl, 5
  3862                                  		;mov	cx, 5		; NUMROMVECTORS
  3863                                  					; no. of rom vectors to	be saved
  3864                                  		;mov	si, offset RomVectors ; point to list of int vectors
  3865 000017AA BE[0001]                		mov	si, RomVectors
  3866                                  next_int_:		
  3867 000017AD 2E                      		cs	; 16/10/2022
  3868 000017AE AC                      		lodsb		
  3869                                  		;lods	byte ptr cs:[si] ; cs lodsb
  3870 000017AF 98                      		cbw			; ax = interrupt number
  3871 000017B0 D1E0                    		shl	ax, 1
  3872 000017B2 D1E0                    		shl	ax, 1		; int no * 4
  3873 000017B4 89C7                    		mov	di, ax		; interrupt vector address
  3874 000017B6 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  3875                                  					; saving address in di
  3876                                  		;lodsw			; movsw
  3877                                  		;stosw
  3878                                  		;lodsw			; movsw
  3879                                  		;stosw			; save the vector
  3880                                  		; 20/12/2022
  3881 000017B8 A5                      		movsw
  3882 000017B9 A5                      		movsw		
  3883                                  
  3884 000017BA 87F7                    		xchg	si, di
  3885 000017BC E2EF                    		loop	next_int_
  3886                                  		
  3887                                  		;pop	di
  3888                                  		;pop	cx
  3889                                  
  3890                                  ; we need to save int13 in two places in case we are running on an at.
  3891                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  3892                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  3893                                  ; rom int13 routine, we must have that rom address also stored away.
  3894                                  
  3895                                  		; 20/12/2022
  3896                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  3897                                  		;mov	[cs:Orig13], ax
  3898                                  		;mov	ax, [cs:Old13+2]
  3899                                  		;mov	[cs:Orig13+2], ax
  3900                                  
  3901                                  		; 16/10/2022
  3902 000017BE C7064C00[7407]          		mov	word [13h*4], block13
  3903                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  3904                                  					; set up int 13	for new	action
  3905 000017C4 8C0E4E00                		mov	[13h*4+2], cs
  3906                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  3907 000017C8 C7065400[4808]          		mov	word [15h*4], Int15
  3908                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  3909                                  					; set up int 15	for new	action
  3910 000017CE 8C0E5600                		mov	[15h*4+2], cs
  3911                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  3912 000017D2 C7066400[F907]          		mov	word [19h*4], int19
  3913                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  3914                                  					; set up int 19	for new	action
  3915 000017D8 8C0E6600                		mov	[19h*4+2], cs
  3916                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  3917                                  
  3918                                  		; 20/12/2022
  3919 000017DC 0E                      		push	cs
  3920 000017DD 1F                      		pop	ds
  3921                                  		
  3922 000017DE A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  3923 000017E1 A3[B400]                		mov	[Orig13], ax
  3924 000017E4 A1[0801]                		mov	ax, [Old13+2]
  3925 000017E7 A3[B600]                		mov	[Orig13+2], ax
  3926                                  					; ;
  3927 000017EA FB                      		sti
  3928 000017EB CD11                    		int	11h		; EQUIPMENT DETERMINATION
  3929                                  					; Return: AX = equipment flag bits
  3930                                  
  3931                                  ; we have to support a system that does not have any diskette
  3932                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  3933                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  3934                                  ; otherwise, the system has only hardfiles.
  3935                                  ;
  3936                                  ; important thing is that still, for compatibility reason, the drive letter
  3937                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  3938                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  3939                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  3940                                  ; drives will get "invalid drive letter ..." message. we are going to
  3941                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  3942                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  3943                                  
  3944                                  ; check the register returned by the equipment determination interrupt
  3945                                  ; we have to handle the case of no diskettes in the system by faking
  3946                                  ; two dummy drives.
  3947                                  ;
  3948                                  ; if the register indicates that we do have floppy drives we don't need
  3949                                  ; to do anything special.
  3950                                  ;
  3951                                  ; if the register indicates that we don't have any floppy drives then
  3952                                  ; what we need to do is set the fakefloppydrv variable, change the
  3953                                  ; register to say that we do have floppy drives and then go to execute
  3954                                  ; the code which starts at notsingle. this is because we can skip the
  3955                                  ; code given below which tries to find if there are one or two drives
  3956                                  ; since we already know about this.
  3957                                  
  3958                                  		; 06/05/2019 - Retro DOS v4.0
  3959 000017ED 88C1                    		mov	cl, al
  3960                                  
  3961                                  		; 12/12/2022
  3962 000017EF A801                    		test	al, 1
  3963                                  		;test	ax, 1		; floppy drives	present	?
  3964 000017F1 751F                    		jnz	short normalfloppydrv ;	yes.
  3965                                  
  3966                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  3967                                  ; whether it is an old ROM BIOS or a new one
  3968                                  ;
  3969                                  ; WARNING !!!
  3970                                  ;
  3971                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  3972                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  3973                                  
  3974                                  		; 20/12/2022
  3975                                  		;push	ax
  3976                                  		;push	bx
  3977                                  		;push	cx
  3978 000017F3 52                      		push	dx
  3979                                  		;push	di
  3980 000017F4 06                      		push	es
  3981 000017F5 B408                    		mov	ah, 8
  3982 000017F7 B200                    		mov	dl, 0
  3983 000017F9 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  3984                                  					; DL = drive number
  3985                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  3986                                  					; DL = number of consecutive drives
  3987                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  3988 000017FB 7202                    		jc	short _gdskp_error
  3989                                  		;;mov	[cs:flp_drvs], dl
  3990                                  		; 20/12/2022
  3991                                  		; ds = cs
  3992                                  		;mov	[flp_drvs], dl
  3993 000017FD 88D1                    		mov	cl, dl
  3994                                  _gdskp_error:	
  3995                                  		; 20/12/2022			
  3996 000017FF 07                      		pop	es
  3997                                  		;pop	di
  3998 00001800 5A                      		pop	dx
  3999                                  		;pop	cx
  4000                                  		;pop	bx
  4001                                  		;pop	ax
  4002                                  		
  4003 00001801 720F                    		jc	short normalfloppydrv
  4004                                  					; if error it is an old ROM BIOS
  4005                                  					; so, lets assume that ROM BIOS lied
  4006                                  		; 20/12/2022
  4007                                  		; ds = cs
  4008                                  		;cmp	byte [flp_drvs], 0
  4009                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4010                                  		;jz	short _set_fake_flpdrv
  4011                                  		;;mov	al, [cs:flp_drvs]
  4012                                  		;mov	al, [flp_drvs]
  4013                                  		;;dec	al		; make it zero based
  4014                                  		;; 18/12/2022
  4015                                  		;dec	ax
  4016                                  		;jmp	short got_num_flp_drvs
  4017                                  		
  4018                                  		; 20/12/2022
  4019 00001803 08C9                    		or	cl, cl ; [flp_drvs]
  4020 00001805 7403                    		jz	short _set_fake_flpdrv		
  4021 00001807 49                      		dec	cx	
  4022 00001808 EB0C                    		jmp	short got_num_flp_drvs
  4023                                  ; ----------------------------------------------------------------------------
  4024                                  
  4025                                  _set_fake_flpdrv:
  4026                                  		;20/12/2022
  4027                                  		; ds = cs
  4028 0000180A FEC1                    		inc	cl	; cl = 1
  4029 0000180C 880E[D316]              		mov	[fakefloppydrv], cl ; 1
  4030                                  		;mov	byte [fakefloppydrv], 1		
  4031                                  		;;mov	byte [cs:fakefloppydrv], 1
  4032                                  					; we don't have any floppy drives.
  4033                                  		; 20/12/2022
  4034                                  		;mov	ax, 1
  4035 00001810 EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4036                                  ; ----------------------------------------------------------------------------
  4037                                  
  4038                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4039                                  		; 20/12/2022
  4040                                  		;rol	al, 1		; there	exist floppy drives.
  4041                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4042 00001812 D0C1                    		rol	cl, 1
  4043 00001814 D0C1                    		rol	cl, 1
  4044                                  got_num_flp_drvs:			
  4045                                  		;;and	ax, 3		; only look at bits 0 &	1
  4046                                  		; 18/12/2022
  4047                                  		;and	al, 3
  4048                                  		; 20/12/2022
  4049 00001816 80E103                  		and	cl, 3
  4050 00001819 7505                    		jnz	short notsingle	; zero means single drive system
  4051                                  		; 20/12/2022
  4052 0000181B 41                      		inc	cx
  4053                                  		;inc	ax		; pretend it's a two drive system
  4054                                  settwodrive:				; set this to two fakedrives
  4055                                  		; 20/12/2022
  4056                                  		; ds = cs
  4057 0000181C FE06[7800]              		inc	byte [single]
  4058                                  		;inc	byte [cs:single] ; remember this
  4059                                  notsingle:	
  4060                                  		; 20/12/2022			
  4061                                  		;inc	ax		; ax has number	of drives, 2-4
  4062                                  		;			; is also 0 indexed boot drive if we
  4063                                  		;			; booted off hard file
  4064                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4065                                  		; 20/12/2022
  4066 00001820 FEC1                    		inc	cl	; cl >= 2
  4067                                  
  4068                                  ; 16/10/2022
  4069                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4070                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4071                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4072                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4073                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4074                                  SEC9	EQU	522h	; address of disk parameters
  4075                                  CHROUT	EQU	29h
  4076                                  LSTDRV	EQU     504h
  4077                                  
  4078                                  ; determine whether we booted from floppy or hard disk...
  4079                                  
  4080                                  		; 20/12/2022
  4081 00001822 88C8                    		mov	al, cl	; 26/05/2019
  4082                                  
  4083 00001824 F6C280                  		test	dl, 80h		; boot from floppy ?
  4084 00001827 7502                    		jnz	short gothrd	; no.
  4085 00001829 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4086                                  gothrd:					
  4087                                  
  4088                                  ; MSDOS 6.0
  4089                                  ;   ax = 0-based drive we booted from
  4090                                  ;   bios_l, bios_h set.
  4091                                  ;   cl = number of floppies including fake one
  4092                                  ;   ch = media byte
  4093                                  
  4094                                  ; Retro DOS 4.0 - 27/12/2018 
  4095                                  ;  (from Retro DOS v2.0 boot sector)
  4096                                  ;   dl = int 13 drive number we booted from
  4097                                  ;   dh = media byte
  4098                                  
  4099                                  		; 20/12/2022
  4100 0000182B 88F5                    		mov	ch, dh		; 01/07/2018
  4101                                  
  4102                                  		; cl = number of floppies
  4103                                  		; ch = media byte
  4104                                  
  4105                                  		; set up local stack
  4106                                  
  4107                                  		; 20/12/2022
  4108                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4109                                  					; bios_l, bios_h set.
  4110                                  					; cl = number of floppies including fake one
  4111                                  					; ch = media byte
  4112                                  		; 20/12/2022
  4113                                  		; es = ds = cs
  4114                                  		; ss = 0
  4115                                  		; sp = 700h
  4116                                  
  4117                                  		; 20/12/2022
  4118                                  		;cli
  4119                                  		;mov	ss, dx		; set stack segment and stack pointer
  4120                                  		;mov	sp, 700h
  4121                                  		;sti
  4122                                  
  4123 0000182D 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4124                                  		
  4125 0000182E 88EC                    		mov	ah, ch		; FAT ID to AH
  4126 00001830 50                      		push	ax ; (**)	; save boot drive number and media byte
  4127                                  		
  4128                                  ; let model_byte, secondary_model_byte be set here!!!
  4129                                  
  4130 00001831 B4C0                    		mov	ah, 0C0h
  4131 00001833 CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4132 00001835 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4133 00001837 80FC00                  		cmp	ah, 0
  4134 0000183A 7510                    		jnz	short no_rom_system_conf
  4135                                  
  4136                                  ;		; 20/12/2022
  4137                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4138                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4139                                  ;
  4140                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4141                                  ;
  4142                                  ;		on return:
  4143                                  ;		CF = 0 if successful
  4144                                  ;		   = 1 if error
  4145                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4146                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4147                                  ;
  4148                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4149                                  ;
  4150                                  ;		Offset Size	     Description
  4151                                  ;
  4152                                  ;		  00   word   length of descriptor (8 minimum)
  4153                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4154                                  ;		  03   byte   secondary model byte
  4155                                  ;		  04   byte   BIOS revision level (zero based)
  4156                                  ;		  05   byte   feature information, see below
  4157                                  ;		  06   dword  reserved
  4158                                  
  4159                                  		; 20/12/2022
  4160                                  		; ds = cs
  4161 0000183C 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4162 00001840 A2[3E06]                		mov	[model_byte], al
  4163                                  		;mov	[cs:model_byte], al
  4164                                  					; get/save model byte
  4165 00001843 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4166 00001847 A2[3F06]                		mov	[secondary_model_byte], al
  4167                                  		;mov	[cs:secondary_model_byte], al
  4168                                  					; get/save secondary model byte
  4169 0000184A EB0C                    		jmp	short turn_timer_on
  4170                                  ;-----------------------------------------------------------------------------
  4171                                  
  4172                                  no_rom_system_conf:			
  4173 0000184C BEFFFF                  		mov	si, 0FFFFh
  4174 0000184F 8EC6                    		mov	es, si
  4175                                  		; 20/12/2022
  4176 00001851 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4177 00001855 A2[3E06]                		mov	[model_byte], al
  4178                                  		;mov	[cs:model_byte], al ; save model byte
  4179                                  turn_timer_on:				
  4180 00001858 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4181 0000185A E620                    		out	20h, al		; Interrupt controller,	8259A.
  4182                                  					; AKPORT
  4183                                  
  4184                                  ; some olivetti m24 machines have an 8530 serial communications
  4185                                  ; chip installed at io address 50h and 52h. if we're running
  4186                                  ; on one of those, we must inhibit the normal aux port initialization
  4187                                  
  4188                                  		; 20/12/2022
  4189                                  		; ds = cs
  4190 0000185C 803E[3E06]00            		cmp	byte [model_byte], 0
  4191                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4192 00001861 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4193                                  					; (except olivetti m24)
  4194 00001863 E466                    		in	al, 66h		; is 8530 installed?
  4195 00001865 A820                    		test	al, 20h
  4196 00001867 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4197 00001869 B00F                    		mov	al, 0Fh		; double check
  4198 0000186B E650                    		out	50h, al
  4199 0000186D E450                    		in	al, 50h
  4200 0000186F A801                    		test	al, 1		; this test was	copied from olivetti
  4201 00001871 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4202                                  
  4203                                  not_olivetti_m24:
  4204 00001873 B003                    		mov	al, 3		; init com4
  4205 00001875 E85D08                  		call	aux_init
  4206 00001878 B002                    		mov	al, 2		; init com3
  4207 0000187A E85808                  		call	aux_init
  4208 0000187D B001                    		mov	al, 1		; init com2
  4209 0000187F E85308                  		call	aux_init
  4210 00001882 30C0                    		xor	al, al		; init com1
  4211 00001884 E84E08                  		call	aux_init
  4212                                  
  4213                                  skip_aux_port_init:			
  4214 00001887 B002                    		mov	al, 2		; init lpt3
  4215 00001889 E84108                  		call	print_init
  4216 0000188C B001                    		mov	al, 1		; init lpt2
  4217 0000188E E83C08                  		call	print_init
  4218 00001891 30C0                    		xor	al, al		; init lpt1
  4219 00001893 E83708                  		call	print_init
  4220                                  
  4221 00001896 31D2                    		xor	dx, dx	; 0
  4222 00001898 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4223 0000189A 8EC2                    		mov	es, dx
  4224 0000189C 31C0                    		xor	ax, ax
  4225                                  		; 16/10/2022
  4226 0000189E BF3405                  		mov	di, INITSPOT	; 0534h
  4227                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4228                                  					; IBM wants 4 zeros here
  4229 000018A1 AB                      		stosw
  4230 000018A2 AB                      		stosw
  4231 000018A3 8CC8                    		mov	ax, cs		; fetch	segment
  4232 000018A5 C7066C00[EE06]          		mov	word [BRKADR], cbreak
  4233                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4234                                  					; break	entry point
  4235 000018AB A36E00                  		mov	[BRKADR+2], ax		
  4236                                  		;mov	ds:6Eh,	ax	; vector for break
  4237 000018AE C706A400[6207]          		mov	word [CHROUT*4], outchr
  4238                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4239 000018B4 A3A600                  		mov	[CHROUT*4+2], ax
  4240                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4241                                  
  4242 000018B7 BF0400                  		mov	di, 4
  4243 000018BA BB[F406]                		mov	bx, intret ; 19/10/2022
  4244                                  		;mov	bx, offset intret ; intret (cs:intret)
  4245                                  					; will initialize rest of interrupts
  4246 000018BD 93                      		xchg	ax, bx
  4247 000018BE AB                      		stosw			; location 4
  4248 000018BF 93                      		xchg	ax, bx		; cs:
  4249 000018C0 AB                      		stosw			; int 1	; location 6
  4250 000018C1 83C704                  		add	di, 4
  4251 000018C4 93                      		xchg	ax, bx
  4252 000018C5 AB                      		stosw			; location 12
  4253 000018C6 93                      		xchg	ax, bx		; cs:
  4254 000018C7 AB                      		stosw			; int 3	; location 14
  4255 000018C8 93                      		xchg	ax, bx
  4256 000018C9 AB                      		stosw			; location 16
  4257 000018CA 93                      		xchg	ax, bx		; cs:
  4258 000018CB AB                      		stosw			; int 4	; location 18
  4259                                  
  4260                                  
  4261                                  ;		; 20/12/2022
  4262                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4263                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4264                                  ;	
  4265                                  ;		50:00	byte	Print screen status byte
  4266                                  ;				 00 = PrtSc not active,
  4267                                  ;				 01 = PrtSc in progress
  4268                                  ;				 FF = error
  4269                                  ;		50:01  3 bytes	Used by BASIC
  4270                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4271                                  ;		50:05  10bytes	POST work area
  4272                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4273                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4274                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4275                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4276                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4277                                  ;		50:20	word	DOS dynamic storage
  4278                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4279                                  ;		50:30	4bytes	MODE command
  4280                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4281                                  
  4282 000018CC 89160005                		mov	[0500h], dx ; 0
  4283                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4284 000018D0 89160405                		mov	[LSTDRV], dx	; [0504h]
  4285                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4286                                  
  4287                                  ; we need to initialize the cs:motorstartup variable from the disk
  4288                                  ; parameter table at sec9. the offsets in this table are defined in
  4289                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4290                                  
  4291 000018D4 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4292                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4293                                  					; [522h+0Ah]
  4294                                  		; 20/12/2022
  4295                                  		; ds = 0
  4296                                  
  4297 000018D7 2EA2[2601]              		mov	[cs:motorstartup], al
  4298 000018DB 2E803E[3E06]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4299 000018E1 720B                    		jb	short no_diddle	; no
  4300 000018E3 C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4301                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4302                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4303 000018E9 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4304                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4305                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4306                                  no_diddle:				
  4307 000018EE CD12                    		int	12h		; MEMORY SIZE -
  4308                                  					; Return: AX = number of contiguous 1K blocks of memory
  4309 000018F0 B106                    		mov	cl, 6
  4310 000018F2 D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4311                                  		
  4312                                  		; 20/12/2022
  4313                                  		; 03/07/2018 - 27/12/2018
  4314                                  		;pop	cx ; (**)
  4315                                  		;mov	[cs:drvfat], cx
  4316                                  		
  4317 000018F4 50                      		push	ax ; (*)	; save real top	of memory
  4318                                  
  4319                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4320                                  
  4321                                  ;M068 - BEGIN
  4322                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4323                                  
  4324                                  		; 20/12/2022
  4325                                  		; ds = 0
  4326                                  
  4327                                  		;push	ds
  4328                                  		;push	bx		; pushes not required but since this
  4329                                  					; happens to be a last minute change
  4330                                  					; & since it is only init code.
  4331                                  		;xor	bx, bx
  4332                                  		;mov	ds, bx
  4333                                  		
  4334                                  		;mov	bx, ds:0BCh	; [2Fh*4]
  4335 000018F5 8B1EBC00                		mov	bx, [2Fh*4]
  4336                                  		;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4337 000018F9 8E1EBE00                		mov	ds, [2Fh*4+2]
  4338 000018FD 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4339                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4340 00001902 750F                    		jnz	short SkipRPL
  4341 00001904 807F054C                		cmp	byte [bx+5], 'L'
  4342                                  		;cmp	byte ptr [bx+5], 'L'
  4343 00001908 7509                    		jnz	short SkipRPL
  4344 0000190A 89C2                    		mov	dx, ax		; get TOM into DX
  4345 0000190C B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4346 0000190F CD2F                    		int	2Fh		; Get new TOM from any RPL
  4347 00001911 89D0                    		mov	ax, dx
  4348                                  SkipRPL:	
  4349                                  		; 20/12/2022		
  4350                                  		;pop	bx
  4351                                  		;pop	ds
  4352                                  
  4353                                  ;M068 - END
  4354                                  		; 20/12/2022
  4355                                  		; 27/12/2018
  4356 00001913 0E                      		push	cs
  4357 00001914 1F                      		pop	ds
  4358                                  
  4359                                  		; 18/03/2019 - Retro DOS v4.0
  4360                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4361                                  		;mov	[cs:fatloc], ax	; location to read fat
  4362                                  
  4363                                  		; 01/07/2018
  4364                                  		; 08/04/2018
  4365                                  		; 28/03/2018
  4366                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4367 00001915 83E840                  		sub	ax, 64
  4368 00001918 A3[CD16]                		mov	[init_bootseg], ax ; 20/12/2022
  4369                                  		;mov	[cs:init_bootseg], ax
  4370                                  
  4371                                  		; 27/12/2018 - Retro DOS v4.0
  4372                                  		;pop	ax ; (*)	; get back real top of memory
  4373 0000191B 5A                      		pop	dx ; (*)
  4374                                  
  4375                                  		; 20/12/2022
  4376                                  		; 27/12/2018
  4377 0000191C 59                      		pop	cx ; (**)
  4378 0000191D 890E[CA16]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4379                                  
  4380                                  		; 20/12/2022
  4381                                  
  4382                                  		;mov	dx, 46Dh	; SYSINIT segment
  4383 00001921 BA3D04                  		mov	dx, SYSINITSEG	; 17/10/2022
  4384 00001924 8EDA                    		mov	ds, dx
  4385                                  
  4386                                  ; set pointer to resident device driver chain
  4387                                  
  4388                                  		; 17/10/2022
  4389 00001926 C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4390                                  		;mov	word [273h], res_dev_list
  4391                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4392                                  					; [SYSINIT+DEVICE_LIST]
  4393 0000192C 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4394                                  		;mov	[275h], cs
  4395                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4396                                  
  4397 00001930 A3[9202]                		mov	[MEMORYSIZE], ax
  4398                                  		;mov	[292h], ax
  4399                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4400                                  
  4401 00001933 FEC1                    		inc	cl
  4402 00001935 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4403                                  		;mov	[296h], cl
  4404                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4405                                  
  4406 00001939 C706[7102]C807          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4407                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4408                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4409                                  					; dos_load_seg
  4410                                  
  4411                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4412                                  ; printer cards. we initialize this value to point to an iret only if
  4413                                  ;
  4414                                  ; 1) the original segment points to storage inside valid ram.
  4415                                  ;
  4416                                  ; 2) the original segment is 0F000:xxxx
  4417                                  
  4418                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4419                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4420                                  		;mov	es, ax
  4421                                  		; 20/12/2022
  4422                                  		;push	ds ; SYSINITSEG
  4423                                  		;pop	es
  4424 0000193F 8EC2                    		mov	es, dx ; SYSINITSEG
  4425 00001941 31C0                    		xor	ax, ax ; 0
  4426 00001943 8ED8                    		mov	ds, ax		; segment 0
  4427                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4428 00001945 A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4429                                  		; 18/10/2022
  4430 00001948 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4431                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  4432 0000194D 7605                    		jbe	short resetintf
  4433 0000194F 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4434 00001952 750A                    		jnz	short keepintf
  4435                                  resetintf:	
  4436 00001954 C7063C00[F406]          		mov	word [0Fh*4], intret			
  4437                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4438 0000195A 8C0E3E00                		mov	word [0Fh*4+2], cs
  4439                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4440                                  keepintf:				
  4441                                  ; end important
  4442                                  
  4443                                  ; 17/10/2022
  4444                                  ; 28/12/2018 - Retro DOS v4.0
  4445                                  
  4446                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4447                                  ;
  4448                                  ; we will check if the system has ibm extended keyboard by
  4449                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4450                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4451                                  ; for the extended keyboard function. use cx as the temporary register.
  4452                                  
  4453                                  		; 20/12/2022
  4454                                  		; ds = 0
  4455                                  		;xor	cx, cx
  4456                                  		;mov	ds, cx
  4457                                  
  4458 0000195E 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4459                                  
  4460                                  		; 20/12/2022
  4461                                  		; 20/03/2019
  4462 00001962 0E                      		push	cs
  4463 00001963 1F                      		pop	ds
  4464                                  
  4465                                  		;test	cl, 00010000b ; 10h
  4466 00001964 F6C110                  		test	cl, 10h		; extended keyboard ?
  4467 00001967 740A                    		jz	short org_key	; no, original keyboard
  4468                                  
  4469                                  		; 20/12/2022
  4470                                  		;  ds = cs
  4471 00001969 C606[E504]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4472 0000196E C606[E604]11            		mov	byte [keysts_func], 11h
  4473                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4474                                  		;mov	byte [cs:keysts_func], 11h
  4475                                  					; change for extended keyboard functions
  4476                                  org_key:
  4477                                  
  4478                                  ; 02/06/2018 - Retro DOS v3.0
  4479                                  
  4480                                  ;**************************************************************
  4481                                  ;	will initialize the number of drives
  4482                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4483                                  ;	the indications are as follows:
  4484                                  ;
  4485                                  ;	bits	7	6	drives
  4486                                  ;		0	0	1
  4487                                  ;		0	1	2
  4488                                  ;		1	0	3
  4489                                  ;		1	1	4
  4490                                  ;**************************************************************
  4491                                  		
  4492                                  		; 20/12/2022
  4493                                  		; ds = cs		
  4494                                  		;push	cs
  4495                                  		;pop	ds
  4496                                  		; 21/12/2022
  4497                                  		;push	cs
  4498                                  		;pop	es
  4499                                  
  4500 00001973 E8A008                  		call	cmos_clock_read	; If cmos clock	exists,
  4501                                  					; then set the system time according to	that.
  4502                                  					; also,	reset the cmos clock rate.
  4503                                  		; 18/10/2022
  4504                                  		;mov	word ptr BData_start, offset harddrv ;
  4505                                  					; set up pointer to hdrive
  4506                                  		; 02/10/2022
  4507 00001976 C706[0000][1609]        		mov	word [hdrv_pat], harddrv 
  4508                                  		
  4509                                  		; 20/12/2022
  4510                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4511 0000197C 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4512 0000197D 30E4                    		xor	ah, ah		; chuck	fat id byte
  4513 0000197F A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4514 00001982 A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4515 00001985 D1E0                    		shl	ax, 1
  4516 00001987 0106[4417]              		add	[last_dskdrv_table], ax
  4517                                  
  4518 0000198B B280                    		mov	dl, 80h
  4519 0000198D B408                    		mov	ah, 8
  4520 0000198F CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4521                                  					; DL = drive number
  4522                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4523                                  					; DL = number of consecutive drives
  4524                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4525 00001991 7204                    		jc	short enddrv
  4526 00001993 8816[4317]              		mov	[hnum], dl	; save number of hard disk drives
  4527                                  enddrv:
  4528                                  		; 21/12/2022
  4529 00001997 0E                      		push	cs
  4530 00001998 07                      		pop	es
  4531                                  
  4532                                  ; scan the list of drives to determine their type. we have three flavors of
  4533                                  ; diskette drives:
  4534                                  ;
  4535                                  ;   48tpi drives    we do nothing special for them
  4536                                  ;   96tpi drives    mark the fact that they have changeline support.
  4537                                  ;   3.5"  drives    mark changeline support and small.
  4538                                  ;
  4539                                  ; the following code uses registers for certain values:
  4540                                  ;
  4541                                  ;   dl - physical drive
  4542                                  ;   ds:di - points to current bds
  4543                                  ;   cx - flag bits for bds
  4544                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4545                                  					
  4546 00001999 30D2                    		xor	dl, dl
  4547                                  
  4548                                  		; 20/12/2022
  4549                                  		; ds = cs
  4550                                  		; 17/06/2018		 
  4551                                  		;push	cs
  4552                                  		;pop	ds
  4553                                  
  4554 0000199B C606[2C01]09            		mov	byte [eot], 9
  4555 000019A0 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4556                                  					; to set aside two bdss	for the	two fake floppy	drives
  4557                                  
  4558                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4559                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4560                                  
  4561                                  ; check to see if we are faking floppy drives. if not we don't
  4562                                  ; do anything special. if we are faking floppy drives we need
  4563                                  ; to set aside two bdss for the two fake floppy drives. we
  4564                                  ; don't need to initalise any fields though. so starting at start_bds
  4565                                  ; use the link field in the bds structure to go to the second bds
  4566                                  ; in the list and initalise it's link field to -1 to set the end of
  4567                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4568                                  ; the bds for harddrives.
  4569                                  
  4570 000019A3 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  4571 000019A8 750B                    		jnz	short loop_drive
  4572 000019AA 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4573                                  					; di <-	first bds link
  4574 000019AC 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4575                                  					; di <-	second bds link
  4576 000019AE C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4577 000019B2 E90F01                  		jmp	dohard		; allocate/initialise bds for harddrives
  4578                                  ;-----------------------------------------------------------------------------
  4579                                  
  4580                                  loop_drive:				
  4581 000019B5 3A16[7500]              		cmp	dl, [drvmax]
  4582 000019B9 7203                    		jb	short got_more
  4583 000019BB E90201                  		jmp	done_drives
  4584                                  ;-----------------------------------------------------------------------------
  4585                                  
  4586                                  got_more:				
  4587 000019BE 31C9                    		xor	cx, cx		; zero all flags
  4588 000019C0 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4589                                  					; get next bds
  4590 000019C2 B600                    		mov	dh, 0 ; ff48tpi
  4591                                  					; set form factor to 48	tpi
  4592 000019C4 C606[D216]28            		mov	byte [num_cyln], 40 ; 40 tracks per	side
  4593                                  		
  4594                                  		; 20/12/2022
  4595                                  		;push	ds ; 11/05/2019	
  4596 000019C9 57                      		push	di
  4597 000019CA 52                      		push	dx
  4598 000019CB 51                      		push	cx
  4599 000019CC 06                      		push	es ; ((*)) ; 20/12/2022	
  4600                                  		
  4601 000019CD B408                    		mov	ah, 8
  4602 000019CF CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4603                                  					; DL = drive number
  4604                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4605                                  					; DL = number of consecutive drives
  4606                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4607 000019D1 7276                    		jc	short noparmsfromrom
  4608                                  
  4609                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4610                                  ; in this case, we are going to put bogus informations to bds table.
  4611                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4612                                  ; they are calculated at the later time. this is just for the diagnostic
  4613                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4614                                  ; this should only happen with drive b.
  4615                                  
  4616 000019D3 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4617 000019D6 7505                    		jnz	short pfr_ok
  4618                                  
  4619                                  		;mov	ch, 39		; rom gave wrong info.
  4620                                  		;mov	cl, 9		; let's default to 360k.
  4621                                  		; 20/12/2022
  4622 000019D8 B90927                  		mov	cx, 2709h
  4623                                  
  4624 000019DB B601                    		mov	dh, 1
  4625                                  pfr_ok:					
  4626 000019DD FEC6                    		inc	dh		; make number of heads 1-based
  4627 000019DF FEC5                    		inc	ch		; make number of cylinders 1-based
  4628 000019E1 8836[D016]              		mov	[num_heads], dh	; save parms returned by rom
  4629 000019E5 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4630 000019E8 880E[D116]              		mov	[sec_trk], cl
  4631 000019EC 882E[D216]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4632                                  
  4633                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4634                                  
  4635 000019F0 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4636                                  		;jbe	short eot_ok
  4637                                  		; 09/12/2022
  4638                                  		;jne	short eotok  ; wrong ! 14/08/2023
  4639                                  		; 14/08/2023
  4640 000019F4 7604                    		jbe	short eotok
  4641 000019F6 880E[2C01]              		mov	[eot], cl
  4642                                  ;eot_ok:					
  4643                                  eotok:
  4644                                  		; 20/12/2022
  4645 000019FA 07                      		pop	es ; ((*)) es = cs = ds		
  4646 000019FB 59                      		pop	cx
  4647 000019FC 5A                      		pop	dx
  4648 000019FD 5F                      		pop	di
  4649                                  		;pop	ds ; 20/12/2022
  4650                                  
  4651                                  ; Check	for presence of	changeline
  4652                                  
  4653 000019FE B415                    		mov	ah, 15h
  4654 00001A00 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4655                                  					; DL = drive ID
  4656                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4657                                  					; CX:DX	= number of sectors on the media
  4658 00001A02 720D                    		jc	short changeline_done
  4659 00001A04 80FC02                  		cmp	ah, 2		; check	for presence of	changeline
  4660 00001A07 7508                    		jnz	short changeline_done
  4661                                  
  4662                                  ; we have a drive with change line support.
  4663                                  
  4664 00001A09 80C902                  		or	cl, 2		; fchangeline
  4665                                  					; signal type
  4666 00001A0C C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4667                                  
  4668                                  ; we now try to set up the form factor for the types of media that we know
  4669                                  ; and can recognise. for the rest, we set the form factor as "other".
  4670                                  
  4671                                  changeline_done:
  4672                                  
  4673                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  4674                                  			
  4675 00001A11 803E[D216]28            		cmp	byte [num_cyln], 40
  4676 00001A16 750B                    		jnz	short try_80
  4677 00001A18 803E[D116]09            		cmp	byte [sec_trk], 9
  4678 00001A1D 7653                    		jbe	short nextdrive
  4679                                  gotother:				
  4680 00001A1F B607                    		mov	dh, 7 ; ffOther ; we have a "strange" medium 
  4681 00001A21 EB4F                    		jmp	short nextdrive
  4682                                  ;-----------------------------------------------------------------------------
  4683                                  
  4684                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4685                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4686                                  
  4687                                  try_80:					
  4688 00001A23 803E[D216]50            		cmp	byte [num_cyln], 80
  4689 00001A28 75F5                    		jnz	short gotother
  4690 00001A2A B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4691 00001A2C 803E[D116]24            		cmp	byte [sec_trk], 36 ; is it	?
  4692 00001A31 743F                    		jz	short nextdrive	; yeah,	go update
  4693                                  
  4694                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4695                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4696                                  		;mov	dh, ff144
  4697                                  		;cmp	byte [sec_trk], 18
  4698                                  		;je	short nextdrive
  4699                                  
  4700 00001A33 803E[D116]0F            		cmp	byte [sec_trk], 15
  4701 00001A38 740B                    		jz	short got96
  4702                                  		
  4703 00001A3A 803E[D116]09            		cmp	byte [sec_trk], 9
  4704 00001A3F 75DE                    		jnz	short gotother
  4705                                  		
  4706 00001A41 B602                    		mov	dh, 2 ; ffSmall
  4707 00001A43 EB2D                    		jmp	short nextdrive
  4708                                  ; ----------------------------------------------------------------------------
  4709                                  
  4710                                  got96:					
  4711 00001A45 B601                    		mov	dh, 1 ; ff96tpi
  4712 00001A47 EB29                    		jmp	short nextdrive
  4713                                  ; ----------------------------------------------------------------------------
  4714                                  
  4715                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4716                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4717                                  
  4718                                  noparmsfromrom:				
  4719                                  		; 20/12/2022
  4720 00001A49 07                      		pop	es ; ((*)) 
  4721 00001A4A 59                      		pop	cx
  4722 00001A4B 5A                      		pop	dx
  4723 00001A4C 5F                      		pop	di
  4724                                  		;pop	ds ; 20/12/2022
  4725                                  		
  4726 00001A4D B415                    		mov	ah, 15h
  4727 00001A4F CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4728                                  					; DL = drive ID
  4729                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4730                                  					; CX:DX	= number of sectors on the media
  4731 00001A51 721F                    		jc	short nextdrive
  4732                                  		
  4733 00001A53 80FC02                  		cmp	ah, 2		; is there changeline?
  4734 00001A56 751A                    		jnz	short nextdrive
  4735                                  
  4736 00001A58 80C902                  		or	cl, 2 ; fchangeline
  4737 00001A5B C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi drives
  4738 00001A60 C606[D216]50            		mov	byte [num_cyln], 80
  4739 00001A65 B601                    		mov	dh, 1 ; ff96tpi 
  4740 00001A67 B00F                    		mov	al, 15
  4741 00001A69 3A06[2C01]              		cmp	al, [eot]
  4742 00001A6D 7603                    		jbe	short nextdrive ; eot_ok2
  4743 00001A6F A2[2C01]                		mov	[eot], al
  4744                                  ; ----------------------------------------------------------------------------
  4745                                  
  4746                                  ;eot_ok2:
  4747                                  nextdrive:				
  4748 00001A72 80C920                  		or	cl, 20h	; fi_own_physical
  4749                                  					; set this true	for all	drives
  4750 00001A75 88D7                    		mov	bh, dl		; save int13 drive number
  4751                                  
  4752                                  ; we need to do special things if we have a single drive system and are setting
  4753                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4754                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4755                                  ; we detect the presence of this situation by examining the flag single for the
  4756                                  ; value 2.
  4757 00001A77 803E[7800]02            		cmp	byte [single], 2
  4758 00001A7C 7505                    		jnz	short not_special
  4759 00001A7E FECF                    		dec	bh		; int13	drive number same for logical drive
  4760 00001A80 80F120                  		xor	cl, 20h	; fi_own_physical
  4761                                  					; reset	ownership flag for logical drive
  4762                                  not_special:
  4763                                  
  4764                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4765                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4766                                  ; form factor is of type "ffother".
  4767                                  				
  4768 00001A83 31C0                    		xor	ax, ax		; fill BDS for drive
  4769 00001A85 A0[D016]                		mov	al, [num_heads]
  4770 00001A88 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4771 00001A8B A0[D116]                		mov	al, [sec_trk]
  4772 00001A8E 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4773 00001A91 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4774 00001A94 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4775 00001A97 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4776 00001A9A 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4777 00001A9D 8A1E[D216]              		mov	bl, [num_cyln]
  4778 00001AA1 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4779 00001AA4 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4780 00001AA9 7511                    		jnz	short no_single
  4781 00001AAB C606[7800]02            		mov	byte [single], 2 ; Don't forget we have
  4782                                  					; single drive system
  4783                                  		; 18/12/2022
  4784 00001AB0 80C910                  		or	cl, 10h
  4785                                  		;or	cx, 10h	; fi_am_mult
  4786                                  					; set that this	is one of several drives
  4787 00001AB3 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4788                                  					; save flags
  4789 00001AB6 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4790                                  					; move to next BDS in list
  4791 00001AB8 FEC2                    		inc	dl		; add a	number
  4792 00001ABA EBB6                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4793                                  ; ----------------------------------------------------------------------------
  4794                                  
  4795                                  no_single:				
  4796                                  		;inc	dl
  4797                                  		; 18/12/2022
  4798 00001ABC 42                      		inc	dx
  4799 00001ABD E9F5FE                  		jmp	loop_drive
  4800                                  ; ----------------------------------------------------------------------------
  4801                                  
  4802                                  done_drives:	
  4803                                  		;mov	word [di+BDS.link], -1			
  4804 00001AC0 C705FFFF                		mov	word [di], -1	; set link to null
  4805                                  
  4806                                  ; set up all the hard drives in	the system
  4807                                  
  4808                                  		; 20/12/2022
  4809                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  4810                                  dohard:					
  4811 00001AC4 8A36[4317]              		mov	dh, [hnum]
  4812 00001AC8 08F6                    		or	dh, dh		; done if no hardfiles
  4813 00001ACA 745B                    		jz	short static_configure
  4814 00001ACC B280                    		mov	dl, 80h
  4815                                  dohard1:				
  4816 00001ACE 52                      		push	dx
  4817 00001ACF 8B3E[4617]              		mov	di, [end_of_bdss]
  4818 00001AD3 8A1E[7500]              		mov	bl, [drvmax]
  4819 00001AD7 B700                    		mov	bh, 0		; first	primary	partition (or active)
  4820 00001AD9 E8C801                  		call	sethard
  4821 00001ADC 7208                    		jb	short hardfile_err
  4822 00001ADE E8EB06                  		call	dmax_check	; error	if already 26 drives
  4823 00001AE1 7303                    		jnb	short hardfile_err
  4824 00001AE3 E8FB06                  		call	xinstall_bds	; insert new bds into linked list
  4825                                  hardfile_err:				
  4826 00001AE6 5A                      		pop	dx
  4827 00001AE7 FEC2                    		inc	dl		; next hard drive
  4828 00001AE9 FECE                    		dec	dh
  4829 00001AEB 75E1                    		jnz	short dohard1
  4830                                  
  4831                                  ; end of physical drive	initialization
  4832                                  
  4833                                  ; *** do not change the position of the following statement.
  4834                                  ; *** domini routine will use [drvmax] value for the start of the logical
  4835                                  ; *** drive number of mini disk(s).
  4836                                  					
  4837 00001AED E8EE05                  		call	domini		; for setting up mini disks, if found
  4838                                  
  4839                                  ; -- begin added section
  4840                                  
  4841 00001AF0 8A36[4317]              		mov	dh, [hnum]	; we already know this is >0
  4842 00001AF4 B280                    		mov	dl, 80h
  4843                                  dohardx1:				
  4844 00001AF6 B701                    		mov	bh, 1		; do all subsequent primary partitions
  4845                                  dohardx2:				
  4846 00001AF8 52                      		push	dx
  4847 00001AF9 53                      		push	bx
  4848 00001AFA 8B3E[4617]              		mov	di, [end_of_bdss]
  4849 00001AFE 8A1E[7500]              		mov	bl, [drvmax]
  4850 00001B02 E89F01                  		call	sethard
  4851 00001B05 720E                    		jb	short dohardx4	; move to next hardfile	if error
  4852 00001B07 E8C206                  		call	dmax_check	; make sure <=26 drives
  4853 00001B0A 7309                    		jnb	short dohardx4	; skip if error
  4854 00001B0C E8D206                  		call	xinstall_bds	; insert new bds into linked list
  4855 00001B0F 5B                      		pop	bx		; get partition	number
  4856 00001B10 5A                      		pop	dx		; restore physical drive counts
  4857 00001B11 FEC7                    		inc	bh
  4858 00001B13 EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  4859                                  ; ----------------------------------------------------------------------------
  4860                                  
  4861                                  dohardx4:				
  4862 00001B15 5B                      		pop	bx		; unjunk partition number from stack
  4863 00001B16 5A                      		pop	dx		; restore physical drive counts
  4864 00001B17 FEC2                    		inc	dl		; next hard drive
  4865 00001B19 FECE                    		dec	dh
  4866 00001B1B 75D9                    		jnz	short dohardx1
  4867                                  
  4868                                  ; -- end changed section
  4869                                  
  4870                                  ;******************************************************************************
  4871                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  4872                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  4873                                  ; than two diskette drives
  4874                                  ;
  4875                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  4876                                  ;		as usual and then rescan the bds chain to adjust the  drive
  4877                                  ;		letters. to do this, scan for disk drives and assign logical
  4878                                  ;		drive number starting from 2 and then rescan diskette drives
  4879                                  ;		and assign next to the last logical drive number of last disk
  4880                                  ;		drive to the 3rd and 4th diskette drives.
  4881                                  ;******************************************************************************
  4882                                  
  4883 00001B1D 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  4884                                  		;jbe	short static_configure ; no - no need for remapping
  4885 00001B22 7603                    		jbe	short no_remap
  4886 00001B24 E8F900                  		call	remap		; remap	bds chain to adjust driver letters
  4887                                  no_remap:
  4888                                  
  4889                                  ; End of drive initialization.
  4890                                  
  4891                                  ; ----------------------------------------------------------------------------
  4892                                  
  4893                                  ;we now decide, based on the configurations available so far, what
  4894                                  ;code or data we need to keep as a stay resident code. the following table
  4895                                  ;shows the configurations under consideration. they are listed in the order
  4896                                  ;of their current position memory.
  4897                                  ;
  4898                                  ;configuration will be done in two ways:
  4899                                  ;
  4900                                  ;first, we are going to set "static configuration". static configuration will
  4901                                  ;consider from basic configuration to endof96tpi configuration. the result
  4902                                  ;of static configuration will be the address the dynamic configuration will
  4903                                  ;use to start with.
  4904                                  ;
  4905                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  4906                                  ;involves possible relocation of code or data. dynamic configuration routine
  4907                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  4908                                  ;code individually. after these operation, [dosdatasg] will be set.
  4909                                  ;this will be the place sysinit routine will relocate msdos module for good.
  4910                                  
  4911                                  ; -- begin changed section
  4912                                  ;
  4913                                  ;   1.	 basic configuration for msbio (endfloppy)
  4914                                  ;   2.   end96tpi	; a system that supports "change line error"
  4915                                  ;   3.	 end of bdss	; end of bdss for hard disks
  4916                                  ;   4.	 endatrom	;some of at rom fix module.
  4917                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  4918                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  4919                                  ;
  4920                                  
  4921                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  4922                                  
  4923                                  static_configure:			
  4924 00001B27 8B3E[4617]              		mov	di, [end_of_bdss]
  4925 00001B2B 81FF[1709]              		cmp	di, bdss	; 19/10/2022
  4926                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  4927 00001B2F 750D                    		jnz	short dynamic_configure	; that's the end, then
  4928                                  		; 18/10/2022
  4929 00001B31 BF[1709]                		mov	di, end96tpi
  4930                                  		;mov	di, offset harddrv ; end96tpi
  4931                                  					; keep everything up to	end96tpi
  4932 00001B34 803E[7700]00            		cmp	byte [fhave96], 0
  4933 00001B39 7503                    		jnz	short dynamic_configure
  4934                                  		
  4935 00001B3B BF[FC08]                		mov	di, endfloppy
  4936                                  dynamic_configure:
  4937                                  		; 20/12/2022
  4938                                  		;push	cs
  4939                                  		;pop	es
  4940                                  		
  4941 00001B3E FC                      		cld			; clear direction
  4942                                  
  4943                                  ; -- end changed section
  4944                                  
  4945                                  		; 20/12/2022
  4946                                  		; ds = cs <> es
  4947                                  		; ss = 0
  4948                                  		; sp = 700h
  4949                                  
  4950 00001B3F 803E[3E06]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  4951 00001B44 7577                    		jnz	short checkcmosclock
  4952 00001B46 803E[4317]00            		cmp	byte [hnum], 0	; No hard file?
  4953 00001B4B 7470                    		jz	short checkcmosclock
  4954 00001B4D 97                      		xchg	ax, di		; save allocation pointer in ax
  4955 00001B4E BE00F0                  		mov	si, 0F000h
  4956 00001B51 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  4957 00001B53 BE[4C17]                		mov	si, bios_date	; "01/10/84"
  4958 00001B56 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  4959 00001B59 B90900                  		mov	cx, 9		; bdate_l
  4960                                  					; Only patch ROM for bios 01/10/84
  4961 00001B5C F3A6                    		repe cmpsb		; check	for date + zero	on end
  4962 00001B5E 97                      		xchg	ax, di		; restore allocation pointer
  4963                                  
  4964                                  ; M015 -- begin changes
  4965                                  
  4966                                  		;jnz	short checkcmosclock
  4967                                  		; 02/10/2022
  4968 00001B5F 7508                    		jnz	short checkcompaqbug
  4969                                  
  4970                                  ; install at rom fix
  4971                                  
  4972                                  		; 19/10/2022
  4973                                  		;mov	cx, offset endatrom
  4974 00001B61 B9[0A14]                		mov	cx, endatrom
  4975                                  		;mov	si, offset ibm_disk_io
  4976 00001B64 BE[DC12]                		mov	si, ibm_disk_io
  4977 00001B67 EB46                    		jmp	short install_int13_patch
  4978                                  ; ----------------------------------------------------------------------------
  4979                                  
  4980                                  ; M065 -- begin changes
  4981                                  ;
  4982                                  ; On certain systems with Western Digital disk controllers, the
  4983                                  ; following detection scheme caused an unpredictable and serious
  4984                                  ; failure. In particular, they've implemented a nonstandard
  4985                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  4986                                  ; what happens to be at es:[bx] and other memory locations indexed
  4987                                  ; off of it.
  4988                                  ;
  4989                                  ; Compaq was unable to tell us exactly which kind of systems have
  4990                                  ; the bug, except that they guarantee that the bug was fixed in
  4991                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  4992                                  ; string, and then look for date codes before 08/04/86 to decide
  4993                                  ; when to install the hook.
  4994                                  
  4995                                  ;checkcmosclock:
  4996                                  ; 02/10/2022				
  4997                                  checkcompaqbug:
  4998                                  		; 20/12/2022
  4999                                  		; es = 0F000h
  5000                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  5001                                  		;mov	es, ax
  5002                                  
  5003                                  		; 19/10/2022
  5004 00001B69 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5005                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5006 00001B70 754B                    		jnz	short not_compaq_patch
  5007 00001B72 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5008                                  		;cmp	word ptr es:0FFECh, 'PM'
  5009 00001B79 7542                    		jnz	short not_compaq_patch
  5010 00001B7B 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5011                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5012 00001B82 7539                    		jnz	short not_compaq_patch
  5013                                  
  5014                                  ; We're running on a COMPAQ. Now look at the date code.
  5015                                  
  5016 00001B84 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5017 00001B88 86E0                    		xchg	ah, al
  5018 00001B8A 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5019                                  		;cmp	ax, '86'        ; 3836h
  5020                                  					; is it	86?
  5021 00001B8D 772E                    		ja	short not_compaq_patch
  5022 00001B8F 7218                    		jb	short do_compaq_patch
  5023 00001B91 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5024 00001B95 86E0                    		xchg	ah, al
  5025 00001B97 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5026                                  		;cmp	ax, '08'        ; 3038h
  5027                                  					; is it	08?
  5028 00001B9A 7721                    		ja	short not_compaq_patch
  5029 00001B9C 720B                    		jb	short do_compaq_patch
  5030 00001B9E 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5031 00001BA2 86E0                    		xchg	ah, al
  5032 00001BA4 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5033                                  		;cmp	ax, '04'        ; 3034h
  5034                                  					; is it	04?
  5035 00001BA7 7314                    		jnb	short not_compaq_patch
  5036                                  
  5037                                  do_compaq_patch:			
  5038 00001BA9 B9[2B14]                		mov	cx, end_compaq_i13hook
  5039 00001BAC BE[0A14]                		mov	si, endatrom
  5040                                  
  5041                                  install_int13_patch:			
  5042 00001BAF 0E                      		push	cs
  5043 00001BB0 07                      		pop	es
  5044                                  		; 18/10/2022
  5045 00001BB1 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5046 00001BB5 8C0E[B600]              		mov	[Orig13+2], cs
  5047 00001BB9 29F1                    		sub	cx, si		; size of rom fix module
  5048 00001BBB F3A4                    		rep movsb		; relocate it
  5049                                  
  5050                                  ; M065 -- end changes
  5051                                  
  5052                                  ; ----------------------------------------------------------------------------
  5053                                  not_compaq_patch:			; M065
  5054                                  		; 17/10/2022
  5055                                  checkcmosclock:	
  5056                                  		; 18/10/2022		
  5057 00001BBD 0E                      		push	cs
  5058 00001BBE 07                      		pop	es
  5059                                  
  5060                                  		; 20/12/2022
  5061                                  		; ds = cs = es
  5062                                  		; ss = 0
  5063                                  		; sp = 700h
  5064                                  
  5065 00001BBF 803E[F304]01            		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5066 00001BC4 7518                    		jnz	short checkk09	; no
  5067                                  
  5068 00001BC6 893E[0605]              		mov	word [daycnttoday], di
  5069                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5070 00001BCA B9D100                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5071 00001BCD BE[2C14]                		mov	si, daycnt_to_day
  5072 00001BD0 F3A4                    		rep movsb
  5073 00001BD2 893E[0205]              		mov	word [bintobcd], di
  5074                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5075                                  					; let original segment stay
  5076 00001BD6 B90B00                  		mov	cx, 11	; endcmosclockset - bin_to_bcd
  5077 00001BD9 BE[FD14]                		mov	si, bin_to_bcd
  5078 00001BDC F3A4                    		rep movsb
  5079                                  checkk09:				
  5080 00001BDE 57                      		push	di ; ? ; save ? ; 20/12/2022
  5081 00001BDF B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5082 00001BE2 B301                    		mov	bl, 1		; wait for 1 clock tick
  5083 00001BE4 268A3D                  		mov	bh, [es:di]
  5084 00001BE7 F9                      		stc			; Assume we will fail
  5085 00001BE8 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5086                                  					; AL = condition type, BH = condition compare or mask value
  5087                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5088                                  					; DX = I/O port	address	if AL bit 4 set
  5089 00001BEA 5F                      		pop	di ; ?
  5090 00001BEB 721B                    		jc	short configdone ; 20/12/2022
  5091                                  
  5092 00001BED C606[7900]01            		mov	byte [fhavek09], 1
  5093                                  					; remember we have a k09 type
  5094 00001BF2 1E                      		push	ds
  5095 00001BF3 31C0                    		xor	ax, ax
  5096 00001BF5 8ED8                    		mov	ds, ax
  5097                                  		
  5098 00001BF7 893EB001                		mov	[6Ch*4], di
  5099                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5100                                  					; new int 6ch handler
  5101                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5102 00001BFB 8C0EB201                		mov	word [6Ch*4+2], cs
  5103 00001BFF 1F                      		pop	ds
  5104                                  		; 20/12/2022
  5105                                  		; ds = cs = es
  5106 00001C00 BE[0815]                		mov	si, int6c
  5107 00001C03 B9C201                  		mov	cx, endk09-int6c ; 459
  5108                                  		;mov	cx, 459		; endk09 - int6c
  5109                                  					; size of k09 routine
  5110 00001C06 F3A4                    		rep movsb		;
  5111                                  					; set up config	stuff for sysinit
  5112                                  ; ----------------------------------------------------------------------------
  5113                                  ; Set up config stuff for SYSINIT
  5114                                  
  5115                                  ; 17/10/2022
  5116                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5117                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5118                                  ; 09/12/2022
  5119                                  SETDRIVE equ SetDrive
  5120                                  GETBP equ GetBp
  5121                                  		
  5122                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5123                                  configdone:				
  5124 00001C08 0E                      		push	cs		; di is	final ending address of	msbio.
  5125 00001C09 1F                      		pop	ds
  5126 00001C0A 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5127                                  		; 10/12/2022
  5128                                  		;shr	di, 1
  5129                                  		;shr	di, 1
  5130                                  		;shr	di, 1
  5131                                  		;shr	di, 1
  5132 00001C0D B104                    		mov	cl, 4
  5133 00001C0F D3EF                    		shr	di, cl		
  5134                                  		; 10/12/2022
  5135                                  		;add	di, 70h		; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5136                                  		; 19/10/2022 - Temporary !
  5137                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5138                                  		; 14/08/2023
  5139 00001C11 83C770                  		add	di, 70h
  5140 00001C14 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5141                                  
  5142                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5143                                  
  5144                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5145                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5146                                  	     
  5147                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5148                                  
  5149                                  ; ----------------------------------------------------------------------------
  5150                                  ; ----------------------------------------------------------------------------
  5151                                  %if 0
  5152                                  		mov	ax, [drvfat]	; get drive and	fat id
  5153                                  		; 22/12/2022
  5154                                  		; Note: SETDRIVES uses AL (drive number) only
  5155                                  		mov	bp, SETDRIVE
  5156                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5157                                  					; at 2C7h:4D7h = 70h:2A47h
  5158                                  		push	cs		; simulate far call
  5159                                  		call	call_bios_code	; get bds for drive
  5160                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5161                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5162                                  		push	cs
  5163                                  		call	call_bios_code
  5164                                  
  5165                                  	; resort to funky old segment definitions for now
  5166                                  
  5167                                  		; 22/12/2022
  5168                                  		;push	es		; copy bds to ds:di
  5169                                  		;pop	ds
  5170                                  
  5171                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5172                                  	;
  5173                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5174                                  	;	  back. Apparently it was what actually setup es: for the following
  5175                                  	; cas----
  5176                                  
  5177                                  		; 22/12/2022
  5178                                  		;xor	di, di
  5179                                  		;mov	al, [es:di]	; get fat id byte
  5180                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5181                                  		;mov	[es:drvfat+1], al
  5182                                  		;mov	ax, [es:drvfat]
  5183                                  		
  5184                                  		; 22/12/2022
  5185                                  		; ds = cs
  5186                                  	;;;	mov	al, [drvfat]
  5187                                  
  5188                                  	; cas -- why do a SECOND setdrive here???
  5189                                  
  5190                                  		; 22/12/2022
  5191                                  		;push	es		; save whatever's in es
  5192                                  		;push	ds		; copy bds to es:di
  5193                                  		;pop	es
  5194                                  		;push	cs		; copy Bios_Data to ds
  5195                                  		;pop	ds
  5196                                  	
  5197                                  	; 22/12/2022
  5198                                  	;;;	mov	bp, SETDRIVE
  5199                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5200                                  	;;;	push	cs		; simulate far call
  5201                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5202                                  	
  5203                                  		; 22/12/2022
  5204                                  		;push	es		; copy bds back to ds:di
  5205                                  		;pop	ds
  5206                                  		;pop	es		; pop whatever was in es
  5207                                  
  5208                                  	; Now we load in the MSDOS.SYS file
  5209                                  
  5210                                  	; 22/12/2022
  5211                                  	; -----
  5212                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5213                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5214                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5215                                  	;				; get size of fat on media
  5216                                  	;	;mov	es:16DEh, bl
  5217                                  	;	mov	[es:fbigfat], bl
  5218                                  	;	mov	cl, [di+8]
  5219                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5220                                  	;	;sub	es:16D8h, ax
  5221                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5222                                  	;				; need a logical sector number that will
  5223                                  	;				; be used by getclus(diskrd procedure)
  5224                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5225                                  	;	;sbb	es:16DAh, ax
  5226                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5227                                  	; -----
  5228                                  		
  5229                                  	; -----	; 22/12/2022
  5230                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5231                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5232                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5233                                  					; get size of fat on media
  5234                                  		mov	[fbigfat], bl
  5235                                  		mov	cl, [es:di+8]
  5236                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5237                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5238                                  					; need a logical sector number that will
  5239                                  					; be used by getclus(diskrd procedure)
  5240                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5241                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5242                                  	; ------
  5243                                  
  5244                                  		xor	ch, ch	 ; cx = sectors/cluster
  5245                                  
  5246                                  	; the boot program has left the directory at 0:500h
  5247                                  
  5248                                  		push	ds
  5249                                  		xor	di, di
  5250                                  		mov	ds, di
  5251                                  		mov	bx, [53Ah]
  5252                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5253                                  					; (First cluster field of 2nd dir entry
  5254                                  					; of root directory in the buffer at 500h)
  5255                                  		pop	ds
  5256                                  loadit:
  5257                                  		mov	ax, SYSINITSEG	; 46Dh
  5258                                  		;mov	ax, 46Dh	; sysinit segment
  5259                                  		mov	es, ax
  5260                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5261                                  		;mov	es, [es:271h]
  5262                                  
  5263                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5264                                  ; ----------------------------------------------------------------------------
  5265                                  
  5266                                  		;test	byte [cs:fbigfat], fbig
  5267                                  		test	byte [cs:fbigfat], 40h ; fbig
  5268                                  		jnz	short eofbig
  5269                                  		cmp	bx, 0FF7h
  5270                                  		jmp	short iseofx
  5271                                  ; ----------------------------------------------------------------------------
  5272                                  
  5273                                  eofbig:
  5274                                  		cmp	bx, 0FFF7h
  5275                                  iseofx:
  5276                                  		jb	short loadit	; keep loading until cluster = eof
  5277                                  
  5278                                  %endif
  5279                                  ; ----------------------------------------------------------------------------
  5280                                  ; ----------------------------------------------------------------------------
  5281                                  
  5282 00001C18 E8F903                  		call	setdrvparms	; 
  5283                                  
  5284                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5285                                  		;jmp	far 46Dh:267h
  5286 00001C1B EA[6702]3D04            		jmp	SYSINITSEG:SYSINITSTART
  5287                                  
  5288                                  ; =============== S U B	R O U T	I N E ========================================
  5289                                  
  5290                                  ; Following are subroutines to support resident device driver initialization
  5291                                  ;
  5292                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5293                                  
  5294                                  ;	M035 -- begin changed section
  5295                                  
  5296                                  ;******************************************************************************
  5297                                  ; module name: remap
  5298                                  ;
  5299                                  ; descriptive name: all the code for himem that could be separated from msbio
  5300                                  ;
  5301                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5302                                  ;	     letters) if more than two diskette drives on the system.
  5303                                  ;
  5304                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5305                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5306                                  ;	       letters. to do this, scan for disk drives and assign logical
  5307                                  ;	       drive number starting from 2 and then rescan diskette drives
  5308                                  ;	       and assign next to the last logical drive number of last disk
  5309                                  ;	       drive to the 3rd and 4th diskette drives.
  5310                                  
  5311                                  ; input:       none
  5312                                  ; exit:	drive letters have been remapped in bds chain
  5313                                  ; exit error:  none
  5314                                  ; called from: msinit
  5315                                  ;
  5316                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5317                                  ;	  found in the system
  5318                                  ;	  this function assumes that there are no more than 26 drives assigned
  5319                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5320                                  ;	  this function assumes that the first entries in the chain are
  5321                                  ;	   floppy drives, and all the rest are hard drives
  5322                                  ;	  will alter the boot drive if necessary to reflect remapping
  5323                                  ;
  5324                                  ;******************************************************************************
  5325                                  
  5326                                  ; 17/10/2022
  5327                                  ; 02/10/2022
  5328                                  
  5329                                  remap:		; proc near		
  5330 00001C20 2E8B3E[1901]            		mov	di, [cs:start_bds] ; get first bds
  5331                                  
  5332                                  ; search for 1st fixed disk physical drive num
  5333                                  
  5334                                  drive_loop:				
  5335 00001C25 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5336                                  					; first	hard disk??
  5337 00001C29 7409                    		jz	short fdrv_found ; yes,	continue
  5338 00001C2B 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5339                                  					; get next bds,	assume segment
  5340 00001C2D 83FFFF                  		cmp	di, -1		; last bds?
  5341 00001C30 75F3                    		jnz	short drive_loop ; loop	if not
  5342 00001C32 EB4F                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5343                                  
  5344                                  ;------------------------------------------------------------------------------
  5345                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5346                                  ;logical drive nums to 3, 4, 5 etc.
  5347                                  ;------------------------------------------------------------------------------
  5348                                  
  5349                                  fdrv_found:				
  5350 00001C34 B002                    		mov	al, 2		; start	with logical drv num=2
  5351                                  fdrv_loop:				
  5352 00001C36 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5353                                  					; found	??
  5354 00001C39 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5355                                  					; ds:di--> next	bds
  5356                                  		;inc	al		; set num for next drive
  5357                                  		; 18/12/2022
  5358 00001C3B 40                      		inc	ax
  5359 00001C3C 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ??
  5360 00001C3F 75F5                    		jnz	short fdrv_loop	; no - assign more disk	drives
  5361                                  
  5362                                  ;------------------------------------------------------------------------------
  5363                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5364                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5365                                  ; any more.
  5366                                  ;------------------------------------------------------------------------------
  5367                                  
  5368 00001C41 2E8B3E[1901]            		mov	di, [cs:start_bds] ; [start_bds]
  5369                                  					; get first bds
  5370 00001C46 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5371                                  					; ds:di-->bds2
  5372 00001C48 2E8A26[2501]            		mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5373 00001C4D 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5374                                  remap_loop1:				
  5375 00001C50 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5376                                  					; set new num to next floppy
  5377 00001C52 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5378 00001C55 FEC0                    		inc	al		; new number for next floppy
  5379 00001C57 FECC                    		dec	ah		; count	down extra floppies
  5380 00001C59 75F5                    		jnz	short remap_loop1
  5381                                  
  5382                                  ; now we've got to adjust the boot drive if we reassigned it
  5383                                  
  5384 00001C5B 2EA0[CA16]              		mov	al, [cs:drvfat]
  5385 00001C5F 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5386 00001C61 7220                    		jb	short rmap_exit
  5387 00001C63 2E2A06[2501]            		sub	al, [cs:dsktnum] ; is it one of the other floppies?
  5388 00001C68 7204                    		jb	short remap_boot_flop ;	brif so
  5389                                  
  5390                                  ; we've got to remap the boot hard drive
  5391                                  ; subtract the number of EXTRA floppies from it
  5392                                  
  5393 00001C6A 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5394 00001C6C EB05                    		jmp	short remap_change_boot_drv
  5395                                  ; ---------------------------------------------------------------------------
  5396                                  
  5397                                  ; we've got to remap the boot floppy.
  5398                                  ; add the number of hard drive partitions to it
  5399                                  
  5400                                  remap_boot_flop:			
  5401 00001C6E 2E0206[7500]            		add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5402                                  remap_change_boot_drv:			
  5403 00001C73 2EA2[CA16]              		mov	[cs:drvfat], al ; alter msdos.sys load drive
  5404 00001C77 FEC0                    		inc	al
  5405 00001C79 1E                      		push	ds
  5406 00001C7A BF3D04                  		mov	di, SYSINITSEG	; 46Dh
  5407                                  		;mov	di, 46Dh	; SYSINIT segment
  5408 00001C7D 8EDF                    		mov	ds, di
  5409 00001C7F A2[9602]                		mov	[DEFAULTDRIVE], al
  5410                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5411                                  					; pass it to sysinit as	well
  5412 00001C82 1F                      		pop	ds
  5413                                  rmap_exit:				
  5414 00001C83 C3                      		retn
  5415                                  
  5416                                  ; =============== S U B	R O U T	I N E =======================================
  5417                                  
  5418                                  ; 17/10/2022
  5419                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5420                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5421                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5422                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5423                                  ;**************************************************
  5424                                  ; getboot - get the boot sector for a hard disk
  5425                                  ;
  5426                                  ; Reads the boot sector from a specified drive into
  5427                                  ; a buffer at the top of memory.
  5428                                  ;
  5429                                  ; dl = int13 drive number to read boot sector for
  5430                                  ;**************************************************
  5431                                  
  5432                                  ; 17/10/2022
  5433                                  bootbias equ 200h
  5434                                  
  5435                                  getboot:	; proc near		
  5436                                  		
  5437                                  		; 08/04/2018
  5438                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5439                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5440                                  		; 02/10/2022 - Retro DOS v4.0
  5441                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5442                                  
  5443 00001C84 2EA1[CD16]              		mov	ax, [cs:init_bootseg] ; 17/10/2022
  5444 00001C88 8EC0                    		mov	es, ax
  5445                                  		; 17/10/2022
  5446 00001C8A BB0002                  		mov	bx, bootbias ; 200h
  5447                                  		;mov	bx, 200h	; bootbias
  5448                                  					; load BX, ES:BX is where sector goes
  5449 00001C8D B80102                  		mov	ax, 201h
  5450 00001C90 30F6                    		xor	dh, dh
  5451 00001C92 B90100                  		mov	cx, 1
  5452 00001C95 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5453                                  					; AL = number of sectors to read, CH = track, CL = sector
  5454                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5455                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5456 00001C97 7209                    		jb	short erret
  5457                                  		; 17/10/2022
  5458 00001C99 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5459                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5460                                  					; Dave Litton magic word?
  5461 00001CA0 7401                    		jz	short norm_ret	; yes
  5462                                  erret:					
  5463 00001CA2 F9                      		stc
  5464                                  norm_ret:				
  5465 00001CA3 C3                      		retn
  5466                                  
  5467                                  ; =============== S U B	R O U T	I N E =======================================
  5468                                  
  5469                                  ; 28/12/2018 - Retro DOS v4.0 
  5470                                  
  5471                                  ;***************************************************************************
  5472                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5473                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5474                                  ;   our own logical sectors start. we also read in our boot sector to
  5475                                  ;   determine version number
  5476                                  ;
  5477                                  ;   inputs:	dl is rom drive number (80...)
  5478                                  ;		bh is partition number (0....) 
  5479                                  ;		ds:di points to bds
  5480                                  ;   outputs:	carry clear -> bpb is filled in
  5481                                  ;		carry set   -> bpb is left uninitialized due to error
  5482                                  ;	trashes (at least) si, cx
  5483                                  ;	MUST PRESERVE ES:!!!!
  5484                                  ;***************************************************************************
  5485                                  
  5486                                  sethard:	; proc near		
  5487                                  		; 14/08/2023
  5488                                  		; ds = cs = BIOSDATA
  5489 00001CA4 57                      		push	di
  5490 00001CA5 53                      		push	bx
  5491                                  		;push	ds  ; ds = cs = BIOSDATA ; 14/08/2023
  5492 00001CA6 06                      		push	es
  5493 00001CA7 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5494 00001CAA 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5495 00001CAD 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5496                                  					; fnon_removable
  5497 00001CB1 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5498                                  					; ffHardFile
  5499 00001CB5 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5500 00001CBA 88FE                    		mov	dh, bh		; partition number
  5501 00001CBC 52                      		push	dx
  5502 00001CBD B408                    		mov	ah, 8
  5503 00001CBF CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5504                                  					; DL = drive number
  5505                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5506                                  					; DL = number of consecutive drives
  5507                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5508 00001CC1 FEC6                    		inc	dh
  5509 00001CC3 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5510 00001CC6 5A                      		pop	dx
  5511 00001CC7 7263                    		jb	short setret	; error	if no hard disk
  5512 00001CC9 80E13F                  		and	cl, 3Fh
  5513 00001CCC 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5514 00001CCF 52                      		push	dx		; save partition number
  5515 00001CD0 E8B1FF                  		call	getboot
  5516 00001CD3 5A                      		pop	dx		; restore partition number
  5517 00001CD4 7256                    		jb	short setret
  5518 00001CD6 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5519                                  
  5520                                  ; The first 'active' partition is 00, the second is 01....
  5521                                  ;   then the remainder of the 'primary' but non-active partitions
  5522                                  
  5523                                  act_part:				
  5524 00001CD9 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5525 00001CDE 7418                    		jz	short no_act	; no
  5526 00001CE0 26803F01                		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5527 00001CE4 740C                    		jz	short got_good_act
  5528 00001CE6 26803F04                		cmp	byte [es:bx], 4
  5529 00001CEA 7406                    		jz	short got_good_act
  5530 00001CEC 26803F06                		cmp	byte [es:bx], 6
  5531 00001CF0 7506                    		jnz	short no_act
  5532                                  got_good_act:				
  5533 00001CF2 08F6                    		or	dh, dh		; is this our target partition #?
  5534 00001CF4 743A                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5535 00001CF6 FECE                    		dec	dh		; count	down
  5536                                  no_act:					
  5537 00001CF8 83C310                  		add	bx, 16
  5538 00001CFB 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5539                                  					; last entry done?
  5540 00001CFF 75D8                    		jnz	short act_part	; no, process next entry
  5541 00001D01 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5542                                  					; restore original value of bx
  5543                                  
  5544                                  ; Now scan the non-active partitions
  5545                                  
  5546                                  get_primary:				
  5547 00001D04 26F647FC80              		test	byte [es:bx-4], 80h
  5548 00001D09 7518                    		jnz	short not_prim	; we've already scanned
  5549                                  					; the ACTIVE ones
  5550 00001D0B 26803F01                		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5551 00001D0F 740C                    		jz	short got_prim
  5552 00001D11 26803F04                		cmp	byte [es:bx], 4
  5553 00001D15 7406                    		jz	short got_prim
  5554 00001D17 26803F06                		cmp	byte [es:bx], 6
  5555 00001D1B 7506                    		jnz	short not_prim
  5556                                  got_prim:				
  5557 00001D1D 08F6                    		or	dh, dh		; is this our target partition?
  5558 00001D1F 740F                    		jz	short set2
  5559 00001D21 FECE                    		dec	dh
  5560                                  not_prim:				
  5561 00001D23 83C310                  		add	bx, 16
  5562 00001D26 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5563 00001D2A 75D8                    		jnz	short get_primary ; loop till we've gone through table
  5564                                  setret:					
  5565 00001D2C F9                      		stc			; error	return
  5566 00001D2D E9A102                  		jmp	ret_hard_err
  5567                                  
  5568                                  ; ---------------------------------------------------------------------------
  5569                                  
  5570                                  ;  until we get the real logical boot record and get the bpb,
  5571                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5572                                  ;  for the convenience of the computation.
  5573                                  ;
  5574                                  ;  at the end of this procedure, if a bpb information is gotten from
  5575                                  ;  the valid boot record, then we are going to use those bpb information
  5576                                  ;  without change.
  5577                                  ;
  5578                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5579                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5580                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5581                                  
  5582                                  set2:					
  5583                                  		; 14/08/2023
  5584                                  		; ds = cs = BIOSDATA segment (0070h)
  5585 00001D30 8816[CF16]              		mov	[rom_drv_num], dl
  5586                                  		;mov	[cs:rom_drv_num], dl
  5587                                  			; save the rom bios drive number we are handling now.
  5588 00001D34 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5589 00001D38 268B5706                		mov	dx, [es:bx+6]
  5590                                  
  5591                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5592                                  ; sectors should be allowed	
  5593                                  
  5594 00001D3C 83E801                  		sub	ax, 1
  5595 00001D3F 83DA00                  		sbb	dx, 0
  5596 00001D42 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5597 00001D46 2613570A                		adc	dx, [es:bx+10]
  5598 00001D4A 7305                    		jnb	short okdrive
  5599 00001D4C 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  5600                                  okdrive:				
  5601 00001D51 268B4704                		mov	ax, [es:bx+4]
  5602 00001D55 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5603                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5604 00001D58 268B4706                		mov	ax, [es:bx+6]
  5605 00001D5C 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5606 00001D5F 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5607 00001D63 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5608 00001D67 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5609 00001D6A 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5610                                  					; bpb->maxsec =	p->partitionlength
  5611 00001D6D 83FA00                  		cmp	dx, 0
  5612 00001D70 7705                    		ja	short okdrive_1
  5613 00001D72 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5614 00001D75 72B5                    		jb	short setret	; return -1;
  5615                                  okdrive_1:				
  5616 00001D77 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5617 00001D7A 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5618 00001D7D 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5619                                  					; usually equal	to the # of sec/trk.
  5620 00001D7F 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5621 00001D82 50                      		push	ax
  5622 00001D83 89D0                    		mov	ax, dx
  5623 00001D85 31D2                    		xor	dx, dx
  5624 00001D87 F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5625                                  					; (track)temp_h:ax + (sector)dx
  5626                                  		; 17/10/2022
  5627                                  		;mov	[cs:temp_h], ax
  5628                                  		; 14/08/2023 (ds=cs)
  5629 00001D89 A3[2905]                		mov	[temp_h], ax
  5630 00001D8C 58                      		pop	ax
  5631 00001D8D F7F3                    		div	bx
  5632 00001D8F 88D1                    		mov	cl, dl
  5633 00001D91 FEC1                    		inc	cl
  5634 00001D93 31DB                    		xor	bx, bx
  5635 00001D95 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5636 00001D98 50                      		push	ax
  5637 00001D99 31D2                    		xor	dx, dx
  5638                                  		;mov	ax, [cs:temp_h]
  5639 00001D9B A1[2905]                		mov	ax, [temp_h] ; 14/08/2023
  5640 00001D9E F7F3                    		div	bx
  5641                                  		;mov	[cs:temp_h], ax
  5642 00001DA0 A3[2905]                		mov	[temp_h], ax ; 14/08/2023
  5643 00001DA3 58                      		pop	ax
  5644 00001DA4 F7F3                    		div	bx		; dl is head, ax is cylinder
  5645                                  		; 14/08/2023 (ds=cs)
  5646 00001DA6 833E[2905]00            		cmp	word [temp_h], 0
  5647                                  		;cmp	word [cs:temp_h], 0
  5648 00001DAB 775F                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5649 00001DAD 3D0004                  		cmp	ax, 1024
  5650 00001DB0 775A                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5651                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5652                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5653                                  			; ('ja' must be 'jnb')
  5654                                  okdrive_2:
  5655                                   		; 28/07/2019
  5656                                  ; dl is head.
  5657                                  ; ax is cylinder
  5658                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5659                                  
  5660                                  ;*** for mini disks ***
  5661                                  
  5662 00001DB2 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5663                                  					; check	for mini disk
  5664 00001DB6 7503                    		jnz	short oknotmini	; not mini disk.
  5665 00001DB8 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5666                                  					; set the physical track number
  5667                                  oknotmini:
  5668                                  ;*** end of added logic for mini disk
  5669                                  				
  5670 00001DBB D0CC                    		ror	ah, 1		; move high two	bits of	cyl to high
  5671 00001DBD D0CC                    		ror	ah, 1		; two bits of upper byte
  5672 00001DBF 80E4C0                  		and	ah, 0C0h	; turn off remainder of	bits
  5673 00001DC2 08E1                    		or	cl, ah		; move two bits	to correct spot
  5674 00001DC4 88C5                    		mov	ch, al		; ch is	cylinder (low 8	bits)
  5675                                  					; cl is	sector + 2 high	bits of	cylinder
  5676 00001DC6 88D6                    		mov	dh, dl		; dh is	head
  5677                                  		
  5678                                  		; 14/08/2023 (ds=cs)
  5679 00001DC8 8A16[CF16]              		mov	dl, [rom_drv_num]
  5680                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  5681                                  
  5682                                  
  5683                                  ; cl is sector + 2 high bits of cylinder
  5684                                  ; ch is low 8 bits of cylinder
  5685                                  ; dh is head
  5686                                  ; dl is drive
  5687                                  
  5688                                  ; for convenience, we are going to read the logical boot sector
  5689                                  ; into cs:disksector area.
  5690                                  
  5691                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5692                                  ; is to be read in is cs:disksector.
  5693                                  
  5694 00001DCC 0E                      		push	cs
  5695 00001DCD 07                      		pop	es
  5696 00001DCE BB[4E01]                		mov	bx, disksector	; for convenience,
  5697                                  					; we are going to read the logical boot	sector
  5698                                  					; into cs:disksector area.
  5699 00001DD1 B80102                  		mov	ax, 201h
  5700 00001DD4 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5701                                  					; AL = number of sectors to read, CH = track, CL = sector
  5702                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5703                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5704                                  
  5705                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  5706                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  5707                                  ; media if we recognize the version number.
  5708                                  
  5709                                  		; 14/08/2023
  5710                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  5711                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  5712 00001DD6 53                      		push	bx
  5713 00001DD7 50                      		push	ax
  5714                                  		; 14/08/2023
  5715                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  5716 00001DD8 803FE9                  		cmp	byte [bx], 0E9h
  5717                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  5718 00001DDB 740B                    		jz	short check_1_ok ; yes
  5719 00001DDD 803FEB                  		cmp	byte [bx], 0EBh
  5720                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  5721 00001DE0 7525                    		jnz	short invalid_boot_record ; no
  5722 00001DE2 807F0290                		cmp	byte [bx+2], 90h
  5723                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  5724 00001DE6 751F                    		jnz	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  5725                                  check_1_ok:	
  5726                                  		; 14/08/2023			
  5727 00001DE8 BB[5901]                		mov	bx, disksector+11 ; disksector+EXT_BOOT.BPB
  5728                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  5729                                  					; point	to the bpb in the boot record
  5730                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  5731 00001DEB 8A470A                  		mov	al, [bx+10] ; 14/08/2023 
  5732                                  					; get the mediadescriptor byte
  5733 00001DEE 24F0                    		and	al, 0F0h	; mask off low nibble
  5734 00001DF0 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  5735 00001DF2 7513                    		jnz	short invalid_boot_record ; no,	invalid	boot record
  5736                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  5737 00001DF4 813F0002                		cmp	word [bx], 512 ; 14/08/2023
  5738 00001DF8 750D                    		jnz	short invalid_boot_record ; invalidate non 512 byte sectors
  5739                                  
  5740                                  check2_ok:				; yes, mediadescriptor ok.
  5741 00001DFA 8A4702                  		mov	al, [bx+2] ; 14/08/2023
  5742                                  		;mov	al, [cs:bx+2]	; now make sure that
  5743                                  					; the sectorspercluster	is
  5744                                  					; a power of 2
  5745                                  					;
  5746                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  5747                                  					; get the sectorspercluster
  5748 00001DFD 08C0                    		or	al, al		; is it	zero?
  5749 00001DFF 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  5750                                  
  5751                                  ck_power_of_two:			
  5752 00001E01 D0E8                    		shr	al, 1		; shift	until first bit	emerges
  5753 00001E03 73FC                    		jnb	short ck_power_of_two
  5754 00001E05 740B                    		jz	short valid_boot_record
  5755                                  
  5756                                  invalid_boot_record:			
  5757 00001E07 58                      		pop	ax
  5758 00001E08 5B                      		pop	bx
  5759 00001E09 E90F01                  		jmp	unknown		; jump to invalid boot record
  5760                                  					; unformatted or illegal media.
  5761                                  	; 14/08/2023	
  5762                                  ; ---------------------------------------------------------------------------
  5763                                  setret_brdg:				
  5764 00001E0C E91DFF                  		jmp	setret
  5765                                  ; ---------------------------------------------------------------------------
  5766                                  
  5767                                  unknown3_0_j:				
  5768 00001E0F E90D01                  		jmp	unknown3_0	; legally formatted media,
  5769                                  					; although, content might be bad.
  5770                                  ; ---------------------------------------------------------------------------
  5771                                  
  5772                                  valid_boot_record:			
  5773 00001E12 58                      		pop	ax
  5774 00001E13 5B                      		pop	bx
  5775                                  
  5776                                  ; Signature found. Now check version.
  5777                                  
  5778                                  		; 14/08/2023
  5779 00001E14 817F08322E              		cmp	word [bx+8], '2.'
  5780                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  5781                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  5782 00001E19 7506                    		jnz	short try5
  5783 00001E1B 807F0A30                		cmp	byte [bx+10], '0'
  5784                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  5785                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  5786                                  		; 14/08/2023
  5787                                  		;jnz	short try5
  5788                                  		;jmp	short copybpb
  5789 00001E1F 7425                    		jz	short copybpb
  5790                                  
  5791                                  	; 14/08/2023
  5792                                  ; ---------------------------------------------------------------------------
  5793                                  ;
  5794                                  ;setret_brdg:				
  5795                                  ;		jmp	setret
  5796                                  ; ---------------------------------------------------------------------------
  5797                                  ;
  5798                                  ;unknown3_0_j:				
  5799                                  ;		jmp	unknown3_0	; legally formatted media,
  5800                                  ;					; although, content might be bad.
  5801                                  ; ---------------------------------------------------------------------------
  5802                                  
  5803                                  try5:					
  5804 00001E21 E8B101                  		call	cover_fdisk_bug
  5805                                  
  5806                                  ; see if it is an os2 signature
  5807                                  
  5808                                  		; 14/08/2023
  5809                                  		; ds = cs = BIOSDATA segment
  5810 00001E24 817F08302E              		cmp	word [bx+8], '0.'
  5811                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  5812                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  5813 00001E29 750C                    		jnz	short no_os2
  5814 00001E2B 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  5815                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  5816 00001E2E 2C31                    		sub	al, '1'
  5817                                  		;sub	al, 31h		; '1'
  5818 00001E30 24FE                    		and	al, 0FEh
  5819 00001E32 7412                    		jz	short copybpb	; accept either	'1' or '2'
  5820 00001E34 E9E400                  		jmp	unknown
  5821                                  ; ---------------------------------------------------------------------------
  5822                                  
  5823                                  ; no os2 signature, this is to check for real dos versions
  5824                                  
  5825                                  no_os2:					
  5826                                  		; 14/08/2023
  5827                                  		; ds = cs = BIOSDATA
  5828 00001E37 817F08332E              		cmp	word [bx+8], '3.'			
  5829                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  5830                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  5831 00001E3C 72D1                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  5832                                  					; do not trust it, but still legal.
  5833 00001E3E 7506                    		jnz	short copybpb	; honor	os2 boot record
  5834                                  					; or dos 4.0 version
  5835 00001E40 807F0A31                		cmp	byte [bx+10], '1' ; 14/08/2023
  5836                                  		;cmp	byte [cs:bx+10], '1'
  5837                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  5838 00001E44 72C9                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  5839                                  copybpb:
  5840                                  
  5841                                  ; 03/10/2022
  5842                                  
  5843                                  ; we have a valid boot sector. use the bpb in it to build the
  5844                                  ; bpb in bios. it is assumed that only
  5845                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  5846                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  5847                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  5848                                  ; need to be set (all other values in already). fbigfat is also set.
  5849                                  
  5850                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  5851                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  5852                                  ; and system id according to the boot record.
  5853                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  5854                                  
  5855                                  		; 10/12/2022
  5856                                  		; (number of FATs optimization)
  5857 00001E46 BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  5858                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  5859                                  		;mov	cl, [cs:si+05h]
  5860                                  		; 14/08/2023
  5861                                  		; ds = cs = BIOSDATA segment (0070h)
  5862 00001E49 8A4C05                  		mov	cl, [si+05h] ; number of FATs
  5863                                  
  5864 00001E4C 807C1B29                		cmp	byte [si+1Bh], 29h ; 14/08/2023
  5865                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  5866                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  5867                                  					; [disksector+EXT_BOOT.SIG]
  5868                                  					; EXT_BOOT_SIGNATURE
  5869 00001E50 7542                    		jnz	short copybpb_fat ; conventional fat system
  5870                                  
  5871                                  		; 03/10/2022
  5872                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  5873                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  5874                                  		;	     number of FATs must be 2 ; =*?=
  5875                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  5876                                  		;
  5877                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  5878                                  
  5879                                  		; 10/12/2022
  5880                                  		;cmp	byte [cs:disksector+10h], 0
  5881                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  5882                                  		;jnz	short copybpb_fat ; a fat system.
  5883 00001E52 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  5884 00001E54 753E                    		jnz	short copybpb_fat ; a fat system.
  5885                                  
  5886                                  ; non fat based	media.
  5887                                  
  5888 00001E56 57                      		push	di
  5889                                  		; 14/08/2023
  5890                                  		;push	ds  ; ds = cs = BIOSDATA segment
  5891 00001E57 1E                      		push	ds
  5892 00001E58 07                      		pop	es
  5893                                  		; 14/08/2023
  5894                                  		; ds = cs
  5895                                  		;push	cs
  5896                                  		;pop	ds
  5897                                  
  5898                                  		; 10/12/2022
  5899                                  		; (number of FATs optimization)
  5900                                  		; SI = disksector+11
  5901                                  		; 17/10/2022
  5902                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5903                                  		;mov	si, disksector+11
  5904 00001E59 83C706                  		add	di, 6		; add di,BDS.BPB
  5905                                  
  5906                                  ; just for completeness, we'll make sure that total_sectors and
  5907                                  ; big_total_sectors aren't both zero. I've seen examples of
  5908                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  5909                                  ; got that way. If it occurs, then use the values from the
  5910                                  ; partition table.
  5911                                  
  5912                                  		; 18/12/2022
  5913 00001E5C 29C9                    		sub	cx, cx 
  5914                                  
  5915                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  5916                                  		;jnz	short already_nonz 
  5917                                  		;			; how about big_total?
  5918                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  5919                                  		;jnz	short already_nonz ; we're okay if any are != 0
  5920                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5921                                  		;jnz	short already_nonz
  5922                                  
  5923                                  		; 14/08/2023
  5924                                  		; ds = cs = BIOSDATA segment (0070h)
  5925                                  
  5926                                  		; 18/12/2022
  5927                                  		;cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  5928                                  		; 14/08/2023
  5929 00001E5E 394C08                  		cmp	[si+8], cx ; 0
  5930 00001E61 751C                    		jnz	short already_nonz
  5931                                  					     	; how about big_total?
  5932                                  		;cmp	[cs:si+15h], cx ; 0 	; [cs:si+EBPB.BIGTOTALSECTORS]
  5933                                  		; 14/08/2023
  5934 00001E63 394C15                  		cmp	[si+15h], cx ; 0
  5935 00001E66 7517                    		jnz	short already_nonz	; we're okay if any are != 0
  5936                                  		;cmp	[cs:si+17h], cx ; 0  	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5937 00001E68 394C17                  		cmp	[si+17h], cx ; 0
  5938 00001E6B 7512                    		jnz	short already_nonz
  5939                                  
  5940                                  ; now let's copy the values from the partition table (now in the BDS)
  5941                                  ; into the BPB in the boot sector buffer, before they get copied back.
  5942                                  
  5943 00001E6D 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  5944                                  		; 14/08/2023
  5945                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  5946 00001E70 894408                  		mov	[si+8], ax
  5947 00001E73 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  5948                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  5949 00001E76 894415                  		mov	[si+15h], ax
  5950 00001E79 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  5951                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5952 00001E7C 894417                  		mov	[si+17h], ax
  5953                                  
  5954                                  already_nonz:	
  5955                                  		; 18/12/2022
  5956                                  		; cx = 0
  5957 00001E7F B119                    		mov	cl, 25		
  5958                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  5959 00001E81 F3A4                    		rep movsb
  5960 00001E83 1F                      		pop	ds
  5961 00001E84 5F                      		pop	di
  5962 00001E85 06                      		push	es
  5963 00001E86 1E                      		push	ds
  5964 00001E87 07                      		pop	es
  5965 00001E88 0E                      		push	cs
  5966 00001E89 1F                      		pop	ds
  5967                                  		; 14/08/2023
  5968 00001E8A BD[3707]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  5969                                  		; 18/12/2022
  5970                                  		;mov	bp, mov_media_ids
  5971                                  		;;mov	bp, 751h	; mov_media_ids
  5972                                  					; at 2C7h:751h = 70h:2CC1h
  5973                                  					; set volume id, systemid, serial.
  5974 00001E8D 0E                      		push	cs		; simulate far call
  5975 00001E8E E8C6F8                  		call	call_bios_code
  5976                                  		; 14/08/2023
  5977                                  		; ds = cs = es
  5978                                  		;push	es
  5979                                  		;pop	ds
  5980                                  		;pop	es
  5981 00001E91 E93C01                  		jmp	goodret
  5982                                  ; ---------------------------------------------------------------------------
  5983                                  
  5984                                  ; ****** cas ---
  5985                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  5986                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  5987                                  ; happens with some frequency -- perhaps through some OS/2 setup
  5988                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  5989                                  ; from the boot sector into the DPB anyway, we've just been using
  5990                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  5991                                  ; we'll go ahead and copy it into the DPB, except in the case
  5992                                  ; that it equals zero, in which case we just use the values in
  5993                                  ; the DPB from the partition table.
  5994                                  
  5995                                  ; 17/10/2022
  5996                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  5997                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  5998                                  ; 09/12/2022
  5999                                  MOVMEDIAIDS equ mov_media_ids
  6000                                  CLEARIDS equ clear_ids
  6001                                  
  6002                                  copybpb_fat:
  6003                                  		; 10/12/2022
  6004                                  		; (number of FATs optimization)
  6005                                  		; SI = disksector+11				
  6006                                  		; 17/10/2022
  6007                                  		;mov	si, disksector+11
  6008                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6009                                  					; cs:si	-> bpb in boot
  6010 00001E94 31D2                    		xor	dx, dx
  6011                                  		; 14/08/2023
  6012                                  		; ds = cs = BIOSDATA segment (0070h)
  6013 00001E96 8B4408                  		mov	ax, [si+8]
  6014                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6015                                  					; get totsec from boot sec
  6016 00001E99 09C0                    		or	ax, ax
  6017 00001E9B 7514                    		jnz	short copy_totsec ; if non zero, use that
  6018 00001E9D 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  6019                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  6020                                  					; get the big version
  6021                                  					; (32 bit total	sectors)
  6022 00001EA0 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  6023                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6024                                  		; 10/12/2022
  6025                                  		; (number of FATs optimization)
  6026                                  		; CL = number of FATs (2 or 1) 
  6027 00001EA3 89D3                    		mov	bx, dx		; see if it is a big zero
  6028 00001EA5 09C3                    		or	bx, ax
  6029 00001EA7 7508                    		jnz	short copy_totsec
  6030                                  			; screw it. it was bogus.
  6031 00001EA9 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6032 00001EAC 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6033 00001EAF EB06                    		jmp	short fat_big_small
  6034                                  
  6035                                  		;mov	cx, dx
  6036                                  		;or	cx, ax		; see if it is a big zero
  6037                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  6038                                  copy_totsec:				
  6039 00001EB1 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  6040                                  					; make DPB match boot sec
  6041 00001EB4 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  6042                                  
  6043                                  		; 10/12/2022
  6044                                  ;totsec_already_set:			
  6045                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6046                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6047                                  
  6048                                  ; determine fat entry size.
  6049                                  
  6050                                  fat_big_small:
  6051                                  
  6052                                  ;at this moment dx;ax = total sector number
  6053                                  
  6054                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  6055                                  ;from the BPB on the disk
  6056                                  				
  6057                                  		; 14/08/2023
  6058                                  		; ds = cs = BIOSDATA segment (0070h)
  6059                                  				
  6060 00001EB7 8B5C03                  		mov	bx, [si+3]
  6061                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  6062                                  					; get #reserved_sectors	from BPB
  6063 00001EBA 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  6064                                  					; update BDS field
  6065 00001EBD 29D8                    		sub	ax, bx
  6066 00001EBF 83DA00                  		sbb	dx, 0		; update the count
  6067                                  		; 14/08/2023
  6068 00001EC2 8B5C0B                  		mov	bx, [si+0Bh]
  6069                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  6070                                  					; bx = sectors/fat
  6071 00001EC5 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  6072                                  					; set in bds bpb
  6073                                  		; 10/12/2022
  6074                                  		; (number of FATs optimization)
  6075                                  		; CL = number of FATs (2 or 1) 
  6076                                  		;dec	cl ; *
  6077                                  		; 18/12/2022
  6078 00001EC8 49                      		dec	cx ; *
  6079 00001EC9 D3E3                    		shl	bx, cl
  6080                                  		;shl	bx, 1	; =*?=	; always 2 fats
  6081                                  		
  6082 00001ECB 29D8                    		sub	ax, bx		; sub #	fat sectors
  6083 00001ECD 83DA00                  		sbb	dx, 0
  6084 00001ED0 8B5C06                  		mov	bx, [si+6] ; 14/08/2023
  6085                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  6086                                  					; # root entries
  6087 00001ED3 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6088                                  					; set in bds bpb
  6089 00001ED6 B104                    		mov	cl, 4
  6090 00001ED8 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6091 00001EDA 29D8                    		sub	ax, bx		; sub #	dir sectors
  6092 00001EDC 83DA00                  		sbb	dx, 0		;
  6093                                  					; dx:ax	now contains the
  6094                                  					; # of data sectors
  6095 00001EDF 31C9                    		xor	cx, cx ; *
  6096 00001EE1 8A4C02                  		mov	cl, [si+2] ; 14/08/2023
  6097                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6098                                  					; sectors per cluster
  6099 00001EE4 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6100                                  					; set in bios bpb
  6101 00001EE7 50                      		push	ax
  6102 00001EE8 89D0                    		mov	ax, dx
  6103 00001EEA 31D2                    		xor	dx, dx
  6104 00001EEC F7F1                    		div	cx		; cx = sectors per cluster
  6105                                  		; 14/08/2023 (ds=cs)
  6106 00001EEE A3[2905]                		mov	[temp_h], ax
  6107                                  		;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6108                                  					; # clusters.
  6109 00001EF1 58                      		pop	ax
  6110 00001EF2 F7F1                    		div	cx
  6111                                  		;cmp	word [cs:temp_h], 0
  6112 00001EF4 833E[2905]00            		cmp	word [temp_h], 0 ; 14/08/2023
  6113 00001EF9 7718                    		ja	short toobig_ret ; too big cluster number
  6114 00001EFB 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6115                                  					; is this 16-bit fat?
  6116 00001EFE 7205                    		jb	short copymediaid ; no,	small fat
  6117                                  		; 17/10/2022
  6118 00001F00 800E[CC16]40            		or	byte [fbigfat], 40h
  6119                                  		;or	ds:fbigfat, 40h	; fbig
  6120                                  					; 16 bit fat
  6121                                  copymediaid:				
  6122 00001F05 06                      		push	es
  6123 00001F06 1E                      		push	ds
  6124 00001F07 07                      		pop	es
  6125                                  		; 14/08/2023
  6126                                  		; ds = cs = BIOSDATA
  6127                                  		;push	cs
  6128                                  		;pop	ds
  6129                                  		; 17/10/2022
  6130 00001F08 BD[3707]                		mov	bp, MOVMEDIAIDS
  6131                                  		;mov	bp, 751h	; mov_media_ids
  6132                                  					; at 2C7h:751h = 70h:2CC1h
  6133                                  					; copy filesys_id, volume label
  6134 00001F0B 0E                      		push	cs		; simulate far call
  6135 00001F0C E848F8                  		call	call_bios_code
  6136                                  		; 14/08/2023
  6137                                  		;push	es
  6138                                  		;pop	ds
  6139 00001F0F 07                      		pop	es
  6140 00001F10 E99F00                  		jmp	massage_bpb	; now final check for bpb info
  6141                                  					; and return.
  6142                                  ; ---------------------------------------------------------------------------
  6143                                  
  6144                                  toobig_ret:				
  6145                                  		; 14/08/2023 (ds=cs=BIOSDATA)
  6146 00001F13 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  6147                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  6148                                  					; too big (32 bit clust #) for FAT16
  6149 00001F18 E9B500                  		jmp	goodret		; still	drive letter is	assigned
  6150                                  					; but useless. to big for
  6151                                  					; current pc dos fat file system
  6152                                  ; ---------------------------------------------------------------------------
  6153                                  
  6154                                  unknown:	
  6155                                  		; 12/12/2022
  6156 00001F1B 804D2402                		or	byte [di+24h], 02h			
  6157                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6158                                  					; unformatted_media
  6159                                  					; Set unformatted media	flag.
  6160                                  
  6161                                  ; the boot signature may not be	recognizable,
  6162                                  ; but we should	try and	read it	anyway.
  6163                                  
  6164                                  unknown3_0:				
  6165 00001F1F 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6166                                  					; [di+BDS.totalsecs32+2]
  6167 00001F22 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6168 00001F25 BE[FC16]                		mov	si, disktable2
  6169                                  
  6170                                  scan:					
  6171                                  		;cmp	dx, [cs:si]	; total sectors hw
  6172                                  		; 14/08/2023 (ds=cs)
  6173 00001F28 3B14                    		cmp	dx, [si] 
  6174 00001F2A 720C                    		jb	short gotparm
  6175 00001F2C 7705                    		ja	short scan_next
  6176                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  6177 00001F2E 3B4402                  		cmp	ax, [si+2]
  6178 00001F31 7605                    		jbe	short gotparm
  6179                                  
  6180                                  scan_next:				
  6181 00001F33 83C60A                  		add	si, 10		; 5*2
  6182 00001F36 EBF0                    		jmp	short scan	; covers upto 512 mb media
  6183                                  ; ---------------------------------------------------------------------------
  6184                                  
  6185                                  gotparm:				
  6186 00001F38 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6187                                  		;or	ds:fbigfat, cl
  6188                                  		; 17/10/2022
  6189 00001F3B 080E[CC16]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  6190                                  		; 14/08/2023
  6191                                  		; ds = cs = BIOSDATA
  6192 00001F3F 8B4C04                  		mov	cx, [si+4]
  6193                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6194                                  					; cl = log base 2 of ch
  6195 00001F42 8B5406                  		mov	dx, [si+6]
  6196                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  6197                                  
  6198                                  ; now calculate size of fat table
  6199                                  
  6200 00001F45 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6201                                  					; save number of (root)	dir entries
  6202 00001F48 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6203 00001F4B 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6204 00001F4E 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6205                                  					; save sectors per cluster
  6206                                  
  6207                                  		; 14/08/2023
  6208 00001F51 8A1E[CC16]              		mov	bl, [fbigfat]
  6209 00001F55 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6210 00001F58 F6C340                  		test	bl, 40h
  6211                                  
  6212                                  		; 17/10/2022
  6213 00001F5B F606[CC16]40            		test	byte [fbigfat], 40h
  6214                                  		;test	ds:fbigfat, 40h	; fbig
  6215                                  					; if (fbigfat)
  6216 00001F60 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6217                                  
  6218                                  ; we don't need to change "small fat" logic since it is gauranteed
  6219                                  ; that double word total sector will not use 12 bit fat (unless
  6220                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6221                                  ; so in this case we assume dx = 0 !!
  6222                                  
  6223 00001F62 31DB                    		xor	bx, bx		; (12 bit fat)
  6224 00001F64 88EB                    		mov	bl, ch
  6225 00001F66 4B                      		dec	bx
  6226 00001F67 01C3                    		add	bx, ax		; dx=0
  6227 00001F69 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6228 00001F6B 43                      		inc	bx		; BDS.secperclus
  6229 00001F6C 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6230 00001F6F 89DE                    		mov	si, bx
  6231 00001F71 D1EB                    		shr	bx, 1
  6232 00001F73 01F3                    		add	bx, si
  6233 00001F75 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6234 00001F79 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6235 00001F7B 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6236                                  					; save number of fat sectors
  6237 00001F7E EB32                    		jmp	short massage_bpb
  6238                                  ; ---------------------------------------------------------------------------
  6239                                  
  6240                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6241                                  
  6242                                  dobig:					
  6243 00001F80 B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6244 00001F82 52                      		push	dx		; save total sectors (high)
  6245 00001F83 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6246 00001F86 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6247 00001F88 29D0                    		sub	ax, dx
  6248 00001F8A 5A                      		pop	dx
  6249 00001F8B 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6250 00001F8E 83E801                  		sub	ax, 1
  6251 00001F91 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6252                                  					; total	secs - reserved	secs - root dir	secs
  6253 00001F94 B302                    		mov	bl, 2
  6254 00001F96 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6255                                  					; bx = 256 * BDS.secperclus + 2
  6256                                  
  6257                                  ; I don't understand why to add bx here!!!
  6258                                  
  6259                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6260                                  		; 27/09/2022
  6261                                  		; (Microsoft FAT32 File	System Specification,
  6262                                  		; December 2000, Page 21)
  6263                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6264                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6265                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6266                                  		; (If FATType == FAT16,	BPB_FATSz16 = LOWORD(FATSz))
  6267                                  		
  6268                                  					; dx:ax = TmpVal1, bx = TmpVal2
  6269 00001F99 01D8                    		add	ax, bx		; 
  6270 00001F9B 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  6271 00001F9E 83E801                  		sub	ax, 1		
  6272 00001FA1 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  6273                                  
  6274                                  ; assuming dx in the table will never be bigger than bx.
  6275                                  
  6276 00001FA4 F7F3                    		div	bx		; BDS.fatsecs =
  6277                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6278 00001FA6 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6279                                  					; number of fat	sectors
  6280                                  
  6281                                  ; now, set the default filesys_id, volume label, serial number
  6282                                  
  6283                                  		; 14/08/2023
  6284                                  		; [di+1Fh] = [fbigfat]
  6285                                  		;
  6286                                  		;;mov	bl, ds:fbigfat
  6287                                  		;; 17/10/2022
  6288                                  		;mov	bl, [fbigfat]
  6289                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6290                                  
  6291                                  		; 14/08/2023
  6292                                  		;push	ds ; ds = cs = BIOSDATA
  6293 00001FA9 1E                      		push	ds
  6294 00001FAA 07                      		pop	es
  6295                                  		; 14/08/2023 
  6296                                  		; ds = cs = BIOSDATA
  6297                                  		;push	cs
  6298                                  		;pop	ds
  6299                                  		; 17/10/2022
  6300 00001FAB BD[CC05]                		mov	bp, CLEARIDS
  6301                                  		;mov	bp, 5D9h	; clear_ids
  6302                                  					; at 2C7h:5D9h = 70h:2B49h
  6303                                  					; at BIOSCODE:06ABh
  6304                                  					;	in PCDOS 7.1 IBMBIO.COM
  6305 00001FAE 0E                      		push	cs
  6306 00001FAF E8A5F7                  		call	call_bios_code
  6307                                  
  6308                                  		; 14/08/2023
  6309                                  		;pop	ds ; ds = cs = BIOSDATA
  6310                                  
  6311                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6312                                  ; set according to the partition information. we are going to
  6313                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6314                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6315                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6316                                  ; we don't do this for the bpb information from the boot record. we
  6317                                  ; are not going to change the bpb information from the boot record.
  6318                                  
  6319                                  massage_bpb:
  6320                                  		; 14/08/2023
  6321                                  		; [di+1Fh] = [fbigfat]
  6322                                  		;
  6323                                  		;; 12/12/2022
  6324                                  		;mov	bl, [fbigfat]
  6325                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6326                                  		;			; set size of fat on media
  6327                                  		;
  6328 00001FB2 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6329 00001FB5 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6330 00001FB8 83FA00                  		cmp	dx, 0		; double word total sectors?
  6331                                  		;ja	short goodret	; don't have to change it.
  6332                                  		; 12/12/2022
  6333 00001FBB 7714                    		ja	short short goodret2
  6334                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6335                                  		;ja	short goodret	; don't have to change it.
  6336                                  		; 12/12/2022
  6337 00001FBD 395519                  		cmp	[di+19h], dx ; 0
  6338 00001FC0 770F                    		ja	short goodret2
  6339 00001FC2 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6340                                  		;jb	short goodret
  6341                                  		; 12/12/2022
  6342 00001FC5 7209                    		jc	short goodret
  6343 00001FC7 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6344 00001FCA 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6345                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6346                                  		; 12/12/2022
  6347 00001FCD 89551B                  		mov	[di+1Bh], dx ; 0 
  6348                                  goodret:				
  6349                                  		;;mov	bl, ds:fbigfat
  6350                                  		; 12/12/2022
  6351                                  		;; 17/10/2022
  6352                                  		;mov	bl, [fbigfat]
  6353                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6354                                  		;			; set size of fat on media
  6355 00001FD0 F8                      		clc
  6356                                  ret_hard_err:
  6357                                  		; 12/12/2022
  6358                                  goodret2:					
  6359 00001FD1 07                      		pop	es
  6360                                  		;pop	ds	; ds = cs = BIOSDATA ; 14/08/2023
  6361 00001FD2 5B                      		pop	bx
  6362 00001FD3 5F                      		pop	di
  6363 00001FD4 C3                      		retn
  6364                                  
  6365                                  ; =============== S U B	R O U T	I N E =======================================
  6366                                  
  6367                                  ; 15/10/2022
  6368                                  
  6369                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6370                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6371                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6372                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6373                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6374                                  
  6375                                  		; 17/10/2022
  6376                                  cover_fdisk_bug:	
  6377                                  		; 14/08/2023		; ds = cs
  6378 00001FD5 50                      		push	ax
  6379 00001FD6 52                      		push	dx
  6380 00001FD7 56                      		push	si
  6381                                  		; 14/08/2023
  6382 00001FD8 803E[7401]29            		cmp	byte [disksector+26h], 29h
  6383                                  		;cmp	byte [cs:disksector+26h], 29h
  6384                                  					; [disksector+EXT_BOOT.SIG],
  6385                                  					; EXT_BOOT_SIGNATURE
  6386 00001FDD 742B                    		jz	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6387 00001FDF 817F073130              		cmp	word [bx+7], 3031h
  6388                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6389 00001FE4 7506                    		jnz	short cfb_chk_totalsecs ; 14/08/2023
  6390 00001FE6 807F0A30                		cmp	byte [bx+10], '0'
  6391                                  		;cmp	byte [cs:bx+10], '0'
  6392 00001FEA 751E                    		jnz	short cfb_retit
  6393                                  cfb_chk_totalsecs:
  6394                                  		; 17/10/2022		
  6395 00001FEC BE[5901]                		mov	si, disksector+11 ; 14Eh+0Bh
  6396                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6397                                  		; 14/08/2023
  6398 00001FEF 837C0800                		cmp	word [si+8], 0
  6399                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6400                                  					; just to make sure.
  6401 00001FF3 7415                    		jz	short cfb_retit
  6402                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6403                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6404                                  		; 14/08/2023
  6405 00001FF5 8B4408                  		mov	ax, [si+8]
  6406 00001FF8 034411                  		add	ax, [si+11h]
  6407                                  
  6408 00001FFB 730D                    		jnb	short cfb_retit
  6409 00001FFD 750B                    		jnz	short cfb_retit
  6410                                  					; if carry set and ax=0
  6411 00001FFF FF4C08                  		dec	word [si+8]
  6412                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
  6413                                  					; then decrease	BPB_TOTALSECTORS by 1
  6414 00002002 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6415 00002006 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6416                                  cfb_retit:				
  6417 0000200A 5E                      		pop	si
  6418 0000200B 5A                      		pop	dx
  6419 0000200C 58                      		pop	ax
  6420 0000200D C3                      		retn
  6421                                  
  6422                                  ; ---------------------------------------------------------------------------
  6423                                  
  6424 0000200E 0200                    word2:		dw 2
  6425 00002010 0300                    word3:		dw 3
  6426 00002012 0002                    word512:	dw 512
  6427                                  
  6428                                  ; =============== S U B	R O U T	I N E =======================================
  6429                                  
  6430                                  ; 15/10/2022
  6431                                  
  6432                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6433                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6434                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6435                                  ; as the bpb on the drive.
  6436                                  ;
  6437                                  ; no attempt is made to preserve registers since we are going to jump to
  6438                                  ; sysinit straight after this routine.
  6439                                  
  6440                                  setdrvparms:
  6441 00002014 31DB                    		xor	bx, bx
  6442                                  		; 18/10/2022
  6443 00002016 C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6444                                  _next_bds:				
  6445 0000201A 06                      		push	es
  6446 0000201B 57                      		push	di
  6447 0000201C 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6448 00002020 80FB05                  		cmp	bl, 5		; ffHardFile
  6449 00002023 753E                    		jnz	short nothardff
  6450 00002025 31D2                    		xor	dx, dx
  6451 00002027 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6452 0000202B 09C0                    		or	ax, ax
  6453 0000202D 7508                    		jnz	short get_ccyl
  6454 0000202F 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6455 00002033 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6456                                  
  6457                                  get_ccyl:				
  6458 00002037 52                      		push	dx
  6459 00002038 50                      		push	ax
  6460 00002039 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6461 0000203D 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6462                                  					; assume sectors per cyl. < 64k.
  6463 00002041 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6464 00002043 58                      		pop	ax
  6465 00002044 5A                      		pop	dx		; dx:ax	= total	sectors
  6466 00002045 50                      		push	ax
  6467 00002046 89D0                    		mov	ax, dx
  6468 00002048 31D2                    		xor	dx, dx
  6469 0000204A F7F1                    		div	cx
  6470 0000204C 2EA3[2905]              		mov	[cs:temp_h], ax	; ax be	0 here.
  6471 00002050 58                      		pop	ax
  6472 00002051 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6473 00002053 09D2                    		or	dx, dx
  6474 00002055 7401                    		jz	short no_cyl_rnd ; came out even
  6475 00002057 40                      		inc	ax		; round	up
  6476                                  
  6477                                  no_cyl_rnd:				
  6478 00002058 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6479 0000205C 06                      		push	es
  6480 0000205D 1F                      		pop	ds
  6481 0000205E 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6482                                  					; ds:si	-> bpb for hard	file
  6483 00002061 EB55                    		jmp	short set_recbpb
  6484                                  ; ---------------------------------------------------------------------------
  6485                                  
  6486                                  nothardff:				
  6487 00002063 0E                      		push	cs
  6488 00002064 1F                      		pop	ds
  6489                                  
  6490                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6491                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6492                                  
  6493                                  		; 10/12/2022
  6494                                  		; ds = cs
  6495                                  		; 17/10/2022 (ds=cs)
  6496 00002065 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  6497                                  		;cmp	byte [cs:fakefloppydrv], 1
  6498 0000206A 7454                    		jz	short go_to_next_bds
  6499 0000206C 80FB07                  		cmp	bl, 7		; ffother
  6500                                  					; special case "other" type of medium
  6501 0000206F 753D                    		jnz	short not_process_other
  6502                                  process_other:
  6503 00002071 31D2                    		xor	dx, dx
  6504 00002073 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6505 00002076 F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6506 00002079 F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6507 0000207C 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6508                                  					; have the total number of sectors
  6509 0000207F 48                      		dec	ax
  6510 00002080 B201                    		mov	dl, 1
  6511                                  _again:					
  6512 00002082 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6513 00002085 7206                    		jb	short _@@
  6514 00002087 D1E8                    		shr	ax, 1
  6515 00002089 D0E2                    		shl	dl, 1
  6516 0000208B EBF5                    		jmp	short _again
  6517                                  ; ---------------------------------------------------------------------------
  6518                                  
  6519                                  _@@:					
  6520 0000208D 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  6521 00002090 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  6522 00002092 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6523                                  __@@:					
  6524 00002097 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6525                                  
  6526                                  ; logic to get the sectors/fat area.
  6527                                  ; fat entry is assumed to be 1.5 bytes!!!
  6528                                  
  6529                                  		; 10/12/2022
  6530                                  		; ds = cs
  6531                                  		; 17/10/2022 (ds=cs)
  6532 0000209A F726[1020]              		mul	word [word3]
  6533 0000209E F736[0E20]              		div	word [word2]
  6534 000020A2 31D2                    		xor	dx, dx
  6535 000020A4 F736[1220]              		div	word [word512]
  6536                                  		;
  6537                                  		; 10/12/2022
  6538                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6539                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6540                                  		;xor	dx, dx
  6541                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6542                                  		;
  6543 000020A8 40                      		inc	ax		; + 1
  6544                                  no_round_up:
  6545 000020A9 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6546 000020AC EB12                    		jmp	short go_to_next_bds
  6547                                  ; ---------------------------------------------------------------------------
  6548                                  
  6549                                  not_process_other:			
  6550 000020AE D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  6551                                  		;mov	si, bpbtable
  6552                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6553                                  		; 09/12/2022
  6554                                  		;mov	si, BPBTABLE
  6555                                  		;mov	si, [bx+si]	; get address of bpb
  6556                                  		; 10/12/2022
  6557                                  		;mov	si, [BPBTABLE+bx]
  6558                                  		; 13/12/2022
  6559                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  6560                                  		; 14/08/2023
  6561                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  6562                                  							; correct offset
  6563 000020B0 8BB7[A673]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  6564                                  		
  6565                                  		; 28/08/2023
  6566 000020B4 81C6D03C                		add	si, SYSINIT_OFFSET
  6567                                  set_recbpb:				
  6568 000020B8 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6569                                  					; es:di	-> recbpb
  6570 000020BB B91900                  		mov	cx, 25		; bpbx.size
  6571 000020BE F3A4                    		rep movsb		; move (size bpbx) bytes	
  6572                                  go_to_next_bds:				
  6573 000020C0 5F                      		pop	di
  6574 000020C1 07                      		pop	es		; restore pointer to bds
  6575 000020C2 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6576 000020C5 83FFFF                  		cmp	di, 0FFFFh	; -1
  6577 000020C8 740A                    		jz	short got_end_of_bds_chain
  6578 000020CA E94DFF                  		jmp	_next_bds
  6579                                  ; ---------------------------------------------------------------------------
  6580                                  
  6581                                  		; 18/12/2022
  6582                                  ;got_end_of_bds_chain:			
  6583                                  		;retn
  6584                                  
  6585                                  ; =============== S U B	R O U T	I N E =======================================
  6586                                  
  6587                                  ; 15/10/2022
  6588                                  ; 30/12/2018 - Retro DOS v4.0
  6589                                  
  6590                                  ; al = device number
  6591                                  
  6592                                  print_init:	
  6593 000020CD 98                      		cbw
  6594 000020CE 89C2                    		mov	dx, ax
  6595 000020D0 B401                    		mov	ah, 1
  6596 000020D2 CD17                    		int	17h		; PRINTER - INITIALIZE
  6597                                  					; DX = printer port (0-3)
  6598                                  					; Return: AH = status
  6599                                  got_end_of_bds_chain:	; 18/12/2022
  6600 000020D4 C3                      		retn
  6601                                  
  6602                                  ; =============== S U B	R O U T	I N E =======================================
  6603                                  
  6604                                  ; al = device number
  6605                                  
  6606                                  aux_init:
  6607 000020D5 98                      		cbw
  6608 000020D6 89C2                    		mov	dx, ax
  6609                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  6610                                  					; 2400,n,1,8 (msequ.inc)
  6611                                  		;mov	ah, 0
  6612                                  		; 10/12/2022
  6613 000020D8 B8A300                  		mov	ax, 00A3h
  6614 000020DB CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  6615                                  					; 	AL = initializing parameters,
  6616                                  					;	DX = port number (0-3)
  6617                                  					; Return: AH = RS-232 status code bits,
  6618                                  					;	  AL = modem status bits
  6619 000020DD C3                      		retn
  6620                                  
  6621                                  ; =============== S U B	R O U T	I N E =======================================
  6622                                  
  6623                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6624                                  ; 30/12/2018 - Retro DOS v4.0
  6625                                  ; 03/06/2018 - Retro DOS v3.0
  6626                                  ; (19/03/2018 - Retro DOS v2.0)
  6627                                  
  6628                                  ; domini **********************************************************************
  6629                                  ;
  6630                                  ;mini disk initialization routine. called right after dohard
  6631                                  ;modified for >2 hardfile support
  6632                                  ;
  6633                                  ; **cs=ds=es=datagrp
  6634                                  ;
  6635                                  ; **domini will search for every extended partition in the system, and
  6636                                  ;   initialize it.
  6637                                  ;
  6638                                  ; **bdsm stands for bds table for mini disk and located right after the label
  6639                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  6640                                  ;   address of bdsm table.
  6641                                  ;
  6642                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  6643                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  6644                                  ;   right now, they are called as ismini, hidden_trks respectively.
  6645                                  ;
  6646                                  ; **domini will use the same routine in sethard routine after label set2 to
  6647                                  ;   save coding.
  6648                                  ;
  6649                                  ; **drvmax determined in dohard routine will be used for the next
  6650                                  ;   available logical mini disk drive number.
  6651                                  ;
  6652                                  ; input: drvmax, dskdrvs
  6653                                  ;
  6654                                  ; output: minidisk installed. bdsm table established and installed to bds.
  6655                                  ;	  end_of_bdsm - ending offset address of bdsm.
  6656                                  ;
  6657                                  ; called modules:
  6658                                  ;		  getboot
  6659                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  6660                                  ;
  6661                                  ;		  setmini (new, it will use set2 routine)
  6662                                  ;
  6663                                  ; variables used: end_of_bdsm
  6664                                  ;		  rom_minidisk_num
  6665                                  ;		  mini_hdlim, mini_seclim
  6666                                  ;		  BDS_STRUC, start_bds
  6667                                  ;
  6668                                  ;******************************************************************************
  6669                                  
  6670                                  		; 19/10/2022
  6671                                  domini:	
  6672 000020DE 8A36[4317]              		mov	dh, [hnum]	; get number of hardfiles
  6673                                  		; 10/12/2022
  6674 000020E2 20F6                    		and	dh, dh
  6675                                  		;cmp	dh, 0
  6676 000020E4 7431                    		jz	short dominiret	; no hard file?	then exit.
  6677 000020E6 B280                    		mov	dl, 80h		; start	with hardfile 80h
  6678                                  domini_loop:				
  6679 000020E8 52                      		push	dx
  6680 000020E9 8816[4217]              		mov	[rom_minidisk_num], dl
  6681 000020ED B408                    		mov	ah, 8
  6682 000020EF CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6683                                  					; DL = drive number
  6684                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6685                                  					; DL = number of consecutive drives
  6686                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6687 000020F1 FEC6                    		inc	dh
  6688 000020F3 31C0                    		xor	ax, ax
  6689 000020F5 88F0                    		mov	al, dh
  6690 000020F7 A3[4817]                		mov	[mini_hdlim], ax ; # of heads
  6691 000020FA 80E13F                  		and	cl, 3Fh
  6692 000020FD 88C8                    		mov	al, cl
  6693 000020FF A3[4A17]                		mov	[mini_seclim], ax ; # of sectors/track
  6694 00002102 06                      		push	es
  6695 00002103 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6696 00002107 E87AFB                  		call	getboot		; read master boot record into
  6697                                  					; initbootsegment:bootbias
  6698 0000210A 7203                    		jb	short domininext
  6699 0000210C E80900                  		call	find_mini_partition
  6700                                  domininext:				
  6701 0000210F 07                      		pop	es
  6702 00002110 5A                      		pop	dx
  6703 00002111 FEC2                    		inc	dl		; next hard file
  6704 00002113 FECE                    		dec	dh
  6705 00002115 75D1                    		jnz	short domini_loop
  6706                                  dominiret:				
  6707 00002117 C3                      		retn
  6708                                  
  6709                                  ; =============== S U B	R O U T	I N E =======================================
  6710                                  
  6711                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6712                                  ; 30/12/2018 - Retro DOS v4.0
  6713                                  
  6714                                  ;find_mini_partition tries to find every extended partition on a disk.
  6715                                  ;at entry:	di -> bdsm entry
  6716                                  ;		es:bx -> 07c0:bootbias - master boot record
  6717                                  ;		rom_minidisk_num - rom drive number
  6718                                  ;		drvmax - logical drive number
  6719                                  ;		mini_hdlim, mini_seclim
  6720                                  ;
  6721                                  ;called routine: setmini which uses set2 (in sethard routine)
  6722                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  6723                                  
  6724                                  
  6725                                  find_mini_partition:	
  6726 00002118 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  6727                                  fmpnext:				
  6728 0000211C 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  6729 00002120 740A                    		jz	short fmpgot
  6730 00002122 83C310                  		add	bx, 16
  6731 00002125 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6732 00002129 75F1                    		jnz	short fmpnext
  6733                                  		;jmp	short fmpnextfound ; extended partition	not found
  6734                                  		; 18/12/2022
  6735                                  fmpnextfound:
  6736 0000212B C3                      		retn
  6737                                  
  6738                                  ;		; 30/07/2019 - Retro DOS v3.2
  6739                                  ;		jb	short fmpnext
  6740                                  ;fmpret:
  6741                                  ;		retn	; 29/05/2019
  6742                                  
  6743                                  ; ---------------------------------------------------------------------------
  6744                                  
  6745                                  		; 19/10/2022
  6746                                  fmpgot:					; found my partition.				
  6747 0000212C E89D00                  		call	dmax_check	; check	for drvmax already 26
  6748 0000212F 73FA                    		jnb	short fmpnextfound ; done if too many
  6749 00002131 8B3E[4617]              		mov	di, [end_of_bdss] ; get next free	bds
  6750 00002135 C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  6751                                  		; 10/12/2022
  6752 0000213A 804D2301                		or	byte [di+23h], 1
  6753                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  6754                                  					; fNon_Removable
  6755 0000213E C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  6756                                  					; ffHardFile
  6757 00002142 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  6758 00002147 A1[4817]                		mov	ax, [mini_hdlim]
  6759 0000214A 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  6760 0000214D A1[4A17]                		mov	ax, [mini_seclim]
  6761 00002150 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  6762 00002153 A0[4217]                		mov	al, [rom_minidisk_num]
  6763 00002156 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  6764                                  					; set physical number
  6765 00002159 A0[7500]                		mov	al, [drvmax]
  6766 0000215C 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  6767                                  					; set logical number
  6768 0000215F 26837F0A00              		cmp	word [es:bx+10], 0
  6769 00002164 7707                    		ja	short fmpgot_cont
  6770 00002166 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  6771                                  					; only lower word is meaningful.
  6772 0000216B 72BE                    		jb	short fmpnextfound
  6773                                  					; should be bigger than 64 sectors at least
  6774                                  fmpgot_cont:				
  6775 0000216D 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  6776 00002170 268A7702                		mov	dh, [es:bx+2]	; cylinder
  6777 00002174 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  6778 00002177 D0C6                    		rol	dh, 1
  6779 00002179 D0C6                    		rol	dh, 1
  6780 0000217B 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  6781 0000217F 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  6782                                  					; set hidden trks
  6783 00002182 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  6784 00002186 268A7701                		mov	dh, [es:bx+1]	; head
  6785 0000218A 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6786 0000218E BB0002                  		mov	bx, 200h	; bootbias
  6787 00002191 B80102                  		mov	ax, 201h
  6788 00002194 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6789                                  					; AL = number of sectors to read, CH = track, CL = sector
  6790                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6791                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6792 00002196 7293                    		jb	short fmpnextfound
  6793 00002198 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  6794                                  
  6795                                  		; 14/08/2023
  6796                                  		;push	es
  6797 0000219B E80800                  		call	setmini		; install a mini disk.
  6798                                  					; bx value saved.
  6799                                  		;pop	es  ; 14/08/2023
  6800 0000219E 7203                    		jb	short fmpnextchain
  6801 000021A0 E83E00                  		call	xinstall_bds	; -- install the bdsm into table
  6802                                  fmpnextchain:				
  6803 000021A3 E976FF                  		jmp	fmpnext		; let's find out
  6804                                  					; if we	have any chained partition
  6805                                  ; ---------------------------------------------------------------------------
  6806                                  
  6807                                  		; 18/12/2022
  6808                                  ;fmpnextfound:				
  6809                                  		;retn
  6810                                  
  6811                                  ; =============== S U B	R O U T	I N E =======================================
  6812                                  
  6813                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6814                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6815                                  
  6816                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  6817                                  	
  6818 000021A6 57                      		push	di
  6819 000021A7 53                      		push	bx
  6820                                  		; 14/08/2023
  6821                                  		; ds = cs = BIOSDATA segment
  6822                                  		;push	ds
  6823 000021A8 06                      		push	es
  6824                                  setmini_1:				
  6825 000021A9 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  6826 000021AD 741A                    		jz	short setmini_2
  6827 000021AF 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  6828 000021B3 7414                    		jz	short setmini_2
  6829 000021B5 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG	partition
  6830 000021B9 740E                    		jz	short setmini_2
  6831 000021BB 83C310                  		add	bx, 16
  6832 000021BE 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6833 000021C2 75E5                    		jnz	short setmini_1
  6834 000021C4 F9                      		stc
  6835 000021C5 07                      		pop	es
  6836                                  		; 14/08/2023
  6837                                  		;pop	ds
  6838 000021C6 5B                      		pop	bx
  6839 000021C7 5F                      		pop	di
  6840 000021C8 C3                      		retn
  6841                                  
  6842                                  ; ---------------------------------------------------------------------------
  6843                                  setmini_2:				
  6844 000021C9 E964FB                  		jmp	set2		; branch into middle of sethard
  6845                                  
  6846                                  ; =============== S U B	R O U T	I N E =======================================
  6847                                  
  6848                                  ; 15/10/2022
  6849                                  ; 28/12/2018 - Retro DOS v4.0
  6850                                  ;
  6851                                  ; dmax_check --- call this when we want to install a new drive.
  6852                                  ;		it checks for drvmax < 26 to see if there is
  6853                                  ;		a drive letter left.
  6854                                  ;
  6855                                  ;	drvmax < 26 : carry SET!
  6856                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  6857                                  ;			trash ax
  6858                                  
  6859                                  dmax_check:	
  6860 000021CC 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  6861 000021D1 720D                    		jb	short dmax_ok	; return with carry if okay
  6862 000021D3 06                      		push	es
  6863                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  6864 000021D4 B83D04                  		mov	ax, SYSINITSEG	; 17/10/2022	
  6865 000021D7 8EC0                    		mov	es, ax
  6866                                  		; 18/10/2022
  6867 000021D9 26C606[FF03]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  6868                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  6869                                  					; set message flag
  6870                                  					; [SYSINIT+toomanydrivesflag]
  6871 000021DF 07                      		pop	es
  6872                                  
  6873                                  		;;push	es
  6874                                  		;;mov	ax,SYSINIT_SEG
  6875                                  		;;mov	es,ax
  6876                                  		;;mov	byte [es:toomanydrivesflag],1
  6877                                  					; set message flag
  6878                                  		;;pop	es
  6879                                  		;
  6880                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  6881                                  dmax_ok:				
  6882 000021E0 C3                      		retn
  6883                                  
  6884                                  ; =============== S U B	R O U T	I N E =======================================
  6885                                  
  6886                                  ; 18/10/2022
  6887                                  ; 15/10/2022
  6888                                  ; 28/12/2018 - Retro DOS v4.0						
  6889                                  ;								 
  6890                                  ;	link next bds (at ds:di) into the chain. assume that the
  6891                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  6892                                  ;	  dskdrv_table, and end_of_bdss.	
  6893                                  
  6894                                  xinstall_bds:		
  6895 000021E1 56                      		push	si
  6896 000021E2 53                      		push	bx
  6897 000021E3 8B36[1901]              		mov	si, [start_bds]	; get first bds
  6898                                  xinstall_bds_1:				
  6899 000021E7 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  6900 000021EA 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  6901                                  		;mov	si, [si+BDS.link]
  6902 000021EC 8B34                    		mov	si, [si]	; chain	through	list
  6903 000021EE EBF7                    		jmp	short xinstall_bds_1
  6904                                  ; ---------------------------------------------------------------------------
  6905                                  
  6906                                  xinstall_bds_2:				
  6907                                  		;mov	[si+BDS.link], di
  6908 000021F0 893C                    		mov	[si], di
  6909                                  		;mov	[si+BDS.link+2], ds
  6910 000021F2 8C5C02                  		mov	[si+2], ds
  6911                                  		;mov	word [di+BDS.link], -1
  6912 000021F5 C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  6913                                  		;mov	[di+BDS.link+2], ds
  6914 000021F9 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  6915                                  		; 20/03/2019 - Retro DOS v4.0
  6916                                  		;lea	bx, [di+BDS.BPB]
  6917 000021FC 8D5D06                  		lea	bx, [di+6]
  6918 000021FF 8B36[4417]              		mov	si, [last_dskdrv_table]
  6919 00002203 891C                    		mov	[si], bx
  6920 00002205 8306[4417]02            		add	word [last_dskdrv_table], 2
  6921 0000220A FE06[7500]              		inc	byte [drvmax]
  6922 0000220E 8306[4617]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  6923 00002213 5B                      		pop	bx
  6924 00002214 5E                      		pop	si
  6925 00002215 C3                      		retn
  6926                                  
  6927                                  ; =============== S U B	R O U T	I N E =======================================
  6928                                  
  6929                                  ; 17/10/2022
  6930                                  ; 15/10/2022
  6931                                  ; 28/12/2018 - Retro DOS v4.0
  6932                                  ; 03/06/2018 - Retro DOS v3.0
  6933                                  
  6934                                  cmos_clock_read:	
  6935 00002216 50                      		push	ax
  6936 00002217 51                      		push	cx
  6937 00002218 52                      		push	dx
  6938 00002219 55                      		push	bp
  6939 0000221A 31ED                    		xor	bp, bp
  6940                                  loop_clock:				
  6941 0000221C 31C9                    		xor	cx, cx
  6942 0000221E 31D2                    		xor	dx, dx
  6943 00002220 B402                    		mov	ah, 2
  6944 00002222 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  6945                                  					; Return: CH = hours in	BCD
  6946                                  					; CL = minutes in BCD
  6947                                  					; DH = seconds in BCD
  6948 00002224 83F900                  		cmp	cx, 0
  6949 00002227 7512                    		jnz	short clock_present
  6950 00002229 83FA00                  		cmp	dx, 0
  6951 0000222C 750D                    		jnz	short clock_present
  6952 0000222E 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  6953 00002231 741C                    		jz	short no_readdate ; was	at zero	setting.
  6954 00002233 45                      		inc	bp		; only perform delay once.
  6955 00002234 B90040                  		mov	cx, 4000h	; 16384
  6956                                  delay:					
  6957 00002237 E2FE                    		loop	delay
  6958 00002239 EBE1                    		jmp	short loop_clock
  6959                                  ; ---------------------------------------------------------------------------
  6960                                  
  6961                                  clock_present:				
  6962 0000223B 2EC606[F304]01          		mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  6963 00002241 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  6964                                  					; possibly destroyed by	cp dos and
  6965                                  					; post routine did not restore that.
  6966 00002244 56                      		push	si
  6967 00002245 E8E1F2                  		call	read_real_date	; read real-time clock for date
  6968 00002248 FA                      		cli
  6969                                  		;mov	ds:daycnt, si	; set system date
  6970 00002249 8936[F004]              		mov	[daycnt], si
  6971 0000224D FB                      		sti
  6972 0000224E 5E                      		pop	si
  6973                                  
  6974                                  no_readdate:				
  6975 0000224F 5D                      		pop	bp
  6976 00002250 5A                      		pop	dx
  6977 00002251 59                      		pop	cx
  6978 00002252 58                      		pop	ax
  6979 00002253 C3                      		retn
  6980                                  
  6981                                  ; ---------------------------------------------------------------------------
  6982                                  
  6983                                  ; the following code is written by jack gulley in engineering group.
  6984                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  6985                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  6986                                  ; the cmos clock rate are still slow which slow down disk operations
  6987                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  6988                                  ; to fix this problem at the request of cp dos.
  6989                                  ;
  6990                                  ; the program is modified to be run on msinit. equates are defined
  6991                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  6992                                  ;
  6993                                  ;  the following code cmosck is used to insure that the cmos has not
  6994                                  ;	had its rate controls left in an invalid state on older at's.
  6995                                  ;
  6996                                  ;	it checks for an at model byte "fc" with a submodel type of
  6997                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  6998                                  ;	bits in case post has not done it. this initilization routine
  6999                                  ;	is only needed once when dos loads. it should be run as soon
  7000                                  ;	as possible to prevent slow diskette access.
  7001                                  ;
  7002                                  ;	this code exposes one to dos clearing cmos setup done by a
  7003                                  ;	resident program that hides and re-boots the system.
  7004                                  
  7005                                  cmosck:					; check and reset rtc rate bits	
  7006                                  
  7007                                  ;model byte and submodel byte were already determined in msinit.
  7008                                  
  7009                                  	; 16/06/2018 - Retro DOS v3.0
  7010                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  7011                                  			
  7012 00002254 50                      		push	ax
  7013 00002255 2E803E[3E06]FC          		cmp	byte [cs:model_byte], 0FCh
  7014 0000225B 7525                    		jnz	short cmosck9	; Exit if not an AT model
  7015 0000225D 2E803E[3F06]06          		cmp	byte [cs:secondary_model_byte], 6
  7016                                  					; Is it 06 for the industral AT ?
  7017 00002263 7408                    		jz	short cmosck4	; Go reset CMOS	periodic rate if 06
  7018 00002265 2E803E[3F06]04          		cmp	byte [cs:secondary_model_byte], 4
  7019                                  					; Is it 00, 01, 02, or 03 ?
  7020 0000226B 7315                    		jnb	short cmosck9	; EXIT if problem fixed by POST  
  7021                                  					; Also,Secondary_model_byte = 0 
  7022                                  					;   when AH=0C0h, int 15h failed.
  7023                                  					;	RESET THE CMOS PERIODIC RATE 
  7024                                  					;  Model=FC submodel=00,01,02,03 or 06 
  7025                                  cmosck4:				
  7026 0000226D B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  7027                                  					; NMI disabled on return
  7028 0000226F B426                    		mov	ah, 26h		; 00100110b
  7029                                  					; Set divider &	rate selection
  7030 00002271 E83000                  		call	cmos_write
  7031 00002274 B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  7032                                  					; NMI disabled on return
  7033 00002276 E80B00                  		call	cmos_read
  7034 00002279 2407                    		and	al, 7		; 00000111b
  7035                                  					; clear	SET,PIE,AIE,UIE,SQWE
  7036 0000227B 88C4                    		mov	ah, al
  7037 0000227D B00B                    		mov	al, 0Bh		; cmos_reg_b
  7038                                  					; NMI enabled on return
  7039 0000227F E82200                  		call	cmos_write
  7040                                  cmosck9:				
  7041 00002282 58                      		pop	ax
  7042 00002283 C3                      		retn
  7043                                  
  7044                                  ; =============== S U B	R O U T	I N E =======================================
  7045                                  
  7046                                  ;--- CMOS_READ -----------------------------------------------------------------
  7047                                  ;		read byte from cmos system clock configuration table	       :
  7048                                  ;									       :
  7049                                  ; input: (al)=	cmos table address to be read				       :
  7050                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7051                                  ;		bits 6-0 = address of table location to read		       :
  7052                                  ;									       :
  7053                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  7054                                  ;		on then nmi left disabled.  during the cmos read both nmi and  :
  7055                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7056                                  ;		the cmos address register is pointed to a default value and    :
  7057                                  ;		the interrupt flag restored to the entry state on return.      :
  7058                                  ;		only the (al) register and the nmi state is changed.	       :
  7059                                  ;-------------------------------------------------------------------------------
  7060                                  
  7061                                  cmos_read:				; read location (al) into (al)	
  7062 00002284 9C                      		pushf
  7063 00002285 FA                      		cli
  7064 00002286 53                      		push	bx
  7065 00002287 50                      		push	ax		; AL = cmos table address to be	read
  7066 00002288 0C80                    		or	al, 80h
  7067 0000228A E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7068                                  					; RTC Seconds
  7069 0000228C 90                      		nop			; (undocumented	delay needed)
  7070 0000228D E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7071 0000228F 89C3                    		mov	bx, ax
  7072 00002291 58                      		pop	ax
  7073 00002292 2480                    		and	al, 80h
  7074 00002294 0C0F                    		or	al, 0Fh
  7075 00002296 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7076                                  					; RTC Seconds
  7077 00002298 90                      		nop
  7078 00002299 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7079 0000229B 89D8                    		mov	ax, bx
  7080 0000229D 5B                      		pop	bx
  7081 0000229E 0E                      		push	cs		; *place code segment in stack and
  7082 0000229F E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  7083 000022A2 C3                      		retn			; return with flags restored
  7084                                  
  7085                                  ; ---------------------------------------------------------------------------
  7086                                  
  7087                                  cmos_popf:				
  7088 000022A3 CF                      		iret			; popf for level b- parts
  7089                                  					; return far and restore flags
  7090                                  
  7091                                  ; =============== S U B	R O U T	I N E =======================================
  7092                                  
  7093                                  ;--- cmos_write ----------------------------------------------------------------
  7094                                  ;		write byte to cmos system clock configuration table	       :
  7095                                  ;									       :
  7096                                  ; input: (al)=	cmos table address to be written to			       :
  7097                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7098                                  ;		bits 6-0 = address of table location to write		       :
  7099                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  7100                                  ;									       :
  7101                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  7102                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  7103                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7104                                  ;		the cmos address register is pointed to a default value and    :
  7105                                  ;		the interrupt flag restored to the entry state on return.      :
  7106                                  ;		only the cmos location and the nmi state is changed.	       :
  7107                                  ;-------------------------------------------------------------------------------
  7108                                  
  7109                                  cmos_write:				; write (ah) to location (al)	
  7110 000022A4 9C                      		pushf			; write (ah) to location (al)
  7111 000022A5 50                      		push	ax		; save work register values
  7112 000022A6 FA                      		cli
  7113 000022A7 50                      		push	ax		; save user nmi	state
  7114 000022A8 0C80                    		or	al, 80h		; disable nmi for us
  7115 000022AA E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7116                                  					; RTC Seconds
  7117 000022AC 90                      		nop
  7118 000022AD 88E0                    		mov	al, ah
  7119 000022AF E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  7120 000022B1 58                      		pop	ax		; get user nmi
  7121 000022B2 2480                    		and	al, 80h
  7122 000022B4 0C0F                    		or	al, 0Fh
  7123 000022B6 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7124                                  					; RTC Seconds
  7125 000022B8 90                      		nop
  7126 000022B9 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7127 000022BB 58                      		pop	ax		; restore work registers
  7128 000022BC 0E                      		push	cs		; *place code segment in stack and
  7129 000022BD E8E3FF                  		call	cmos_popf	; *handle popf for b- level 80286
  7130 000022C0 C3                      		retn
  7131                                  
  7132                                  ; 21/12/2022
  7133                                  ; ---------------------------------------------------------------------------
  7134                                  ; ---------------------------------------------------------------------------
  7135                                  %if 0
  7136                                  
  7137                                  ; ---------------------------------------------------------------------------
  7138                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  7139                                  ; ---------------------------------------------------------------------------
  7140                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  7141                                  ; ---------------------------------------------------------------------------
  7142                                  
  7143                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7144                                  ;
  7145                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  7146                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  7147                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  7148                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7149                                  
  7150                                  ; =============== S U B	R O U T	I N E =======================================
  7151                                  
  7152                                  ; GetClus, read in a cluster at a specified address
  7153                                  ;
  7154                                  ;  bx = cluster to read
  7155                                  ;  cx = sectors per cluster
  7156                                  ;  es:di = load location
  7157                                  
  7158                                  ; 17/10/2022
  7159                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7160                                  ; 09/12/2022
  7161                                  DISKRD equ diskrd
  7162                                  
  7163                                  		; 17/10/2022
  7164                                  getclus:				
  7165                                  		push	cx
  7166                                  		push	di
  7167                                  		mov	[cs:doscnt], cx
  7168                                  		mov	ax, bx
  7169                                  		dec	ax
  7170                                  		dec	ax
  7171                                  		mul	cx		; convert to logical sector
  7172                                  					; dx:ax	= matching logical sector number
  7173                                  					;	  starting from the data sector
  7174                                  		add	ax, [cs:bios_l]
  7175                                  		adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7176                                  unpack:					
  7177                                  		push	ds
  7178                                  		push	ax
  7179                                  		push	bx
  7180                                  		mov	si, [cs:fatloc]
  7181                                  		mov	ds, si
  7182                                  		mov	si, bx		; next cluster
  7183                                  		test	byte [cs:fbigfat], 40h	; fbig
  7184                                  					; 16 bit fat?
  7185                                  		jnz	short unpack16	; yes
  7186                                  		shr	si, 1		; 12 bit fat. si=si/2
  7187                                  					; si = clus + clus/2
  7188                                  		add	si, bx		;
  7189                                  					; (si =	byte offset of the cluster in the FAT)
  7190                                  		push	dx
  7191                                  		xor	dx, dx
  7192                                  		call	get_fat_sector
  7193                                  		pop	dx
  7194                                  		mov	ax, [bx]	; save it into ax
  7195                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7196                                  		; 25/06/2023
  7197                                  		;mov	al, [bx]	; splitted fat
  7198                                  		mov	[cs:temp_cluster], al
  7199                                  		inc	si		; (next	byte)
  7200                                  		push	dx
  7201                                  		xor	dx, dx
  7202                                  		call	get_fat_sector
  7203                                  		pop	dx
  7204                                  		;mov	al, ds:0
  7205                                  		mov	al, [0] ; 19/10/2022
  7206                                  		mov	[cs:temp_cluster+1], al
  7207                                  		mov	ax, [cs:temp_cluster]
  7208                                  even_odd:				
  7209                                  		pop	bx		; restore old fat entry	value
  7210                                  		push	bx		; save it right	away.
  7211                                  		shr	bx, 1		; was it even or odd?
  7212                                  		jnb	short havclus	; it was even.
  7213                                  		shr	ax, 1		; odd. massage fat value and keep
  7214                                  					; the highest 12 bits.
  7215                                  		shr	ax, 1
  7216                                  		shr	ax, 1
  7217                                  		shr	ax, 1
  7218                                  havclus:				
  7219                                  		mov	bx, ax		; now bx = new fat entry.
  7220                                  		and	bx, 0FFFh	; keep low 12 bits.
  7221                                  		jmp	short unpackx
  7222                                  ; ---------------------------------------------------------------------------
  7223                                  
  7224                                  unpack16:				
  7225                                  		push	dx
  7226                                  		xor	dx, dx
  7227                                  		shl	si, 1		; extend to 32 bit offset
  7228                                  		adc	dx, 0
  7229                                  		call	get_fat_sector
  7230                                  		pop	dx
  7231                                  		mov	bx, [bx]	;
  7232                                  					; bx = new fat entry.
  7233                                  unpackx:				
  7234                                  		pop	si		; restore old bx value into si
  7235                                  		pop	ax		; restore logical sector (low)
  7236                                  		pop	ds
  7237                                  		sub	si, bx
  7238                                  		cmp	si, -1		; one apart?
  7239                                  		jnz	short getcl2
  7240                                  		add	[cs:doscnt], cx
  7241                                  		jmp	short unpack
  7242                                  ; ---------------------------------------------------------------------------
  7243                                  
  7244                                  getcl2:					
  7245                                  		push	bx
  7246                                  		push	dx		; sector to read (high)
  7247                                  		push	ax		; sector to read (low)
  7248                                  		mov	ax, [cs:drvfat]	; get drive and	fat spec
  7249                                  		mov	cx, [cs:doscnt]
  7250                                  		pop	dx		; sector to read for diskrd (low)
  7251                                  		pop	word [cs:start_sec_h]
  7252                                  					; sector to read for diskrd (high)
  7253                                  		push	ds
  7254                                  		push	cs
  7255                                  		pop	ds
  7256                                  		push	cs		; simulate far call
  7257                                  		; 17/10/2022
  7258                                  		mov	bp, DISKRD	; 8E5h
  7259                                  		;mov	bp, 8E5h	; offset diskrd
  7260                                  					; 2C7h:8E5h = 70h:2E55h
  7261                                  		call	call_bios_code	; read the clusters
  7262                                  		pop	ds
  7263                                  		pop	bx
  7264                                  		pop	di
  7265                                  		mov	ax, [cs:doscnt]	; get number of	sectors	read
  7266                                  		xchg	ah, al		; multiply by 256
  7267                                  		shl	ax, 1		; times	2 equal	512
  7268                                  		add	di, ax		; update load location
  7269                                  		pop	cx		; restore sectors/cluster
  7270                                  		retn
  7271                                  
  7272                                  ; =============== S U B	R O U T	I N E =======================================
  7273                                  
  7274                                  
  7275                                  ;function: find and read the corresponding fat sector into ds:0
  7276                                  ;
  7277                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7278                                  ;     ds - fatloc segment
  7279                                  ;     cs:drvfat - logical drive number, fat id
  7280                                  ;     cs:md_sectorsize
  7281                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7282                                  ;
  7283                                  ;out). corresponding fat sector read in.
  7284                                  ;      bx = offset value from fatlog segment.
  7285                                  ;      other registera saved.
  7286                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7287                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7288                                  ;      should save this byte, and read the next fat sector to get the rest
  7289                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7290                                  
  7291                                  		; 17/10/2022
  7292                                  get_fat_sector:	
  7293                                  		push	ax
  7294                                  		push	cx
  7295                                  		push	di
  7296                                  		push	si
  7297                                  		push	es
  7298                                  		push	ds
  7299                                  		mov	ax, si
  7300                                  		mov	cx, [cs:md_sectorsize] ; 512
  7301                                  		div	cx		; ax = sector number, dx = offset
  7302                                  		nop
  7303                                  
  7304                                  		; Get rid of the assumption that
  7305                                  		; there	is only	one reserved sector
  7306                                  
  7307                                  		push	es
  7308                                  		push	ds
  7309                                  		push	di
  7310                                  		push	ax
  7311                                  		push	cs
  7312                                  		pop	ds
  7313                                  
  7314                                  		mov	ax, [cs:drvfat]	; get drive # and FAT id
  7315                                  		mov	bp, SETDRIVE
  7316                                  		;mov	bp, 4D7h	; setdrive
  7317                                  					; at 2C7h:4D7h = 70h:2A47h
  7318                                  		push	cs		; simulate far call
  7319                                  		call	call_bios_code	; get bds for drive
  7320                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7321                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7322                                  					; add #reserved_sectors
  7323                                  		pop	di
  7324                                  		pop	ds
  7325                                  		pop	es
  7326                                  		cmp	ax, [cs:last_fat_sec_num]
  7327                                  		jz	short gfs_split_chk ; don't need to read it again.
  7328                                  		mov	[cs:last_fat_sec_num], ax 
  7329                                  					; sector number
  7330                                  					; (in the partition, without hidden sectors)
  7331                                  		push	dx
  7332                                  		mov	word [cs:start_sec_h], 0 
  7333                                  					; prepare to read the fat sector
  7334                                  					; start_sec_h is always	0 for fat sector.
  7335                                  		mov	dx, ax
  7336                                  		mov	cx, 1		; 1 sector read
  7337                                  		mov	ax, [cs:drvfat]
  7338                                  		push	ds
  7339                                  		pop	es
  7340                                  		xor	di, di		; es:di	-> fatloc segment:0
  7341                                  		push	ds
  7342                                  		push	cs
  7343                                  		pop	ds
  7344                                  		push	cs		; simulate far call
  7345                                  		mov	bp, DISKRD	; 8E5h
  7346                                  		;mov	bp, 8E5h	; offset diskrd
  7347                                  					; 2C7h:8E5h = 70h:2E55h
  7348                                  		call	call_bios_code
  7349                                  		pop	ds
  7350                                  		pop	dx
  7351                                  		mov	cx, [cs:md_sectorsize] ; 512
  7352                                  
  7353                                  gfs_split_chk:				
  7354                                  		dec	cx		; 511
  7355                                  		cmp	dx, cx		; if offset points to the
  7356                                  					; last byte of this sector,
  7357                                  					; then splitted	entry.
  7358                                  		mov	bx, dx		; set bx to dx
  7359                                  		pop	ds
  7360                                  		pop	es
  7361                                  		pop	si
  7362                                  		pop	di
  7363                                  		pop	cx
  7364                                  		pop	ax
  7365                                  		retn
  7366                                  
  7367                                  ; 15/10/2022
  7368                                  ;Bios_Data_Init	ends
  7369                                  
  7370                                  %endif
  7371                                  ; ---------------------------------------------------------------------------
  7372                                  ; ---------------------------------------------------------------------------
  7373                                  
  7374                                  		; 09/12/2022
  7375                                  		;db 0
  7376                                  
  7377                                  numbertodiv	equ ($-BData_start)
  7378                                  numbertomod	equ (numbertodiv % 16)
  7379                                  
  7380                                  %if numbertomod>0 & numbertomod<16
  7381 000022C1 00<rep Fh>              		times (16-numbertomod) db 0
  7382                                  %endif
  7383                                  
  7384                                  ;align 16
  7385                                  
  7386                                  ; 09/12/2022
  7387                                  IOSYSCODESEGOFF	equ $ - BData_start
  7388                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7389                                  
  7390                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7391                                  ; ---------------------------------------------------------------------------
  7392                                  		;db 4 dup(0)
  7393                                  ; 09/12/2022		
  7394                                  ;		times 4 db 0	; 19/10/2022
  7395                                  ; ---------------------------------------------------------------------------
  7396                                  
  7397                                  ;============================================================================
  7398                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7399                                  ;============================================================================
  7400                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7401                                  
  7402                                  section .BIOSCODE vstart=0  
  7403                                  
  7404                                  BCode_start:	 ; 09/12/2022
  7405                                   
  7406                                  ; 02/10/2022
  7407                                  
  7408                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7409                                  ;----------------------------------------------------------------------------
  7410                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7411                                  ;----------------------------------------------------------------------------
  7412                                  
  7413                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7414 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7415 00000030 7000                    BiosDataWord:	dw 70h
  7416                                  
  7417                                  ; 15/10/2022
  7418                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7419                                  ; 09/12/2022
  7420                                  BIOSDATAWORD	equ BiosDataWord
  7421                                  
  7422                                  ; ---------------------------------------------------------------------------
  7423                                  
  7424                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7425                                  
  7426                                  ;************************************************************************
  7427                                  ;*									*
  7428                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7429                                  ;*	  trashes di, cx, es						*
  7430                                  ;*									*
  7431                                  ;*	cas -- should be made disposable!				*
  7432                                  ;*									*
  7433                                  ;************************************************************************
  7434                                  
  7435                                  _seg_reinit:
  7436 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7437                                  					; at 2C7h:30h or 70h:25A0h
  7438                                  		;mov	di, (offset cdev+2)
  7439 00000037 BF[E006]                		mov	di, cdev+2	; 19/10/2022
  7440 0000003A B90400                  		mov	cx, 4		; (end_BC_entries - cdev)/4
  7441                                  
  7442                                  _seg_reinit_1:				
  7443 0000003D AB                      		stosw			; modify Bios_Code entry points
  7444 0000003E 47                      		inc	di
  7445 0000003F 47                      		inc	di
  7446 00000040 E2FB                    		loop	_seg_reinit_1
  7447 00000042 CB                      		retf
  7448                                  
  7449                                  ; ---------------------------------------------------------------------------
  7450                                  
  7451                                  ; 15/10/2022
  7452                                  
  7453                                  ;************************************************************************
  7454                                  ;*									*
  7455                                  ;*	chardev_entry - main device driver dispatch routine		*
  7456                                  ;*	   called with a dummy parameter block on the stack		*
  7457                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  7458                                  ;*									*
  7459                                  ;*	will eventually take care of doing the transitions in		*
  7460                                  ;*	   out of Bios_Code						*
  7461                                  ;*									*
  7462                                  ;************************************************************************
  7463                                  
  7464                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  7465 00000043 56                      		push	si
  7466 00000044 50                      		push	ax
  7467 00000045 51                      		push	cx
  7468 00000046 52                      		push	dx
  7469 00000047 57                      		push	di
  7470 00000048 55                      		push	bp
  7471 00000049 1E                      		push	ds
  7472 0000004A 06                      		push	es
  7473 0000004B 53                      		push	bx
  7474 0000004C 89E5                    		mov	bp, sp
  7475 0000004E 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  7476                                  		;;mov	ds, word [cs:0030h]
  7477                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7478 00000051 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7479 00000056 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  7480 00000059 A2[2100]                		mov	[auxnum], al
  7481 0000005C 8826[E704]              		mov	[printdev], ah
  7482 00000060 8B34                    		mov	si, [si]	; point	to the device dispatch table
  7483 00000062 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  7484 00000066 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  7485 0000006A 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  7486 0000006E 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  7487 00000072 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  7488                                  		; 17/10/2022
  7489 00000076 81FE[9604]              		cmp	si, DSKTBL
  7490                                  		;cmp	si, 4A2h	; dsktbl
  7491                                  					; at 2C7h:4A2h = 70h:2A12h
  7492 0000007A 7517                    		jnz	short no_sector32_mapping
  7493                                  
  7494                                  ; Special case for 32-bit start sector number:
  7495                                  ;   if (si==dsktbl) /* if this is a disk device call */
  7496                                  ;      set high 16 bits of secnum to 0
  7497                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  7498                                  ;
  7499                                  ; pass high word of sector number in start_sec_h, low word in dx
  7500                                  ;
  7501                                  ; note: start_l and start_h are the offsets within the io_request packet
  7502                                  ;	  which contain the low and hi words of the 32 bit start sector if
  7503                                  ;	  it has been used.
  7504                                  ;
  7505                                  ; note: remember not to destroy the registers which have been set up before
  7506                                  
  7507                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  7508 0000007C C706[2B05]0000          		mov	word [start_sec_h], 0
  7509 00000082 83FAFF                  		cmp	dx, 0FFFFh
  7510 00000085 750C                    		jnz	short no_sector32_mapping
  7511 00000087 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  7512                                  					; 32 bits dsk req
  7513                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  7514 0000008B 8916[2B05]              		mov	[start_sec_h], dx
  7515 0000008F 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  7516                                  					; dx = packet.start_l
  7517                                  no_sector32_mapping:			
  7518 00000093 97                      		xchg	ax, di
  7519 00000094 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  7520 00000098 2E3A04                  		cmp	al, cs:[si]
  7521 0000009B 732C                    		jnb	short command_error
  7522 0000009D 98                      		cbw			; note that al <= 15 means ok
  7523 0000009E D1E0                    		shl	ax, 1
  7524 000000A0 01C6                    		add	si, ax
  7525 000000A2 97                      		xchg	ax, di
  7526 000000A3 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  7527 000000A7 FC                      		cld
  7528                                  		; 17/10/2022
  7529 000000A8 2EFF5401                		call	near [cs:si+1]
  7530                                  		;call	word ptr cs:si+1
  7531 000000AC 7202                    		jb	short already_got_ah_status
  7532 000000AE B401                    		mov	ah, 1
  7533                                  already_got_ah_status:
  7534                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  7535                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7536                                  					; cas note: shouldn't be needed!
  7537 000000B0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7538                                  		;lds	bx, ds:ptrsav
  7539 000000B5 C51E[1200]              		lds	bx, [ptrsav]
  7540 000000B9 894703                  		mov	[bx+3],	ax	; [bx+status]
  7541                                  					; mark operation complete
  7542 000000BC 5B                      		pop	bx
  7543 000000BD 07                      		pop	es
  7544 000000BE 1F                      		pop	ds
  7545 000000BF 5D                      		pop	bp
  7546 000000C0 5F                      		pop	di
  7547 000000C1 5A                      		pop	dx
  7548 000000C2 59                      		pop	cx
  7549 000000C3 58                      		pop	ax
  7550 000000C4 5E                      		pop	si
  7551 000000C5 83C402                  		add	sp, 2		; get rid of fake return address
  7552                                  	
  7553                                  		; fall through into bc_retf
  7554                                  ; ---------------------------------------------------------------------------	
  7555                                  bc_retf:
  7556 000000C8 CB                      		retf
  7557                                  ; ---------------------------------------------------------------------------
  7558                                  
  7559                                  command_error:				
  7560 000000C9 E80900                  		call	bc_cmderr
  7561 000000CC EBE2                    		jmp	short already_got_ah_status
  7562                                  ; 15/10/2022
  7563                                  ; 01/05/2019
  7564                                  
  7565                                  ;----------------------------------------------------------------------------
  7566                                  ; The following piece of hack is for supporting CP/M compatibility
  7567                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  7568                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  7569                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  7570                                  ; high.
  7571                                  ;----------------------------------------------------------------------------
  7572                                  
  7573                                  		;db 7 dup(0)
  7574                                  
  7575                                  		; 15/10/2022
  7576                                  
  7577 000000CE 0000                    		dw 0		; pad to bring offset to 0D0h
  7578                                  
  7579 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  7580                                  				;  which is the CP/M call 5 entry point
  7581                                  		
  7582                                  
  7583                                  ; ---------------------------------------------------------------------------
  7584                                  
  7585                                  ;	exit - all routines return through this path
  7586                                  
  7587                                  bc_cmderr:				
  7588 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  7589                                  					; unknown command error
  7590                                  
  7591                                  ; =============== S U B	R O U T	I N E =======================================
  7592                                  
  7593                                  ;	now zero the count field by subtracting its current value,
  7594                                  ;	  which is still in cx, from itself.
  7595                                  
  7596                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  7597                                  ;	  in order to return the number actually complete
  7598                                  
  7599                                  bc_err_cnt:	
  7600                                  		;les	bx, ds:ptrsav
  7601                                  		; 19/10/2022
  7602 000000D7 C41E[1200]              		les	bx, [ptrsav]
  7603 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  7604                                  					; # of successful i/o's
  7605 000000DF B481                    		mov	ah, 81h		; mark error return
  7606 000000E1 F9                      		stc			; indicate abnormal end
  7607 000000E2 C3                      		retn
  7608                                  
  7609                                  ; 15/10/2022
  7610                                  
  7611                                  ;Bios_Code ends
  7612                                  
  7613                                  ;----------------------------------------------------------------------------
  7614                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  7615                                  ;----------------------------------------------------------------------------
  7616                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7617                                  ; 10/01/2019 - Retro DOS v4.0
  7618                                  
  7619                                  ; 30/04/2019
  7620                                  
  7621                                  ;title	mschar - character and clock devices
  7622                                  
  7623                                  ;MODE_CTRLBRK	equ	0FFh
  7624                                  
  7625                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  7626                                  
  7627                                  ;************************************************************************
  7628                                  ;*									*
  7629                                  ;*	device driver dispatch tables					*
  7630                                  ;*									*
  7631                                  ;*	each table starts with a byte which lists the number of		*
  7632                                  ;*	legal functions, followed by that number of words. Each		*
  7633                                  ;*	word represents an offset of a routine in Bios_Code which	*
  7634                                  ;*	handles the function. The functions are terminated with		*
  7635                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  7636                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  7637                                  ;*	returned as abnormal completion status. Notice that ds		*
  7638                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  7639                                  ;*									*
  7640                                  ;************************************************************************
  7641                                  
  7642                                  		; 13/12/2022
  7643                                  		;db 0
  7644                                  
  7645                                  		; 13/12/202
  7646 000000E3 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  7647                                  					; 2C7h:0E4h = 70h:2654h
  7648 000000E4 [F901]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7649                                  					; 00 init
  7650 000000E6 [F901]                  		dw bc_exvec  ; 1FBh	; 01
  7651 000000E8 [F901]                  		dw bc_exvec  ; 1FBh	; 02
  7652 000000EA [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  7653                                  					; 03
  7654 000000EC [5B01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  7655                                  					; 04
  7656 000000EE [9E01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  7657                                  					; 05
  7658 000000F0 [F901]                  		dw bc_exvec  ; 1FBh	; 06
  7659 000000F2 [0702]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  7660                                  					; 07
  7661 000000F4 [FB01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  7662                                  					; 08
  7663 000000F6 [FB01]                  		dw con_writ  ; 1FDh	; 09
  7664 000000F8 [F901]                  		dw bc_exvec  ; 1FBh	; 0A
  7665                                  con_table_end:
  7666 000000FA 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  7667                                  					; 2C7h:0FBh = 70h:266Bh
  7668 000000FB [F901]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  7669 000000FD [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7670 000000FF [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7671 00000101 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  7672 00000103 [1802]                  		dw prn_input  ;	21Ah	; prn_input
  7673                                  					; 04 indicate zero chars read
  7674 00000105 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7675                                  					; 05 read non-destructive
  7676 00000107 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7677 00000109 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7678 0000010B [1D02]                  		dw prn_writ   ;	21Fh	; prn_writ
  7679 0000010D [1D02]                  		dw prn_writ   ; 21Fh	; 09
  7680 0000010F [4E02]                  		dw prn_stat   ; 251h	; prn_stat
  7681 00000111 [F901]                  		dw bc_exvec   ; 1FBh	; 0B
  7682 00000113 [F901]                  		dw bc_exvec   ; 1FBh	; 0C
  7683 00000115 [F901]                  		dw bc_exvec   ; 1FBh	; 0D
  7684 00000117 [F901]                  		dw bc_exvec   ; 1FBh	; 0E
  7685 00000119 [F901]                  		dw bc_exvec   ; 1FBh	; 0F
  7686 0000011B [8802]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  7687 0000011D [F901]                  		dw bc_exvec   ; 1FBh	; 11
  7688 0000011F [F901]                  		dw bc_exvec   ; 1FBh	; 12
  7689 00000121 [B602]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  7690 00000123 [F901]                  		dw bc_exvec   ; 1FBh	; 14
  7691 00000125 [F901]                  		dw bc_exvec   ; 1FBh	; 15
  7692 00000127 [F901]                  		dw bc_exvec   ; 1FBh	; 16
  7693 00000129 [F901]                  		dw bc_exvec   ; 1FBh	; 17
  7694 0000012B [F901]                  		dw bc_exvec   ; 1FBh	; 18
  7695 0000012D [EB02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  7696                                  prn_table_end:
  7697 0000012F 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  7698                                  					; 2C7h:130h = 70h:26A0h
  7699 00000130 [F901]                  		dw bc_exvec   ; 1FBh	; 00 - init
  7700 00000132 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7701 00000134 [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7702 00000136 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7703 00000138 [0603]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  7704 0000013A [2D03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  7705 0000013C [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7706 0000013E [6303]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  7707 00000140 [6A03]                  		dw aux_writ   ;	374h	; aux_writ
  7708 00000142 [6A03]                  		dw aux_writ   ;	374h	; 09
  7709 00000144 [4D03]                  		dw aux_wrst   ;	355h	; aux_wrst
  7710                                  aux_table_end:
  7711 00000146 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  7712                                  					; 2C7h:147h = 70h:26B7h
  7713 00000147 [F901]                  		dw bc_exvec   ; 1FBh	; 00
  7714 00000149 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7715 0000014B [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7716 0000014D [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7717 0000014F [2904]                  		dw tim_read   ;	435h	; tim_read
  7718 00000151 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7719 00000153 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7720 00000155 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7721 00000157 [D003]                  		dw tim_writ   ; 3DBh	; tim_writ
  7722 00000159 [D003]                  		dw tim_writ   ; 3DBh	; 09
  7723                                  tim_table_end:
  7724                                  
  7725                                  ; ---------------------------------------------------------------------------
  7726                                  
  7727                                  ;************************************************************************
  7728                                  ;*									*
  7729                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  7730                                  ;*									*
  7731                                  ;************************************************************************
  7732                                  
  7733                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  7734                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  7735 0000015B E306                    		jcxz	con_exit	; 19/10/2022
  7736                                  con_loop:				
  7737 0000015D E80500                  		call	chrin		; get char in al
  7738 00000160 AA                      		stosb			; store	char at	es:di
  7739 00000161 E2FA                    		loop	con_loop
  7740                                  con_exit:				
  7741 00000163 F8                      		clc
  7742 00000164 C3                      		retn
  7743                                  
  7744                                  ; =============== S U B	R O U T	I N E =======================================
  7745                                  
  7746                                  ;************************************************************************
  7747                                  ;*									*
  7748                                  ;*	chrin - input single char from keyboard into al			*
  7749                                  ;*									*
  7750                                  ;*	  we are going to issue extended keyboard function, if		*
  7751                                  ;*	  supported. the returning value of the extended keystroke	*
  7752                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  7753                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  7754                                  ;*	  this creates a conflict when the user entered real		*
  7755                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  7756                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  7757                                  ;*	  in the following manner:					*
  7758                                  ;*									*
  7759                                  ;*	      ah = 16h							*
  7760                                  ;*	      int 16h							*
  7761                                  ;*	      if al == 0, then extended code (in ah)			*
  7762                                  ;*	      else if al == 0E0h, then					*
  7763                                  ;*	      if ah <> 0, then extended code (in ah)			*
  7764                                  ;*		else greek_alpha character.				*
  7765                                  ;*									*
  7766                                  ;*	also, for compatibility reason, if an extended code is		*
  7767                                  ;*	  detected, then we are going to change the value in al		*
  7768                                  ;*	  from 0E0h to 00h.						*
  7769                                  ;*									*
  7770                                  ;************************************************************************
  7771                                  
  7772                                  		; 19/10/2022
  7773                                  chrin:		
  7774 00000165 8A26[E504]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  7775 00000169 30C0                    		xor	al, al
  7776 0000016B 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  7777 0000016F 08C0                    		or	al, al
  7778 00000171 752A                    		jnz	short keyret
  7779 00000173 CD16                    		int	16h		; KEYBOARD -
  7780 00000175 09C0                    		or	ax, ax
  7781 00000177 74EC                    		jz	short chrin
  7782 00000179 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7783 0000017C 7504                    		jnz	short alt_ext_chk
  7784 0000017E B010                    		mov	al, 10h
  7785 00000180 EB1B                    		jmp	short keyret
  7786                                  ; ---------------------------------------------------------------------------
  7787                                  
  7788                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  7789                                  ;    if character read was 0E0h then
  7790                                  ;      if extended byte was zero (i.e. ah == 0) then
  7791                                  ;	 goto keyret
  7792                                  ;      else
  7793                                  ;	 set al to zero
  7794                                  ;	 goto alt_save
  7795                                  ;      endif
  7796                                  ;    endif
  7797                                  ;  endif
  7798                                  
  7799                                  alt_ext_chk:
  7800 00000182 803E[E504]00            		cmp	byte [keyrd_func], 0
  7801 00000187 740C                    		jz	short not_ext
  7802 00000189 3CE0                    		cmp	al, 0E0h
  7803 0000018B 7508                    		jnz	short not_ext
  7804 0000018D 08E4                    		or	ah, ah
  7805 0000018F 740C                    		jz	short keyret
  7806 00000191 30C0                    		xor	al, al
  7807 00000193 EB04                    		jmp	short alt_save
  7808                                  ; ---------------------------------------------------------------------------
  7809                                  
  7810                                  not_ext:				
  7811 00000195 08C0                    		or	al, al		; special case?
  7812 00000197 7504                    		jnz	short keyret
  7813                                  alt_save:				
  7814 00000199 8826[0C00]              		mov	[altah], ah	; store	special	key
  7815                                  keyret:					
  7816 0000019D C3                      		retn
  7817                                  
  7818                                  ; ---------------------------------------------------------------------------
  7819                                  
  7820                                  ;************************************************************************
  7821                                  ;*									*
  7822                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  7823                                  ;*									*
  7824                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  7825                                  ;*	in the status word of the request packet, and there is no	*
  7826                                  ;*	character in the input buffer, the driver issues a system	*
  7827                                  ;*	wait request to the rom. on return from the rom, it returns	*
  7828                                  ;*	a 'char-not-found' to the dos.					*
  7829                                  ;*									*
  7830                                  ;************************************************************************
  7831                                  
  7832                                  		; 19/10/2022
  7833                                  con_rdnd:				
  7834 0000019E A0[0C00]                		mov	al, [altah]
  7835 000001A1 08C0                    		or	al, al
  7836 000001A3 754C                    		jnz	short rdexit
  7837 000001A5 8A26[E604]              		mov	ah, [keysts_func]
  7838 000001A9 CD16                    		int	16h		; KEYBOARD -
  7839 000001AB 751D                    		jnz	short gotchr
  7840 000001AD 803E[7900]00            		cmp	byte [fhavek09], 0
  7841 000001B2 7412                    		jz	short z_bus_exit
  7842 000001B4 C41E[1200]              		les	bx, [ptrsav]
  7843                                  		; 12/12/2022
  7844 000001B8 26F6470404              		test	byte [es:bx+4], 04h
  7845                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  7846 000001BD 7407                    		jz	short z_bus_exit
  7847 000001BF B80041                  		mov	ax, 4100h
  7848 000001C2 30DB                    		xor	bl, bl
  7849 000001C4 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  7850                                  					; AL = condition type, BH = condition compare or mask value
  7851                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  7852                                  					; DX = I/O port	address	if AL bit 4 set
  7853                                  z_bus_exit:				
  7854 000001C6 F9                      		stc			; 2C7h:1C8h = 70h:2738h
  7855 000001C7 B403                    		mov	ah, 3		; indicate busy	status
  7856 000001C9 C3                      		retn
  7857                                  ; ---------------------------------------------------------------------------
  7858                                  
  7859                                  gotchr:					
  7860 000001CA 09C0                    		or	ax, ax
  7861 000001CC 7508                    		jnz	short notbrk	; check	for null after break
  7862 000001CE 8A26[E504]              		mov	ah, [keyrd_func] ; issue keyboard read function
  7863 000001D2 CD16                    		int	16h		; KEYBOARD -
  7864 000001D4 EBC8                    		jmp	short con_rdnd	; get a	real status
  7865                                  ; ---------------------------------------------------------------------------
  7866                                  
  7867                                  notbrk:					
  7868 000001D6 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7869 000001D9 7504                    		jnz	short rd_ext_chk
  7870 000001DB B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  7871 000001DD EB12                    		jmp	short rdexit
  7872                                  ; ---------------------------------------------------------------------------
  7873                                  
  7874                                  rd_ext_chk:				
  7875 000001DF 803E[E504]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  7876 000001E4 740B                    		jz	short rdexit
  7877 000001E6 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  7878 000001E8 7507                    		jnz	short rdexit
  7879 000001EA 80FC00                  		cmp	ah, 0		; scan code exist?
  7880 000001ED 7402                    		jz	short rdexit	; yes. greek alpha char.
  7881 000001EF B000                    		mov	al, 0		; no. extended key stroke.
  7882                                  					; change it for	compatibility
  7883                                  rdexit:					
  7884 000001F1 C41E[1200]              		les	bx, [ptrsav]
  7885 000001F5 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  7886                                  					; return keyboard character here
  7887                                  bc_exvec:				
  7888 000001F9 F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7889                                  					; indicate normal termination
  7890 000001FA C3                      		retn
  7891                                  ; ---------------------------------------------------------------------------
  7892                                  
  7893                                  ;************************************************************************
  7894                                  ;*									*
  7895                                  ;*	con_write - console write routine				*
  7896                                  ;*									*
  7897                                  ;*	entry:	es:di -> buffer						*
  7898                                  ;*		cx    =  count						*
  7899                                  ;*									*
  7900                                  ;************************************************************************
  7901                                  
  7902                                  con_writ:
  7903                                  		;jcxz	short bc_exvec
  7904 000001FB E3FC                    		jcxz	bc_exvec	; 19/10/2022
  7905                                  		; 12/12/2022
  7906                                  		;jcxz	cc_ret
  7907                                  con_lp:					
  7908 000001FD 268A05                  		mov	al, [es:di]
  7909 00000200 47                      		inc	di
  7910 00000201 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  7911                                  					; AL = character to display
  7912 00000203 E2F8                    		loop	con_lp
  7913                                  cc_ret:					
  7914 00000205 F8                      		clc
  7915 00000206 C3                      		retn
  7916                                  
  7917                                  ; =============== S U B	R O U T	I N E =======================================
  7918                                  
  7919                                  ;************************************************************************
  7920                                  ;*									*
  7921                                  ;*	con_flush - flush out keyboard queue				*
  7922                                  ;*									*
  7923                                  ;************************************************************************
  7924                                  
  7925                                  con_flush:
  7926 00000207 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  7927                                  flloop:					; while	(charavail()) charread();	
  7928 0000020C B401                    		mov	ah, 1
  7929 0000020E CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  7930                                  					; Return: ZF clear if character	in buffer
  7931                                  					; AH = scan code, AL = character
  7932                                  					; ZF set if no character in buffer
  7933 00000210 74F3                    		jz	short cc_ret
  7934 00000212 30E4                    		xor	ah, ah
  7935 00000214 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  7936                                  					; Return: AH = scan code, AL = character
  7937 00000216 EBF4                    		jmp	short flloop
  7938                                  
  7939                                  ; ---------------------------------------------------------------------------
  7940                                  
  7941                                  ; 15/10/2022
  7942                                  
  7943                                  ;************************************************************************
  7944                                  ;*									*
  7945                                  ;*	some equates for rom bios printer i/o				*
  7946                                  ;*									*
  7947                                  ;************************************************************************
  7948                                  
  7949                                  ; ibm rom status bits (i don't trust them, neither should you)
  7950                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  7951                                  ; whole slew of bits, only one of which is correct.
  7952                                  
  7953                                  ;notbusystatus	equ 10000000b		; not busy
  7954                                  ;nopaperstatus	equ 00100000b		; no more paper
  7955                                  ;prnselected	equ 00010000b		; printer selected
  7956                                  ;ioerrstatus	equ 00001000b		; some kinda error
  7957                                  ;timeoutstatus	equ 00000001b		; time out.
  7958                                  ;
  7959                                  ;noprinter	equ 00110000b		; no printer attached
  7960                                  
  7961                                  ; 18/03/2019 - Retro DOS v4.0
  7962                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  7963                                  
  7964                                  ; ---------------------------------------------------------------------------
  7965                                  
  7966                                  ;************************************************************************
  7967                                  ;*									*
  7968                                  ;*	prn_input - return with no error but zero chars read		*
  7969                                  ;*									*
  7970                                  ;*	enter with cx = number of characters requested			*
  7971                                  ;*									*
  7972                                  ;************************************************************************
  7973                                  
  7974                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  7975 00000218 E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  7976                                  					; (sub reqpkt.count,cx)
  7977                                  		; 12/12/2022
  7978                                  prn_done:
  7979 0000021B F8                      		clc			; but return with carry	reset for no error
  7980 0000021C C3                      		retn
  7981                                  ; ---------------------------------------------------------------------------
  7982                                  
  7983                                  ;************************************************************************
  7984                                  ;*									*
  7985                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  7986                                  ;*									*
  7987                                  ;*	auxnum has printer number					*
  7988                                  ;*									*
  7989                                  ;************************************************************************
  7990                                  
  7991                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  7992                                  		;jcxz	short prn_done	; no chars to output
  7993 0000021D E3FC                    		jcxz	prn_done	; 19/10/2022
  7994                                  prn_loop:				
  7995 0000021F BB0200                  		mov	bx, 2		; retry	count
  7996                                  prn_out:				
  7997 00000222 E83600                  		call	prnstat		; get status
  7998 00000225 751D                    		jnz	short TestPrnError
  7999 00000227 268A05                  		mov	al, [es:di]	; get character	to print
  8000 0000022A 30E4                    		xor	ah, ah
  8001 0000022C E82E00                  		call	prnop		; print	to printer
  8002 0000022F 7419                    		jz	short prn_con	; no error - continue
  8003 00000231 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  8004 00000234 7509                    		jnz	short _prnwf
  8005 00000236 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  8006 00000238 C606[0C00]00            		mov	byte [altah], 0
  8007 0000023D EB08                    		jmp	short pmessg
  8008                                  ; ---------------------------------------------------------------------------
  8009                                  
  8010                                  _prnwf:					
  8011 0000023F F6C401                  		test	ah, 1		; timeoutstatus
  8012 00000242 7406                    		jz	short prn_con
  8013                                  TestPrnError:				
  8014 00000244 4B                      		dec	bx		; retry	until count is exhausted.
  8015 00000245 75DB                    		jnz	short prn_out
  8016                                  pmessg:					
  8017 00000247 E98DFE                  		jmp	bc_err_cnt
  8018                                  ; ---------------------------------------------------------------------------
  8019                                  
  8020                                  prn_con:				
  8021 0000024A 47                      		inc	di		; point	to next	char and continue
  8022 0000024B E2D2                    		loop	prn_loop
  8023                                  ;prn_done:				
  8024                                  		; 12/12/2022
  8025                                  prn_done2:
  8026                                  		;clc
  8027                                  		; cf=0
  8028 0000024D C3                      		retn
  8029                                  ; ---------------------------------------------------------------------------
  8030                                  
  8031                                  ;************************************************************************
  8032                                  ;*									*
  8033                                  ;*	prn_stat - device driver entry to return printer status		*
  8034                                  ;*									*
  8035                                  ;************************************************************************
  8036                                  
  8037                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  8038 0000024E E80A00                  		call	prnstat		; device in dx
  8039 00000251 75F4                    		jnz	short pmessg
  8040 00000253 F6C480                  		test	ah, 80h		; notbusystatus
  8041                                  		;jnz	short prn_done
  8042                                  		; 12/12/2022
  8043 00000256 75F5                    		jnz	short prn_done2 ; cf=0
  8044 00000258 E96BFF                  		jmp	z_bus_exit
  8045                                  ; ---------------------------------------------------------------------------
  8046                                  
  8047                                  ;************************************************************************
  8048                                  ;*									*
  8049                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  8050                                  ;*		 printer status. Return meaningful error code		*
  8051                                  ;*									*
  8052                                  ;************************************************************************
  8053                                  
  8054                                  prnstat:				
  8055 0000025B B402                    		mov	ah, 2		; set command for get status
  8056                                  					; PRINTER - GET	STATUS
  8057                                  					; DX = printer port (0-3)
  8058                                  					; Return: AH = status
  8059                                  
  8060                                  ; =============== S U B	R O U T	I N E =======================================
  8061                                  
  8062                                  ;************************************************************************
  8063                                  ;*									*
  8064                                  ;*	prnop - call ROM BIOS printer function in ah			*
  8065                                  ;*		return zero true if no error				*
  8066                                  ;*		return zero false if error, al = error code		*
  8067                                  ;*									*
  8068                                  ;************************************************************************
  8069                                  
  8070                                  prnop:	
  8071 0000025D 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  8072 00000261 CD17                    		int	17h
  8073                                  
  8074                                  	; This check was added to see if this is a case of no
  8075                                  	; printer being installed. This tests checks to be sure
  8076                                  	; the error is noprinter (30h)
  8077                                  
  8078 00000263 50                      		push	ax
  8079 00000264 80E430                  		and	ah, 30h
  8080 00000267 80FC30                  		cmp	ah, 30h		; noprinter
  8081 0000026A 58                      		pop	ax
  8082 0000026B 7506                    		jnz	short NextTest
  8083 0000026D 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  8084 00000270 80CC08                  		or	ah, 8		; ioerrstatus
  8085                                  
  8086                                  ; examine the status bits to see if an error occurred. unfortunately, several
  8087                                  ; of the bits are set so we have to pick and choose. we must be extremely
  8088                                  ; careful about breaking basic.
  8089                                  
  8090                                  NextTest:				
  8091 00000273 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  8092                                  					; i/o error?
  8093 00000276 740A                    		jz	short checknotready ; no, try not ready
  8094                                  
  8095                                  ; at this point, we know we have an error. the converse is not true
  8096                                  
  8097 00000278 B009                    		mov	al, 9		; error_I24_out_of_paper
  8098                                  					; first, assume	out of paper
  8099 0000027A F6C420                  		test	ah, 20h		; out of paper set?
  8100 0000027D 7502                    		jnz	short ret1	; yes, error is	set
  8101 0000027F FEC0                    		inc	al		; return al=10 (i/o error)
  8102                                  ret1:					
  8103 00000281 C3                      		retn
  8104                                  ; ---------------------------------------------------------------------------
  8105                                  
  8106                                  checknotready:				
  8107 00000282 B002                    		mov	al, 2		; assume not-ready
  8108 00000284 F6C401                  		test	ah, 1
  8109 00000287 C3                      		retn
  8110                                  
  8111                                  ; ---------------------------------------------------------------------------
  8112                                  
  8113                                  ;************************************************************************
  8114                                  ;*									*
  8115                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  8116                                  ;*		     this entry point should never block waiting for	*
  8117                                  ;*		     device to come ready.				*
  8118                                  ;*									*
  8119                                  ;*	inputs:	cx = count, es:di -> buffer				*
  8120                                  ;*	outputs: set the number of bytes transferred in the		*
  8121                                  ;*		 device driver request packet				*
  8122                                  ;*									*
  8123                                  ;************************************************************************
  8124                                  
  8125                                  		; 19/10/2022
  8126                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  8127 00000288 89FE                    		mov	si, di		; everything is	set for	lodsb
  8128                                  prn_tilbloop:				
  8129 0000028A 51                      		push	cx
  8130 0000028B 53                      		push	bx
  8131 0000028C 30FF                    		xor	bh, bh
  8132 0000028E 8A1E[E704]              		mov	bl, [printdev]
  8133 00000292 D1E3                    		shl	bx, 1
  8134                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  8135 00000294 8B8F[E804]              		mov	cx, [wait_count+bx]
  8136 00000298 5B                      		pop	bx
  8137                                  prn_getstat:				
  8138 00000299 E8BFFF                  		call	prnstat		; get status
  8139 0000029C 7514                    		jnz	short prn_bperr	; error
  8140 0000029E F6C480                  		test	ah, 80h		; ready	yet?
  8141 000002A1 E1F6                    		loope	prn_getstat	; no, go for more
  8142 000002A3 59                      		pop	cx		; get original count
  8143 000002A4 740D                    		jz	short prn_berr	; still	not ready => done
  8144 000002A6 26                      		es
  8145 000002A7 AC                      		lodsb
  8146                                  		;lods	byte ptr es:[si] ; es
  8147                                  					; lodsb
  8148 000002A8 30E4                    		xor	ah, ah
  8149 000002AA E8B0FF                  		call	prnop
  8150 000002AD 7504                    		jnz	short prn_berr	; error
  8151 000002AF E2D9                    		loop	prn_tilbloop
  8152                                  		; 12/12/2022
  8153                                  		; cf=0 (prnop)
  8154                                  		;clc			; normal no-error return
  8155 000002B1 C3                      		retn			;   from device driver
  8156                                  
  8157                                  ; ---------------------------------------------------------------------------
  8158                                  
  8159                                  prn_bperr:				
  8160 000002B2 59                      		pop	cx		; restore transfer count from stack
  8161                                  prn_berr:				
  8162 000002B3 E921FE                  		jmp	bc_err_cnt
  8163                                  ; ---------------------------------------------------------------------------
  8164                                  
  8165                                  ; 15/10/2022
  8166                                  
  8167                                  ;************************************************************************
  8168                                  ;*									*
  8169                                  ;*	prn_genioctl - get/set printer retry count			*
  8170                                  ;*									*
  8171                                  ;************************************************************************
  8172                                  
  8173                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8174                                  ; 11/01/2019
  8175                                  
  8176                                  ;********************************;*
  8177                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8178                                  ;********************************;*
  8179                                  
  8180                                  ;;RAWIO SUB-FUNCTIONS
  8181                                  ;;get_retry_count equ 65h
  8182                                  ;;set_retry_count equ 45h
  8183                                  
  8184                                  ;;struc A_RETRYCOUNT
  8185                                  ;;.rc_count: resw 1
  8186                                  ;;endstruc
  8187                                  
  8188                                  ;ioc_pc equ 5
  8189                                  
  8190                                  ; ---------------------------------------------------------------------------
  8191                                  
  8192                                  		; 19/10/2022
  8193                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8194 000002B6 C43E[1200]              		les	di, [ptrsav]
  8195 000002BA 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8196                                  					; ioc_pc
  8197 000002BF 7403                    		jz	short prnfunc_ok
  8198                                  
  8199                                  prnfuncerr:				
  8200 000002C1 E911FE                  		jmp	bc_cmderr
  8201                                  ; ---------------------------------------------------------------------------
  8202                                  
  8203                                  prnfunc_ok:				
  8204 000002C4 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8205 000002C8 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8206 000002CC 30FF                    		xor	bh, bh
  8207                                  		;mov	bl, ds:printdev	; get index into retry counts
  8208 000002CE 8A1E[E704]              		mov	bl, [printdev]
  8209 000002D2 D1E3                    		shl	bx, 1
  8210                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8211 000002D4 8B8F[E804]              		mov	cx, [wait_count+bx]
  8212 000002D8 3C65                    		cmp	al, 65h		; get_retry_count
  8213 000002DA 7407                    		jz	short prngetcount
  8214 000002DC 3C45                    		cmp	al, 45h		; set_retry_count
  8215 000002DE 75E1                    		jnz	short prnfuncerr
  8216 000002E0 268B0D                  		mov	cx, [es:di]
  8217                                  prngetcount:				
  8218                                  		;mov	ds:wait_count[bx], cx
  8219 000002E3 898F[E804]              		mov	[wait_count+bx], cx
  8220 000002E7 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8221                                  					; return current retry count
  8222                                  		; 12/12/2022
  8223                                  		; cf=0
  8224                                  		;clc
  8225 000002EA C3                      		retn
  8226                                  ; ---------------------------------------------------------------------------
  8227                                  
  8228                                  ;************************************************************************
  8229                                  ;*									*
  8230                                  ;*  prn_ioctl_query							*
  8231                                  ;*									*
  8232                                  ;*  Added for 5.00							*
  8233                                  ;************************************************************************
  8234                                  
  8235                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8236 000002EB C43E[1200]              		les	di, [ptrsav]
  8237 000002EF 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8238                                  					; ioc_pc
  8239 000002F4 750D                    		jnz	short prn_query_err
  8240 000002F6 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8241 000002FA 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8242 000002FC 7404                    		jz	short IOCtlSupported
  8243 000002FE 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8244 00000300 7501                    		jnz	short prn_query_err
  8245                                  IOCtlSupported:	
  8246                                  		; 12/12/2022
  8247                                  		; cf=0		
  8248                                  		;clc
  8249 00000302 C3                      		retn
  8250                                  ; ---------------------------------------------------------------------------
  8251                                  
  8252                                  prn_query_err:
  8253                                  		; 12/12/2022				
  8254                                  		;stc
  8255 00000303 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8256                                  ; ---------------------------------------------------------------------------
  8257                                  
  8258                                  ;************************************************************************
  8259                                  ;*									*
  8260                                  ;*	aux port driver code -- "aux" == "com1"				*
  8261                                  ;*									*
  8262                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8263                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8264                                  ;*									*
  8265                                  ;************************************************************************
  8266                                  
  8267                                  ;	values in ah, requesting function of int 14h in rom bios
  8268                                  
  8269                                  ;auxfunc_send	 equ	1	;transmit
  8270                                  ;auxfunc_receive equ	2	;read
  8271                                  ;auxfunc_status	 equ	3	;request status
  8272                                  
  8273                                  ;	error flags, reported by int 14h, reported in ah:
  8274                                  
  8275                                  ;flag_data_ready equ	01h	;data ready
  8276                                  ;flag_overrun	 equ	02h	;overrun error
  8277                                  ;flag_parity	 equ	04h	;parity error
  8278                                  ;flag_frame	 equ	08h	;framing error
  8279                                  ;flag_break	 equ	10h	;break detect
  8280                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8281                                  ;flag_timeout	 equ	80h	;timeout
  8282                                  
  8283                                  ;	these flags reported in al:
  8284                                  
  8285                                  ;flag_cts	 equ	10h	;clear to send
  8286                                  ;flag_dsr	 equ	20h	;data set ready
  8287                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8288                                  
  8289                                  ; ---------------------------------------------------------------------------
  8290                                  
  8291                                  ;************************************************************************
  8292                                  ;*									*
  8293                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8294                                  ;*		   at es:di						*
  8295                                  ;*									*
  8296                                  ;************************************************************************
  8297                                  
  8298                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8299                                  		;jcxz	short exvec2
  8300 00000306 E311                    		jcxz	exvec2		; 19/10/2022
  8301 00000308 E87700                  		call	getbx		; put address of auxbuf	in bx
  8302 0000030B 30C0                    		xor	al, al
  8303 0000030D 8607                    		xchg	al, [bx]
  8304 0000030F 08C0                    		or	al, al
  8305 00000311 7503                    		jnz	short aux2
  8306                                  aux1:					
  8307 00000313 E80500                  		call	auxin		; get character	from port
  8308                                  					; won't return if error
  8309                                  aux2:					
  8310 00000316 AA                      		stosb
  8311 00000317 E2FA                    		loop	aux1		; if more characters, go around	again
  8312                                  exvec2:					
  8313 00000319 F8                      		clc			; all done, successful exit
  8314                                  auxin_retn:	; 18/12/2022
  8315 0000031A C3                      		retn
  8316                                  ; ---------------------------------------------------------------------------
  8317                                  
  8318                                  ;************************************************************************
  8319                                  ;*									*
  8320                                  ;*	auxin - call rom bios to read character from aux port		*
  8321                                  ;*		if error occurs, map the error and return one		*
  8322                                  ;*		level up to device driver exit code, setting		*
  8323                                  ;*		the number of bytes transferred appropriately		*
  8324                                  ;*									*
  8325                                  ;************************************************************************
  8326                                  
  8327                                  auxin:					
  8328 0000031B B402                    		mov	ah, 2		; auxfunc_receive
  8329 0000031D E83C00                  		call	auxop
  8330 00000320 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8331                                  		;jnz	short arbad	; skip if any error bits set
  8332                                  		;retn
  8333                                  		; 25/06/2023 (BugFix)
  8334 00000323 74F5                    		jz	short auxin_retn
  8335                                  ; ---------------------------------------------------------------------------
  8336                                  
  8337                                  arbad:					
  8338 00000325 58                      		pop	ax		; remove return	address	(near call)
  8339 00000326 30C0                    		xor	al, al
  8340 00000328 0CB0                    		or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8341 0000032A E9AAFD                  		jmp	bc_err_cnt
  8342                                  
  8343                                  ; ---------------------------------------------------------------------------
  8344                                  
  8345                                  ;************************************************************************
  8346                                  ;*									*
  8347                                  ;*	aux_rdnd - non-destructive aux port read			*
  8348                                  ;*									*
  8349                                  ;************************************************************************
  8350                                  
  8351                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8352 0000032D E85200                  		call	getbx
  8353 00000330 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8354 00000332 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8355 00000334 7511                    		jnz	short auxdrx	; then return character
  8356 00000336 E82100                  		call	auxstat		; if not, get status of	aux device
  8357 00000339 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8358 0000033C 740C                    		jz	short auxbus	; then device is busy (not ready)
  8359 0000033E A820                    		test	al, 20h		; flag_dsr - test data set ready
  8360 00000340 7408                    		jz	short auxbus	; then device is busy (not ready)
  8361 00000342 E8D6FF                  		call	auxin		; else aux is ready, get character
  8362 00000345 8807                    		mov	[bx], al
  8363                                  auxdrx:					
  8364 00000347 E9A7FE                  		jmp	rdexit		; return busy status
  8365                                  ; ---------------------------------------------------------------------------
  8366                                  
  8367                                  auxbus:					
  8368 0000034A E979FE                  		jmp	z_bus_exit
  8369                                  ; ---------------------------------------------------------------------------
  8370                                  
  8371                                  ;************************************************************************
  8372                                  ;*									*
  8373                                  ;*	aux_wrst - return aux port write status				*
  8374                                  ;*									*
  8375                                  ;************************************************************************
  8376                                  
  8377                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8378 0000034D E80A00                  		call	auxstat		; get status of	aux in ax
  8379 00000350 A820                    		test	al, 20h		; test data set	ready
  8380 00000352 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8381 00000354 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8382 00000357 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8383                                  		; 12/12/2022
  8384                                  		; cf=0	; (test instruction resets cf)
  8385                                  		;clc
  8386 00000359 C3                      		retn
  8387                                  ; ---------------------------------------------------------------------------
  8388                                  
  8389                                  ;************************************************************************
  8390                                  ;*									*
  8391                                  ;*	auxstat - call rom bios to determine aux port status		*
  8392                                  ;*									*
  8393                                  ;*	exit:	ax = status						*
  8394                                  ;*		dx = [auxnum]						*
  8395                                  ;*									*
  8396                                  ;************************************************************************
  8397                                  
  8398                                  auxstat:				
  8399 0000035A B403                    		mov	ah, 3		; auxfunc_status
  8400                                  
  8401                                  		; fall into auxop
  8402                                  
  8403                                  ; =============== S U B	R O U T	I N E =======================================
  8404                                  
  8405                                  ;************************************************************************
  8406                                  ;*									*
  8407                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8408                                  ;*									*
  8409                                  ;*	entry:	ah = int 14h function number				*
  8410                                  ;*	exit:	ax = results						*
  8411                                  ;*		dx = [auxnum]						*
  8412                                  ;*									*
  8413                                  ;************************************************************************
  8414                                  
  8415                                  auxop:		; proc near		
  8416 0000035C 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8417                                  					; 0=init, 1=send, 2=receive, 3=status
  8418                                  					; get port number
  8419 00000360 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8420                                  					; DX = port number (0-3)
  8421                                  					; Return: AX = port status code
  8422 00000362 C3                      		retn
  8423                                  
  8424                                  ; ---------------------------------------------------------------------------
  8425                                  
  8426                                  ;************************************************************************
  8427                                  ;*									*
  8428                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8429                                  ;*		   auxbuf [auxnum] to zero				*
  8430                                  ;*									*
  8431                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8432                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8433                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8434                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8435                                  ;*									*
  8436                                  ;************************************************************************
  8437                                  
  8438                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8439 00000363 E81C00                  		call	getbx		; flush	aux input buffer
  8440 00000366 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8441                                  					; zero out buffer
  8442                                  		;clc			; all done, successful return
  8443                                  		; 12/12/2022
  8444                                  		; cf=0 ('add' instruction in 'getbx')
  8445 00000369 C3                      		retn
  8446                                  ; ---------------------------------------------------------------------------
  8447                                  
  8448                                  ;************************************************************************
  8449                                  ;*									*
  8450                                  ;*	aux_writ - write to aux device					*
  8451                                  ;*									*
  8452                                  ;************************************************************************
  8453                                  
  8454                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  8455                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  8456 0000036A E3AD                    		jcxz	exvec2		; 19/10/2022
  8457                                  aux_loop:				
  8458 0000036C 268A05                  		mov	al, [es:di]	; get character	to be written
  8459                                  					; move di pointer to next character
  8460 0000036F 47                      		inc	di
  8461 00000370 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  8462 00000372 E8E7FF                  		call	auxop		; send character over aux port
  8463 00000375 F6C480                  		test	ah, 80h		; check	for error
  8464 00000378 7405                    		jz	short awok	; then no error
  8465 0000037A B00A                    		mov	al, 10		; else indicate	write fault
  8466 0000037C E958FD                  		jmp	bc_err_cnt	; call error routines
  8467                                  ; ---------------------------------------------------------------------------
  8468                                  
  8469                                  awok:					
  8470 0000037F E2EB                    		loop	aux_loop	; if cx	is non-zero,
  8471                                  					; still	more character to print
  8472                                  		;clc			; all done, successful return
  8473                                  		; 12/12/2022
  8474                                  		; cf=0 (test instruction above)	
  8475 00000381 C3                      		retn
  8476                                  
  8477                                  ; =============== S U B	R O U T	I N E =======================================
  8478                                  
  8479                                  ;************************************************************************
  8480                                  ;*									*
  8481                                  ;*	getbx - return bx -> single byte input buffer for		*
  8482                                  ;*		selected aux port ([auxnum])				*
  8483                                  ;*									*
  8484                                  ;************************************************************************
  8485                                  
  8486                                  getbx:	
  8487 00000382 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  8488                                  					; for selected aux port	([auxnum])
  8489                                  		;add	bx, offset auxbuf
  8490 00000386 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  8491                                  		; 12/12/2022
  8492                                  		; cf=0 (if [uaxnum] is valid number) 
  8493 0000038A C3                      		retn
  8494                                  
  8495                                  ; ---------------------------------------------------------------------------
  8496                                  
  8497                                  ; 15/10/2022
  8498                                  
  8499                                  ;----------------------------------------------------------------
  8500                                  ;								:
  8501                                  ;		    clock device driver 			:
  8502                                  ;								:
  8503                                  ;								:
  8504                                  ;   this file contains the clock device driver. 		:
  8505                                  ;								:
  8506                                  ;   the routines in this files are:				:
  8507                                  ;								:
  8508                                  ;	routine 		function			:
  8509                                  ;	------- 		--------			:
  8510                                  ;	tim_writ		set the current time		:
  8511                                  ;	tim_read		read the current time		:
  8512                                  ;	time_to_ticks		convert time to corresponding	:
  8513                                  ;				  number of clock ticks 	:
  8514                                  ;								:
  8515                                  ; the clock ticks at the rate of:				:
  8516                                  ;								:
  8517                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  8518                                  ; see each routine for information on the use.			:
  8519                                  ;								:
  8520                                  ;----------------------------------------------------------------
  8521                                  
  8522                                  ; convert time to ticks
  8523                                  ; input : time in cx and dx
  8524                                  ; ticks returned in cx:dx
  8525                                  
  8526                                  ;19/07/2019
  8527                                  ;09/03/2019
  8528                                  
  8529                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  8530                                  
  8531                                  ; first convert from hour,min,sec,hund. to
  8532                                  ; total number of 100th of seconds
  8533                                  
  8534 0000038B B03C                    		mov	al, 60
  8535 0000038D F6E5                    		mul	ch		; hours	to minutes
  8536 0000038F B500                    		mov	ch, 0
  8537 00000391 01C8                    		add	ax, cx		; total	minutes
  8538 00000393 B97017                  		mov	cx, 6000	; 60*100
  8539 00000396 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  8540 00000398 F7E1                    		mul	cx		; convert to 1/100 sec
  8541 0000039A 89C1                    		mov	cx, ax
  8542 0000039C B064                    		mov	al, 100
  8543 0000039E F6E7                    		mul	bh		; convert seconds to 1/100 sec
  8544 000003A0 01C1                    		add	cx, ax		; combine seconds with hours and min
  8545 000003A2 83D200                  		adc	dx, 0		; ripple carry
  8546 000003A5 B700                    		mov	bh, 0
  8547 000003A7 01D9                    		add	cx, bx		; combine 1/100	sec
  8548 000003A9 83D200                  		adc	dx, 0
  8549                                  
  8550                                  	; dx:cx is time in 1/100 sec
  8551                                  
  8552 000003AC 92                      		xchg	ax, dx
  8553 000003AD 91                      		xchg	ax, cx		; now time is in cx:ax
  8554 000003AE BB0BE9                  		mov	bx, 59659
  8555 000003B1 F7E3                    		mul	bx		; multiply low half
  8556 000003B3 87D1                    		xchg	dx, cx
  8557 000003B5 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  8558 000003B6 F7E3                    		mul	bx		; multiply high	half
  8559 000003B8 01C8                    		add	ax, cx		; combine overlapping products
  8560 000003BA 83D200                  		adc	dx, 0
  8561 000003BD 92                      		xchg	ax, dx		; ax:dx=time*59659
  8562 000003BE BB0500                  		mov	bx, 5
  8563 000003C1 F6F3                    		div	bl		; divide high half by 5
  8564 000003C3 88C1                    		mov	cl, al
  8565 000003C5 B500                    		mov	ch, 0
  8566 000003C7 88E0                    		mov	al, ah		; remainder of divide-by-5
  8567 000003C9 98                      		cbw
  8568 000003CA 92                      		xchg	ax, dx		; use it to extend low half
  8569 000003CB F7F3                    		div	bx		; divide low half by 5
  8570 000003CD 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  8571 000003CF CB                      		retf			; far return
  8572                                  
  8573                                  ; ---------------------------------------------------------------------------
  8574                                  
  8575                                  ; 17/10/2022
  8576                                  ; 15/10/2022
  8577                                  
  8578                                  ;--------------------------------------------------------------------
  8579                                  ;
  8580                                  ; tim_writ sets the current time
  8581                                  ;
  8582                                  ; on entry es:[di] has the current time:
  8583                                  ;
  8584                                  ;	number of days since 1-1-80	(word)
  8585                                  ;	minutes (0-59)			(byte)
  8586                                  ;	hours (0-23)			(byte)
  8587                                  ;	hundredths of seconds (0-99)	(byte)
  8588                                  ;	seconds (0-59)			(byte)
  8589                                  ;
  8590                                  ; each number has been checked for the correct range.
  8591                                  ;
  8592                                  ;	NOTE: Any changes in this routine probably require corresponding
  8593                                  ;	changes in the version that is built with the power manager driver.
  8594                                  ;	See ptime.asm.
  8595                                  ;
  8596                                  ;--------------------------------------------------------------------
  8597                                  
  8598                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  8599 000003D0 268B05                  		mov	ax, [es:di]
  8600 000003D3 50                      		push	ax		; daycnt. we need to set this at the very
  8601                                  					; end to avoid tick windows.
  8602 000003D4 803E[F304]00            		cmp	byte [havecmosclock], 0
  8603                                  		;cmp	ds:havecmosclock, 0
  8604 000003D9 7426                    		jz	short no_cmos_1
  8605 000003DB 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  8606                                  					; get binary hours
  8607                                  					; convert to bcd
  8608 000003DF FF1E[0205]              		call	far [bintobcd]
  8609                                  		;call	ds:bintobcd	; call far [bintobcd]
  8610 000003E3 88C5                    		mov	ch, al		; ch = bcd hours
  8611 000003E5 268A4502                		mov	al, [es:di+2]	; get binary minutes
  8612 000003E9 FF1E[0205]              		call	far [bintobcd]
  8613                                  		;call	ds:bintobcd	; convert to bcd
  8614 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  8615 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  8616 000003F3 FF1E[0205]              		call	far [bintobcd]
  8617                                  		;call	ds:bintobcd
  8618 000003F7 88C6                    		mov	dh, al		; dh = bcd seconds
  8619 000003F9 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  8620 000003FB FA                      		cli
  8621 000003FC B403                    		mov	ah, 3
  8622 000003FE CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8623                                  					; CH = hours in	BCD, CL	= minutes in BCD
  8624                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  8625                                  					; Return: CMOS clock set
  8626 00000400 FB                      		sti
  8627                                  no_cmos_1:				
  8628 00000401 268B4D02                		mov	cx, [es:di+2]
  8629 00000405 268B5504                		mov	dx, [es:di+4]
  8630                                  		; 17/10/2022
  8631 00000409 FF1E[E206]              		call	far [ttticks]
  8632                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  8633                                  					; convert time to ticks
  8634                                  					; cx:dx	now has	time in	ticks
  8635 0000040D FA                      		cli			; turn off timer
  8636 0000040E B401                    		mov	ah, 1
  8637 00000410 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  8638                                  					; CX:DX	= clock	count
  8639                                  					; Return: time of day set
  8640                                  		;pop	ds:daycnt
  8641 00000412 8F06[F004]              		pop	word [daycnt]
  8642 00000416 FB                      		sti
  8643                                  		;cmp	ds:havecmosclock, 0
  8644 00000417 803E[F304]00            		cmp	byte [havecmosclock], 0
  8645 0000041C 740A                    		jz	short no_cmos_2
  8646 0000041E FF1E[0605]              		call	far [daycnttoday]
  8647                                  		;call	ds:daycnttoday	; call far [daycnttoday]
  8648                                  					; convert to bcd format
  8649 00000422 FA                      		cli
  8650 00000423 B405                    		mov	ah, 5
  8651 00000425 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8652                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  8653                                  					; CH = century (19h or 20h)
  8654                                  					; Return: CMOS clock set
  8655 00000427 FB                      		sti
  8656                                  no_cmos_2:
  8657                                  		; 12/12/2022
  8658                                  		; cf=0				
  8659                                  		;clc
  8660 00000428 C3                      		retn
  8661                                  
  8662                                  ; ---------------------------------------------------------------------------
  8663                                  
  8664                                  ; 15/10/2022
  8665                                  
  8666                                  ;----------------------------------------------------------------------------
  8667                                  ; gettime reads date and time
  8668                                  ; and returns the following information:
  8669                                  ;
  8670                                  ;	es:[di]  =count of days since 1-1-80
  8671                                  ;	es:[di+2]=hours
  8672                                  ;	es:[di+3]=minutes
  8673                                  ;	es:[di+4]=seconds
  8674                                  ;	es:[di+5]=hundredths of seconds
  8675                                  ;
  8676                                  ;	NOTE:  Any changes in this routine probably require corresponding
  8677                                  ;	changes in the version that is built with the power manager driver.
  8678                                  ;	See ptime.asm.
  8679                                  ;----------------------------------------------------------------------------
  8680                                  
  8681                                  tim_read:				; 2C7h:435h = 70h:29A5h
  8682 00000429 E84E00                  		call	GetTickCnt
  8683 0000042C 8B36[F004]              		mov	si, [daycnt]
  8684                                  
  8685                                  ; we now need to convert the time in tick to the time in 100th of
  8686                                  ; seconds. the relation between tick and seconds is:
  8687                                  ;
  8688                                  ;		 65,536 seconds
  8689                                  ;	       ----------------
  8690                                  ;		1,193,180 tick
  8691                                  ;
  8692                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  8693                                  ;
  8694                                  ;	ticks from clock  * 65,536 * 100
  8695                                  ;      --------------------------------- = time in 100th of seconds
  8696                                  ;		1,193,180
  8697                                  ;
  8698                                  ; fortunately this formula simplifies to:
  8699                                  ;
  8700                                  ;	ticks from clock * 5 * 65,536
  8701                                  ;      --------------------------------- = time in 100th of seconds
  8702                                  ;		59,659
  8703                                  ;
  8704                                  ; the calculation is done by first multipling tick by 5. next we divide by
  8705                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  8706                                  ; my 16 bits to the left.
  8707                                  ;
  8708                                  ; start with ticks in cx:dx
  8709                                  ; multiply by 5
  8710                                  
  8711 00000430 89C8                    		mov	ax, cx
  8712 00000432 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  8713                                  					; multiply by 5
  8714 00000434 D1E2                    		shl	dx, 1
  8715 00000436 D1D1                    		rcl	cx, 1		; times	2
  8716 00000438 D1E2                    		shl	dx, 1
  8717 0000043A D1D1                    		rcl	cx, 1		; times	4
  8718 0000043C 01DA                    		add	dx, bx
  8719 0000043E 11C8                    		adc	ax, cx		; times	5
  8720 00000440 92                      		xchg	ax, dx
  8721                                  
  8722                                  ; now have ticks * 5 in	dx:ax
  8723                                  ; we now need to multiply by 65536 and divide by 59659 d.
  8724                                  
  8725 00000441 B90BE9                  		mov	cx, 59659	; get divisor
  8726 00000444 F7F1                    		div	cx		; dx now has remainder
  8727                                  					; ax has high word of final quotient
  8728 00000446 89C3                    		mov	bx, ax		; put high word	in safe	place
  8729 00000448 31C0                    		xor	ax, ax		; this is the multiply by 65536
  8730 0000044A F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  8731                                  
  8732                                  ; rounding based on the	remainder may be added here
  8733                                  ; the result in	bx:ax is time in 1/100 second.
  8734                                  
  8735 0000044C 89DA                    		mov	dx, bx		
  8736 0000044E B9C800                  		mov	cx, 200		;extract 1/100's
  8737                                  
  8738                                  ; division by 200 is necessary to ensure no overflow--max result
  8739                                  ; is number of seconds in a day/2 = 43200.
  8740                                  
  8741 00000451 F7F1                    		div	cx
  8742 00000453 80FA64                  		cmp	dl, 100		; remainder over 100?
  8743 00000456 7203                    		jb	short noadj
  8744 00000458 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  8745                                  noadj:					
  8746 0000045B F5                      		cmc			; if we	subtracted 100,	carry is now set
  8747 0000045C 88D3                    		mov	bl, dl		; save 1/100's
  8748                                  
  8749                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  8750                                  ; by two, shifting a one in if the remainder had exceeded 100.
  8751                                  
  8752 0000045E D1D0                    		rcl	ax, 1		
  8753 00000460 B200                    		mov	dl, 0
  8754 00000462 D1D2                    		rcl	dx, 1
  8755 00000464 B93C00                  		mov	cx, 60		; divide out seconds
  8756 00000467 F7F1                    		div	cx
  8757 00000469 88D7                    		mov	bh, dl		; save the seconds
  8758 0000046B F6F1                    		div	cl		; break	into hours and minutes
  8759 0000046D 86C4                    		xchg	al, ah
  8760                                  
  8761                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  8762                                  
  8763 0000046F 50                      		push	ax
  8764 00000470 89F0                    		mov	ax, si		; daycnt
  8765 00000472 AB                      		stosw
  8766 00000473 58                      		pop	ax
  8767 00000474 AB                      		stosw
  8768 00000475 89D8                    		mov	ax, bx
  8769 00000477 AB                      		stosw
  8770 00000478 F8                      		clc
  8771 00000479 C3                      		retn
  8772                                  
  8773                                  ; =============== S U B	R O U T	I N E =======================================
  8774                                  
  8775                                  ; 15/10/2022
  8776                                  
  8777                                  ;----------------------------------------------------------------------------
  8778                                  ;
  8779                                  ; procedure : GetTickCnt
  8780                                  ;
  8781                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  8782                                  ;		of rollover [except when power management driver is in use]. 
  8783                                  ;		Uses the following logic for updating Daycnt
  8784                                  ;
  8785                                  ;		if ( rollover ) {
  8786                                  ;			if ( t_switch )
  8787                                  ;				daycnt++ ;
  8788                                  ;			else
  8789                                  ;				daycnt += rollover ;
  8790                                  ;		}
  8791                                  ;
  8792                                  ; USES : AX
  8793                                  ;
  8794                                  ; RETURNS : CX:DX - tick count
  8795                                  ; MODIFIES : daycnt
  8796                                  ;
  8797                                  ;----------------------------------------------------------------------------
  8798                                  
  8799                                  		; 17/10/2022
  8800                                  GetTickCnt:	
  8801 0000047A 30E4                    		xor	ah, ah
  8802 0000047C CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  8803                                  					; Return: CX:DX	= clock	count
  8804                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  8805                                  					; midnight
  8806                                  					; Otherwise, AL	> 0
  8807 0000047E 803E[F204]00            		cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  8808 00000483 7507                    		jnz	short inc_case	; old method assumes  that Int 1Ah returns rollover flag
  8809 00000485 30E4                    		xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  8810                                  					; and not flag
  8811 00000487 0106[F004]              		add	[daycnt], ax
  8812 0000048B C3                      		retn
  8813                                  ; ---------------------------------------------------------------------------
  8814                                  
  8815                                  inc_case:				
  8816 0000048C 08C0                    		or	al, al
  8817 0000048E 7404                    		jz	short no_rollover
  8818 00000490 FF06[F004]              		inc	word [daycnt]
  8819                                  no_rollover:				
  8820 00000494 C3                      		retn
  8821                                  
  8822                                  ;----------------------------------------------------------------------------
  8823                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  8824                                  ;----------------------------------------------------------------------------
  8825                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  8826                                  ; 09/03/2019 - Retro DOS v4.0
  8827                                  
  8828                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  8829                                  ; 26/05/2018 - Retro DOS v3.0
  8830                                  ; 23/03/2018 - Retro DOS v2.0
  8831                                  
  8832                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  8833                                  
  8834                                  ;struc BPB_TYPE
  8835                                  ;.SECSIZE:	resw 1
  8836                                  ;.SECALL:	resb 1
  8837                                  ;.RESNUM:	resw 1
  8838                                  ;.FATNUM:	resb 1
  8839                                  ;.DIRNUM:	resw 1
  8840                                  ;.SECNUM:	resw 1
  8841                                  ;.FATID:	resb 1
  8842                                  ;.FATSIZE:	resw 1
  8843                                  ;.SLIM:		resw 1
  8844                                  ;.HLIM:		resw 1
  8845                                  ;.HIDDEN:	resw 1
  8846                                  ;.size:
  8847                                  ;endstruc
  8848                                  
  8849                                  ;-----------------------------------------------------------------
  8850                                  ;	disk interface routines
  8851                                  ;-----------------------------------------------------------------
  8852                                  
  8853                                  ; device attribute bits:
  8854                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  8855                                  
  8856                                  ;MAXERR		equ	5
  8857                                  ;MAX_HD_FMT_ERR	equ	2
  8858                                  
  8859                                  ;LSTDRV	equ 504h
  8860                                  
  8861                                  ; some floppies do not have changeline. as a result, media-check would
  8862                                  ; normally return i-don't-know, the dos would continually reread the fat and
  8863                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  8864                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  8865                                  ; the time of the last successful disk operation and compare it with the current
  8866                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  8867                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  8868                                  ; since we cannot trust the timer to be always available, we record the number 
  8869                                  ; of media checks that have occurred when no apparent time has elapsed. while
  8870                                  ; this number is < a given threshold, we say no change. when it exceeds that
  8871                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  8872                                  ; the time of last successful access, if we see that time has passed too,
  8873                                  ; we reset the counter.
  8874                                  
  8875                                  accessmax	equ	5
  8876                                  
  8877                                  ; due to various bogosities, we need to continually adjust what the head
  8878                                  ; settle time is.  the following algorithm is used:
  8879                                  ;
  8880                                  ;   get the current head settle value.
  8881                                  ;   if it is 0, then
  8882                                  ;	set slow = 15
  8883                                  ;   else
  8884                                  ;	set slow = value
  8885                                  ;   ...
  8886                                  ;*********************************************
  8887                                  ;************ old algorithm ******************
  8888                                  ;*   if we are seeking and writing then
  8889                                  ;*	 use slow
  8890                                  ;*   else
  8891                                  ;*	 use fast
  8892                                  ;*********************************************
  8893                                  ;*********** ibm's requested logic ***********
  8894                                  ;   if we are seeking and writing and not on an at then
  8895                                  ;	use slow
  8896                                  ;   else
  8897                                  ;	use fast
  8898                                  ;   ...
  8899                                  ;   restore current head settle value
  8900                                  ;
  8901                                  ;
  8902                                  ;---------------------------------------
  8903                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  8904                                  					; it on after handling config.sys file as a
  8905                                  					; default value, if multrk_flag = multrk_off1.
  8906                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  8907                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  8908                                  
  8909                                  ; close data segment, open Bios_Code segment
  8910                                  
  8911                                  ; 15/10/2022
  8912                                  
  8913                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  8914                                  
  8915                                  ;-----------------------------------------------------------------
  8916                                  ;	command jump table
  8917                                  ;-----------------------------------------------------------------
  8918                                  
  8919 00000495 00                      		db 0
  8920                                  
  8921                                  ; 11/12/2022
  8922                                  %if 0
  8923                                  
  8924                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  8925                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  8926                                  		dw 1742h		; dsk_init
  8927                                  		dw 4EBh			; media_chk
  8928                                  		dw 592h			; get_bpb
  8929                                  		dw 0D5h			; bc_cmderr
  8930                                  		dw 857h			; dsk_read
  8931                                  		dw 83Dh			; x_bus_exit
  8932                                  		dw 558h			; ret_carry_clear
  8933                                  		dw 558h			; ret_carry_clear
  8934                                  		dw 849h			; dsk_writ
  8935                                  		dw 841h			; dsk_writv
  8936                                  		dw 558h			; ret_carry_clear
  8937                                  		dw 558h			; ret_carry_clear
  8938                                  		dw 0D5h			; bc_cmderr
  8939                                  		dw 80Ah			; dsk_open
  8940                                  		dw 81Ah			; dsk_close
  8941                                  		dw 831h			; dsk_rem
  8942                                  		dw 558h			; ret_carry_clear
  8943                                  		dw 558h			; ret_carry_clear
  8944                                  		dw 558h			; ret_carry_clear
  8945                                  		dw 0C6Bh		; do_generic_ioctl
  8946                                  		dw 558h			; ret_carry_clear
  8947                                  		dw 558h			; ret_carry_clear
  8948                                  		dw 558h			; ret_carry_clear
  8949                                  		dw 1124h		; ioctl_getown
  8950                                  		dw 1142h		; ioctl_setown
  8951                                  		dw 129Ah		; ioctl_support_query
  8952                                  
  8953                                  ;dtbl_siz equ $-dsktbl
  8954                                  
  8955                                  %endif
  8956                                  		; 11/12/2022
  8957 00000496 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  8958 00000497 [E816]                  		dw dsk_init
  8959 00000499 [DF04]                  		dw media_chk
  8960 0000049B [8505]                  		dw get_bpb
  8961 0000049D [D500]                  		dw bc_cmderr
  8962 0000049F [3608]                  		dw dsk_read
  8963 000004A1 [1C08]                  		dw x_bus_exit
  8964 000004A3 [4B05]                  		dw ret_carry_clear
  8965 000004A5 [4B05]                  		dw ret_carry_clear
  8966 000004A7 [2808]                  		dw dsk_writ
  8967 000004A9 [2008]                  		dw dsk_writv
  8968 000004AB [4B05]                  		dw ret_carry_clear
  8969 000004AD [4B05]                  		dw ret_carry_clear
  8970 000004AF [D500]                  		dw bc_cmderr
  8971 000004B1 [EC07]                  		dw dsk_open
  8972 000004B3 [FB07]                  		dw dsk_close
  8973 000004B5 [1108]                  		dw dsk_rem
  8974 000004B7 [4B05]                  		dw ret_carry_clear
  8975 000004B9 [4B05]                  		dw ret_carry_clear
  8976 000004BB [4B05]                  		dw ret_carry_clear
  8977 000004BD [450C]                  		dw do_generic_ioctl
  8978 000004BF [4B05]                  		dw ret_carry_clear
  8979 000004C1 [4B05]                  		dw ret_carry_clear
  8980 000004C3 [4B05]                  		dw ret_carry_clear
  8981 000004C5 [EB10]                  		dw ioctl_getown
  8982 000004C7 [0811]                  		dw ioctl_setown
  8983 000004C9 [5712]                  		dw ioctl_support_query
  8984                                  
  8985                                  dtbl_siz equ $-dsktbl
  8986                                  
  8987                                  ; =============== S U B	R O U T	I N E =======================================
  8988                                  
  8989                                  ; ---------------------------------------------------------------------------
  8990                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  8991                                  ; the one that belongs to the drive specified. carry is set if none exists
  8992                                  ; for the drive. Pointer is returned in es:[di]
  8993                                  ;
  8994                                  ;  AL contains the logical drive number.
  8995                                  ; ---------------------------------------------------------------------------
  8996                                  
  8997                                  SetDrive:	
  8998                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  8999 000004CB C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  9000                                  X_Scan_Loop:				
  9001 000004CF 26384505                		cmp	[es:di+5], al	
  9002 000004D3 7409                    		jz	short X_SetDrv
  9003 000004D5 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  9004 000004D8 83FFFF                  		cmp	di, 0FFFFh
  9005 000004DB 75F2                    		jnz	short X_Scan_Loop
  9006 000004DD F9                      		stc
  9007                                  X_SetDrv:				
  9008 000004DE C3                      		retn
  9009                                  
  9010                                  ; ---------------------------------------------------------------------------
  9011                                  
  9012                                  ; 15/10/2022
  9013                                  
  9014                                  ; ---------------------------------------------------------------------
  9015                                  ; if id is f9, have a 96tpi disk else
  9016                                  ; if bit 2 is 0 then media is not removable and could not have changed
  9017                                  ;  otherwise if within 2 secs of last disk operation media could not
  9018                                  ;    have changed, otherwise dont know if media has changed
  9019                                  ; ---------------------------------------------------------------------
  9020                                  
  9021                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  9022 000004DF E8E9FF                  		call	SetDrive
  9023 000004E2 BE0100                  		mov	si, 1
  9024 000004E5 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  9025                                  					; fchanged_by_format
  9026 000004EA 7416                    		jz	short WeAreNotFakingIt
  9027                                  		; 12/12/2022
  9028 000004EC 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  9029                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  9030                                  					; ~fchanged_by_format ;	reset flag
  9031 000004F1 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9032                                  					; Ensure that we ask the rom if media has changed
  9033 000004F6 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9034                                  					; fnon_removable
  9035 000004FB 740C                    		jz	short wehaveafloppy
  9036 000004FD BEFFFF                  		mov	si, 0FFFFh	; Indicate media changed
  9037 00000500 EB2C                    		jmp	short Media_Done ; Media_Done
  9038                                  ; ---------------------------------------------------------------------------
  9039                                  
  9040                                  WeAreNotFakingIt:
  9041                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  9042 00000502 26F6452301              		test	byte [es:di+23h], 1
  9043 00000507 7525                    		jnz	short Media_Done
  9044                                  wehaveafloppy:				
  9045 00000509 31F6                    		xor	si, si		; Presume "I don't know"
  9046                                  
  9047                                  		; If we have a floppy with changeline support, we ask the ROM
  9048                                  		; to determine if media has changed. We do not perform the
  9049                                  		; 2 second check for these drives.
  9050                                  
  9051 0000050B 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  9052 00000510 740A                    		jz	short mChk_NoChangeLine	; Brif not
  9053 00000512 E89E12                  		call	mediacheck	;  Call	into removable routine
  9054 00000515 7236                    		jb	short err_exitj
  9055 00000517 E8F613                  		call	haschange
  9056 0000051A 7512                    		jnz	short Media_Done
  9057                                  mChk_NoChangeLine:
  9058                                  		; If we come here, we have a floppy with no changeline support
  9059                                  			
  9060 0000051C BE0100                  		mov	si, 1		; Presume no change
  9061 0000051F A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  9062 00000522 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  9063                                  					; Is drive of last access the same?
  9064 00000526 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  9065 00000528 E82800                  		call	Check_Time_Of_Access
  9066 0000052B EB01                    		jmp	short Media_Done
  9067                                  ; ---------------------------------------------------------------------------
  9068                                  
  9069                                  Media_Unk:				
  9070 0000052D 4E                      		dec	si		; ; Return "I don't know"
  9071                                  
  9072                                  		; SI now contains the correct value for media change.
  9073                                  		; Clean up the left overs
  9074                                  Media_Done:	
  9075                                  		; 19/10/2022			
  9076 0000052E 06                      		push	es
  9077 0000052F C41E[1200]              		les	bx, [ptrsav]
  9078 00000533 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  9079 00000537 07                      		pop	es
  9080 00000538 09F6                    		or	si, si
  9081 0000053A 790F                    		jns	short ret_carry_clear ;	volidok
  9082 0000053C 803E[7700]00            		cmp	byte [fhave96], 0
  9083 00000541 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  9084 00000543 E85613                  		call	media_set_vid
  9085                                  mChk1_NoChangeLine:			
  9086 00000546 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9087                                  					; Make sure we ask rom for media check
  9088                                  ret_carry_clear:			
  9089 0000054B F8                      		clc			; volidok
  9090 0000054C C3                      		retn
  9091                                  ; ---------------------------------------------------------------------------
  9092                                  
  9093                                  err_exitj:				
  9094 0000054D E88006                  		call	maperror	; guaranteed to	set carry
  9095                                  ret81:					
  9096 00000550 B481                    		mov	ah, 81h		; return error status
  9097 00000552 C3                      		retn			; return with carry set
  9098                                  
  9099                                  ; =============== S U B	R O U T	I N E =======================================
  9100                                  
  9101                                  ; ---------------------------------------------------------------------------
  9102                                  ; perform a check on the time passed since the last access for this physical
  9103                                  ; drive.
  9104                                  ; we are accessing the same drive. if the time of last successful access was
  9105                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  9106                                  ; returns in si:
  9107                                  ;	0 - if time of last access was >= 2 seconds
  9108                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  9109                                  ; registers affected ax,cx,dx, flags.
  9110                                  ;
  9111                                  ;	assume es:di -> bds, ds->Bios_Data
  9112                                  ; ---------------------------------------------------------------------------
  9113                                  
  9114                                  		; 19/10/2022
  9115                                  Check_Time_Of_Access:
  9116 00000553 BE0100                  		mov	si, 1		; presume no change.
  9117 00000556 E821FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  9118 00000559 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  9119                                  					; get stored time
  9120 0000055D 29C2                    		sub	dx, ax
  9121 0000055F 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  9122 00000563 19C1                    		sbb	cx, ax
  9123 00000565 751A                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  9124 00000567 09D2                    		or	dx, dx		; time must pass
  9125 00000569 7511                    		jnz	short timepassed ; yes, examine max value
  9126 0000056B FE06[1D01]              		inc	byte [accesscount]
  9127 0000056F 803E[1D01]05            		cmp	byte [accesscount], 5 
  9128                                  					; if count is less than threshold, ok
  9129 00000574 720C                    		jb	short timecheck_ret
  9130 00000576 FE0E[1D01]              		dec	byte [accesscount] ; don't let the count wrap
  9131 0000057A EB05                    		jmp	short timecheck_unk ; "i don't know" if media changed
  9132                                  ; ---------------------------------------------------------------------------
  9133                                  
  9134                                  timepassed:				
  9135 0000057C 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  9136                                  					; min elapsed time? (2 seconds)
  9137 0000057F 7601                    		jbe	short timecheck_ret ; yes, presume no change
  9138                                  
  9139                                  		; everything indicates that we do not know what has happened.
  9140                                  timecheck_unk:				
  9141 00000581 4E                      		dec	si		; presume i don't know
  9142                                  timecheck_ret:				
  9143 00000582 C3                      		retn
  9144                                  
  9145                                  ; ---------------------------------------------------------------------------
  9146                                  ; 15/10/2022
  9147                                  Err_Exitj2:
  9148 00000583 EBC8                    		jmp	short err_exitj
  9149                                  
  9150                                  ; ---------------------------------------------------------------------------
  9151                                  
  9152                                  ; 15/10/2022
  9153                                  
  9154                                  ; ==========================================================================
  9155                                  ; Build a valid bpb for the disk in the drive.
  9156                                  ; ==========================================================================
  9157                                  
  9158                                  		; 19/10/2022
  9159                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9160 00000585 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9161 00000588 E840FF                  		call	SetDrive	; get the correct bds for the drive
  9162 0000058B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9163                                  					; fnon_removable
  9164 00000590 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9165                                  
  9166                                  		; let's set the default value for volid,vol_serial,
  9167                                  		; filesys_id in bds table
  9168                                  
  9169 00000592 E83700                  		call	clear_ids
  9170                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9171 00000595 C606[0A05]01            		mov	byte [set_id_flag], 1
  9172 0000059A E85A00                  		call	GetBp		; build	a bpb if necessary
  9173 0000059D 72B1                    		jb	short ret81
  9174                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9175 0000059F 803E[0A05]02            		cmp	byte [set_id_flag], 2
  9176                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9177 000005A4 C606[0A05]00            		mov	byte [set_id_flag], 0
  9178 000005A9 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9179                                  					; otherwise, conventional boot record
  9180                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9181 000005AB 803E[7700]00            		cmp	byte [fhave96], 0
  9182 000005B0 7403                    		jz	short already_gotbpb ; brif not
  9183 000005B2 E86113                  		call	set_volume_id
  9184                                  already_gotbpb:				
  9185 000005B5 83C706                  		add	di, 6		; BDS.BPB
  9186                                  					; return the bpb from the current bds
  9187                                  
  9188                                  ;		 fall into setptrsav, es:di -> result
  9189                                  
  9190                                  ; ---------------------------------------------------------------------------
  9191                                  
  9192                                  ; 15/10/2022
  9193                                  
  9194                                  ; ==========================================================================
  9195                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9196                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9197                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9198                                  ;It fails, for instance, when we install an external drive using driver.sys
  9199                                  ;because then the BDS segment is no longer Bios_Data. 
  9200                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9201                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9202                                  ;restored before returning to the caller.
  9203                                  ; ==========================================================================
  9204                                  
  9205                                  		; 19/10/2022
  9206                                  SetPtrSav:	; return point for dsk_init				
  9207 000005B8 8CC1                    		mov	cx, es		; save es
  9208                                  		;les	bx, ds:ptrsav
  9209 000005BA C41E[1200]              		les	bx, [ptrsav]
  9210 000005BE 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9211 000005C2 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9212 000005C6 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9213 000005CA F8                      		clc
  9214 000005CB C3                      		retn
  9215                                  
  9216                                  ; =============== S U B	R O U T	I N E =======================================
  9217                                  
  9218                                  ; 15/10/2022
  9219                                  
  9220                                  ; -----------------------------------------------------
  9221                                  ; clear ids in bds table. only applied for floppies.
  9222                                  ;input:  es:di -> bds table
  9223                                  ;	assumes ds: -> Bios_Data
  9224                                  ;output: volid set to "NO NAME    "
  9225                                  ;	 vol_serial set to 0.
  9226                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9227                                  ;	   depending on the flag fatsize in bds.
  9228                                  ;
  9229                                  ;	trashes si, cx
  9230                                  ; -----------------------------------------------------
  9231                                  
  9232                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9233                                  ;size_of_EXT_SYSTEM_ID equ 8
  9234                                  
  9235                                  clear_ids:		
  9236 000005CC 57                      		push	di
  9237 000005CD 31C9                    		xor	cx, cx		; no serial number
  9238 000005CF 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9239 000005D3 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9240                                  
  9241                                  		; BUGBUG - there's a lot in common here and with
  9242                                  		; mov_media_ids.. see if we can save some space by
  9243                                  		; merging them... jgl
  9244                                  
  9245                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9246                                  		; 10/12/2022
  9247 000005D7 B10B                    		mov	cl, 11 ; cx = 11		
  9248                                  
  9249                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9250 000005D9 BE[1D05]                		mov	si, vol_no_name	; 19/10/2022
  9251 000005DC 83C74B                  		add	di, 75		; BDS.volid
  9252 000005DF F3A4                    		rep movsb
  9253                                  		;test	byte [es:di+BDS.fatsiz], fbig
  9254 000005E1 26F6451F40              		test	byte [es:di+1Fh], 40h
  9255                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9256 000005E6 BE[1405]                		mov	si, fat_16_id	; 19/10/2022
  9257 000005E9 7503                    		jnz	short ci_bigfat
  9258                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9259 000005EB BE[0B05]                		mov	si, fat_12_id	 ; 19/10/2022
  9260                                  ci_bigfat:				
  9261                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9262                                  		; 10/12/2022
  9263 000005EE B108                    		mov	cl, 8 ; cx = 8 
  9264 000005F0 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9265                                  					; filesys_id field
  9266 000005F3 F3A4                    		rep movsb
  9267 000005F5 5F                      		pop	di		; restore bds pointer
  9268 000005F6 C3                      		retn
  9269                                  
  9270                                  ; =============== S U B	R O U T	I N E =======================================
  9271                                  
  9272                                  ; 15/10/2022
  9273                                  
  9274                                  ; ---------------------------------------------------------------------------
  9275                                  ;	getbp - return bpb from the drive specified by the bds.
  9276                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9277                                  ;	    note that we never come here for fixed disks.
  9278                                  ;	    for all other cases,
  9279                                  ;	      - it reads boot sector to pull out the bpb
  9280                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9281                                  ;		to get the fat id byte to build the bpb from there.
  9282                                  ;
  9283                                  ;   inputs:	es:di point to correct bds.
  9284                                  ;
  9285                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9286                                  ;		carry set, and al=7 if invalid disk.
  9287                                  ;		carry set and error code in al if other error.
  9288                                  ;		if failed to recognize the boot record, then will set the
  9289                                  ;		set_id_flag to 0.
  9290                                  ;		this routine will only work for a floppy diskette.
  9291                                  ;		     for a fixed disk, it will just return.
  9292                                  ;
  9293                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9294                                  ;	  segment definitions. It should be migrated towards.
  9295                                  ;	   now es:di has the bds, ds: has Bios_Data
  9296                                  ; ---------------------------------------------------------------------------
  9297                                  
  9298                                  GetBp:		; if returning fake bpb then return bpb as is.
  9299                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
  9300 000005F7 26F6452305              		test	byte [es:di+23h], 5
  9301 000005FC 7403                    		jz	short getbp1	; getbp1
  9302 000005FE E99500                  		jmp	getret_exit
  9303                                  ; ---------------------------------------------------------------------------
  9304                                  
  9305                                  getbp1:					
  9306 00000601 51                      		push	cx
  9307 00000602 52                      		push	dx
  9308 00000603 53                      		push	bx
  9309                                  
  9310                                  		; attempt to read in boot sector and determine bpb.
  9311                                  		; we assume that the 2.x and greater dos disks all
  9312                                  		; have a valid boot sector.
  9313                                  
  9314 00000604 E8A400                  		call	readbootsec
  9315 00000607 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9316 00000609 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9317 0000060B 7508                    		jnz	short dofatbpb
  9318 0000060D E8F000                  		call	movbpb		; move bpb into	registers
  9319 00000610 EB57                    		jmp	short Has1
  9320                                  ; ---------------------------------------------------------------------------
  9321                                  
  9322                                  getbp_err_ret_brdg:			
  9323 00000612 E98200                  		jmp	getbp_err_ret
  9324                                  ; ---------------------------------------------------------------------------
  9325                                  
  9326                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9327                                  		; and fill in bpb from there.
  9328                                  dofatbpb:				
  9329 00000615 E85401                  		call	readfat		; puts media descriptor	byte in	ah
  9330 00000618 72F8                    		jb	short getbp_err_ret_brdg
  9331                                  		;cmp	ds:fhave96, 0	;  changeline support available?
  9332 0000061A 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9333 0000061F 7403                    		jz	short bpb_nochangeline ; brif not
  9334 00000621 E88D12                  		call	hidensity	; may not return! May add sp, 2	and
  9335                                  					; jump to has1!!!!!! or	has720K
  9336                                  bpb_nochangeline:		; test for a valid 3.5" medium			
  9337 00000624 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9338                                  					; ffSmall
  9339 00000629 7515                    		jnz	short is_floppy
  9340 0000062B 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9341 0000062E 7571                    		jnz	short got_unknown_medium
  9342                                  Has720K:				
  9343                                  		;mov	bx, offset sm92 ; pointer to correct bpb
  9344 00000630 BB[DE04]                		mov	bx, sm92	; 19/10/2022
  9345                                  
  9346                                  		; es points to segment of bds. the following should be modified
  9347                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9348                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9349                                  
  9350                                  		; 10/12/2022
  9351                                  		;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9352                                  		; 21/12/2022
  9353 00000633 8A07                    		mov	al, [bx]
  9354 00000635 8B4F03                  		mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9355 00000638 8B5705                  		mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9356 0000063B 8B5F01                  		mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9357                                  		; 19/10/2022 - Temporary !
  9358                                  		;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9359                                  		;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9360                                  		;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9361                                  		;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]	
  9362                                  
  9363 0000063E EB29                    		jmp	short Has1
  9364                                  ; ---------------------------------------------------------------------------
  9365                                  
  9366                                  is_floppy:			; must be a 5.25" floppy if we come here
  9367 00000640 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9368 00000643 725C                    		jb	short got_unknown_medium
  9369 00000645 B001                    		mov	al, 1		; set number of	fat sectors
  9370 00000647 BB0840                  		mov	bx, 16392	; 64*256+8
  9371                                  					; set dir entries and sector max
  9372 0000064A B94001                  		mov	cx, 320		; 40*8
  9373                                  					; set size of drive
  9374 0000064D BA0101                  		mov	dx, 257		; 01*256+1
  9375                                  					; set head limit and sec/all unit
  9376 00000650 F6C402                  		test	ah, 2		; test for 8 or	9 sector
  9377 00000653 7507                    		jnz	short has8	; nz = has 8 sectors
  9378 00000655 FEC0                    		inc	al		; inc number of	fat sectors
  9379 00000657 FEC3                    		inc	bl		; inc sector max
  9380                                  		;add	cx, 40		; increase size	(to 360)
  9381                                  		; 18/12/2022
  9382 00000659 80C128                  		add	cl, 40
  9383                                  has8:					
  9384 0000065C F6C401                  		test	ah, 1		; test for 1 or	2 heads
  9385 0000065F 7408                    		jz	short Has1	; jz = 1 head
  9386 00000661 01C9                    		add	cx, cx		; double size of disk
  9387 00000663 B770                    		mov	bh, 112		; increase number of directory entries
  9388 00000665 FEC6                    		inc	dh		; inc sec/all unit
  9389 00000667 FEC2                    		inc	dl		; inc head limit
  9390                                  Has1:					
  9391 00000669 26887508                		mov	[es:di+8], dh	; [es:di+BDS.secperclus]
  9392 0000066D 26887D0C                		mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
  9393 00000671 26894D0E                		mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
  9394 00000675 26886510                		mov	[es:di+10h], ah	; [es:di+BDS.media]
  9395 00000679 26884511                		mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
  9396 0000067D 26885D13                		mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
  9397 00000681 26885515                		mov	[es:di+15h], dl	; [es:di+BDS.heads]
  9398                                  
  9399                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
  9400                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
  9401                                  		; to 0 since this code is for floppies
  9402                                  
  9403                                  		; 18/12/2022
  9404                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
  9405                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
  9406                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
  9407                                  		; 18/12/2022
  9408 00000685 29C9                    		sub	cx, cx
  9409 00000687 26894D19                		mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
  9410 0000068B 26894D17                		mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
  9411 0000068F 26894D1D                		mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
  9412                                  getret:					
  9413 00000693 5B                      		pop	bx
  9414 00000694 5A                      		pop	dx
  9415 00000695 59                      		pop	cx
  9416                                  getret_exit:				
  9417 00000696 C3                      		retn
  9418                                  ; ---------------------------------------------------------------------------
  9419                                  
  9420                                  getbp_err_ret:	; before doing anything else, set set_id_flag	to 0.			
  9421                                  		;mov	ds:set_id_flag,	0
  9422                                  		; 19/10/2022
  9423 00000697 C606[0A05]00            		mov	byte [set_id_flag], 0
  9424 0000069C E83105                  		call	maperror
  9425 0000069F EBF2                    		jmp	short getret
  9426                                  ; ---------------------------------------------------------------------------
  9427                                  
  9428                                  		; we have a 3.5" diskette for	which we cannot	build a	bpb.
  9429                                  		; we do	not assume any type of bpb for this medium.
  9430                                  
  9431                                  got_unknown_medium:			
  9432                                  		;mov	ds:set_id_flag,	0 
  9433 000006A1 C606[0A05]00            		mov	byte [set_id_flag], 0
  9434 000006A6 B007                    		mov	al, 7
  9435 000006A8 F9                      		stc
  9436 000006A9 EBE8                    		jmp	short getret
  9437                                  
  9438                                  ; =============== S U B	R O U T	I N E =======================================
  9439                                  
  9440                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
  9441                                  
  9442                                  ; ----------------------------------------------------------------
  9443                                  ; read in the boot sector. set carry if error in reading sector.
  9444                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
  9445                                  ;
  9446                                  ;	assumes es:di -> bds, ds-> Bios_Data
  9447                                  ; ----------------------------------------------------------------
  9448                                  
  9449                                  ; 10/03/2019 - Retro DOS v4.0
  9450                                  
  9451                                  readbootsec:	
  9452 000006AB B600                    		mov	dh, 0		; head 0
  9453 000006AD B90100                  		mov	cx, 1		; cylinder 0, sector 1
  9454 000006B0 E8C600                  		call	read_sector
  9455 000006B3 724A                    		jb	short err_ret
  9456 000006B5 31DB                    		xor	bx, bx		; assume valid boot sector
  9457                                  
  9458                                  		; put a sanity check for the boot sector in here to detect
  9459                                  		; boot sectors that do not have valid bpbs. we examine the
  9460                                  		; first two bytes - they must contain a long jump (69h) or a
  9461                                  		; short jump (EBh) followed by a nop (90h), or a short jump
  9462                                  		; (E9h). if this test is passed, we further check by examining
  9463                                  		; the signature at the end of the boot sector for the word
  9464                                  		; AA55h. if the signature is not present, we examine the media
  9465                                  		; descriptor byte to see if it is valid. for dos 3.3, this
  9466                                  		; logic is modified a little bit. we are not going to check
  9467                                  		; signature. instead we are going to sanity check the media
  9468                                  		; byte in bpb regardless of the validity of signature. this is
  9469                                  		; to save the already developed commercial products that have
  9470                                  		; good jump instruction and signature but with the false bpb
  9471                                  		; informations
  9472                                  
  9473                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
  9474                                  
  9475                                  		; 19/10/2022
  9476 000006B7 803E[4E01]69            		cmp	byte [disksector], 69h ; is it a direct jump?
  9477 000006BC 7415                    		jz	short check_bpb_mediabyte ; don't need to find a nop
  9478 000006BE 803E[4E01]E9            		cmp	byte [disksector], 0E9h ; dos 2.0 jump?
  9479 000006C3 740E                    		jz	short check_bpb_mediabyte ; no need for	nop
  9480 000006C5 803E[4E01]EB            		cmp	byte [disksector], 0EBh ; how about a short jump?
  9481 000006CA 7531                    		jnz	short invalidbootsec
  9482 000006CC 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
  9483 000006D1 752A                    		jnz	short invalidbootsec
  9484                                  
  9485                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9486                                  ;
  9487                                  ;; 10/03/2019
  9488                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
  9489                                  ;;
  9490                                  ;; Don't have to perform the following signature check since
  9491                                  ;; we need to check the media byte even with the good signatured diskette.
  9492                                  ;;
  9493                                  ;;check_signature:
  9494                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
  9495                                  ;;							 ; disk or 1.x media.
  9496                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
  9497                                  ;;					       ; may need some special handling
  9498                                  
  9499                                  ; check for non-ibm disks which do not have the signature AA55h at the
  9500                                  ; end of the boot sector, but still have a valid boot sector. this is done
  9501                                  ; by examining the media descriptor in the boot sector.
  9502                                  
  9503                                  		; 19/10/2022
  9504                                  check_bpb_mediabyte:			
  9505 000006D3 A0[6301]                		mov	al, [disksector+15h]
  9506                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9507 000006D6 24F0                    		and	al, 0F0h
  9508 000006D8 3CF0                    		cmp	al, 0F0h	; allow	for strange media
  9509 000006DA 7521                    		jnz	short invalidbootsec
  9510                                  
  9511                                  ; there were some (apparently a lot of them) diskettes that had been formatted
  9512                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
  9513                                  ; sectors. these are specifically diskettes that were formatted in drives
  9514                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
  9515                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
  9516                                  ; in dos. in order to support them, we have to introduce a "hack" that will
  9517                                  ; help our build bpb routine to recognise these specific cases, and to
  9518                                  ; set up out copy of the bpb accordingly.
  9519                                  ; we do this by checking to see if the boot sector is off a diskette that
  9520                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
  9521                                  ; sec/clus field to 1. if not, we carry on as normal.
  9522                                  
  9523                                  checksinglesided:
  9524 000006DC A0[6301]                		mov	al, [disksector+15h]
  9525 000006DF 3CF0                    		cmp	al, 0F0h
  9526 000006E1 741B                    		jz	short gooddsk
  9527 000006E3 A801                    		test	al, 1
  9528 000006E5 7517                    		jnz	short gooddsk
  9529 000006E7 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
  9530 000006ED 7507                    		jnz	short mustbeearlier
  9531 000006EF 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
  9532 000006F4 7308                    		jnb	short gooddsk
  9533                                  
  9534                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
  9535                                  
  9536                                  mustbeearlier:				
  9537 000006F6 C606[5B01]01            		mov	byte [disksector+0Dh], 1
  9538                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9539 000006FB EB01                    		jmp	short gooddsk
  9540                                  ; ---------------------------------------------------------------------------
  9541                                  
  9542                                  invalidbootsec:				
  9543 000006FD 43                      		inc	bx		; indicate that boot sector invalid
  9544                                  		; 10/12/2022
  9545                                  movbpb_ret:
  9546                                  gooddsk:				
  9547 000006FE F8                      		clc
  9548                                  err_ret:
  9549 000006FF C3                      		retn
  9550                                  ; ---------------------------------------------------------------------------
  9551                                  
  9552                                  		; 10/12/2022
  9553                                  ;err_ret:				
  9554                                  		;retn
  9555                                  
  9556                                  ; =============== S U B	R O U T	I N E =======================================
  9557                                  
  9558                                  ; 15/10/2022
  9559                                  ; ---------------------------------------------------------------------------
  9560                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
  9561                                  ; getbp routine at has1
  9562                                  ;
  9563                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
  9564                                  ; serial number, volume label, file system id in bds according to
  9565                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
  9566                                  ; to signal that volume label is set already from the extended boot record
  9567                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
  9568                                  ; the volume label in the root directory.)
  9569                                  ; ---------------------------------------------------------------------------
  9570                                  
  9571                                  ; 10/03/2019 - Retro DOS v4.0
  9572                                  
  9573                                  		; 19/10/2022
  9574                                  movbpb:	
  9575 00000700 8A36[5B01]              		mov	dh, [disksector+0Dh]
  9576                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9577                                  					; sectors per unit
  9578 00000704 8A3E[5F01]              		mov	bh, [disksector+11h]
  9579                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
  9580                                  					; number of directory entries
  9581 00000708 8B0E[6101]              		mov	cx, [disksector+13h]
  9582                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
  9583                                  					; size of drive
  9584 0000070C 8A26[6301]              		mov	ah, [disksector+15h]
  9585                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9586                                  					; media	descriptor
  9587 00000710 A0[6401]                		mov	al, [disksector+16h];
  9588                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
  9589                                  					; number of fat	sectors
  9590 00000713 8A1E[6601]              		mov	bl, [disksector+18h]
  9591                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
  9592                                  					; sectors per track
  9593 00000717 8A16[6801]              		mov	dl, [disksector+1Ah]
  9594                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
  9595                                  					; number of heads
  9596 0000071B 803E[0A05]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
  9597 00000720 75DC                    		jnz	short movbpb_ret
  9598 00000722 E81200                  		call	mov_media_ids
  9599 00000725 7205                    		jb	short movbpb_conv ; conventional boot record?
  9600 00000727 C606[0A05]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
  9601                                  movbpb_conv:				
  9602 0000072C 803E[7700]01            		cmp	byte [fhave96], 1
  9603 00000731 75CB                    		jnz	short movbpb_ret
  9604 00000733 E8D411                  		call	resetchanged	; reset	flags in bds to	not fchanged.
  9605                                  		; 10/12/2022
  9606                                  		; cf = 0
  9607                                  ;movbpb_ret:				
  9608                                  		;clc
  9609 00000736 C3                      		retn
  9610                                  
  9611                                  ; =============== S U B	R O U T	I N E =======================================
  9612                                  
  9613                                  ;copy the boot_serial number, volume id, and filesystem id from the
  9614                                  ;***extended boot record*** in ds:disksector to the bds table pointed
  9615                                  ;by es:di.
  9616                                  
  9617                                  ;in.) es:di -> bds
  9618                                  ;     ds:disksector = valid extended boot record.
  9619                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
  9620                                  ;      the boot record information.
  9621                                  ;     carry flag set if not an extended bpb.
  9622                                  ;     all registers saved except the flag.
  9623                                  
  9624                                  		; 19/10/2022
  9625                                  mov_media_ids:		
  9626 00000737 803E[7401]29            		cmp	byte [disksector+26h], 29h
  9627                                  					; [disksector+EXT_BOOT.SIG],
  9628                                  					; EXT_BOOT_SIGNATURE
  9629 0000073C 752C                    		jnz	short mmi_not_ext
  9630 0000073E 51                      		push	cx
  9631 0000073F 8B0E[7501]              		mov	cx, [disksector+27h]
  9632                                  					; [disksector+EXT_BOOT.SERIAL]
  9633 00000743 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9634 00000747 8B0E[7701]              		mov	cx, [disksector+29h]
  9635                                  					; [disksector+EXT_BOOT.SERIAL+2]
  9636 0000074B 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9637 0000074F 57                      		push	di
  9638 00000750 56                      		push	si
  9639 00000751 B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9640 00000754 BE[7901]                		mov	si, disksector+2Bh
  9641                                  		;mov	si, (offset disksector+2Bh) ;
  9642                                  					; disksector+EXT_BOOT.VOL_LABEL
  9643 00000757 83C74B                  		add	di, 75		; BDS.volid
  9644 0000075A F3A4                    		rep movsb
  9645                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9646                                  		; 10/12/2022
  9647 0000075C B108                    		mov	cl, 8 ; cx = 8
  9648 0000075E BE[8401]                		mov	si, disksector+36h
  9649                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
  9650 00000761 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9651 00000764 F3A4                    		rep movsb
  9652 00000766 5E                      		pop	si
  9653 00000767 5F                      		pop	di
  9654 00000768 59                      		pop	cx
  9655                                  		; 10/12/2022
  9656                                  		; cf = 0
  9657                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
  9658                                  				; (20/09/2022)
  9659 00000769 C3                      		retn
  9660                                  ; ---------------------------------------------------------------------------
  9661                                  
  9662                                  mmi_not_ext:				
  9663 0000076A F9                      		stc
  9664 0000076B C3                      		retn
  9665                                  
  9666                                  ; =============== S U B	R O U T	I N E =======================================
  9667                                  
  9668                                  ; 15/10/2022
  9669                                  ; --------------------------------------------------------------
  9670                                  ; read in the fat sector and get the media byte from it.
  9671                                  ; input : es:di -> bds
  9672                                  ; output:
  9673                                  ;	  carry set if an error occurs, ax contains error code.
  9674                                  ;	  otherwise, ah contains media byte on exit
  9675                                  ; --------------------------------------------------------------
  9676                                  
  9677                                  readfat:	
  9678                                  		;mov	dh, 0
  9679                                  		; 10/12/2022
  9680 0000076C 30F6                    		xor	dh, dh
  9681 0000076E B90200                  		mov	cx, 2		; head 0
  9682                                  					; cylinder 0, sector 2
  9683 00000771 E80500                  		call	read_sector
  9684 00000774 7202                    		jb	short bad_fat_ret
  9685 00000776 8A27                    		mov	ah, [bx]	; media	byte
  9686                                  bad_fat_ret:				
  9687 00000778 C3                      		retn
  9688                                  
  9689                                  ; =============== S U B	R O U T	I N E =======================================
  9690                                  
  9691                                  ; 15/10/2022
  9692                                  
  9693                                  ; ---------------------------------------------------------------------------
  9694                                  ; read a single sector into the temp buffer.
  9695                                  ; perform three retries in case of error.
  9696                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
  9697                                  ;		cx has sector and cylinder
  9698                                  ;		dh has head
  9699                                  ;		es:di has bds
  9700                                  ;		ds has Bios_Data
  9701                                  ;
  9702                                  ;   outputs:	carry clear
  9703                                  ;		    Bios_Data:bx point to sector
  9704                                  ;		       (note: some callers assume location of buffer)
  9705                                  ;
  9706                                  ;		carry set
  9707                                  ;		    ax has rom error code
  9708                                  ;
  9709                                  ; register bp is preserved.
  9710                                  ; ---------------------------------------------------------------------------
  9711                                  
  9712                                  ; 10/03/2019 - Retro DOS v4.0
  9713                                  
  9714                                  		; 19/10/2022
  9715                                  read_sector:	
  9716 00000779 55                      		push	bp
  9717 0000077A BD0300                  		mov	bp, 3		; make 3 attempts
  9718 0000077D 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
  9719 00000781 BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
  9720                                  rd_ret:					
  9721 00000784 06                      		push	es
  9722 00000785 1E                      		push	ds
  9723 00000786 07                      		pop	es
  9724 00000787 B80102                  		mov	ax, 201h
  9725 0000078A CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9726                                  					; AL = number of sectors to read, CH = track, CL = sector
  9727                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9728                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9729 0000078C 07                      		pop	es
  9730 0000078D 734A                    		jnb	short okret2
  9731                                  rd_rty:					
  9732 0000078F E87604                  		call	again		; reset	disk, decrement	bp, preserve ax
  9733 00000792 7442                    		jz	short err_rd_ret
  9734 00000794 26F6452301              		test	byte [es:di+23h], 1
  9735                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
  9736                                  					; fnon_removable
  9737 00000799 75E9                    		jnz	short rd_ret
  9738 0000079B 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9739 000007A0 7510                    		jnz	short rd_skip1_dpt
  9740 000007A2 50                      		push	ax
  9741 000007A3 1E                      		push	ds		; for retry, set the head settle time to 0Fh
  9742 000007A4 C536[2D01]              		lds	si, [dpt]
  9743                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9744                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
  9745                                  		;			; NORMSETTLE
  9746                                  		; 12/12/2022
  9747 000007A8 B00F                    		mov	al, 15
  9748 000007AA 864409                  		xchg	al, [si+9]
  9749                                  		; 
  9750 000007AD 1F                      		pop	ds
  9751 000007AE A2[2A01]                		mov	[save_head_sttl], al
  9752 000007B1 58                      		pop	ax
  9753                                  rd_skip1_dpt:				
  9754 000007B2 06                      		push	es
  9755 000007B3 1E                      		push	ds
  9756 000007B4 07                      		pop	es
  9757 000007B5 B80102                  		mov	ax, 201h
  9758 000007B8 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9759                                  					; AL = number of sectors to read, CH = track, CL = sector
  9760                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9761                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9762 000007BA 07                      		pop	es
  9763 000007BB 9C                      		pushf
  9764 000007BC 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9765 000007C1 750E                    		jnz	short rd_skip2_dpt
  9766 000007C3 50                      		push	ax
  9767 000007C4 A0[2A01]                		mov	al, [save_head_sttl]
  9768 000007C7 1E                      		push	ds
  9769 000007C8 C536[2D01]              		lds	si, [dpt]
  9770 000007CC 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9771 000007CF 1F                      		pop	ds
  9772 000007D0 58                      		pop	ax
  9773                                  rd_skip2_dpt:				
  9774 000007D1 9D                      		popf
  9775 000007D2 7305                    		jnb	short okret2
  9776 000007D4 EBB9                    		jmp	short rd_rty
  9777                                  ; ---------------------------------------------------------------------------
  9778                                  
  9779                                  err_rd_ret:				
  9780 000007D6 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
  9781                                  					; return error
  9782 000007D8 F9                      		stc
  9783                                  
  9784                                  ; update information pertaining to last drive accessed, time of access, last
  9785                                  ; track accessed in that drive.
  9786                                  
  9787                                  okret2:					
  9788 000007D9 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
  9789 000007DD 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
  9790 000007E1 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
  9791                                  					; save last track accessed on this drive
  9792                                  					; preserve flags in case error occurred
  9793 000007E5 9C                      		pushf
  9794 000007E6 E8FF03                  		call	set_tim
  9795 000007E9 9D                      		popf			; restore flags
  9796 000007EA 5D                      		pop	bp
  9797 000007EB C3                      		retn
  9798                                  
  9799                                  ;----------------------------------------------------------------------------
  9800                                  ;	disk open/close routines
  9801                                  ;----------------------------------------------------------------------------
  9802                                  
  9803                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
  9804 000007EC 803E[7700]00            		cmp	byte [fhave96], 0
  9805 000007F1 7407                    		jz	short dsk_open_exit ; done if no changeline support
  9806 000007F3 E8D5FC                  		call	SetDrive	; get bds for drive
  9807 000007F6 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
  9808                                  dsk_open_exit:	
  9809                                  		; 10/12/2022
  9810                                  		; cf = 0			
  9811                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9812                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9813 000007FA C3                      		retn
  9814                                  ; ---------------------------------------------------------------------------
  9815                                  
  9816                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
  9817 000007FB 803E[7700]00            		cmp	byte [fhave96], 0
  9818 00000800 740E                    		jz	short exitjx	; done if no changeline	support
  9819 00000802 E8C6FC                  		call	SetDrive	; get bds for drive
  9820 00000805 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
  9821 0000080A 7404                    		jz	short exitjx	; watch	out for	wrap
  9822 0000080C 26FF4D20                		dec	word [es:di+20h]
  9823                                  exitjx:					
  9824                                  		; 10/12/2022
  9825                                  		; cf = 0
  9826                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9827                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9828 00000810 C3                      		retn
  9829                                  
  9830                                  ;----------------------------------------------------------------------------
  9831                                  ;		disk removable routine
  9832                                  ;----------------------------------------------------------------------------
  9833                                  
  9834                                  		; al is	unit #
  9835                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
  9836 00000811 E8B7FC                  		call	SetDrive	; get bds for this drive
  9837                                  		;test	byte [es:di+BDS.flags], fnon_removable
  9838 00000814 26F6452301              		test	byte [es:di+23h], 1
  9839                                  		;jnz	short x_bus_exit ; non_rem
  9840 00000819 7501                    		jnz	short non_rem	; 15/10/2022
  9841                                  		; 10/12/2022
  9842                                  		; cf = 0
  9843                                  		;clc			; CF is already ZERO here
  9844                                  					; 15/10/2022
  9845 0000081B C3                      		retn
  9846                                  ; ---------------------------------------------------------------------------
  9847                                  
  9848                                  non_rem:
  9849                                  x_bus_exit:				
  9850 0000081C B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
  9851                                  					; return busy status
  9852 0000081E F9                      		stc
  9853                                  dsk_ret:				
  9854 0000081F C3                      		retn
  9855                                  
  9856                                  ;----------------------------------------------------------------------------
  9857                                  ;		disk i/o routines
  9858                                  ;----------------------------------------------------------------------------
  9859                                  
  9860                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
  9861                                  		;mov	word [wrtverify], 103h
  9862                                  		; 19/10/2022
  9863 00000820 C706[2001]0301          		mov	word [rflag], 103h
  9864                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
  9865 00000826 EB06                    		jmp	short dsk_cl
  9866                                  ; ---------------------------------------------------------------------------
  9867                                  
  9868                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
  9869                                  		;mov	word [wrtverify], 3
  9870                                  		; 19/10/2022
  9871 00000828 C706[2001]0300          		mov	word [rflag], 3
  9872                                  		;mov	word ptr ds:rflag, 3 ; romwrite
  9873                                  
  9874                                  dsk_cl:					
  9875 0000082E E89800                  		call	diskio		; romwrite
  9876                                  ; ---------------------------------------------------------------------------
  9877                                  
  9878                                  dsk_io:					
  9879 00000831 73EC                    		jnb	short dsk_ret
  9880 00000833 E9A1F8                  		jmp	bc_err_cnt
  9881                                  ; ---------------------------------------------------------------------------
  9882                                  
  9883                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
  9884 00000836 E88B00                  		call	diskrd
  9885 00000839 EBF6                    		jmp	short dsk_io
  9886                                  
  9887                                  ; =============== S U B	R O U T	I N E =======================================
  9888                                  
  9889                                  ; 15/10/2022
  9890                                  ; 10/03/2019 - Retro DOS v4.0
  9891                                  
  9892                                  ;-----------------------------------------------------------
  9893                                  ; miscellaneous odd jump routines. 
  9894                                  ; moved out of mainline for speed.
  9895                                  
  9896                                  ; if we have a system where we have virtual drives, we need 
  9897                                  ; to prompt the user to place the correct disk in the drive.
  9898                                  ;
  9899                                  ;	assume es:di -> bds, ds:->Bios_Data
  9900                                  ;-----------------------------------------------------------
  9901                                  
  9902                                  		; 19/10/2022
  9903                                  checksingle:		
  9904 0000083B 50                      		push	ax
  9905 0000083C 53                      		push	bx
  9906 0000083D 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
  9907                                  
  9908                                  ; if hard drive, cannot change disk.
  9909                                  ; if current owner of physical drive, no need to change diskette.
  9910                                  
  9911 00000841 F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
  9912 00000844 7573                    		jnz	short singleret
  9913 00000846 F6C310                  		test	bl, 10h		; fi_am_mult
  9914                                  					; is there a drive sharing this	physical drive?
  9915 00000849 746E                    		jz	short singleret
  9916                                  
  9917                                  
  9918                                  ; look for the previous owner of this physical drive
  9919                                  ; and reset its ownership flag.
  9920                                  
  9921 0000084B 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
  9922                                  					; get physical drive number
  9923 0000084F 06                      		push	es		; preserve pointer to current bds
  9924 00000850 57                      		push	di
  9925 00000851 C43E[1901]              		les	di, [start_bds] ; get first bds
  9926                                  scan_list:				
  9927 00000855 26384504                		cmp	[es:di+4], al
  9928 00000859 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
  9929 0000085B B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
  9930 0000085D 26845D23                		test	[es:di+23h], bl
  9931 00000861 744B                    		jz	short scan_skip	; he doesn't own it either. continue
  9932 00000863 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
  9933 00000867 5F                      		pop	di		; restore pointer to current bds
  9934 00000868 07                      		pop	es
  9935 00000869 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
  9936                                  
  9937                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
  9938                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
  9939                                  ; in this case.
  9940 0000086D 803E[7A00]01            		cmp	byte [fsetowner], 1
  9941 00000872 7517                    		jnz	short not_fsetowner
  9942                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
  9943 00000874 26807D0400              		cmp	byte [es:di+4], 0
  9944 00000879 753E                    		jnz	short singleret
  9945 0000087B 268A4505                		mov	al, [es:di+5]
  9946                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
  9947                                  					; get the DOS drive letter
  9948 0000087F 06                      		push	es
  9949 00000880 8E06[1A00]              		mov	es, [zeroseg]
  9950 00000884 26A20405                		mov	[es:LSTDRV], al
  9951                                  		;mov	es:504h, al	; [es:LSTDRV]
  9952                                  					; set up sdsb
  9953 00000888 07                      		pop	es		; restore bds pointer
  9954 00000889 EB2E                    		jmp	short singleret
  9955                                  ; ---------------------------------------------------------------------------
  9956                                  
  9957                                  ; to support "backward" compatibility with ibm's "single drive status byte"
  9958                                  ; we now check to see if we are in a single drive system and the application
  9959                                  ; has "cleverly" diddled the sdsb
  9960                                  
  9961                                  not_fsetowner:				
  9962 0000088B 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
  9963 00000890 7517                    		jnz	short ignore_sdsb
  9964 00000892 50                      		push	ax
  9965 00000893 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
  9966 00000897 88C4                    		mov	ah, al
  9967 00000899 06                      		push	es
  9968 0000089A 8E06[1A00]              		mov	es, [zeroseg]
  9969 0000089E 2686060405              		xchg	al, [es:LSTDRV]
  9970                                  		;xchg	al, es:504h	; [es:LSTDRV]
  9971                                  					; then swap(curr_drv,req_drv)
  9972 000008A3 07                      		pop	es
  9973 000008A4 38C4                    		cmp	ah, al		; else
  9974 000008A6 58                      		pop	ax		; swap(curr_drv,req_drv)
  9975 000008A7 7410                    		jz	short singleret	; issue	swap_dsk_msg
  9976                                  ignore_sdsb:				
  9977 000008A9 E8800E                  		call	swpdsk
  9978 000008AC EB0B                    		jmp	short singleret
  9979                                  ; ---------------------------------------------------------------------------
  9980                                  
  9981                                  scan_skip:	
  9982 000008AE 26C43D                  		les	di, [es:di]			
  9983                                  		;les	di, es:[di]	; [es:di+BDS.link]
  9984                                  					; go to	next bds
  9985 000008B1 83FFFF                  		cmp	di, 0FFFFh	; end of list?
  9986 000008B4 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
  9987 000008B6 F9                      		stc
  9988 000008B7 5F                      		pop	di		; restore current bds
  9989 000008B8 07                      		pop	es
  9990                                  
  9991                                  singleret:				
  9992 000008B9 5B                      		pop	bx
  9993 000008BA 58                      		pop	ax
  9994 000008BB C3                      		retn
  9995                                  
  9996                                  ; ---------------------------------------------------------------------------
  9997                                  
  9998                                  baddrive:				
  9999 000008BC B008                    		mov	al, 8		; sector not found
 10000 000008BE EB02                    		jmp	short baddrive_ret
 10001                                  ; ---------------------------------------------------------------------------
 10002                                  
 10003                                  unformatteddrive:				
 10004 000008C0 B007                    		mov	al, 7		; unknown media
 10005                                  baddrive_ret:				
 10006 000008C2 F9                      		stc
 10007                                  ; ---------------------------------------------------------------------------
 10008                                  
 10009                                  ioret:		
 10010 000008C3 C3                      		retn
 10011                                  
 10012                                  ; ---------------------------------------------------------------------------
 10013                                  
 10014                                  ; 15/10/52022
 10015                                  
 10016                                  ; ---------------------------------------------------------------------------
 10017                                  ;	disk i/o handler
 10018                                  ;
 10019                                  ;	al = drive number (0-6)
 10020                                  ;	ah = media descriptor
 10021                                  ;	cx = sector count
 10022                                  ;	dx = first sector (low)
 10023                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 10024                                  ;	ds = cs
 10025                                  ;	es:di = transfer address
 10026                                  ;	[rflag]=operation (2=read, 3=write)
 10027                                  ;	[verify]=1 for verify after write
 10028                                  ;
 10029                                  ;	if successful carry flag = 0
 10030                                  ;	  else cf=1 and al contains error code
 10031                                  ; ---------------------------------------------------------------------------
 10032                                  
 10033                                  diskrd:	
 10034                                  		;mov	ds:rflag, 2	; romread
 10035                                  		; 19/10/2022
 10036 000008C4 C606[2001]02            		mov	byte [rflag], 2 ; romread
 10037                                  
 10038                                  ; =============== S U B	R O U T	I N E =======================================
 10039                                  
 10040                                  		; 19/10/2022
 10041                                  diskio:
 10042 000008C9 89FB                    		mov	bx, di		; es:bx	= transfer address
 10043 000008CB 8C06[3705]              		mov	[xfer_seg], es	; save transfer	segment
 10044 000008CF E8F9FB                  		call	SetDrive
 10045 000008D2 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 10046 000008D6 A2[1F01]                		mov	[medbyt], al
 10047                                  		;jcxz	short ioret
 10048 000008D9 E3E8                    		jcxz	ioret
 10049                                  
 10050                                  ; see if the media is formatted or not by checking the flags field in
 10051                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 10052                                  ; go to the error exit at label unformatteddrive.
 10053                                  
 10054 000008DB 26F6452402              		test	byte [es:di+24h], 2
 10055                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 10056                                  					; unformatted_media
 10057 000008E0 75DE                    		jnz	short unformatteddrive
 10058 000008E2 890E[2201]              		mov	[seccnt], cx	; save sector count
 10059 000008E6 8926[3501]              		mov	[spsav], sp	; save sp
 10060                                  
 10061                                  ; ensure that we are trying to access valid sectors on the drive
 10062                                  
 10063 000008EA 89D0                    		mov	ax, dx
 10064 000008EC 31F6                    		xor	si, si
 10065 000008EE 01CA                    		add	dx, cx
 10066 000008F0 83D600                  		adc	si, 0
 10067 000008F3 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 10068                                  					; > 32 bit sector ?
 10069 000008F8 740D                    		jz	short sanity32
 10070 000008FA 83FE00                  		cmp	si, 0
 10071 000008FD 75BD                    		jnz	short baddrive
 10072 000008FF 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 10073 00000903 77B7                    		ja	short baddrive
 10074 00000905 EB12                    		jmp	short sanityok
 10075                                  ; ---------------------------------------------------------------------------
 10076                                  
 10077                                  sanity32:				
 10078 00000907 0336[2B05]              		add	si, [start_sec_h]
 10079 0000090B 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 10080 0000090F 7208                    		jb	short sanityok
 10081 00000911 77A9                    		ja	short baddrive
 10082 00000913 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 10083 00000917 77A3                    		ja	short baddrive
 10084                                  
 10085                                  sanityok:				
 10086 00000919 8B16[2B05]              		mov	dx, [start_sec_h]
 10087 0000091D 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 10088 00000921 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 10089                                  
 10090                                  ; now dx;ax have the physical first sector.
 10091                                  ; since the following procedures is going to destroy ax, let's
 10092                                  ; save it temporarily to saved_word.
 10093                                  
 10094 00000925 A3[2D05]                		mov	[saved_word], ax ; save the sector number (low)
 10095                                  
 10096                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 10097                                  ; will do it because we will skip the set up stuff with hard disks.
 10098                                  
 10099 00000928 06                      		push	es
 10100 00000929 8E06[1A00]              		mov	es, [zeroseg]
 10101 0000092D 26C4367800              		les	si, [es:DSKADR]
 10102                                  		;les	si, es:78h	; [es:DSKADR]
 10103                                  					; current disk parm table
 10104 00000932 8936[2D01]              		mov	[dpt], si
 10105 00000936 8C06[2F01]              		mov	[dpt+2], es
 10106 0000093A 07                      		pop	es
 10107 0000093B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10108                                  					; fnon_removable
 10109 00000940 7510                    		jnz	short skip_setup
 10110 00000942 E8F6FE                  		call	checksingle
 10111                                  
 10112                                  ; check to see if we have previously noted a change line. the routine
 10113                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 10114                                  ; the proper error code.
 10115                                  
 10116 00000945 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 10117 0000094A 7403                    		jz	short diskio_nochangeline ; brif not
 10118 0000094C E8AB0E                  		call	checklatchio	; will do a sneaky pop stack return
 10119                                  					; if a disk error occurs
 10120                                  diskio_nochangeline:			
 10121 0000094F E84700                  		call	iosetup		; set up tables	and variables for i/o
 10122                                  
 10123                                  ; now the settle values are correct for the following code
 10124                                  
 10125                                  skip_setup:
 10126                                  
 10127                                  ; 32 bit sector calculation.
 10128                                  ; dx:[saved_word] = starting sector number.
 10129                                  				
 10130 00000952 89D0                    		mov	ax, dx
 10131 00000954 31D2                    		xor	dx, dx
 10132 00000956 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10133                                  					 ; divide by sec per track
 10134 0000095A A3[2905]                		mov	[temp_h], ax
 10135 0000095D A1[2D05]                		mov	ax, [saved_word]
 10136 00000960 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10137                                  					; now, [temp_h]:ax = track #, dx = sector
 10138                                  		;inc	dl		; sector number	is 1 based.
 10139                                  		; 18/12/2022
 10140 00000964 42                      		inc	dx
 10141 00000965 8816[3101]              		mov	[cursec], dl	; save current sector
 10142 00000969 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 10143                                  					; get number of	heads
 10144 0000096D 50                      		push	ax
 10145 0000096E 31D2                    		xor	dx, dx
 10146 00000970 A1[2905]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 10147 00000973 F7F1                    		div	cx
 10148 00000975 A3[2905]                		mov	[temp_h], ax
 10149 00000978 58                      		pop	ax
 10150 00000979 F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10151 0000097B 833E[2905]00            		cmp	word [temp_h], 0
 10152 00000980 7714                    		ja	short baddrive_brdg
 10153 00000982 3D0004                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 10154 00000985 770F                    		ja	short baddrive_brdg
 10155 00000987 8816[3201]              		mov	[curhd], dl	; save current head
 10156 0000098B A3[3301]                		mov	[curtrk], ax	; save current track
 10157                                  
 10158                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10159                                  ; violations here. not true. we perform the operation as if everything is
 10160                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10161                                  
 10162 0000098E A1[2201]                		mov	ax, [seccnt]
 10163 00000991 E88400                  		call	block		; (cas - call/ret)
 10164                                  		;call	done
 10165                                  		;retn
 10166                                  		; 18/12/2022
 10167 00000994 EB4B                    		jmp	done
 10168                                  
 10169                                  ; ---------------------------------------------------------------------------
 10170                                  
 10171                                  baddrive_brdg:				
 10172 00000996 E923FF                  		jmp	baddrive
 10173                                  
 10174                                  ; =============== S U B	R O U T	I N E =======================================
 10175                                  
 10176                                  ;--------------------------------------------------------------
 10177                                  ; set the drive-last-accessed flag for diskette only. 
 10178                                  ; we know that the hard disk will not be removed.
 10179                                  ; es:di -> current bds.
 10180                                  ; ds -> Bios_Data
 10181                                  ; ax,cx,si are destroyed.
 10182                                  ;--------------------------------------------------------------
 10183                                  
 10184                                  		; 19/10/2022
 10185                                  iosetup:	
 10186 00000999 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10187 0000099D A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10188                                  
 10189                                  ; determine proper head settle values
 10190                                  
 10191 000009A0 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10192 000009A5 7539                    		jnz	short skip_dpt_setting
 10193 000009A7 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10194 000009AA 1E                      		push	ds
 10195 000009AB C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10196 000009AF 884404                  		mov	[si+4],	al
 10197 000009B2 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10198 000009B5 8A6404                  		mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10199 000009B8 1F                      		pop	ds
 10200 000009B9 A2[2601]                		mov	[motorstartup], al
 10201 000009BC 8826[2B01]              		mov	[save_eot], ah
 10202                                  
 10203                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10204                                  ; motor start time to 4. this checking for every i/o is going to affect
 10205                                  ; performance across the board, but is necessary!!
 10206                                  
 10207 000009C0 1E                      		push	ds
 10208 000009C1 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10209 000009C5 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10210                                  					; ffSmall
 10211 000009CA 7505                    		jnz	short motor_start_ok
 10212 000009CC B004                    		mov	al, 4
 10213 000009CE 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10214                                  motor_start_ok:
 10215                                  
 10216                                  ; ds:si now points to disk parameter table.
 10217                                  ; get current settle and set fast settle
 10218                                  				
 10219                                  		;xor	al, al
 10220                                  		;inc	al		; ibm wants fast settle	to be 1
 10221                                  		; 18/12/2022
 10222 000009D1 31C0                    		xor	ax, ax
 10223 000009D3 40                      		inc	ax
 10224 000009D4 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10225                                  					; get settle and set up	for fast
 10226 000009D7 1F                      		pop	ds
 10227 000009D8 A2[2701]                		mov	[settlecurrent], al
 10228 000009DB B00F                    		mov	al, 15		; NORMSETTLE
 10229                                  					; someone has diddled the settle
 10230 000009DD A2[2801]                		mov	[settleslow], al
 10231                                  skip_dpt_setting:			
 10232 000009E0 C3                      		retn
 10233                                  
 10234                                  ; =============== S U B	R O U T	I N E =======================================
 10235                                  
 10236                                  ;--------------------------------------------------------------
 10237                                  ; set time of last access, and reset default values in the dpt.
 10238                                  ;
 10239                                  ;	  note: trashes (at least) si
 10240                                  ;--------------------------------------------------------------
 10241                                  
 10242                                  		; 19/10/2022
 10243                                  done:
 10244 000009E1 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10245                                  					; fnon_removable
 10246 000009E6 752F                    		jnz	short ddbx	; do not set for non-removable media
 10247 000009E8 E8FD01                  		call	set_tim
 10248                                  ;diddleback:
 10249                                  ; 09/12/2022
 10250                                  diddle_back:				
 10251 000009EB 9C                      		pushf
 10252 000009EC 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10253 000009F1 7523                    		jnz	short nodiddleback
 10254 000009F3 50                      		push	ax
 10255 000009F4 06                      		push	es
 10256 000009F5 C436[2D01]              		les	si, [dpt]
 10257 000009F9 A0[2B01]                		mov	al, [save_eot]
 10258 000009FC 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10259 00000A00 A0[2701]                		mov	al, [settlecurrent]
 10260 00000A03 8A26[2601]              		mov	ah, [motorstartup]
 10261 00000A07 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10262 00000A0B 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10263 00000A10 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10264 00000A14 07                      		pop	es
 10265 00000A15 58                      		pop	ax
 10266                                  nodiddleback:				
 10267 00000A16 9D                      		popf
 10268                                  ddbx:					
 10269 00000A17 C3                      		retn
 10270                                  
 10271                                  ; =============== S U B	R O U T	I N E =======================================
 10272                                  
 10273                                  ;--------------------------------------------------------------
 10274                                  ;read the number of sectors specified in ax, 
 10275                                  ;handling track boundaries
 10276                                  ;es:di -> bds for this drive
 10277                                  ;--------------------------------------------------------------
 10278                                  
 10279                                  		 ; 19/10/2022
 10280                                  block:	
 10281 00000A18 09C0                    		or	ax, ax
 10282 00000A1A 74FB                    		jz	short ddbx
 10283 00000A1C 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10284                                  					; fnon_removable
 10285 00000A21 740D                    		jz	short block_floppy ;
 10286                                  
 10287                                  ; check	to see if multi	track operation	is allowed. if not
 10288                                  ; we have to go	to the block_floppy below to break up the operation.
 10289                                  
 10290 00000A23 F606[2F05]80            		test	byte [multrk_flag], 80h
 10291                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 10292 00000A28 7406                    		jz	short block_floppy
 10293 00000A2A E82900                  		call	Disk
 10294 00000A2D 31C0                    		xor	ax, ax
 10295 00000A2F C3                      		retn
 10296                                  ; ---------------------------------------------------------------------------
 10297                                  
 10298                                  block_floppy:
 10299                                  
 10300                                  ; read at most 1 track worth. perform minimization at sector / track
 10301                                  				
 10302 00000A30 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 10303 00000A34 FEC1                    		inc	cl
 10304 00000A36 2A0E[3101]              		sub	cl, [cursec]
 10305 00000A3A 30ED                    		xor	ch, ch
 10306 00000A3C 39C8                    		cmp	ax, cx
 10307 00000A3E 7302                    		jnb	short gotmin
 10308 00000A40 89C1                    		mov	cx, ax
 10309                                  
 10310                                  gotmin:
 10311                                  
 10312                                  ; ax is the requested number of sectors to read
 10313                                  ; cx is the number that we can do on this track
 10314                                  					
 10315 00000A42 50                      		push	ax
 10316 00000A43 51                      		push	cx
 10317 00000A44 89C8                    		mov	ax, cx
 10318 00000A46 E80D00                  		call	Disk
 10319 00000A49 59                      		pop	cx
 10320 00000A4A 58                      		pop	ax
 10321                                  
 10322                                  ; cx is the number of sectors just transferred
 10323                                  
 10324 00000A4B 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 10325 00000A4D D0E1                    		shl	cl, 1
 10326 00000A4F 00CF                    		add	bh, cl		; adjust transfer address
 10327 00000A51 EBC5                    		jmp	short block
 10328                                  dskerr_brdg:				
 10329 00000A53 E9EC00                  		jmp	dskerr
 10330                                  
 10331                                  ; =============== S U B	R O U T	I N E =======================================
 10332                                  
 10333                                  ; 15/10/2022
 10334                                  
 10335                                  ;--------------------------------------------------------------
 10336                                  ;perform disk i/o with retries
 10337                                  ; al = number of sectors (1-8, all on one track)
 10338                                  ; es:di point to drive parameters
 10339                                  ; xfer_seg:bx = transfer address 
 10340                                  ;		(must not cross a 64k physical boundary)
 10341                                  ; [rflag] = 2 if read, 3 if write
 10342                                  ; [verify] = 0 for normal, 1 for verify after write
 10343                                  ;--------------------------------------------------------------
 10344                                  
 10345                                  		 ; 19/10/2022
 10346                                  Disk:
 10347                                  
 10348                                  ; Check for hard disk format and
 10349                                  ; if TRUE then set max error count to 2
 10350                                  
 10351 00000A56 BD0500                  		mov	bp, 5		; MAXERR
 10352                                  					; set up retry count
 10353 00000A59 26F6452301              		test	byte [es:di+23h], 1	;
 10354                                  					; [es:di+BDS.flags], fnon_removable
 10355 00000A5E 7408                    		jz	short GetRdWrInd
 10356 00000A60 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 10357 00000A63 7403                    		jz	short GetRdWrInd
 10358 00000A65 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 10359                                  GetRdWrInd:				
 10360 00000A68 892E[3205]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 10361 00000A6C 892E[3405]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 10362 00000A70 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 10363                                  ;retry:
 10364                                  ; 09/12/2022
 10365                                  _retry:					
 10366 00000A74 50                      		push	ax
 10367 00000A75 8B16[3301]              		mov	dx, [curtrk]
 10368 00000A79 26F6452301              		test	byte [es:di+23h], 1
 10369 00000A7E 740B                    		jz	short disk_not_mini
 10370 00000A80 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 10371                                  					; is this a mini disk? ((logical dos partition))
 10372 00000A85 7504                    		jnz	short disk_not_mini ; no. continue to next.
 10373 00000A87 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 10374                                  					; add hidden trks.
 10375                                  disk_not_mini:				
 10376 00000A8B D0CE                    		ror	dh, 1
 10377 00000A8D D0CE                    		ror	dh, 1
 10378 00000A8F 0A36[3101]              		or	dh, [cursec]
 10379 00000A93 89D1                    		mov	cx, dx
 10380 00000A95 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 10381 00000A97 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 10382 00000A9B 268A5504                		mov	dl, [es:di+4]	; physical drive number
 10383                                  					; [es:di+BDS.drivenum]
 10384 00000A9F 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 10385 00000AA4 7413                    		jz	short do_fast	; hard files use fast speed
 10386                                  
 10387                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 10388                                  ; this helps when we have just done a reset disk operation and the head has
 10389                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 10390                                  
 10391 00000AA6 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 10392 00000AAB 740A                    		jz	short do_writej
 10393 00000AAD 80FC02                  		cmp	ah, 2		; romread
 10394 00000AB0 7407                    		jz	short do_fast
 10395 00000AB2 80FC04                  		cmp	ah, 4		; romverify
 10396 00000AB5 7402                    		jz	short do_fast
 10397                                  do_writej:	
 10398                                  
 10399                                  ; reads always fast, unless we have just done a disk reset operation
 10400                                  			
 10401 00000AB7 EB56                    		jmp	short do_write	; reads	always fast
 10402                                  ; ---------------------------------------------------------------------------
 10403                                  
 10404                                  do_fast:				
 10405 00000AB9 E8FC00                  		call	fastspeed	; change settle	mode
 10406                                  
 10407                                  testerr:				
 10408 00000ABC 7295                    		jb	short dskerr_brdg
 10409                                  
 10410                                  ; set drive and track of last access
 10411                                  
 10412 00000ABE 8816[7600]              		mov	[step_drv], dl
 10413 00000AC2 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10414                                  no_set:
 10415                                  		;cmp	word [wrtverify], 103h
 10416 00000AC6 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 10417 00000ACC 7452                    		jz	short doverify
 10418                                  noverify:				
 10419 00000ACE 58                      		pop	ax
 10420                                  
 10421                                  ; check the flags word in the bds to see if the drive is non removable
 10422                                  ; if not we needn't do anything special
 10423                                  ; if it is a hard disk then check to see if multi-track operation
 10424                                  ; is specified. if specified we don't have to calculate for the next
 10425                                  ; track since we are already done. so we can go to the exit of this routine.
 10426                                  
 10427 00000ACF 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10428                                  					; fnon_removable
 10429 00000AD4 7407                    		jz	short its_removable
 10430 00000AD6 F606[2F05]80            		test	byte [multrk_flag], 80h ; multrk_on
 10431 00000ADB 7530                    		jnz	short disk_ret
 10432                                  its_removable:				
 10433 00000ADD 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 10434 00000AE0 30E4                    		xor	ah, ah
 10435 00000AE2 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 10436 00000AE6 00C1                    		add	cl, al
 10437 00000AE8 880E[3101]              		mov	[cursec], cl
 10438 00000AEC 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 10439                                  					; see if sector/track limit reached
 10440 00000AF0 761B                    		jbe	short disk_ret
 10441 00000AF2 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 10442 00000AF7 8A36[3201]              		mov	dh, [curhd]
 10443 00000AFB FEC6                    		inc	dh
 10444 00000AFD 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 10445 00000B01 7206                    		jb	short noxor
 10446 00000B03 30F6                    		xor	dh, dh
 10447 00000B05 FF06[3301]              		inc	word [curtrk]
 10448                                  noxor:					
 10449 00000B09 8836[3201]              		mov	[curhd], dh
 10450                                  disk_ret:				
 10451 00000B0D F8                      		clc
 10452 00000B0E C3                      		retn
 10453                                  ; ---------------------------------------------------------------------------
 10454                                  
 10455                                  ; 15/10/2022
 10456                                  
 10457                                  ;--------------------------------------------------------------
 10458                                  ; the request is for write. determine if we are talking about
 10459                                  ; the same track and drive. if so, use the fast speed.
 10460                                  ;--------------------------------------------------------------
 10461                                  
 10462                                  do_write:				
 10463 00000B0F 3A16[7600]              		cmp	dl, [step_drv]
 10464 00000B13 7506                    		jnz	short do_norm	; we have changed drives
 10465 00000B15 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 10466 00000B19 749E                    		jz	short do_fast	; we are still on the same track
 10467                                  
 10468                                  do_norm:				
 10469 00000B1B E87500                  		call	normspeed
 10470 00000B1E EB9C                    		jmp	short testerr
 10471                                  ; ---------------------------------------------------------------------------
 10472                                  
 10473                                  ;--------------------------------------------------------------
 10474                                  ; we have a verify request also. get state info and go verify
 10475                                  ;--------------------------------------------------------------
 10476                                  
 10477                                  doverify:				
 10478 00000B20 58                      		pop	ax
 10479 00000B21 50                      		push	ax
 10480 00000B22 B404                    		mov	ah, 4
 10481 00000B24 E89100                  		call	fastspeed
 10482 00000B27 73A5                    		jnb	short noverify
 10483                                  
 10484                                  ; check the error returned in ah to see if it is a soft ecc error.
 10485                                  ; if it is not we needn't do anything special. if it is a soft
 10486                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 10487                                  ; this retry count becomes 0 then we just ignore the error and go to
 10488                                  ; no_verify but if we can still try then we call the routine to reset
 10489                                  ; the disk and go to dskerr1 to retry the operation.
 10490                                  
 10491 00000B29 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 10492 00000B2C 750B                    		jnz	short not_softecc_err
 10493 00000B2E FF0E[3405]              		dec	word [soft_ecc_cnt]
 10494 00000B32 749A                    		jz	short noverify	; no more retry
 10495 00000B34 E84405                  		call	ResetDisk	; reset	disk
 10496 00000B37 EB3E                    		jmp	short dskerr1	; retry
 10497                                  ; ---------------------------------------------------------------------------
 10498                                  
 10499                                  not_softecc_err:			; other error.			
 10500 00000B39 E83F05                  		call	ResetDisk
 10501 00000B3C FF0E[3205]              		dec	word [vretry_cnt]
 10502 00000B40 EB1C                    		jmp	short dskerr0
 10503                                  ; ---------------------------------------------------------------------------
 10504                                  
 10505                                  ;--------------------------------------------------------------
 10506                                  ; need to special case the change-line error ah=06h.
 10507                                  ; if we get this, we need to return it.
 10508                                  ;--------------------------------------------------------------
 10509                                  
 10510                                  dskerr:					
 10511 00000B42 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 10512 00000B47 7403                    		jz	short dskerr_nochangeline ; brif not
 10513 00000B49 E8220D                  		call	checkio
 10514                                  dskerr_nochangeline:			
 10515 00000B4C 803E[3605]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 10516 00000B51 7508                    		jnz	short dochkagain ; no more retry.
 10517 00000B53 BD0100                  		mov	bp, 1
 10518 00000B56 C606[3605]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 10519                                  dochkagain:				
 10520 00000B5B E8AA00                  		call	again
 10521                                  dskerr0:				
 10522 00000B5E 7420                    		jz	short harderr
 10523 00000B60 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10524                                  					; fnon_removable
 10525 00000B65 7505                    		jnz	short skip_timeout_chk
 10526 00000B67 80FC80                  		cmp	ah, 80h		; timeout?
 10527 00000B6A 7414                    		jz	short harderr
 10528                                  skip_timeout_chk:			
 10529 00000B6C 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 10530 00000B6F 740A                    		jz	short write_fault_err ;	then, don't retry.
 10531 00000B71 C706[3405]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 10532                                  					; set soft_ecc_cnt back	to maxerr
 10533                                  dskerr1:				
 10534 00000B77 58                      		pop	ax		; restore sector count
 10535                                  		;jmp	retry
 10536                                  		; 09/12/2022
 10537 00000B78 E9F9FE                  		jmp	_retry
 10538                                  ; ---------------------------------------------------------------------------
 10539                                  
 10540                                  write_fault_err:			
 10541 00000B7B BD0100                  		mov	bp, 1		; just retry only once
 10542                                  					; for write fault error.
 10543 00000B7E EBF7                    		jmp	short dskerr1
 10544                                  
 10545                                  		; fall into harderr
 10546                                  ; ---------------------------------------------------------------------------
 10547                                  
 10548                                  ; entry point for routines that call maperror themselves
 10549                                  
 10550                                  harderr:				
 10551 00000B80 E84D00                  		call	maperror
 10552                                  harderr2:				
 10553 00000B83 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 10554                                  					; force a media check through rom
 10555 00000B88 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 10556 00000B8C 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 10557                                  
 10558                                  ; since we are performing a non-local goto, restore the disk parameters
 10559                                  
 10560                                  		;jmp	diddleback
 10561                                  		; 09/12/2022
 10562 00000B90 E958FE                  		jmp	diddle_back
 10563                                  
 10564                                  ; =============== S U B	R O U T	I N E =======================================
 10565                                  
 10566                                  ; change settle value from settlecurrent to whatever is appropriate
 10567                                  ; note that this routine is never called for a fixed disk.
 10568                                  
 10569                                  		; 19/10/2022
 10570                                  normspeed:
 10571 00000B93 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10572 00000B98 751E                    		jnz	short fastspeed
 10573 00000B9A 06                      		push	es
 10574 00000B9B 50                      		push	ax
 10575 00000B9C A0[2801]                		mov	al, [settleslow]
 10576 00000B9F C436[2D01]              		les	si, [dpt]	; current disk parm table
 10577 00000BA3 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10578 00000BA7 58                      		pop	ax
 10579 00000BA8 07                      		pop	es
 10580 00000BA9 E80C00                  		call	fastspeed
 10581 00000BAC 06                      		push	es
 10582 00000BAD C436[2D01]              		les	si, [dpt]
 10583 00000BB1 26C6440901              		mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10584                                  					; 1 is fast settle value
 10585 00000BB6 07                      		pop	es
 10586 00000BB7 C3                      		retn
 10587                                  
 10588                                  ; =============== S U B	R O U T	I N E =======================================
 10589                                  
 10590                                  ; if the drive has been marked as too big (i.e. starting sector of the
 10591                                  ; partition is > 16 bits, then always return drive not ready.
 10592                                  
 10593                                  fastspeed:		
 10594 00000BB8 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 10595                                  					; ftoobig
 10596 00000BBD 750D                    		jnz	short notready
 10597 00000BBF 06                      		push	es
 10598 00000BC0 8E06[3705]              		mov	es, [xfer_seg]
 10599 00000BC4 CD13                    		int	13h		; DISK -
 10600 00000BC6 8C06[3705]              		mov	[xfer_seg], es
 10601 00000BCA 07                      		pop	es
 10602 00000BCB C3                      		retn
 10603                                  ; ---------------------------------------------------------------------------
 10604                                  
 10605                                  notready:				
 10606 00000BCC F9                      		stc
 10607 00000BCD B480                    		mov	ah, 80h
 10608 00000BCF C3                      		retn
 10609                                  
 10610                                  ; =============== S U B	R O U T	I N E =======================================
 10611                                  
 10612                                  ; map error returned by rom in ah into corresponding code to be returned to
 10613                                  ; dos in al. trashes di. guaranteed to set carry.
 10614                                  
 10615                                  maperror:	
 10616 00000BD0 51                      		push	cx
 10617 00000BD1 06                      		push	es
 10618 00000BD2 1E                      		push	ds		; set es=Bios_Data
 10619 00000BD3 07                      		pop	es
 10620 00000BD4 88E0                    		mov	al, ah		; put error code in al
 10621 00000BD6 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 10622 00000BD9 B90900                  		mov	cx, 9		; numerr (= errout-errin)
 10623                                  					; number of possible error conditions
 10624 00000BDC BF[3C01]                		mov	di, errin	; point to error conditions
 10625 00000BDF F2AE                    		repne scasb
 10626                                  		; 10/12/2022
 10627 00000BE1 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 10628                                  					; get translation
 10629                                  		; 19/10/2022 - Temporary ! 
 10630                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 10631 00000BE4 07                      		pop	es
 10632 00000BE5 59                      		pop	cx
 10633 00000BE6 F9                      		stc			; flag error condition
 10634 00000BE7 C3                      		retn
 10635                                  
 10636                                  ; =============== S U B	R O U T	I N E =======================================
 10637                                  
 10638                                  ; set the time of last access for this drive.
 10639                                  ; this is done only for removable media. es:di -> bds
 10640                                  
 10641                                  set_tim:		
 10642 00000BE8 50                      		push	ax
 10643 00000BE9 E88EF8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 10644                                  
 10645                                  ; we have the new time. if we see that the time has passed,
 10646                                  ; then we reset the threshold counter...
 10647                                  
 10648 00000BEC 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 10649 00000BF0 7506                    		jnz	short setaccess
 10650 00000BF2 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 10651                                  		;jz	short done_set
 10652                                  		; 12/12/2022
 10653 00000BF6 740E                    		je	short done_set2
 10654                                  setaccess:				
 10655 00000BF8 C606[1D01]00            		mov	byte [accesscount], 0
 10656 00000BFD 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 10657 00000C01 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 10658                                  done_set:				
 10659 00000C05 F8                      		clc
 10660                                  done_set2:		; 12/12/2022
 10661 00000C06 58                      		pop	ax
 10662 00000C07 C3                      		retn
 10663                                  
 10664                                  ; =============== S U B	R O U T	I N E =======================================
 10665                                  
 10666                                  ; this routine is called if an error occurs while formatting or verifying.
 10667                                  ; it resets the drive,and decrements the retry count.
 10668                                  ; on entry - ds:di - points to bds for the drive
 10669                                  ;	     bp    - contains retry count
 10670                                  ; on exit    flags indicate result of decrementing retry count
 10671                                  
 10672                                  again:	
 10673 00000C08 E87004                  		call	ResetDisk
 10674 00000C0B 80FC06                  		cmp	ah, 6
 10675 00000C0E 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 10676                                  					; do not decrement retry count.
 10677 00000C10 4D                      		dec	bp		; decrement retry count
 10678 00000C11 C3                      		retn
 10679                                  ; ---------------------------------------------------------------------------
 10680                                  
 10681                                  dont_dec_retry_count:			
 10682 00000C12 08E4                    		or	ah, ah
 10683 00000C14 C3                      		retn
 10684                                  
 10685                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 10686                                  
 10687                                  ;----------------------------------------------------------------------------
 10688                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 10689                                  ;----------------------------------------------------------------------------
 10690                                  ; 11/03/2019 - Retro DOS v4.0
 10691                                  
 10692                                  ; 18/03/2019
 10693                                  
 10694                                  ; ==========================================================================
 10695                                  ;
 10696                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 10697                                  ;
 10698                                  ;      This function is intended to give the user to control the
 10699                                  ;      bds table flags of unformatted_media bit.
 10700                                  ;      GetAccessFlag will show the status -
 10701                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 10702                                  ;						1 disk i/o allowed
 10703                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 10704                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 10705                                  ;						1 disallow disk i/o
 10706                                  ; ==========================================================================
 10707                                  
 10708                                  		; generic ioctl dispatch tables
 10709                                  
 10710                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 10711                                  
 10712                                  ; ---------------------------------------------------------------------------
 10713 00000C15 00                      		db 0
 10714                                  
 10715                                  ; 09/12/2022 
 10716                                  %if 0
 10717                                  
 10718                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 10719                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 10720                                  		dw 0EE8h	; 61h	; ReadTrack
 10721                                  		dw 0E86h	; 62h	; VerifyTrack
 10722                                  		dw 0CA3h	 	; Cmd_Error_Proc
 10723                                  		dw 0CA3h		; Cmd_Error_Proc
 10724                                  		dw 0CA3h		; Cmd_Error_Proc
 10725                                  		dw 119Ah	; 66h	; GetMediaId
 10726                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 10727                                  		dw 12C1h	; 68h	; SenseMediaType
 10728                                  
 10729                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 10730                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 10731                                  		dw 0EEFh	; 41h	; WriteTrack
 10732                                  		dw 0DC1h	; 42h	; FormatTrack
 10733                                  		dw 0CA3h		; Cmd_Error_Proc
 10734                                  		dw 0CA3h		; Cmd_Error_Proc
 10735                                  		dw 0CA3h		; Cmd_Error_Proc
 10736                                  		dw 11D2h	; 46h	; SetMediaId
 10737                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 10738                                  
 10739                                  %endif
 10740                                  
 10741                                  		; 09/12/2022
 10742 00000C16 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 10743 00000C17 [810C]                  		dw GetDeviceParameters	; 60h
 10744 00000C19 [BC0E]                  		dw ReadTrack		; 61h
 10745 00000C1B [5C0E]                  		dw VerifyTrack		; 62h
 10746 00000C1D [7D0C]                  		dw Cmd_Error_Proc
 10747 00000C1F [7D0C]                  		dw Cmd_Error_Proc
 10748 00000C21 [7D0C]                  		dw Cmd_Error_Proc
 10749 00000C23 [5D11]                  		dw GetMediaId		; 66h
 10750 00000C25 [2912]                  		dw GetAccessFlag	; 67h ; unpublished function
 10751 00000C27 [7B12]                  		dw SenseMediaType	; 68h
 10752                                  
 10753 00000C29 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 10754 00000C2A [CC0C]                  		dw SetDeviceParameters	; 40h
 10755 00000C2C [C30E]                  		dw WriteTrack		; 41h
 10756 00000C2E [970D]                  		dw FormatTrack		; 42h
 10757 00000C30 [7D0C]                  		dw Cmd_Error_Proc
 10758 00000C32 [7D0C]                  		dw Cmd_Error_Proc
 10759 00000C34 [7D0C]                  		dw Cmd_Error_Proc
 10760 00000C36 [9311]                  		dw SetMediaId		; 46h
 10761 00000C38 [3F12]                  		dw SetAccessFlag	; 47h ; unpublished function
 10762                                  
 10763                                  ; ==========================================================================
 10764                                  ; IOC_DC_Table
 10765                                  ;
 10766                                  ; This table contains all of the valid generic IOCtl Minor codes for
 10767                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 10768                                  ; Added for 5.00
 10769                                  ; ==========================================================================
 10770                                  
 10771 00000C3A 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 10772 00000C3B 40                      		db 40h			; SET_DEVICE_PARAMETERS
 10773 00000C3C 61                      		db 61h			; READ_TRACK
 10774 00000C3D 41                      		db 41h			; WRITE_TRACK
 10775 00000C3E 62                      		db 62h			; VERIFY_TRACK
 10776 00000C3F 42                      		db 42h			; FORMAT_TRACK
 10777 00000C40 66                      		db 66h			; GET_MEDIA_ID
 10778 00000C41 46                      		db 46h			; SET_MEDIA_ID
 10779 00000C42 67                      		db 67h			; GET_ACCESS_FLAG
 10780 00000C43 47                      		db 47h			; SET_ACCESS_FLAG
 10781 00000C44 68                      		db 68h			; SENSE_MEDIA_TYPE
 10782                                  
 10783                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 10784                                  
 10785                                  ; ---------------------------------------------------------------------------
 10786                                  
 10787                                  ; 16/10/2022
 10788                                  
 10789                                  ; ==========================================================================
 10790                                  ; Do_Generic_IOCtl: perform generic ioctl request
 10791                                  ;
 10792                                  ;    input: AL contains logical drive
 10793                                  ;
 10794                                  ;	functions are dispatched through a call. On return, carry indicates
 10795                                  ;	error code in al. Note::bES:b& ds undefined on return from
 10796                                  ;	subfunctions.
 10797                                  ;
 10798                                  ; ==========================================================================
 10799                                  
 10800                                  ; 11/03/2019
 10801                                  		; 19/10/2022
 10802                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 10803 00000C45 E883F8                  		call	SetDrive	; ES:DI	Points to bds for drive
 10804 00000C48 06                      		push	es
 10805 00000C49 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 10806 00000C4D 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 10807                                  					; RAWIO
 10808 00000C52 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 10809 00000C56 07                      		pop	es
 10810 00000C57 7525                    		jnz	short IoctlFuncErr
 10811                                  
 10812                                  		; cas note: Could do the above two blocks in reverse order.
 10813                                  		; Would have to preserve al for SetDrive
 10814                                  
 10815                                  		; 10/12/2022
 10816 00000C59 BE[160C]                		mov	si, IoReadJumpTable
 10817                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 10818                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 10819 00000C5C A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 10820 00000C5E 7503                    		jnz	short NotGenericWrite ; function is a read.
 10821                                  		; 10/12/2022
 10822 00000C60 BE[290C]                		mov	si, IoWriteJumpTable
 10823                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 10824                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 10825                                  NotGenericWrite:			
 10826 00000C63 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 10827 00000C65 2C40                    		sub	al, 40h		; offset for base function
 10828 00000C67 2E3A04                  		cmp	al, [cs:si]
 10829 00000C6A 7712                    		ja	short IoctlFuncErr
 10830 00000C6C 98                      		cbw
 10831 00000C6D D1E0                    		shl	ax, 1
 10832 00000C6F 46                      		inc	si
 10833 00000C70 01C6                    		add	si, ax
 10834 00000C72 2EFF14                  		call	near [cs:si]
 10835                                  		;call	word ptr cs:[si]
 10836 00000C75 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10837                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10838                                  					; 2C7h:30h = 70h:25A0h
 10839 00000C7A B481                    		mov	ah, 81h		; Return this status in	case of	carry
 10840 00000C7C C3                      		retn			; Pass carry flag through to exit code
 10841                                  ; ---------------------------------------------------------------------------
 10842                                  
 10843                                  		; Cmd_Error_Proc is called as a procedure and also use
 10844                                  		; as a fall through from above
 10845                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 10846 00000C7D 5A                      		pop	dx
 10847                                  
 10848                                  IoctlFuncErr:				
 10849 00000C7E E954F4                  		jmp	bc_cmderr
 10850                                  ; ---------------------------------------------------------------------------
 10851                                  
 10852                                  ; 16/10/2022
 10853                                  
 10854                                  ; ==========================================================================
 10855                                  ;**	GetDeviceParameters:
 10856                                  ;
 10857                                  ;	GetDeviceParameters implements the generic ioctl function:
 10858                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 10859                                  ;
 10860                                  ;	ENTRY	(ES:di) = BDS for drive
 10861                                  ;		PtrSav = long pointer to request header
 10862                                  ;	EXIT	??? BUGBUG
 10863                                  ;	USES	??? BUGBUG
 10864                                  ; ==========================================================================
 10865                                  
 10866                                  		; 19/10/2022
 10867                                  GetDeviceParameters:
 10868                                  		; Copy info from bds to the device parameters packet
 10869                                  
 10870 00000C81 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10871 00000C85 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10872                                  					; (DS:BX) = return buffer
 10873 00000C88 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 10874 00000C8C 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10875 00000C8F 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 10876 00000C93 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 10877                                  					; Mask off other bits
 10878 00000C96 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10879 00000C99 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 10880 00000C9D 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10881 00000CA0 30C0                    		xor	al, al		; Set media type to default
 10882 00000CA2 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 10883                                  					
 10884                                  		; copy recommended bpb
 10885 00000CA5 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 10886 00000CA8 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10887                                  					; BUILD_DEVICE_BPB
 10888 00000CAB 7412                    		jz	short UseBpbPresent
 10889 00000CAD 1E                      		push	ds		; Save request packet segment
 10890 00000CAE 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10891                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10892                                  					; 2C7h:30h = 70h:25A0h
 10893                                  					; Point back to Bios_Data
 10894 00000CB3 E885FB                  		call	checksingle
 10895 00000CB6 E83EF9                  		call	GetBp		; Build	the bpb	from scratch
 10896 00000CB9 1F                      		pop	ds		; Restore request packet segment
 10897 00000CBA 720F                    		jb	short GetParmRet
 10898 00000CBC 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 10899                                  					; Use this subfield of bds instead
 10900                                  UseBpbPresent:				
 10901 00000CBF 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 10902                                  					; This is where	the result goes
 10903 00000CC2 B91900                  		mov	cx, 25		; A_BPB.size - 6
 10904                                  					; For now use 'small' bpb
 10905 00000CC5 1E                      		push	ds		; reverse segments for copy
 10906 00000CC6 06                      		push	es
 10907 00000CC7 1F                      		pop	ds
 10908 00000CC8 07                      		pop	es
 10909 00000CC9 F3A4                    		rep movsb
 10910                                  		
 10911                                  		; 12/12/2022
 10912                                  		; cf=0 (test instruction -above- resets cf) 	
 10913                                  		;clc
 10914                                  GetParmRet:				
 10915 00000CCB C3                      		retn
 10916                                  ; ---------------------------------------------------------------------------
 10917                                  
 10918                                  ; 17/10/2022
 10919                                  ; 16/10/2022
 10920                                  
 10921                                  ; ==========================================================================
 10922                                  ; SetDeviceParameters:
 10923                                  ;
 10924                                  ; input: ES:di points to bds for drive
 10925                                  ; ==========================================================================
 10926                                  
 10927                                  		; 19/10/2022
 10928                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 10929 00000CCC C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10930 00000CD0 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10931 00000CD3 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 10932                                  					; fchanged_by_format|fchanged
 10933 00000CD9 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10934                                  					; ONLY_SET_TRACKLAYOUT
 10935 00000CDC 7579                    		jnz	short setTrackTable
 10936 00000CDE 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10937 00000CE1 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 10938 00000CE5 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10939 00000CE8 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 10940 00000CEC 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10941 00000CEF 1E                      		push	ds
 10942                                  		; 17/10/2022
 10943 00000CF0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10944                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10945                                  					; 2C7h:30h = 70h:25A0h
 10946                                  		;cmp	byte [fhave96], 0
 10947 00000CF5 803E[7700]00            		cmp	byte [fhave96], 0
 10948 00000CFA 1F                      		pop	ds
 10949 00000CFB 7502                    		jnz	short HaveChange ; we have changeline support
 10950                                  		; 10/12/2022
 10951 00000CFD 24FD                    		and	al, 0FDh
 10952                                  		;and	ax, 0FFFDh	; ~fchangeline
 10953                                  
 10954                                  		; Ignore all bits except non_removable and changeline
 10955                                  HaveChange:				
 10956 00000CFF 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 10957 00000D02 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 10958 00000D06 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 10959 00000D0A 09C8                    		or	ax, cx
 10960 00000D0C 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 10961 00000D10 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 10962                                  					; Set media type
 10963 00000D13 1E                      		push	ds
 10964 00000D14 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10965                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10966 00000D19 A2[3706]                		mov	[mediatype], al
 10967                                  		;mov	ds:mediatype, al
 10968 00000D1C 1F                      		pop	ds
 10969                                  
 10970                                  		; The media changed (maybe) so we will have to do a set dasd
 10971                                  		; the next time we format a track
 10972                                  
 10973                                  		; 10/12/2022
 10974 00000D1D 26804D2380              		or	byte [es:di+35], 80h
 10975                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 10976                                  					; set_dasd_true
 10977 00000D22 57                      		push	di		; Save bds pointer
 10978                                  
 10979                                  		; Figure out what we are supposed to do with the bpb
 10980                                  		; were we asked to install a fake bpb?
 10981                                  
 10982 00000D23 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10983                                  					; INSTALL_FAKE_BPB
 10984 00000D26 7514                    		jnz	short InstallFakeBpb
 10985                                  
 10986                                  		; were we returning a fake bpb when asked to build a bpb?
 10987                                  
 10988                                  		; 10/12/2022
 10989 00000D28 26F6452304              		test	byte [es:di+35], 4
 10990                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 10991                                  					; return_fake_bpb
 10992 00000D2D 7405                    		jz	short InstallRecommendedBpb
 10993                                  
 10994                                  		; we were returning a fake bpb but we can stop now
 10995                                  
 10996                                  		; 10/12/2022
 10997 00000D2F 26806523FB              		and	byte [es:di+35], 0FBh
 10998                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 10999                                  					; ~return_fake_bpb
 11000                                  InstallRecommendedBpb:			
 11001 00000D34 B91F00                  		mov	cx, 31		; A_BPB.size
 11002 00000D37 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 11003 00000D3A EB0B                    		jmp	short CopyTheBpb
 11004                                  ; ---------------------------------------------------------------------------
 11005                                  
 11006                                  InstallFakeBpb:
 11007                                  		; 10/12/2022
 11008 00000D3C 26804D2304              		or	byte [es:di+35], 4				
 11009                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 11010                                  					; return_fake_bpb
 11011 00000D41 B91900                  		mov	cx, 25		; A_BPB.size - 6
 11012                                  					; move 'smaller' bpb
 11013 00000D44 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 11014                                  
 11015                                  CopyTheBpb:				
 11016 00000D47 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11017 00000D4A F3A4                    		rep movsb
 11018 00000D4C 1E                      		push	ds		; Save packet segment
 11019                                  		; 17/10/2022
 11020 00000D4D 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11021                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11022                                  					; Setup	for ds -> Bios_Data
 11023 00000D52 E8DA03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 11024 00000D55 1F                      		pop	ds		; Restore packet segment
 11025 00000D56 5F                      		pop	di		; Restore bds pointer
 11026                                  setTrackTable:				
 11027 00000D57 8B4F26                  		mov	cx, [bx+38]
 11028 00000D5A 1E                      		push	ds
 11029 00000D5B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11030 00000D60 890E[3905]              		mov	[sectorspertrack], cx
 11031 00000D64 1F                      		pop	ds
 11032                                  		; 10/12/2022
 11033 00000D65 26806523F7              		and	byte [es:di+35], 0F7h
 11034                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 11035                                  					; ~good_tracklayout
 11036 00000D6A F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11037                                  					; TRACKLAYOUT_IS_GOOD
 11038 00000D6D 7405                    		jz	short UglyTrackLayOut
 11039                                  		; 10/12/2022
 11040 00000D6F 26804D2308              		or	byte [es:di+35], 8
 11041                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 11042                                  					; good_tracklayout
 11043                                  UglyTrackLayOut:			
 11044 00000D74 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 11045 00000D77 771A                    		ja	short TooManyPerTrack
 11046                                  		;jcxz	short SectorInfoSaved
 11047 00000D79 E316                    		jcxz	SectorInfoSaved	; 19/10/2022
 11048 00000D7B BF[3B05]                		mov	di, tracktable
 11049 00000D7E 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 11050                                  		; 17/10/2022
 11051 00000D81 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11052                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11053                                  					; Trash	our bds	pointer
 11054                                  StoreSectorInfo:			
 11055 00000D86 47                      		inc	di
 11056 00000D87 47                      		inc	di		; Skip over cylinder and head
 11057 00000D88 AD                      		lodsw			; Get sector id
 11058 00000D89 AA                      		stosb			; Copy it
 11059 00000D8A AD                      		lodsw			; Get sector size
 11060 00000D8B E8E301                  		call	SectSizeToSectIndex
 11061 00000D8E AA                      		stosb			; Store	sector SIZE index
 11062 00000D8F E2F5                    		loop	StoreSectorInfo
 11063                                  SectorInfoSaved:			
 11064 00000D91 F8                      		clc
 11065 00000D92 C3                      		retn
 11066                                  ; ---------------------------------------------------------------------------
 11067                                  
 11068                                  TooManyPerTrack:			
 11069 00000D93 B00C                    		mov	al, 0Ch
 11070 00000D95 F9                      		stc
 11071 00000D96 C3                      		retn
 11072                                  ; ---------------------------------------------------------------------------
 11073                                  
 11074                                  ; 16/10/2022
 11075                                  
 11076                                  ; ==========================================================================
 11077                                  ; FormatTrack:
 11078                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 11079                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 11080                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 11081                                  ;
 11082                                  ; input: ES:di points to bds for drive
 11083                                  ;
 11084                                  ; output:
 11085                                  ;	for status call:
 11086                                  ;	specialfunction byte set to:
 11087                                  ;		0 - rom support + legal combination
 11088                                  ;		1 - no rom support
 11089                                  ;		2 - illegal combination
 11090                                  ;		3 - no media present
 11091                                  ;	carry cleared.
 11092                                  ;
 11093                                  ;	for format track:
 11094                                  ;		carry set if error
 11095                                  ;
 11096                                  ; ==========================================================================
 11097                                  
 11098                                  ; 16/03/2019
 11099                                  
 11100                                  		; 19/10/2022
 11101                                  FormatTrack:
 11102 00000D97 C51E[1200]              		lds	bx, [ptrsav]
 11103 00000D9B C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 11104 00000D9E F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11105                                  					; STATUS_FOR_FORMAT
 11106 00000DA1 740E                    		jz	short DoFormatTrack
 11107 00000DA3 1E                      		push	ds
 11108                                  		; 17/10/2022
 11109 00000DA4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11110                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11111 00000DA9 E83902                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11112 00000DAC 1F                      		pop	ds
 11113 00000DAD 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11114 00000DAF F8                      		clc
 11115 00000DB0 C3                      		retn
 11116                                  ; ---------------------------------------------------------------------------
 11117                                  
 11118                                  DoFormatTrack:				
 11119 00000DB1 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 11120                                  					; DEV_HARDDISK
 11121 00000DB6 7508                    		jnz	short DoFormatDiskette
 11122                                  		; 17/10/2022
 11123 00000DB8 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11124                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11125                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 11126 00000DBD E99C00                  		jmp	VerifyTrack
 11127                                  ; ---------------------------------------------------------------------------
 11128                                  
 11129                                  DoFormatDiskette:			
 11130 00000DC0 8B4F01                  		mov	cx, [bx+1]
 11131 00000DC3 8B5703                  		mov	dx, [bx+3]
 11132 00000DC6 F60702                  		test	byte [bx], 2
 11133                                  		; 17/10/2022
 11134 00000DC9 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11135                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11136                                  					; Setup	ds-> Bios_Data for verify
 11137 00000DCE 7403                    		jz	short DoFormatDiskette_1
 11138 00000DD0 E9E400                  		jmp	VerifyTrack_Err
 11139                                  ; ---------------------------------------------------------------------------
 11140                                  
 11141                                  DoFormatDiskette_1:			
 11142 00000DD3 E80F02                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11143 00000DD6 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 11144 00000DD8 7406                    		jz	short NeedToSetDasd ; Old rom
 11145 00000DDA 3C03                    		cmp	al, 3		; Time out error?
 11146 00000DDC 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 11147                                  					; about	the illegal combination)
 11148 00000DDE EB67                    		jmp	short FormatFailed
 11149                                  ; ---------------------------------------------------------------------------
 11150                                  
 11151                                  NeedToSetDasd:				
 11152 00000DE0 52                      		push	dx
 11153 00000DE1 E8A001                  		call	SetDasd		; INT 13h, AH=17h
 11154 00000DE4 5A                      		pop	dx
 11155                                  NoSetDasd:				
 11156 00000DE5 E853FA                  		call	checksingle	; Do any needed	diskette swapping
 11157 00000DE8 89D0                    		mov	ax, dx		; Get track from packet
 11158 00000DEA A3[3901]                		mov	[trknum], ax
 11159 00000DED 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11160 00000DF1 88CC                    		mov	ah, cl
 11161 00000DF3 BB[3B05]                		mov	bx, tracktable
 11162 00000DF6 8B0E[3905]              		mov	cx, [sectorspertrack]
 11163                                  
 11164                                  StoreCylinderHead:			
 11165 00000DFA 8907                    		mov	[bx], ax	; Store	into TrackTable
 11166 00000DFC 83C304                  		add	bx, 4		; Skip to next sector field
 11167 00000DFF E2F9                    		loop	StoreCylinderHead
 11168 00000E01 B90500                  		mov	cx, 5		; MAXERR - Set up retry	count
 11169                                  FormatRetry:				
 11170 00000E04 51                      		push	cx
 11171 00000E05 BB[3B05]                		mov	bx, tracktable
 11172 00000E08 A0[3905]                		mov	al, [sectorspertrack]
 11173 00000E0B B405                    		mov	ah, 5		; romformat
 11174 00000E0D 8C1E[3705]              		mov	[xfer_seg], ds
 11175 00000E11 E87F02                  		call	ToRom
 11176 00000E14 59                      		pop	cx
 11177 00000E15 7216                    		jb	short FormatError
 11178 00000E17 51                      		push	cx		; Now verify the sectors just formatted.
 11179                                  					; NOTE:	because	of bug in some BIOSes we have to
 11180                                  					;	set ES:BX to 00:00
 11181 00000E18 53                      		push	bx
 11182 00000E19 31DB                    		xor	bx, bx
 11183 00000E1B 891E[3705]              		mov	[xfer_seg], bx
 11184 00000E1F A0[3905]                		mov	al, [sectorspertrack]
 11185 00000E22 B404                    		mov	ah, 4		; romverify
 11186 00000E24 B101                    		mov	cl, 1
 11187 00000E26 E86A02                  		call	ToRom
 11188 00000E29 5B                      		pop	bx
 11189 00000E2A 59                      		pop	cx
 11190 00000E2B 7329                    		jnb	short FormatOk
 11191                                  FormatError:				
 11192 00000E2D E84B02                  		call	ResetDisk
 11193 00000E30 C606[3906]01            		mov	byte [had_format_error], 1
 11194 00000E35 50                      		push	ax
 11195 00000E36 51                      		push	cx
 11196 00000E37 52                      		push	dx
 11197 00000E38 E8AA01                  		call	SetMediaForFormat
 11198 00000E3B 3C01                    		cmp	al, 1
 11199 00000E3D 7503                    		jnz	short WhileErr
 11200 00000E3F E84201                  		call	SetDasd
 11201                                  WhileErr:				
 11202 00000E42 5A                      		pop	dx
 11203 00000E43 59                      		pop	cx
 11204 00000E44 58                      		pop	ax
 11205 00000E45 E2BD                    		loop	FormatRetry
 11206                                  FormatFailed:				
 11207 00000E47 C606[3906]01            		mov	byte [had_format_error], 1
 11208                                  					; Set the format error flag
 11209 00000E4C 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11210 00000E4F 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11211 00000E51 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11212                                  DoMapIt:				
 11213 00000E53 E97AFD                  		jmp	maperror
 11214                                  ; ---------------------------------------------------------------------------
 11215                                  
 11216                                  FormatOk:				
 11217 00000E56 C606[3906]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11218 00000E5B C3                      		retn
 11219                                  ; ---------------------------------------------------------------------------
 11220                                  
 11221                                  ; 16/10/2022
 11222                                  
 11223                                  ; ==========================================================================
 11224                                  ;
 11225                                  ; VerifyTrack:
 11226                                  ;
 11227                                  ; input: ES:di points to bds for drive
 11228                                  ; ==========================================================================
 11229                                  
 11230                                  VerifyTrack:				
 11231 00000E5C 1E                      		push	ds
 11232 00000E5D C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11233 00000E61 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11234                                  
 11235                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11236                                  
 11237 00000E64 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11238 00000E67 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11239 00000E6A 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11240 00000E6D 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11241                                  					; Get option flag word
 11242 00000E6F 1F                      		pop	ds
 11243 00000E70 C606[2001]04            		mov	byte [rflag], 4	; romverify
 11244 00000E75 890E[3301]              		mov	[curtrk], cx
 11245 00000E79 A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 11246 00000E7C 8B0E[3905]              		mov	cx, [sectorspertrack]
 11247                                  
 11248                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 11249                                  		; specified if not we should go to the normal track verification
 11250                                  		; routine. If fast format has been specified we should get the
 11251                                  		; number of tracks to be verified and check it to see if it is
 11252                                  		; > 255. If it is then it is an error and we should go to
 11253                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 11254                                  		; sectors per track to get the total number of sectors to be
 11255                                  		; verified. This should also be less than equal to 255
 11256                                  		; otherwise we go to same error exit. If everything is okay
 11257                                  		; we initalise cx to the total sectors. use ax as a temporary
 11258                                  		; register.
 11259                                  
 11260                                  					; Special function requested?	
 11261 00000E80 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 11262 00000E83 7421                    		jz	short NormVerifyTrack
 11263 00000E85 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 11264 00000E87 08E4                    		or	ah, ah
 11265 00000E89 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 11266 00000E8B F6E1                    		mul	cl
 11267 00000E8D 08E4                    		or	ah, ah
 11268 00000E8F 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 11269 00000E91 89C1                    		mov	cx, ax
 11270                                  		; 10/12/2022
 11271 00000E93 26F6452301              		test	byte [es:di+35], 1
 11272                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11273                                  					; fnon_removable
 11274 00000E98 740C                    		jz	short NormVerifyTrack
 11275                                  					; Multitrack operation = on?
 11276                                  		; 10/12/2022
 11277                                  		; 19/10/2022
 11278 00000E9A F606[2F05]80            		test	byte [multrk_flag], 80h
 11279                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11280                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 11281 00000E9F 7405                    		jz	short NormVerifyTrack
 11282 00000EA1 C606[3605]01            		mov	byte [multitrk_format_flag], 1
 11283                                  NormVerifyTrack:			
 11284 00000EA6 31C0                    		xor	ax, ax		; 1st sector
 11285 00000EA8 31DB                    		xor	bx, bx
 11286 00000EAA 891E[3705]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 11287 00000EAE E83F00                  		call	TrackIo
 11288 00000EB1 C606[3605]00            		mov	byte [multitrk_format_flag], 0
 11289 00000EB6 C3                      		retn
 11290                                  ; ---------------------------------------------------------------------------
 11291                                  
 11292                                  VerifyTrack_Err:			
 11293 00000EB7 B401                    		mov	ah, 1
 11294 00000EB9 E914FD                  		jmp	maperror
 11295                                  ; ---------------------------------------------------------------------------
 11296                                  
 11297                                  ; 16/10/2022
 11298                                  
 11299                                  ; ==========================================================================
 11300                                  ;
 11301                                  ; ReadTrack:
 11302                                  ;
 11303                                  ; input: ES:di points to bds for drive
 11304                                  ;
 11305                                  ; ==========================================================================
 11306                                  
 11307                                  ReadTrack:				
 11308 00000EBC C606[2001]02            		mov	byte [rflag], 2	; romread
 11309 00000EC1 EB05                    		jmp	short ReadWriteTrack
 11310                                  ; ---------------------------------------------------------------------------
 11311                                  
 11312                                  WriteTrack:
 11313                                  
 11314                                  ; ==========================================================================
 11315                                  ;
 11316                                  ; WriteTrack:
 11317                                  ;
 11318                                  ; input: ES:di points to bds for drive
 11319                                  ;
 11320                                  ; ==========================================================================
 11321                                  				
 11322 00000EC3 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11323                                  
 11324                                  		; Fall into ReadWriteTrack
 11325                                  
 11326                                  ; ==========================================================================
 11327                                  ;
 11328                                  ; readWriteTrack:
 11329                                  ;
 11330                                  ; input:
 11331                                  ;    ES:di points to bds for drive
 11332                                  ;    rFlag - 2 for read,3 for write
 11333                                  ;
 11334                                  ; ==========================================================================
 11335                                  
 11336                                  ReadWriteTrack:	
 11337                                  		; save bds pointer segment so we can use it to access
 11338                                  		; our packet. Notice that this is not the standard register
 11339                                  		; assignment for accessing packets
 11340                                  		
 11341                                  		; 19/10/2022	
 11342 00000EC8 06                      		push	es
 11343 00000EC9 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 11344 00000ECD 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11345 00000ED1 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 11346 00000ED5 A3[3301]                		mov	[curtrk], ax
 11347 00000ED8 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 11348 00000EDC A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 11349 00000EDF 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 11350 00000EE3 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 11351 00000EE7 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 11352                                  					; Get transfer address
 11353                                  
 11354                                  		; we just trashed our packet address, but we no longer care
 11355                                  
 11356 00000EEB 8C06[3705]              		mov	[xfer_seg], es	; Pass transfer	segment
 11357 00000EEF 07                      		pop	es
 11358                                  
 11359                                  		; Fall into TrackIo
 11360                                  
 11361                                  ; =============== S U B	R O U T	I N E =======================================
 11362                                  
 11363                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11364                                  
 11365                                  ; ==========================================================================
 11366                                  ;
 11367                                  ; TrackIo:
 11368                                  ;    performs track read/write/verify
 11369                                  ;
 11370                                  ;   input:
 11371                                  ;      rFlag	- 2 = read
 11372                                  ;		  3 = write
 11373                                  ;		  4 = verify
 11374                                  ;      AX	- Index into track table of first sector to io
 11375                                  ;      CX	- Number of sectors to io
 11376                                  ;      Xfer_Seg:BX - Transfer address
 11377                                  ;      ES:DI	- Pointer to bds
 11378                                  ;      CurTrk	- Current cylinder
 11379                                  ;      CurHd	- Current head
 11380                                  ;
 11381                                  ; ==========================================================================
 11382                                  
 11383                                  ; 16/03/2019 - Retro DOS v4.0
 11384                                  		
 11385                                  		; 19/10/2022
 11386                                  TrackIo:	
 11387                                  					; Procedure `disk' will pop stack to
 11388 00000EF0 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 11389 00000EF4 E844F9                  		call	checksingle	; Ensure correct disk is in drv
 11390 00000EF7 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11391                                  					; See if we have already set	disk
 11392 00000EFC 7407                    		jz	short Dptalreadyset ; base table
 11393 00000EFE 50                      		push	ax		; set up tables	and variables for i/o
 11394 00000EFF 51                      		push	cx
 11395 00000F00 E896FA                  		call	iosetup
 11396 00000F03 59                      		pop	cx
 11397 00000F04 58                      		pop	ax
 11398                                  Dptalreadyset:				; Point si at the table entry of the			
 11399 00000F05 BE[3B05]                		mov	si, tracktable	; first sector to be io'd
 11400 00000F08 D1E0                    		shl	ax, 1
 11401 00000F0A D1E0                    		shl	ax, 1
 11402 00000F0C 01C6                    		add	si, ax
 11403                                  
 11404                                  		; WE WANT:
 11405                                  		; CX to	be the number of times we have to loop
 11406                                  		; DX to	be the number of sectors we read on each iteration
 11407                                  		
 11408 00000F0E BA0100                  		mov	dx, 1
 11409                                  		; 12/12/2022
 11410 00000F11 26F6452308              		test	byte [es:di+23h], 8
 11411                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 11412                                  					; good_tracklayout
 11413 00000F16 7402                    		jz	short ionextsector
 11414                                  		
 11415 00000F18 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 11416                                  ionextsector:				
 11417 00000F1A 51                      		push	cx
 11418 00000F1B 52                      		push	dx
 11419 00000F1C 46                      		inc	si
 11420 00000F1D 46                      		inc	si		; Skip over the	cylinder and head in
 11421                                  					; the track table
 11422 00000F1E AC                      		lodsb			; Get sector ID	from track table
 11423 00000F1F A2[3101]                		mov	[cursec], al
 11424                                  
 11425                                  		; assumptions for a fixed disk multi-track disk	i/o
 11426                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 11427                                  		;     only CL is valid.
 11428                                  		; 2). Sector size should be set	to 512 bytes.
 11429                                  		; 3). Good track layout
 11430                                  		
 11431                                  		; 12/12/2022
 11432 00000F22 26F6452301              		test	byte [es:di+23h], 1
 11433                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11434                                  					; fnon_removable ; Fixed disk?
 11435 00000F27 7414                    		jz	short IoRemovable ; No
 11436                                  		; 12/12/2022
 11437 00000F29 F606[2F05]80            		test	byte [multrk_flag], 80h
 11438                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11439                                  						; Allow multi-track operation?
 11440 00000F2E 740D                    		jz	short IoRemovable ; No,don't do that.
 11441 00000F30 8916[2201]              		mov	[seccnt], dx
 11442 00000F34 89D0                    		mov	ax, dx
 11443 00000F36 E81DFB                  		call	Disk
 11444 00000F39 5A                      		pop	dx
 11445 00000F3A 59                      		pop	cx
 11446 00000F3B F8                      		clc
 11447 00000F3C C3                      		retn
 11448                                  ; ---------------------------------------------------------------------------
 11449                                  
 11450                                  IoRemovable:				
 11451 00000F3D AC                      		lodsb			; Get sector size index	from track
 11452                                  					; table	and save it
 11453 00000F3E 50                      		push	ax
 11454 00000F3F 56                      		push	si
 11455 00000F40 1E                      		push	ds		; Save Bios_Data
 11456 00000F41 50                      		push	ax
 11457 00000F42 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 11458                                  					; Fetch	EOT while ds-> Bios_Data
 11459 00000F46 C536[2D01]              		lds	si, [dpt]
 11460 00000F4A 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 11461 00000F4D 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 11462 00000F50 58                      		pop	ax
 11463 00000F51 1F                      		pop	ds
 11464 00000F52 88D0                    		mov	al, dl
 11465 00000F54 A3[2201]                		mov	[seccnt], ax
 11466 00000F57 E8FCFA                  		call	Disk
 11467 00000F5A 5E                      		pop	si		; Advance buffer pointer by adding
 11468                                  					; sector size
 11469 00000F5B 58                      		pop	ax
 11470 00000F5C E81D00                  		call	SectorSizeIndexToSectorSize
 11471 00000F5F 01C3                    		add	bx, ax
 11472 00000F61 5A                      		pop	dx
 11473 00000F62 59                      		pop	cx
 11474 00000F63 E2B5                    		loop	ionextsector
 11475 00000F65 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11476                                  		;jz	short NoNeedDone
 11477                                  		; 12/12/2022
 11478 00000F6A 7404                    		je	short NoNeedDone2
 11479 00000F6C E872FA                  		call	done		; set time of last access, and reset
 11480                                  					; entries in Dpt.
 11481                                  NoNeedDone:				
 11482 00000F6F F8                      		clc
 11483                                  NoNeedDone2:
 11484 00000F70 C3                      		retn
 11485                                  
 11486                                  ; =============== S U B	R O U T	I N E =======================================
 11487                                  
 11488                                  ; ---------------------------------------------------------------------------
 11489                                  ;
 11490                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 11491                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 11492                                  ; are permissible.
 11493                                  ;
 11494                                  ; On Input   AX contains sector size in bytes
 11495                                  ; On Output  AL Contains index
 11496                                  ; All other registers preserved
 11497                                  ;
 11498                                  ; ---------------------------------------------------------------------------
 11499                                  
 11500                                  SectSizeToSectIndex:	
 11501 00000F71 80FC02                  		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11502                                  					; examine upper	byte only
 11503 00000F74 7703                    		ja	short OneK
 11504 00000F76 88E0                    		mov	al, ah		; value	in AH is the index!
 11505 00000F78 C3                      		retn
 11506                                  ; ---------------------------------------------------------------------------
 11507                                  
 11508                                  OneK:					
 11509 00000F79 B003                    		mov	al, 3
 11510 00000F7B C3                      		retn
 11511                                  
 11512                                  ; =============== S U B	R O U T	I N E =======================================
 11513                                  
 11514                                  
 11515                                  SectorSizeIndexToSectorSize:
 11516 00000F7C 88C1                    		mov	cl, al
 11517 00000F7E B88000                  		mov	ax, 128
 11518 00000F81 D3E0                    		shl	ax, cl
 11519 00000F83 C3                      		retn
 11520                                  
 11521                                  ; =============== S U B	R O U T	I N E =======================================
 11522                                  
 11523                                  ; 16/10/2022
 11524                                  
 11525                                  ; ---------------------------------------------------------------------------
 11526                                  ;
 11527                                  ; SetDASD
 11528                                  ;
 11529                                  ; Set up the rom for formatting.
 11530                                  ; we have to tell the rom bios what type of disk is in the drive.
 11531                                  ;
 11532                                  ; On Input   - ES:di - Points to bds
 11533                                  ;
 11534                                  ; ---------------------------------------------------------------------------
 11535                                  
 11536                                  		; 19/10/2022
 11537                                  SetDasd:	
 11538 00000F84 803E[3906]01            		cmp	byte [had_format_error], 1 ;
 11539                                  					; See if we've previously set dasd type
 11540 00000F89 740C                    		jz	short DoSetDasd
 11541                                  		; 10/12/2022
 11542 00000F8B 26F6452380              		test	byte [es:di+23h], 80h
 11543                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 11544                                  					; set_dasd_true
 11545 00000F90 744A                    		jz	short DasdHasBeenSet
 11546                                  		; 10/12/2022
 11547 00000F92 268065237F              		and	byte [es:di+23h], 7Fh
 11548                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 11549                                  					; ~set_dasd_true
 11550                                  DoSetDasd:				
 11551 00000F97 C606[3906]00            		mov	byte [had_format_error], 0 ; Reset it
 11552 00000F9C C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 11553 00000FA1 B004                    		mov	al, 4
 11554 00000FA3 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11555                                  					; DEV_3INCH720KB
 11556 00000FA8 741A                    		jz	short DoSet
 11557 00000FAA 26807D2201              		cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 11558                                  					; DEV_5INCH96TPI
 11559 00000FAF 7404                    		jz	short GotBig
 11560 00000FB1 B001                    		mov	al, 1
 11561 00000FB3 EB0F                    		jmp	short DoSet
 11562                                  ; ---------------------------------------------------------------------------
 11563                                  
 11564                                  GotBig:					
 11565 00000FB5 B002                    		mov	al, 2		; 160/320k in a	1.2 meg	drive
 11566 00000FB7 803E[3706]00            		cmp	byte [mediatype], 0
 11567 00000FBC 7506                    		jnz	short DoSet
 11568                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 11569                                  		; 10/12/2022
 11570                                  		;inc	al  ; al = 3
 11571                                  		; 18/12/2022
 11572 00000FBE 40                      		inc	ax  ; al = 3
 11573 00000FBF C606[3B01]54            		mov	byte [gap_patch], 54h
 11574                                  DoSet:					
 11575 00000FC4 1E                      		push	ds
 11576 00000FC5 56                      		push	si
 11577 00000FC6 8E1E[1A00]              		mov	ds, [zeroseg]	; Point	to interrupt vectors
 11578                                  
 11579 00000FCA C5367800                		lds	si, [DSKADR]
 11580                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 11581                                  		;;lds	si, ds:78h		
 11582                                  
 11583 00000FCE C644090F                		mov	byte [si+9], 0Fh ;
 11584                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 11585 00000FD2 5E                      		pop	si
 11586 00000FD3 1F                      		pop	ds
 11587 00000FD4 B417                    		mov	ah, 17h
 11588 00000FD6 268A5504                		mov	dl, [es:di+4]
 11589 00000FDA CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 11590                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 11591                                  DasdHasBeenSet:				
 11592 00000FDC 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 11593 00000FE0 8826[3701]              		mov	[formt_eot], ah
 11594 00000FE4 C3                      		retn
 11595                                  
 11596                                  ; =============== S U B	R O U T	I N E =======================================
 11597                                  
 11598                                  ; 16/10/2022
 11599                                  
 11600                                  ; ---------------------------------------------------------------------------
 11601                                  ;
 11602                                  ; Set Media Type for Format
 11603                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 11604                                  ; BPB area in the BDS can be handled by the rom.
 11605                                  ; On Input, ES:DI -> current BDS.
 11606                                  ; The status of the operation is returned in AL
 11607                                  ;
 11608                                  ;	- 0 - if the support is available,and the combination is valid.
 11609                                  ;	- 1 - no rom support
 11610                                  ;	- 2 - illegal combination
 11611                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 11612                                  ;
 11613                                  ; Flags also may be altered. All other registers preserved.
 11614                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 11615                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 11616                                  ; to the one returned. the original pointer to the disk base table is stored
 11617                                  ; in TempDpt, until it is restored.
 11618                                  ;
 11619                                  ; ---------------------------------------------------------------------------
 11620                                  
 11621                                  		; 19/10/2022
 11622                                  SetMediaForFormat:	
 11623 00000FE5 51                      		push	cx
 11624 00000FE6 52                      		push	dx
 11625                                  
 11626                                  		; If we have a format error, then do not change Dpt, TempDpt.
 11627                                  		; but we need to call int 13h, ah=18h again.
 11628                                  
 11629 00000FE7 803E[3906]01            		cmp	byte [had_format_error], 1
 11630 00000FEC 7425                    		jz	short SkipSaveDskAdr
 11631 00000FEE 30C0                    		xor	al, al		; If already done return 0
 11632 00000FF0 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11633 00000FF5 7502                    		jnz	short DoSetMediaForFormat
 11634 00000FF7 EB7F                    		jmp	SetMediaRet	; Media	already	set
 11635                                  ; ---------------------------------------------------------------------------
 11636                                  
 11637                                  DoSetMediaForFormat:			
 11638 00000FF9 06                      		push	es
 11639 00000FFA 56                      		push	si
 11640 00000FFB 8E06[1A00]              		mov	es, [zeroseg]	; Point to interrupt vectors
 11641 00000FFF 26C4367800              		les	si, [es:DSKADR]
 11642                                  		;les	si, es:78h	; [es:DSKADR]
 11643                                  					; Get pointer to disk base table
 11644 00001004 8936[2D01]              		mov	[dpt], si
 11645 00001008 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11646                                  
 11647                                  		; Initialize the head settle time to 0Fh. See the offsets
 11648                                  		; given in dskprm.inc.
 11649                                  
 11650 0000100C 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11651 00001011 5E                      		pop	si
 11652 00001012 07                      		pop	es
 11653                                  
 11654                                  SkipSaveDskAdr:				
 11655 00001013 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 11656 00001017 49                      		dec	cx
 11657 00001018 80E503                  		and	ch, 3
 11658 0000101B D0CD                    		ror	ch, 1
 11659 0000101D D0CD                    		ror	ch, 1
 11660 0000101F 86E9                    		xchg	ch, cl
 11661 00001021 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 11662 00001025 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 11663 00001029 06                      		push	es
 11664 0000102A 1E                      		push	ds
 11665 0000102B 56                      		push	si
 11666 0000102C 57                      		push	di
 11667 0000102D B418                    		mov	ah, 18h
 11668 0000102F CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 11669                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 11670 00001031 7233                    		jb	short FormaStatErr
 11671 00001033 803E[3906]01            		cmp	byte [had_format_error], 1
 11672 00001038 7425                    		jz	short skip_disk_base_setting
 11673 0000103A 06                      		push	es		; Save segment returned	by the rom
 11674 0000103B 8E06[1A00]              		mov	es, [zeroseg]	; Point	to interrupt vector segment
 11675 0000103F 26C4367800              		les	si, [es:DSKADR]
 11676                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 11677                                  					; Get current disk base	table
 11678 00001044 8936[3A06]              		mov	[tempdpt], si
 11679 00001048 8C06[3C06]              		mov	[tempdpt+2], es ; Save it
 11680 0000104C 8E06[1A00]              		mov	es, [zeroseg]
 11681                                  		;mov	es:78h,	di
 11682 00001050 26893E7800              		mov	[es:DSKADR], di
 11683                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 11684 00001055 268F067A00              		pop	word [es:DSKADR+2]
 11685 0000105A C606[3806]01            		mov	byte [media_set_for_format], 1
 11686                                  skip_disk_base_setting:			
 11687 0000105F 30C0                    		xor	al, al		; Legal	combination + rom support code
 11688                                  		;mov	ds:had_format_error, al	; Reset	the flag
 11689 00001061 A2[3906]                		mov	[had_format_error], al
 11690 00001064 EB0E                    		jmp	short PopStatRet
 11691                                  ; ---------------------------------------------------------------------------
 11692                                  
 11693                                  FormaStatErr:
 11694                                  		; 10/12/2022
 11695 00001066 B003                    		mov	al, 3
 11696                                  				
 11697 00001068 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 11698                                  					; Illegal combination =	0Ch
 11699 0000106B 7406                    		jz	short FormatStatIllegalComb
 11700 0000106D 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 11701 00001070 7402                    		jz	short FormatStatTimeOut
 11702                                  		; 10/12/2022
 11703                                  		;dec	al
 11704                                  		; 18/12/2022
 11705 00001072 48                      		dec	ax
 11706                                  		; al = 2
 11707                                  		;mov	al, 1		; Function not supported.
 11708                                  		;jmp	short PopStatRet
 11709                                  ; ---------------------------------------------------------------------------
 11710                                  
 11711                                  FormatStatIllegalComb:
 11712                                  		; 10/12/2022
 11713                                  		;dec	al	; 3 -> 2 or 2 -> 1
 11714                                  		; 18/12/2022
 11715 00001073 48                      		dec	ax
 11716                                  		; al = 2				
 11717                                  		;mov	al, 2		; Function supported, but
 11718                                  					; Illegal sect/trk,trk combination.
 11719                                  		; 10/12/2022
 11720                                  		;jmp	short PopStatRet
 11721                                  ; ---------------------------------------------------------------------------
 11722                                  
 11723                                  FormatStatTimeOut:			
 11724                                  		; 10/12/2022
 11725                                  		; al = 3
 11726                                  		;mov	al, 3		; Function supported, but
 11727                                  					; Media	not present.
 11728                                  PopStatRet:				
 11729 00001074 5F                      		pop	di
 11730 00001075 5E                      		pop	si
 11731 00001076 1F                      		pop	ds
 11732 00001077 07                      		pop	es
 11733                                  SetMediaRet:				
 11734 00001078 5A                      		pop	dx
 11735 00001079 59                      		pop	cx
 11736 0000107A C3                      		retn
 11737                                  
 11738                                  ; =============== S U B	R O U T	I N E =======================================
 11739                                  
 11740                                  ; 16/10/2022
 11741                                  
 11742                                  ; ---------------------------------------------------------------------------
 11743                                  ;
 11744                                  ; RESET THE DRIVE
 11745                                  ;
 11746                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 11747                                  ; slow head settle time for the next operation. this is because the reset
 11748                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 11749                                  ; time around - there is a problem with 3.5" drives in that the head does
 11750                                  ; not settle down in time,even for read operations!!
 11751                                  ;
 11752                                  ; ---------------------------------------------------------------------------
 11753                                  
 11754                                  ResetDisk:	
 11755 0000107B 50                      		push	ax
 11756 0000107C 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11757                                  					; Reset while formatting?
 11758 00001081 7505                    		jnz	short ResetDisk_cont
 11759                                  					; Then verify operation in "fmt & vrfy"
 11760 00001083 C606[3906]01            		mov	byte [had_format_error], 1 ; Might have failed.
 11761                                  ResetDisk_cont:				
 11762 00001088 30E4                    		xor	ah, ah		; So signals that we had a format error
 11763 0000108A CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 11764                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 11765 0000108C C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 11766                                  					; Zap up the speed
 11767 00001091 58                      		pop	ax
 11768 00001092 C3                      		retn
 11769                                  
 11770                                  ; =============== S U B	R O U T	I N E =======================================
 11771                                  
 11772                                  ; 16/10/2022
 11773                                  
 11774                                  ; ---------------------------------------------------------------------------
 11775                                  ;
 11776                                  ; This routine sets up the drive parameter table with the values needed for
 11777                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 11778                                  ;
 11779                                  ; on entry  -	ES:DI - points to bds for the drive
 11780                                  ;		Xfer_Seg:BX - points to trkbuf
 11781                                  ;		AL    - number of sectors
 11782                                  ;		AH    - int 13 function code
 11783                                  ;		CL    - sector number for verify
 11784                                  ;		DS    - Bios_Data
 11785                                  ;
 11786                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 11787                                  ;		AX and flags are the results of the int 13
 11788                                  ;
 11789                                  ; ---------------------------------------------------------------------------
 11790                                  
 11791                                  		; 19/10/2022
 11792                                  ToRom:	
 11793 00001093 53                      		push	bx
 11794 00001094 56                      		push	si
 11795                                  
 11796                                  		; Compaq bug fix - check whether we are using new ROM
 11797                                  		; functionality to set up format, not merely if it exists.
 11798                                  		; This was formerly a check against [new_rom]
 11799                                  
 11800 00001095 F606[3806]01            		test	byte [media_set_for_format], 1
 11801 0000109A 7536                    		jnz	short GotValidDpt
 11802 0000109C 50                      		push	ax
 11803 0000109D 06                      		push	es		; Save bds segment
 11804 0000109E 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11805                                  					; ffSmall ; is it a 3.5" drive?
 11806 000010A3 9C                      		pushf			; (Save	the cmp	result)
 11807 000010A4 8E06[1A00]              		mov	es, [zeroseg]
 11808                                  		;les	si, es:78h	; Get pointer to disk base table
 11809 000010A8 26C4367800              		les	si, [es:DSKADR]
 11810                                  		;mov	word ptr ds:dpt, si
 11811                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 11812 000010AD 8936[2D01]              		mov	[dpt], si
 11813 000010B1 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11814                                  		
 11815 000010B5 A0[3701]                		mov	al, [formt_eot]
 11816 000010B8 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 11817 000010BC A0[3B01]                		mov	al, [gap_patch]
 11818 000010BF 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 11819                                  					; Important for	format
 11820 000010C3 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11821                                  					; Assume we are	doing a	seek operation
 11822                                  					; Setup	motor start correctly for 3.5" drives
 11823 000010C8 9D                      		popf			; Get result of	earlier	cmp
 11824 000010C9 7505                    		jnz	short MotorStrtOK
 11825 000010CB 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 11826                                  MotorStrtOK:				
 11827 000010D0 07                      		pop	es		; Restore bds segment
 11828 000010D1 58                      		pop	ax
 11829                                  GotValidDpt:				
 11830 000010D2 8B16[3901]              		mov	dx, [trknum]	; Set track number
 11831 000010D6 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 11832 000010D8 268A5504                		mov	dl, [es:di+4]	; Set drive number
 11833 000010DC 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 11834 000010E0 06                      		push	es		; Save bds segment
 11835 000010E1 8E06[3705]              		mov	es, [xfer_seg]
 11836 000010E5 CD13                    		int	13h		; DISK -
 11837 000010E7 07                      		pop	es		; Restore bds segment
 11838 000010E8 5E                      		pop	si
 11839 000010E9 5B                      		pop	bx
 11840 000010EA C3                      		retn
 11841                                  
 11842                                  ; ---------------------------------------------------------------------------
 11843                                  
 11844                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11845                                  
 11846                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 11847                                  
 11848                                  ; ==========================================================================
 11849                                  ;
 11850                                  ; get the owner of the physical drive represented by the logical drive in al.
 11851                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 11852                                  ; if this is not the case, the system may hang, just following the linked list.
 11853                                  ;
 11854                                  ; ==========================================================================
 11855                                  
 11856                                  		; 19/10/2022
 11857                                  ioctl_getown:
 11858 000010EB E8DDF3                  		call	SetDrive
 11859 000010EE 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 11860                                  					; Get physical drive number
 11861 000010F2 C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 11862                                  ownloop:				
 11863 000010F6 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 11864 000010FA 7507                    		jnz	short getnextBDS
 11865                                  		; 10/12/2022
 11866 000010FC 26F6452320              		test	byte [es:di+23h], 20h
 11867                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 11868                                  					; fi_own_physical
 11869 00001101 7515                    		jnz	short exitown
 11870                                  getnextBDS:				
 11871 00001103 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 11872 00001106 EBEE                    		jmp	short ownloop
 11873                                  ; ---------------------------------------------------------------------------
 11874                                  
 11875                                  ; ==========================================================================
 11876                                  ;
 11877                                  ; set the ownership of the physical drive represented by the logical drive
 11878                                  ; in al to al.
 11879                                  ;
 11880                                  ; ==========================================================================
 11881                                  
 11882                                  		; 19/10/2022
 11883                                  ioctl_setown:
 11884 00001108 E8C0F3                  		call	SetDrive
 11885 0000110B C606[7A00]01            		mov	byte [fsetowner], 1
 11886                                  					; set flag for CheckSingle to look at.
 11887 00001110 E828F7                  		call	checksingle
 11888 00001113 C606[7A00]00            		mov	byte [fsetowner], 0
 11889                                  					; set ownership	of drive reset flag
 11890                                  		; Fall into ExitOwn
 11891                                  
 11892                                  ; ==========================================================================
 11893                                  ;
 11894                                  ; if there is only one logical drive assigned to this physical drive, return
 11895                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 11896                                  ;
 11897                                  ; ==========================================================================
 11898                                  
 11899                                  exitown:				
 11900 00001118 30C9                    		xor	cl, cl
 11901                                  		; 12/12/2022
 11902 0000111A 26F6452310              		test	byte [es:di+23h], 10h
 11903                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 11904                                  					; fi_am_mult
 11905 0000111F 7406                    		jz	short exitnomult
 11906 00001121 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 11907                                  					; Get logical drive number
 11908                                  					; Get it 1-based
 11909 00001125 FEC1                    		inc	cl
 11910                                  exitnomult:				
 11911 00001127 C51E[1200]              		lds	bx, [ptrsav]
 11912 0000112B 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 11913                                  					; Exit normal termination
 11914                                  		; 12/12/2022
 11915                                  		; cf=0
 11916                                  		;clc
 11917 0000112E C3                      		retn
 11918                                  
 11919                                  ; =============== S U B	R O U T	I N E =======================================
 11920                                  
 11921                                  ; 16/10/2022
 11922                                  
 11923                                  ; ---------------------------------------------------------------------------
 11924                                  ;
 11925                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 11926                                  ; only if the first byte of TempDpt is not -1.
 11927                                  ; all registers (including flags) are preserved.
 11928                                  ;
 11929                                  ; ---------------------------------------------------------------------------
 11930                                  
 11931                                  		; 19/10/2022
 11932                                  RestoreOldDpt:
 11933                                  		; if we have already restored the disk base table earlier,
 11934                                  		; do not do it again.
 11935                                  	
 11936 0000112F 50                      		push	ax
 11937 00001130 30C0                    		xor	al, al
 11938 00001132 A2[3906]                		mov	[had_format_error], al	; Reset flag and 
 11939 00001135 8606[3806]              		xchg	al, [media_set_for_format] ; get current flag setting
 11940 00001139 08C0                    		or	al, al
 11941 0000113B 741E                    		jz	short DontRestore
 11942 0000113D 56                      		push	si
 11943 0000113E 1E                      		push	ds
 11944 0000113F 06                      		push	es
 11945 00001140 C536[3A06]              		lds	si, [tempdpt]
 11946                                  
 11947                                  		; 17/10/2022
 11948 00001144 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11949                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11950 00001149 268E06[1A00]            		mov	es, [es:zeroseg]
 11951                                  		;mov	es, es:zeroseg	; CAS -- bleeeech!
 11952                                  
 11953                                  		;mov	es:78h,	si	; [es:DSKADR]
 11954 0000114E 2689367800              		mov	[es:DSKADR], si
 11955                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 11956 00001153 268C1E7A00              		mov	[es:DSKADR+2], ds
 11957 00001158 07                      		pop	es
 11958 00001159 1F                      		pop	ds
 11959 0000115A 5E                      		pop	si
 11960                                  DontRestore:				
 11961 0000115B 58                      		pop	ax
 11962                                  		; 12/12/2022
 11963                                  		; cf=0
 11964                                  		;clc			;  Clear carry
 11965 0000115C C3                      		retn
 11966                                  
 11967                                  ; ---------------------------------------------------------------------------
 11968                                  
 11969                                  ; 16/10/2022
 11970                                  
 11971                                  ; ==========================================================================
 11972                                  ;	get media id
 11973                                  ; ==========================================================================
 11974                                  ;
 11975                                  ; FUNCTION: get the volume label,the system id and the serial number from
 11976                                  ;	    the media that has the extended boot record.
 11977                                  ;	    for the conventional media,this routine will return "unknown
 11978                                  ;	    media type" error to dos.
 11979                                  ;
 11980                                  ; INPUT :   ES:di -> bds table for this drive.
 11981                                  ;
 11982                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 11983                                  ;	    if carry set,then al contains the device driver error number
 11984                                  ;	    that will be returned to dos.
 11985                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 11986                                  ;
 11987                                  ; SUBROUTINES TO BE CALLED:
 11988                                  ;	BootIo:NEAR
 11989                                  ;
 11990                                  ; LOGIC:
 11991                                  ;	to recognize the extended boot record,this logic will actually
 11992                                  ;	access the boot sector even if it is a hard disk.
 11993                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 11994                                  ;	field of bpb and the extended boot signature.
 11995                                  ;
 11996                                  ; {
 11997                                  ;	get logical drive number from bds table;
 11998                                  ;	rFlag = read operation;
 11999                                  ;	BootIo;		 /*get the media boot record into the buffer
 12000                                  ;	if (no error) then
 12001                                  ;	     if (extended boot record) then
 12002                                  ;		{ set volume label,volume serial number and system id
 12003                                  ;		  of the request packet to those of the boot record;
 12004                                  ;		};
 12005                                  ;	     else		  /*not an extended bpb */
 12006                                  ;		{ set register al to "unknown media.." error code;
 12007                                  ;		  set carry bit;
 12008                                  ;		};
 12009                                  ;	else
 12010                                  ;	     ret;	/*already error code is set in the register al
 12011                                  ;
 12012                                  ; ==========================================================================
 12013                                  
 12014                                  ;size_of_EXT_BOOT_SERIAL equ 4
 12015                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 12016                                  ;;size_of_EXT_SYSTEM_ID equ 8
 12017                                  
 12018                                  		; 19/10/2022
 12019                                  GetMediaId:
 12020 0000115D E89F00                  		call	ChangeLineChk
 12021 00001160 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 12022 00001164 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 12023 00001169 E87B00                  		call	BootIo		; Read boot sector into	DiskSector
 12024 0000116C 7224                    		jb	short IOCtl_If1
 12025                                  					; Valid? (0F0h-0FFh?)
 12026 0000116E 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12027                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12028 00001173 721A                    		jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 12029                                  		; 10/12/2022
 12030 00001175 BE[7401]                		mov	si, disksector+26h
 12031 00001178 803C29                  		cmp	byte [si], 29h
 12032                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12033                                  					; EXT_BOOT_SIGNATURE
 12034 0000117B 7512                    		jnz	short IOCtl_If2	; not extended boot record
 12035 0000117D C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 12036 00001181 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12037                                  		; 10/12/2022
 12038 00001185 46                      		inc	si
 12039                                  		; si = disksector+27h 
 12040                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12041 00001186 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12042 00001189 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12043                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 12044                                  					; +size_of_EXT_SYSTEM_ID
 12045 0000118C F3A4                    		rep movsb		; Move from Bios_Data into request packet
 12046                                  	
 12047                                  		; 10/12/2022
 12048                                  		; cf = 0
 12049                                  		;clc
 12050                                  
 12051 0000118E C3                      		retn
 12052                                  ; ---------------------------------------------------------------------------
 12053                                  
 12054                                  IOCtl_If2:				
 12055 0000118F B007                    		mov	al, 7		; error_unknown_media
 12056 00001191 F9                      		stc
 12057                                  IOCtl_If1:				
 12058 00001192 C3                      		retn
 12059                                  ; ---------------------------------------------------------------------------
 12060                                  
 12061                                  ; 16/10/2022
 12062                                  
 12063                                  ; ==========================================================================
 12064                                  ;  set media id
 12065                                  ; ==========================================================================
 12066                                  
 12067                                  ; function: set the volume label, the system id and the serial number of
 12068                                  ;	    the media that has the extended boot record.
 12069                                  ;	    for the conventional media, this routine will return "unknown
 12070                                  ;	    media.." error to dos.
 12071                                  ;	    this routine will also set the corresponding informations in
 12072                                  ;	    the bds table.
 12073                                  ;
 12074                                  ; input :   ES:di -> bds table for this drive.
 12075                                  ;
 12076                                  ; output:   the extended boot record in the media will be set according to
 12077                                  ;	    the request packet.
 12078                                  ;	    if carry set, then al contains the device driver error number
 12079                                  ;	    that will be returned to dos.
 12080                                  ;
 12081                                  ; subroutines to be called:
 12082                                  ;	BootIo:NEAR
 12083                                  ;
 12084                                  ; logic:
 12085                                  ;
 12086                                  ; {
 12087                                  ;	get drive_number from bds;
 12088                                  ;	rFlag = "read operation";
 12089                                  ;	BootIo;
 12090                                  ;	if (no error) then
 12091                                  ;	     if (extended boot record) then
 12092                                  ;		{ set volume label,volume serial number and system id
 12093                                  ;		  of the boot record to those of the request packet;
 12094                                  ;		  rFlag = "write operation";
 12095                                  ;		  get drive number from bds;
 12096                                  ;		  BootIo;	  /*write it back*/
 12097                                  ;		};
 12098                                  ;	     else		  /*not an extended bpb */
 12099                                  ;		{ set register al to "unknown media.." error code;
 12100                                  ;		  set carry bit;
 12101                                  ;		  ret;	 /*return back to caller */
 12102                                  ;		};
 12103                                  ;	else
 12104                                  ;	     ret;		 /*already error code is set */
 12105                                  ;
 12106                                  ; ==========================================================================
 12107                                  
 12108                                  		; 19/10/2022
 12109                                  SetMediaId:
 12110 00001193 E86900                  		call	ChangeLineChk
 12111 00001196 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 12112                                  					; Logical drive	number
 12113 0000119A 88C2                    		mov	dl, al
 12114 0000119C C606[2001]02            		mov	byte [rflag], 2	; romread
 12115 000011A1 52                      		push	dx
 12116 000011A2 E84200                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 12117 000011A5 5A                      		pop	dx
 12118 000011A6 723E                    		jb	short IOCtl_If6
 12119                                  					; Valid? (0F0h-0FFh?)
 12120 000011A8 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12121                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12122 000011AD 7234                    		jb	short IOCtl_If7	; Brif not
 12123 000011AF 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12124                                  					; EXT_BOOT_SIGNATURE
 12125 000011B4 752D                    		jnz	short IOCtl_If7	; not extended boot record
 12126 000011B6 06                      		push	es		; Save BDS pointer
 12127 000011B7 57                      		push	di
 12128 000011B8 1E                      		push	ds		; Point	ES To boot record
 12129 000011B9 07                      		pop	es
 12130 000011BA BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12131 000011BD C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 12132 000011C1 C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 12133 000011C4 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12134 000011C7 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12135                                  					; +size_of_EXT_BOOT_VOL_LABEL
 12136                                  					; +size_of_EXT_SYSTEM_ID
 12137 000011CA F3A4                    		rep movsb
 12138 000011CC 06                      		push	es		; point	ds back	to Bios_Data
 12139 000011CD 1F                      		pop	ds
 12140 000011CE 5F                      		pop	di		; restore bds pointer
 12141 000011CF 07                      		pop	es
 12142 000011D0 E864F5                  		call	mov_media_ids	; update the bds media id info.
 12143 000011D3 88D0                    		mov	al, dl
 12144 000011D5 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12145 000011DA E80A00                  		call	BootIo		; write	it back.
 12146 000011DD C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 12147                                  					; make sure chk_media check the driver
 12148                                  					; return with error code from BootIo
 12149 000011E2 C3                      		retn
 12150                                  ; ---------------------------------------------------------------------------
 12151                                  
 12152                                  IOCtl_If7:				
 12153 000011E3 B007                    		mov	al, 7		; error_unknown_media
 12154 000011E5 F9                      		stc
 12155                                  IOCtl_If6:				
 12156 000011E6 C3                      		retn
 12157                                  
 12158                                  ; =============== S U B	R O U T	I N E =======================================
 12159                                  
 12160                                  ; 16/10/2022
 12161                                  
 12162                                  ; ---------------------------------------------------------------------------
 12163                                  ;	BootIo
 12164                                  ; ---------------------------------------------------------------------------
 12165                                  ;
 12166                                  ; function: read/write the boot record into boot sector.
 12167                                  ;
 12168                                  ; input :
 12169                                  ;	    al=logical drive number
 12170                                  ;	    rFlag = operation (read/write)
 12171                                  ;
 12172                                  ; output:   for read operation,the boot record of the drive specified in bds
 12173                                  ;	    be read into the DiskSector buffer.
 12174                                  ;	    for write operation,the DiskSector buffer image will be written
 12175                                  ;	    to the drive specified in bds.
 12176                                  ;	    if carry set,then al contains the device driver error number
 12177                                  ;	    that will be returned to dos.
 12178                                  ;	    AX,CX,DX register destroyed.
 12179                                  ;	    if carry set,then al will contain the error code from DiskIO.
 12180                                  ;
 12181                                  ; subroutines to be called:
 12182                                  ;	DiskIO:NEAR
 12183                                  ;
 12184                                  ; logic:
 12185                                  ;
 12186                                  ; {
 12187                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 12188                                  ;	sectorcount = 1;	 /*read 1 sector only */
 12189                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 12190                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 12191                                  ; }
 12192                                  ; ==========================================================================
 12193                                  
 12194                                  		; 19/10/2022
 12195                                  BootIo:	
 12196 000011E7 06                      		push	es
 12197 000011E8 57                      		push	di
 12198 000011E9 53                      		push	bx
 12199 000011EA 1E                      		push	ds
 12200 000011EB 07                      		pop	es		; Point ES: to Bios_Data
 12201                                  
 12202                                  		; Call DiskIO to read/write the boot sec. The parameters which
 12203                                  		; need to be initialized for this subroutine out here are
 12204                                  		; - Transfer address to Bios_Data:DiskSector
 12205                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 12206                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 12207                                  		; - Number of sectors <-- 1
 12208                                  
 12209 000011EC BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 12210 000011EF 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 12211 000011F1 8916[2B05]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 12212 000011F5 B90100                  		mov	cx, 1
 12213 000011F8 E8CEF6                  		call	diskio
 12214 000011FB 5B                      		pop	bx
 12215 000011FC 5F                      		pop	di
 12216 000011FD 07                      		pop	es
 12217 000011FE C3                      		retn
 12218                                  
 12219                                  ; =============== S U B	R O U T	I N E =======================================
 12220                                  
 12221                                  ; 16/10/2022
 12222                                  
 12223                                  ; ---------------------------------------------------------------------------
 12224                                  ;	ChangeLineChk
 12225                                  ; ---------------------------------------------------------------------------
 12226                                  ;
 12227                                  ; when the user calls get/set media id call before dos establishes the media
 12228                                  ; by calling "media_chk",the change line activity of the drive is going to be
 12229                                  ; lost.	this routine will check the change line activity and will save the
 12230                                  ; history in the flags.
 12231                                  ;
 12232                                  ; FUNCTION: check the change line error activity
 12233                                  ;
 12234                                  ; INPUT :  ES:di -> bds table.
 12235                                  ;
 12236                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 12237                                  ;
 12238                                  ; SUBROUTINES TO BE CALLED:
 12239                                  ;	Set_Changed_DL
 12240                                  ;
 12241                                  ; ---------------------------------------------------------------------------
 12242                                  
 12243                                  ChangeLineChk:	
 12244 000011FF 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12245 00001203 08D2                    		or	dl, dl		; Fixed	disk?
 12246 00001205 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 12247                                  		; 12/12/2022
 12248 00001207 26F6452304              		test	byte [es:di+23h], 4
 12249                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 12250                                  					; return_fake_bpb
 12251 0000120C 751A                    		jnz	short ChangeLnChkRet
 12252 0000120E 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 12253 00001213 7513                    		jnz	short ChangeLnChkRet
 12254 00001215 E8F806                  		call	haschange	; This drive support change line?
 12255 00001218 740E                    		jz	short ChangeLnChkRet ; Do nothing
 12256                                  
 12257                                  		; Execute the rom disk interrupt to check changeline activity.
 12258                                  
 12259 0000121A B416                    		mov	ah, 16h
 12260 0000121C CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 12261                                  					; DL = drive to	check
 12262                                  					; Return: AH = disk change status
 12263 0000121E 7308                    		jnb	short ChangeLnChkRet
 12264 00001220 53                      		push	bx
 12265 00001221 BB4000                  		mov	bx, 40h		; fchanged
 12266                                  					; Update flag in BDS for this
 12267                                  					; physical drive
 12268 00001224 E8C206                  		call	set_changed_dl
 12269 00001227 5B                      		pop	bx
 12270                                  ChangeLnChkRet:				
 12271 00001228 C3                      		retn
 12272                                  
 12273                                  ; ---------------------------------------------------------------------------
 12274                                  
 12275                                  ; 16/10/2022
 12276                                  
 12277                                  ; ==========================================================================
 12278                                  ;	GetAccessFlag
 12279                                  ; ==========================================================================
 12280                                  ;
 12281                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 12282                                  ;
 12283                                  ; INPUT :
 12284                                  ;	    ES:di -> bds table
 12285                                  ;
 12286                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 12287                                  ;						 = 1 if disk i/o allowed.
 12288                                  ; ==========================================================================
 12289                                  
 12290                                  		; 19/10/2022
 12291                                  GetAccessFlag:				
 12292 00001229 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 12293 0000122D C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12294                                  		;mov	al, 0		; Assume result	is unformatted
 12295                                  		; 10/12/2022
 12296 00001230 28C0                    		sub	al, al
 12297                                  		; 10/12/2022
 12298 00001232 26F6452402              		test	byte [es:di+36], 02h
 12299                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 12300                                  					; unformatted_media
 12301 00001237 7502                    		jnz	short GafDone	; Done if unformatted
 12302 00001239 FEC0                    		inc	al		; Return true for formatted
 12303                                  
 12304                                  GafDone:				
 12305 0000123B 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12306 0000123E C3                      		retn
 12307                                  ; ---------------------------------------------------------------------------
 12308                                  
 12309                                  ; 16/10/2022
 12310                                  
 12311                                  ; ==========================================================================
 12312                                  ;	SetAccessFlag
 12313                                  ; ==========================================================================
 12314                                  ;
 12315                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 12316                                  ;
 12317                                  ; input :
 12318                                  ;	    ES:di -> bds table
 12319                                  ;
 12320                                  ; output:   unformtted_media bit modified according to the user request
 12321                                  ; ==========================================================================
 12322                                  
 12323                                  		; 19/10/2022
 12324                                  SetAccessFlag:				
 12325 0000123F C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 12326 00001243 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12327                                  		; 10/12/2022
 12328 00001246 26806524FD              		and	byte [es:di+36], 0FDh
 12329                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 12330                                  					; ~unformatted_media
 12331 0000124B 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12332 0000124F 7505                    		jnz	short saf_Done
 12333                                  		; 10/12/2022
 12334 00001251 26804D2402              		or	byte [es:di+36], 02h
 12335                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 12336                                  					; unformatted_media
 12337                                  saf_Done:				
 12338 00001256 C3                      		retn
 12339                                  ; ---------------------------------------------------------------------------
 12340                                  
 12341                                  ; 16/10/2022
 12342                                  
 12343                                  ; ==========================================================================
 12344                                  ; Ioctl_Support_Query
 12345                                  ; ==========================================================================
 12346                                  ;
 12347                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 12348                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 12349                                  ; device attributes specifies if this function is supported.
 12350                                  ;
 12351                                  ; ==========================================================================
 12352                                  
 12353                                  		; 19/10/2022
 12354                                  ioctl_support_query:
 12355 00001257 06                      		push	es
 12356 00001258 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 12357 0000125C 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 12358                                  					; AL ==	Major, AH == Minor
 12359 00001260 3C08                    		cmp	al, 8		; IOC_DC
 12360                                  					; See if major code is 8
 12361 00001262 7513                    		jnz	short nosupport
 12362 00001264 0E                      		push	cs
 12363 00001265 07                      		pop	es
 12364 00001266 B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 12365                                  		; 10/12/2022
 12366 00001269 BF[3A0C]                		mov	di, IOC_DC_Table
 12367                                  		;mov	di, 0C60h	; IOC_DC_Table
 12368                                  					; at 2C7h:0C60h	= 70h:31D0h
 12369 0000126C 86C4                    		xchg	al, ah		; Put minor code in AL
 12370 0000126E F2AE                    		repne scasb		; Scan for minor code in AL
 12371 00001270 7505                    		jnz	short nosupport	; it was not found
 12372 00001272 B80001                  		mov	ax, 100h
 12373                                  		; 10/12/2022
 12374                                  		; (jump to ioctlsupexit is not required)
 12375                                  		;jmp	short $+2	; ioctlsupexit
 12376                                  					; Signal ioctl is supported
 12377                                  		;;jmp	short ioctlsupexit
 12378                                  ; ---------------------------------------------------------------------------
 12379                                  ioctlsupexit:				
 12380 00001275 07                      		pop	es
 12381                                  		; 10/12/2022
 12382                                  		; cf = 0
 12383                                  		;clc
 12384 00001276 C3                      		retn
 12385                                  ; ---------------------------------------------------------------------------
 12386                                  nosupport:				
 12387 00001277 07                      		pop	es
 12388 00001278 E95AEE                  		jmp	bc_cmderr
 12389                                  ; ---------------------------------------------------------------------------
 12390                                  
 12391                                  ; 16/10/2022
 12392                                  
 12393                                  ; ==========================================================================
 12394                                  ;	GetMediaSenseStatus
 12395                                  ; ==========================================================================
 12396                                  ;
 12397                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 12398                                  ;	    diskette drive and whether the media is the default type
 12399                                  ;	    for that drive. (default type means the max size for that
 12400                                  ;	    drive)
 12401                                  ;
 12402                                  ; INPUT :   ES:DI -> BDS table
 12403                                  ; OUTPUT:   If carry clear
 12404                                  ;	    DS:BX -> Updated IOCtlPacket
 12405                                  ;
 12406                                  ;			 Special Function at offset 0:
 12407                                  ;				0	- Media detected is not default type
 12408                                  ;				1	- Media detected is default type
 12409                                  ;
 12410                                  ;			 Device Type at offset 1:
 12411                                  ;				2       - 720K 3.5" 80 tracks
 12412                                  ;				7	- 1.44M 3.5" 80 tracks
 12413                                  ;				9	- 2.88M 3.5" 80 tracks
 12414                                  ;
 12415                                  ; Error Codes returned in AX if carry set:
 12416                                  ;
 12417                                  ; 8102 - Drive not ready	- No disk is in the drive.
 12418                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 12419                                  ;				  the media is really unkown, any error
 12420                                  ;				  other than "media not present"
 12421                                  ; 
 12422                                  ; ==========================================================================
 12423                                  
 12424                                  		; 19/10/2022
 12425                                  SenseMediaType:				
 12426 0000127B C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 12427 0000127F C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12428                                  		; 10/10/2022
 12429                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 12430 00001282 31D2                    		xor	dx, dx
 12431 00001284 8917                    		mov	[bx], dx ; 0
 12432                                  		;
 12433 00001286 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12434                                  					; Get int 13h drive number from	BDS
 12435                                  		; 10/12/2022
 12436                                  		;xor	dh, dh		; DX = physical	drive number
 12437 0000128A B420                    		mov	ah, 20h		; Get Media Type function
 12438                                  					; If no	carry media type in AL
 12439 0000128C CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 12440 0000128E 7216                    		jb	short MediaSenseEr ; error code	in AH
 12441 00001290 FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 12442                                  DetermineMediaType:			
 12443 00001292 FEC8                    		dec	al
 12444 00001294 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 12445 00001296 740A                    		jz	short GotMediaType
 12446 00001298 0404                    		add	al, 4
 12447 0000129A 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 12448 0000129C 7404                    		jz	short GotMediaType
 12449 0000129E 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 12450 000012A0 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 12451                                  GotMediaType:				
 12452 000012A2 884701                  		mov	[bx+1],	al	; Save the return value
 12453                                  		; 10/12/2022
 12454                                  		; cf = 0
 12455                                  		;clc			; Signal success
 12456 000012A5 C3                      		retn
 12457                                  ; ---------------------------------------------------------------------------
 12458                                  
 12459                                  MediaSenseEr:				
 12460 000012A6 80FC32                  		cmp	ah, 32h		; See if not default media error
 12461 000012A9 74E7                    		jz	short DetermineMediaType ; Not really an error
 12462 000012AB B002                    		mov	al, 2		; Now assume drive not ready
 12463 000012AD 80FC31                  		cmp	ah, 31h		; See if media was present
 12464 000012B0 7402                    		jz	short SenseErrExit ; Return drive not ready
 12465                                  UnknownMediaType:			
 12466 000012B2 B007                    		mov	al, 7		; Just don't know the media type
 12467                                  SenseErrExit:				
 12468 000012B4 B481                    		mov	ah, 81h		; Signal error return
 12469 000012B6 F9                      		stc
 12470 000012B7 C3                      		retn
 12471                                  
 12472                                  ; ---------------------------------------------------------------------------
 12473                                  		; 10/12/2022
 12474                                  		;db    0
 12475                                  ; ---------------------------------------------------------------------------
 12476                                  
 12477                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12478                                  
 12479                                  ;-----------------------------------------------------------------------------
 12480                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 12481                                  ;-----------------------------------------------------------------------------
 12482                                  ; 16/03/2019 - Retro DOS v4.0
 12483                                  
 12484                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 12485                                  ;	after booting. this allows testing and implementation of custom int_13
 12486                                  ;	handlers, without giving up ms-dos error recovery
 12487                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 12488                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 12489                                  ;	exit:	orig13	== address of new int_13 handler
 12490                                  ;		ds:dx	== old orig13 value
 12491                                  ;		es:bx	== old old13  value
 12492                                  ;
 12493                                  ; int 2f handler for external block drivers to communicate with the internal
 12494                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 12495                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 12496                                  ; dsk_entry, the entry point for all disk requests.
 12497                                  ;
 12498                                  ; on exit from this driver, we will return to the external driver
 12499                                  ; that issued this int 2f, and can then remove the flags from the stack.
 12500                                  ; this scheme allows us to have a small external device driver, and makes
 12501                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 12502                                  ; since we only need to make changes in one place (most of the time).
 12503                                  ;
 12504                                  ;   ax=800h - check for installed handler - reserved
 12505                                  ;   ax=801h - install the bds into the linked list
 12506                                  ;   ax=802h - dos request
 12507                                  ;   ax=803h - return bds table starting pointer in ds:di
 12508                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 12509                                  ;	    problem. bds table is going to be used to get head/sector
 12510                                  ;	    informations without calling generic ioctl get device parm call.)
 12511                                  
 12512                                  ;BIOSSEGMENT equ 70h
 12513                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 12514                                  
 12515                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 12516                                  
 12517                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 12518 000012B8 80FC13                  		cmp	ah, 13h
 12519 000012BB 7413                    		jz	short int2f_replace_int13
 12520 000012BD 80FC08                  		cmp	ah, 8
 12521 000012C0 743B                    		jz	short mine
 12522                                  
 12523                                  ; Check for WIN386 startup and return the BIOS instance data
 12524                                  
 12525 000012C2 80FC16                  		cmp	ah, 16h		; MultWin386
 12526 000012C5 7479                    		jz	short win386call
 12527 000012C7 80FC4A                  		cmp	ah, 4Ah		; multMULT
 12528 000012CA 7503                    		jnz	short i2f_handler_iret
 12529 000012CC E9A500                  		jmp	handle_multmult
 12530                                  ; ---------------------------------------------------------------------------
 12531                                  
 12532                                  i2f_handler_iret:			
 12533 000012CF CF                      		iret
 12534                                  ; ---------------------------------------------------------------------------
 12535                                  
 12536                                  int2f_replace_int13:			
 12537 000012D0 50                      		push	ax	; free up a register for caller's ds
 12538 000012D1 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 12539                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 12540                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 12541                                  					; = [02C7h:0030h] = [0070h:25A0h]
 12542 000012D3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 12543                                  		; 19/10/2022
 12544                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 12545                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 12546                                  		;push	word ptr ds:Old13	; return them to caller
 12547                                  		;push	word ptr ds:Old13+2
 12548 000012D8 FF36[B400]              		push	word [Orig13]
 12549 000012DC FF36[B600]              		push	word [Orig13+2]
 12550 000012E0 FF36[0601]              		push	word [Old13]
 12551 000012E4 FF36[0801]              		push	word [Old13+2]
 12552                                  
 12553                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 12554                                  		;mov	word ptr ds:Orig13+2, ax
 12555                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 12556                                  		;mov	word ptr ds:Old13+2, es
 12557 000012E8 8916[B400]              		mov	[Orig13], dx
 12558 000012EC A3[B600]                		mov	[Orig13+2], ax
 12559 000012EF 891E[0601]              		mov	[Old13], bx
 12560 000012F3 8C06[0801]              		mov	[Old13+2], es
 12561                                  
 12562 000012F7 07                      		pop	es			; es:bx := old old13 vector
 12563 000012F8 5B                      		pop	bx
 12564 000012F9 1F                      		pop	ds			; ds:dx := old orig13 vector
 12565 000012FA 5A                      		pop	dx
 12566 000012FB 58                      		pop	ax
 12567                                  i2f_iret:				
 12568 000012FC CF                      		iret
 12569                                  ; ---------------------------------------------------------------------------
 12570                                  
 12571                                  mine:					
 12572 000012FD 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 12573 000012FF 73FB                    		jnb	short i2f_iret
 12574 00001301 08C0                    		or	al, al			; a get installed state request?
 12575 00001303 7504                    		jnz	short disp_func
 12576 00001305 B0FF                    		mov	al, 0FFh
 12577 00001307 EBF3                    		jmp	short i2f_iret
 12578                                  ; ---------------------------------------------------------------------------
 12579                                  
 12580                                  disp_func:				
 12581 00001309 3C01                    		cmp	al, 1			; request for installing bds?
 12582 0000130B 7418                    		jz	short do_subfun_01
 12583 0000130D 3C03                    		cmp	al, 3			; get bds vector?
 12584 0000130F 7424                    		jz	short do_get_bds_vector
 12585                                  
 12586                                  ; set up pointer to request packet
 12587                                  
 12588 00001311 1E                      		push	ds
 12589 00001312 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 12590                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12591                                  					; = [0070h:25A0h] = [02C7h:0030h]
 12592                                  		; 19/10/2022
 12593                                  		;mov	word ptr ds:ptrsav, bx
 12594                                  		;mov	word ptr ds:ptrsav+2, es
 12595 00001317 891E[1200]              		mov	[ptrsav], bx
 12596 0000131B 8C06[1400]              		mov	[ptrsav+2], es
 12597 0000131F 1F                      		pop	ds
 12598                                  		;jmp	far ptr	i2f_dskentry
 12599                                  		; 17/10/2022
 12600                                  		;jmp	far DOSBIOSSEG:dsk_entry		
 12601 00001320 EA[9608]7000            		jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 12602                                  					; NOTE: jump to a FAR function, not an
 12603                                  					;  IRET type function. Callers of
 12604                                  					;  this int2f subfunction will have
 12605                                  					;  to be careful to do a popf
 12606                                  
 12607                                  ; ---------------------------------------------------------------------------
 12608                                  
 12609                                  do_subfun_01:				
 12610 00001325 06                      		push	es
 12611 00001326 1E                      		push	ds
 12612 00001327 1E                      		push	ds
 12613 00001328 07                      		pop	es
 12614                                  		; 17/10/2022
 12615 00001329 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 12616                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12617                                  					; point	ds: -> Bios_Data
 12618 0000132E E8C303                  		call	install_bds
 12619 00001331 1F                      		pop	ds
 12620 00001332 07                      		pop	es
 12621 00001333 EBC7                    		jmp	short i2f_iret
 12622                                  ; ---------------------------------------------------------------------------
 12623                                  
 12624                                  do_get_bds_vector:
 12625                                  		; 17/10/2022
 12626 00001335 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 12627                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12628 0000133A C53E[1901]              		lds	di, [start_bds]
 12629                                  		;lds	di, ds:start_bds
 12630                                  ;ii2f_iret:	; 10/12/2022				
 12631 0000133E EBBC                    		jmp	short i2f_iret
 12632                                  ; ---------------------------------------------------------------------------
 12633                                  
 12634                                  ; 17/10/2022
 12635                                  ; 16/10/2022
 12636                                  
 12637                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 12638                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 12639                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 12640                                  
 12641                                  win386call:				
 12642 00001340 1E                      		push	ds
 12643 00001341 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12644                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12645                                  					; at 2C7h:30h =	70h:25A0h
 12646 00001346 3C05                    		cmp	al, 5		; Win386_Init
 12647                                  					; is it	win386 initializing?
 12648 00001348 7410                    		jz	short Win386Init
 12649 0000134A 3C06                    		cmp	al, 6		; Win386_Exit
 12650                                  					; is it	win386 exiting?
 12651 0000134C 7523                    		jnz	short win_iret	; if not, continue int2f chain
 12652                                  		; 12/12/2022
 12653 0000134E F6C201                  		test	dl, 1
 12654                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 12655 00001351 751E                    		jnz	short win_iret	; if not win386, then continue
 12656                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 12657 00001353 8026[CE08]00            		and	byte [IsWin386], 0 
 12658 00001358 EB17                    		jmp	short win_iret
 12659                                  ; ---------------------------------------------------------------------------
 12660                                  
 12661                                  Win386Init:	
 12662                                  		; 12/12/2022
 12663 0000135A F6C201                  		test	dl, 1			
 12664                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 12665 0000135D 7512                    		jnz	short win_iret	; if not win386, then continue
 12666                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 12667 0000135F 800E[CE08]01            		or	byte [IsWin386], 1
 12668                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 12669                                  		;mov	word ptr ds:SI_Next+2, es
 12670 00001364 891E[9C08]              		mov	[SI_Next], bx
 12671 00001368 8C06[9E08]              		mov	[SI_Next+2], es
 12672                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 12673 0000136C BB[9A08]                		mov	bx, Win386_SI	; 19/10/2022
 12674 0000136F 1E                      		push	ds
 12675 00001370 07                      		pop	es
 12676                                  win_iret:				
 12677 00001371 1F                      		pop	ds
 12678                                  ii2f_iret:	; 10/12/2022	
 12679 00001372 EB88                    		jmp	short i2f_iret	; return back up the chain
 12680                                  ; ---------------------------------------------------------------------------
 12681                                  
 12682                                  handle_multmult:			
 12683 00001374 3C01                    		cmp	al, 1
 12684 00001376 7515                    		jnz	short try_2
 12685 00001378 1E                      		push	ds
 12686 00001379 E84700                  		call	HMAPtr		; get offset of free HMA
 12687                                  		; 10/12/2022
 12688                                  		;xor	bx, bx
 12689                                  		;dec	bx
 12690 0000137C BBFFFF                  		mov	bx, 0FFFFh
 12691 0000137F 8EC3                    		mov	es, bx		; seg of HMA
 12692 00001381 89FB                    		mov	bx, di
 12693 00001383 F7D3                    		not	bx
 12694 00001385 09DB                    		or	bx, bx
 12695 00001387 7401                    		jz	short try_1
 12696 00001389 43                      		inc	bx
 12697                                  try_1:					
 12698 0000138A 1F                      		pop	ds
 12699 0000138B EBE5                    		jmp	short ii2f_iret
 12700                                  ; ---------------------------------------------------------------------------
 12701                                  
 12702                                  try_2:					
 12703 0000138D 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 12704 0000138F 7530                    		jnz	short try_3
 12705 00001391 1E                      		push	ds
 12706                                  		; 10/12/2022
 12707                                  		;xor	di, di
 12708                                  		;dec	di
 12709 00001392 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 12710 00001395 8EC7                    		mov	es, di
 12711 00001397 E82900                  		call	HMAPtr		; get offset of free HMA
 12712 0000139A 83FFFF                  		cmp	di, 0FFFFh
 12713 0000139D 7421                    		jz	short InsuffHMA
 12714 0000139F F7DF                    		neg	di		; free space in HMA
 12715 000013A1 39FB                    		cmp	bx, di
 12716 000013A3 7605                    		jbe	short try_4
 12717                                  		; 10/12/2022
 12718                                  		;sub	di, di
 12719                                  		;dec	di
 12720 000013A5 BFFFFF                  		mov	di, 0FFFFh
 12721 000013A8 EB16                    		jmp	short InsuffHMA
 12722                                  ; ---------------------------------------------------------------------------
 12723                                  
 12724                                  try_4:					
 12725                                  		;mov	di, ds:FreeHMAPtr
 12726 000013AA 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12727 000013AE 83C30F                  		add	bx, 15
 12728                                  		;and	bx, 0FFF0h
 12729                                  		; 10/12/2022
 12730 000013B1 80E3F0                  		and	bl, 0F0h
 12731                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 12732 000013B4 011E[F508]              		add	[FreeHMAPtr], bx
 12733 000013B8 7506                    		jnz	short InsuffHMA
 12734 000013BA C706[F508]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 12735                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 12736                                  					; no more HMA if we have wrapped
 12737                                  InsuffHMA:				
 12738 000013C0 1F                      		pop	ds
 12739                                  		; 10/12/2022
 12740                                  try_3:		
 12741 000013C1 EBAF                    		jmp	short ii2f_iret
 12742                                  ; ---------------------------------------------------------------------------
 12743                                  
 12744                                  		; 10/12/2022
 12745                                  ;try_3:					
 12746                                  		;jmp	ii2f_iret
 12747                                  
 12748                                  ; =============== S U B	R O U T	I N E =======================================
 12749                                  
 12750                                  ; 16/10/2022
 12751                                  
 12752                                  ;--------------------------------------------------------------------------
 12753                                  ;
 12754                                  ; procedure : HMAPtr
 12755                                  ;
 12756                                  ;		Gets the offset of the free HMA area ( with respect to
 12757                                  ;							seg ffff )
 12758                                  ;		If DOS has not moved high, tries to move DOS high.
 12759                                  ;		In the course of doing this, it will allocate all the HMA
 12760                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 12761                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 12762                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 12763                                  ;
 12764                                  ;	RETURNS : offset of free HMA in DI
 12765                                  ;		  BIOS_DATA, seg in DS
 12766                                  ;
 12767                                  ;--------------------------------------------------------------------------
 12768                                  
 12769                                  		; 17/10/2022
 12770                                  HMAPtr:
 12771 000013C3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12772                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12773 000013C8 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12774                                  		;mov	di, ds:FreeHMAPtr
 12775 000013CC 83FFFF                  		cmp	di, 0FFFFh
 12776 000013CF 750F                    		jnz	short HMAPtr_retn
 12777 000013D1 803E[FB08]00            		cmp	byte [SysinitPresent], 0
 12778                                  		;cmp	ds:SysinitPresent, 0
 12779 000013D6 7408                    		jz	short HMAPtr_retn
 12780 000013D8 FF1E[F708]              		call	far [MoveDOSIntoHMA]
 12781                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 12782 000013DC 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12783                                  		;mov	di, ds:FreeHMAPtr
 12784                                  HMAPtr_retn:				
 12785 000013E0 C3                      		retn
 12786                                  
 12787                                  ; =============== S U B	R O U T	I N E =======================================
 12788                                  
 12789                                  ; 16/10/2022
 12790                                  
 12791                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 12792                                  ; but go ahead and update direction flag, si, & di
 12793                                  
 12794                                  move_sector:
 12795                                  
 12796                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 12797                                  ; any segment to be a fault. Theoretically, this could be handled
 12798                                  ; by the fault handler and the behavior of an 8086 could be emulated
 12799                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 12800                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 12801                                  ; also handles the fault incorrectly in their ROM BIOS for real
 12802                                  ; mode. Their fault handler was only designed to deal with one
 12803                                  ; special case which occurred in a magazine benchmark, but didn't
 12804                                  ; handle the general case worth beans.
 12805                                  ;
 12806                                  ; Simply changing this code to do a byte loop would work okay but
 12807                                  ; would involve a general case performance hit. Therefore, we'll
 12808                                  ; check for either source or destination offsets being within one
 12809                                  ; sector of the end of their segments and only in that case fall
 12810                                  ; back to a byte move.
 12811                                  
 12812 000013E1 FC                      		cld
 12813 000013E2 51                      		push	cx
 12814 000013E3 B90001                  		mov	cx, 256
 12815 000013E6 81FE00FE                		cmp	si, 0FE00h
 12816 000013EA 770A                    		ja	short movsec_bytes
 12817 000013EC 81FF00FE                		cmp	di, 0FE00h
 12818 000013F0 7704                    		ja	short movsec_bytes
 12819 000013F2 F3A5                    		rep movsw
 12820 000013F4 59                      		pop	cx
 12821 000013F5 C3                      		retn
 12822                                  ; ---------------------------------------------------------------------------
 12823                                  
 12824                                  movsec_bytes:				
 12825 000013F6 D1E1                    		shl	cx, 1
 12826 000013F8 F3A4                    		rep movsb
 12827 000013FA 59                      		pop	cx
 12828 000013FB C3                      		retn
 12829                                  
 12830                                  ; =============== S U B	R O U T	I N E =======================================
 12831                                  
 12832                                  ; 16/10/2022
 12833                                  
 12834                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 12835                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 12836                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 12837                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 12838                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 12839                                  ; but we break down a request when we get an ecc or dma error into several
 12840                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 12841                                  ; number of sectors on a track on the medium, and the request would fail.
 12842                                  ;
 12843                                  ; input conditions:
 12844                                  ;	all registers set up for an int 13 request.
 12845                                  ;
 12846                                  ; output:
 12847                                  ;	dh - contains starting head number for request
 12848                                  ;	cx - contains starting sector and cylinder numbers
 12849                                  ;	(the above may or may not have been changed, and are 0-based)
 12850                                  ;	all other registers preserved.
 12851                                  
 12852                                  check_wrap:	
 12853 000013FC 50                      		push	ax
 12854 000013FD 53                      		push	bx
 12855 000013FE 06                      		push	es
 12856 000013FF 57                      		push	di
 12857 00001400 E86E00                  		call	find_bds	; get pointer to bds for drive in dl
 12858 00001403 7260                    		jb	short no_wrap	; finished if DOS doesn't use it
 12859                                  		; 12/12/2022
 12860 00001405 26F6452301              		test	byte [es:di+23h], 1
 12861                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 12862 0000140A 7459                    		jz	short no_wrap	; no wrapping for removable media
 12863 0000140C 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 12864 00001410 89C8                    		mov	ax, cx
 12865 00001412 83E03F                  		and	ax, 3Fh		; extract sector number
 12866 00001415 39D8                    		cmp	ax, bx		; are we going to wrap?
 12867 00001417 764C                    		jbe	short no_wrap
 12868 00001419 F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 12869                                  
 12870                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 12871                                  ; last sector on that track.
 12872                                  
 12873 0000141B 08E4                    		or	ah, ah
 12874 0000141D 7503                    		jnz	short not_on_bound
 12875                                  		; 18/12/2022
 12876 0000141F 48                      		dec	ax ; *
 12877 00001420 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 12878                                  					; if on	boundary
 12879                                  		;dec	al ; *		; also decrement # of head wraps
 12880                                  not_on_bound:				
 12881 00001422 80E1C0                  		and	cl, 0C0h	; zero out sector #
 12882 00001425 08E1                    		or	cl, ah		; or in	new sector #
 12883 00001427 30E4                    		xor	ah, ah		; ax = # of head wraps
 12884 00001429 40                      		inc	ax
 12885 0000142A 00F0                    		add	al, dh		; add in starting head #
 12886 0000142C 80D400                  		adc	ah, 0		; catch	any carry
 12887 0000142F 263B4515                		cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 12888                                  					; are we going to wrap around a	head?
 12889 00001433 7636                    		jbe	short no_wrap_head ; do	not lose new head number!!
 12890 00001435 52                      		push	dx		; preserve drive number and head number
 12891 00001436 31D2                    		xor	dx, dx
 12892 00001438 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 12893 0000143C F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 12894                                  
 12895                                  ; careful here! if new head # is 0, then we are on the last head.
 12896                                  
 12897 0000143E 09D2                    		or	dx, dx
 12898 00001440 7507                    		jnz	short no_head_bound
 12899 00001442 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 12900                                  
 12901                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 12902                                  
 12903 00001444 09C0                    		or	ax, ax
 12904 00001446 7401                    		jz	short no_head_bound
 12905 00001448 48                      		dec	ax		; reduce number	of cylinder wraps
 12906                                  no_head_bound:				
 12907 00001449 88D7                    		mov	bh, dl		; bh has new head number
 12908 0000144B 5A                      		pop	dx		; restore drive number and head number
 12909 0000144C FECF                    		dec	bh		; get it 0-based
 12910 0000144E 88FE                    		mov	dh, bh		; set up new head number in dh
 12911 00001450 88CF                    		mov	bh, cl
 12912 00001452 80E73F                  		and	bh, 3Fh		; preserve sector number
 12913 00001455 B306                    		mov	bl, 6
 12914 00001457 86CB                    		xchg	cl, bl
 12915 00001459 D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 12916 0000145B 00C5                    		add	ch, al		; add in cylinder wrap
 12917 0000145D 10E3                    		adc	bl, ah		; add in high byte
 12918 0000145F D2E3                    		shl	bl, cl		; move up to ms	end
 12919 00001461 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 12920 00001463 08F9                    		or	cl, bh		; or in	sector number
 12921                                  no_wrap:				
 12922 00001465 F8                      		clc
 12923 00001466 5F                      		pop	di
 12924 00001467 07                      		pop	es
 12925 00001468 5B                      		pop	bx
 12926 00001469 58                      		pop	ax
 12927 0000146A C3                      		retn
 12928                                  ; ---------------------------------------------------------------------------
 12929                                  
 12930                                  no_wrap_head:				
 12931 0000146B 88C6                    		mov	dh, al		; do not lose new head number
 12932 0000146D FECE                    		dec	dh		; get it 0-based
 12933 0000146F EBF4                    		jmp	short no_wrap
 12934                                  
 12935                                  ; =============== S U B	R O U T	I N E =======================================
 12936                                  
 12937                                  ; 16/10/2022
 12938                                  
 12939                                  ; this is a special version of the bds lookup code which is
 12940                                  ; based on physical drives rather than the usual logical drives
 12941                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 12942                                  ; otherwise carry is clear
 12943                                  ;
 12944                                  ; guaranteed to trash no registers except es:di
 12945                                  
 12946                                  		; 19/10/2022
 12947                                  find_bds:	
 12948 00001471 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 12949                                  fbds_1:					
 12950 00001475 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 12951 00001479 7409                    		jz	short fdbs_2
 12952 0000147B 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12953                                  					; go to next bds
 12954 0000147E 83FFFF                  		cmp	di, 0FFFFh
 12955 00001481 75F2                    		jnz	short fbds_1
 12956 00001483 F9                      		stc
 12957                                  fdbs_2:					
 12958 00001484 C3                      		retn
 12959                                  
 12960                                  ; =============== S U B	R O U T	I N E =======================================
 12961                                  
 12962                                  ; 16/10/2022
 12963                                  		; 17/10/2022
 12964                                  doint:
 12965                                  		; 10/12/2022
 12966 00001485 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 12967                                  					; get physical drive number
 12968                                  		; 19/10/2022 - Temporary !
 12969                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 12970                                  		
 12971 00001488 30E4                    		xor	ah, ah
 12972 0000148A 08C0                    		or	al, al
 12973 0000148C 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 12974                                  		; 10/12/2022
 12975 0000148E 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 12976                                  					; get request code
 12977                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 12978 00001491 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 12979                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 12980 00001494 9D                      		popf
 12981                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 12982                                  		; 17/10/2022
 12983 00001495 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 12984                                  		;;call	call_orig13	; call far 70h:797h
 12985                                  					; call far KERNEL_SEGMENT:call_orig13
 12986 0000149A 9C                      		pushf
 12987                                  		; 10/12/2022
 12988 0000149B 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 12989                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 12990                                  dointdone:				
 12991 0000149E C3                      		retn
 12992                                  
 12993                                  ;----------------------------------------------------------------------------
 12994                                  
 12995                                  ; 16/10/2022
 12996                                  
 12997                                  ; this is the true int 13 handler. we parse the request to see if there is
 12998                                  ; a dma violation. if so, depending on the function, we:
 12999                                  ;   read/write break the request into three pieces and move the middle one
 13000                                  ;	       into our internal buffer.
 13001                                  ;
 13002                                  ;   format     copy the format table into the buffer
 13003                                  ;   verify     point the transfer address into the buffer
 13004                                  ;
 13005                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 13006                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 13007                                  ; the offending sector into the buffer below and do the i/o from there.
 13008                                  
 13009                                  ;struc INT13FRAME
 13010                                  ;.oldbp: resw
 13011                                  ;.oldax: resw 
 13012                                  ;.oldbx: resw
 13013                                  ;.oldcx: resw
 13014                                  ;.olddx: resw
 13015                                  ;.oldds: resw	; now we save caller's ds, too
 13016                                  ;.olddd: resd
 13017                                  ;.oldf:	resw
 13018                                  ;end struc
 13019                                  
 13020                                  ;----------------------------------------------------------------------------
 13021                                  
 13022                                  ;   entry conditions:
 13023                                  ;	ah = function
 13024                                  ;	al = number of sectors
 13025                                  ;	es:bx = dma address
 13026                                  ;	cx = packed track and sector
 13027                                  ;	dx = head and drive
 13028                                  ;   output conditions:
 13029                                  ;	no dma violation.
 13030                                  
 13031                                  ;	use extreme caution when working with this code. In general,
 13032                                  ;	  all registers are hot at all times.
 13033                                  ;
 13034                                  ;	question:  does this code handle cases where dma errors
 13035                                  ;	  occur during ecc retries, and where ecc errors occur during
 13036                                  ;	  dma breakdowns???? Hmmmmm.
 13037                                  
 13038                                  ;----------------------------------------------------------------------------
 13039                                  
 13040                                  ; ---------------------------------------------------------------------------
 13041                                  
 13042 0000149F 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 13043                                  
 13044                                  ; 17/10/2022
 13045                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 13046                                  ; 09/12/2022
 13047                                  DTYPEARRAY equ dtype_array
 13048                                  
 13049                                  ; ---------------------------------------------------------------------------
 13050                                  
 13051                                  ; stick some special stuff out of mainline
 13052                                  
 13053                                  ; we know we're doing a format command. if we have changeline
 13054                                  ; support, then flag some special changed stuff and set changed
 13055                                  ; by format bit for all logical drives using this physical drive
 13056                                  
 13057                                  format_special_stuff:			
 13058 000014A3 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 13059 000014A8 7459                    		jz	short format_special_stuff_done ; brif not
 13060 000014AA 53                      		push	bx
 13061 000014AB BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 13062 000014AE E83804                  		call	set_changed_dl	; indicate that media changed by format
 13063 000014B1 5B                      		pop	bx
 13064 000014B2 EB4F                    		jmp	short format_special_stuff_done
 13065                                  ; ---------------------------------------------------------------------------
 13066                                  
 13067                                  ; 16/10/2022
 13068                                  
 13069                                  ; we know we've got ec35's on the system. Now see if we're doing
 13070                                  ; a floppy. If so, create a mask and see if this particular
 13071                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 13072                                  
 13073                                  		; 19/10/2022
 13074                                  ec35_special_stuff:			
 13075 000014B4 84D2                    		test	dl, dl		; floppy or hard disk?
 13076 000014B6 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 13077 000014B8 50                      		push	ax		; see if this PARTICULAR drive is ec35
 13078 000014B9 51                      		push	cx
 13079 000014BA 88D1                    		mov	cl, dl		; turn drive number into bit map
 13080 000014BC B001                    		mov	al, 1		; assume drive 0
 13081 000014BE D2E0                    		shl	al, cl		; shift	over correct number of times
 13082 000014C0 8406[3105]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 13083 000014C4 59                      		pop	cx
 13084 000014C5 58                      		pop	ax
 13085 000014C6 7442                    		jz	short ec35_special_stuff_done
 13086                                  					; done if this floppy is not an	ec35
 13087 000014C8 53                      		push	bx		; free up a far	pointer	(es:bx)
 13088 000014C9 06                      		push	es
 13089                                  		; 17/10/2022
 13090 000014CA 2EC41E[9F14]            		les	bx, [cs:DTYPEARRAY]
 13091                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 13092                                  					; 0070h:3A65h =	2C7h:14F5h
 13093 000014CF 00D3                    		add	bl, dl
 13094 000014D1 80D700                  		adc	bh, 0		; find entry for this drive
 13095 000014D4 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 13096                                  					; (360k	disk in	360k drive,
 13097                                  					; no double-stepping, 250 kbs transfer rate)
 13098 000014D8 07                      		pop	es
 13099 000014D9 5B                      		pop	bx
 13100 000014DA EB2E                    		jmp	short ec35_special_stuff_done
 13101                                  ; ---------------------------------------------------------------------------
 13102                                  
 13103                                  ; 16/10/2022
 13104                                  
 13105                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 13106                                  ; this function does not reset the common buses after the execution.
 13107                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 13108                                  ; will issue ah=1 (read status) call to reset the buses.
 13109                                  
 13110                                  ps2_special_stuff:			
 13111 000014DC 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 13112                                  					; read driver parm ?
 13113 000014E1 7407                    		jz	short ps2_30_problem
 13114 000014E3 803E[1E00]15            		cmp	byte [prevoper], 15h
 13115                                  					; apparently function 15h fails, too
 13116 000014E8 752D                    		jnz	short ps2_special_stuff_done
 13117                                  ps2_30_problem:				
 13118 000014EA 50                      		push	ax
 13119 000014EB B401                    		mov	ah, 1
 13120                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 13121                                  		; 17/10/2022
 13122 000014ED 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13123                                  		;call	call_orig13	; call far 70:797h
 13124                                  					; call far KERNEL_SEGMENT:call_orig13
 13125 000014F2 58                      		pop	ax
 13126 000014F3 EB22                    		jmp	short ps2_special_stuff_done
 13127                                  ; ---------------------------------------------------------------------------
 13128                                  
 13129                                  ; 17/10/2022
 13130                                  ; 16/10/2022
 13131                                  
 13132                                  ; here is the actual int13 handler
 13133                                  
 13134                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 13135                                  
 13136                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 13137                                  ; vectoring up here from Bios_Data
 13138                                  
 13139                                  		; 19/10/2022
 13140 000014F5 1E                      		push	ds		; save caller's ds register first thing
 13141                                  		;;mov	ds, word [cs:0030h]
 13142                                  					; and set up our own ds -> Bios_Data
 13143 000014F6 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13144                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13145                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13146                                  
 13147                                  ; let the operation proceed. if there is a dma violation, then we do things
 13148                                  
 13149 000014FB A3[1E00]                		mov	[prevoper], ax	; save request
 13150 000014FE 80FC05                  		cmp	ah, 5		; romformat
 13151 00001501 74A0                    		jz	short format_special_stuff
 13152                                  					; go do special stuff for format
 13153                                   format_special_stuff_done:		
 13154 00001503 803E[3105]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 13155 00001508 75AA                    		jnz	short ec35_special_stuff
 13156                                  					; go handle it out of line if so
 13157                                  ec35_special_stuff_done:
 13158                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h		
 13159 0000150A 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13160                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13161                                  		
 13162 0000150F 9C                      		pushf			; save result flags
 13163                                  		
 13164 00001510 803E[3E06]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 13165                                  					; mdl_ps2_30
 13166 00001515 74C5                    		jz	short ps2_special_stuff
 13167                                  					; exit mainline to address special
 13168                                  ps2_special_stuff_done:			; ps2/30 problem if so		
 13169 00001517 9D                      		popf
 13170 00001518 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 13171                                  ret_from_i13:				
 13172 0000151A 1F                      		pop	ds
 13173 0000151B CA0200                  		retf	2		; restore ds &	iret w/flags
 13174                                  ; ---------------------------------------------------------------------------
 13175                                  
 13176                                  ; most of our code exits through here. If carry isn't set, then
 13177                                  ; just do a simple exit. Else doublecheck that we aren't getting
 13178                                  ; a changeline error.
 13179                                  
 13180                                  i13ret_ck_chglinerr:			
 13181 0000151E 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 13182                                  i13_ret_error:				
 13183 00001520 80FC06                  		cmp	ah, 6		; did i	see a change event?
 13184 00001523 7513                    		jnz	short int13b	; skip if wrong	error
 13185 00001525 08D2                    		or	dl, dl		; is this for the hard disk?
 13186 00001527 780F                    		js	short int13b	; yes, ignore
 13187 00001529 803E[7700]00            		cmp	byte [fhave96], 0
 13188 0000152E 7408                    		jz	short int13b	; just in case ROM returned this
 13189                                  					; error	even though it told us it
 13190                                  					; never	would
 13191 00001530 53                      		push	bx
 13192 00001531 BB4000                  		mov	bx, 40h		; fchanged
 13193 00001534 E8B203                  		call	set_changed_dl
 13194 00001537 5B                      		pop	bx
 13195                                  int13b:					
 13196 00001538 F9                      		stc			; now return the error
 13197 00001539 EBDF                    		jmp	short ret_from_i13
 13198                                  ; ---------------------------------------------------------------------------
 13199                                  
 13200                                  ; some kind of error occurred. see if it is dma violation
 13201                                  
 13202                                  goterr13:				
 13203 0000153B 80FC09                  		cmp	ah, 9		; dma error?
 13204 0000153E 747C                    		jz	short gotdmaerr
 13205                                  goterr13_xxxx:				
 13206 00001540 80FC11                  		cmp	ah, 11h		; ecc error?
 13207 00001543 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 13208 00001545 803E[3806]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 13209 0000154A 74D4                    		jz	short i13_ret_error
 13210                                  
 13211 0000154C 803E[1F00]02            		cmp	byte [prevoper+1], 2
 13212                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 13213                                  					; (2 = romread)
 13214                                  					; ECC correction only applies to reads
 13215 00001551 75CD                    		jnz	short i13_ret_error
 13216                                  
 13217 00001553 30E4                    		xor	ah, ah
 13218                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 13219                                  		; 17/10/2022
 13220 00001555 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13221                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13222                                  					; call far 70:797h
 13223 0000155A A1[1E00]                		mov	ax, [prevoper]
 13224 0000155D 30E4                    		xor	ah, ah		; return code =	no error
 13225 0000155F 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 13226 00001561 74B7                    		jz	short ret_from_i13 ; return with carry clear
 13227 00001563 53                      		push	bx
 13228 00001564 51                      		push	cx
 13229 00001565 52                      		push	dx
 13230 00001566 A2[2000]                		mov	[number_of_sec], al
 13231                                  loop_ecc:				
 13232 00001569 B80102                  		mov	ax, 201h	; read one sector
 13233                                  
 13234                                  ; we do reads one sector at a time. this ensures that we will eventually
 13235                                  ; finish the request since ecc errors on one sector do read in that sector.
 13236                                  ;
 13237                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 13238                                  ; that attempt to read more sectors than are available on a particular
 13239                                  ; track.
 13240                                  ;
 13241                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 13242                                  ; this request.
 13243                                  ;
 13244                                  ; at this point, all registers are set up for the call to orig13, except
 13245                                  ; that there may be a starting sector number that is bigger than the number
 13246                                  ; of sectors on a track.
 13247                                  ;
 13248 0000156C E88DFE                  		call	check_wrap	; get correct parameters for int 13
 13249                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 13250                                  		; 17/10/2022
 13251 0000156F 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13252                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13253 00001574 730C                    		jnb	short ok11_op
 13254 00001576 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 13255 00001579 741B                    		jz	short handle_dma_during_ecc
 13256 0000157B 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 13257 0000157E 7510                    		jnz	short ok11_exit_err
 13258                                  		; 10/12/2022
 13259                                  		; xor ax ax -> ah = 0
 13260                                  		;mov	ah, 0		; ecc error. reset the system again.
 13261 00001580 31C0                    		xor	ax, ax		; clear	the error code so that if this
 13262                                  					; was the last sector, no error	code
 13263                                  					; will be returned for the corrected
 13264                                  					; read.	(clear carry too.)
 13265                                  ok11_op:				
 13266 00001582 FE0E[2000]              		dec	byte [number_of_sec]
 13267 00001586 7409                    		jz	short ok11_exit	; all done?
 13268 00001588 FEC1                    		inc	cl		; advance sector number
 13269                                  					; add 200h to address
 13270 0000158A FEC7                    		inc	bh
 13271 0000158C FEC7                    		inc	bh
 13272 0000158E EBD9                    		jmp	short loop_ecc
 13273                                  ; ---------------------------------------------------------------------------
 13274                                  
 13275                                  ; locate error returns centrally
 13276                                  
 13277                                  ok11_exit_err:				
 13278 00001590 F9                      		stc			; set carry bit again.
 13279                                  ok11_exit:				
 13280 00001591 5A                      		pop	dx
 13281 00001592 59                      		pop	cx
 13282 00001593 5B                      		pop	bx
 13283 00001594 EB88                    		jmp	short i13ret_ck_chglinerr
 13284                                  ; ---------------------------------------------------------------------------
 13285                                  
 13286                                  ; do the single sector read again, this time into our temporary
 13287                                  ; buffer, which is guaranteed not to have a DMA error, then
 13288                                  ; move the data to its proper location and proceed
 13289                                  
 13290                                  handle_dma_during_ecc:			
 13291 00001596 06                      		push	es
 13292 00001597 53                      		push	bx
 13293 00001598 BB[4E01]                		mov	bx, disksector
 13294 0000159B 1E                      		push	ds
 13295 0000159C 07                      		pop	es		; point es:bx to buffer
 13296 0000159D B80102                  		mov	ax, 201h	; read one sector
 13297                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 13298                                  		; 17/10/2022
 13299 000015A0 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13300                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13301 000015A5 5B                      		pop	bx
 13302 000015A6 07                      		pop	es
 13303 000015A7 7305                    		jnb	short handle_dma_during_ecc_noerr
 13304 000015A9 80FC11                  		cmp	ah, 11h
 13305 000015AC 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 13306                                  
 13307                                  ; now we're kosher. Copy the data to where it belongs and resume
 13308                                  ; the ECC looping code.
 13309                                  
 13310                                  handle_dma_during_ecc_noerr:		
 13311 000015AE 56                      		push	si
 13312 000015AF 57                      		push	di
 13313 000015B0 89DF                    		mov	di, bx
 13314 000015B2 BE[4E01]                		mov	si, disksector
 13315 000015B5 E829FE                  		call	move_sector
 13316 000015B8 5F                      		pop	di
 13317 000015B9 5E                      		pop	si
 13318 000015BA EBC6                    		jmp	short ok11_op
 13319                                  ; ---------------------------------------------------------------------------
 13320                                  
 13321                                  ; we truly have a dma violation. restore register ax and retry the
 13322                                  ; operation as best we can.
 13323                                  
 13324                                  gotdmaerr:				
 13325 000015BC A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 13326 000015BF FB                      		sti
 13327 000015C0 80FC02                  		cmp	ah, 2		; romread
 13328 000015C3 723B                    		jb	short i13_done_dmaerr
 13329                                  					; just pass dma error thru for
 13330                                  					; functions we don't handle
 13331 000015C5 80FC04                  		cmp	ah, 4		; romverify
 13332 000015C8 743C                    		jz	short intverify
 13333 000015CA 80FC05                  		cmp	ah, 5		; romformat
 13334 000015CD 7448                    		jz	short intformat
 13335 000015CF 772F                    		ja	short i13_done_dmaerr
 13336                                  
 13337                                  ; we are doing a read/write call. check for dma problems
 13338                                  
 13339                                  ;	******** set up stack frame here!!! ********
 13340                                  
 13341 000015D1 52                      		push	dx
 13342 000015D2 51                      		push	cx
 13343 000015D3 53                      		push	bx
 13344 000015D4 50                      		push	ax
 13345 000015D5 55                      		push	bp
 13346 000015D6 89E5                    		mov	bp, sp
 13347 000015D8 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 13348 000015DA D1E2                    		shl	dx, 1
 13349 000015DC D1E2                    		shl	dx, 1
 13350 000015DE D1E2                    		shl	dx, 1
 13351 000015E0 D1E2                    		shl	dx, 1		; segment converted to absolute	address
 13352 000015E2 01DA                    		add	dx, bx		; combine with offset
 13353 000015E4 81C2FF01                		add	dx, 511		; simulate a transfer
 13354                                  
 13355                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 13356                                  ; we skip the first transfer and perform the remaining buffering and transfer
 13357                                  
 13358 000015E8 7303                    		jnb	short no_skip_first
 13359 000015EA E98300                  		jmp	bufferx		; restore dh=head & do buffer
 13360                                  ; ---------------------------------------------------------------------------
 13361                                  
 13362                                  no_skip_first:				
 13363 000015ED D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 13364 000015EF B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 13365 000015F1 28F4                    		sub	ah, dh
 13366                                  
 13367                                  ; ah is now the number of sectors that we can successfully write in this
 13368                                  ; segment. if this number is above or equal to the requested number, then we
 13369                                  ; continue the operation as normal. otherwise, we break it into pieces.
 13370                                  ;
 13371                                  ; wait a sec. this is goofy. the whole reason we got here in the
 13372                                  ; first place is because we got a dma error. so it's impossible
 13373                                  ; for the whole block to fit, unless the dma error was returned
 13374                                  ; in error.
 13375                                  
 13376 000015F3 38C4                    		cmp	ah, al		; can we fit it	in?
 13377 000015F5 7236                    		jb	short doblock	; no, perform blocking.
 13378                                  
 13379                                  ; yes, the request fits. let it happen.
 13380                                  
 13381 000015F7 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13382                                  					; set up head number
 13383 000015FA E888FE                  		call	doint
 13384 000015FD E9D900                  		jmp	bad13		; and return from this place
 13385                                  ; ---------------------------------------------------------------------------
 13386                                  
 13387                                  i13_done_dmaerr:			
 13388 00001600 B409                    		mov	ah, 9		; pass dma error thru to caller
 13389 00001602 F9                      		stc
 13390 00001603 E914FF                  		jmp	ret_from_i13	; return with error,
 13391                                  					; we know it's not a changeline error
 13392                                  ; ---------------------------------------------------------------------------
 13393                                  
 13394                                  ; verify the given sectors. place the buffer pointer into our space.
 13395                                  
 13396                                  intverify:				
 13397 00001606 06                      		push	es		; save caller's dma address
 13398 00001607 53                      		push	bx
 13399 00001608 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 13400 00001609 07                      		pop	es
 13401                                  dosimple:				
 13402 0000160A BB[4E01]                		mov	bx, disksector
 13403                                  					; do the i/o from Bios_Data:disksector
 13404                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 13405                                  		; 17/10/2022
 13406 0000160D 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13407                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13408 00001612 5B                      		pop	bx
 13409 00001613 07                      		pop	es
 13410 00001614 E907FF                  		jmp	i13ret_ck_chglinerr
 13411                                  ; ---------------------------------------------------------------------------
 13412                                  
 13413                                  ; format operation. copy the parameter table into Bios_Data:disksector
 13414                                  
 13415                                  intformat:				
 13416 00001617 06                      		push	es
 13417 00001618 53                      		push	bx
 13418 00001619 56                      		push	si
 13419 0000161A 57                      		push	di
 13420 0000161B 1E                      		push	ds
 13421                                  
 13422                                  ; point ds to the caller's dma buffer, es to Bios_Data
 13423                                  ; in other words, swap (ds, es)
 13424                                  
 13425 0000161C 06                      		push	es
 13426 0000161D 1E                      		push	ds
 13427 0000161E 07                      		pop	es
 13428 0000161F 1F                      		pop	ds
 13429 00001620 89DE                    		mov	si, bx
 13430 00001622 BF[4E01]                		mov	di, disksector
 13431 00001625 E8B9FD                  		call	move_sector	; user's data into Bios_Data:disksector
 13432 00001628 1F                      		pop	ds
 13433 00001629 5F                      		pop	di
 13434 0000162A 5E                      		pop	si		; do the i/o from
 13435 0000162B EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 13436                                  ; ---------------------------------------------------------------------------
 13437                                  
 13438                                  ; we can't fit the request into the entire block. perform the operation on
 13439                                  ; the first block.
 13440                                  ;
 13441                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 13442                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 13443                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 13444                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 13445                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 13446                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 13447                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 13448                                  ; doblock will handle the first block of requested sectors within the
 13449                                  ; boundary of this safe value.
 13450                                  
 13451                                  doblock:
 13452                                  
 13453                                  ; try to get the # of sectors/track from bds via rom drive number.
 13454                                  ; for any mini disks installed, here we have to pray that they have the
 13455                                  ; same # of sector/track as the main dos partition disk drive.
 13456                                  				
 13457 0000162D 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 13458                                  					; get head #, drive #
 13459 00001630 51                      		push	cx
 13460 00001631 06                      		push	es
 13461 00001632 57                      		push	di		; ah - # of sectors before dma boundary
 13462                                  					; al - requested # of sectors for i/o.
 13463 00001633 E83BFE                  		call	find_bds
 13464 00001636 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13465                                  		; 12/12/2022
 13466 0000163A 26F6452301              		test	byte [es:di+23h], 1
 13467                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13468 0000163F 5F                      		pop	di
 13469 00001640 07                      		pop	es
 13470 00001641 88E0                    		mov	al, ah		; set al=ah for	floppies
 13471 00001643 7404                    		jz	short doblockflop ; they are track by track operation
 13472 00001645 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 13473 00001647 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 13474                                  doblockflop:				
 13475 00001649 59                      		pop	cx
 13476                                  doblockcontinue:			
 13477 0000164A 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 13478 0000164C 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 13479 0000164E 50                      		push	ax
 13480 0000164F 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 13481 00001651 EB03                    		jmp	short doblockdoint
 13482                                  ; ---------------------------------------------------------------------------
 13483                                  
 13484                                  doblocklast:				
 13485 00001653 88C4                    		mov	ah, al
 13486 00001655 50                      		push	ax
 13487                                  doblockdoint:				; let ah = al =	# of sectors for this shot	
 13488 00001656 E82CFE                  		call	doint
 13489 00001659 727E                    		jb	short bad13	; something happened, bye!
 13490 0000165B 58                      		pop	ax
 13491 0000165C 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 13492                                  					; decrement by the successful operation
 13493 0000165F 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 13494 00001661 00E7                    		add	bh, ah		; advance dma addres
 13495 00001663 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 13496 00001665 38C4                    		cmp	ah, al		; check	the previous value
 13497 00001667 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 13498                                  					; then we are done already.
 13499 00001669 28E0                    		sub	al, ah		; otherwise,
 13500                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 13501 0000166B E88EFD                  		call	check_wrap	; get new cx, dh for the next operation.
 13502 0000166E EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 13503                                  ; ---------------------------------------------------------------------------
 13504                                  
 13505                                  bufferx:				
 13506 00001670 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13507                                  					; set up head number
 13508                                  buffer:					
 13509 00001673 53                      		push	bx
 13510 00001674 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13511 00001677 80FC03                  		cmp	ah, 3		; romwrite
 13512 0000167A 7525                    		jnz	short doread	;
 13513                                  					
 13514                                  ; copy the offending sector into local buffer
 13515                                  
 13516 0000167C 06                      		push	es
 13517 0000167D 1E                      		push	ds
 13518 0000167E 56                      		push	si
 13519 0000167F 57                      		push	di
 13520 00001680 1E                      		push	ds		; exchange segment registers
 13521 00001681 06                      		push	es
 13522 00001682 1F                      		pop	ds
 13523 00001683 07                      		pop	es
 13524 00001684 BF[4E01]                		mov	di, disksector	; where to move
 13525 00001687 57                      		push	di		; save it
 13526 00001688 89DE                    		mov	si, bx		; source
 13527 0000168A E854FD                  		call	move_sector	; move sector into local buffer
 13528 0000168D 5B                      		pop	bx		; new transfer address
 13529                                  					; (es:bx = Bios_Data:diskbuffer)
 13530 0000168E 5F                      		pop	di		; restore caller's di & si
 13531 0000168F 5E                      		pop	si
 13532 00001690 1F                      		pop	ds		; restore Bios_Data
 13533                                  
 13534                                  ; see if we are wrapping around a track or head
 13535                                  
 13536 00001691 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 13537                                  					; get drive number
 13538 00001693 8A5608                  		mov	dl, [bp+8]
 13539 00001696 E863FD                  		call	check_wrap	; sets up registers if wrap-around
 13540                                  					;
 13541                                  					; ah is	function
 13542                                  					; al is	1 for single sector transfer
 13543                                  					; es:bx	is local transfer addres
 13544                                  					; cx is	track/sector number
 13545                                  					; dx is	head/drive number
 13546                                  					; si,di	unchanged
 13547 00001699 E8E9FD                  		call	doint
 13548 0000169C 07                      		pop	es		; restore caller's dma segment
 13549 0000169D 723A                    		jb	short bad13	; go clean up
 13550 0000169F EB22                    		jmp	short dotail
 13551                                  ; ---------------------------------------------------------------------------
 13552                                  
 13553                                  ; reading a sector. do int first, then move things around
 13554                                  
 13555                                  doread:					
 13556 000016A1 06                      		push	es
 13557 000016A2 53                      		push	bx
 13558 000016A3 1E                      		push	ds		; es = Bios_Code
 13559 000016A4 07                      		pop	es
 13560 000016A5 BB[4E01]                		mov	bx, disksector
 13561 000016A8 B001                    		mov	al, 1
 13562 000016AA 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13563                                  					; get drive number
 13564 000016AD E84CFD                  		call	check_wrap	;
 13565                                  					; ah = function
 13566                                  					; al = 1 for single sector
 13567                                  					; es:bx	points to local	buffer
 13568                                  					; cx, dx are track/sector, head/drive
 13569 000016B0 E8D2FD                  		call	doint
 13570 000016B3 5B                      		pop	bx
 13571 000016B4 07                      		pop	es
 13572 000016B5 7222                    		jb	short bad13
 13573 000016B7 56                      		push	si
 13574 000016B8 57                      		push	di
 13575 000016B9 89DF                    		mov	di, bx
 13576 000016BB BE[4E01]                		mov	si, disksector
 13577 000016BE E820FD                  		call	move_sector
 13578 000016C1 5F                      		pop	di
 13579 000016C2 5E                      		pop	si
 13580                                  
 13581                                  ; note the fact that we've done 1 more sector
 13582                                  
 13583                                  dotail:					
 13584 000016C3 5B                      		pop	bx		; retrieve new dma area
 13585 000016C4 80C702                  		add	bh, 2		; advance over sector
 13586 000016C7 41                      		inc	cx
 13587 000016C8 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 13588 000016CB F8                      		clc
 13589 000016CC FEC8                    		dec	al
 13590 000016CE 7409                    		jz	short bad13	; no more i/o
 13591                                  
 13592                                  ; see if we wrap around a track or head boundary with starting sector
 13593                                  ; we already have the correct head number to pass to check_wrap
 13594                                  
 13595 000016D0 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13596 000016D3 E826FD                  		call	check_wrap
 13597 000016D6 E8ACFD                  		call	doint
 13598                                  
 13599                                  ; we are done. ax has the final code; we throw away what we got before
 13600                                  
 13601                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 13602                                  ;	   or we've finished. If carry is set now, our only
 13603                                  ;	   hope for salvation is that it was a read operation
 13604                                  ;	   and the error code is ECC error. In that case, we'll
 13605                                  ;	   just pop the registers and go do the old ECC thing.
 13606                                  ;	   When the DMA error that got us here in the first
 13607                                  ;	   place occurs, it'll handle it.
 13608                                  
 13609                                  bad13:					
 13610 000016D9 89EC                    		mov	sp, bp
 13611 000016DB 5D                      		pop	bp
 13612 000016DC 5B                      		pop	bx
 13613 000016DD 5B                      		pop	bx
 13614 000016DE 59                      		pop	cx
 13615 000016DF 5A                      		pop	dx
 13616 000016E0 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 13617 000016E2 E935FE                  		jmp	ret_from_i13	; non-error exit
 13618                                  ; ---------------------------------------------------------------------------
 13619                                  
 13620                                  xgoterr13_xxxx:				
 13621 000016E5 E958FE                  		jmp	goterr13_xxxx
 13622                                  
 13623                                  ; ---------------------------------------------------------------------------
 13624                                  		; 10/12/2022
 13625                                  		;db 	0
 13626                                  ; ---------------------------------------------------------------------------
 13627                                  
 13628                                  ;Bios_Code ends
 13629                                  
 13630                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13631                                  
 13632                                  ;-----------------------------------------------------------------------------
 13633                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 13634                                  ;-----------------------------------------------------------------------------
 13635                                  ; 17/03/2019 - Retro DOS v4.0
 13636                                  
 13637                                  		; 19/10/2022
 13638                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 13639 000016E8 8A26[7500]              		mov	ah, [drvmax]
 13640 000016EC BF[8706]                		mov	di, dskdrvs
 13641 000016EF 1E                      		push	ds		; pass result in es:di
 13642 000016F0 07                      		pop	es
 13643 000016F1 E9C4EE                  		jmp	SetPtrSav
 13644                                  
 13645                                  ; =============== S U B	R O U T	I N E =======================================
 13646                                  
 13647                                  ;---------------------------------------------------------------------------
 13648                                  ; install_bds installs a bds at location es:di into the current linked list of
 13649                                  ; bds maintained by this device driver. it places the bds at the end of the
 13650                                  ; list. Trashes (at least) ax, bx, di, si
 13651                                  ;---------------------------------------------------------------------------
 13652                                  
 13653                                  install_bds:		
 13654 000016F4 1E                      		push	ds		; save Bios_Data segment
 13655 000016F5 BE[1901]                		mov	si, start_bds	; beginning of chain
 13656                                  
 13657                                  		; ds:si now points to link to first bds
 13658                                  		; assume bds list is non-empty
 13659                                  loop_next_bds:				
 13660 000016F8 C534                    		lds	si, [si]	; [si+BDS.link]
 13661                                  					; fetch	next bds
 13662 000016FA 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 13663 000016FE 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 13664                                  					; drive	with new one?
 13665 00001701 7518                    		jnz	short next_bds
 13666 00001703 B310                    		mov	bl, 10h		; fi_am_mult
 13667 00001705 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13668                                  					; set both of them to i_am_mult	if so
 13669 00001709 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 13670 0000170C 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 13671                                  					; we don't own it
 13672 00001711 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 13673                                  					; determine if changeline available
 13674 00001714 80E302                  		and	bl, 2		; fchangeline
 13675 00001717 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13676                                  next_bds:				
 13677 0000171B 833CFF                  		cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 13678                                  					; are we at end	of list?
 13679 0000171E 75D8                    		jnz	short loop_next_bds
 13680 00001720 8C4402                  		mov	word [si+2], es ; [si+BDS.link+2],es
 13681                                  					; install bds
 13682 00001723 893C                    		mov	[si], di
 13683 00001725 26C705FFFF              		mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 13684                                  					; set next pointer to null
 13685 0000172A 1F                      		pop	ds
 13686                                  
 13687                                  ; 16/10/2022 (MSDOS 6.0 Code)
 13688                                  ;
 13689                                  ; **** If the new drive has a higher EOT value, we must alter the
 13690                                  ;      'eot' variable appropriately.
 13691                                  ;
 13692                                  ;		; 01/06/2019
 13693                                  ;		;mov	al,[es:di+52]
 13694                                  ;		mov	al,[es:di+BDS.rsecpertrack]
 13695                                  ;
 13696                                  ;		cmp	al,[eot]
 13697                                  ;		jbe	short _eot_ok
 13698                                  ;		mov	[eot],al
 13699                                  
 13700 0000172B C3                      		retn
 13701                                  
 13702                                  ; ---------------------------------------------------------------------------
 13703                                  
 13704                                  ; 17/10/2022
 13705                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 13706                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 13707                                  ; 09/12/2022
 13708                                  DRVLET equ drvlet
 13709                                  SNGMSG equ sngmsg
 13710                                  
 13711                                  ; 16/10/2022
 13712                                  
 13713                                  ;---------------------------------------------------------------------------
 13714                                  ;  ask to swap the disk in drive a:
 13715                                  ;	es:di -> bds
 13716                                  ;	ds -> Bios_Data
 13717                                  ;---------------------------------------------------------------------------
 13718                                  
 13719                                  		; 19/10/2022
 13720 0000172C F606[CE08]01            swpdsk:		test	byte [IsWin386], 1			
 13721                                  		;test	ds:IsWin386, 1	; Is win386 present?
 13722 00001731 7405                    		jz	short no_win386	; no, skip SetFocus
 13723                                  		
 13724                                  		; set focus to the correct VM
 13725                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 13726                                  		; 17/10/2022
 13727 00001733 9A[CF08]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 13728                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 13729                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 13730                                  no_win386:				
 13731 00001738 51                      		push	cx
 13732 00001739 52                      		push	dx
 13733 0000173A 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 13734                                  					; get the drive	letter
 13735                                  
 13736                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 13737                                  ;           then existing dsk is drive A & vice versa
 13738                                  
 13739 0000173E 88D6                    		mov	dh, dl
 13740 00001740 80F601                  		xor	dh, 1
 13741 00001743 29C9                    		sub	cx, cx		; nobody has handled swap disk
 13742 00001745 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 13743                                  					; broad	cast code for swap disk
 13744                                  					; Broadcast it
 13745 00001748 CD2F                    		int	2Fh	
 13746 0000174A 41                      		inc	cx		; cx == -1 ?
 13747 0000174B 741E                    		jz	short swpdsk9	; somebody has handled it
 13748                                  
 13749                                  ; using a different drive in a one drive system so request the user change disks
 13750                                  
 13751 0000174D 80C241                  		add	dl, 'A'
 13752                                  		; 17/10/2022
 13753 00001750 2E8816[8A17]            		mov	[cs:DRVLET], dl
 13754                                  		; 16/10/2022
 13755                                  		;;mov	byte [cs:drvlet], dl
 13756                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 13757                                  					; 0070h:3D54h =	2C7h:17E4h
 13758 00001755 BE[6E17]                		mov	si, SNGMSG
 13759                                  		;mov	si, 17C8h	; sngmsg
 13760                                  					; 0070h:3D38h =	2C7h:17C8h
 13761 00001758 53                      		push	bx
 13762 00001759 2E                      		cs
 13763 0000175A AC                      		lodsb			; get the next character of the message
 13764                                  		;lods	byte ptr cs:[si]
 13765                                  wrmsg_loop:				
 13766 0000175B CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 13767                                  					; AL = character to display
 13768 0000175D 2E                      		cs
 13769 0000175E AC                      		lodsb
 13770                                  		;lods	byte ptr cs:[si] ; cs lodsb
 13771                                  					; get the next character of the	message
 13772 0000175F 08C0                    		or	al, al
 13773 00001761 75F8                    		jnz	short wrmsg_loop
 13774 00001763 E8A1EA                  		call	con_flush	; flush out keyboard queue
 13775                                  					; call rom-bios
 13776 00001766 30E4                    		xor	ah, ah
 13777 00001768 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 13778                                  					; Return: AH = scan code, AL = character
 13779 0000176A 5B                      		pop	bx
 13780                                  swpdsk9:				
 13781 0000176B 5A                      		pop	dx
 13782 0000176C 59                      		pop	cx
 13783 0000176D C3                      		retn
 13784                                  
 13785                                  ; ---------------------------------------------------------------------------
 13786                                  
 13787                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13788                                  
 13789                                  ;--------------------------------------------------------
 13790                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 13791                                  ;--------------------------------------------------------
 13792                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 13793                                  ;--------------------------------------------------------
 13794                                  ; 17/03/2019 - Retro DOS v4.0
 13795                                  
 13796                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 13797 0000176E 0D0A                    sngmsg:		db 0Dh,0Ah
 13798 00001770 496E73657274206469-     		db 'Insert diskette for drive '
 13798 00001779 736B6574746520666F-
 13798 00001782 7220647269766520   
 13799                                  
 13800                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 13801 0000178A 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 13801 00001793 65737320616E79206B-
 13801 0000179C 6579207768656E2072-
 13801 000017A5 656164790D0A       
 13802 000017AB 0A00                    		db 0Ah,0
 13803                                  
 13804                                  ; =============== S U B	R O U T	I N E =======================================
 13805                                  
 13806                                  ;---------------------------------------------------------------------------
 13807                                  ; input : es:di points to current bds for drive.
 13808                                  ; return : zero set if no open files
 13809                                  ;	   zero reset if open files
 13810                                  ;---------------------------------------------------------------------------
 13811                                  
 13812                                  chkopcnt:		
 13813 000017AD 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 13814 000017B2 C3                      		retn
 13815                                  
 13816                                  ; =============== S U B	R O U T	I N E =======================================
 13817                                  
 13818                                  ;---------------------------------------------------------------------------
 13819                                  ; at media check time, we need to really get down and check what the change is.
 13820                                  ; this is guaranteed to be expensive.
 13821                                  ;
 13822                                  ;	es:di -> bds, ds -> Bios_Data
 13823                                  ;---------------------------------------------------------------------------
 13824                                  
 13825                                  mediacheck:	
 13826 000017B3 E885F0                  		call	checksingle	; make sure correct disk is in place
 13827 000017B6 31F6                    		xor	si, si
 13828 000017B8 E85501                  		call	haschange
 13829 000017BB 742F                    		jz	short mediaret
 13830 000017BD E84401                  		call	checkromchange
 13831 000017C0 752B                    		jnz	short mediadovolid
 13832 000017C2 50                      		push	ax
 13833 000017C3 52                      		push	dx
 13834 000017C4 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13835                                  					; set logical drive number
 13836 000017C8 B416                    		mov	ah, 16h
 13837 000017CA CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 13838                                  					; DL = drive to	check
 13839                                  					; Return: AH = disk change status
 13840 000017CC 5A                      		pop	dx
 13841 000017CD 58                      		pop	ax
 13842 000017CE 721D                    		jb	short mediadovolid
 13843 000017D0 BE0100                  		mov	si, 1		; signal no change
 13844                                  
 13845                                  ; there are some drives with changeline that "lose" the changeline indication
 13846                                  ; if a different drive is accessed after the current one. in order to avoid
 13847                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 13848                                  ; is not active and we are accessing a different drive from the last one.
 13849                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 13850                                  ; status.
 13851                                  		; 19/10/2022
 13852 000017D3 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 13853 000017D7 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 13854                                  					; (If the last drive accessed is not current drive
 13855                                  					; media	change status may be incorrect.	So,
 13856                                  					; "I don't now" will be returned even if it is indicated
 13857                                  					; as media is not changed.)
 13858 000017DB 740F                    		jz	short mediaret	; (same	drive,
 13859                                  					; media	changeline indication is reliable)
 13860                                  
 13861                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 13862                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 13863                                  ; "not changed" here since the 2 second test said no change.)
 13864                                  
 13865 000017DD 50                      		push	ax
 13866 000017DE 51                      		push	cx
 13867 000017DF 52                      		push	dx
 13868 000017E0 E870ED                  		call	Check_Time_Of_Access
 13869 000017E3 5A                      		pop	dx
 13870 000017E4 59                      		pop	cx
 13871 000017E5 58                      		pop	ax
 13872 000017E6 09F6                    		or	si, si
 13873 000017E8 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 13874                                  					; (volume id will be checked)
 13875 000017EA 31F6                    		xor	si, si		; return "i don't know"
 13876                                  mediaret:				
 13877 000017EC C3                      		retn
 13878                                  ; ---------------------------------------------------------------------------
 13879                                  
 13880                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 13881                                  ; because this may be different since we only set medbyt when doing a read
 13882                                  ; or write.
 13883                                  
 13884                                  mediadovolid:				
 13885 000017ED E807EE                  		call	GetBp		; build	a new bpb in current bds
 13886 000017F0 72FA                    		jb	short mediaret
 13887 000017F2 E82D00                  		call	check_vid
 13888 000017F5 73F5                    		jnb	short mediaret
 13889 000017F7 E9D6F3                  		jmp	maperror	; fix up al for	return to dos
 13890                                  ; ---------------------------------------------------------------------------
 13891                                  
 13892                                  ; simple, quick check of latched change. if no indication, then return
 13893                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 13894                                  ; return and set al = 15 (for invalid media change) which will be returned to
 13895                                  ; dos.
 13896                                  ;
 13897                                  ; for dos 3.3, this will work only for the drive that has changeline.
 13898                                  
 13899                                  ;	call with es:di -> bds, ds -> Bios_Data
 13900                                  ;	***** warning:  this routine will return one level up on the stack
 13901                                  ;			if an error occurs!
 13902                                  
 13903                                  checklatchio:	
 13904                                  
 13905                                  ; if returning fake bpb then assume the disk has not changed
 13906                                  			
 13907 000017FA E8B0FF                  		call	chkopcnt
 13908 000017FD 741B                    		jz	short checkret	; done if zero
 13909                                  
 13910                                  ; check for past rom indications. if no rom change indicated, then return ok.
 13911                                  
 13912 000017FF E80201                  		call	checkromchange
 13913 00001802 7416                    		jz	short checkret
 13914                                  
 13915                                  ; we now see that a change line has been seen in the past. let's do the
 13916                                  ; expensive verification.
 13917                                  
 13918 00001804 E8F0ED                  		call	GetBp		; build	bpb in current bds
 13919 00001807 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 13920 00001809 E81600                  		call	check_vid
 13921 0000180C 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 13922 0000180E 09F6                    		or	si, si		; is changed for sure?
 13923 00001810 7908                    		jns	short checkret
 13924 00001812 E87D00                  		call	returnvid
 13925                                  checklatchret:				
 13926 00001815 E8B8F3                  		call	maperror	; fix up al for	return to dos
 13927                                  ret_no_error_map:			
 13928 00001818 F9                      		stc
 13929 00001819 5E                      		pop	si		; pop off return address
 13930                                  checkret:				
 13931 0000181A C3                      		retn
 13932                                  ; ---------------------------------------------------------------------------
 13933                                  
 13934                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 13935                                  ; only if there was a disk error. return that error code in ax.
 13936                                  ;
 13937                                  ;	called with es:di -> bds, ds -> Bios_Data
 13938                                  
 13939                                  checkfatvid:				
 13940 0000181B E8CD01                  		call	fat_check	; check	the fat	and the	vid
 13941 0000181E 09F6                    		or	si, si
 13942 00001820 7827                    		js	short changed_drv ;
 13943                                  
 13944                                  ; the fat was the same. fall into check_vid and check volume id.
 13945                                  
 13946                                  		; fall into check_vid
 13947                                  
 13948                                  ; =============== S U B	R O U T	I N E =======================================
 13949                                  
 13950                                  ; now with the extended boot record, the logic should be enhanced.
 13951                                  ;
 13952                                  ; if it is the extended boot record, then we check the volume serial
 13953                                  ; number instead of volume id. if it is different, then set si to -1.
 13954                                  ;
 13955                                  ; if it is same, then si= 1 (no change).
 13956                                  ;
 13957                                  ; if it is not the extended boot record, then just follows the old
 13958                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 13959                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 13960                                  ; should have already covered by extended boot structure checking.
 13961                                  ; so, we will return "i don't know" by setting si to 0.
 13962                                  ;
 13963                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 13964                                  ; (this will be gauranteed by a successful getbp call right before this
 13965                                  ; routine.)
 13966                                  ;
 13967                                  ;	called with es:di -> bds, ds -> bds
 13968                                  
 13969                                  		; 19/10/2022
 13970                                  check_vid:
 13971                                  
 13972                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 13973                                  ; boot signature. if it is set then go to do the extended
 13974                                  ; id check otherwise continue with code below
 13975                                  
 13976 00001822 803E[7401]29            		cmp	byte [disksector+26h], 29h
 13977                                  					; [disksector+EXT_BOOT.SIG],
 13978                                  					; EXT_BOOT_SIGNATURE
 13979 00001827 7427                    		jz	short do_ext_check_id
 13980 00001829 E8E400                  		call	haschange
 13981 0000182C 74EC                    		jz	short checkret
 13982 0000182E 31F6                    		xor	si, si
 13983 00001830 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 13984                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 13985 00001835 7411                    		jz	short checkfatret ; don't read vol id
 13986                                  					; if not fat system
 13987 00001837 E8F600                  		call	read_volume_id
 13988 0000183A 720C                    		jb	short checkfatret
 13989 0000183C E89B01                  		call	check_volume_id
 13990 0000183F BEFFFF                  		mov	si, 0FFFFh	; -1
 13991                                  					; definitely changed
 13992 00001842 7505                    		jnz	short changed_drv
 13993                                  
 13994 00001844 46                      		inc	si		; not changed
 13995                                  vid_no_changed:				
 13996 00001845 E8C200                  		call	resetchanged
 13997                                  		; 12/12/2022
 13998                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 13999                                  		;clc
 14000                                  checkfatret:				
 14001 00001848 C3                      		retn
 14002                                  ; ---------------------------------------------------------------------------
 14003                                  
 14004                                  		; 12/12/2022
 14005                                  changed_drv:
 14006 00001849 F8                      		clc			; cas -- return	no error
 14007 0000184A C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 14008                                  					; ensure that we ask rom for media
 14009 0000184F C3                      		retn			; check	next time round
 14010                                  ; ---------------------------------------------------------------------------
 14011                                  
 14012                                  ; extended id check
 14013                                  
 14014                                  ; 16/10/2022
 14015                                  
 14016                                  ; the code to check extended id is basically a check to see if the
 14017                                  ; volume serial number is still the same. the volume serial number
 14018                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 14019                                  ; ds:di points to the bds of the drive under consideration.
 14020                                  ; the bds has fields containing the high and low words 
 14021                                  ; of the volume serial number of the media in the drive.
 14022                                  ; compare these fields to the fields mentioned above. if these fields
 14023                                  ; do not match the media has changed and so we should jump to the code
 14024                                  ; starting at ext_changed else return "i don't know" status
 14025                                  ; in the register used for the changeline status and continue executing
 14026                                  ; the code given below. for temporary storage use the register which
 14027                                  ; has been saved and restored around this block.
 14028                                  ;
 14029                                  ; bds fields in inc\msbds.inc
 14030                                  
 14031                                  		; 19/10/2022
 14032                                  do_ext_check_id:			
 14033 00001850 50                      		push	ax
 14034                                  		;mov	ax, word ptr ds:disksector+27h
 14035                                  					; [DiskSector+EXT_BOOT.SERIAL]
 14036 00001851 A1[7501]                		mov	ax, [disksector+27h]
 14037 00001854 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 14038 00001858 750E                    		jnz	short ext_changed
 14039 0000185A A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 14040 0000185D 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 14041 00001861 7505                    		jnz	short ext_changed
 14042 00001863 31F6                    		xor	si, si		; 0
 14043                                  					; don't know
 14044 00001865 58                      		pop	ax
 14045 00001866 EBDD                    		jmp	short vid_no_changed
 14046                                  					; reset the flag
 14047                                  ; ---------------------------------------------------------------------------
 14048                                  
 14049                                  ext_changed:				
 14050 00001868 58                      		pop	ax
 14051 00001869 BEFFFF                  		mov	si, 0FFFFh	; -1
 14052                                  					; disk changed!
 14053                                  		; 12/12/2022
 14054                                  		; ('changed_drv' clears cf)
 14055                                  		;clc
 14056 0000186C EBDB                    		jmp	short changed_drv
 14057                                  
 14058                                  ; ---------------------------------------------------------------------------
 14059                                  
 14060                                  ; at i/o time, we detected the error. now we need to determine whether the
 14061                                  ; media was truly changed or not. we return normally if media change unknown.
 14062                                  ; and we pop off the call and jmp to harderr if we see an error.
 14063                                  ;
 14064                                  ; es:di -> bds
 14065                                  
 14066                                  checkio:				
 14067 0000186E 80FC06                  		cmp	ah, 6
 14068 00001871 75D5                    		jnz	short checkfatret
 14069 00001873 E837FF                  		call	chkopcnt
 14070 00001876 74D0                    		jz	short checkfatret
 14071 00001878 E87CED                  		call	GetBp
 14072 0000187B 7212                    		jb	short no_error_map
 14073 0000187D E89BFF                  		call	checkfatvid
 14074 00001880 7209                    		jb	short checkioret ; disk	error trying to	read in.
 14075 00001882 09F6                    		or	si, si		; is changed for sure?
 14076 00001884 7802                    		js	short checkioerr ; yes changed
 14077 00001886 45                      		inc	bp		; allow	a retry
 14078 00001887 C3                      		retn
 14079                                  ; ---------------------------------------------------------------------------
 14080                                  
 14081                                  checkioerr:				
 14082 00001888 E80700                  		call	returnvid
 14083                                  
 14084                                  checkioret:				
 14085 0000188B F9                      		stc			; make sure carry gets passed through
 14086 0000188C E9F1F2                  		jmp	harderr
 14087                                  ; ---------------------------------------------------------------------------
 14088                                  
 14089                                  no_error_map:				
 14090 0000188F E9F1F2                  		jmp	harderr2
 14091                                  
 14092                                  ; =============== S U B	R O U T	I N E =======================================
 14093                                  
 14094                                  ; return vid sets up the vid for a return to dos.
 14095                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 14096                                  ;  **** trashes si! ****
 14097                                  
 14098                                  returnvid:		
 14099 00001892 BE1600                  		mov	si, 22		; extra
 14100                                  					; offset into pointer to return	value
 14101 00001895 E80700                  		call	vid_into_packet
 14102 00001898 B406                    		mov	ah, 6
 14103 0000189A F9                      		stc
 14104 0000189B C3                      		retn
 14105                                  
 14106                                  ; ---------------------------------------------------------------------------
 14107                                  
 14108                                  ; moves the pointer to the volid for the drive into the original request packet
 14109                                  ; no attempt is made to preserve registers.
 14110                                  ;
 14111                                  ; assumes es:di -> bds
 14112                                  ; **trashes si**
 14113                                  
 14114                                  media_set_vid:				
 14115 0000189C BE0F00                  		mov	si, 15		; trans+1
 14116                                  					; return the value here	in packet
 14117                                  
 14118                                  		; fall into vid_into_packet
 14119                                  
 14120                                  ; =============== S U B	R O U T	I N E =======================================
 14121                                  
 14122                                  ; return pointer to vid in bds at es:di in packet[si]
 14123                                  
 14124                                  		; 19/10/2022
 14125                                  vid_into_packet:
 14126 0000189F 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 14127 000018A0 C51E[1200]              		lds	bx, [ptrsav]
 14128 000018A4 83C74B                  		add	di, 75		; BDS.volid
 14129 000018A7 8938                    		mov	[bx+si], di
 14130 000018A9 83EF4B                  		sub	di, 75		; BDS.volid
 14131 000018AC 8C4002                  		mov	[bx+si+2], es
 14132 000018AF 1F                      		pop	ds
 14133                                  dofloppy:	; 18/12/2022
 14134 000018B0 C3                      		retn
 14135                                  
 14136                                  ; ---------------------------------------------------------------------------
 14137                                  
 14138                                  ;----------------------------------------------------------------------------
 14139                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 14140                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 14141                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 14142                                  ;   of getbp. for 3.5" media, we just return.
 14143                                  ;
 14144                                  ;   inputs:	es:di point to correct bds for this drive
 14145                                  ;		ah has media byte
 14146                                  ;
 14147                                  ;   outputs:	carry clear
 14148                                  ;		    no registers modified
 14149                                  ;		carry set
 14150                                  ;		    al = sectors/fat
 14151                                  ;		    bh = number of root directory entries
 14152                                  ;		    bl = sectors per track
 14153                                  ;		    cx = number of sectors
 14154                                  ;		    dh = sectors per allocation unit
 14155                                  ;		    dl = number of heads
 14156                                  ;
 14157                                  ;----------------------------------------------------------------------------
 14158                                  
 14159                                  hidensity:
 14160                                  
 14161                                  ; check for correct drive
 14162                                  		
 14163                                  		; 12/12/2022
 14164 000018B1 26F6452302              		test	byte [es:di+23h], 2		
 14165                                  		;test	word [es:di+23h], 2 ; is it special?	
 14166                                  					; [es:di+BDS.flags], fchangeline
 14167 000018B6 74F8                    		jz	short dofloppy	; no, do normal floppy test
 14168                                  
 14169                                  ; we have a media byte that is pretty complex. examine drive information
 14170                                  ; table to see what kind it is.
 14171                                  
 14172 000018B8 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 14173 000018BD 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 14174                                  					; yes, use fatid...
 14175                                  ; 96 tpi drive?
 14176 000018BF 80FCF9                  		cmp	ah, 0F9h
 14177 000018C2 75EC                    		jnz	short dofloppy
 14178                                  
 14179                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 14180                                  ;------ a 720K diskette
 14181                                  
 14182 000018C4 26807D2207              		cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 14183                                  					; ffOther
 14184 000018C9 7418                    		jz	short Is720K
 14185 000018CB 26807D2209              		cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 14186                                  					; ff288
 14187 000018D0 7411                    		jz	short Is720K
 14188 000018D2 B007                    		mov	al, 7		; seven	sectors	/ fat
 14189 000018D4 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 14190                                  					; 224 root dir entries
 14191                                  					; & 0Fh sector max
 14192 000018D7 B96009                  		mov	cx, 2400	; 80*15*2
 14193                                  					; 80 tracks, 15 sectors/track,
 14194                                  					; 2 sides
 14195 000018DA BA0201                  		mov	dx, 258		; 1*256+2
 14196                                  					; sectors/allocation unit
 14197                                  					; & head max
 14198 000018DD 83C402                  		add	sp, 2		; pop off return address
 14199 000018E0 E986ED                  		jmp	Has1		; return to tail of getbp
 14200                                  ; ---------------------------------------------------------------------------
 14201                                  
 14202                                  Is720K:					
 14203 000018E3 83C402                  		add	sp, 2		; pop off return address
 14204 000018E6 E947ED                  		jmp	Has720K		; return to 720K code
 14205                                  ; ---------------------------------------------------------------------------
 14206                                  
 14207                                  		; 18/12/2022
 14208                                  ;dofloppy:				
 14209                                  		;retn
 14210                                  
 14211                                  ; =============== S U B	R O U T	I N E =======================================
 14212                                  
 14213                                  ; 16/10/2022
 14214                                  
 14215                                  ;---------------------------------------------------------------------------
 14216                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 14217                                  ;		   essentially used to indicate changeline, or format.
 14218                                  ;
 14219                                  ;   inputs:	dl contains physical drive number
 14220                                  ;		bx contains bits to set in the flag field in the bdss
 14221                                  ;   outputs:	none
 14222                                  ;   registers modified: flags
 14223                                  ;
 14224                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 14225                                  ;
 14226                                  ; in the virtual drive system we *must* flag the other drives as being changed
 14227                                  ;---------------------------------------------------------------------------
 14228                                  
 14229                                  set_changed_dl:	
 14230 000018E9 06                      		push	es
 14231 000018EA 57                      		push	di
 14232                                  		;les	di, ds:start_bds
 14233                                  		; 19/10/2022
 14234 000018EB C43E[1901]              		les	di, [start_bds]
 14235                                  
 14236                                  ; note: we assume that the list is non-empty
 14237                                  
 14238                                  scan_bds:				
 14239 000018EF 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 14240 000018F3 7504                    		jnz	short get_next_bds
 14241                                  
 14242                                  ; someone may complain, but this *always* must be done when a disk change is
 14243                                  ; noted. there are *no* other compromising circumstances.
 14244                                  
 14245 000018F5 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 14246                                  					; signal change	on other drive
 14247                                  get_next_bds:				
 14248 000018F9 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 14249                                  					; go to	next bds
 14250 000018FC 83FFFF                  		cmp	di, 0FFFFh
 14251 000018FF 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 14252 00001901 5F                      		pop	di
 14253 00001902 07                      		pop	es
 14254 00001903 C3                      		retn
 14255                                  
 14256                                  ; =============== S U B	R O U T	I N E =======================================
 14257                                  
 14258                                  ;---------------------------------------------------------------------------
 14259                                  ; checkromchange - see if external program has diddled rom change line.
 14260                                  ;
 14261                                  ;   inputs:	es:di points to current bds.
 14262                                  ;   outputs:	zero set - no change
 14263                                  ;		zero reset - change
 14264                                  ;   registers modified: none
 14265                                  ;---------------------------------------------------------------------------
 14266                                  
 14267                                  checkromchange:	
 14268                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 14269                                  		; 10/12/2022
 14270 00001904 26F6452340              		test	byte [es:di+23h], 40h
 14271                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 14272                                  					; fchanged
 14273 00001909 C3                      		retn
 14274                                  
 14275                                  ; =============== S U B	R O U T	I N E =======================================
 14276                                  
 14277                                  ;---------------------------------------------------------------------------
 14278                                  ; resetchanged - restore value of change line
 14279                                  ;
 14280                                  ;   inputs:	es:di points to current bds
 14281                                  ;   outputs:	none
 14282                                  ;   registers modified: none
 14283                                  ;---------------------------------------------------------------------------
 14284                                  
 14285                                  resetchanged:	
 14286                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 14287                                  		; 10/12/2022
 14288 0000190A 26806523BF              		and	byte [es:di+23h], 0BFh
 14289                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 14290                                  					; ~fchanged
 14291 0000190F C3                      		retn
 14292                                  
 14293                                  ; =============== S U B	R O U T	I N E =======================================
 14294                                  
 14295                                  ;---------------------------------------------------------------------------
 14296                                  ; haschange - see if drive can supply change line
 14297                                  ;
 14298                                  ;   inputs:	es:di points to current bds
 14299                                  ;   outputs:	zero set - no change line available
 14300                                  ;		zero reset - change line available
 14301                                  ;   registers modified: none
 14302                                  ;---------------------------------------------------------------------------
 14303                                  
 14304                                  haschange:
 14305                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 14306                                  		; 10/12/2022
 14307 00001910 26F6452302              		test	byte [es:di+23h], 2		
 14308                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 14309                                  					; fchangeline
 14310 00001915 C3                      		retn
 14311                                  
 14312                                  ; ---------------------------------------------------------------------------
 14313                                  
 14314                                  ; 16/10/2022
 14315                                  
 14316                                  ;-------------------------------------------------------------------------
 14317                                  ; set_volume_id      -	main routine, calls other routines.
 14318                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 14319                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 14320                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 14321                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 14322                                  ;-------------------------------------------------------------------------
 14323                                  
 14324                                  ; set_volume_id
 14325                                  ;   if drive has changeline support, read in and set the volume_id
 14326                                  ; and the last fat_id byte. if no change line support then do nothing.
 14327                                  ;
 14328                                  ;   on entry:
 14329                                  ;	es:di points to the bds for this disk.
 14330                                  ;	ah contains media byte
 14331                                  ;
 14332                                  ;   on exit:
 14333                                  ;	carry clear:
 14334                                  ;	   successful call
 14335                                  ;	carry set
 14336                                  ;	   error and ax has error code
 14337                                  
 14338                                  set_volume_id:				
 14339 00001916 52                      		push	dx		; save registers
 14340 00001917 50                      		push	ax
 14341 00001918 E8F5FF                  		call	haschange	; does drive have changeline support?
 14342 0000191B 740B                    		jz	short setvret	; no, get out
 14343 0000191D E81000                  		call	read_volume_id
 14344 00001920 7209                    		jb	short seterr
 14345 00001922 E8A200                  		call	transfer_volume_id ; copy the volume id	to special drive
 14346 00001925 E8E2FF                  		call	resetchanged	; restore value	of change line
 14347                                  setvret:				
 14348                                  		; 10/12/2022
 14349                                  		; cf = 0
 14350                                  		;clc			; no error, clear carry flag
 14351 00001928 58                      		pop	ax		; restore registers
 14352 00001929 5A                      		pop	dx
 14353 0000192A C3                      		retn
 14354                                  ; ---------------------------------------------------------------------------
 14355                                  
 14356                                  seterr:					
 14357 0000192B 5A                      		pop	dx		; pop stack but don't overwrite ax
 14358 0000192C 5A                      		pop	dx		; restore dx
 14359 0000192D C3                      		retn
 14360                                  ; ---------------------------------------------------------------------------
 14361 0000192E 0000                    root_sec:	dw 0			; root sector #
 14362                                  
 14363                                  ; 16/10/2022
 14364                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 14365                                  ; 09/12/2022
 14366                                  ROOTSEC equ root_sec
 14367                                  
 14368                                  ; =============== S U B	R O U T	I N E =======================================
 14369                                  
 14370                                  ; 16/10/2022
 14371                                  
 14372                                  ; read_volume_id read the volume id and tells if it has been changed.
 14373                                  ;
 14374                                  ;   on entry:
 14375                                  ;	es:di points to current bds for drive.
 14376                                  ;
 14377                                  ;   on exit:
 14378                                  ;	carry clear
 14379                                  ;	    si = 1  no change
 14380                                  ;	    si = 0  ?
 14381                                  ;	    si = -1 change
 14382                                  ;
 14383                                  ;	carry set:
 14384                                  ;	    error and ax has error code.
 14385                                  
 14386                                  read_volume_id:
 14387 00001930 52                      		push	dx		; preserve registers
 14388 00001931 51                      		push	cx
 14389 00001932 53                      		push	bx
 14390 00001933 50                      		push	ax
 14391 00001934 06                      		push	es		; stack the bds last
 14392 00001935 57                      		push	di
 14393 00001936 1E                      		push	ds		; point es to Bios_Data
 14394 00001937 07                      		pop	es
 14395 00001938 BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14396 0000193B BE[FE08]                		mov	si, nul_vid	; "NO NAME	 "
 14397 0000193E B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 14398 00001941 F3A4                    		rep movsb
 14399 00001943 5F                      		pop	di
 14400 00001944 07                      		pop	es
 14401 00001945 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 14402                                  					; # of fats
 14403 00001949 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 14404                                  					; sectors / fat
 14405 0000194D F6E1                    		mul	cl		; size taken by	fats
 14406 0000194F 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 14407                                  					; add on reserved sectors
 14408                                  					;
 14409                                  					; ax is	now sector # (0	based)
 14410                                  		; 17/10/2022
 14411 00001953 2EA3[2E19]              		mov	[cs:ROOTSEC], ax
 14412                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 14413                                  					; 0070h:3EFFh =	2C7h:198Fh
 14414 00001957 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 14415                                  					; # root dir entries
 14416 0000195B B104                    		mov	cl, 4		; 16 entries/sector
 14417 0000195D D3E8                    		shr	ax, cl		; divide by 16
 14418 0000195F 89C1                    		mov	cx, ax		; cx is	# of sectors to	scan
 14419                                  next_sec:				
 14420 00001961 51                      		push	cx		; save outer loop counter
 14421 00001962 2EA1[2E19]              		mov	ax, [cs:ROOTSEC]
 14422                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 14423                                  					; get sector #
 14424 00001966 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 14425                                  					; sectors / track
 14426 0000196A 31D2                    		xor	dx, dx
 14427 0000196C F7F1                    		div	cx
 14428                                  
 14429                                  ; set up registers for call to read_sector
 14430                                  
 14431 0000196E 42                      		inc	dx		; dx= sectors into track
 14432                                  					; ax= track count from 0
 14433 0000196F 88D1                    		mov	cl, dl		; sector to read
 14434 00001971 31D2                    		xor	dx, dx
 14435 00001973 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 14436                                  					; # heads on this disc
 14437 00001977 88D6                    		mov	dh, dl		; head number
 14438 00001979 88C5                    		mov	ch, al		; track	#
 14439 0000197B E8FBED                  		call	read_sector	; get first sector of the root directory,
 14440                                  					; ds:bx	-> directory sector
 14441 0000197E 7243                    		jb	short readviderr
 14442 00001980 B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 14443 00001983 B008                    		mov	al, 8		; volume label bit
 14444                                  fvid_loop:				
 14445 00001985 803F00                  		cmp	byte [bx], 0 ; end of dir?
 14446 00001988 7436                    		jz	short no_vid	; yes, no vol id
 14447 0000198A 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 14448 0000198D 7405                    		jz	short ent_loop	; yes, skip
 14449 0000198F 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 14450 00001992 7511                    		jnz	short found_vid	; jmp yes
 14451                                  ent_loop:				
 14452 00001994 83C320                  		add	bx, 32		; add length of	directory entry
 14453 00001997 E2EC                    		loop	fvid_loop
 14454 00001999 59                      		pop	cx		; outer loop
 14455 0000199A 2EFF06[2E19]            		inc	word [cs:ROOTSEC]
 14456                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 14457                                  					; next sector
 14458 0000199F E2C0                    		loop	next_sec	; continue
 14459                                  notfound:				
 14460 000019A1 31F6                    		xor	si, si
 14461 000019A3 EB16                    		jmp	short fvid_ret
 14462                                  ; ---------------------------------------------------------------------------
 14463                                  
 14464                                  found_vid:				
 14465 000019A5 59                      		pop	cx		; clean stack of outer loop counter
 14466 000019A6 89DE                    		mov	si, bx		; point	to volume_id
 14467 000019A8 06                      		push	es		; preserve current bds
 14468 000019A9 57                      		push	di
 14469 000019AA 1E                      		push	ds
 14470 000019AB 07                      		pop	es		; point es to Bios_Data
 14471 000019AC BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14472 000019AF B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 14473                                  					; length of string minus nul
 14474 000019B2 F3A4                    		rep movsb		; mov volume label to tmp_vid
 14475 000019B4 30C0                    		xor	al, al
 14476 000019B6 AA                      		stosb			; null terminate
 14477 000019B7 31F6                    		xor	si, si
 14478 000019B9 5F                      		pop	di		; restore current bds
 14479 000019BA 07                      		pop	es
 14480                                  fvid_ret:				
 14481 000019BB 58                      		pop	ax
 14482                                  		; 10/12/2022
 14483                                  		; cf = 0
 14484                                  		;clc
 14485                                  rvidret:				
 14486 000019BC 5B                      		pop	bx		; restore registers
 14487 000019BD 59                      		pop	cx
 14488 000019BE 5A                      		pop	dx
 14489 000019BF C3                      		retn
 14490                                  ; ---------------------------------------------------------------------------
 14491                                  
 14492                                  no_vid:					
 14493 000019C0 59                      		pop	cx		; clean stack of outer loop counter
 14494 000019C1 EBDE                    		jmp	short notfound	; not found
 14495                                  ; ---------------------------------------------------------------------------
 14496                                  
 14497                                  readviderr:				
 14498 000019C3 5E                      		pop	si		; trash the outer loop counter
 14499 000019C4 5E                      		pop	si		; caller's ax, return error code instead 
 14500 000019C5 EBF5                    		jmp	short rvidret
 14501                                  
 14502                                  ; =============== S U B	R O U T	I N E =======================================
 14503                                  
 14504                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 14505                                  ;
 14506                                  ; inputs:	es:di has current bds
 14507                                  ; outputs:	bds for drive has volume id from tmp
 14508                                  
 14509                                  transfer_volume_id:	
 14510 000019C7 57                      		push	di		; copy the volume id from tmp to special drive
 14511 000019C8 56                      		push	si
 14512 000019C9 51                      		push	cx
 14513 000019CA BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14514                                  		;add	di, BDS.volid
 14515 000019CD 83C74B                  		add	di, 75		; BDS.volid
 14516                                  		;mov	cx, VOLID_SIZ
 14517 000019D0 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14518 000019D3 FC                      		cld
 14519 000019D4 F3A4                    		rep movsb
 14520 000019D6 59                      		pop	cx
 14521 000019D7 5E                      		pop	si
 14522 000019D8 5F                      		pop	di
 14523 000019D9 C3                      		retn
 14524                                  
 14525                                  ; =============== S U B	R O U T	I N E =======================================
 14526                                  
 14527                                  ;  check_volume_id - compare volume id in tmp area with
 14528                                  ;		     one expected for drive
 14529                                  ;
 14530                                  ;   inputs:	es:di has current bds for drive
 14531                                  ;   outputs:	zero true means it matched
 14532                                  
 14533                                  check_volume_id:	
 14534 000019DA 57                      		push	di
 14535 000019DB 51                      		push	cx
 14536 000019DC BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14537                                  		;add	di, BDS.volid
 14538 000019DF 83C74B                  		add	di, 75		; BDS.volid
 14539                                  		;mov	cx, VOLID_SIZ
 14540 000019E2 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14541 000019E5 FC                      		cld
 14542 000019E6 F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 14543 000019E8 59                      		pop	cx
 14544 000019E9 5F                      		pop	di
 14545 000019EA C3                      		retn
 14546                                  
 14547                                  ; =============== S U B	R O U T	I N E =======================================
 14548                                  
 14549                                  ;   fat_check - see of the fatid has changed in the specified drive.
 14550                                  ;	      - uses the fat id obtained from the boot sector.
 14551                                  ;
 14552                                  ;   inputs:	medbyt is expected fat id
 14553                                  ;		es:di points to current bds
 14554                                  ;
 14555                                  ;   output:	si = -1 if fat id different,
 14556                                  ;		si = 0 otherwise
 14557                                  ;
 14558                                  ;   no other registers changed.
 14559                                  
 14560                                  fat_check:		
 14561 000019EB 50                      		push	ax
 14562 000019EC 31F6                    		xor	si, si		; say fat id's are same.
 14563 000019EE A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 14564 000019F1 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 14565                                  					; compare it with the bds medbyte
 14566 000019F5 7401                    		jz	short okret1	; carry	clear
 14567 000019F7 4E                      		dec	si
 14568                                  okret1:					
 14569 000019F8 58                      		pop	ax
 14570 000019F9 C3                      		retn
 14571                                  
 14572                                  ; ---------------------------------------------------------------------------
 14573                                  
 14574                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 14575                                  		;times 7 db 0
 14576                                  
 14577                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 14578                                  
 14579                                  		; 09/12/2022
 14580                                  		;times 4 db 0	; 17/10/2022
 14581                                  		;db 4 dup(0)	; times 4 db 0
 14582                                  
 14583                                  ; ---------------------------------------------------------------------------
 14584                                  
 14585                                  		; 09/12/2022
 14586                                  		;db 0
 14587                                  
 14588                                  number2div	equ ($-BCode_start)
 14589                                  number2mod	equ (number2div % 16)
 14590                                  
 14591                                  %if number2mod>0 & number2mod<16
 14592 000019FA 00<rep 6h>              		times (16-number2mod) db 0
 14593                                  %endif
 14594                                  
 14595                                  ;align 16
 14596                                  
 14597                                  ; 09/12/2022
 14598                                  BCODE_END	equ $ - BCode_start
 14599                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 14600                                  ; 13/12/2022
 14601                                  SYSINITOFFSET	equ BCODE_END
 14602                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 14603                                  
 14604                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 14605                                  
 14606                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14607                                  ; 01/05/2019 - Retro DOS v4.0 
 14608                                  ; ============================================================================
 14609                                  ; end of BIOSCODE
 14610                                  
 14611                                  ; ----------------------------------------------------------------------------
 14612                                  ; %include sysinit5.s	; 09/12/2022
 14613                                  ; ----------------------------------------------------------------------------
 14614                                  
 14615                                  ;=============================================================================
 14616                                  ; (IO.SYS) SYSINIT SEGMENT 
 14617                                  ;=============================================================================
 14618                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14619                                  
 14620                                  section .SYSINIT vstart=0
 14621                                  
 14622                                  ; ****************************************************************************
 14623                                  ; SYSINIT.BIN (MSDOS 5.0 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 14624                                  ; ----------------------------------------------------------------------------
 14625                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 31/12/2022))
 14626                                  ; ----------------------------------------------------------------------------
 14627                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 14628                                  ; ----------------------------------------------------------------------------
 14629                                  ; Assembler: NASM version 2.15
 14630                                  ; ----------------------------------------------------------------------------
 14631                                  ;	   ((nasm sysinit5.s -l sysinit5.lst -o SYSINIT5.BIN -Z error.txt)) 	
 14632                                  ; ----------------------------------------------------------------------------
 14633                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 14634                                  ; ----------------------------------------------------------------------------
 14635                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 14636                                  ; source code by Microsoft, 1991 
 14637                                  ; ----------------------------------------------------------------------------
 14638                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 14639                                  ; by Microsoft, 12/10/1983
 14640                                  ; ****************************************************************************
 14641                                  ; main file: 'retrodos4.s'
 14642                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 14643                                  
 14644                                  ; 21/10/2022
 14645                                  ; ----------------------------------------------------------------------------
 14646                                  ; This source code (version) is based on SYSINIT source code of disassembled
 14647                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 14648                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 14649                                  ; ----------------------------------------------------------------------------
 14650                                  ; Binary file splitter & joiner: FFSJ v3.3
 14651                                  
 14652                                  ;--------------------------------------------------------------
 14653                                  ; SYSINIT.TXT (27/01/1983)
 14654                                  ;--------------------------------------------------------------
 14655                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 14656                                  ;over  the  system  initialization  after  the  OEM  bios   has
 14657                                  ;performed any  initialization  it  needs  to  do.   Control is
 14658                                  ;transfered with a long jump to the external  variable  SYSINIT
 14659                                  ;
 14660                                  ;
 14661                                  ;   The OEM  has  the  following  variables declared external:
 14662                                  ;
 14663                                  ;   CURRENT_DOS_LOCATION    WORD
 14664                                  ;
 14665                                  ;This word  contains  the  segment  number of the DOS before it
 14666                                  ;is relocated.  The OEM bios must set this value.
 14667                                  ;
 14668                                  ;   FINAL_DOS_LOCATION      WORD
 14669                                  ;
 14670                                  ;This word contains the segment number of the DOS after SYSINIT
 14671                                  ;moves it.  The OEM bios must set this value.
 14672                                  ;
 14673                                  ;   DEVICE_LIST             DWORD
 14674                                  ;
 14675                                  ;This  double  word  pointer  points  to  the  linked  list  of
 14676                                  ;character and block device drivers.  The  OEM  must  set  this
 14677                                  ;value.
 14678                                  ;
 14679                                  ;   MEMORY_SIZE             WORD
 14680                                  ;
 14681                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 14682                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 14683                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 14684                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 14685                                  ;and read it back until it gets a mismatch.
 14686                                  ;
 14687                                  ;   DEFAULT_DRIVE           BYTE
 14688                                  ;
 14689                                  ;This is  the initial default drive when the system first comes
 14690                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 14691                                  ;it then drive a is assumed.
 14692                                  ;
 14693                                  ;   BUFFERS                 BYTE
 14694                                  ;
 14695                                  ;This is  the  default  number of buffers for the system.  This
 14696                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14697                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 14698                                  ;
 14699                                  ;   FILES                   BYTE
 14700                                  ;
 14701                                  ;This is  the  default  number  of  files for the system.  This
 14702                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14703                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 14704                                  ;
 14705                                  ;   SYSINIT                 FAR
 14706                                  ;
 14707                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 14708                                  ;this label at the end of its INIT code.
 14709                                  ;
 14710                                  ;   The OEM  has  the  following  variables declared public:
 14711                                  ;
 14712                                  ;   RE_INIT                 FAR
 14713                                  ;
 14714                                  ;This is an entry point which allows the BIOS to do some INIT
 14715                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 14716                                  ;PRESERVED.  On entry DS points to the first available memory
 14717                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 14718                                  ;prefix which represents  the  "program"  currently  running.
 14719                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 14720                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 14721                                  ;that  no  memory  is  allocated to it, it is running in free
 14722                                  ;memory.
 14723                                  ;NOTES:
 14724                                  ;     At the time this routine is called SYSINIT occupies the
 14725                                  ;highest 10K of memory ("highest" is determined by the  value
 14726                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 14727                                  ;     Since this is called AFTER DOS is initialized, you can
 14728                                  ;make system calls.  This also implies that the code for this
 14729                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 14730                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 14731                                  ;     If you don't want  anything done just set this to point
 14732                                  ;at a FAR RET instruction.
 14733                                  
 14734                                  ; ----------------------------------------------------------------------
 14735                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 14736                                  ; ----------------------------------------------------------------------
 14737                                  
 14738                                  ;include version.inc
 14739                                  ; ----------------------------------------------------------------------
 14740                                  
 14741                                  ;FALSE   EQU     0
 14742                                  ;TRUE    EQU     0FFFFh
 14743                                  
 14744                                  ;IBMVER	    EQU     TRUE
 14745                                  ;IBMCOPYRIGHT EQU   FALSE
 14746                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 14747                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 14748                                  ;MSVER      EQU     FALSE
 14749                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 14750                                  ;KANJI      EQU     FALSE
 14751                                  
 14752                                  ;(MSDOS 6.0, versiona.inc, 1991)
 14753                                  ; ----------------------------------------------------------------------
 14754                                  ;MAJOR_VERSION  EQU	6
 14755                                  ;;MINOR_VERSION	EQU	0	;6.00
 14756                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 14757                                  
 14758                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 14759                                  ; ----------------------------------------------------------------------
 14760                                  MAJOR_VERSION   EQU	5
 14761                                  MINOR_VERSION   EQU	0
 14762                                  
 14763                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 14764                                  
 14765                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 14766                                  				; currently 0.
 14767                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 14768                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 14769                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 14770                                  
 14771                                  ;      if1
 14772                                  ;      %OUT  ... for DOS Version 5.00 ...
 14773                                  ;      endif
 14774                                  
 14775                                         ;******************************
 14776                                         ;Each assembler program should:
 14777                                         ;  mov ah,030h                   ;DOS Get Version function
 14778                                         ;  int 021h                      ;Version ret. in AX,minor version first
 14779                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 14780                                         ;  jne error_handler             ; EXACT version match.
 14781                                         ;******************************
 14782                                  
 14783                                  ; ----------------------------------------------------------------------
 14784                                  ; device definitions
 14785                                  
 14786                                  ;Attribute bit masks
 14787                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 14788                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 14789                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 14790                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 14791                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 14792                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 14793                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 14794                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 14795                                  
 14796                                  ; The device table list has the form:
 14797                                  struc	SYSDEV
 14798 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 14799 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 14800 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 14801 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 14802 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 14803                                  .size:
 14804                                  endstruc
 14805                                  
 14806                                  ;Static Reguest Header
 14807                                  struc	SRHEAD
 14808 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 14809 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 14810 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 14811 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 14812 00000005 ????????????????                	resb 8		;Reserved for queue links
 14813                                  .size:
 14814                                  endstruc
 14815                                  
 14816                                  ;Status word masks
 14817                                  STERR   EQU     8000H           ;Bit 15 - Error
 14818                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 14819                                  STDON   EQU     0100H           ;Bit 8 - Done
 14820                                  STECODE EQU     00FFH           ;Error code
 14821                                  WRECODE EQU     0
 14822                                  
 14823                                  ;Function codes
 14824                                  DEVINIT EQU     0               ;Initialization
 14825                                  DINITHL EQU     26              ;Size of init header
 14826                                  DEVMDCH EQU     1               ;Media check
 14827                                  DMEDHL  EQU     15              ;Size of media check header
 14828                                  DEVBPB  EQU     2               ;Get BPB
 14829                                  DEVRDIOCTL EQU  3               ;IOCTL read
 14830                                  DBPBHL  EQU     22              ;Size of Get BPB header
 14831                                  DEVRD   EQU     4               ;Read
 14832                                  DRDWRHL EQU     22              ;Size of RD/WR header
 14833                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 14834                                  DRDNDHL EQU     14              ;Size of non destructive read header
 14835                                  DEVIST  EQU     6               ;Input status
 14836                                  DSTATHL EQU     13              ;Size of status header
 14837                                  DEVIFL  EQU     7               ;Input flush
 14838                                  DFLSHL  EQU     15              ;Size of flush header
 14839                                  DEVWRT  EQU     8               ;Write
 14840                                  DEVWRTV EQU     9               ;Write with verify
 14841                                  DEVOST  EQU     10              ;Output status
 14842                                  DEVOFL  EQU     11              ;Output flush
 14843                                  DEVWRIOCTL EQU  12              ;IOCTL write
 14844                                  
 14845                                  ; ----------------------------------------------------------------------
 14846                                  struc	SYS_FCB
 14847 00000000 ??                      .fcb_drive:	resb 1
 14848 00000001 ????????????????        .fcb_name:	resb 8
 14849 00000009 ??????                  .fcb_ext:	resb 3
 14850 0000000C ????                    .fcb_EXTENT:	resw 1
 14851 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 14852 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 14853                                                          ; word
 14854 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 14855 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 14856 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 14857 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 14858                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 14859                                                          ; If file, bit 6=0 if dirty
 14860                                                          ; If I/O device, bit 6=0 if EOF (input)
 14861                                                          ;               Bit 5=1 if Raw mode
 14862                                                          ;               Bit 0=1 if console input device
 14863                                                          ;               Bit 1=1 if console output device
 14864                                                          ;               Bit 2=1 if null device
 14865                                                          ;               Bit 3=1 if clock device
 14866 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 14867 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 14868 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 14869 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 14870 00000020 ??                      .fcb_NR:	resb 1	; Next record
 14871 00000021 ????????                .fcb_RR:	resb 4	; Random record
 14872                                  .size:
 14873                                  endstruc
 14874                                  
 14875                                  ; ----------------------------------------------------------------------
 14876                                  ; Field definition for I/O buffer information
 14877                                  
 14878                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 14879                                  
 14880                                  struc buffinfo
 14881 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 14882 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 14883 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 14884                                  			; SFT table index (bit 7 = 1)
 14885                                  			; = FFh if buffer free
 14886 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 14887                                  			;	= 0 if Local device buffer
 14888                                  			; Bit 6 = 1 if buffer dirty
 14889                                  			; Bit 5 = Reserved
 14890                                  			; Bit 4 = Search bit (bit 7 = 1)
 14891                                  			; Bit 3 = 1 if buffer is DATA
 14892                                  			; Bit 2 = 1 if buffer is DIR
 14893                                  			; Bit 1 = 1 if buffer is FAT
 14894                                  			; Bit 0 = Reserved
 14895 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 14896                                  ; The next two items are often refed as a word (bit 7 = 0)
 14897 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 14898 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 14899 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 14900 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 14901 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 14902                                  .size:
 14903                                  endstruc
 14904                                  
 14905                                  %define buf_offset	dword [buf_sector]
 14906                                  			;For bit 7 = 1, this is the byte
 14907                                  			;offset of the start of the buffer in
 14908                                  			;the file pointed to by buf_ID.  Thus
 14909                                  			;the buffer starts at location
 14910                                  			;buf_offset in the file and contains
 14911                                  			;buf_fill bytes.
 14912                                  
 14913                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 14914                                  
 14915                                  
 14916                                  buf_Free	equ	0FFh		; buf_id of free buffer
 14917                                  
 14918                                  ;Flag byte masks
 14919                                  buf_isnet	EQU	10000000B
 14920                                  buf_dirty	EQU	01000000B
 14921                                  ;***
 14922                                  buf_visit	EQU	00100000B
 14923                                  ;***
 14924                                  buf_snbuf	EQU	00010000B
 14925                                  
 14926                                  buf_isDATA	EQU	00001000B
 14927                                  buf_isDIR	EQU	00000100B
 14928                                  buf_isFAT	EQU	00000010B
 14929                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 14930                                  
 14931                                  buf_NetID	EQU	bufinsiz
 14932                                  
 14933                                  ; ----------------------------------------------------------------------
 14934                                  
 14935                                  ; ----------------------------------------------------------------------
 14936                                  ;**	DPB - Drive Parameter Block
 14937                                  
 14938                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 14939                                  
 14940                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 14941                                  ;	possibly inaccurate deductions from code study... - jgl
 14942                                  ;
 14943                                  ;	The DPB is DOS's main structure for describing block devices.
 14944                                  ;	It contains info about the "Drive" intermingled with info about
 14945                                  ;	the FAT file system which is presumably on the drive.  I don't know
 14946                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 14947                                  ;
 14948                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 14949                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 14950                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 14951                                  
 14952                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 14953                                  
 14954                                  ; 12/05/2019 - Retro DOS v4.0
 14955                                  
 14956                                  struc	DPB
 14957 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 14958 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 14959 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 14960 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 14961 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 14962 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 14963 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 14964 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 14965 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 14966 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 14967                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 14968 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 14969 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 14970 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 14971 00000017 ??                      .MEDIA:		resb 1		; Media byte
 14972 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 14973                                  				; check the first time this DPB is used
 14974 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 14975 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 14976 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 14977                                  .size:
 14978                                  endstruc
 14979                                  
 14980                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 14981                                  
 14982                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 14983                                  
 14984                                  ; ----------------------------------------------------------------------
 14985                                  ; 26/03/2018
 14986                                  
 14987                                  ; IOCTL SUB-FUNCTIONS
 14988                                  IOCTL_GET_DEVICE_INFO	EQU	0
 14989                                  IOCTL_SET_DEVICE_INFO	EQU	1
 14990                                  IOCTL_READ_HANDLE	EQU	2
 14991                                  IOCTL_WRITE_HANDLE	EQU	3
 14992                                  IOCTL_READ_DRIVE	EQU	4
 14993                                  IOCTL_WRITE_DRIVE	EQU	5
 14994                                  IOCTL_GET_INPUT_STATUS	EQU	6
 14995                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 14996                                  IOCTL_CHANGEABLE?	EQU	8
 14997                                  IOCTL_SHARING_RETRY	EQU	11
 14998                                  GENERIC_IOCTL_HANDLE	EQU	12
 14999                                  GENERIC_IOCTL		EQU	13
 15000                                  
 15001                                  ; GENERIC IOCTL SUB-FUNCTIONS
 15002                                  RAWIO			EQU	8
 15003                                  
 15004                                  ; RAWIO SUB-FUNCTIONS
 15005                                  GET_DEVICE_PARAMETERS	EQU	60H
 15006                                  SET_DEVICE_PARAMETERS	EQU	40H
 15007                                  READ_TRACK		EQU	61H
 15008                                  WRITE_TRACK		EQU	41H
 15009                                  VERIFY_TRACK		EQU	62H
 15010                                  FORMAT_TRACK		EQU	42H
 15011                                  
 15012                                  ; DEVICETYPE VALUES
 15013                                  MAX_SECTORS_IN_TRACK	EQU	63
 15014                                  DEV_5INCH		EQU	0
 15015                                  DEV_5INCH96TPI		EQU	1
 15016                                  DEV_3INCH720KB		EQU	2
 15017                                  DEV_8INCHSS		EQU	3
 15018                                  DEV_8INCHDS		EQU	4
 15019                                  DEV_HARDDISK		EQU	5
 15020                                  DEV_OTHER		EQU	7
 15021                                  ;DEV_3INCH1440KB	EQU	7
 15022                                  DEV_3INCH2880KB		EQU	9
 15023                                  ; Retro DOS v2.0 - 26/03/2018
 15024                                  ;;DEV_TAPE		EQU	6
 15025                                  ;;DEV_ERIMO		EQU	8
 15026                                  ;DEV_3INCH2880KB	EQU	9
 15027                                  DEV_3INCH1440KB		EQU	10
 15028                                  
 15029                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 15030                                  					; CURRENTLY SUPPORT.
 15031                                  MAX_DEV_TYPE		EQU	10
 15032                                  
 15033                                  struc A_SECTORTABLE
 15034 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 15035 00000002 ????                    .ST_SECTORSIZE:		resw	1
 15036                                  .size:
 15037                                  endstruc
 15038                                  
 15039                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 15040                                  
 15041                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 15042                                  ;
 15043                                  ;	The BPB contains information about the disk structure.  It dates
 15044                                  ;	back to the earliest FAT systems and so FAT information is
 15045                                  ;	intermingled with physical driver information.
 15046                                  ;
 15047                                  ;	A boot sector contains a BPB for its device; for other disks
 15048                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 15049                                  ;	information in the DPB.
 15050                                  ;
 15051                                  ;	The BDS structure contains a BPB within it.
 15052                                  
 15053                                  struc A_BPB
 15054 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 15055 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 15056 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 15057 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 15058 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 15059 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 15060 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 15061 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 15062 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 15063 0000000F ????                    .BPB_HEADS:		resw	1
 15064 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 15065 00000013 ????                    			resw	1
 15066 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 15067 00000017 ????                    			resw	1
 15068 00000019 ????????????            			resb	6	; NOTE:  many times these
 15069                                  ;					; 	 6 bytes are omitted
 15070                                  ;					;	 when BPB manipulations
 15071                                  ;					;	 are performed!
 15072                                  .size:
 15073                                  endstruc
 15074                                  
 15075                                  struc A_DEVICEPARAMETERS
 15076 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 15077 00000001 ??                      .DP_DEVICETYPE:		resb	1
 15078 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 15079 00000004 ????                    .DP_CYLINDERS:		resw	1
 15080 00000006 ??                      .DP_MEDIATYPE:		resb	1
 15081 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 15082 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 15083 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 15084                                  endstruc
 15085                                  
 15086                                  ; ----------------------------------------------------------------------
 15087                                  ; structure, equates for devmark for mem command.
 15088                                  
 15089                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 15090                                  
 15091                                  struc devmark
 15092 00000000 ??                       .id:	    resb 1
 15093 00000001 ????                     .seg:	    resw 1
 15094 00000003 ????                     .size:	    resw 1
 15095 00000005 ??????                   .dum:	    resb 3
 15096 00000008 ????????????????         .filename: resb 8
 15097                                  endstruc
 15098                                  
 15099                                  devmark_stk	equ	'S'
 15100                                  devmark_device	equ	'D'
 15101                                  devmark_ifs	equ	'I'
 15102                                  devmark_buf	equ	'B'
 15103                                  devmark_cds	equ	'L' ; lastdrive
 15104                                  devmark_files	equ	'F'
 15105                                  devmark_fcbs	equ	'X'
 15106                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 15107                                  devmark_ems_stub equ	'E'
 15108                                  
 15109                                  setbrkdone	equ	00000001b
 15110                                  for_devmark	equ	00000010b
 15111                                  not_for_devmark equ	11111101b
 15112                                  
 15113                                  ; ----------------------------------------------------------------------
 15114                                  ; Memory arena structure
 15115                                  
 15116                                  ; 24/03/2019 - Retro DOS v4.0 
 15117                                  ; (MSDOS 6.0, ARENA.INC)
 15118                                  
 15119                                  ;** Arena Header
 15120                                  
 15121                                  struc ARENA
 15122 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 15123 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 15124 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 15125 00000005 ??????                  .RESERVED	resb 3		; reserved
 15126 00000008 ????????????????        .NAME:		resb 8		; owner file name
 15127                                  endstruc
 15128                                  
 15129                                  ; 12/04/2019
 15130                                  
 15131                                  arena_owner_system	EQU 0	; free block indication
 15132                                  
 15133                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 15134                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 15135                                  
 15136                                  ; ----------------------------------------------------------------------
 15137                                  ; Process data block (otherwise known as program header)
 15138                                  
 15139                                  ; 23/03/2019 - Retro DOS v4.0
 15140                                  
 15141                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 15142                                  
 15143                                  FILPERPROC	EQU     20
 15144                                  
 15145                                  struc PDB	; Process_data_block
 15146 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 15147 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 15148 00000004 ??                                      resb 1
 15149 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 15150 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 15151 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 15152 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 15153 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 15154 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 15155 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 15156 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 15157 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 15158 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 15159 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 15160 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 15161 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 15162 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 15163 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 15164 00000042 <res Eh>                .PAD1:		resb 14		; 	
 15165 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 15166 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 15167 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 15168 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 15169 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 15170 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 15171                                  ;.size:
 15172                                  endstruc
 15173                                  
 15174                                  ; ----------------------------------------------------------------------
 15175                                  ; <system call definitions>
 15176                                  
 15177                                  ; 23/03/2019 - Retro DOS v4.0
 15178                                  
 15179                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 15180                                  
 15181                                  ABORT                           EQU 0   ;  0      0
 15182                                  STD_CON_INPUT                   EQU 1   ;  1      1
 15183                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 15184                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 15185                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 15186                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 15187                                  RAW_CON_IO                      EQU 6   ;  6      6
 15188                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 15189                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 15190                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 15191                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 15192                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 15193                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 15194                                  DISK_RESET                      EQU 13  ; 13      D
 15195                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 15196                                  FCB_OPEN                        EQU 15  ; 15      F
 15197                                  FCB_CLOSE                       EQU 16  ; 16     10
 15198                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 15199                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 15200                                  FCB_DELETE                      EQU 19  ; 19     13
 15201                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 15202                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 15203                                  FCB_CREATE                      EQU 22  ; 22     16
 15204                                  FCB_RENAME                      EQU 23  ; 23     17
 15205                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 15206                                  SET_DMA                         EQU 26  ; 26     1A
 15207                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 15208                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 15209                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 15210                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 15211                                  GET_FCB_POSITION                EQU 36  ; 36     24
 15212                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 15213                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 15214                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 15215                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 15216                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 15217                                  GET_DATE                        EQU 42  ; 42     2A
 15218                                  SET_DATE                        EQU 43  ; 43     2B
 15219                                  GET_TIME                        EQU 44  ; 44     2C
 15220                                  SET_TIME                        EQU 45  ; 45     2D
 15221                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 15222                                  ; Extended functionality group
 15223                                  GET_DMA                         EQU 47  ; 47     2F
 15224                                  GET_VERSION                     EQU 48  ; 48     30
 15225                                  KEEP_PROCESS                    EQU 49  ; 49     31
 15226                                  GET_DPB                         EQU 50  ; 50     32
 15227                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 15228                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 15229                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 15230                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 15231                                  CHAR_OPER                       EQU 55  ; 55     37
 15232                                  INTERNATIONAL                   EQU 56  ; 56     38
 15233                                  ;   Directory Group
 15234                                  MKDIR                           EQU 57  ; 57     39
 15235                                  RMDIR                           EQU 58  ; 58     3A
 15236                                  CHDIR                           EQU 59  ; 59     3B
 15237                                  ;   File Group
 15238                                  CREAT                           EQU 60  ; 60     3C
 15239                                  OPEN                            EQU 61  ; 61     3D
 15240                                  CLOSE                           EQU 62  ; 62     3E
 15241                                  READ                            EQU 63  ; 63     3F
 15242                                  WRITE                           EQU 64  ; 64     40
 15243                                  UNLINK                          EQU 65  ; 65     41
 15244                                  LSEEK                           EQU 66  ; 66     42
 15245                                  CHMOD                           EQU 67  ; 67     43
 15246                                  IOCTL                           EQU 68  ; 68     44
 15247                                  XDUP                            EQU 69  ; 69     45
 15248                                  XDUP2                           EQU 70  ; 70     46
 15249                                  CURRENT_DIR                     EQU 71  ; 71     47
 15250                                  ;    Memory Group
 15251                                  ALLOC                           EQU 72  ; 72     48
 15252                                  DEALLOC                         EQU 73  ; 73     49
 15253                                  SETBLOCK                        EQU 74  ; 74     4A
 15254                                  ;    Process Group
 15255                                  EXEC                            EQU 75  ; 75     4B
 15256                                  EXIT                            EQU 76  ; 76     4C
 15257                                  WAITPROCESS			EQU 77  ; 77     4D
 15258                                  FIND_FIRST                      EQU 78  ; 78     4E
 15259                                  ;   Special Group
 15260                                  FIND_NEXT                       EQU 79  ; 79     4F
 15261                                  ; SPECIAL SYSTEM GROUP
 15262                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 15263                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 15264                                  GET_IN_VARS                     EQU 82  ; 82     52
 15265                                  SETDPB                          EQU 83  ; 83     53
 15266                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 15267                                  DUP_PDB                         EQU 85  ; 85     55
 15268                                  RENAME                          EQU 86  ; 86     56
 15269                                  FILE_TIMES                      EQU 87  ; 87     57
 15270                                  ;
 15271                                  ALLOCOPER			EQU 88	; 88     58	
 15272                                  ; Network extention system calls
 15273                                  GetExtendedError		EQU 89	; 89	 59
 15274                                  CreateTempFile			EQU 90	; 90	 5A
 15275                                  CreateNewFile			EQU 91	; 91	 5B
 15276                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 15277                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 15278                                  					;	    CloseByName, CloseUser,
 15279                                  					;	    CloseUserProcess,
 15280                                  					;	    GetOpenFileList
 15281                                  UserOper			EQU 94	; 94	 5E Get and Set
 15282                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 15283                                  xNameTrans			EQU 96	; 96	 60
 15284                                  PathParse			EQU 97	; 97	 61
 15285                                  GetCurrentPSP			EQU 98	; 98	 62
 15286                                  Hongeul 			EQU 99	; 99	 63
 15287                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 15288                                  Set_Printer_Flag		EQU 100 ; 100	 64
 15289                                  GetExtCntry			EQU 101 ; 101	 65
 15290                                  GetSetCdPg			EQU 102 ; 102	 66
 15291                                  ExtHandle			EQU 103 ; 103	 67
 15292                                  Commit				EQU 104 ; 104	 68
 15293                                  GetSetMediaID			EQU 105 ; 105	 69
 15294                                  IFS_IOCTL			EQU 107 ; 107	 6B
 15295                                  ExtOpen 			EQU 108 ; 108	 6C
 15296                                  ;
 15297                                  ;ifdef ROMEXEC
 15298                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 15299                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 15300                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 15301                                  ;endif
 15302                                  ;
 15303                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 15304                                  OEM_C1				EQU 249 ; 249	 F9
 15305                                  OEM_C2				EQU 250 ; 250	 FA
 15306                                  OEM_C3				EQU 251 ; 251	 FB
 15307                                  OEM_C4				EQU 252 ; 252	 FC
 15308                                  OEM_C5				EQU 253 ; 253	 FD
 15309                                  OEM_C6				EQU 254 ; 254	 FE
 15310                                  OEM_C7				EQU 255 ; 255	 FF
 15311                                  
 15312                                  ; ----------------------------------------------------------------------
 15313                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 15314                                  ; ----------------------------------------------------------------------
 15315                                  
 15316                                  ;;	IF	STACKSW
 15317                                  
 15318                                  ;;
 15319                                  ;; Internal Stack Parameters
 15320                                  ;EntrySize		equ	8
 15321                                  ;
 15322                                  ;MinCount		equ	8
 15323                                  ;DefaultCount		equ	9
 15324                                  ;MaxCount		equ	64
 15325                                  ;
 15326                                  ;MinSize 		equ	32
 15327                                  ;DefaultSize		equ	128
 15328                                  ;MaxSize 		equ	512
 15329                                  
 15330                                  ;;	ENDIF
 15331                                  
 15332                                  ; ----------------------------------------------------------------------
 15333                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 15334                                  ; ----------------------------------------------------------------------
 15335                                  					  ;;Rev 3.30 Modification
 15336                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 15337                                  									  
 15338                                  ;*******************************					  
 15339                                  ;System Service call ( Int 15h )					  
 15340                                  ;*******************************					  
 15341                                  ;Function AH = 0C0h, Return system configuration			  
 15342                                  ;For PC and PCJR on return:						  
 15343                                  ;	(AH)	= 80h							  
 15344                                  ;	(CY)	= 1							  
 15345                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 15346                                  ;	(AH)	= 86h							  
 15347                                  ;	(CY)	= 1							  
 15348                                  ;For all others:							  
 15349                                  ;	(AH)	= 0							  
 15350                                  ;	(CY)	= 0							  
 15351                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 15352                                  ; System descriptor :							  
 15353                                  ;	DW	xxxx		length of descriptor in bytes,		  
 15354                                  ;				minimum length = 8			  
 15355                                  ;	DB	xx		model byte				  
 15356                                  ;				0FFh	= PC				  
 15357                                  ;				0FEh	= PC/XT, Portable		  
 15358                                  ;				0FDh	= PC/JR 			  
 15359                                  ;				0FCh	= PC/AT				  
 15360                                  ;				0F9h	= Convertable			  
 15361                                  ;				0F8h	= Model 80			  
 15362                                  ;				0E0 thru 0EFh = reserved		  
 15363                                  ;									  
 15364                                  ;	DB	xx		secondary model byte			  
 15365                                  ;				000h	= PC1				  
 15366                                  ;				000h	= PC/XT, Portable		  
 15367                                  ;				000h	= PC/JR 			  
 15368                                  ;				000h	= PC/AT 			  
 15369                                  ;				001h	= PC/AT Model 339		  
 15370                                  ;				003h	= PC/RT				  
 15371                                  ;				000h	= Convertable			  
 15372                                  ;									  
 15373                                  ;	DB	xx		bios revision level			  
 15374                                  ;				00 for first release, subsequent release  
 15375                                  ;				of code with same model byte and	  
 15376                                  ;				secondary model byte require revison level
 15377                                  ;				to increase by one.			  
 15378                                  ;									  
 15379                                  ;	DB	xx		feature information byte 1		  
 15380                                  ;				X0000000 = 1, bios use DMA channel 3	  
 15381                                  ;					 = 0, DMA channel 3 not used	  
 15382                                  ;									  
 15383                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 15384                                  ;					 = 0, 2nd Interrupt chip not present
 15385                                  ;									  
 15386                                  ;				00X00000 = 1, Real Time Clock present	  
 15387                                  ;					 = 0, Real Time Clock not present 
 15388                                  ;									  
 15389                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 15390                                  ;						called in keyboard interrupt
 15391                                  ;						(Int 09h).		  
 15392                                  ;					 = 0, Keyboard escape sequence not
 15393                                  ;						called. 		  
 15394                                  ;				0000XXXX reserved			  
 15395                                  ;									  
 15396                                  ;	DB	xx		feature information byte 2 - reserved	  
 15397                                  ;									  
 15398                                  ;	DB	xx		feature information byte 2 - reserved	  
 15399                                  ;									  
 15400                                  ;	DB	xx		feature information byte 2 - reserved	  
 15401                                  ;									  
 15402                                  ;	DB	xx		feature information byte 2 - reserved	  
 15403                                  ;									  
 15404                                  
 15405                                  ; 22/03/2019									  
 15406                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 15407 00000000 ????                    .bios_sd_leng:		resw 1				  
 15408 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 15409                                  .bios_sd_scnd_modelbyte: 
 15410 00000003 ??                      			resb 1					  
 15411 00000004 ??                      			resb 1					  
 15412 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 15413 00000006 ????????                			resb 4					  
 15414                                  endstruc					  
 15415                                  									  
 15416                                  ;FeatureByte1	bit map equates 					  
 15417                                  DMAchannel3		equ 10000000b					  
 15418                                  ScndIntController	equ 01000000b					  
 15419                                  RealTimeClock		equ 00100000b					  
 15420                                  KeyEscapeSeq		equ 00010000b					  
 15421                                  					;;End of Modification
 15422                                  
 15423                                  ; ----------------------------------------------------------------------
 15424                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 15425                                  ; ----------------------------------------------------------------------
 15426                                  ; 22/03/2019 - Retro DOS v4.0
 15427                                  
 15428                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 15429                                  
 15430                                  struc SysInitVars
 15431                                  ; MSDOS 3.3
 15432 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 15433 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 15434 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 15435 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 15436 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 15437 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 15438 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 15439 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 15440 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 15441 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 15442 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 15443 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 15444                                  ; MSDOS 6.0
 15445 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 15446 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 15447 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 15448 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 15449                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 15450 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 15451 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 15452 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 15453 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 15454 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 15455 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 15456 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 15457                                  .size:
 15458                                  endstruc
 15459                                  
 15460                                  ;This is added for more information exchage between DOS, BIOS.
 15461                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 15462                                  
 15463                                  ; 22/03/2019
 15464                                  struc SysInitVars_Ext
 15465 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 15466 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 15467                                  endstruc
 15468                                  
 15469                                  ; 09/06/2018
 15470                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 15471                                  SYSI_DPB    equ	0
 15472                                  SYSI_SFT    equ 4
 15473                                  SYSI_CLOCK  equ 8
 15474                                  SYSI_CON    equ 12
 15475                                  SYSI_MAXSEC equ 16
 15476                                  SYSI_BUF    equ 18 		
 15477                                  SYSI_CDS    equ 22
 15478                                  SYSI_FCB    equ 26
 15479                                  SYSI_KEEP   equ 30
 15480                                  SYSI_NUMIO  equ	32
 15481                                  SYSI_NCDS   equ	33
 15482                                  SYSI_DEV    equ 34
 15483                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 15484                                  SYSI_ATTR	  equ 38
 15485                                  SYSI_STRAT	  equ 40
 15486                                  SYSI_INTER	  equ 42
 15487                                  SYSI_NAME	  equ 44
 15488                                  SYSI_SPLICE	  equ 52
 15489                                  SYSI_IBMDOS_SIZE  equ 53
 15490                                  SYSI_IFS_DOSCALL@ equ 55
 15491                                  SYSI_IFS	  equ 59
 15492                                  SYSI_BUFFERS	  equ 63
 15493                                  SYSI_BOOT_DRIVE   equ 67
 15494                                  SYSI_DWMOVE	  equ 68
 15495                                  SYSI_EXT_MEM	  equ 69
 15496                                  
 15497                                  ;The SYSI_BUF of SysInitVars points to the following structure
 15498                                  
 15499                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 15500                                  
 15501                                  struc BUFFINF 	; BUFFINFO
 15502 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 15503 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 15504 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 15505 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 15506                                  
 15507 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 15508                                  				; are in HMA
 15509 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 15510                                  				;  used to read/write on disks
 15511 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 15512 00000015 ????                    .UU_EMS_NPA640:		resw 1
 15513 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 15514 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 15515 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 15516 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 15517 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 15518 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 15519 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 15520                                  .size:
 15521                                  endstruc
 15522                                  
 15523                                  ; ----------------------------------------------------------------------
 15524                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 15525                                  ; ----------------------------------------------------------------------
 15526                                  ; 22/03/2019 - Retro DOS v4.0
 15527                                  
 15528                                  ;**	CDS - Current Directory Structure
 15529                                  ;
 15530                                  ; CDS items are used bu the internal routines to store cluster numbers and
 15531                                  ; network identifiers for each logical name.  The ID field is used dually,
 15532                                  ; both as net ID and for a cluster number for local devices. In the case
 15533                                  ; of local devices, the cluster number will be -1 if there is a potential
 15534                                  ; of the disk being changed or if the path must be recracked.
 15535                                  ;
 15536                                  ;	Some pathnames have special preambles, such as
 15537                                  ;
 15538                                  ;		\\machine\sharename\...
 15539                                  ;	For these pathnames we can't allow ".." processing to back us
 15540                                  ;	up into the special front part of the name.  The CURDIR_END field
 15541                                  ;	holds the address of the seperator character which marks
 15542                                  ;	the split between the special preamble and the regular
 15543                                  ;	path list; ".." processing isn't allowed to back us up past
 15544                                  ;	(i.e., before) CURDIR_END
 15545                                  ;	For the root, it points at the leading /. For net
 15546                                  ;	assignments it points at the end (nul) of the initial assignment:
 15547                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 15548                                  ;	  ^		 ^		     ^
 15549                                  
 15550                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 15551                                  TEMPLEN 	EQU	DIRSTRLEN*2
 15552                                  
 15553                                  struc 		curdir_list
 15554                                  ; MSDOS 3.3
 15555 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 15556 00000043 ????                    .cdir_flags	resw	1		; various flags
 15557 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 15558 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 15559 0000004D ????                    .cdir_usr_word	resw	1
 15560 0000004F ????                    .cdir_end	resw	1		; end of assignment
 15561                                  ; MSDOS 6.0
 15562 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 15563 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 15564 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 15565                                  .size:
 15566                                  endstruc
 15567                                  
 15568                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 15569                                  						; ASM87 which doesn't allow
 15570                                  						; Size directive as a macro
 15571                                  						; argument
 15572                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 15573                                  
 15574                                  ;**	Flag values for CURDIR_FLAGS
 15575                                  
 15576                                  ;Flag word masks
 15577                                  curdir_isnet	EQU	1000000000000000B
 15578                                  curdir_isifs	EQU	1000000000000000B
 15579                                  curdir_inuse	EQU	0100000000000000B
 15580                                  curdir_splice	EQU	0010000000000000B
 15581                                  curdir_local	EQU	0001000000000000B
 15582                                  
 15583                                  ; ----------------------------------------------------------------------
 15584                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 15585                                  ; ----------------------------------------------------------------------
 15586                                  ; 25/03/2019 - Retro DOS v4.0
 15587                                  
 15588                                  ; system file table
 15589                                  
 15590                                  ;**	System File Table SuperStructure
 15591                                  ;
 15592                                  ;	The system file table entries are allocated in contiguous groups.
 15593                                  ;	There may be more than one such groups; the SF "superstructure"
 15594                                  ;	tracks the groups.
 15595                                  
 15596                                  struc	SF
 15597 00000000 ????????                .SFLink:	resd	1
 15598 00000004 ????                    .SFCount:	resw	1		; number of entries
 15599 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 15600                                  .size:
 15601                                  endstruc
 15602                                  
 15603                                  ;**	System file table entry
 15604                                  ;
 15605                                  ;	These are the structures which are at SFTABLE in the SF structure.
 15606                                  
 15607                                  struc	SF_ENTRY
 15608 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 15609                                  					;   if FCB then ref count
 15610 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 15611 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 15612 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 15613                                  					; Bit 15 = 1 if remote file
 15614                                  					;	 = 0 if local file or device
 15615                                  					; Bit 14 = 1 if date/time is not to be
 15616                                  					;   set from clock at CLOSE.  Set by
 15617                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 15618                                  					;   other reseters of the dirty bit
 15619                                  					;   (WRITE)
 15620                                  					; Bit 13 = Pipe bit (reserved)
 15621                                  					;
 15622                                  					; Bits 0-7 (old FCB_devid bits)
 15623                                  					; If remote file or local file, bit
 15624                                  					; 6=0 if dirty Device ID number, bits
 15625                                  					; 0-5 if local file.
 15626                                  					; bit 7=0 for local file, bit 7
 15627                                  					;      =1 for local I/O device
 15628                                  					; If local I/O device, bit 6=0 if EOF (input)
 15629                                  					;		Bit 5=1 if Raw mode
 15630                                  					;		Bit 0=1 if console input device
 15631                                  					;		Bit 1=1 if console output device
 15632                                  					;		Bit 2=1 if null device
 15633                                  					;		Bit 3=1 if clock device
 15634 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 15635                                  					; to device header if local device,
 15636                                  					; points to net device header if
 15637                                  					; remote
 15638 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 15639                                  ;.sf_lstclus:	resw	1 ; *	
 15640 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 15641 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 15642 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 15643 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 15644                                  ;
 15645                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 15646                                  ; ID
 15647                                  ;
 15648 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 15649 0000001B ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
 15650 0000001D ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 15651                                  ;
 15652                                  ; End of 7 bytes of file-system specific info.
 15653                                  ;
 15654 0000001E <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 15655                                  					; directory entry.  This is used by
 15656                                  					; close to detect file deleted and
 15657                                  					; disk changed errors.
 15658                                  ; SHARING INFO
 15659 00000029 ????????                .sf_chain:	resd	1		; link to next SF
 15660 0000002D ????                    .sf_UID:	resw	1
 15661 0000002F ????                    .sf_PID:	resw	1
 15662 00000031 ????                    .sf_MFT:	resw	1
 15663 00000033 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 15664 00000035 ????????                .sf_IFS_HDR:	resd 	1 ; **
 15665                                  .size:
 15666                                  endstruc
 15667                                  
 15668                                  ; ----------------------------------------------------------------------
 15669                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 15670                                  ; ----------------------------------------------------------------------
 15671                                  ; 11/06/2018 - Retro DOS v3.0
 15672                                  
 15673                                  ;Equates for COUNTRY INFORMATION.
 15674                                  SetCountryInfo		EQU	1	;country info
 15675                                  SetUcase		EQU	2	;uppercase table
 15676                                  SetLcase		EQU	3	;lowercase table (Reserved)
 15677                                  SetUcaseFile		EQU	4	;uppercase file spec table
 15678                                  SetFileList		EQU	5	;valid file character list
 15679                                  SetCollate		EQU	6	;collating sequence
 15680                                  SetDBCS 		EQU	7	;double byte character set
 15681                                  SetALL			EQU	-1	;all the entries
 15682                                  
 15683                                  ;DOS country and code page information table structure.
 15684                                  ;Internally, IBMDOS gives a pointer to this table.
 15685                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 15686                                  ;this structure.
 15687                                  
 15688                                  struc country_cdpg_info ; DOS_country_cdpg_info
 15689 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 15690 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 15691 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 15692 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 15693 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 15694 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 15695                                  
 15696 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 15697 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 15698                                  
 15699 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 15700 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 15701                                  
 15702 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 15703 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 15704                                  
 15705 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 15706 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 15707 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 15708 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 15709 00000067 ????                    .ccDFormat:		resw	1	;date format
 15710 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 15711                                  					;5 byte of (currency symbol+0)
 15712 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 15713 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 15714 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 15715 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 15716 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 15717 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 15718 00000078 ??                      .ccTFormat:		resb	1	;time format
 15719 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 15720 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 15721 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 15722                                  .size:
 15723                                  endstruc
 15724                                  
 15725                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 15726                                  
 15727                                  ; ======================================================================
 15728                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 15729                                  ; ======================================================================
 15730                                  ; 21/03/2019 - Retro DOS v4.0
 15731                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15732                                  
 15733                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 15734                                  ; 21/10/2022
 15735                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 15736                                  ; 22/10/2022
 15737                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 15738                                  ; 09/12/2022
 15739                                  DOSBIOCODESEG equ IOSYSCODESEG
 15740                                  
 15741                                  ; Note: These offset addresses must be chanqed when the code 
 15742                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 15743                                  
 15744                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 15745                                  
 15746                                  ; 09/12/2022
 15747                                  %if 0
 15748                                  
 15749                                  ; 13/05/2019
 15750                                  
 15751                                  ;IsWin386         equ 08CFh
 15752                                  ;V86_Crit_SetFocus equ 08D0h
 15753                                  ; 21/10/2022
 15754                                  IsWin386          equ 08D0h
 15755                                  V86_Crit_SetFocus equ 08D1h 
 15756                                  
 15757                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 15758                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15759                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 15760                                  
 15761                                  ;SysinitPresent	  equ 08FCh
 15762                                  ; 21/10/2022
 15763                                  SysinitPresent	  equ 08FDh
 15764                                  
 15765                                  inHMA		  equ 000Dh
 15766                                  xms		  equ 000Eh
 15767                                  ;FreeHMAPtr	  equ 08F6h
 15768                                  ;multrk_flag	  equ 0533h
 15769                                  ;ec35_flag	  equ 0535h
 15770                                  ;EOT		  equ 012Eh
 15771                                  ; 21/10/2022
 15772                                  FreeHMAPtr	  equ 08F7h
 15773                                  multrk_flag	  equ 052Fh
 15774                                  ec35_flag	  equ 0531h
 15775                                  EOT		  equ 012Ch
 15776                                  
 15777                                  ;NextStack	  equ 08BFh
 15778                                  ;IT_StackLoc	  equ 08C5h
 15779                                  ;IT_StackSize	  equ 08C9h
 15780                                  ; 21/10/2022
 15781                                  NextStack	  equ 08C0h
 15782                                  IT_StackLoc	  equ 08C6h
 15783                                  IT_StackSize	  equ 08CAh
 15784                                  
 15785                                  ;MoveDOSIntoHMA	  equ 08F8h
 15786                                  ; 21/10/2022
 15787                                  MoveDOSIntoHMA	  equ 08F9h
 15788                                  
 15789                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 15790                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 15791                                  ; 21/10/2022
 15792                                  INT19SEM equ 0640h ; (iosys5.txt)
 15793                                  I19_LST  equ 0641h ; (iosys5.txt)
 15794                                  
 15795                                  %endif
 15796                                  
 15797                                  ; 09/12/2022
 15798                                  seg_reinit equ _seg_reinit
 15799                                  ec35_flag  equ ec35flag		
 15800                                  INT19SEM   equ int19sem
 15801                                  I19_LST    equ i19_lst
 15802                                  
 15803                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 15804                                  INT19OLD08 equ I19_LST+6
 15805                                  INT19OLD09 equ I19_LST+11
 15806                                  INT19OLD0A equ I19_LST+16
 15807                                  INT19OLD0B equ I19_LST+21
 15808                                  INT19OLD0C equ I19_LST+26
 15809                                  INT19OLD0D equ I19_LST+31
 15810                                  INT19OLD0E equ I19_LST+36
 15811                                  INT19OLD70 equ I19_LST+41
 15812                                  INT19OLD72 equ I19_LST+46
 15813                                  INT19OLD73 equ I19_LST+51
 15814                                  INT19OLD74 equ I19_LST+56
 15815                                  INT19OLD76 equ I19_LST+61
 15816                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 15817                                  
 15818                                  ; 09/12/2022
 15819                                  %if 0
 15820                                  
 15821                                  ;keyrd_func	equ 04E9h
 15822                                  ;keysts_func	equ 04EAh
 15823                                  ;t_switch	equ 04F6h
 15824                                  ; 21/10/2022
 15825                                  keyrd_func	equ 04E5h
 15826                                  keysts_func	equ 04E6h
 15827                                  t_switch	equ 04F2h
 15828                                  
 15829                                  ; 22/10/2022
 15830                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 15831                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 15832                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 15833                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 15834                                  
 15835                                  %endif
 15836                                  
 15837                                  ; 09/12/2022
 15838                                  BCODESTART	equ BIOSDATAWORD
 15839                                  RE_INIT		equ re_init
 15840                                  
 15841                                  ; ----------------------------------------------------------------------
 15842                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 15843                                  ; ----------------------------------------------------------------------
 15844                                  ; 15/04/2019 - Retro DOS v4.0
 15845                                  
 15846                                  CONFIG_BEGIN        equ  '['
 15847                                  CONFIG_BREAK        equ  'C'
 15848                                  CONFIG_BUFFERS      equ  'B'
 15849                                  CONFIG_COMMENT      equ  'Y'
 15850                                  CONFIG_COUNTRY      equ  'Q'
 15851                                  CONFIG_DEVICE       equ  'D'
 15852                                  CONFIG_DEVICEHIGH   equ  'U'
 15853                                  CONFIG_DOS          equ  'H'
 15854                                  CONFIG_DRIVPARM     equ  'P'
 15855                                  CONFIG_FCBS         equ  'X'
 15856                                  CONFIG_FILES        equ  'F'
 15857                                  CONFIG_INCLUDE      equ  'J'
 15858                                  CONFIG_INSTALL      equ  'I'
 15859                                  CONFIG_INSTALLHIGH  equ  'W'
 15860                                  CONFIG_LASTDRIVE    equ  'L'
 15861                                  CONFIG_MENUCOLOR    equ  'R'
 15862                                  CONFIG_MENUDEFAULT  equ  'A'
 15863                                  CONFIG_MENUITEM     equ  'E'
 15864                                  CONFIG_MULTITRACK   equ  'M'
 15865                                  CONFIG_NUMLOCK      equ  'N'
 15866                                  CONFIG_REM          equ  '0'
 15867                                  CONFIG_SEMICOLON    equ  ';'
 15868                                  CONFIG_SET          equ  'V'
 15869                                  CONFIG_SHELL        equ  'S'
 15870                                  CONFIG_STACKS       equ  'K'
 15871                                  CONFIG_SUBMENU      equ  'O'
 15872                                  CONFIG_SWITCHES     equ  '1'
 15873                                  
 15874                                  CONFIG_UNKNOWN      equ  'Z'
 15875                                  
 15876                                  CONFIG_OPTION_QUERY equ 80h
 15877                                  
 15878                                  ; ----------------------------------------------------------------------
 15879                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 15880                                  ; ----------------------------------------------------------------------
 15881                                  ; 21/03/2019 - Retro DOS v4.0
 15882                                  
 15883                                  true	equ	0FFFFh
 15884                                  false	equ	0
 15885                                  cr	equ	13
 15886                                  lf	equ	10
 15887                                  tab	equ	9
 15888                                  
 15889                                  multMULT	   equ	4Ah
 15890                                  multMULTGETHMAPTR  equ	1
 15891                                  multMULTALLOCHMA   equ	2
 15892                                  
 15893                                  ;NOEXEC    equ	FALSE
 15894                                  
 15895                                  stacksw    equ	true	;include switchable hardware stacks
 15896                                  mycds_size equ	88	;size of curdir_list. if it is not
 15897                                  			;the same, then will generate compile error.
 15898                                  
 15899                                  entrysize   equ     8
 15900                                  
 15901                                  mincount    equ     8
 15902                                  defaultcount equ    9
 15903                                  maxcount    equ     64
 15904                                  
 15905                                  minsize     equ     32
 15906                                  defaultsize equ     128
 15907                                  maxsize     equ     512
 15908                                  
 15909                                  ;%define allocbyte  byte [es:bp+0]
 15910                                  ;%define intlevel   byte [es:bp+1]
 15911                                  ;%define savedsp    word [es:bp+2]
 15912                                  ;%define savedss    word [es:bp+4]
 15913                                  ;%define newsp	    word [es:bp+6]
 15914                                  
 15915                                  allocbyte   equ     0
 15916                                  intlevel    equ     1
 15917                                  savedsp     equ     2
 15918                                  savedss     equ     4
 15919                                  newsp       equ     6
 15920                                  
 15921                                  free	    equ     0
 15922                                  allocated   equ     1
 15923                                  overflowed  equ     2
 15924                                  clobbered   equ     3
 15925                                  
 15926                                  ;---------------------------------------
 15927                                  ; external variable defined in ibmbio module for multi-track
 15928                                  
 15929                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 15930                                  			  ; it on after handling config.sys file as a
 15931                                  			  ; default value,if multrk_flag = multrk_off1.
 15932                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 15933                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 15934                                  
 15935                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 15936                                  
 15937                                  SYSINIT$:
 15938                                  	;IF	STACKSW 
 15939                                  	; include MSSTACK.INC	;Main stack program and data definitions
 15940                                  	; include STKMES.INC	;Fatal stack error message
 15941                                  	;   public Endstackcode
 15942                                  ;Endstackcode	label byte
 15943                                  	;ENDIF
 15944                                  
 15945                                  ; 05/07/2018
 15946                                  ; ----------------------------------------------------------------------
 15947                                  ; 04/06/2018 - Retro DOS v3.0
 15948                                  
 15949                                  ; ----------------------------------------------------------------------
 15950                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 15951                                  ; ----------------------------------------------------------------------
 15952                                  
 15953                                  ;	MSStack.inc
 15954                                  ;
 15955                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 15956                                  ;	should follow the standard Interrupt Sharing Scheme which has
 15957                                  ;	a standard header structure.
 15958                                  ;	Fyi, the following shows the relations between
 15959                                  ;	the interrupt vector and interrupt level.
 15960                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 15961                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 15962                                  ;	MSSTACK module modifies the following interrupt vectors
 15963                                  ;	to meet the standard Interrupt Sharing standard;
 15964                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 15965                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 15966                                  ;	should be initialized to indicat whether this interrupt handler is
 15967                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 15968                                  ;	program header is initialized in STKINIT.INC module.
 15969                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 15970                                  ;
 15971                                  
 15972                                  ;  User specifies the number of stack elements - default = 9
 15973                                  ;						 minimum = 8
 15974                                  ;						 maximum = 64
 15975                                  ;
 15976                                  ;  Intercepts Asynchronous Hardware Interrupts only
 15977                                  ;
 15978                                  ;  Picks a stack from pool of stacks and switches to it
 15979                                  ;
 15980                                  ;  Calls the previously saved interrupt vector after pushing flags
 15981                                  ;
 15982                                  ;  On return, returns the stack to the stack pool
 15983                                  ;
 15984                                  
 15985                                  ; This is a modification of STACKS:
 15986                                  ; 1. To fix a bug which was causing the program to take up too much space.
 15987                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 15988                                  ;    . Clobbers the stack that got too big instead of innocent stack
 15989                                  ;    . Allows system to work if the only stack that got too big was the most
 15990                                  ;      deeply nested one
 15991                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 15992                                  ; 4. Does not intercept any interupts on a PCjr.
 15993                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 15994                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 15995                                  
 15996                                  		;EVEN
 15997                                  ;align 2
 15998                                  		; 21/10/2022
 15999                                  
 16000 00000000 0000                    		dw	0	; spare field but leave these in order
 16001 00000002 0000                    stackcount:	dw	0
 16002 00000004 0000                    stackat: 	dw	0
 16003 00000006 0000                    stacksize:	dw	0
 16004 00000008 0000                    stacks:		dw	0
 16005 0000000A 0000                    		dw	0
 16006                                  
 16007 0000000C [0800]                  firstentry:	dw	stacks
 16008 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16009 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16010                                  
 16011                                  ;***********************************************************************
 16012                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 16013                                  
 16014                                  ; ----------------------------------------------------------------------
 16015                                  
 16016 00000012 00000000                old02:	dd	0
 16017                                  
 16018                                  int02:
 16019                                  
 16020                                  ; *********************************************************************
 16021                                  ;
 16022                                  ; this is special support for the pc convertible / nmi handler
 16023                                  ;
 16024                                  ;	on the pc convertible, there is a situation where an nmi can be 
 16025                                  ;	caused by using the "out" instructions to certain ports. when this
 16026                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 16027                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 16028                                  ;	includes other type of interrupts (hardware and software), and
 16029                                  ;	also includes other type of nmi's. when any nmi has occured,
 16030                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 16031                                  ;	the software takes specific steps to allow further interrupting.
 16032                                  ;
 16033                                  ;	for pc convertible, the situation where the nmi is generated by the
 16034                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 16035                                  ;	otherwords, it is actually a "restartable exception". in this
 16036                                  ;	case, the software handler must be able to get to the stack in
 16037                                  ;	order to figure out what instruction caused the problem, where
 16038                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 16039                                  ;	we will not switch stacks in this situation. this situation is
 16040                                  ;	detected by interrogating port 62h, and checking for a bit value
 16041                                  ;	of 80h. if set, *****do not switch stacks*****.
 16042                                  ;
 16043                                  ; *********************************************************************
 16044                                  
 16045 00000016 50                      	push	ax
 16046 00000017 06                      	push	es
 16047 00000018 B800F0                  	mov	ax,0F000h
 16048 0000001B 8EC0                    	mov	es,ax
 16049                                  	; 02/11/2022
 16050 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 16051 00000023 07                      	pop	es
 16052 00000024 750C                    	jne	short normal02
 16053                                  
 16054 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 16055                                  				; 0-3: values of DIP switches
 16056                                  				; 5: 1=Timer 2 channel out
 16057                                  				; 6: 1=I/O channel check
 16058                                  				; 7: 1=RAM parity check error occurred.
 16059 00000028 A880                    	test	al,80h
 16060 0000002A 7406                    	jz	short normal02
 16061                                  special02:
 16062 0000002C 58                      	pop	ax
 16063 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 16064                                  normal02:
 16065 00000032 58                      	pop	ax
 16066 00000033 E81101                  	call	do_int_stacks
 16067 00000036 [1200]                  	dw	old02
 16068                                  
 16069                                  ; ----------------------------------------------------------------------
 16070                                  
 16071 00000038 00000000                old08:	dd	0
 16072                                  
 16073                                  int08:
 16074 0000003C E80801                  	call	do_int_stacks
 16075 0000003F [3800]                  	dw	old08
 16076                                  
 16077                                  ; ----------------------------------------------------------------------
 16078                                  
 16079 00000041 00000000                old09:	dd	0
 16080                                  
 16081                                  int09:
 16082                                  
 16083                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 16084                                  ; as its first instruction for compatibility reasons
 16085                                  
 16086 00000045 EB02                    	jmp	short keyboard_lbl
 16087 00000047 90                      	nop
 16088 00000048 00                      	db	0
 16089                                  
 16090                                  keyboard_lbl:
 16091 00000049 E8FB00                  	call	do_int_stacks
 16092 0000004C [4100]                  	dw	old09
 16093                                  
 16094                                  ; ----------------------------------------------------------------------
 16095                                  
 16096 0000004E 00000000                old70:	dd	0
 16097                                  
 16098                                  int70:
 16099 00000052 E8F200                  	call	do_int_stacks
 16100 00000055 [4E00]                  	dw	old70
 16101                                  
 16102                                  ; ----------------------------------------------------------------------
 16103                                  
 16104                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 16105                                  ;public	int&a
 16106                                  ;public	old&a
 16107                                  ;public	firstflag&a
 16108                                  ;int&a	proc	far
 16109                                  ;	jmp	short entry_int&a&_stk
 16110                                  ;old&a	dd	  0		;forward pointer
 16111                                  ;	dw	  424bh 	;compatible signature for int. sharing
 16112                                  ;firstflag&a db   0		;the firstly hooked.
 16113                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 16114                                  ;	db	7 dup (0)	;reserved for future.
 16115                                  ;entry_int&a&_stk:
 16116                                  ;	call	do_int_stacks
 16117                                  ;	dw	old&a
 16118                                  ;intret_&a:
 16119                                  ;	iret
 16120                                  ;int&a	endp
 16121                                  ;	endm
 16122                                  
 16123                                  ; ----------------------------------------------------------------------
 16124                                  
 16125                                  int0A:
 16126 00000057 EB10                    	jmp	short entry_int0A_stk
 16127 00000059 00000000                old0A:	dd	0	
 16128 0000005D 4B42                    	dw	424Bh
 16129                                  firstflag0A:
 16130 0000005F 00                      	db	0
 16131 00000060 EB0C                    	jmp	short intret_0A
 16132 00000062 00<rep 7h>              	times	7 db 0
 16133                                  
 16134                                  entry_int0A_stk:
 16135 00000069 E8DB00                  	call	do_int_stacks
 16136 0000006C [5900]                  	dw	old0A
 16137                                  intret_0A:
 16138 0000006E CF                      	iret
 16139                                  
 16140                                  ; ----------------------------------------------------------------------
 16141                                  
 16142                                  int0B:
 16143 0000006F EB10                    	jmp	short entry_int0B_stk
 16144 00000071 00000000                old0B:	dd	0	
 16145 00000075 4B42                    	dw	424Bh
 16146                                  firstflag0B:
 16147 00000077 00                      	db	0
 16148 00000078 EB0C                    	jmp	short intret_0B
 16149 0000007A 00<rep 7h>              	times	7 db 0
 16150                                  
 16151                                  entry_int0B_stk:
 16152 00000081 E8C300                  	call	do_int_stacks
 16153 00000084 [7100]                  	dw	old0B
 16154                                  intret_0B:
 16155 00000086 CF                      	iret
 16156                                  
 16157                                  ; ----------------------------------------------------------------------
 16158                                  
 16159                                  int0C:
 16160 00000087 EB10                    	jmp	short entry_int0C_stk
 16161 00000089 00000000                old0C:	dd	0	
 16162 0000008D 4B42                    	dw	424Bh
 16163                                  firstflag0C:
 16164 0000008F 00                      	db	0
 16165 00000090 EB0C                    	jmp	short intret_0C
 16166 00000092 00<rep 7h>              	times	7 db 0
 16167                                  
 16168                                  entry_int0C_stk:
 16169 00000099 E8AB00                  	call	do_int_stacks
 16170 0000009C [8900]                  	dw	old0C
 16171                                  intret_0C:
 16172 0000009E CF                      	iret
 16173                                  
 16174                                  ; ----------------------------------------------------------------------
 16175                                  
 16176                                  int0D:
 16177 0000009F EB10                    	jmp	short entry_int0D_stk
 16178 000000A1 00000000                old0D:	dd	0	
 16179 000000A5 4B42                    	dw	424Bh
 16180                                  firstflag0D:
 16181 000000A7 00                      	db	0
 16182 000000A8 EB0C                    	jmp	short intret_0D
 16183 000000AA 00<rep 7h>              	times	7 db 0
 16184                                  
 16185                                  entry_int0D_stk:
 16186 000000B1 E89300                  	call	do_int_stacks
 16187 000000B4 [A100]                  	dw	old0D
 16188                                  intret_0D:
 16189 000000B6 CF                      	iret
 16190                                  
 16191                                  ; ----------------------------------------------------------------------
 16192                                  
 16193                                  int0E:
 16194 000000B7 EB10                    	jmp	short entry_int0E_stk
 16195 000000B9 00000000                old0E:	dd	0	
 16196 000000BD 4B42                    	dw	424Bh
 16197                                  firstflag0E:
 16198 000000BF 00                      	db	0
 16199 000000C0 EB0C                    	jmp	short intret_0E
 16200 000000C2 00<rep 7h>              	times	7 db 0
 16201                                  
 16202                                  entry_int0E_stk:
 16203 000000C9 E87B00                  	call	do_int_stacks
 16204 000000CC [B900]                  	dw	old0E
 16205                                  intret_0E:
 16206 000000CE CF                      	iret
 16207                                  
 16208                                  ; ----------------------------------------------------------------------
 16209                                  
 16210                                  int72:
 16211 000000CF EB10                    	jmp	short entry_int72_stk
 16212 000000D1 00000000                old72:	dd	0	
 16213 000000D5 4B42                    	dw	424Bh
 16214                                  firstflag72:
 16215 000000D7 00                      	db	0
 16216 000000D8 EB0C                    	jmp	short intret_72
 16217 000000DA 00<rep 7h>              	times	7 db 0
 16218                                  
 16219                                  entry_int72_stk:
 16220 000000E1 E86300                  	call	do_int_stacks
 16221 000000E4 [D100]                  	dw	old72
 16222                                  intret_72:
 16223 000000E6 CF                      	iret
 16224                                  
 16225                                  ; ----------------------------------------------------------------------
 16226                                  
 16227                                  int73:
 16228 000000E7 EB10                    	jmp	short entry_int73_stk
 16229 000000E9 00000000                old73:	dd	0	
 16230 000000ED 4B42                    	dw	424Bh
 16231                                  firstflag73:
 16232 000000EF 00                      	db	0
 16233 000000F0 EB0C                    	jmp	short intret_73
 16234 000000F2 00<rep 7h>              	times	7 db 0
 16235                                  
 16236                                  entry_int73_stk:
 16237 000000F9 E84B00                  	call	do_int_stacks
 16238 000000FC [E900]                  	dw	old73
 16239                                  intret_73:
 16240 000000FE CF                      	iret
 16241                                  
 16242                                  ; ----------------------------------------------------------------------
 16243                                  
 16244                                  int74:
 16245 000000FF EB10                    	jmp	short entry_int74_stk
 16246 00000101 00000000                old74:	dd	0	
 16247 00000105 4B42                    	dw	424Bh
 16248                                  firstflag74:
 16249 00000107 00                      	db	0
 16250 00000108 EB0C                    	jmp	short intret_74
 16251 0000010A 00<rep 7h>              	times	7 db 0
 16252                                  
 16253                                  entry_int74_stk:
 16254 00000111 E83300                  	call	do_int_stacks
 16255 00000114 [0101]                  	dw	old74
 16256                                  intret_74:
 16257 00000116 CF                      	iret
 16258                                  
 16259                                  ; ----------------------------------------------------------------------
 16260                                  
 16261                                  int76:
 16262 00000117 EB10                    	jmp	short entry_int76_stk
 16263 00000119 00000000                old76:	dd	0	
 16264 0000011D 4B42                    	dw	424Bh
 16265                                  firstflag76:
 16266 0000011F 00                      	db	0
 16267 00000120 EB0C                    	jmp	short intret_76
 16268 00000122 00<rep 7h>              	times	7 db 0
 16269                                  
 16270                                  entry_int76_stk:
 16271 00000129 E81B00                  	call	do_int_stacks
 16272 0000012C [1901]                  	dw	old76
 16273                                  intret_76:
 16274 0000012E CF                      	iret
 16275                                  
 16276                                  ; ----------------------------------------------------------------------
 16277                                  
 16278                                  int77:
 16279 0000012F EB10                    	jmp	short entry_int77_stk
 16280 00000131 00000000                old77:	dd	0	
 16281 00000135 4B42                    	dw	424Bh
 16282                                  firstflag77:
 16283 00000137 00                      	db	0
 16284 00000138 EB0C                    	jmp	short intret_77
 16285 0000013A 00<rep 7h>              	times	7 db 0
 16286                                  
 16287                                  entry_int77_stk:
 16288 00000141 E80300                  	call	do_int_stacks
 16289 00000144 [3101]                  	dw	old77
 16290                                  intret_77:
 16291 00000146 CF                      	iret
 16292                                  
 16293                                  ; ----------------------------------------------------------------------
 16294                                  
 16295                                  ;********************************************************************
 16296                                  ;common routines
 16297                                  ;********************************************************************
 16298                                  
 16299                                  ; do interrupt stack switching. the fake return address holds
 16300                                  ; a pointer to the far-pointer of the actual interrupt
 16301                                  ; service routine
 16302                                  
 16303                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 16304                                  ; 21/03/2019 - Retro DOS v4.0
 16305                                  
 16306                                  ;allocbyte   equ 0
 16307                                  ;intlevel    equ 1
 16308                                  ;savedsp     equ 2
 16309                                  ;savedss     equ 4
 16310                                  ;newsp       equ 6
 16311                                  
 16312                                  do_int_stacks:
 16313 00000147 50                      	push	ax
 16314 00000148 55                      	push	bp
 16315 00000149 06                      	push	es
 16316 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 16317 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 16318 00000154 B001                    	mov	al,allocated ; 1
 16319                                  	; 21/10/2022
 16320                                  	;xchg	[es:bp+allocbyte],al 
 16321                                  	; 11/12/2022
 16322 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 16323 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 16324 0000015C 754F                    	jne	short notfree02
 16325                                  
 16326 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 16327                                  
 16328                                  found02:
 16329 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 16330 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 16331                                  
 16332 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 16333                                  
 16334 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 16335                                  	; 21/10/2022
 16336                                  	;mov	bp,[es:bp+6]
 16337                                  	; 11/12/2022
 16338                                  	;cmp	[es:bp+0],ax	
 16339 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 16340 00000176 7542                    	jne	short foundbad02
 16341                                  
 16342                                  	;mov	ax,es			; point ss,sp to the new stack
 16343                                  	;mov	es,bp
 16344                                  	;mov	bp,sp
 16345                                  	;mov	bp,[bp+6]
 16346                                  	;mov	ss,ax
 16347                                  	;mov	sp,es
 16348                                  	;mov	es,ax
 16349                                  	;mov	bp,[cs:bp]
 16350                                  
 16351                                  	; 21/10/2022 (MSDOS 5.0 code SYSINIT code)
 16352 00000178 55                      	push    bp
 16353 00000179 89E5                    	mov     bp,sp
 16354 0000017B 8B4608                  	mov     ax,[bp+8]
 16355 0000017E 5D                      	pop     bp
 16356 0000017F 06                      	push    es
 16357 00000180 17                      	pop     ss
 16358 00000181 89EC                    	mov     sp,bp
 16359 00000183 89C5                    	mov     bp,ax
 16360                                  	; 11/12/2022
 16361                                  	;mov	bp,[cs:bp+0]	
 16362 00000185 2E8B6E00                	mov	bp,[cs:bp]	
 16363                                  
 16364 00000189 9C                      	pushf				; go execute the real interrupt handler
 16365                                  	; 11/12/2022
 16366 0000018A 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 16367                                  	; 21/10/2022
 16368                                  	;call	far [cs:bp+0]
 16369                                  
 16370 0000018E 89E5                    	mov	bp,sp			; retrieve the table offset for us
 16371                                  	; 11/12/2022
 16372 00000190 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 16373                                  	; 21/10/2022
 16374                                  	;mov	bp,[es:bp+0]
 16375 00000194 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 16376 00000198 268B6602                	mov	sp,[es:bp+savedsp]
 16377                                  
 16378                                  	; 11/12/2022
 16379                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 16380                                  	; 21/10/2022
 16381 0000019C 26C6460000              	mov	byte [es:bp],free ; 0
 16382 000001A1 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 16383                                  
 16384 000001A6 07                      	pop	es
 16385 000001A7 5D                      	pop	bp			; saved on entry
 16386 000001A8 58                      	pop	ax			; saved on entry
 16387 000001A9 83C402                  	add	sp,2
 16388 000001AC CF                      	iret				; done with this interrupt
 16389                                  
 16390                                  notfree02:
 16391 000001AD 3C01                    	cmp	al,allocated		; error flag
 16392 000001AF 7404                    	je	short findnext02	;  no, continue
 16393                                  	; 11/12/2022
 16394                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 16395                                  	; 21/10/2022
 16396 000001B1 26864600                	xchg	[es:bp],al
 16397                                  
 16398                                  findnext02:
 16399 000001B5 E81200                  	call	longpath
 16400 000001B8 EBAA                    	jmp	short found02
 16401                                  
 16402                                  foundbad02:
 16403 000001BA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16404 000001BF 72F4                    	jc	short findnext02
 16405 000001C1 89C5                    	mov	bp,ax			; flag this entry
 16406                                  	; 11/12/2022
 16407                                  	;mov	byte [es:bp+allocbyte],clobbered
 16408                                  	; 21/10/2022
 16409 000001C3 26C6460003              	mov	byte [es:bp],clobbered ; 3
 16410 000001C8 EBEB                    	jmp	short findnext02	; keep looking
 16411                                  
 16412                                  ; ----------------------------------------------------------------------
 16413                                  
 16414                                  ; Common routines
 16415                                  
 16416                                  longpath:
 16417                                  	; 21/03/2019
 16418 000001CA 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 16419                                  lploopp:
 16420                                  	; 11/12/2022
 16421                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 16422                                  	; 21/10/2022
 16423 000001CF 26807E0000              	cmp	byte [es:bp],free
 16424 000001D4 7512                    	jne	short inuse		;  no, try next one
 16425                                  
 16426 000001D6 B001                    	mov	al,allocated
 16427                                  	; 11/12/2022
 16428                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 16429                                  	; 21/10/2022
 16430 000001D8 26864600                	xchg	[es:bp],al
 16431 000001DC 3C00                    	cmp	al,free 		; is it still free?
 16432 000001DE 7414                    	je	short found		;  yes, go use it
 16433                                  
 16434 000001E0 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 16435 000001E2 7404                    	je	short inuse		;  no, check the next one
 16436                                  
 16437                                  	; 11/12/2022
 16438                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 16439                                  	; 21/10/2022
 16440 000001E4 26884600                	mov	[es:bp],al
 16441                                  inuse:
 16442 000001E8 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16443 000001ED 7406                    	je	short fatal
 16444 000001EF 83ED08                  	sub	bp,entrysize
 16445 000001F2 EBDB                    	jmp	short lploopp
 16446                                  found:
 16447 000001F4 C3                      	retn
 16448                                  fatal:
 16449 000001F5 1E                      	push	ds
 16450 000001F6 B800F0                  	mov	ax,0F000h		;look at the model byte
 16451 000001F9 8ED8                    	mov	ds,ax
 16452 000001FB 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 16453 00000200 1F                      	pop	ds
 16454 00000201 7504                    	jne	short skip_nmis
 16455                                  
 16456 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
 16457 00000205 E672                    	out	72h,al
 16458                                  
 16459                                  skip_nmis:
 16460 00000207 FA                      	cli				; disable and mask
 16461 00000208 B0FF                    	mov	al,0FFh			;   all other ints
 16462 0000020A E621                    	out	021h,al
 16463 0000020C E6A1                    	out	0A1h,al
 16464                                  
 16465 0000020E 8CCE                    	mov	si,cs
 16466 00000210 8EDE                    	mov	ds,si
 16467 00000212 BE[3902]                	mov	si,fatal_msg
 16468                                  ;SR;
 16469                                  ;   We set all foci to this VM to issue the stack failure message
 16470                                  ;
 16471 00000215 50                      	push	ax
 16472 00000216 1E                      	push	ds
 16473                                  	;;mov	ax,Bios_Data ; 0070h
 16474                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16475                                  	; 21/10/2022
 16476 00000217 B87000                  	mov	ax,DOSBIODATASEG
 16477 0000021A 8ED8                    	mov	ds,ax
 16478                                  
 16479                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 16480 0000021C F606[CE08]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 16481 00000221 1F                      	pop	ds
 16482 00000222 58                      	pop	ax
 16483 00000223 7405                    	jz	short fatal_loop	; win386 not present, continue
 16484                                  
 16485                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 16486                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 16487                                  	; 21/10/2022
 16488 00000225 9A[CF08]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 16489                                  ;
 16490                                  ;SR; We do not bother about the returned status of this call. 
 16491                                  ;
 16492                                  fatal_loop:
 16493 0000022A AC                      	lodsb
 16494 0000022B 3C24                    	cmp	al,'$'
 16495 0000022D 7408                    	je	short fatal_done
 16496                                  
 16497 0000022F B307                    	mov	bl,7
 16498 00000231 B40E                    	mov	ah,14
 16499 00000233 CD10                    	int	10h			; whoops, this enables ints
 16500 00000235 EBF3                    	jmp	short fatal_loop
 16501                                  
 16502                                  fatal_done:
 16503 00000237 EBFE                    	jmp	short fatal_done
 16504                                  
 16505                                  
 16506                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 16507                                  ; ----------------------------------------------------------------------
 16508                                  ;	include msbio.cl5		; fatal stack error message
 16509                                  
 16510                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 16511                                  
 16512                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 16513                                  ; ----------------------------------------------------------------------
 16514                                  ; 04/06/2018 - Retro DOS v3.0
 16515                                  
 16516                                  fatal_msg:
 16517 00000239 0D0A                    	db	0Dh,0Ah
 16518 0000023B 070D0A                  	db	7,0Dh,0Ah
 16519 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 16519 00000247 737461636B206F7665-
 16519 00000250 72666C6F770D0A     
 16520 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 16520 00000260 6C7465640D0A24     
 16521                                  
 16522                                  endstackcode:
 16523                                  
 16524                                  ; ----------------------------------------------------------------------
 16525                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 16526                                  ; ----------------------------------------------------------------------
 16527                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 16528                                  
 16529                                  ; 22/03/2019 - Retro DOS v4.0
 16530                                  
 16531                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 16532                                  
 16533                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 16534                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 16535                                  
 16536                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16537                                  ; ----------------------------------------------------------------------
 16538                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 16539                                  
 16540                                  SYSINIT:	
 16541 00000267 E91C02                          JMP	GOINIT
 16542                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 16543                                  
 16544                                  ; ----------------------------------------------------------------------
 16545                                  
 16546                                  struc DDHighInfo
 16547 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 16548 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 16549 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 16550                                  endstruc
 16551                                  
 16552                                  ; 22/03/2019 - Retro DOS v4.0
 16553                                  
 16554 0000026A 00                      runhigh: db	0
 16555                                  
 16556                                  ; 02/11/2022
 16557                                  ;align 4
 16558                                  
 16559                                  DOSINFO: 
 16560 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 16561                                  ;MSDOS:
 16562                                  dos_temp_location: ; dword ; MSDOS 6.0
 16563                                  dosinit:		; MSDOS 6.0
 16564 0000026F 0000                    	dw	0
 16565                                  
 16566                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16567                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 16568                                  ;	dw	0
 16569                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 16570                                  
 16571                                  CURRENT_DOS_LOCATION:
 16572 00000271 0000                    	dw	0
 16573                                  
 16574                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 16575                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 16576                                  
 16577                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16578                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 16579                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16580                                  
 16581                                  DEVICE_LIST:
 16582 00000273 00000000                	dd	0
 16583                                  
 16584                                  ; 04/06/2018 - Retro DOS v3.0
 16585                                  ; 28/03/2018
 16586                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 16587                                  ;
 16588                                  sysi_country:	
 16589 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 16590                                  
 16591                                  ; MSDOS 6.0
 16592 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 16593                                  
 16594 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 16595 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 16596                                  
 16597 00000283 0000                    def_php:	dw	0
 16598                                  
 16599                                  ; M022--
 16600                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 16601                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 16602                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 16603                                  ;  the new home.
 16604                                  
 16605                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 16606                                  ; 21/10/2022
 16607                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 16608                                  
 16609                                  ; 22/10/2022
 16610                                  seg_reinit_ptr:	; label dword
 16611 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 16612                                  temp_bcode_seg:
 16613                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 16614                                  		; 22/10/2022
 16615 00000287 9D02                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 16616                                  
 16617                                  fake_floppy_drv:
 16618 00000289 00                      		db	0	; set to 1 if this machine
 16619                                  				; does not have any floppies!!!
 16620                                  
 16621                                  ; Internal Stack Parameters
 16622                                  
 16623 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 16624 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 16625 0000028E 00000000                stack_addr:	dd	0	
 16626                                  
 16627                                  ; 05/06/2018 - Retro DOS v3.0
 16628                                  
 16629                                  ; various default values
 16630                                  
 16631 00000292 0100                    MEMORY_SIZE:	dw	1
 16632                                  
 16633                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 16634                                  
 16635 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 16636 00000296 00                      DEFAULT_DRIVE:	db	0	;initialized by ibminit.
 16637 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 16638 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 16639 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 16640                                  
 16641 0000029D 08                      FILES:	db	8	; enough files for pipe
 16642 0000029E 04                      FCBS:	db	4	; performance for recycling
 16643 0000029F 00                      KEEP:	db	0	; keep original set
 16644 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 16645                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 16646                                  ;CONFBOT: dw	0
 16647                                  ;ALLOCLIM: dw	0
 16648                                  CONFBOT: ; 02/11/2022
 16649 000002A1 0000                    top_of_cdss: dw 0
 16650                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 16651 000002A3 0000                    ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 16652                                  
 16653 000002A5 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 16654                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SAYSINIT compatibility)
 16655                                  ; (SYSINIT:02A9h)
 16656                                  command_line:
 16657 000002A9 0200                    	db	2,0
 16658 000002AB 50                      	db	'P'
 16659 000002AC 00                      	db	0
 16660 000002AD 00<rep 7Ch>             	times	124 db 0 ; db 124 dup(0)	
 16661                                  ; (SYSINIT:0329h)
 16662 00000329 00                      ZERO:	db	0
 16663 0000032A 00                      sepchr:	db	0
 16664 0000032B 0000                    linecount: dw	0			; line count in config.sys
 16665 0000032D 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 16666 00000335 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 16667                                  
 16668 00000337 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 16669 00000338 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 16670                                  
 16671 00000339 0000                    buf_prev_off:	dw	0
 16672                                  
 16673                                          ;IF      NOT NOEXEC
 16674                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 16675                                          ;ENDIF
 16676                                  
 16677                                  ; 01/05/2018
 16678                                  COMEXE:
 16679 0000033B 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 16680 0000033D [A902]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 16681 0000033F 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16682 00000341 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 16683 00000343 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16684 00000345 [2903]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 16685 00000347 0000                    		dw	0
 16686                                  
 16687                                  ; variables for install= command.
 16688                                  
 16689 00000349 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 16690                                  					;  indicating the pass number
 16691                                  					; 0 - do scan for DOS=HIGH/LOW
 16692                                  					; 1 - load device drivers
 16693                                  					; 2 - was to load IFS
 16694                                  					;      now it is unused
 16695                                  					; 3 - do install=
 16696                                  					; >3 - nop
 16697 0000034A 0000                    install_flag:	dw	0
 16698                                  
 16699                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 16700                                  has_installed	equ	00000010b	; sysinit_base installed.
 16701                                  
 16702 0000034C 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 16703 0000034E 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 16704 00000352 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 16705 00000356 0000                    checksum:	dw	0		; used by sum_up
 16706                                  
 16707 00000358 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 16708 0000036C 00                      ldexec_line:	db	0		;# of parm characters
 16709 0000036D 20                      ldexec_start:	db	' '
 16710 0000036E 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 16711                                  
 16712                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 16713                                  
 16714                                  instexe:
 16715 000003BE 0000                    iexec.environ:	dw	0		; seg addr of environment
 16716 000003C0 [6C03]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 16717 000003C2 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16718 000003C4 [5803]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 16719 000003C6 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16720 000003C8 [5803]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 16721 000003CA 0000                    		dw	0
 16722                                  
 16723                                  ; variables for comment=
 16724                                  
 16725 000003CC 00                      com_level:	db	0		; level of " " in command line
 16726 000003CD 00                      cmmt:		db	0		; length of comment string token
 16727 000003CE 00                      cmmt1:		db	0		; token
 16728 000003CF 00                      cmmt2:		db	0		; token
 16729 000003D0 00                      cmd_indicator:	db	0
 16730 000003D1 00                      donotshownum:	db	0
 16731                                  
 16732 000003D2 0000                    count:		dw	0
 16733 000003D4 0000                    org_count:	dw	0
 16734 000003D6 0000                    chrptr:		dw	0
 16735 000003D8 0000                    cntryfilehandle: dw	0
 16736 000003DA 0000                    old_area:	dw	0
 16737 000003DC 0000                    impossible_owner_size: dw 0		; paragraph
 16738                                  
 16739                                  bucketptr: ; label dword
 16740                                  bufptr:	   ; label dword		; leave this stuff in order!
 16741 000003DE 0000                    memlo:	dw	0
 16742                                  prmblk:	   ; label word
 16743 000003E0 0000                    memhi:	dw	0
 16744 000003E2 0000                    ldoff:	dw	0
 16745 000003E4 0000                    area:	dw	0
 16746                                  
 16747                                  ; Following is the request packet used to call INIT routines for 
 16748                                  ; all device drivers. Some fields may be accessed individually in
 16749                                  ; the code, and hence have individual labels, but they should not
 16750                                  ; be separated.
 16751                                  
 16752 000003E6 18                      packet:	db	24			; was 22
 16753 000003E7 00                      	db	0
 16754 000003E8 00                      	db	0			; initialize code
 16755 000003E9 0000                    	dw	0
 16756 000003EB 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 16757                                  
 16758 000003F3 00                      unitcount:	db	0
 16759 000003F4 00000000                break_addr:	dd	0
 16760 000003F8 00000000                bpb_addr:	dd	0
 16761                                  drivenumber:	; 22/10/2022
 16762 000003FC 00                      devdrivenum:	db	0 
 16763 000003FD 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 16764                                  
 16765                                  ; end of request packet
 16766                                  
 16767                                  ;drivenumber:	db	0  ; 22/03/2019
 16768                                  
 16769                                  toomanydrivesflag:
 16770 000003FF 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 16771                                  align 2
 16772                                  
 16773                                  BCodeSeg:	; 21/10/2022
 16774 00000400 9D02                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 16775                                  	;dw	Bios_Code ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 16776                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 16777                                  
 16778                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16779                                  ;; 19/04/2019
 16780                                  ;_timer_lw_:
 16781                                  ;	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 16782                                  	
 16783                                  ;SR;
 16784                                  ; This is the communication block between the DOS and the BIOS. It starts at
 16785                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 16786                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 16787                                  ;is passed to DOS as part of the DOSINIT call.
 16788                                  ;
 16789                                  
 16790                                  BiosComBlock:
 16791                                  	;dd	Bios_Data:SysinitPresent 
 16792                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 16793 00000402 [FB08]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 16794                                  	;dw	KERNEL_SEGMENT ; 0070h
 16795                                  	; 21/10/2022
 16796 00000404 7000                    	dw	DOSBIODATASEG ; 0070h
 16797                                  
 16798                                  ;align 2
 16799                                  
 16800                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 16801                                  tempstack:	
 16802 00000406 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 16803                                  
 16804                                  ; ----------------------------------------------------------------------------
 16805                                  
 16806                                  	; 22/10/2022 - Retro DOS v4.0
 16807                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 16808                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 16809                                  	; 12/12/2022
 16810                                  	; 22/03/2019 - Retro DOS v4.0
 16811                                  	; 06/07/2018
 16812                                  	; 04/06/2018 - Retro DOS v3.0
 16813                                  ; before doing anything else, let's set the model byte
 16814 00000486 B4C0                    	mov	ah,0C0h 		; get system configuration
 16815 00000488 CD15                    	int	15h			; *
 16816 0000048A 7217                    	jc	short no_rom_config
 16817                                  
 16818 0000048C 80FC00                  	cmp	ah,0			; double check
 16819 0000048F 7512                    	jne	short no_rom_config
 16820 00000491 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 16821 00000495 2EA2[3703]              	mov	[cs:sys_model_byte],al 
 16822 00000499 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 16823 0000049D 2EA2[3803]              	mov	[cs:sys_scnd_model_byte],al
 16824                                  	;jmp	short SYSIN
 16825                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16826 000004A1 EB2D                    	jmp	short move_myself
 16827                                  
 16828                                  no_rom_config:				; Old ROM
 16829 000004A3 B800F0                  	mov	ax,0F000h
 16830 000004A6 8ED8                    	mov	ds,ax
 16831 000004A8 A0FEFF                  	mov	al,[0FFFEh]
 16832 000004AB 2EA2[3703]              	mov	[cs:sys_model_byte],al	; set the model byte.
 16833                                  
 16834                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 16835                                  ; execute the equipment determination interrupt and then
 16836                                  ; check the returned value to see if we have any floppy drives
 16837                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 16838                                  ; see the at tech ref bios listings for help on the equipment
 16839                                  ; flag interrupt (11h)	
 16840                                  
 16841                                  	; 22/10/2022
 16842                                  check_for_fake_floppy:			; entry point for rom_config above
 16843 000004AF CD11                    	int	11h			; check equipment flag
 16844                                  
 16845                                  	; 12/12/2022
 16846 000004B1 A801                    	test	al,1		
 16847                                  	;test	ax,1			; have any floppies?
 16848 000004B3 751B                    	jnz	short move_myself	; yes,normal system
 16849                                  
 16850                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 16851                                  ; whether it is an old ROM BIOS or a new one
 16852                                  ;
 16853                                  ; WARNING !!!
 16854                                  ;
 16855                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 16856                                  ; here will require an equivalent modification in MSINIT.ASM also
 16857                                  
 16858 000004B5 06                      	push	es
 16859                                  
 16860 000004B6 30C9                    	xor	cl,cl	
 16861 000004B8 B408                    	mov	ah,8			; get disk parameters
 16862 000004BA B200                    	mov	dl,0			; of drive 0
 16863 000004BC CD13                    	int	13h
 16864                                  
 16865 000004BE 07                      	pop	es
 16866                                  
 16867 000004BF 720F                    	jc	short move_myself	; if error lets assume that the
 16868                                  					;  ROM BIOS lied
 16869 000004C1 80F900                  	cmp	cl,0			; double check (max sec no cannot be 0)
 16870 000004C4 740A                    	je	short move_myself
 16871                                  
 16872 000004C6 08D2                    	or	dl,dl			; number of flp drvs == 0?
 16873 000004C8 7506                    	jnz	short move_myself
 16874                                  
 16875 000004CA 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 16876                                  
 16877                                  move_myself:
 16878 000004D0 FC                      	cld				; set up move
 16879 000004D1 31F6                    	xor	si,si
 16880 000004D3 89F7                    	mov	di,si
 16881                                  
 16882                                  	; 12/12/2022
 16883 000004D5 0E                      	push	cs
 16884 000004D6 1F                      	pop	ds
 16885                                  
 16886                                  	;mov	cx,[cs:MEMORY_SIZE]
 16887 000004D7 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 16888                                  
 16889                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16890                                  ;;;	if	msver
 16891                                  ;	cmp	cx,1		; 1 means do scan
 16892                                  ;	jnz	short noscan
 16893                                  ;	mov	cx,2048		; start scanning at 32k boundary
 16894                                  ;	xor	bx,bx
 16895                                  ;
 16896                                  ;memscan:inc	cx
 16897                                  ;	jz	setend
 16898                                  ;	mov	ds,cx
 16899                                  ;	mov	al,[bx]
 16900                                  ;	not	al
 16901                                  ;	mov	[bx],al
 16902                                  ;	cmp	al,[bx]
 16903                                  ;	not	al
 16904                                  ;	mov	[bx],al
 16905                                  ;	jz	short memscan
 16906                                  ;setend:
 16907                                  ;	mov	cs:[memory_size],cx
 16908                                  ;;;	endif
 16909                                  
 16910                                  ;noscan: 				; cx is mem size in para
 16911                                  ;;
 16912                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 16913                                  ;;		  before we try to run.
 16914                                  ;;	       b) in any case, we should check for sufficient memory and give
 16915                                  ;;		  an appropriate error diagnostic if there isn't enough
 16916                                  ;
 16917                                  ;	push	cs
 16918                                  ;	pop	ds
 16919                                  ;
 16920                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 16921                                  ;;	  that way it would be easier to slide them down home in a minimal
 16922                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 16923                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 16924                                  ;;	  temporary home and the final one.  the problem with doing that
 16925                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 16926                                  ;
 16927                                  ;	dec	cx			; one para for an arena at end of mem
 16928                                  ;					; in case of UMBs
 16929                                  
 16930                                  	; 22/10/2022
 16931                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 16932                                  
 16933                                  	; 12/12/2022
 16934                                  	;push	cs
 16935                                  	;pop	ds
 16936                                  
 16937 000004DB 49                      	dec	cx
 16938                                  
 16939                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 16940                                  
 16941 000004DC 31DB                    	xor	bx,bx
 16942 000004DE 8EC3                    	mov	es,bx
 16943 000004E0 268B1EBC00              	mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 16944 000004E5 268E06BE00              	mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 16945 000004EA 26817F035250            	cmp	word [es:bx+3],'RP'
 16946 000004F0 751B                    	jne	short NoRPL
 16947 000004F2 26807F054C              	cmp	byte [es:bx+5],'L'
 16948 000004F7 7514                    	jne	short NoRPL
 16949                                  
 16950 000004F9 89CA                    	mov	dx,cx			; get TOM into DX
 16951 000004FB 52                      	push	dx
 16952 000004FC B8064A                  	mov	ax,4A06h
 16953                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 16954 000004FF CD2F                    	int	2Fh			; Get new TOM from any RPL
 16955 00000501 58                      	pop	ax
 16956 00000502 89D1                    	mov	cx,dx
 16957 00000504 39C2                    	cmp	dx,ax
 16958 00000506 7405                    	je	short NoRPL
 16959                                  	
 16960                                  	; 11/12/2022
 16961                                  	; ds = cs
 16962 00000508 8916[9402]              	mov	[RPLMemTop],dx
 16963                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16964                                  	;mov	[cs:RPLMemTop],dx
 16965                                  	
 16966 0000050C 49                      	dec	cx
 16967                                  NoRPL:
 16968 0000050D B8[B038]                	mov	ax,SI_end		; need this much room for sysinit
 16969                                  					; (SI_end == sysinit code size)
 16970 00000510 E8BA06                  	call	off_to_para
 16971 00000513 29C1                    	sub	cx,ax
 16972                                  
 16973                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 16974                                  ; code above sysinit in memory
 16975                                  ;
 16976 00000515 81E9000A                	sub	cx,DOSSIZE/16		; leave this much room for DOS
 16977                                  
 16978 00000519 B8001A                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 16979 0000051C E8AE06                  	call	off_to_para		; leave this much room for BIOS code
 16980 0000051F 29C1                    	sub	cx,ax
 16981 00000521 8EC1                    	mov	es,cx			; offset where sysinit will be located
 16982                                  
 16983 00000523 B9[B038]                	mov	cx,SI_end		; (sysinit code size)
 16984 00000526 D1E9                    	shr	cx,1			; divide by 2 to get words
 16985 00000528 F3A5                    	rep	movsw			; relocate sysinit
 16986                                  
 16987 0000052A 06                      	push	es			; push relocated segment
 16988 0000052B B8[3005]                	mov	ax,SYSIN
 16989 0000052E 50                      	push	ax			; push relocated entry point
 16990                                  
 16991 0000052F CB                      	retf				; far jump to relocated sysinit
 16992                                  
 16993                                  ; ----------------------------------------------------------------------------
 16994                                  
 16995                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 16996                                  
 16997                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 16998                                  	; (SYSINIT:0533h)
 16999                                  SYSIN:
 17000                                  	; Retro DOS 4.0 - 22/03/2019
 17001                                  	; Retro DOS 2.0 - 25/02/2018
 17002                                  
 17003                                  	; 23/04/2019
 17004                                  	;;mov	ax,Bios_Data
 17005                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17006                                  	; 21/10/2022
 17007 00000530 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17008 00000533 8ED8                    	mov	ds,ax
 17009 00000535 8C0E[F908]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 17010 00000539 C606[FB08]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 17011                                  
 17012                                  ; first move the MSDOS.SYS image up to a harmless place 
 17013                                  ; on top of our new sysinitseg
 17014                                  
 17015                                  	; 22/10/2022
 17016 0000053E B8[B038]                	mov	ax,SI_end		; how big is sysinitseg?
 17017 00000541 E88906                  	call	off_to_para
 17018 00000544 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 17019 00000546 01C8                    	add	ax,cx
 17020 00000548 8EC0                    	mov	es,ax
 17021                                  	
 17022 0000054A 31F6                    	xor	si,si
 17023 0000054C 89F7                    	mov	di,si
 17024                                  
 17025 0000054E 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 17026                                  
 17027                                  	;mov	ax,cs	
 17028                                  	;mov	ds,ax
 17029                                  
 17030                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 17031                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 17032                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 17033                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 17034                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 17035                                  
 17036                                  	; 22/10/2022
 17037 00000553 B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 17038 00000556 F3A5                    	rep     movsw
 17039 00000558 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 17040                                  
 17041                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 17042                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 17043                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 17044                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 17045                                  
 17046                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 17047                                  	;mov	ax,cs
 17048                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17049                                  	;mov	ds,ax
 17050                                  
 17051                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17052                                  
 17053                                  ;	; 24/04/2019 
 17054                                  ;;ifndef ROMDOS
 17055                                  ;	mov	ax,[es:3] 		; get offset of dos
 17056                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 17057                                  ;	mov	[dosinit],ax		; that's the entry point offset
 17058                                  ;	call	off_to_para		; subtract this much from segment
 17059                                  ;	; 23/04/2019
 17060                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 17061                                  ;	sub	[FINAL_DOS_LOCATION],ax
 17062                                  ;;else
 17063                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 17064                                  ;;
 17065                                  ;;endif ; ROMDOS
 17066                                  
 17067                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17068                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 17069                                  
 17070                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 17071                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 17072                                  
 17073                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17074                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17075 0000055D A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 17076                                  
 17077 00000560 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17078                                  	; 02/11/2022
 17079 00000564 E86606                  	call	off_to_para		; subtract this much from segment
 17080 00000567 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 17081                                  
 17082                                  	; Current DOSCODE start address = dword [dosinit]
 17083                                  
 17084                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 17085                                  ;; until it is determined whether it will be running in HIMEM or not.
 17086                                  
 17087                                  ;ifndef ROMDOS
 17088                                  
 17089                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 17090                                  
 17091                                  	; 22/10/2022
 17092 0000056C 8CC0                    	mov	ax,es
 17093 0000056E 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 17094 00000571 8EC0                    	mov	es,ax
 17095 00000573 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 17096 00000578 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 17097                                  
 17098                                  	;mov	si,BCODE_START ; mov si,30h
 17099                                  	; 09/12/2022
 17100 0000057A BE[3000]                	mov	si,BCODESTART
 17101                                  	; 02/11/2022
 17102 0000057D 89F7                    	mov	di,si
 17103 0000057F B9001A                  	mov	cx,BCODE_END   ; mov cx,1A60h
 17104 00000582 29F1                    	sub	cx,si
 17105 00000584 D1E9                    	shr	cx,1
 17106 00000586 F3A5                    	rep	movsw			; move Bios_Code into place
 17107                                  
 17108 00000588 8CC0                    	mov	ax,es			; tell it what segment it's in
 17109 0000058A 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 17110                                  
 17111                                  ;endif	; not ROMDOS
 17112                                  
 17113                                  ; now call dosinit while it's in its temporary home
 17114                                  
 17115                                  	;mov	ax,cs
 17116                                  	;mov	ds,ax	 
 17117                                  
 17118                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 17119                                  
 17120                                  	; 22/10/2022
 17121                                  
 17122 0000058F 2EC43E[0204]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 17123                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 17124 00000594 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 17125                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 17126                                  
 17127 00000599 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 17128                                  
 17129 0000059E FA                      	cli
 17130 0000059F 8CC8                    	mov	ax,cs
 17131 000005A1 8ED0                    	mov	ss,ax
 17132                                  
 17133                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 17134                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 17135                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 17136                                  ;SYSINIT:0532h:
 17137                                  
 17138                                  ; 22/10/2022
 17139                                  ; ----------------------------------------------------------------------------
 17140                                  ;SYSINIT:05A6h:
 17141                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 17142                                  
 17143                                  	;mov	sp, 05A6h
 17144 000005A3 BCA205                  	mov     sp,locstack		; set stack
 17145                                  
 17146 000005A6 FB                      	sti
 17147                                  
 17148                                  ;align 2
 17149                                  	; 30/03/2018
 17150                                  ;LOCSTACK:
 17151                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 17152                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 17153                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 17154                                  
 17155                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17156                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 17157                                  
 17158                                  ; This call to DOSINIT will relocate the DOS data from its present location
 17159                                  ; at the top of memory, to its final location in low memory just above the
 17160                                  ; BIOS data. It will then build important DOS data structures in low 
 17161                                  ; memory following the DOS data. It returns (among many other things) the
 17162                                  ; new starting address of free memory.
 17163                                  
 17164 000005A7 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 17165                                  			 ; es:di -> sysinitvars_ext
 17166                                  
 17167 000005AC 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 17168                                  	
 17169                                  	; 11/12/2022
 17170                                  	; 22/03/2019
 17171 000005B1 0E                      	push	cs
 17172 000005B2 1F                      	pop	ds
 17173                                  	; 22/10/2022
 17174 000005B3 A3[8102]                	mov	[hi_doscod_size],ax
 17175 000005B6 890E[7F02]              	mov	[lo_doscod_size],cx
 17176 000005BA 8916[7B02]              	mov	[dos_segreinit],dx
 17177                                  	
 17178                                  	; 11/12/2022
 17179                                  	; ds = cs
 17180                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 17181                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 17182                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 17183                                  
 17184                                  	; 05/06/2018 - Retro DOS v3.0
 17185                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 17186                                  
 17187                                  	; 11/12/2022
 17188                                  	; ds = cs
 17189                                  	; 22/10/2022
 17190                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 17191 000005BE 268B05                  	mov	ax,[es:di] ; 22/03/2019
 17192                                  	;mov	[cs:DOSINFO],ax
 17193 000005C1 A3[6B02]                	mov	[DOSINFO],ax
 17194                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 17195 000005C4 268B4502                	mov	ax,[es:di+2]
 17196                                  	;mov	[cs:DOSINFO+2],ax
 17197 000005C8 A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 17198                                  
 17199                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 17200 000005CB 268B4504                	mov	ax,[es:di+4]
 17201                                  	;mov	[cs:sysi_country],ax
 17202 000005CF A3[7702]                	mov	[sysi_country],ax
 17203                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 17204 000005D2 268B4506                	mov	ax,[es:di+6]
 17205                                  	;mov	[cs:sysi_country+2],ax
 17206 000005D6 A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 17207                                  
 17208                                  	; 20/04/2019
 17209                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 17210                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 17211                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 17212                                  	; 22/10/2022
 17213                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 17214                                  	;;;mov	[dos_segreinit+2],es
 17215                                  	;;mov	[dos_segreinit+2],ax
 17216                                  	;mov	[cs:dos_segreinit+2],ax
 17217                                  	; 11/12/2022
 17218                                  	; ds = cs
 17219 000005D9 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17220 000005DD 8C06[7D02]              	mov	[dos_segreinit+2],es
 17221                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17222                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 17223                                  	;mov	[cs:dos_segreinit+2],es
 17224                                  
 17225                                  ; ----------------------------------------------------------------------------
 17226                                  
 17227                                  ;SYSINIT:0577h:
 17228                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 17229                                  ;SYSINIT:05D1h:	; NoRPLArena 
 17230                                  
 17231                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17232                                  ;------ Cover up RPL code with an arena
 17233                                  ;SYSINIT:05EBh:
 17234                                  	; 11/12/2022
 17235                                  	; ds = cs
 17236 000005E1 31DB                    	xor	bx,bx
 17237 000005E3 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 17238                                  	;cmp	word [RPLMemTop],0
 17239                                  	;;cmp	word [cs:RPLMemTop],0
 17240 000005E7 7450                    	je	short NoRPLArena
 17241                                  
 17242                                  ;------ alloc all memory
 17243                                  
 17244                                  	; 11/12/2022
 17245                                  	;mov	bx,0FFFFh
 17246 000005E9 4B                      	dec	bx
 17247                                  	; bx = 0FFFFh
 17248 000005EA B448                    	mov	ah,48h
 17249 000005EC CD21                    	int	21h
 17250                                  			; DOS - 2+ - ALLOCATE MEMORY
 17251                                  			; BX = number of 16-byte paragraphs desired
 17252 000005EE B448                    	mov	ah,48h
 17253 000005F0 CD21                    	int	21h
 17254                                  
 17255 000005F2 8EC0                    	mov	es,ax			; get it into ES and save it
 17256 000005F4 06                      	push	es
 17257                                  
 17258                                  ;------ resize upto RPL mem
 17259                                  
 17260                                  	; 11/12/2022
 17261                                  	; ds = cs
 17262                                  	;sub	ax,[cs:RPLMemTop]
 17263 000005F5 2B06[9402]              	sub	ax,[RPLMemTop]
 17264 000005F9 F7D8                    	neg	ax
 17265 000005FB 48                      	dec	ax
 17266 000005FC 89C3                    	mov	bx,ax
 17267 000005FE B44A                    	mov	ah,4Ah
 17268 00000600 CD21                    	int	21h
 17269                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17270                                  			; ES = segment address of block to change
 17271                                  			; BX = new size in paragraphs
 17272                                  
 17273                                  ;------ allocate the free (RPL MEM)
 17274                                  
 17275 00000602 BBFFFF                  	mov	bx,0FFFFh
 17276 00000605 B448                    	mov	ah,48h
 17277 00000607 CD21                    	int	21h
 17278 00000609 B448                    	mov	ah,48h
 17279 0000060B CD21                    	int	21h
 17280                                  
 17281                                  ;----- mark that it belongs to RPL
 17282                                  
 17283 0000060D 48                      	dec	ax
 17284 0000060E 8EC0                    	mov	es,ax
 17285                                  	;mov	word [es:arena_owner],8
 17286 00000610 26C70601000800          	mov	word [es:1],8
 17287                                  	;mov	word [es:arena_name],'RP'
 17288 00000617 26C70608005250          	mov	word [es:8],'RP'
 17289                                  	;mov	word [es:arena_name+2],'L'
 17290 0000061E 26C7060A004C00          	mov	word [es:10],'L'
 17291                                  	;mov	word [es:arena_name+4],0
 17292 00000625 26C7060C000000          	mov	word [es:12],0
 17293                                  	;mov	word [es:arena_name+6],0
 17294 0000062C 26C7060E000000          	mov	word [es:14],0	
 17295                                  
 17296 00000633 07                              pop     es                      ; get back ptr to first block
 17297 00000634 B449                            mov     ah,49h	; Dealloc	; and free it
 17298 00000636 CD21                    	int	21h		
 17299                                  					; DOS - 2+ - FREE MEMORY
 17300                                  					; ES = segment address of area to be freed
 17301                                  	; 11/12/2022
 17302 00000638 F8                      	clc
 17303                                  
 17304                                  ; ----------------------------------------------------------------------------
 17305                                  
 17306                                  NoRPLArena:
 17307                                  	; 11/12/2022
 17308                                  	; ds = cs
 17309                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 17310 00000639 C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 17311                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17312                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 17313                                  
 17314                                  	; 11/12/2022
 17315                                  	;clc				; get the extended memory size
 17316                                  
 17317                                  ;	execute the get extended memory size subfunction in the bios int 15h
 17318                                  ;	if the function reports an error do nothing else store the extended
 17319                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 17320                                  ;	currently pointed to by es:di. use the offsets specified in the
 17321                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 17322                                  
 17323 0000063D B488                    	mov	ah,88h
 17324 0000063F CD15                    	int	15h			; check extended memory size
 17325 00000641 720B                    	jc	short no_ext_memory
 17326                                  			; Get Extended Memory Size
 17327                                  			; Return: CF clear on success
 17328                                  			; AX = size of memory above 1M in K	
 17329                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 17330                                  	; 22/10/2022
 17331 00000643 26894545                	mov	[es:di+45h],ax ; save extended memory size
 17332 00000647 09C0                    	or	ax,ax
 17333 00000649 7403                    	jz	short no_ext_memory
 17334 0000064B E8F504                  	call	ClrVDISKHeader
 17335                                  no_ext_memory:
 17336                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 17337 0000064E 268B4510                	mov	ax,[es:di+10h]
 17338                                  	;add	ax,bufinsiz
 17339 00000652 83C014                  	add	ax,20			; size of buffer header
 17340                                  	; 11/12/2022
 17341                                  	; ds = cs
 17342 00000655 A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 17343                                  	;mov	[cs:singlebuffersize],ax	
 17344                                  	; 11/12/2022
 17345 00000658 A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 17346                                  	;mov	al,[cs:DEFAULT_DRIVE]
 17347                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 17348 0000065B 26884543                	mov	[es:di+43h],al
 17349                                  
 17350                                  ; determine if 386 system...
 17351                                  
 17352                                  	;get_cpu_type			; macro to determine cpu type
 17353                                  
 17354                                  get_cpu_type:
 17355                                  	; 11/12/2022
 17356 0000065F 9C                      	pushf
 17357                                  	;push	bx
 17358                                  	;xor	bx,bx
 17359                                  	; 11/12/2022
 17360                                  	;xor	cx,cx
 17361                                  	;
 17362 00000660 31C0                    	xor	ax,ax
 17363                                  	; ax = 0
 17364 00000662 50                      	push    ax
 17365 00000663 9D                      	popf
 17366 00000664 9C                      	pushf
 17367 00000665 58                      	pop	ax
 17368 00000666 2500F0                  	and	ax,0F000h
 17369                                  	;cmp	ax,0F000h
 17370 00000669 80FCF0                  	cmp	ah,0F0h 
 17371 0000066C 7410                    	je	short cpu_8086
 17372                                  	;mov	ax,0F000h
 17373 0000066E B4F0                    	mov	ah,0F0h
 17374                                  	; ax = 0F000h
 17375 00000670 50                      	push	ax
 17376 00000671 9D                      	popf
 17377 00000672 9C                      	pushf
 17378 00000673 58                      	pop	ax
 17379                                  	;and	ax,0F000h
 17380 00000674 80E4F0                  	and	ah,0F0h
 17381 00000677 7405                    	jz	short cpu_286
 17382                                  cpu_386:
 17383                                  	; 11/12/2022
 17384                                  	;;inc	bx
 17385                                  	;inc	cx
 17386                                  	; 11/12/2022
 17387                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 17388 00000679 26C6454401              	mov	byte [es:di+44h],1
 17389                                  cpu_286:
 17390                                  	;;;inc	bx
 17391                                  	;;inc	cx
 17392                                  cpu_8086:
 17393                                  	; 11/12/2022
 17394                                  	;;mov	ax,bx	
 17395                                  	;pop	bx
 17396 0000067E 9D                      	popf
 17397                                  
 17398                                  	;...
 17399                                  
 17400                                  	; 11/12/2022
 17401                                  	;or	cl,cl
 17402                                  	;jz	short not_386_system
 17403                                  	; 11/12/202
 17404                                  	;cmp	cl,2
 17405                                  	;;cmp	ax,2			; is it a 386?
 17406                                  	;jne	short not_386_system	; no: don't mess with flag
 17407                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 17408                                  	; 11/12/2022
 17409                                  	; 22/10/2022
 17410                                  	;mov	byte [es:di+44h],1
 17411                                  not_386_system:
 17412                                  	;mov	al,[es:di+SYSI_NUMIO]
 17413 0000067F 268A4520                	mov	al,[es:di+20h]
 17414                                  	; 11/12/2022
 17415                                  	; ds = cs
 17416 00000683 A2[FC03]                	mov	[drivenumber],al	; save start of installable block drvs
 17417                                  	;mov	[cs:drivenumber],al
 17418                                  
 17419 00000686 8CC8                    	mov	ax,cs
 17420 00000688 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 17421                                  	; 11/12/2022
 17422                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 17423                                  	;;mov	cx,[cs:singlebuffersize]
 17424                                  	;shr	cx,1			
 17425                                  	;shr	cx,1			; divide size by 16...
 17426                                  	;shr	cx,1
 17427                                  	;shr	cx,1			; ...to get paragraphs...
 17428                                  	;inc	cx			; ... and round up
 17429                                  	; 11/12/2022
 17430 0000068B 8B1E[9B02]              	mov	bx,[singlebuffersize]
 17431 0000068F B104                    	mov	cl,4
 17432 00000691 D3EB                    	shr	bx,cl
 17433 00000693 43                      	inc	bx
 17434                                  
 17435                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 17436                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 17437                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 17438                                  ;	  it is probably safe to assume that the sector size always will be.
 17439                                  ;
 17440                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 17441                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 17442                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 17443                                  ;	  other code from ever causing a problem???
 17444                                  
 17445                                  	; 11/12/2022
 17446 00000694 29D8                    	sub	ax,bx
 17447                                  	;sub	ax,cx
 17448 00000696 A3[A102]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 17449                                  	; 22/10/2022
 17450                                  	;mov	[cs:top_of_cdss],ax
 17451                                  
 17452                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 17453                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 17454                                  ;	for allocating memory for MagicDrv.
 17455                                  
 17456 00000699 06                      	push	es			; preserve pointer to dosinfo
 17457 0000069A 57                      	push	di
 17458                                  
 17459                                  	; 22/10/2022
 17460                                  ;	mov	cx,ax			; save pointer for buffer
 17461                                  ;
 17462                                  ;;	now allocate space for 26 CDSs
 17463                                  ;
 17464                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 17465                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 17466                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 17467                                  
 17468                                  ; setup and initialize the temporary buffer at cx
 17469                                  
 17470                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 17471 0000069B 26C47D12                	les	di,[es:di+12h]
 17472                                  	; 11/12/2022
 17473 0000069F 31DB                    	xor	bx,bx
 17474                                  	;xor	ax,ax
 17475                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 17476                                  	;mov	word [es:di+4],0
 17477 000006A1 26895D04                	mov	[es:di+4],bx ; 0
 17478                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 17479                                  	;mov	word [es:di],0
 17480 000006A5 26891D                  	mov	[es:di],bx ; 0
 17481                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss]
 17482                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss]
 17483 000006A8 26894502                	mov	[es:di+2],ax
 17484                                  
 17485                                  	;mov	es,cx
 17486 000006AC 8EC0                    	mov	es,ax	; [top_of_cdss] = [CONFBOT]
 17487                                  
 17488                                  	; 11/12/2022
 17489                                  	;xor	ax,ax
 17490                                  	;mov	di,ax			; es:di -> single buffer
 17491 000006AE 89DF                    	mov	di,bx
 17492                                  	; di = 0
 17493                                  
 17494                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 17495                                  	; 11/12/2022
 17496                                  	;mov	[es:di],ax ; 0
 17497 000006B0 26891D                  	mov	[es:di],bx ; 0
 17498                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 17499                                  	; 11/12/2022
 17500                                  	;mov	[es:di+2],ax ; 0
 17501 000006B3 26895D02                	mov	[es:di+2],bx ; 0 
 17502                                  
 17503                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 17504                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 17505                                  
 17506                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 17507 000006B7 26C74504FF00            	mov	word [es:di+4],00FFh
 17508                                  ;SYSINIT:06E6h
 17509                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 17510                                  	;mov	word [es:di+6],0
 17511                                  	; 11/12/2022
 17512                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 17513 000006BD 26895D06                	mov	[es:di+6],bx ; 0
 17514                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 17515                                  	;mov	word [es:di+8],0
 17516                                  	; 11/12/2022
 17517                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 17518 000006C1 26895D08                	mov	[es:di+8],bx ; 0
 17519                                  
 17520 000006C5 5F                      	pop	di			; restore pointer to DOSINFO data
 17521 000006C6 07                      	pop	es
 17522                                  
 17523                                  	; 11/12/2022
 17524                                  	; ds = cs
 17525                                  	; 22/10/2022
 17526                                  	;push	cs
 17527                                  	;pop	ds
 17528                                  
 17529 000006C7 E80C05                  	call	TempCDS 		; set up cdss so re_init and sysinit
 17530                                  					;  can make disk system calls
 17531                                  					; tempcds trashes ds
 17532                                  	; 10/05/2019
 17533 000006CA 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 17534                                  
 17535                                  	;if not ibmjapver
 17536                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 17537                                  	;endif
 17538                                  
 17539                                  	; 22/10/2022
 17540                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 17541                                  	;call	far ptr 70h:89Bh
 17542 000006CF 9A[9908]7000            	call	DOSBIODATASEG:RE_INIT
 17543                                  
 17544 000006D4 FB                      	sti				; ints ok
 17545 000006D5 FC                      	cld				; make sure
 17546                                  
 17547                                  ; 23/03/2019
 17548                                  
 17549                                  ;SYSINIT:069Ch
 17550                                  
 17551                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 17552                                  ; of the way by putting it just below sysinit at end of memory.
 17553                                  
 17554 000006D6 8CCB                    	mov	bx,cs
 17555 000006D8 83EB10                  	sub	bx,10h
 17556 000006DB 8EC3                    	mov	es,bx
 17557 000006DD 31F6                    	xor	si,si
 17558 000006DF 89F7                    	mov	di,si
 17559 000006E1 B98000                  	mov	cx,128
 17560 000006E4 F3A5                    	rep	movsw
 17561                                  
 17562                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 17563                                  	; 22/10/2022
 17564 000006E6 268C063600              	mov	[es:36h],es
 17565                                  
 17566                                   	; Set Process Data Block - Program Segment Prefix address
 17567                                  	; BX = PDB/PSP segment
 17568 000006EB B450                            mov	ah,50h ; SET_CURRENT_PDB
 17569 000006ED CD21                    	int	21h			; tell DOS we moved it
 17570                                  			; DOS - 2+ internal - SET PSP SEGMENT
 17571                                  			; BX = segment address of new PSP
 17572                                  	; 22/10/2022
 17573                                  	; 27/03/2019
 17574 000006EF 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 17575                                  
 17576 000006F0 0E                      	push	cs	
 17577 000006F1 1F                      	pop	ds
 17578                                  
 17579                                  	; set up temp. critical error handler
 17580 000006F2 BA[6C33]                	mov	dx,int24		; set up int 24 handler
 17581                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 17582                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 17583 000006F5 B82425                  	mov	ax,2524h
 17584 000006F8 CD21                    	int	21h
 17585                                  
 17586 000006FA 803E[FF03]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 17587 000006FF 7405                            je      short no_err		   ;  N: continue            M029
 17588 00000701 BA[6A38]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 17589                                          ; 22/10/2022
 17590                                  	;call	print 			   ;		             M029
 17591                                  	; 12/12/2022
 17592 00000704 EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 17593                                  no_err:
 17594                                  	; 12/05/2019
 17595                                  	;----------------------------------------------
 17596                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 17597                                  	; 22/10/2022 - Retro DOS v4.0
 17598                                  	; 12/12/2022
 17599 00000706 BA[7033]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 17600                                  p_dosinit_msg:
 17601 00000709 E83B2C                  	call	print			; Print message
 17602                                  	;----------------------------------------------
 17603                                  	
 17604                                  	; 11/12/2022
 17605                                  	; 22/10/2022
 17606                                  	; 23/03/2019 - Retro DOS v4.0
 17607                                  	;pop	ds			; start of free memory
 17608                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 17609                                  	
 17610                                  	; 11/12/2022
 17611                                  	; 27/03/2019
 17612 0000070C 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 17613 00000710 1F                      	pop	ds ; */
 17614                                  
 17615 00000711 08D2                    	or	dl,dl
 17616                                  	;jz	short nodrvset		; bios didn't say
 17617 00000713 7405                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 17618                                  	;dec	dl			; A = 0
 17619                                  	; 18/12/2022
 17620 00000715 4A                      	dec	dx
 17621 00000716 B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 17622 00000718 CD21                    	int	21h			; select the disk
 17623                                  			; DOS - SELECT DISK
 17624                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 17625                                  			; Return: AL = number of logical drives
 17626                                  nodrvset:
 17627                                  	;ifdef	dblspace_hooks
 17628                                  	;	....
 17629                                  	;	....
 17630                                  	;endif	
 17631                                  
 17632                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 17633                                  
 17634                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 17635                                  ; ----------------------------------------------------------------------------
 17636                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17637                                  
 17638                                  ProcessConfig:
 17639                                  	;; ds = cs ; 27/03/2019
 17640                                  	; 11/12/2022
 17641                                  	; ds <> cs	
 17642                                  
 17643                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 17644                                  
 17645 0000071A E8C417                  	call	doconf			; do pre-scan for dos=high/low
 17646                                  
 17647                                  	; 11/12/2022
 17648                                  	; 27/03/2019
 17649                                  	; ds = cs (at return from doconf)
 17650                                  
 17651                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 17652                                  ; It will either be relocated to low memory, above the DOS data structures,
 17653                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 17654                                  ; code entry points will be located in low memory. Dos_segreinit is used
 17655                                  ; to tell the DOS data where the code has been placed, and to install the
 17656                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 17657                                  ; must first initialize it in its present location and load the installable
 17658                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 17659                                  ; relocate the DOS code into HiMem.
 17660                                  ;
 17661                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 17662                                  ; to install the low memory stub (this must be done before allowing any
 17663                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 17664                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 17665                                  ; been patched.
 17666                                  
 17667                                  	; 22/10/2022 - Retro DOS v4.0
 17668                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 17669                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 17670                                  	; 11/12/2022
 17671 0000071D 803E[6A02]00            	cmp	byte [runhigh],0
 17672 00000722 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 17673                                  
 17674                                  ;------ user chose to load high
 17675                                  
 17676                                  	; 22/10/2022
 17677                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 17678                                  	; 11/12/2022
 17679                                  	; ds = cs
 17680 00000724 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17681                                  
 17682                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17683                                  	; 27/03/2019
 17684                                  	;;mov	es,[FINAL_DOS_LOCATION]
 17685                                  
 17686 00000728 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 17687                                  	; 11/12/2022
 17688                                  	; ds = cs
 17689                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 17690 0000072A FF1E[7B02]              	call	far [dos_segreinit]
 17691                                  
 17692 0000072E EB10                    	jmp	short do_multi_pass
 17693                                  
 17694                                  ;------ User chose to load dos low
 17695                                  
 17696                                  dont_install_stub:
 17697                                  	; 22/10/2022
 17698 00000730 31DB                    	xor	bx,bx			; M012
 17699                                  					; don't use int 21 call to alloc mem
 17700 00000732 E8D601                  	call	MovDOSLo		; move it !
 17701                                  
 17702 00000735 B80100                  	mov	ax,1			; dont install stub
 17703                                  	; 11/12/2022
 17704                                  	; ds = cs
 17705 00000738 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17706                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 17707                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17708                                  	; 27/03/2019
 17709                                  ;do_multi_pass:
 17710                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 17711                                  
 17712                                  	; 11/12/2022
 17713                                  	; ds =cs
 17714                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 17715 0000073C FF1E[7B02]              	call	far [dos_segreinit]
 17716                                  do_multi_pass:
 17717 00000740 E81201                  	call	AllocFreeMem		; allocate all the free mem
 17718                                  					; & update [memhi] & [area]
 17719                                  					; start of free memory.
 17720                                  	;ifdef	dblspace_hooks
 17721                                  	;mov	bx,0			; magic backdoor to place int hooks
 17722                                  	;call	cs:MagicBackdoor
 17723                                  	;endif
 17724                                  
 17725                                  ; Now, process config.sys some more.  
 17726                                  ; Load the device drivers and install programs
 17727                                  
 17728                                  	; 22/10/2022
 17729                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 17730                                  	; 11/12/2022
 17731                                  	; ds = cs
 17732 00000743 FE06[4903]              	inc	byte [multi_pass_id]
 17733 00000747 E82A18                  	call	multi_pass		; load device drivers
 17734 0000074A E8EB24                  	call	ShrinkUMB
 17735 0000074D E81125                  	call	UnlinkUMB		; unlink all UMBs	;M002
 17736                                  	; 02/11/2022
 17737                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 17738                                  	; 11/12/2022
 17739                                  	; ds = cs
 17740 00000750 FE06[4903]              	inc	byte [multi_pass_id]
 17741 00000754 E81D18                  	call	multi_pass		; was load ifs (now does nothing)
 17742                                  
 17743                                  	;ifdef	dblspace_hooks
 17744                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 17745                                  	;endif
 17746                                  
 17747                                  	; ds = cs
 17748                                  	
 17749 00000757 E81405                  	call	endfile			; setup fcbs, files, buffers etc
 17750                                  
 17751                                  	;ifdef	dblspace_hooks
 17752                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 17753                                  	;endif
 17754                                  
 17755                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 17756                                  ;to device drivers. This has been moved up to this point to avoid problems 
 17757                                  ;with overlays called from installed programs
 17758                                  
 17759                                  	; 11/12/2022
 17760                                  	; ds = cs
 17761                                  
 17762                                  	;;mov	ax,Bios_Data ; 0070h
 17763                                  	;mov	ax,KERNEL_SEGMENT
 17764                                  	; 21/10/2022
 17765 0000075A B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17766 0000075D 8EC0                    	mov	es,ax			; point ES to bios data
 17767                                  
 17768 0000075F 26C606[FB08]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 17769                                  
 17770                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17771                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 17772                                  	;test	byte [cs:install_flag],1
 17773                                  	; 11/12/2022
 17774                                  	; ds = cs
 17775 00000765 F606[4A03]01            	test	byte [install_flag],1
 17776                                  	;test	byte [cs:install_flag],have_install_cmd
 17777                                  					; are there install commands?
 17778 0000076A 7407                    	jz	short dolast		; no, no need for further processing
 17779                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 17780                                  	; 11/12/2022
 17781                                  	; ds =cs
 17782 0000076C FE06[4903]              	inc	byte [multi_pass_id]
 17783 00000770 E80118                  	call	multi_pass		; execute install= commands
 17784                                  
 17785                                  dolast:
 17786                                  	
 17787                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 17788                                  ;  free the confbot area used for config.sys and sysinit itself.
 17789                                  
 17790                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 17791                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 17792                                  ; anything, but just set up the ROM area for suballocation (or print
 17793                                  ; a message if HiMem is not available).
 17794                                  ;
 17795                                  ; There is also this little hack for CPM style DOS calls that needs to
 17796                                  ; be done when A20 is set...
 17797                                  
 17798                                  	; 11/12/2022
 17799                                  	; ds = cs
 17800                                  
 17801                                  	; 22/10/2022
 17802                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 17803                                  	; 11/12/2022
 17804 00000773 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 17805 00000778 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 17806 0000077A E83D01                  	call	LoadDOSHiOrLo
 17807                                  _@@_:
 17808                                  	;cmp	byte [cs:runhigh],0	; are we running low
 17809                                  	; 11/12/2022
 17810                                  	; ds = cs
 17811 0000077D 803E[6A02]00            	cmp	byte [runhigh],0
 17812                                  	;je	short _@@@
 17813 00000782 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 17814 00000784 E83004                  	call	CPMHack			; make ffff:d0 same as 0:c0
 17815                                  _@@@:
 17816                                  
 17817                                  ; We are now done with CONFIG.SYS processing
 17818                                  
 17819                                  ConfigDone:
 17820                                  	; 12/12/2022
 17821                                  	; 22/10/2022
 17822                                  	;mov	byte [cs:donotshownum],1 
 17823                                  					; done with config.sys.
 17824                                  					; do not show line number message.
 17825                                  	;mov	es,[cs:area]
 17826                                  	; 12/12/2022
 17827                                  	; ds = cs
 17828                                  	; 27/03/2019
 17829 00000787 C606[D103]01            	mov	byte [donotshownum],1
 17830 0000078C 8E06[E403]              	mov	es,[area]
 17831                                  
 17832 00000790 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 17833 00000792 CD21                    	int	21h
 17834                                  			; DOS - 2+ - FREE MEMORY
 17835                                  			; ES = segment address of area to be freed
 17836                                  
 17837                                  	; 22/10/2022
 17838                                  	;test	word [cs:install_flag],2
 17839                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 17840                                  	;test	byte [cs:install_flag],has_installed
 17841                                  	; 11/12/2022
 17842                                  	; ds = cs
 17843 00000794 F606[4A03]02            	test	byte [install_flag],2 ; has_installed
 17844                                  	;test	byte [install_flag],has_installed
 17845 00000799 741F                    	jz	short skip_free_sysinitbase ; no.
 17846                                  
 17847                                  ; set block from the old_area with impossible_owner_size.
 17848                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 17849                                  ; handle install= command.
 17850                                  
 17851                                  	; 12/12/2022
 17852                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 17853                                  	;push	bx
 17854                                  	
 17855                                  	; 22/10/2022
 17856                                  	;mov	es,[cs:old_area]
 17857                                  	;mov	bx,[cs:impossible_owner_size]
 17858                                  	; 12/12/2022
 17859                                  	; ds = cs
 17860 0000079B 8E06[DA03]              	mov	es,[old_area]
 17861 0000079F 8B1E[DC03]              	mov	bx,[impossible_owner_size]
 17862                                  	
 17863 000007A3 B44A                    	mov	ah,4Ah ; SETBLOCK
 17864 000007A5 CD21                    	int	21h
 17865                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17866                                  			; ES = segment address of block to change
 17867                                  			; BX = new size in paragraphs
 17868 000007A7 8CC0                    	mov	ax,es
 17869 000007A9 48                      	dec	ax
 17870 000007AA 8EC0                    	mov	es,ax			; point to arena
 17871                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 17872 000007AC 26C70601000800          	mov	word [es:1],8
 17873                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 17874 000007B3 26C70608005344          	mov	word [es:8],'SD'
 17875                                  	
 17876                                  	; 12/12/2022
 17877                                  	;pop	bx
 17878                                          ;pop     es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 17879                                  
 17880                                  skip_free_sysinitbase:
 17881                                  	; 22/10/2022
 17882                                  	;cmp	byte [cs:runhigh],0
 17883                                  	; 12/12/2022
 17884                                  	; ds = cs
 17885 000007BA 803E[6A02]00            	cmp	byte [runhigh],0	
 17886 000007BF 7403                    	je	short _@@@@
 17887                                  
 17888 000007C1 E8D502                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 17889                                  
 17890                                  ; ----------------------------------------------------------------------------
 17891                                  
 17892                                  _@@@@:
 17893                                  	; 12/12/2022
 17894                                  	; ds = cs
 17895                                  	; 22/10/2022
 17896                                  	; 27/03/2019
 17897                                  	;push	cs
 17898                                  	;pop	ds			; point DS to sysinitseg
 17899                                  
 17900                                  ; set up the parameters for command
 17901                                  
 17902                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17903                                  ;;ifdef  MULTI_CONFIG
 17904                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 17905                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 17906                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 17907                                  ;	; !!!
 17908                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 17909                                  ;       ; !!!
 17910                                  ;	call    disable_autoexec        ; no, we should disable it
 17911                                  ;process_autoexec:
 17912                                  ;;endif	; !!!
 17913                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 17914                                  ;	; !!!
 17915                                  
 17916                                  	; 22/10/2022 
 17917                                  	;mov     cl,[command_line]
 17918                                          ;mov     ch,0
 17919                                          ;inc     cx
 17920                                          ;mov     si,command_line	
 17921                                  	;add     si,cx
 17922                                          ;mov     byte [si],cr	; cr-terminate command line
 17923                                  
 17924                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17925                                  	; (SYSINIT:0809h)
 17926                                  	
 17927                                  	;mov	si,(offset command_line+1)
 17928 000007C4 BE[AA02]                	mov	si,command_line+1
 17929 000007C7 1E                      	push    ds
 17930 000007C8 07                      	pop     es
 17931 000007C9 89F7                    	mov     di,si
 17932 000007CB B1FF                    	mov     cl,0FFh ; -1
 17933                                  _@_loop:
 17934 000007CD FEC1                    	inc     cl ; +1
 17935 000007CF AC                      	lodsb
 17936 000007D0 AA                      	stosb
 17937 000007D1 08C0                    	or      al,al
 17938 000007D3 75F8                    	jnz     short _@_loop
 17939 000007D5 4F                      	dec     di
 17940 000007D6 B00D                    	mov     al,0Dh
 17941 000007D8 AA                      	stosb			; cr-terminate command line
 17942 000007D9 880E[A902]              	mov     [command_line],cl ; command line length (except CR)
 17943                                  
 17944                                  ; ----------------------------------------------------------------------------
 17945                                  
 17946                                  ;   Once we get to this point, the above code, which is below "retry"
 17947                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 17948                                  ;   which follow....)
 17949                                  
 17950                                  retry:
 17951 000007DD BA[1D34]                	mov	dx,commnd	; now pointing to file description
 17952                                  
 17953                                  ; we are going to open the command interpreter and size it as is done in
 17954                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 17955                                  ; there is not enough room for the command interpreter,exec will probably
 17956                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 17957                                  ; here to catch it. this code is not perfect (for instance .exe command
 17958                                  ; interpreters are possible) because it does its sizing based on the
 17959                                  ; assumption that the file being loaded is a .com file. it is close enough to
 17960                                  ; correctness to be usable.
 17961                                  
 17962                                  ; first, find out where the command interpreter is going to go.
 17963                                  
 17964 000007E0 52                      	push	dx		; save pointer to name
 17965 000007E1 BBFFFF                  	mov	bx,0FFFFh
 17966 000007E4 B448                    	mov	ah,48h	; ALLOC
 17967 000007E6 CD21                            int     21h             ; get biggest piece
 17968 000007E8 B448                    	mov	ah,48h	; ALLOC
 17969 000007EA CD21                    	int	21h		; second time gets it
 17970 000007EC 7243                    	jc	short memerrjx	; oooops
 17971                                  
 17972 000007EE 8EC0                    	mov	es,ax
 17973 000007F0 B449                    	mov	ah,49h	; DEALLOC
 17974 000007F2 CD21                    	int	21h		; give it right back
 17975 000007F4 89DD                    	mov	bp,bx
 17976                                  
 17977                                  ; es:0 points to block,and bp is the size of the block in para.
 17978                                  
 17979                                  ; we will now adjust the size in bp down by the size of sysinit.
 17980                                  ; we need to do this because exec might get upset if some of the exec
 17981                                  ; data in sysinit is overlayed during the exec.
 17982                                  
 17983                                  	; 22/10/2022
 17984                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 17985 000007F6 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 17986 000007FA 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 17987                                  
 17988                                  ; Note that the "config_wrkseg" environment data is a segment in
 17989                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 17990                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 17991                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 17992                                  ; we need to make sure that there's no way Exec will stomp on that data
 17993                                  ; before it can copy it, and one way to do that is to make the available
 17994                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 17995                                  ; from the "memory_size" segment value (which is typically A000h) instead
 17996                                  ; of the current sysinit CS....
 17997                                  ;
 17998                                  ; The reason I use the term "paranoid" is because this code should have
 17999                                  ; slid the data required by Exec up to the very top of memory, because as
 18000                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 18001                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 18002                                  ; consumes). Now it's just a little worse (65K or more, depending on
 18003                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 18004                                  ; is determined by the size of CONFIG.SYS.... -JTP
 18005                                  
 18006                                  	; 22/10/2022
 18007                                  	;mov	cx,[config_envlen]
 18008                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 18009                                          ;mov	ax,[config_wrkseg]
 18010                                  ;no_env:
 18011                                  	; 22/10/2022
 18012                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 18013 000007FC 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 18014 000007FE 83C311                  	add	bx,11h		; add the sysinit php
 18015 00000801 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 18016 00000803 722C                    	jc	short memerrjx	; if there isn't even this much memory, give up
 18017                                  
 18018                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 18019 00000805 B8003D                          mov	ax,3D00h
 18020 00000808 F9                      	stc                     ; in case of int 24
 18021 00000809 CD21                    	int	21h
 18022 0000080B 7240                    	jc	short comerr	; ooops
 18023                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 18024                                  			; DS:DX -> ASCIZ filename
 18025                                  			; AL = access mode
 18026                                  			; 0 - read
 18027                                  	; 22/10/2022
 18028                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 18029 0000080D 89C3                            mov     bx,ax           ; handle in bx
 18030                                  
 18031                                  ;   If the standard command interpreter is being used, verify it is correct
 18032                                  
 18033                                  	; 22/10/2022
 18034                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 18035                                  	;jne	short skip_validation ; yes
 18036                                  	;mov	dx,retry-4
 18037                                  	;mov	cx,4		;
 18038                                  	;mov	ah,READ		;
 18039                                  	;int	21h		;
 18040                                  	;cmp	byte [retry-4],0E9h
 18041                                  	;jne	short comerr
 18042                                  	;; 20/04/2019 - Retro DOS v4.0
 18043                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 18044                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 18045                                  	;jne	short comerr	;
 18046                                  
 18047                                  ;skip_validation:
 18048                                  	; 22/10/2022
 18049                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 18050 0000080F 31C9                    	xor	cx,cx
 18051 00000811 31D2                    	xor	dx,dx
 18052                                  	;mov	ax,(LSEEK<<8)|2
 18053 00000813 B80242                  	mov	ax,4202h
 18054 00000816 F9                      	stc			;in case of int 24
 18055 00000817 CD21                    	int	21h		; get file size in dx:ax
 18056 00000819 7232                    	jc	short comerr
 18057                                  				; convert size in dx:ax to para in ax
 18058 0000081B 83C00F                  	add	ax,15		; round up size for conversion to para
 18059 0000081E 83D200                  	adc	dx,0
 18060 00000821 E8A903                  	call	off_to_para
 18061 00000824 B10C                    	mov	cl,12
 18062 00000826 D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 18063 00000828 09D0                    	or	ax,dx		; ax is now # of para for file
 18064 0000082A 83C010                  	add	ax,10h		; 100h byte php
 18065 0000082D 39E8                    	cmp	ax,bp		; will command fit in available mem?
 18066 0000082F 7203                    	jb	short okld	; jump if yes.
 18067                                  
 18068                                  	; 22/10/2022
 18069                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 18070                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 18071                                  	; 02/11/2022
 18072                                  	;jmp	mem_err
 18073                                  	; 11/12/2022
 18074                                  	; ds = cs
 18075 00000831 E99728                  	jmp	mem_err2
 18076                                  
 18077                                  ;memerrjx:
 18078                                  ;	mov	dx,badmem
 18079                                  ;	call	print
 18080                                  ;       jmp     short continue
 18081                                  
 18082                                  okld:
 18083 00000834 B43E                    	mov	ah,3Eh ; CLOSE
 18084 00000836 CD21                    	int	21h		; close file
 18085                                  
 18086                                  	; 22/10/2022
 18087 00000838 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 18088                                  
 18089                                  	; 24/03/2019
 18090                                  
 18091 00000839 0E                      	push	cs		; point es to sysinitseg
 18092 0000083A 07                      	pop	es
 18093 0000083B BB[3B03]                        mov     bx,COMEXE	; point to exec block
 18094                                  	; 22/10/2022
 18095                                  	;pop	dx              ; recover pointer to name
 18096                                  
 18097                                  ;;ifdef	MULTI_CONFIG
 18098                                  
 18099                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 18100                                  ;   there will be data if there were any valid SET commands and/or if a menu
 18101                                  ;   selection was made (in which case the CONFIG environment variable will be
 18102                                  ;   set to that selection).
 18103                                  
 18104                                  	; 23/10/2022
 18105                                  	;mov	cx,[config_envlen]
 18106                                  	;jcxz	no_envdata
 18107                                          ;mov	cx,[config_wrkseg]
 18108                                  ;no_envdata:
 18109                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 18110                                  	;mov	[bx],cx
 18111                                  
 18112                                  ;;endif	;MULTI_CONFIG
 18113                                  
 18114                                  	; 23/10/2022
 18115                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 18116                                  
 18117                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 18118 0000083E 8C4F04                  	mov	[bx+4],cs
 18119                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 18120 00000841 8C4F08                  	mov	[bx+8],cs
 18121                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 18122 00000844 8C4F0C                  	mov	[bx+12],cs
 18123                                  
 18124                                  ;mov	ax,(EXEC<<8) + 0
 18125                                  	; 23/10/2022
 18126                                  	;xor	ax,ax
 18127                                  	;mov	ah,4Bh
 18128                                  	; 14/08/2023
 18129                                  	;mov	ax,4B00h
 18130 00000847 B8004B                  	mov	ax,(EXEC<<8)       
 18131                                  
 18132 0000084A F9                      	stc                     ; in case of int 24
 18133 0000084B CD21                            int     21h             ; go start up command
 18134                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 18135                                  			; DS:DX -> ASCIZ filename
 18136                                  			; ES:BX -> parameter block
 18137                                  			; AL = subfunc: load & execute program
 18138                                  	;push	cs
 18139                                  	;pop	ds
 18140                                  
 18141                                  	; 23/10/2022
 18142                                  	;push	dx		; push to balance fall-through pop
 18143                                  
 18144                                  ; note fall through if exec returns (an error)
 18145                                  comerr:
 18146                                  	; 23/10/2022
 18147                                  ;;ifdef	MULTI_CONFIG
 18148                                  	;cmp	byte [commnd4],0
 18149                                  	;je	short comerr2	; all defaults exhausted, print err msg
 18150                                  	;cmp	byte [newcmd],0
 18151                                  	;je	short continue	; don't print err msg for defaults just yet
 18152                                  ;comerr2:
 18153                                  ;;endif
 18154 0000084D BA[6D37]                        mov     dx,badcom	; want to print command error
 18155 00000850 E8C82A                  	call	badfil
 18156                                  continue:
 18157                                  	; 23/10/2022
 18158                                  	;pop	dx
 18159                                  
 18160                                  ;;ifndef MULTI_CONFIG
 18161                                  	;jmp	stall
 18162                                  	; 24/10/2022
 18163                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 18164 00000853 EBFE                    	jmp	short stall
 18165                                  ;;else
 18166                                  	; 23/10/2022
 18167                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 18168                                  	;int	21h             ;
 18169                                  	;add	al,'A'          ;
 18170                                  	;mov	dl,al           ; DL == default drive letter
 18171                                  	;mov	si,commnd2
 18172                                  	;cmp	byte [newcmd],0 ; if a SHELL= was given
 18173                                  	;jne	short do_def2	; then try the 2nd alternate;
 18174                                  	;mov	byte [si],0	; otherwise, the default SHELL= was tried,
 18175                                  	;jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 18176                                  ;do_def2:			
 18177                                  	;cmp	byte [si],0	; has 2nd alternate been tried?
 18178                                          ;jne	short do_alt    ; no
 18179                                  ;do_def3:
 18180                                  	;mov	si,commnd3
 18181                                  	;cmp	byte [si],0	; has 3rd alternate been tried?
 18182                                  	;jne	short do_alt	; no
 18183                                  	;mov	si,commnd4
 18184                                  	;cmp	byte [si],0	; has 4th alternate been tried?
 18185                                  	;jne	short do_alt	; no
 18186                                  	;push	dx              ;
 18187                                  	;mov	dx,badcomprmpt
 18188                                  	;call	print		;
 18189                                  	;pop	dx              ; recover default drive letter in DL
 18190                                  ;request_input:			;
 18191                                  	;mov	ah,STD_CON_OUTPUT
 18192                                  	;int	21h             ;
 18193                                  	;push	dx              ;
 18194                                  	;mov	dl,'>'          ;
 18195                                  	;int	21h             ;
 18196                                  	;mov	bl,[tmplate+1]	;
 18197                                  	;mov	bh,0            ;
 18198                                  	;mov	byte [commnd+bx],0Dh
 18199                                  	;mov	dx,tmplate
 18200                                  	;mov	ah,STD_CON_STRING_INPUT
 18201                                  	;int	21h             ; read a line of input
 18202                                  	;mov	dx,crlfm	;
 18203                                  	;call	print           ;
 18204                                  	;pop	dx              ;
 18205                                  	;mov	bl,[tmplate+1]	;
 18206                                  	;or	bl,bl           ; was anything typed?
 18207                                  	;jz	short request_input ;
 18208                                  	;mov	byte [newcmd],1 ; disable validation for user-specified binaries
 18209                                  	;mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 18210                                  	;mov	word [command_line],0D00h
 18211                                  	;jmp	short do_exec   ;
 18212                                  ;do_alt:
 18213                                  	;push	ds
 18214                                  	;pop	es
 18215                                  	;mov	byte [newcmd],0 ; force validation for alternate binaries
 18216                                  	;mov	di,commnd	;
 18217                                  ;do_alt1:
 18218                                  	;lodsb			; copy the alternate, zapping it as we go,
 18219                                  	;mov	byte [si-1],0	; so that we know it's been tried
 18220                                  	;stosb 			;
 18221                                  	;or	al,al		;
 18222                                  	;jnz	short do_alt1	;
 18223                                  	;mov	di,command_line
 18224                                  	;cmp	byte [si+2],':'
 18225                                  	;jne	short do_alt2	;
 18226                                  	;mov	[si+1],dl	; stuff default drive into alt. command line
 18227                                  ;do_alt2:			;
 18228                                  	;lodsb			;
 18229                                  	;stosb			;
 18230                                  	;or	al,al           ;
 18231                                  	;jnz	short do_alt2   ;
 18232                                  	;mov	byte [di-1],cr
 18233                                  
 18234                                  ;;   Last but not least, see if we need to call disable_autoexec
 18235                                  
 18236                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 18237                                  	;;cmp	[command_line-1],0
 18238                                          ;;jne	short do_exec   ;
 18239                                          ;;mov	[command_line-1],'/'
 18240                                  	;;call	disable_autoexec ;
 18241                                  
 18242                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 18243                                  	;mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 18244                                  	;call	disable_autoexec
 18245                                  	;call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 18246                                  ;do_exec:
 18247                                  	;jmp     retry		;
 18248                                  
 18249                                  ;;endif	;MULTI_CONFIG
 18250                                  
 18251                                  ; 24/03/2019 - Retro DOS v4.0
 18252                                  
 18253                                  ; ----------------------------------------------------------------------
 18254                                  ; procedure : AllocFreeMem
 18255                                  ;
 18256                                  ; Allocate Max memory from DOS to find out where to load DOS.
 18257                                  ; DOS is at temporary location when this call is being made
 18258                                  ;
 18259                                  ; Inputs : None
 18260                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 18261                                  ;	   [area] & [memhi] set to the para value of the start of the
 18262                                  ;	   free memory.
 18263                                  ;
 18264                                  ; Uses   : AX, BX
 18265                                  ;
 18266                                  ; ----------------------------------------------------------------------
 18267                                  
 18268                                  	; 23/10/2022
 18269                                  AllocFreeMem:
 18270 00000855 BBFFFF                  	mov	bx,0FFFFh
 18271 00000858 B448                    	mov	ah,48h ; ALLOC
 18272 0000085A CD21                    	int	21h			; first time fails
 18273 0000085C B448                    	mov	ah,48h ; ALLOC
 18274 0000085E CD21                    	int	21h			; second time gets it
 18275                                  	; 11/12/2022
 18276                                  	; ds = cs
 18277                                  	;mov	[cs:area],ax
 18278                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 18279 00000860 A3[E403]                	mov	[area],ax
 18280 00000863 A3[E003]                	mov	[memhi],ax		; memhi:memlo now points to			
 18281 00000866 C3                      	retn				; start of free memory
 18282                                  				
 18283                                  	; include msbio.cl6
 18284                                  ; ----------------------------------------------------------------------
 18285                                  DOSLOMSG:
 18286 00000867 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 18286 00000870 7661696C61626C653A-
 18286 00000879 204C6F6164696E6720-
 18286 00000882 444F53206C6F770D0A-
 18286 0000088B 24                 
 18287                                  FEmsg:
 18288 0000088C 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 18288 00000895 6F723A2043616E6E6F-
 18288 0000089E 7420616C6C6F636174-
 18288 000008A7 65204D656D6F727920-
 18288 000008B0 666F7220444F530D0A-
 18288 000008B9 24                 
 18289                                  
 18290                                  ; ----------------------------------------------------------------------
 18291                                  ;
 18292                                  ; procedure : LoadDOSHiOrLo
 18293                                  ;
 18294                                  ;		Tries to move DOS into HMA. If it fails then loads
 18295                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 18296                                  ;		moved; this just tries to allocate the HMA, and prints
 18297                                  ;		a message if this is not possible.
 18298                                  ;
 18299                                  ; ----------------------------------------------------------------------
 18300                                  
 18301                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18302                                  LoadDOSHiOrLo:
 18303                                  	; 27/03/2019 - Retro DOS v4.0
 18304                                  	; ds = cs
 18305 000008BA E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 18306                                  	;jc	short LdngLo		; If that don't work...
 18307                                  	;retn
 18308                                  	; 18/12/2022
 18309 000008BD 731C                    	jnc	short LoadDosHi_ok
 18310                                  LdngLo:
 18311                                  	; 23/10/2022
 18312                                  	;push	cs
 18313                                  	;pop	ds
 18314                                  	; 11/12/2022
 18315                                  	; ds = cs
 18316 000008BF B409                    	mov	ah,9
 18317 000008C1 BA[6708]                	mov	dx,DOSLOMSG		; inform user that we are
 18318 000008C4 CD21                    	int	21h			; loading low
 18319                                  
 18320                                  ;ifndef ROMDOS
 18321                                  	; actually move the dos, and reinitialize it.
 18322                                  
 18323 000008C6 BB0100                  	mov	bx,1				; M012
 18324                                  						;  use int 21 alloc for mem
 18325 000008C9 E83F00                  	call	MovDOSLo
 18326                                  	; 11/12/2022
 18327                                  	; ds = cs
 18328                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 18329                                  	; 23/10/2022
 18330 000008CC 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18331                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 18332                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 18333 000008D0 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 18334                                  	; 11/12/2022
 18335                                  	; ds = cs
 18336                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 18337 000008D2 FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 18338                                  	
 18339                                  ;endif ; ROMDOS
 18340                                  	; 23/10/2022
 18341                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 18342                                  	; 11/12/2022
 18343                                  	; ds = cs
 18344 000008D6 C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 18345                                  LoadDosHi_ok:	; 18/12/2022
 18346 000008DB C3                      	retn
 18347                                  
 18348                                  ; ----------------------------------------------------------------------
 18349                                  ;
 18350                                  ; procedure : TryToMovDOSHi
 18351                                  ;
 18352                                  ;		This tries to move DOS into HMA.
 18353                                  ;		Returns CY if it failed.
 18354                                  ;		If it succeeds returns with carry cleared.
 18355                                  ;
 18356                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 18357                                  ;		the A20 switching code in the low mem stub to be installed.
 18358                                  ; 
 18359                                  ; ----------------------------------------------------------------------
 18360                                  
 18361                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18362                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 18363                                  TryToMovDOSHi:
 18364                                  	; 11/12/2022
 18365                                  	; 27/03/2019 - Retro DOS v4.0
 18366                                  	; ds = cs
 18367 000008DC E81300                  	call	MovDOSHi
 18368 000008DF 7210                    	jc	short ttldhx
 18369                                  
 18370                                  ;ifndef ROMDOS
 18371                                  	; 23/10/2022
 18372                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 18373                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 18374                                  	; 11/12/2022
 18375                                  	; ds = cs
 18376 000008E1 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18377                                  ;else
 18378                                  ;	..
 18379                                  ;endif ; ROMDOS
 18380                                  
 18381                                  	; 11/12/2022
 18382                                  	; ds = cs
 18383 000008E5 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 18384                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18385 000008E7 FF1E[7B02]              	call	far [dos_segreinit]
 18386                                  	;mov	byte [cs:runhigh],1
 18387 000008EB C606[6A02]01            	mov	byte [runhigh],1
 18388 000008F0 F8                      	clc
 18389                                  ttldhx:
 18390 000008F1 C3                      	retn
 18391                                  
 18392                                  ; ----------------------------------------------------------------------
 18393                                  ;
 18394                                  ; procedure : MovDOSHi
 18395                                  ;
 18396                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 18397                                  ;		For ROMDOS, the code is not actually moved, but the
 18398                                  ;		HMA is allocated and prepared for sub-allocation.
 18399                                  ;
 18400                                  ;		Returns : CY if it failed
 18401                                  ;
 18402                                  ; ----------------------------------------------------------------------
 18403                                  
 18404                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18405                                  MovDOSHi:
 18406                                  	; 14/05/2019
 18407                                  	; 27/03/2019 - Retro DOS v4.0
 18408                                  	; ds = cs
 18409 000008F2 E8D800                  	call	AllocHMA
 18410 000008F5 7213                    	jc	short mdhx			; did we get HMA?
 18411 000008F7 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 18412 000008FA 8EC0                    	mov	es,ax
 18413                                  
 18414                                  ;ifndef ROMDOS
 18415                                  	; actually move the BIOS and DOS
 18416                                  
 18417                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18418                                  	; 24/03/2019
 18419                                  	
 18420                                  	; 23/10/2022
 18421 000008FC E83400                  	call	MovBIOS				; First move BIOS into HMA
 18422                                  
 18423                                  	; ES:DI points to free HMA after BIOS
 18424                                  	
 18425                                  	; 14/05/2019
 18426                                  	; 24/03/2019 - Retro DOS v4.0
 18427                                  	;xor	di,di
 18428                                  	
 18429                                  	; 23/10/2022
 18430                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 18431                                  	; 11/12/2022
 18432                                  	; ds = cs
 18433 000008FF 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 18434 00000903 E81100                  	call	MovDOS				; and move it
 18435                                  
 18436                                  	; ES:DI points to free HMA after DOS
 18437                                  ;else
 18438                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 18439                                  ;
 18440                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 18441                                  ;
 18442                                  ;endif ; ROMDOS
 18443                                  
 18444 00000906 E86202                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 18445 00000909 F8                      	clc
 18446                                  mdhx:
 18447 0000090A C3                      	retn
 18448                                  
 18449                                  ; ----------------------------------------------------------------------
 18450                                  ;
 18451                                  ; procedure : MovDOSLo
 18452                                  ;
 18453                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 18454                                  ;
 18455                                  ; ----------------------------------------------------------------------
 18456                                  
 18457                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18458                                  
 18459                                  ;ifndef ROMDOS
 18460                                  
 18461                                  MovDOSLo:
 18462                                  	; 14/05/2019
 18463                                  	; 27/03/2019 - Retro DOS v4.0
 18464                                  	; ds = cs
 18465 0000090B E84800                  	call	AllocMemForDOS			; incestuosly!!!
 18466                                  	
 18467                                  	; 23/10/2022
 18468                                  	; 14/05/2019
 18469                                  	;inc	ax  ; skip MCB
 18470                                  	
 18471 0000090E 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 18472                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18473                                  	; 24/03/2019
 18474                                  	
 18475                                  	; 23/10/2022
 18476 00000910 E82000                  	call	MovBIOS
 18477                                  
 18478                                  ;------ ES:DI points memory immediately after BIOS
 18479                                  
 18480                                  	; 14/05/2019
 18481                                  	; NOTE: 
 18482                                  	;     Order of (RETRO) DOS kernel sections at memory:
 18483                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 18484                                  
 18485                                  	; 24/03/2019 - Retro DOS v4.0
 18486                                  	;xor	di,di	
 18487                                  
 18488                                  	; 23/10/2022
 18489                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 18490                                  	; 11/12/2022
 18491                                  	; ds = cs
 18492 00000913 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 18493                                  	;call	MovDOS
 18494                                  	;retn
 18495                                  	; 11/12/2022
 18496                                  	;jmp	short MovDOS
 18497                                  
 18498                                  ;endif ; ROMDOS
 18499                                  
 18500                                  ; 11/12/2022
 18501                                  
 18502                                  ; ----------------------------------------------------------------------
 18503                                  ;
 18504                                  ; procedure : MovDOS
 18505                                  ;
 18506                                  ;		Moves DOS code into requested area
 18507                                  ;
 18508                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18509                                  ;	     CX    - size of DOS code to be moved
 18510                                  ;
 18511                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18512                                  ;
 18513                                  ; ----------------------------------------------------------------------
 18514                                  
 18515                                  	; 11/12/2022
 18516                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18517                                  
 18518                                  ;ifndef ROMDOS
 18519                                  
 18520                                  MovDOS:
 18521                                  	; 14/05/2019
 18522                                  	; 27/03/2019 - Retro DOS v4.0
 18523                                  
 18524                                  	; 11/12/2022
 18525                                  	; ds = cs
 18526                                  
 18527                                  	; 23/10/2022
 18528                                  	;push	ds ; *//
 18529                                  	
 18530 00000917 06                      	push	es
 18531 00000918 57                      	push	di
 18532                                  
 18533                                  	; 11/12/2022
 18534 00000919 1E                      	push	ds ; *// ; 11/12/202
 18535                                  
 18536                                  	; 29/04/2019
 18537 0000091A C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 18538                                  	; 23/10/2022
 18539                                  	;lds	si,[cs:dosinit]
 18540                                  	;;mov	ax,si
 18541                                  
 18542 0000091E F3A4                    	rep	movsb
 18543                                  
 18544 00000920 1F                      	pop	ds ; *// ; 11/12/2022
 18545                                  
 18546 00000921 5B                      	pop	bx				; get back offset into which
 18547                                  						;  DOS was moved
 18548                                  
 18549 00000922 2EA1[6F02]              	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18550                                  						;  wants to run
 18551 00000926 29D8                    	sub	ax,bx
 18552 00000928 E8A202                  	call	off_to_para
 18553 0000092B 5B                      	pop	bx				; get the segment at which
 18554                                  						;  we moved DOS into
 18555 0000092C 29C3                    	sub	bx,ax				; Adjust segment
 18556                                  	
 18557                                  	; 11/12/2022
 18558                                  	; 23/10/2022
 18559                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18560                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18561                                  	; 11/12/2022
 18562 0000092E 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 18563                                  		
 18564                                  	; 27/03/2019
 18565                                  	;pop	ds ; *//
 18566                                  	; ds = cs
 18567                                  	;mov	[FINAL_DOS_LOCATION],bx
 18568                                  
 18569 00000932 C3                      	retn
 18570                                  
 18571                                  ;endif ;ROMDOS
 18572                                  
 18573                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18574                                  ; 24/03/2019
 18575                                  ; ----------------------------------------------------------------------
 18576                                  ;
 18577                                  ; procedure : MovBIOS
 18578                                  ;
 18579                                  ;		Moves BIOS code into requested segment
 18580                                  ;
 18581                                  ;	In : ES - segment to which BIOS is to be moved
 18582                                  ;		  ( it moves always into offset BCode_Start)
 18583                                  ;
 18584                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 18585                                  ;
 18586                                  ; ----------------------------------------------------------------------
 18587                                  
 18588                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18589                                  
 18590                                  ;ifndef ROMDOS
 18591                                  
 18592                                  MovBIOS: ; proc	near
 18593                                  	; 11/12/2022
 18594 00000933 1E                      	push	ds ; ds = cs	
 18595                                  	;
 18596                                  	; 23/10/2022
 18597 00000934 2E8E1E[8702]            	mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 18598                                  	;mov	si,BCODE_START ; mov si,30h
 18599                                  	; 09/12/2022
 18600 00000939 BE[3000]                	mov	si,BCODESTART
 18601 0000093C 89F7                    	mov	di,si
 18602 0000093E B9001A                  	mov	cx,BCODE_END ; mov cx,1A60h
 18603 00000941 29F1                    	sub	cx,si				; size of BIOS
 18604 00000943 D1E9                    	shr	cx,1				; Both the labels are para
 18605                                  						;  aligned
 18606 00000945 F3A5                    	rep	movsw
 18607                                  	
 18608                                  	; 11/12/2022
 18609 00000947 1F                      	pop	ds ; ds = cs
 18610                                  	;
 18611 00000948 06                      	push	es
 18612 00000949 57                      	push	di				; save end of BIOS
 18613 0000094A 8CC0                    	mov	ax,es
 18614                                  	;
 18615                                  	; 11/12/2022
 18616                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 18617                                  	;;call	dword ptr cs:_seg_reinit_ptr
 18618                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 18619                                  	; ds = cs
 18620 0000094C A3[0004]                	mov	[BCodeSeg],ax
 18621 0000094F FF1E[8502]              	call	far [seg_reinit_ptr]
 18622                                  	;
 18623 00000953 5F                      	pop	di
 18624 00000954 07                      	pop	es				; get back end of BIOS
 18625 00000955 C3                      	retn
 18626                                  
 18627                                  ;MovBIOS endp
 18628                                  
 18629                                  ;endif ; ROMDOS
 18630                                  
 18631                                  ; 11/12/2022
 18632                                  %if 0
 18633                                  
 18634                                  ; 24/03/2019
 18635                                  
 18636                                  ; ----------------------------------------------------------------------
 18637                                  ;
 18638                                  ; procedure : MovDOS
 18639                                  ;
 18640                                  ;		Moves DOS code into requested area
 18641                                  ;
 18642                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18643                                  ;	     CX    - size of DOS code to be moved
 18644                                  ;
 18645                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18646                                  ;
 18647                                  ; ----------------------------------------------------------------------
 18648                                  
 18649                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18650                                  
 18651                                  ;ifndef ROMDOS
 18652                                  
 18653                                  MovDOS:
 18654                                  	; 14/05/2019
 18655                                  	; 27/03/2019 - Retro DOS v4.0
 18656                                  
 18657                                  	; 11/12/2022
 18658                                  	; ds = cs
 18659                                  
 18660                                  	; 23/10/2022
 18661                                  	;push	ds ; *//
 18662                                  	
 18663                                  	push	es
 18664                                  	push	di
 18665                                  
 18666                                  	; 11/12/2022
 18667                                  	push	ds ; *// ; 11/12/202
 18668                                  
 18669                                  	; 29/04/2019
 18670                                  	lds	si,[dosinit] ; 11/12/2022
 18671                                  	; 23/10/2022
 18672                                  	;lds	si,[cs:dosinit]
 18673                                  	;;mov	ax,si
 18674                                  
 18675                                  	rep	movsb
 18676                                  
 18677                                  	pop	ds ; *// ; 11/12/2022
 18678                                  
 18679                                  	pop	bx				; get back offset into which
 18680                                  						;  DOS was moved
 18681                                  
 18682                                  	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18683                                  						;  wants to run
 18684                                  	sub	ax,bx
 18685                                  	call	off_to_para
 18686                                  	pop	bx				; get the segment at which
 18687                                  						;  we moved DOS into
 18688                                  	sub	bx,ax				; Adjust segment
 18689                                  	
 18690                                  	; 11/12/2022
 18691                                  	; 23/10/2022
 18692                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18693                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18694                                  	; 11/12/2022
 18695                                  	mov	[CURRENT_DOS_LOCATION],bx
 18696                                  		
 18697                                  	; 27/03/2019
 18698                                  	;pop	ds ; *//
 18699                                  	; ds = cs
 18700                                  	;mov	[FINAL_DOS_LOCATION],bx
 18701                                  
 18702                                  	retn
 18703                                  
 18704                                  ;endif ;ROMDOS
 18705                                  
 18706                                  %endif
 18707                                  
 18708                                  ; ----------------------------------------------------------------------
 18709                                  ;
 18710                                  ; procedure : AllocMemForDOS
 18711                                  ;
 18712                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 18713                                  ;
 18714                                  ;	Out : AX - seg of allocated memoryblock
 18715                                  ;
 18716                                  ; ----------------------------------------------------------------------
 18717                                  
 18718                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18719                                  
 18720                                  ;ifndef ROMDOS
 18721                                  
 18722                                  AllocMemForDOS:
 18723                                  	; 11/12/2022
 18724                                  	; 14/05/2019
 18725                                  	; 27/03/2019 - Retro DOS v4.0
 18726                                  	; ds = cs
 18727                                  	;mov	ax,BCode_end
 18728                                  	;sub	ax,BCode_start		; BIOS code size
 18729                                  	; 23/10/2022
 18730 00000956 B8001A                  	mov	ax,BCODE_END ; 1A60h
 18731                                  	;sub	ax,BCODE_START ; 30h
 18732                                  	; 09/12/2022
 18733 00000959 2D[3000]                	sub	ax,BCODESTART 
 18734                                  	; 24/03/2019 - Retro DOS v4.0 
 18735                                  	; 02/11/2022
 18736                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 18737                                  	; 11/12/2022
 18738                                  	; ds = cs
 18739 0000095C 0306[7F02]              	add	ax,[lo_doscod_size]
 18740 00000960 83C00F                  	add	ax,15
 18741 00000963 E86702                  	call	off_to_para			; convert to para
 18742                                  	; 23/10/2022
 18743                                  	; 14/05/2019
 18744                                  	;inc	ax ; + 1 paragraph for MCB
 18745 00000966 09DB                    	or	bx,bx				; M012
 18746 00000968 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 18747 0000096A 741A                    	jz	short update_arena		; M012
 18748 0000096C B448                    	mov	ah,48h				; request DOS
 18749 0000096E CD21                    	int	21h
 18750 00000970 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 18751                                   	; 23/10/2022
 18752                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 18753 00000972 83E803                  	sub	ax,3				; Take care ORG 30h of
 18754                                  						;  BIOS code
 18755 00000975 8EC0                    	mov	es,ax
 18756                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 18757                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 18758                                  	; 14/05/2019
 18759                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 18760                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 18761                                  	; 23/10/2022
 18762 00000977 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 18763 0000097E 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 18764                                  
 18765 00000985 C3                      	retn
 18766                                  
 18767                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 18768                                  ;	  using DOS itself causes an arena to be generated.
 18769                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 18770                                  ;	  assume that the device drivers are loaded into
 18771                                  ;	  the first arena. For this reason, MagicDrv's
 18772                                  ;	  main device driver header arena is manually
 18773                                  ;	  truncated from the arena chain, and the space
 18774                                  ;	  for DOS is allocated using the following
 18775                                  ;	  simple code, which also assumes that the
 18776                                  ;	  first arena is the free one where DOS's low
 18777                                  ;	  stub will go.
 18778                                  ;
 18779                                  ; M012 : BEGIN
 18780                                  
 18781                                  	; 23/10/2022
 18782                                  update_arena:
 18783 00000986 1E                      	push	ds ; ds = cs
 18784 00000987 57                      	push	di
 18785 00000988 51                      	push	cx
 18786 00000989 52                      	push	dx
 18787                                  	; 23/10/2022
 18788                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 18789                                  	; 11/12/2022
 18790                                  	; ds = cs 
 18791 0000098A C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 18792 0000098E 4F                      	dec	di
 18793 0000098F 4F                      	dec	di				; Arena head is immediately
 18794                                  						;  before sysvar
 18795 00000990 8E05                    	mov	es,[di]				; es = arena head
 18796                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 18797 00000992 268B0E0300              	mov	cx,[es:3]
 18798 00000997 39D9                    	cmp	cx,bx				; is it sufficient ?
 18799 00000999 7227                    	jb	short FatalErr			; no, fatal error
 18800                                  
 18801                                  	;mov	dl,[es:ARENA.SIGNATURE]
 18802 0000099B 268A160000              	mov	dl,[es:0]
 18803 000009A0 8CC0                    	mov	ax,es
 18804 000009A2 01D8                    	add	ax,bx				; ax = new arena head
 18805 000009A4 8905                    	mov	[di],ax				; store it in DOS data area
 18806 000009A6 8ED8                    	mov	ds,ax
 18807                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 18808 000009A8 88160000                	mov	[0],dl
 18809                                  	;mov	word [ARENA.OWNER],0		; free
 18810 000009AC C70601000000            	mov	word [1],0
 18811 000009B2 29D9                    	sub	cx,bx				; size of the new block
 18812                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 18813 000009B4 890E0300                	mov	[3],cx
 18814 000009B8 8CC0                    	mov	ax,es				; return seg to the caller
 18815                                  	; 23/10/2022
 18816                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 18817 000009BA 83E803                  	sub	ax,3				;  BIOS code
 18818 000009BD 5A                      	pop	dx
 18819 000009BE 59                      	pop	cx
 18820 000009BF 5F                      	pop	di
 18821 000009C0 1F                      	pop	ds ; ds = cs
 18822 000009C1 C3                      	retn
 18823                                  ;
 18824                                  ; M012 : END
 18825                                  ;
 18826                                  FatalErr:
 18827 000009C2 0E                      	push	cs
 18828 000009C3 1F                      	pop	ds
 18829 000009C4 BA[8C08]                	mov	dx,FEmsg
 18830 000009C7 B409                    	mov	ah,9
 18831 000009C9 CD21                    	int	21h 		; DOS - PRINT STRING
 18832                                  				; DS:DX -> string terminated by "$"
 18833                                          ;jmp	stall
 18834                                  	; 23/10/2022
 18835 000009CB FA                      	cli
 18836 000009CC F4                      	hlt
 18837                                  
 18838                                  ;endif ;ROMDOS
 18839                                  
 18840                                  ; 25/03/2019 - Retro DOS v4.0
 18841                                  
 18842                                  ; ----------------------------------------------------------------------
 18843                                  ;
 18844                                  ; procedure : AllocHMA
 18845                                  ;
 18846                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 18847                                  ;	  up there. If it gets any sort of error, it will return with
 18848                                  ;	  carry set so that we can resort to running low.
 18849                                  ;
 18850                                  ;	It also returns ES: -> 0ffffh if it returns success
 18851                                  ;
 18852                                  ; ----------------------------------------------------------------------
 18853                                  
 18854                                  AllocHMA:
 18855                                  ;	cas note:  The pre-286 check is no longer needed here since the
 18856                                  ;		   presence of XMS is sufficient. However, this code hasn't
 18857                                  ;		   been deleted because it can be recycled for skipping the
 18858                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 18859                                  ;		   in the case of a pre-286.
 18860                                  
 18861                                  ;;	see if we're running on a pre-286. If not, force low.
 18862                                  ;
 18863                                  ;	xor	ax,ax
 18864                                  ;	pushf			; save flags (like int)
 18865                                  ;	push	ax
 18866                                  ;	popf
 18867                                  ;	pushf
 18868                                  ;	pop	ax
 18869                                  ;	popf			; restore original flags (like int)
 18870                                  ;	and	ax,0F000h
 18871                                  ;	cmp	ax,0F000h	; 8088/8086?
 18872                                  ;	jz	short grab_hma_error
 18873                                  
 18874                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18875                                  	; (SYSINIT:0A26h)
 18876                                  
 18877 000009CD 1E                      	push	ds
 18878                                  	;;mov	ax,Bios_Data
 18879                                  	;mov	ax,KERNEL_SEGMENT
 18880                                  	; 21/10/2022
 18881 000009CE B87000                  	mov	ax,DOSBIODATASEG
 18882 000009D1 8ED8                    	mov	ds,ax
 18883                                  
 18884 000009D3 E84A00                  	call	IsXMSLoaded
 18885 000009D6 7545                    	jnz	short grabhma_error
 18886                                  
 18887 000009D8 B81043                  	mov	ax,4310h
 18888 000009DB CD2F                    	int	2Fh		; get the vector into es:bx
 18889                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 18890                                  		; Return: ES:BX -> driver entry point
 18891                                  
 18892 000009DD 891E[0E00]              	mov	[xms],bx
 18893                                  	;mov	[0Eh], bx
 18894 000009E1 8C06[1000]              	mov	[xms+2],es
 18895                                  	;mov	[10h],es
 18896                                  
 18897 000009E5 B401                    	mov	ah,1		; request HMA
 18898 000009E7 BAFFFF                  	mov	dx,0FFFFh
 18899                                  	;call	dword ptr ds:0Eh
 18900 000009EA FF1E[0E00]              	call	far [xms]
 18901 000009EE 48                      	dec	ax
 18902 000009EF 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 18903                                  
 18904                                  ;------ Himem may be lying because it has allocated mem for int 15
 18905                                  
 18906 000009F1 B488                    	mov	ah,88h
 18907 000009F3 CD15                    	int	15h
 18908                                  		; Get Extended Memory Size
 18909                                  		; Return: CF clear on success
 18910                                  		; AX = size of memory above 1M in K
 18911 000009F5 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 18912                                  	;jb	short grabhma_error
 18913                                  	; 11/12/2022
 18914 000009F8 7224                    	jb	short grabhma_err ; cf=1
 18915                                  allocHMA_1:
 18916 000009FA B405                    	mov	ah,5		; localenableA20
 18917                                  	;call	dword ptr ds:0Eh
 18918 000009FC FF1E[0E00]              	call	far [xms]
 18919 00000A00 48                      	dec	ax
 18920 00000A01 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 18921                                  
 18922 00000A03 E88901                  	call	IsVDiskInstalled
 18923 00000A06 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 18924                                  
 18925 00000A08 B8FFFF                  	mov	ax,0FFFFh
 18926 00000A0B 8EC0                    	mov	es,ax
 18927 00000A0D 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 18928 00000A14 26813E10003412          	cmp	word [es:10h],1234h
 18929                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 18930                                  	; 11/12/2022
 18931 00000A1B 7401                    	je	short allocHMA_ok	
 18932                                  
 18933                                  ; 11/12/2022
 18934                                  ;	; 11/12/2022
 18935                                  ;	; cf=0
 18936                                  ;	;clc
 18937                                  ;	pop	ds
 18938                                  ;	retn
 18939                                  
 18940                                  grabhma_error:
 18941 00000A1D F9                      	stc
 18942                                  	; 11/12/022
 18943                                  grabhma_err:	; cf=1
 18944                                  allocHMA_ok:	; cf=0
 18945 00000A1E 1F                      	pop	ds
 18946 00000A1F C3                      	retn
 18947                                  
 18948                                  ; ----------------------------------------------------------------------
 18949                                  ;
 18950                                  ; procedure : IsXMSLoaded
 18951                                  ;
 18952                                  ;             Checks whether a XMS driver is loaded
 18953                                  ;
 18954                                  ; Returns : Z flag set if XMS driver loaded
 18955                                  ;           Z flag reset if no XMS drivers are present
 18956                                  ;
 18957                                  ; ----------------------------------------------------------------------
 18958                                  
 18959                                  IsXMSLoaded:
 18960 00000A20 B80043                  	mov	ax,4300h
 18961 00000A23 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 18962                                  				; Return: AL = 80h XMS driver installed
 18963                                  				; AL <> 80h no driver
 18964 00000A25 3C80                    	cmp	al,80h		; XMS installed?
 18965 00000A27 C3                      	retn
 18966                                  
 18967                                  ; ----------------------------------------------------------------------
 18968                                  ; procedure : FTryToMovDOSHi
 18969                                  ;
 18970                                  ;		Called from HMA suballoc calls
 18971                                  ;	
 18972                                  ; ----------------------------------------------------------------------
 18973                                  
 18974                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18975                                  	; (SYSINIT:0A84h)
 18976                                  
 18977                                  FTryToMovDOSHi:	; proc	far
 18978                                  
 18979 00000A28 50                      	push	ax
 18980 00000A29 53                      	push	bx
 18981 00000A2A 51                      	push	cx
 18982 00000A2B 52                      	push	dx
 18983 00000A2C 56                      	push	si
 18984 00000A2D 57                      	push	di
 18985 00000A2E 1E                      	push	ds
 18986 00000A2F 06                      	push	es
 18987                                  
 18988                                  	; 23/10/2022
 18989                                  	; 27/03/2019 - Retro DOS v4.0
 18990                                  	; 11/12/2022
 18991 00000A30 0E                      	push	cs
 18992 00000A31 1F                      	pop	ds
 18993                                  
 18994                                  	;cmp	byte [cs:runhigh],0FFh
 18995                                  	; 11/12/2022
 18996 00000A32 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 18997 00000A37 7503                    	jne	short _ftymdh_1
 18998                                  
 18999                                  	; ds = cs
 19000 00000A39 E8A0FE                  	call	TryToMovDOSHi
 19001                                  _ftymdh_1:
 19002 00000A3C 07                      	pop	es
 19003 00000A3D 1F                      	pop	ds
 19004 00000A3E 5F                      	pop	di
 19005 00000A3F 5E                      	pop	si
 19006 00000A40 5A                      	pop	dx
 19007 00000A41 59                      	pop	cx
 19008 00000A42 5B                      	pop	bx
 19009 00000A43 58                      	pop	ax
 19010                                  
 19011 00000A44 CB                      	retf
 19012                                  
 19013                                  ; ----------------------------------------------------------------------
 19014                                  ;
 19015                                  ; following piece of code will be moved into a para boundary. And the para
 19016                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 19017                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 19018                                  ; to determine free extended memory.
 19019                                  ;
 19020                                  ; For more details read "power programming" column by Ray Duncan in the
 19021                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 19022                                  ;
 19023                                  ; ----------------------------------------------------------------------
 19024                                  
 19025                                  StartVDHead:
 19026                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 19027                                  
 19028 00000A45 00000000                	dd	0		; link to next device driver
 19029 00000A49 0080                    	dw	8000h		; device attribute
 19030 00000A4B 0000                    	dw	0		; strategy routine offset
 19031 00000A4D 0000                    	dw	0		; interrupt routine offset
 19032 00000A4F 01                      	db	1		; number of units
 19033                                  	;db	7 dup(0) 
 19034 00000A50 00<rep 7h>              	times	7 db 0 		; reserved area
 19035                                  VDiskSig1:
 19036 00000A57 564449534B              	db	'VDISK'
 19037                                  
 19038                                  VLEN1	equ	($-VDiskSig1)
 19039                                  
 19040 00000A5C 202056332E33            	db	'  V3.3'	; vdisk label
 19041                                  	;db	15 dup (0)	; pad
 19042 00000A62 00<rep Fh>              	times	15 db 0
 19043 00000A71 0000                    	dw	0		; bits 0-15 of free HMA
 19044 00000A73 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 19045                                  VDInt19:
 19046 00000A74 EA                      	db	0EAh		; jmp to old vector
 19047                                  OldVDInt19:
 19048 00000A75 00000000                	dd	0		; Saved int 19 vector
 19049                                  
 19050                                  EndVDHead: ; label byte
 19051                                  
 19052                                  VDiskHMAHead:	
 19053 00000A79 000000                  	db	0,0,0		; non-bootable disk
 19054                                  VDiskSig2:
 19055 00000A7C 564449534B              	db	'VDISK'
 19056                                  
 19057                                  VLEN2	equ	($-VDiskSig2)
 19058                                  
 19059 00000A81 332E33                  	db	'3.3'		; OEM - signature
 19060 00000A84 8000                    	dw	128		; number of bytes/sector
 19061 00000A86 01                      	db	1		; sectors/cluster
 19062 00000A87 0100                    	dw	1		; reserved sectors
 19063 00000A89 01                      	db	1		; number of FAT copies
 19064 00000A8A 4000                    	dw	64		; number of root dir entries
 19065 00000A8C 0002                    	dw	512		; number of sectors
 19066 00000A8E FE                      	db	0FEh		; media descriptor
 19067 00000A8F 0600                    	dw	6		; number of sectors/FAT
 19068 00000A91 0800                    	dw	8		; sectors per track
 19069 00000A93 0100                    	dw	1		; number of heads
 19070 00000A95 0000                    	dw	0		; number of hidden sectors
 19071 00000A97 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 19072                                  
 19073                                  EndVDiskHMAHead: ; label byte
 19074                                  
 19075                                  ; ----------------------------------------------------------------------
 19076                                  ;
 19077                                  ; procedure : InstVDiskHeader
 19078                                  ;
 19079                                  ;             Installs the VDISK header to reserve the 64k of HMA
 19080                                  ;	      It puts a 32 byte header at 10000:0 and
 19081                                  ;	      another header at (seg of int19):0
 19082                                  ;
 19083                                  ; Inputs : None
 19084                                  ;
 19085                                  ; Outputs : None
 19086                                  ;
 19087                                  ; USES : DS,SI,AX,CX,DX
 19088                                  ;
 19089                                  ; ----------------------------------------------------------------------
 19090                                  
 19091                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19092                                  
 19093                                  InstVDiskHeader:
 19094 00000A99 31C0                    	xor	ax,ax
 19095 00000A9B 8ED8                    	mov	ds,ax			; seg of int vect table
 19096                                  
 19097                                  ;-------------- save old int 19 vector
 19098                                  
 19099                                  	; 23/10/2022
 19100 00000A9D A16400                  	mov	ax,[19h*4]
 19101                                  	;mov	[OldVDInt19],ax
 19102 00000AA0 2EA3[750A]              	mov	[cs:OldVDInt19],ax
 19103 00000AA4 A16600                  	mov	ax,[19h*4+2]
 19104                                  	;mov	[OldVDInt19+2],ax
 19105 00000AA7 2EA3[770A]              	mov	[cs:OldVDInt19+2],ax
 19106                                  
 19107                                  ;-------------- calculate seg of new int 19 handler
 19108                                  
 19109 00000AAB B448                    	mov	ah,48h			; allocate memory
 19110                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 19111                                  	; 23/10/2022
 19112 00000AAD BB0400                  	mov	bx,4
 19113 00000AB0 CD21                    	int	21h
 19114                                  
 19115                                  ;	if carry, fatal hanging error!!!!!
 19116                                  
 19117 00000AB2 48                      	dec	ax			; point to arena
 19118 00000AB3 8EC0                    	mov	es,ax
 19119                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 19120 00000AB5 26C70601000800          	mov	word [es:1],8
 19121                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 19122 00000ABC 26C70608005343          	mov	word [es:8],'SC'
 19123 00000AC3 40                      	inc	ax
 19124 00000AC4 8EC0                    	mov	es,ax			; get back to allocated memory
 19125                                  
 19126                                  ;-------------- install new int 19 vector
 19127                                  
 19128 00000AC6 FA                      	cli				; no reboots at this time
 19129                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 19130 00000AC7 C70664002F00            	mov	word [19h*4],47
 19131 00000ACD A36600                  	mov	[19h*4+2],ax
 19132                                  
 19133                                  ;-------------- move the code into proper place
 19134                                  
 19135                                  	;mov	cx,(EndVDHead-StartVDHead)
 19136 00000AD0 B93400                  	mov	cx,52
 19137 00000AD3 BE[450A]                	mov	si,StartVDHead
 19138 00000AD6 31FF                    	xor	di,di
 19139 00000AD8 0E                      	push	cs
 19140 00000AD9 1F                      	pop	ds
 19141 00000ADA FC                      	cld
 19142 00000ADB F3A4                    	rep	movsb
 19143 00000ADD FB                      	sti				; BUGBUG is sti OK now?
 19144                                  
 19145                                  ;-------------- mov the HMA VDisk head into HMA
 19146                                  
 19147                                  	; 23/10/2022
 19148 00000ADE 57                      	push	di
 19149 00000ADF 06                      	push	es
 19150                                  
 19151 00000AE0 B8FFFF                  	mov	ax,0FFFFh
 19152 00000AE3 8EC0                    	mov	es,ax
 19153 00000AE5 BF1000                  	mov	di,10h
 19154                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 19155 00000AE8 B92000                  	mov	cx,32
 19156 00000AEB BE[790A]                	mov	si,VDiskHMAHead
 19157 00000AEE F3A4                    	rep	movsb			; ds already set to cs
 19158                                  
 19159 00000AF0 5F                      	pop	di
 19160 00000AF1 07                      	pop	es
 19161                                  
 19162 00000AF2 C3                      	retn
 19163                                  
 19164                                  ; ----------------------------------------------------------------------
 19165                                  ; procedure : ClrVDISKHeader
 19166                                  ;
 19167                                  ;		Clears the first 32 bytes at 1MB boundary
 19168                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 19169                                  ;		left by previous DOS=HIGH session
 19170                                  ;
 19171                                  ; ----------------------------------------------------------------------
 19172                                  
 19173                                  struc desc
 19174 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 19175 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 19176 00000004 ??                       .hi_byte:	resb 	1		; address
 19177 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 19178 00000006 ????                     .reserved:	resw	1		;
 19179                                   .size:
 19180                                  endstruc
 19181                                  
 19182                                  		; 23/10/2022
 19183                                  bmove:		;label byte
 19184                                  
 19185                                  dummy:		;times desc.size db 0	; desc	<>
 19186 00000AF3 00<rep 8h>              		times 8 db 0		 
 19187                                  gdt:		;times desc.size db 0	; desc	<>
 19188 00000AFB 00<rep 8h>              		times 8 db 0
 19189 00000B03 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 19190 00000B05 0000                    		dw	0
 19191 00000B07 00                      		db	0
 19192 00000B08 93                      		db	93h
 19193 00000B09 0000                    		dw	0
 19194 00000B0B FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 19195 00000B0D 0000                    		dw	0
 19196 00000B0F 10                      		db	10h
 19197 00000B10 93                      		db	93h
 19198 00000B11 0000                    		dw	0
 19199                                  
 19200                                  rombios_code:	;times desc.size db 0	; desc	<>
 19201 00000B13 00<rep 8h>              		times 8 db 0
 19202                                  temp_stack:	;times desc.size db 0	; desc	<>
 19203 00000B1B 00<rep 8h>              		times 8 db 0
 19204                                  
 19205 00000B23 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 19206                                  
 19207                                  
 19208                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIt1.ASM)
 19209                                  
 19210                                  ClrVDISKHeader:	; proc	near
 19211                                  
 19212                                  ;;-----------------------------------------------------------	      ;I070
 19213                                  ;; The following workaround get around a problem with the	      ;I070
 19214                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 19215                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 19216                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 19217                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 19218                                  ;; move crashes the system. We can do this because these	      ;I070
 19219                                  ;; systems clear all of memory on a cold boot.			      ;I070
 19220                                  ;								      ;I070
 19221                                  ;               in      al,64h         ; Test for password servr mode ;I070
 19222                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 19223                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 19224                                  ;                                      ; Check for Tortugas...	      ;I070
 19225                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 19226                                  ;               je      short ClrVDISKno                              ;I070
 19227                                  ;                                      ; Check for mod 30-286	      ;I070
 19228                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 19229                                  ;               jne     short ClrVDISKok			      ;I070
 19230                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 19231                                  ;								      ;I070
 19232                                  ;ClrVDISKok:							      ;I070
 19233                                  ;-----------------------------------------------------------	      ;I070
 19234                                  
 19235                                  	; 12/12/2022
 19236                                  	; ds = cs
 19237                                  
 19238 00000B43 06                      	push	es
 19239 00000B44 8CC8                    	mov	ax,cs
 19240 00000B46 89C2                    	mov	dx,ax
 19241 00000B48 B10C                    	mov	cl,12
 19242 00000B4A D3EA                    	shr	dx,cl
 19243 00000B4C B104                    	mov	cl,4
 19244 00000B4E D3E0                    	shl	ax,cl
 19245 00000B50 05[230B]                	add	ax,ClrdVDISKHead
 19246 00000B53 80D200                  	adc	dl,0
 19247                                  
 19248                                  	;; 23/10/2022
 19249                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 19250                                  	;mov	[cs:src_desc+2],ax
 19251                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 19252                                  	;mov	[cs:src_desc+4],dl
 19253                                  	; 12/12/2022
 19254                                  	;mov	[src_desc+desc.lo_word],ax
 19255 00000B56 A3[050B]                	mov	[src_desc+2],ax
 19256                                  	;mov	[src_desc+desc.hi_byte],dl
 19257 00000B59 8816[070B]              	mov	[src_desc+4],dl
 19258                                  
 19259 00000B5D B91000                  	mov	cx,16	; 16 words
 19260 00000B60 0E                      	push	cs
 19261 00000B61 07                      	pop	es
 19262 00000B62 BE[F30A]                	mov	si,bmove
 19263 00000B65 B487                    	mov	ah,87h
 19264 00000B67 CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 19265                                  			; CX = number of words to move 
 19266                                  			; ES:SI -> global descriptor table
 19267                                  			; Return: CF set on error, AH = status
 19268 00000B69 07                      	pop	es
 19269 00000B6A C3                      	retn
 19270                                  
 19271                                  ; ----------------------------------------------------------------------
 19272                                  ;
 19273                                  ; procedure : SaveFreeHMAPtr
 19274                                  ;
 19275                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 19276                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 19277                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 19278                                  ;		the offset.
 19279                                  ;
 19280                                  ; Inputs : ES:DI - pointer to free HMA
 19281                                  ; Output : FreeHMAPtr in BIOS data segment updated
 19282                                  ;
 19283                                  ; ----------------------------------------------------------------------
 19284                                  
 19285                                  SaveFreeHMAPtr:
 19286 00000B6B 8CC3                    	mov	bx,es
 19287 00000B6D B8FFFF                  	mov	ax,0FFFFh		; HMA segment
 19288 00000B70 29D8                    	sub	ax,bx
 19289 00000B72 83C70F                  	add	di,15			; para round
 19290 00000B75 83E7F0                  	and	di,0FFF0h
 19291 00000B78 B104                    	mov	cl,4
 19292 00000B7A D3E0                    	shl	ax,cl
 19293 00000B7C 29C7                    	sub	di,ax
 19294 00000B7E 1E                      	push	ds
 19295                                  	;;mov	ax,Bios_Data ; 0070h
 19296                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19297                                  	; 21/10/2022
 19298 00000B7F B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19299 00000B82 8ED8                    	mov	ds,ax
 19300 00000B84 893E[F508]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 19301 00000B88 C606[0D00]FF            	mov	byte [inHMA],0FFh  ; (ds:0Dh)
 19302 00000B8D 1F                      	pop	ds
 19303 00000B8E C3                      	retn
 19304                                  
 19305                                  ; ----------------------------------------------------------------------
 19306                                  ;
 19307                                  ; procedure : IsVDiskInstalled
 19308                                  ;
 19309                                  ;		Checks for the presence of VDISK header at 1MB boundary
 19310                                  ;		& INT 19 vector
 19311                                  ;
 19312                                  ; Inputs  : A20 flag should be ON
 19313                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 19314                                  ;
 19315                                  ; ----------------------------------------------------------------------
 19316                                  
 19317                                  IsVDiskInstalled:
 19318 00000B8F 31C0                    	xor	ax,ax
 19319 00000B91 8ED8                    	mov	ds,ax
 19320 00000B93 8E1E4E00                	mov	ds,[19*4+2]
 19321                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 19322                                  	; 23/10/2022
 19323 00000B97 BE1200                  	mov	si,18
 19324                                  	;mov	cx,VLEN1 ; 5
 19325 00000B9A B90500                  	mov	cx,5
 19326 00000B9D 0E                      	push	cs
 19327 00000B9E 07                      	pop	es
 19328 00000B9F BF[570A]                	mov	di,VDiskSig1
 19329 00000BA2 F3A6                    	rep	cmpsb
 19330 00000BA4 7410                    	je	short ivdins_retn
 19331 00000BA6 B8FFFF                  	mov	ax,0FFFFh
 19332 00000BA9 8ED8                    	mov	ds,ax
 19333                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 19334 00000BAB BE1300                  	mov	si,13h
 19335 00000BAE BF[7C0A]                	mov	di,VDiskSig2
 19336                                  	;mov	cx,VLEN2  ; 5
 19337 00000BB1 B90500                  	mov	cx,5
 19338 00000BB4 F3A6                    	rep	cmpsb
 19339                                  ivdins_retn: 
 19340 00000BB6 C3                      	retn			; returns the Zero flag
 19341                                  
 19342                                  ; ----------------------------------------------------------------------
 19343                                  ;
 19344                                  ; procedure : CPMHack
 19345                                  ;
 19346                                  ;		Copies the code from 0:c0 into ffff:0d0h
 19347                                  ;		for CPM compatibility
 19348                                  ;
 19349                                  ; ----------------------------------------------------------------------
 19350                                  
 19351                                  	; 11/12/2022
 19352                                  CPMHack:
 19353 00000BB7 1E                      	push	ds
 19354 00000BB8 B9FFFF                  	mov	cx,0FFFFh
 19355 00000BBB 8EC1                    	mov	es,cx		; ES = FFFF
 19356                                  	;xor	cx,cx
 19357                                  	; 11/12/2022
 19358 00000BBD 41                      	inc	cx  ; cx = 0
 19359 00000BBE 8ED9                    	mov	ds,cx		; DS = 0
 19360 00000BC0 BEC000                  	mov	si,0C0h
 19361 00000BC3 BFD000                  	mov	di,0D0h
 19362                                  	;mov	cx,5
 19363 00000BC6 B105                    	mov	cl,5
 19364 00000BC8 FC                      	cld
 19365 00000BC9 F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 19366 00000BCB 1F                      	pop	ds
 19367 00000BCC C3                      	retn
 19368                                  
 19369                                  ; ----------------------------------------------------------------------
 19370                                  ;
 19371                                  ; procedure : off_to_para
 19372                                  ;
 19373                                  ; ----------------------------------------------------------------------
 19374                                  off_to_para:
 19375 00000BCD D1E8                    	shr	ax,1
 19376 00000BCF D1E8                    	shr	ax,1
 19377 00000BD1 D1E8                    	shr	ax,1
 19378 00000BD3 D1E8                    	shr	ax,1
 19379 00000BD5 C3                      	retn
 19380                                  
 19381                                  ; ----------------------------------------------------------------------
 19382                                  ;**	TempCDS - Create (Temporary?) CDS
 19383                                  ;
 19384                                  ;	ENTRY	?? BUGBUG
 19385                                  ;		(DS) = SysInitSeg
 19386                                  ;	EXIT	?? BUGBUG
 19387                                  ;	USES	?? BUGBUG
 19388                                  ; ----------------------------------------------------------------------
 19389                                  
 19390                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19391                                  TempCDS:
 19392 00000BD6 C43E[6B02]              	les	di,[DOSINFO]
 19393 00000BDA 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 19394                                  	;mov	cl,[es:di+20h]
 19395 00000BDE 30ED                    	xor	ch,ch			; (cx) = # of block devices
 19396                                  
 19397 00000BE0 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 19398                                  	;mov	[es:di+21h],cl	
 19399                                  
 19400 00000BE4 88C8                    	mov	al,cl
 19401 00000BE6 B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 19402                                  	;mov	ah,88
 19403 00000BE8 F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 19404 00000BEA E8D304                  	call	ParaRound		; (ax) = paragraph size for CDSs
 19405 00000BED 8B36[A102]              	mov	si,[top_of_cdss] ; mov si,[CONFBOT]
 19406                                  
 19407                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 19408                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 19409                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 19410                                  ;		   variable which has the top of free memory for
 19411                                  ;		   device driver loads, etc.
 19412                                  
 19413 00000BF1 29C6                    	sub	si,ax
 19414                                  
 19415                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 19416                                  ;		that automatically updates alloclim every time we
 19417                                  ;		set up some new CDSs. Instead, I've added code
 19418                                  ;		which pre-allocates space for 26 CDSs. This
 19419                                  ;	        way we've got room for worst case CDSs before
 19420                                  ;		we place MagicDrv.sys
 19421                                  ;
 19422                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 19423                                  
 19424                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19425                                  	; (SYSINIT:0C52h)
 19426 00000BF3 8936[A302]              	mov	[ALLOCLIM],si
 19427                                  
 19428 00000BF7 26897518                	mov	[es:di+SYSI_CDS+2],si
 19429                                  	;mov	[es:di+18h],si
 19430 00000BFB 89F0                    	mov	ax,si
 19431 00000BFD 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 19432                                  	;mov	[word es:di+16h],0
 19433                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 19434 00000C03 26C535                  	lds	si,[es:di]
 19435 00000C06 8EC0                    	mov	es,ax
 19436 00000C08 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 19437                                  
 19438                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 19439                                  ;	info from the corresponding DPB.
 19440                                  ;
 19441                                  ;	(cx) = count of CDSs left to process
 19442                                  ;	(es:di) = address of next CDS
 19443                                  
 19444                                  fooset:
 19445                                  	; 23/10/2022
 19446 00000C0A 2EA1[A502]              	mov	ax,[cs:DirStrng] ; "A:"
 19447 00000C0E AB                      	stosw				; setup the root as the curdir
 19448                                  
 19449                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 19450                                  
 19451                                  ;	(ds:si) = address of DPB
 19452                                  ;		 (si) = -1 if no drive
 19453                                  
 19454 00000C0F 2EA1[A702]              	mov	ax,[cs:DirStrng+2] ; "\",0
 19455 00000C13 AB                      	stosw
 19456 00000C14 2EFE06[A502]            	inc	byte [cs:DirStrng]
 19457 00000C19 31C0                    	xor	ax,ax
 19458 00000C1B 51                      	push	cx
 19459                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 19460 00000C1C B93F00                  	mov	cx,63	; 23/10/2022
 19461 00000C1F F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 19462                                  
 19463                                  ;	should handle the system that does not have any floppies.
 19464                                  ;	in this case,we are going to pretended there are two dummy floppies
 19465                                  ;	in the system. still they have dpb and cds,but we are going to
 19466                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 19467                                  ;	"invalid drive specification" message when the user try to
 19468                                  ;	access them.
 19469                                  ;
 19470                                  ;	(ax) = 0
 19471                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19472                                  ;	(ds:si) = Next DPB (-1 if none)
 19473                                  
 19474 00000C21 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 19475 00000C24 7414                    	je	short fooset_zero	; don't have any physical drive.
 19476                                  
 19477                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 19478                                  ;	if we are faking floppy drives then see if this cds being initialised
 19479                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 19480                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 19481                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 19482                                  ;	for dpb offsets look at inc\dpb.inc.
 19483                                  
 19484 00000C26 2E803E[8902]01          	cmp	byte [cs:fake_floppy_drv],1
 19485 00000C2C 7513                    	jne	short normcds 		; machine has floppy drives
 19486                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 19487 00000C2E 803C01                  	cmp	byte [si],1
 19488 00000C31 770E                    	ja	short normcds
 19489 00000C33 B103                    	mov	cl,3			; the next dbp pointer
 19490                                  					; AX should be zero here
 19491 00000C35 F3AB                    	rep	stosw
 19492 00000C37 59                      	pop	cx
 19493 00000C38 EB18                    	jmp	short get_next_dpb
 19494                                  
 19495                                  ;	(ax) = 0
 19496                                  
 19497                                  fooset_zero:
 19498 00000C3A B103                    	mov	cl,3
 19499 00000C3C F3AB                    	rep	stosw
 19500 00000C3E 59                      	pop	cx
 19501 00000C3F EB14                    	jmp	short fincds
 19502                                  
 19503                                  ;*	We have a "normal" DPB and thus a normal CDS.
 19504                                  ;
 19505                                  ;	(ax) = 0
 19506                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19507                                  ;	(ds:si) = Next DPB (-1 if none)
 19508                                  
 19509                                  normcds:
 19510 00000C41 59                      	pop	cx
 19511                                  
 19512                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 19513                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 19514                                  ;	this media is a non-fat based one.
 19515                                  
 19516                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 19517                                  	; 23/10/2022
 19518 00000C42 807C0800                	cmp	byte [si+8],0
 19519 00000C46 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 19520 00000C48 B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 19521                                  	;mov	ax,4000h
 19522                                  setnormcds:
 19523 00000C4B AB                      	stosw				; curdir_flags
 19524 00000C4C 89F0                    	mov	ax,si
 19525 00000C4E AB                      	stosw				; curdir_devptr
 19526 00000C4F 8CD8                    	mov	ax,ds
 19527 00000C51 AB                      	stosw
 19528                                  
 19529                                  get_next_dpb:				; entry point for fake_fooset_zero
 19530                                  	; 23/10/2022
 19531 00000C52 C57419                  	lds	si,[si+19h]
 19532                                  	;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19533                                  fincds:
 19534 00000C55 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 19535 00000C58 AB                      	stosw				; curdir_id
 19536 00000C59 AB                      	stosw				; curdir_id
 19537 00000C5A AB                      	stosw				; curdir_user_word
 19538 00000C5B B80200                  	mov	ax,2
 19539 00000C5E AB                      	stosw				; curdir_end
 19540 00000C5F B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 19541 00000C61 AA                      	stosb
 19542 00000C62 AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 19543 00000C63 AB                      	stosw
 19544 00000C64 AB                      	stosw
 19545                                  
 19546 00000C65 E2A3                    	loop	fooset
 19547                                  	
 19548 00000C67 2EC606[A502]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 19549                                  	
 19550 00000C6D C3                      	retn
 19551                                  
 19552                                  ; ----------------------------------------------------------------------
 19553                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 19554                                  ;
 19555                                  ;	entry:
 19556                                  ;	   al == ASCII CAPS drive letter
 19557                                  ;
 19558                                  ;	exit:
 19559                                  ;	   ds:si -> DPB, or si = -1 if not found
 19560                                  ; ----------------------------------------------------------------------
 19561                                  
 19562                                  ;	; 23/10/2022 (get_dpb_for_drive_al
 19563                                  ;
 19564                                  ;get_dpb_for_drive_al:
 19565                                  ;	lds	si,[cs:DOSINFO]		; point to first DPB
 19566                                  ;	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 19567                                  ;	lds	si,[si]
 19568                                  ;	sub	al,'A'
 19569                                  ;
 19570                                  ;get_dpb_for_drive_1:
 19571                                  ;	;cmp	al,[si+DPB.DRIVE]	; match?
 19572                                  ;	cmp	al,[si]
 19573                                  ;	je	short got_dpb_for_drive	;  done if so
 19574                                  ;
 19575                                  ;	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19576                                  ;	cmp	si,-1
 19577                                  ;	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 19578                                  ;
 19579                                  ;got_dpb_for_drive:
 19580                                  ;	retn
 19581                                  
 19582                                  ;=======================================================================
 19583                                  
 19584                                  ;**	EndFile - Build DOS structures
 19585                                  ;
 19586                                  ; This procedure is called after the config.sys has been processed and
 19587                                  ; installable device drivers have been loaded (but before "install="
 19588                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 19589                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 19590                                  ; to allow for the safe EXECing of "install=" programs. All memory
 19591                                  ; above these structures is deallocated back to DOS.
 19592                                  ;
 19593                                  ;	ENTRY	?? BUGBUG
 19594                                  ;	EXIT	?? BUGBUG
 19595                                  ;	USES	?? BUGBUG
 19596                                  
 19597                                  ;=======================================================================
 19598                                  ; allocate files
 19599                                  ; ----------------------------------------------------------------------
 19600                                  
 19601                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19602                                  	; (SYSINIT:0CCDh)
 19603                                  
 19604                                  endfile:
 19605                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 19606                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 19607                                  ; to confbot.
 19608                                  
 19609                                  ;	if this procedure has been called to take care of install= command,
 19610                                  ;	   then we have to save es,si registers.
 19611                                  
 19612                                  	; 11/12/2022
 19613                                  	; ds = cs
 19614                                  
 19615                                  	; 23/10/2022
 19616                                  	; 31/03/2019
 19617 00000C6E 1E                      	push	ds
 19618                                  
 19619                                  	;;mov	ax,Bios_Data ; 0070h
 19620                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19621                                  	; 21/10/2022
 19622 00000C6F B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19623 00000C72 8ED8                    	mov	ds,ax
 19624                                  
 19625                                  	;cmp	word [052Fh],0
 19626 00000C74 833E[2F05]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 19627 00000C79 7505                    	jne	short multrk_flag_done
 19628                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19629                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 19630                                  	; 12/12/2022
 19631 00000C7B 800E[2F05]80            	or	byte [multrk_flag],multrk_on ; 80h
 19632                                  multrk_flag_done:
 19633                                  	; 23/10/2022
 19634                                  	; 31/03/2019
 19635 00000C80 1F                      	pop	ds
 19636                                  
 19637                                  	; 11/12/2022
 19638                                  	; ds = cs
 19639 00000C81 A1[A102]                	mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 19640 00000C84 A3[A302]                	mov	[ALLOCLIM],ax
 19641                                  	; 23/10/2022
 19642                                  	;mov	ax, [cs:top_of_cdss]
 19643                                  	;mov	[cs:ALLOCLIM], ax 
 19644                                  
 19645                                  	; 11/12/2022
 19646                                  	; ds = cs
 19647                                  	;push	cs
 19648                                  	;pop	ds
 19649                                  	
 19650                                  	;mov	ax,[CONFBOT]
 19651                                  	;mov	[ALLOCLIM],ax
 19652                                  
 19653 00000C87 E8FE23                  	call	round
 19654                                  	; 11/12/2022
 19655                                  	; ds = cs
 19656 00000C8A A0[9D02]                	mov	al,[FILES]
 19657                                  	; 23/10/2022
 19658                                  	;mov	al,[cs:FILES]
 19659 00000C8D 2C05                    	sub	al,5
 19660 00000C8F 764B                    	jbe	short dofcbs
 19661                                  
 19662 00000C91 50                      	push	ax
 19663                                  	;mov	al,devmark_files ; 'F'
 19664 00000C92 B046                    	mov	al,'F'
 19665 00000C94 E87A07                  	call	setdevmark		; set devmark for sfts (files)
 19666 00000C97 58                      	pop	ax
 19667 00000C98 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19668                                  					;  it does sign extend.
 19669                                  	; 11/12/2022
 19670                                  	; ds = cs
 19671 00000C9A 8B1E[DE03]              	mov	bx,[memlo]
 19672 00000C9E 8B16[E003]              	mov	dx,[memhi]
 19673 00000CA2 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19674                                  	; 23/10/2022
 19675                                  	;mov	bx,[cs:memlo]
 19676                                  	;mov	dx,[cs:memhi]
 19677                                  	;lds	di,[cs:DOSINFO]		
 19678                                  
 19679                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 19680 00000CA6 C57D04                  	lds	di,[di+4]
 19681                                  
 19682                                  	;mov	[di+SF.SFLink],bx
 19683 00000CA9 891D                    	mov	[di],bx
 19684 00000CAB 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 19685                                  
 19686 00000CAE 0E                      	push	cs
 19687 00000CAF 1F                      	pop	ds
 19688                                  
 19689                                  	; 11/12/2022
 19690                                  	; ds = cs
 19691 00000CB0 C43E[DE03]              	les	di,[memlo]		;point to new sft
 19692                                  	; 23/10/2022
 19693                                  	;les	di,[cs:memlo]
 19694                                  
 19695                                  	;mov	word [es:di+SF.SFLink],-1
 19696 00000CB4 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 19697                                  	;mov	[es:di+SF.SFCount],ax
 19698 00000CB9 26894504                	mov	[es:di+4],ax
 19699                                  	;mov	bl,SF_ENTRY.size ; 59
 19700 00000CBD B33B                    	mov	bl,59
 19701 00000CBF F6E3                    	mul	bl			;ax = number of bytes to clear
 19702 00000CC1 89C1                    	mov	cx,ax
 19703                                  	; 11/12/2022
 19704                                  	; ds = cs
 19705 00000CC3 0106[DE03]              	add	[memlo],ax		;allocate memory
 19706                                  	; 23/10/2022
 19707                                  	;add	[cs:memlo],ax
 19708 00000CC7 B80600                  	mov	ax,6
 19709                                  	; 11/12/2022
 19710 00000CCA 0106[DE03]              	add	[memlo],ax		;remember the header too
 19711                                  	;add	[cs:memlo],ax
 19712                                  	; 11/12/2022
 19713 00000CCE 800E[3414]02            	or	byte [setdevmarkflag],for_devmark ; 2
 19714                                  	; 23/10/2022
 19715                                  	;or	byte [cs:setdevmarkflag],2
 19716 00000CD3 E8B223                  	call	round			; check for mem error before the stosb
 19717 00000CD6 01C7                    	add	di,ax
 19718 00000CD8 31C0                    	xor	ax,ax
 19719 00000CDA F3AA                    	rep	stosb			;clean out the stuff
 19720                                  
 19721                                  ; allocate fcbs
 19722                                  ; ----------------------------------------------------------------------
 19723                                  
 19724                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19725                                  	; (SYSINIT:0D48h)
 19726                                  dofcbs:
 19727                                  	; 11/12/2022
 19728                                  	; ds = cs
 19729                                  	;push	cs
 19730                                  	;pop	ds
 19731 00000CDC E8A923                  	call	round
 19732                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 19733 00000CDF B058                    	mov	al,'X'
 19734 00000CE1 E82D07                  	call	setdevmark
 19735                                  	; 11/12/2022
 19736                                  	; ds = cs
 19737 00000CE4 A0[9E02]                	mov	al,[FCBS]
 19738                                  	;mov	al,[cs:FCBS]
 19739 00000CE7 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19740                                  					;  it does sign extend.
 19741                                  	; 11/12/2022
 19742 00000CE9 8B1E[DE03]              	mov	bx,[memlo]
 19743 00000CED 8B16[E003]              	mov	dx,[memhi]
 19744 00000CF1 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19745                                  	; 23/10/2022
 19746                                  	;mov	bx,[cs:memlo]
 19747                                  	;mov	dx,[cs:memhi]
 19748                                  	;lds	di,[cs:DOSINFO]
 19749                                  
 19750                                  	;mov	[di+SYSI_FCB],bx
 19751                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 19752                                  	; 23/10/2022
 19753 00000CF5 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 19754 00000CF8 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 19755                                  
 19756 00000CFB 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 19757 00000D00 30FF                    	xor	bh,bh
 19758                                  	;mov	[di+SYSI_KEEP],bx
 19759 00000D02 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 19760                                  
 19761 00000D05 0E                      	push	cs
 19762 00000D06 1F                      	pop	ds
 19763                                  	
 19764 00000D07 C43E[DE03]              	les	di,[memlo]		;point to new table
 19765                                  	;mov	word [es:di+SF.SFLink],-1
 19766 00000D0B 26C705FFFF              	mov	word [es:di],-1
 19767                                  	;mov	[es:di+SF.SFCount],ax
 19768                                  	; 02/11/2022
 19769 00000D10 26894504                	mov	[es:di+4],ax
 19770 00000D14 B339                    	mov	bl,SF_ENTRY.size ; 59
 19771 00000D16 89C1                    	mov	cx,ax
 19772 00000D18 F6E3                    	mul	bl			;ax = number of bytes to clear
 19773 00000D1A 0106[DE03]              	add	[memlo],ax		;allocate memory
 19774                                  	;mov	ax,6
 19775 00000D1E B80600                  	mov	ax,SF.size-2 ; 6
 19776 00000D21 0106[DE03]              	add	[memlo],ax		;remember the header too
 19777                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 19778 00000D25 800E[3414]02            	or	byte [setdevmarkflag],2
 19779 00000D2A E85B23                  	call	round			; check for mem error before the stosb
 19780 00000D2D 01C7                    	add	di,ax			;skip over header
 19781 00000D2F B041                    	mov	al,'A'
 19782                                  fillloop:
 19783 00000D31 51                      	push	cx			; save count
 19784 00000D32 B93900                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 19785 00000D35 FC                      	cld
 19786 00000D36 F3AA                    	rep	stosb			; filled
 19787                                  
 19788                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 19789                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 19790                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 19791                                  
 19792                                  	; 18/12/2022
 19793                                  	;cx = 0
 19794 00000D38 26894DC7                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 19795 00000D3C 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 19796 00000D40 26894DDE                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 19797                                  	
 19798                                  	; 23/10/2022	
 19799                                  	;mov     word [es:di-3Bh],0
 19800                                  	;mov     word [es:di-26h],0
 19801                                  	;mov     word [es:di-24h],0
 19802                                  
 19803 00000D44 59                      	pop	cx
 19804 00000D45 E2EA                    	loop	fillloop
 19805                                  
 19806                                  ; allocate buffers
 19807                                  ; ----------------------------------------------------------------------
 19808                                  
 19809                                  ; search through the list of media supported and allocate 3 buffers if the
 19810                                  ; capacity of the drive is > 360kb
 19811                                  
 19812                                  	; 18/12/2022
 19813                                  	; cx = 0
 19814 00000D47 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 19815 00000D4C 7403                    	je	short dodefaultbuff
 19816 00000D4E E98700                  	jmp	dobuff			; the user entered the buffers=.
 19817                                  
 19818                                  dodefaultbuff:
 19819                                  	; 18/12/2022
 19820 00000D51 890E[9902]              	mov	[h_buffers],cx ; 0
 19821 00000D55 41                      	inc	cx
 19822 00000D56 41                      	inc	cx
 19823 00000D57 890E[9702]              	mov	[buffers],cx ; 2	
 19824                                  	
 19825                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 19826                                  	;mov	word [buffers],2	; default to 2 buffers
 19827                                  
 19828                                  	; 23/10/2022	
 19829 00000D5B 50                      	push	ax
 19830 00000D5C 1E                      	push	ds ; 26/03/2019
 19831                                  	;les	bp,[DOSINFO]		; search through the dpb's
 19832 00000D5D 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 19833                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 19834                                  	; 11/12/2022
 19835 00000D62 26C46E00                	les	bp,[es:bp]
 19836                                  	; 23/10/2022
 19837                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 19838                                  
 19839 00000D66 0E                      	push	cs
 19840 00000D67 1F                      	pop	ds
 19841                                  ;SYSINIT:0DE2h:
 19842                                  nextdpb:				; test if the drive supports removeable media
 19843                                  	;mov	bl,[es:bp+DPB.drive]
 19844                                  	; 11/12/2022
 19845 00000D68 268A5E00                	mov	bl,[es:bp]
 19846                                  	; 23/10/2022
 19847                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 19848                                  
 19849                                  	;inc	bl
 19850                                  	; 18/12/2022
 19851 00000D6C 43                      	inc	bx
 19852                                  
 19853                                  	;mov	ax,(IOCTL<<8)|8
 19854 00000D6D B80844                  	mov	ax,4408h
 19855 00000D70 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 19856                                  
 19857                                  ; ignore fixed disks
 19858                                  
 19859 00000D72 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 19860 00000D74 7534                    	jnz	short nosetbuf
 19861                                  
 19862                                  ; get parameters of drive
 19863                                  
 19864 00000D76 31DB                    	xor	bx,bx
 19865                                  	;;mov	bl,[es:bp+DPB.drive]
 19866                                  	; 11/12/2022
 19867 00000D78 268A5E00                	mov	bl,[es:bp]
 19868                                  	; 23/10/2022
 19869                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 19870                                  	
 19871                                  	;inc	bl
 19872                                  	; 18/12/2022
 19873 00000D7C 43                      	inc	bx
 19874                                  
 19875 00000D7D BA[2E35]                	mov	dx,deviceparameters
 19876                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 19877 00000D80 B80D44                  	mov	ax,440Dh
 19878                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 19879 00000D83 B96008                  	mov	cx,860h
 19880 00000D86 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 19881 00000D88 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 19882                                  					; generic ioctl
 19883                                  ; determine capacity of drive
 19884                                  ; media capacity = #sectors * bytes/sector
 19885                                  
 19886                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 19887                                  	; 23/10/2022
 19888 00000D8A 8B1E[3D35]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 19889                                  	
 19890                                  ; to keep the magnitude of the media capacity within a word,
 19891                                  ; scale the sector size
 19892                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 19893                                  
 19894                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 19895                                  	; 23/10/2022
 19896 00000D8E A1[3535]                	mov	ax, [deviceparameters+7] ; bytes per sector
 19897 00000D91 31D2                    	xor	dx,dx
 19898 00000D93 B90002                  	mov	cx,512
 19899 00000D96 F7F1                    	div	cx			; scale sector size in factor of
 19900                                  					; 512 bytes
 19901 00000D98 F7E3                    	mul	bx			; ax = #sectors * size factor
 19902 00000D9A 09D2                    	or	dx,dx			; just in case of large floppies
 19903 00000D9C 7505                    	jnz	short setbuf
 19904 00000D9E 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 19905 00000DA1 7607                    	jbe	short nosetbuf
 19906                                  setbuf:
 19907                                  	; 18/12/2022
 19908                                  	; word [buffers] = 2
 19909 00000DA3 C606[9702]03            	mov	byte [buffers],3
 19910                                  	;mov	word [buffers],3
 19911 00000DA8 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 19912                                  					; for default buffer count
 19913                                  nosetbuf:
 19914                                  	; 23/10/2022
 19915                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 19916 00000DAA 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 19917 00000DAF 7406                    	je	short chk_memsize_for_buffers
 19918                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 19919 00000DB1 26C46E19                	les	bp,[es:bp+19h]
 19920 00000DB5 EBB1                    	jmp	short nextdpb
 19921                                  
 19922                                  ;from dos 3.3,the default number of buffers will be changed according to the
 19923                                  ;memory size too.
 19924                                  ; default buffers = 2
 19925                                  ; if diskette media > 360 kb,then default buffers = 3
 19926                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 19927                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 19928                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 19929                                  
 19930                                  chk_memsize_for_buffers:
 19931                                  	; 18/12/2022
 19932                                  	;cmp	word [MEMORY_SIZE],2000h
 19933                                  	;jbe	short bufset
 19934                                  	;mov	word [buffers],5
 19935                                  	;cmp	word [MEMORY_SIZE],4000h
 19936                                  	;jbe	short bufset
 19937                                  	;mov	word [buffers],10
 19938                                  	;cmp	word [MEMORY_SIZE],8000h
 19939                                  	;jbe	short bufset
 19940                                  	;mov	word [buffers],15
 19941                                  
 19942                                  	; 18/12/2022
 19943                                  	; word [buffers] = 3 or 2
 19944 00000DB7 BB[9702]                	mov	bx,buffers
 19945 00000DBA A1[9202]                	mov	ax,[MEMORY_SIZE]
 19946 00000DBD 48                      	dec	ax	; [MEMORY_SIZE] - 1
 19947                                  
 19948 00000DBE 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 19949 00000DC1 7213                    	jb	short bufset
 19950 00000DC3 C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 19951 00000DC6 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 19952 00000DC9 730B                    	jnb	short bufset
 19953 00000DCB C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 19954 00000DCE 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 19955 00000DD1 7303                    	jnb	short bufset
 19956 00000DD3 C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 19957                                  bufset:
 19958                                  	; 23/10/2022
 19959                                  	; 26/03/2019
 19960 00000DD6 1F                      	pop	ds
 19961 00000DD7 58                      	pop	ax
 19962                                  
 19963                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 19964                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 19965                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 19966                                  
 19967                                  ; 26/03/2019
 19968                                  
 19969                                  ;*******************************************************************************
 19970                                  ;									       *
 19971                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 19972                                  ; input :								       *
 19973                                  ;    memhi:memlo - start of the next available memory			       *
 19974                                  ;    buffers = number of buffers					       *
 19975                                  ;    h_buffers = number of secondary buffers				       *
 19976                                  ;									       *
 19977                                  ; output:								       *
 19978                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 19979                                  ;	buffinfo set.							       *
 19980                                  ;	bufferqueue set.						       *
 19981                                  ;									       *
 19982                                  ; subroutines to be called:						       *
 19983                                  ;									       *
 19984                                  ;*******************************************************************************
 19985                                  
 19986                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19987                                  	; (SYSINIT:0E60h)
 19988                                  dobuff:
 19989                                  	; ds = cs ; 31/03/2019
 19990                                  	; 23/10/2022
 19991 00000DD8 2EC51E[6B02]            	lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 19992                                  	;mov	ax,[buffers] ; 31/03/2019
 19993                                  	;lds	bx,[DOSINFO]
 19994 00000DDD 2EA1[9702]              	mov	ax,[cs:buffers]	; set sysi_buffers
 19995                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 19996 00000DE1 89473F                  	mov	[bx+3Fh],ax
 19997 00000DE4 2EA1[9902]              	mov	ax,[cs:h_buffers]
 19998                                  	;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 19999 00000DE8 894741                  	mov	[bx+41h],ax
 20000 00000DEB C55F12                  	lds	bx,[bx+12h]
 20001                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 20002 00000DEE E89722                  	call	round		; get [memhi]:[memlo]
 20003                                  	;mov	al,devmark_buf	; ='B'
 20004 00000DF1 B042                    	mov	al,'B'	
 20005 00000DF3 E81B06                  	call	setdevmark
 20006                                  
 20007                                  ;allocate buffers
 20008                                  
 20009 00000DF6 1E                      	push	ds			; save buffer info. ptr.
 20010 00000DF7 53                      	push	bx
 20011                                  
 20012 00000DF8 E85203                  	call	set_buffer
 20013                                  
 20014 00000DFB 5B                      	pop	bx
 20015 00000DFC 1F                      	pop	ds
 20016                                  
 20017                                  ;now set the secondary buffer if specified.
 20018                                  
 20019 00000DFD 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 20020 00000E03 742D                    	je	short xif16
 20021 00000E05 E88022                  	call	round
 20022                                  	; 23/10/2022
 20023 00000E08 2E8B0E[DE03]            	mov	cx,[cs:memlo]
 20024                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 20025 00000E0D 894F06                  	mov	[bx+6],cx
 20026 00000E10 2E8B0E[E003]            	mov	cx,[cs:memhi]
 20027                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 20028 00000E15 894F08                  	mov	[bx+8],cx
 20029 00000E18 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 20030                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 20031 00000E1D 894F0A                  	mov	[bx+10],cx
 20032 00000E20 B80002                  	mov	ax,512			; 512 byte
 20033 00000E23 F7E1                    	mul	cx
 20034 00000E25 2EA3[DE03]              	mov	[cs:memlo],ax
 20035                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20036 00000E29 2E800E[3414]02          	or	byte [cs:setdevmarkflag],2
 20037 00000E2F E85622                  	call	round
 20038                                  xif16:
 20039                                  
 20040                                  ; ----------------------------------------------------------------------
 20041                                  ; allocate cdss
 20042                                  ; ----------------------------------------------------------------------
 20043                                  
 20044                                  buf1:
 20045 00000E32 E85322                  	call	round
 20046                                  
 20047 00000E35 50                      	push	ax
 20048                                  	; 23/10/2022
 20049                                  	;mov	ax,devmark_cds		;='L'
 20050 00000E36 B84C00                  	mov	ax, 'L'
 20051 00000E39 E8D505                  	call	setdevmark
 20052 00000E3C 58                      	pop	ax
 20053                                  
 20054 00000E3D 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 20055                                  	;mov	cl,[es:di+SYSI_NUMIO]
 20056 00000E42 268A4D20                	mov	cl,[es:di+20h]
 20057 00000E46 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 20058 00000E4B 7305                    	jae	short gotncds 		; user setting must be at least numio
 20059 00000E4D 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 20060                                  gotncds:
 20061 00000E52 30ED                    	xor	ch,ch
 20062                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 20063 00000E54 26884D21                	mov	[es:di+21h],cl
 20064 00000E58 2EA1[E003]              	mov	ax,[cs:memhi]
 20065                                  	;mov	[es:di+SYSI_CDS+2],ax
 20066 00000E5C 26894518                	mov	[es:di+18h],ax
 20067 00000E60 2EA1[DE03]              	mov	ax,[cs:memlo]
 20068                                  	;mov	[es:di+SYSI_CDS],ax
 20069 00000E64 26894516                	mov	[es:di+16h],ax
 20070 00000E68 88C8                    	mov	al,cl
 20071                                  	;mov	ah,curdirlen ; curdir_list.size
 20072 00000E6A B458                    	mov	ah,88
 20073 00000E6C F6E4                    	mul	ah
 20074 00000E6E E84F02                  	call	ParaRound
 20075 00000E71 2E0106[E003]            	add	[cs:memhi],ax
 20076                                  
 20077                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20078 00000E76 2E800E[3414]02          	or	byte [cs:setdevmarkflag],2
 20079 00000E7C E80922                  	call	round			; check for mem error before initializing
 20080                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 20081 00000E7F 26C535                  	lds	si,[es:di]
 20082                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 20083 00000E82 26C47D16                	les	di,[es:di+16h]
 20084 00000E86 E881FD                  	call	fooset
 20085                                  
 20086                                  ; ----------------------------------------------------------------------
 20087                                  ; allocate space for internal stack
 20088                                  ; ----------------------------------------------------------------------
 20089                                  
 20090 00000E89 0E                      	push	cs
 20091 00000E8A 1F                      	pop	ds
 20092                                  
 20093                                  ;	if the user did not entered stacks= command, as a default, do not install
 20094                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 20095                                  ;	otherwise,install it to the user specified value or to the default
 20096                                  ;	value of 9,128 for other systems.
 20097                                  
 20098 00000E8B 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 20099 00000E90 740E                    	je	short doinstallstack	; then install as specified by the user
 20100 00000E92 803E[3803]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 20101 00000E97 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 20102 00000E99 803E[3703]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 20103 00000E9E 736D                    	jae	short skipstack
 20104                                  doinstallstack:
 20105 00000EA0 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 20106 00000EA3 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 20107 00000EA5 7466                    	jz	short skipstack		; don't install stack.
 20108                                  
 20109                                  ;	dynamic relocation of stack code.
 20110                                  
 20111 00000EA7 E8DE21                  	call	round			;[memhi] = seg. for stack code
 20112                                  					;[memlo] = 0
 20113                                  
 20114                                  ; set devmark block into memory for mem command
 20115                                  ; devmark_id = 's' for stack
 20116                                  
 20117                                  	;mov	al,devmark_stk	;='S'
 20118                                  	; 23/10/2022
 20119 00000EAA B053                    	mov	al,'S'
 20120 00000EAC E86205                  	call	setdevmark
 20121                                  
 20122 00000EAF A1[E003]                	mov	ax,[memhi]
 20123 00000EB2 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 20124                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20125                                  	; 11/12/2022
 20126                                  	; ds = cs
 20127                                  	;push	cs
 20128                                  	;pop	ds
 20129 00000EB4 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 20130 00000EB6 31FF                    	xor	di,di
 20131 00000EB8 B9[6702]                	mov	cx,endstackcode
 20132 00000EBB 890E[DE03]              	mov	[memlo],cx
 20133 00000EBF E8C621                  	call	round		;have enough space for relocation?
 20134 00000EC2 F3A4                    	rep	movsb
 20135                                  
 20136 00000EC4 1E                      	push	ds		; stick the location of the NextStack entry
 20137                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 20138                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 20139                                  	; 21/10/2022
 20140 00000EC5 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20141 00000EC8 8ED8                    	mov	ds,ax
 20142 00000ECA C706[BE08][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 20143 00000ED0 8C06[C008]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 20144                                  
 20145 00000ED4 2EA1[DE03]              	mov	ax,[cs:memlo]
 20146 00000ED8 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 20147 00000EDC A3[C408]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 20148 00000EDF 2EA1[E003]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 20149 00000EE3 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 20150 00000EE7 A3[C608]                	mov	[IT_StackLoc+2],ax
 20151                                  
 20152                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 20153                                  
 20154                                  	;mov	ax,entrysize ; mov ax,8
 20155                                  	; 23/10/2022
 20156 00000EEA B80800                  	mov	ax,8
 20157 00000EED 2E0306[8C02]            	add	ax,[cs:stack_size]
 20158 00000EF2 2EF726[8A02]            	mul	word [cs:stack_count]
 20159                                  
 20160 00000EF7 A3[C808]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 20161                                  
 20162 00000EFA 1F                      	pop	ds		; no more need to access Instance Table
 20163                                  
 20164 00000EFB E8C201                  	call	ParaRound	; convert size to paragraphs
 20165                                  	
 20166                                  	; 11/12/2022
 20167                                  	; ds = cs
 20168                                  	;add	[cs:memhi],ax
 20169 00000EFE 0106[E003]              	add	[memhi],ax
 20170                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20171                                  	;or	byte [cs:setdevmarkflag],2
 20172 00000F02 800E[3414]02            	or	byte [setdevmarkflag],2
 20173                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20174                                  				;to set the devmark_size for stack by round routine.
 20175 00000F07 E87E21                  	call	round		; check for memory error before
 20176                                  				; continuing
 20177 00000F0A E8E902                  	call	stackinit	; initialize hardware stack. 
 20178                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 20179                                  skipstack:
 20180                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20181                                  	; (SYSINIT:0F99h)
 20182                                  
 20183                                  	; 11/12/2022
 20184                                  	; ds = cs
 20185                                  	;push	cs
 20186                                  	;pop	ds
 20187                                  
 20188 00000F0D A0[9D02]                	mov	al,[FILES]
 20189 00000F10 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 20190                                  				;  it does sign extend.
 20191 00000F12 89C1                    	mov	cx,ax
 20192 00000F14 31DB                    	xor	bx,bx		;close standard input
 20193 00000F16 B43E                    	mov	ah,3Eh ; CLOSE
 20194 00000F18 CD21                    	int	21h
 20195 00000F1A BB0200                  	mov	bx,2
 20196                                  rcclloop:			;close everybody but standard output
 20197 00000F1D B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 20198 00000F1F CD21                    	int	21h		; in case we can't get new one open.
 20199 00000F21 43                      	inc	bx
 20200 00000F22 E2F9                    	loop	rcclloop
 20201                                  
 20202 00000F24 BA[B833]                	mov	dx,condev
 20203 00000F27 B002                    	mov	al,2
 20204 00000F29 B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 20205 00000F2B F9                      	stc			; set for possible int 24
 20206 00000F2C CD21                    	int	21h
 20207 00000F2E 7305                    	jnc	short goaux
 20208 00000F30 E8E823                  	call	badfil
 20209 00000F33 EB13                    	jmp	short goaux2
 20210                                  goaux:	
 20211 00000F35 50                      	push	ax
 20212 00000F36 BB0100                  	mov	bx,1		;close standard output
 20213 00000F39 B43E                    	mov	ah,3Eh ; CLOSE
 20214 00000F3B CD21                    	int	21h
 20215 00000F3D 58                      	pop	ax
 20216                                  
 20217 00000F3E 89C3                    	mov	bx,ax		;new device handle
 20218 00000F40 B445                    	mov	ah,45h ; XDUP
 20219 00000F42 CD21                    	int	21h		;dup to 1,stdout
 20220 00000F44 B445                    	mov	ah,45h ; XDUP
 20221 00000F46 CD21                    	int	21h		;dup to 2,stderr
 20222                                  goaux2: 
 20223 00000F48 BA[BC33]                	mov	dx,auxdev
 20224 00000F4B B002                    	mov	al,2		;read/write access
 20225 00000F4D E8FC23                  	call	open_dev
 20226                                  
 20227 00000F50 BA[C033]                	mov	dx,prndev
 20228 00000F53 B001                    	mov	al,1		;write only
 20229 00000F55 E8F423                  	call	open_dev
 20230                                  
 20231                                  ;global rearm command for shared interrupt devices attached in the system;
 20232                                  ;shared interrupt attachment has some problem when it issues interrupt
 20233                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 20234                                  ;no further interrupts on that level will be presented until a global rearm
 20235                                  ;is issued. by the request of the system architecture group, msbio will
 20236                                  ;issue a global rearm after every device driver is loaded.
 20237                                  ;to issue a global rearm:	;for pc1,xt,palace
 20238                                  ;
 20239                                  ;			  out 02f2h,xx  ; interrupt level 2
 20240                                  ;			  out 02f3h,xx  ; interrupt level 3
 20241                                  ;			  out 02f4h,xx  ; interrupt level 4
 20242                                  ;			  out 02f5h,xx  ; interrupt level 5
 20243                                  ;			  out 02f6h,xx  ; interrupt level 6
 20244                                  ;			  out 02f7h,xx  ; interrupt level 7
 20245                                  ;
 20246                                  ;	for pc at,in addition to the above commands,
 20247                                  ;	need to handle the secondary interrupt handler
 20248                                  ;
 20249                                  ;			  out 06f2h,xx  ; interrupt level 10
 20250                                  ;			  out 06f3h,xx  ; interrupt level 11
 20251                                  ;			  out 06f4h,xx  ; interrupt level 12
 20252                                  ;			  out 06f6h,xx  ; interrupt level 14
 20253                                  ;			  out 06f7h,xx  ; interrupt level 15
 20254                                  ;
 20255                                  ;	for round-up machine
 20256                                  ;
 20257                                  ;			  none.
 20258                                  
 20259                                  ; where xx stands for any value.
 20260                                  ;
 20261                                  ; for your information,after naples level machine,the system service bios
 20262                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 20263                                  
 20264                                  	; 24/10/2022
 20265                                  
 20266 00000F58 50                      	push	ax
 20267 00000F59 53                      	push	bx
 20268 00000F5A 52                      	push	dx
 20269 00000F5B 06                      	push	es
 20270                                  
 20271 00000F5C B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 20272 00000F5E BAF202                  	mov	dx,2F2h 		;get starting address
 20273 00000F61 EE                      	out	dx,al			; out 02f2h,0ffh
 20274 00000F62 42                      	inc	dx
 20275 00000F63 EE                      	out	dx,al			; out 02f3h,0ffh
 20276 00000F64 42                      	inc	dx
 20277 00000F65 EE                      	out	dx,al			; out 02f4h,0ffh
 20278 00000F66 42                      	inc	dx
 20279 00000F67 EE                      	out	dx,al			; out 02f5h,0ffh
 20280 00000F68 42                      	inc	dx
 20281 00000F69 EE                      	out	dx,al			; out 02f6h,0ffh
 20282 00000F6A 42                      	inc	dx
 20283 00000F6B EE                      	out	dx,al			; out 02f7h,0ffh
 20284                                  
 20285                                  ;sb secondary global rearm
 20286                                  
 20287 00000F6C B800F0                  	mov	ax,0F000h		;get machine type
 20288 00000F6F 8EC0                    	mov	es,ax
 20289 00000F71 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 20290 00000F77 740D                    	je	short startrearm	; *if at no need to check
 20291                                  
 20292 00000F79 B4C0                    	mov	ah,0C0h 		;get system configuration
 20293 00000F7B CD15                    	int	15h			; *
 20294 00000F7D 7216                    	jc	short finishrearm	; *jmp if old rom
 20295                                  
 20296                                  ; test feature byte for secondary interrupt controller
 20297                                  
 20298 00000F7F 26F6470540              	test	byte [es:bx+5],40h
 20299                                  	; 24/10/2022
 20300                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 20301 00000F84 740F                    	je	short finishrearm	;jmp if it is there
 20302                                  
 20303                                  startrearm:
 20304 00000F86 B0FF                    	mov	al,0FFh 		;write any pattern to port
 20305 00000F88 BAF206                  	mov	dx,6F2h 		;get starting address
 20306 00000F8B EE                      	out	dx,al			;out 06f2h,0ffh
 20307 00000F8C 42                      	inc	dx			;bump address
 20308 00000F8D EE                      	out	dx,al			;out 06f3h,0ffh
 20309 00000F8E 42                      	inc	dx			;bump address
 20310 00000F8F EE                      	out	dx,al			;out 06f4h,0ffh
 20311 00000F90 42                      	inc	dx			;bump address
 20312 00000F91 42                      	inc	dx			;bump address
 20313 00000F92 EE                      	out	dx,al			;out 06f6h,0ffh
 20314 00000F93 42                      	inc	dx			;bump address
 20315 00000F94 EE                      	out	dx,al			;out 06f7h,0ffh
 20316                                  
 20317                                  finishrearm:
 20318 00000F95 07                      	pop	es
 20319 00000F96 5A                      	pop	dx
 20320 00000F97 5B                      	pop	bx
 20321 00000F98 58                      	pop	ax
 20322                                  
 20323                                  ;    global rearm end *******************
 20324                                  
 20325                                  ; ----------------------------------------------------------------------
 20326                                  ; allocate sysinit_base for install= command
 20327                                  ; ----------------------------------------------------------------------
 20328                                  ; sysinit_base allocation.
 20329                                  ;   check if endfile has been called to handle install= command.
 20330                                  
 20331                                  set_sysinit_base:
 20332                                  
 20333                                  ; ----------------------------------------------------------------------
 20334                                  ;sysinit_base will be established in the secure area of
 20335                                  ;lower memory when it handles the first install= command.
 20336                                  ;sysinit_base is the place where the actual exec function will be called and
 20337                                  ;will check sysinit module in high memory if it is damaged by the application
 20338                                  ;program.  if sysinit module has been broken,then "memory error..." message
 20339                                  ;is displayed by sysinit_base.
 20340                                  ; ----------------------------------------------------------------------
 20341                                  
 20342                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 20343                                  	; (SYSINIT:1028h)
 20344                                  
 20345                                  	; 11/12/2022
 20346                                  	; ds = cs
 20347 00000F99 50                      	push	ax			; set devmark for mem command
 20348 00000F9A A1[E003]                	mov	ax,[memhi]
 20349 00000F9D 2B06[E403]              	sub	ax,[area]
 20350 00000FA1 A3[DC03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 20351                                  	;mov	al,devmark_inst ; 'T'
 20352 00000FA4 B054                    	mov	al,'T'
 20353 00000FA6 E86804                  	call	setdevmark
 20354 00000FA9 58                      	pop	ax
 20355                                  
 20356 00000FAA 8B3E[E003]              	mov	di,[memhi]
 20357 00000FAE 8EC7                    	mov	es,di
 20358 00000FB0 893E[5003]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 20359 00000FB4 31FF                    	xor	di,di
 20360 00000FB6 893E[4E03]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 20361 00000FBA BE[CC10]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 20362 00000FBD B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 20363                                  	; 24/10/2022 
 20364                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 20365 00000FC0 010E[DE03]              	add	[memlo],cx
 20366                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 20367                                  	; 11/12/2022
 20368                                  	; ds = cs
 20369                                  	;or	byte [cs:setdevmarkflag],2
 20370 00000FC4 800E[3414]02            	or	byte [setdevmarkflag],2
 20371                                  	;or	byte [setdevmarkflag],for_devmark
 20372 00000FC9 E8BC20                  	call	round			; check mem error. also,readjust memhi for the next use.
 20373 00000FCC F3A4                    	rep	movsb			; reallocate it.
 20374                                  
 20375 00000FCE C706[5203][A510]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 20376 00000FD4 8C0E[5403]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 20377                                  	;or	word [install_flag],has_installed ; set the flag.
 20378                                  	;or	byte [install_flag],has_installed ; 2
 20379                                  	; 11/12/2022
 20380 00000FD8 800E[4A03]02            	or	byte [install_flag],2
 20381                                  	; 24/10/2022
 20382                                  	;or	word [install_flag],2	
 20383                                  
 20384                                  ; ----------------------------------------------------------------------
 20385                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 20386                                  ; the top of the memory will be allocated for sysinit and config.sys if
 20387                                  ; have_install_cmd.
 20388                                  ; ----------------------------------------------------------------------
 20389                                  
 20390 00000FDD E8A820                  	call	round
 20391 00000FE0 8B1E[E003]              	mov	bx,[memhi]
 20392 00000FE4 A1[E403]                	mov	ax,[area]
 20393 00000FE7 A3[DA03]                	mov	[old_area],ax		; save [area]
 20394 00000FEA 8EC0                    	mov	es,ax			;calc what we needed
 20395 00000FEC 29C3                    	sub	bx,ax
 20396                                  	; 24/10/2022
 20397 00000FEE B44A                    	mov	ah,4Ah ; SETBLOCK
 20398 00000FF0 CD21                    	int	21h			;give the rest back
 20399                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20400                                  		; ES = segment address of block to change
 20401                                  		; BX = new size in paragraphs
 20402 00000FF2 06                      	push	es
 20403 00000FF3 8CC0                    	mov	ax,es
 20404 00000FF5 48                      	dec	ax
 20405 00000FF6 8EC0                    	mov	es,ax			;point to arena
 20406                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 20407                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 20408                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 20409                                  	; 24/10/2022
 20410 00000FF8 26C70601000800          	mov	word [es:1],8		;set impossible owner
 20411 00000FFF 26C70608005344          	mov	word [es:8],'SD'	; System Data
 20412 00001006 07                      	pop	es
 20413                                  
 20414 00001007 BBFFFF                  	mov	bx,0FFFFh
 20415 0000100A B448                    	mov	ah,48h ; ALLOC
 20416 0000100C CD21                    	int	21h
 20417 0000100E B448                    	mov	ah,48h ; ALLOC
 20418 00001010 CD21                    	int	21h			; allocate the rest of the memory
 20419                                  		; DOS - 2+ - ALLOCATE MEMORY
 20420                                  		; BX = number of 16-byte paragraphs desired
 20421 00001012 A3[E003]                	mov	[memhi],ax		; start of the allocated memory
 20422 00001015 C706[DE03]0000          	mov	word [memlo],0		;  to be used next.
 20423                                  
 20424                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 20425                                  ;;;; allocated.
 20426                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 20427                                  ;;;; this time) to the top-of-the memory),here we are going to
 20428                                  ;;;; 1). "setblock" from memhi to confbot.
 20429                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 20430                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 20431                                  
 20432                                  ;memory allocation for sysinit,confbot module.
 20433                                  
 20434 0000101B 8EC0                    	mov	es,ax
 20435                                  	;mov	bx,[CONFBOT]
 20436                                  	; 24/10/2022
 20437 0000101D 8B1E[A102]              	mov	bx,[top_of_cdss]
 20438 00001021 29C3                    	sub	bx,ax			; confbot - memhi
 20439 00001023 4B                      	dec	bx			; make a room for the memory block id.
 20440 00001024 4B                      	dec	bx			; make sure!!!.
 20441 00001025 B44A                    	mov	ah,4Ah ; SETBLOCK
 20442 00001027 CD21                    	int	21h			; this will free (confbot to top of memory)
 20443                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20444                                  		; ES = segment address of block to change
 20445                                  		; BX = new size in paragraphs
 20446 00001029 BBFFFF                  	mov	bx,0FFFFh
 20447 0000102C B448                    	mov	ah,48h ; ALLOC
 20448 0000102E CD21                    	int	21h
 20449 00001030 B448                    	mov	ah,48h ; ALLOC
 20450 00001032 CD21                    	int	21h			; allocate (confbot to top of memory)
 20451                                  		; DOS - 2+ - ALLOCATE MEMORY
 20452                                  		; BX = number of 16-byte paragraphs desired
 20453 00001034 A3[E403]                	mov	[area],ax		; save allocated memory segment.
 20454                                  					; need this to free this area for command.com.
 20455 00001037 8E06[E003]              	mov	es,[memhi]
 20456 0000103B B449                    	mov	ah,49h			; free allocated memory.
 20457 0000103D CD21                    	int	21h			; free (memhi to confbot(=area))
 20458                                  		; DOS - 2+ - FREE MEMORY
 20459                                  		; ES = segment address of area to be freed
 20460                                  endfile_ret:
 20461 0000103F C3                      	retn
 20462                                  
 20463                                  ; End of "EndFile" DOS structure configuration.
 20464                                  
 20465                                  ; ----------------------------------------------------------------------
 20466                                  ; 26/03/2019 - Retro DOS v4.0
 20467                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 20468                                  ; ----------------------------------------------------------------------
 20469                                  ; Do_Install_Exec
 20470                                  ;
 20471                                  ; This procedure is used to EXEC a program being loaded via the 
 20472                                  ; "install=" mechanism in config.sys. It does this by setting up
 20473                                  ; the parameters, and then jumping to sysinit_base, which has been
 20474                                  ; setup in low memory. When complete, sysinit_base will jump back
 20475                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 20476                                  ; program).
 20477                                  
 20478                                  ;SYSINIT:10CFh:
 20479                                  
 20480                                  do_install_exec:			; now,handles install= command.
 20481                                  
 20482 00001040 56                      	push	si			; save si for config.sys again.
 20483                                  
 20484                                  ; we are going to call load/exec function.
 20485                                  ; set es:bx to the parameter block here;;;;;;;
 20486                                  ; set ds:dx to the asciiz string. remember that we already has 0
 20487                                  ; after the filename. so parameter starts after that. if next
 20488                                  ; character is a line feed (i.e. 10),then assume that the 0
 20489                                  ; we already encountered used to be a carrage return. in this
 20490                                  ; case,let's set the length to 0 which will be followed by
 20491                                  ; carridge return.
 20492                                  
 20493                                  ; es:si -> command line in config.sys. points to the first non blank
 20494                                  ;character after =.
 20495                                  
 20496 00001041 06                      	push	es
 20497 00001042 1E                      	push	ds
 20498 00001043 07                      	pop	es
 20499 00001044 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 20500 00001045 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 20501                                  
 20502 00001047 31C9                    	xor	cx,cx
 20503 00001049 FC                      	cld
 20504 0000104A 2EC606[6D03]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 20505 00001050 BF[6E03]                	mov	di,ldexec_parm
 20506                                  installfilename:			; skip the file name
 20507 00001053 AC                      	lodsb				; al = ds:si; si++
 20508 00001054 3C00                    	cmp	al,0
 20509 00001056 7402                    	je	short got_installparm
 20510 00001058 EBF9                    	jmp	short installfilename
 20511                                  got_installparm:			; copy the parameters to ldexec_parm
 20512 0000105A AC                      	lodsb
 20513 0000105B 268805                  	mov	[es:di],al
 20514 0000105E 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 20515 00001060 7405                    	je	short done_installparm
 20516 00001062 FEC1                    	inc	cl			; # of char. in the parm.
 20517 00001064 47                      	inc	di
 20518 00001065 EBF3                    	jmp	short got_installparm
 20519                                  done_installparm:
 20520 00001067 2E880E[6C03]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 20521 0000106C 80F900                  	cmp	cl,0			; if no parm,then
 20522 0000106F 7506                    	jne	short install_seg_set 	; let the parm area
 20523 00001071 2EC606[6D03]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 20524                                  					; starts with cr.
 20525                                  install_seg_set:
 20526 00001077 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 20527 0000107E 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 20528                                  
 20529                                  ;---------------------------------------------------M067----------------
 20530                                  ;
 20531                                  ; 	the environment pointer is made 0. so the current environment ptr.
 20532                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 20533                                  ;
 20534                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 20535                                  ;
 20536                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 20537                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 20538                                  ; 	was fixed. 
 20539                                  ;
 20540                                  ; ----------------------------------------------------------------------
 20541                                  
 20542                                  ;;ifdef   MULTI_CONFIG
 20543                                  
 20544                                  ; If there's any environment data in "config_wrkseg", pass to app
 20545                                  
 20546                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20547                                          ;mov     cx,ax
 20548                                          ;cmp     word [cs:config_envlen],0
 20549                                          ;je      short no_envdata2
 20550                                          ;mov     cx,[cs:config_wrkseg]
 20551                                  ;no_envdata2:
 20552                                  ;;endif  ;MULTI_CONFIG
 20553                                  
 20554                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 20555                                  	; 24/10/2022
 20556                                  	;mov	[cs:iexec.environ],cx
 20557                                  	; 02/11/2022
 20558 00001080 2EA3[BE03]              	mov	[cs:iexec.environ],ax	
 20559                                  
 20560                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 20561 00001084 2EA3[C203]              	mov	[cs:iexec.ldexec_line+2],ax
 20562                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 20563 00001088 2EA3[C603]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 20564                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 20565 0000108C 2EA3[CA03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 20566 00001090 E86E00                  	call	sum_up
 20567 00001093 26A3[5603]              	mov	[es:checksum],ax	; save the value of the sum
 20568 00001097 31C0                    	xor	ax,ax
 20569 00001099 B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 20570 0000109B BB[BE03]                	mov	bx,instexe		; es:bx -> parm block.
 20571 0000109E 06                      	push	es			; save es,ds for load/exec
 20572 0000109F 1E                      	push	ds			; these registers will be restored in sysinit_base.
 20573 000010A0 2EFF2E[4E03]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 20574                                  					; load/exec function and check sum.
 20575                                  
 20576                                  ;----------------------------------------
 20577                                  
 20578                                  ;j.k. this is the returning address from sysinit_base.
 20579                                  
 20580                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20581                                  
 20582                                  sysinitptr:				; returning far address from sysinit_base
 20583 000010A5 5E                      	pop	si			; restore si for config.sys file.
 20584 000010A6 06                      	push	es
 20585 000010A7 1E                      	push	ds
 20586 000010A8 07                      	pop	es
 20587 000010A9 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 20588 000010AA 7306                            jnc     short install_exit_ret
 20589                                  
 20590 000010AC 56                      	push	si			; error in loading the file for install=.
 20591 000010AD E86F22                  	call	badload 		; es:si-> path,filename,0.
 20592 000010B0 5E                      	pop	si
 20593                                  
 20594                                  	; 24/10/2022
 20595                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 20596                                  	; 11/12/2022
 20597                                  	; ds = cs
 20598 000010B1 C3                      	retn
 20599                                  
 20600                                  install_exit_ret:
 20601                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 20602                                  
 20603                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 20604                                  ;SYSINIT:1142h:
 20605 000010B2 B44D                    	mov     ah,4Dh
 20606 000010B4 CD21                    	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 20607 000010B6 80FC03                  	cmp     ah,3
 20608 000010B9 7404                    	jz      short sysinitptr_retn
 20609 000010BB E85816                  	call    error_line
 20610 000010BE F9                      	stc
 20611                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 20612 000010BF C3                      	retn		
 20613                                  
 20614                                  ; ----------------------------------------------------------------------
 20615                                  
 20616                                  ;**	ParaRound - Round Up length to paragraph multiple
 20617                                  ;
 20618                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 20619                                  ;	by 16 yielding a "length in paragraphs" value.
 20620                                  ;
 20621                                  ;	ENTRY	(ax) = byte length
 20622                                  ;	EXIT	(ax) = rounded up length in paragraphs
 20623                                  ;	USES	ax, flags
 20624                                  
 20625                                  ParaRound:
 20626 000010C0 83C00F                  	add	ax,15
 20627 000010C3 D1D8                    	rcr	ax,1
 20628 000010C5 D1E8                    	shr	ax,1
 20629 000010C7 D1E8                    	shr	ax,1
 20630 000010C9 D1E8                    	shr	ax,1
 20631 000010CB C3                      	retn
 20632                                  
 20633                                  ; ----------------------------------------------------------------------
 20634                                  ; sysinit_base module.
 20635                                  ;
 20636                                  ; This module is relocated by the routine EndFile to a location in low
 20637                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 20638                                  ; that are being loaded by the "install=" command. After the EXEC call
 20639                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 20640                                  ; top of memory) to be sure that the EXECed program did not damage it.
 20641                                  ; If it did, then this module will print an error message and stop the
 20642                                  ; system. Otherwise, it returns control to SYSINIT.
 20643                                  ;
 20644                                  ;in: after relocation,
 20645                                  ;    ax = 4b00h - load and execute the program dos function.
 20646                                  ;    ds = confbot. segment of config.sys file image
 20647                                  ;    es = sysinitseg. segment of sysinit module itself.
 20648                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 20649                                  ;    es:bx = pointer to a parameter block for load.
 20650                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 20651                                  ;    bigsize (word) - # of word from confbot to SI_end.
 20652                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 20653                                  ;			word boundary moduler form.
 20654                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 20655                                  ;
 20656                                  ;note: sysinit should save necessary registers and when the control is back
 20657                                  
 20658                                  	; 24/10/2022
 20659                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 20660                                  sysinit_base:				
 20661 000010CC 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 20662 000010D1 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 20663 000010D6 CD21                    	int	21h			; load/exec dos call.
 20664 000010D8 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 20665 000010DD 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 20666 000010E2 1F                      	pop	ds			; restore confbot seg
 20667 000010E3 07                      	pop	es			; restore sysinitseg
 20668 000010E4 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 20669                                  					; at this time,i don't have to worry about
 20670                                  					; that sysinit module has been broken or not.
 20671 000010E6 E81800                  	call	sum_up			; otherwise,check if it is good.
 20672 000010E9 263906[5603]            	cmp	[es:checksum],ax
 20673 000010EE 740C                    	je	short sysinit_base_end
 20674                                  
 20675                                  ;	memory broken. show "memory allocation error" message and stall.
 20676                                  
 20677 000010F0 B409                    	mov	ah,9
 20678 000010F2 0E                      	push	cs
 20679 000010F3 1F                      	pop	ds
 20680 000010F4 BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 20681 000010F7 CD21                    	int	21h
 20682                                  		; DOS - PRINT STRING
 20683                                  		; DS:DX -> string terminated by "$"
 20684                                  	; 24/10/2022
 20685                                  _stall: 
 20686                                  	; 11/12/2022
 20687 000010F9 F4                      	hlt 
 20688                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20689                                  	;hlt				;use HLT to minimize energy consumption
 20690 000010FA EBFD                            jmp	short _stall
 20691                                  
 20692                                  sysinit_base_end: 
 20693 000010FC 26FF2E[5203]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 20694                                  
 20695                                  ;-------------------------------------
 20696                                  
 20697                                  sum_up:
 20698                                  
 20699                                  ;in:   es - sysinitseg.
 20700                                  ;out:  ax - result
 20701                                  ;
 20702                                  ;remark: since this routine will only check starting from "locstack" to the end of
 20703                                  ;	 sysinit segment,the data area, and the current stack area are not
 20704                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 20705                                  ;	 gaurantee to be safe.
 20706                                  ;
 20707                                  ;first sum up confbot seg.
 20708                                  
 20709 00001101 1E                      	push	ds
 20710                                  	;mov	ax,[es:CONFBOT]
 20711                                  	; 24/10/2022
 20712 00001102 26A1[A102]              	mov	ax,[es:top_of_cdss]
 20713 00001106 8ED8                    	mov	ds,ax
 20714 00001108 31F6                    	xor	si,si
 20715 0000110A 31C0                    	xor	ax,ax
 20716 0000110C 268B0E[4C03]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 20717                                  					;whole test better fail.
 20718 00001111 D1E9                    	shr	cx,1			; make it a word count
 20719 00001113 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 20720                                  sum1:
 20721 00001115 0304                    	add	ax,[si]
 20722 00001117 46                      	inc	si
 20723 00001118 46                      	inc	si
 20724 00001119 E2FA                    	loop	sum1
 20725                                  ;now,sum up sysinit module.
 20726                                  sum_sys_code:
 20727                                  	; 24/10/2022
 20728 0000111B BE1A11                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 20729                                  				        ; starting after the stack.  M069
 20730                                  					;  this does not cover the possible stack code!!!
 20731                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 20732                                  	; 02/11/2022
 20733                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 20734                                  	; 30/12/2022 (BugFix)
 20735                                  	; (SI_End is 39D0h for this -Retro DOS v4.0- IO.SYS)
 20736 0000111E B9[B038]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 20737 00001121 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 20738 00001123 D1E9                    	shr	cx,1
 20739                                  sum2:
 20740 00001125 260304                  	add	ax,[es:si]
 20741 00001128 46                      	inc	si
 20742 00001129 46                      	inc	si
 20743 0000112A E2F9                    	loop	sum2
 20744 0000112C 1F                      	pop	ds
 20745 0000112D C3                      	retn
 20746                                  
 20747                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20748                                  
 20749                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 20750                                  ;SYSINIT:11BDh:
 20751 0000112E 0000                    	dw	0
 20752                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 20753                                  ;SYSINIT:11BFh:
 20754 00001130 0000                    	dw	0
 20755                                  
 20756                                  mem_alloc_err_msgx:
 20757                                  
 20758                                         ;include msbio.cl4		; memory allocation error message
 20759                                  
 20760                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 20761 00001132 0D0A                    	db	0Dh,0Ah
 20762 00001134 4D656D6F727920616C-     	db 	'Memory allocation error $'
 20762 0000113D 6C6F636174696F6E20-
 20762 00001146 6572726F722024     
 20763                                  
 20764                                  end_sysinit_base: ; label byte
 20765                                  	; 24/10/2022
 20766                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 20767                                  
 20768                                  ; ----------------------------------------------------------------------
 20769                                  ; Set_Buffer
 20770                                  ;
 20771                                  ;function: set buffers in the real memory.				  
 20772                                  ;	   lastly set the memhi,memlo for the next available free address.
 20773                                  ;
 20774                                  ;input:    ds:bx -> buffinfo.
 20775                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 20776                                  ;	   singlebuffersize = buffer header size + sector size		  
 20777                                  ;
 20778                                  ;output:   buffers Queue established.	       				   
 20779                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 20780                                  ; ----------------------------------------------------------------------
 20781                                  
 20782                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20783                                  	; (SYSINIT:11DCh)
 20784                                  
 20785                                  set_buffer:
 20786 0000114D 30D2                    	xor	dl,dl				; assume buffers not in HMA
 20787 0000114F E85500                  	call	GetBufferAddr
 20788 00001152 7402                    	jz	short set_buff_1
 20789 00001154 B201                    	mov	dl,1				; buffers in HMA
 20790                                  set_buff_1:
 20791                                  	; 25/10/2022
 20792                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 20793 00001156 893F                    	mov	[bx],di
 20794                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 20795 00001158 8C4702                  	mov	[bx+2],es
 20796                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 20797 0000115B C747040000              	mov	word [bx+4],0
 20798                                  
 20799 00001160 89F8                    	mov	ax,di
 20800 00001162 2E8B0E[9702]            	mov	cx,[cs:buffers]
 20801 00001167 57                      	push	di				; remember first buffer
 20802                                  
 20803                                  ;	for each buffer
 20804                                  
 20805                                  nxt_buff:
 20806 00001168 E86300                  	call	set_buffer_info 		; set buf_link,buf_id...
 20807 0000116B 89C7                    	mov	di,ax
 20808 0000116D E2F9                    	loop	nxt_buff
 20809                                  
 20810 0000116F 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 20811                                  
 20812 00001174 59                      	pop	cx				; get first buffer
 20813                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 20814 00001175 26890D                  	mov	[es:di],cx
 20815 00001178 87CF                    	xchg	cx,di
 20816                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 20817                                  	; 25/10/2022
 20818 0000117A 26894D02                	mov	[es:di+2],cx
 20819                                  
 20820 0000117E 08D2                    	or	dl,dl				; In HMa ?
 20821 00001180 7417                    	jz	short set_buff_2		; no
 20822                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 20823 00001182 C6470C01                	mov	byte [bx+12],1
 20824 00001186 2EA1[E003]              	mov	ax,[cs:memhi]			; seg of scratch buff
 20825                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 20826 0000118A C7470D0000              	mov	word [bx+13],0
 20827                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 20828 0000118F 89470F                  	mov	word [bx+15],ax
 20829 00001192 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 20830                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 20831 00001196 83E814                  	sub	ax,20
 20832                                  set_buff_2:
 20833 00001199 2E0106[DE03]            	add	[cs:memlo],ax
 20834                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20835 0000119E 2E800E[3414]02          	or	byte [cs:setdevmarkflag],2
 20836                                  	;call	round
 20837                                  	;retn
 20838                                  	; 12/12/2022
 20839 000011A4 E9E11E                  	jmp	round
 20840                                  
 20841                                  ; ----------------------------------------------------------------------
 20842                                  ; procedure : GetBufferAddr
 20843                                  ;
 20844                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 20845                                  ;
 20846                                  ; returns in es:di the buffer adress
 20847                                  ; returns NZ if allocated in HMA
 20848                                  ; ----------------------------------------------------------------------
 20849                                  
 20850                                  	; 25/10/2022 
 20851                                  GetBufferAddr:
 20852 000011A7 53                      	push	bx
 20853 000011A8 52                      	push	dx
 20854 000011A9 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 20855 000011AD 2EF726[9702]            	mul	word [cs:buffers]
 20856                                  	;add	ax,0Fh
 20857 000011B2 83C00F                  	add	ax,15 
 20858                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20859                                  	;and	ax,~15	; 0FFF0h	; para round
 20860                                  	; 12/12/2022
 20861 000011B5 24F0                    	and	al,~15	; 0F0h
 20862 000011B7 89C3                    	mov	bx,ax
 20863 000011B9 B8024A                  	mov	ax,4A02h
 20864                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 20865 000011BC CD2F                    	int	2Fh
 20866 000011BE 83FFFF                  	cmp	di,0FFFFh
 20867 000011C1 7508                    	jne	short got_hma
 20868 000011C3 BF0000                  	mov	di,0			; dont xor di,di Z flag needed
 20869                                  	;zf=1
 20870                                  	;xor	di,di	; 25/10/2022
 20871                                  	;zf=1
 20872 000011C6 2E8E06[E003]            	mov	es,[cs:memhi]
 20873                                  got_hma:
 20874 000011CB 5A                      	pop	dx
 20875 000011CC 5B                      	pop	bx
 20876 000011CD C3                      	retn
 20877                                  
 20878                                  ; ----------------------------------------------------------------------
 20879                                  
 20880                                  set_buffer_info:
 20881                                  
 20882                                  ;function: set buf_link,buf_id,buf_sector
 20883                                  ;
 20884                                  ;in: es:di -> buffer header to be set.
 20885                                  ;    ax = di
 20886                                  ;
 20887                                  ;out:
 20888                                  ;    above entries set.
 20889                                  
 20890                                  	; 25/10/2022 
 20891 000011CE 2EFF36[3903]            	push	word [cs:buf_prev_off]
 20892                                  	;pop	word [es:di+buffinfo.buf_prev]
 20893 000011D3 268F4502                	pop	word [es:di+2]
 20894 000011D7 2EA3[3903]              	mov	[cs:buf_prev_off],ax
 20895 000011DB 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 20896                                  	;mov	[es:di+buffinfo.buf_next],ax
 20897 000011E0 268905                  	mov	[es:di],ax
 20898                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 20899 000011E3 26C74504FF00            	mov	word [es:di+4],00FFh
 20900                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 20901 000011E9 26C745060000            	mov	word [es:di+6],0
 20902                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 20903 000011EF 26C745080000            	mov	word [es:di+8],0
 20904 000011F5 C3                      	retn
 20905                                  
 20906                                  ; ======================================================================
 20907                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 20908                                  ; ----------------------------------------------------------------------
 20909                                  ; 27/03/2019 - Retro DOS v4.0
 20910                                  
 20911                                  ; ----------------------------------------------------------------------
 20912                                  ; ibmstack initialization routine.
 20913                                  ;
 20914                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 20915                                  ;	has been modified. this initialization routine also has to
 20916                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 20917                                  ;	should be set to signal that this interrupt handler is the
 20918                                  ;	first handler hooked to this interrupt vector.
 20919                                  ;	we determine this by looking at the instruction pointed by
 20920                                  ;	this vector. if it is iret, then this handler should be the
 20921                                  ;	first one. in our case, only the interrupt vector 77h is the
 20922                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 20923                                  ;
 20924                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 20925                                  ;	some design changes are needed to the above interrupt sharing
 20926                                  ;	method. the above sharing scheme assumes that 1). interrupt
 20927                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 20928                                  ;	interrupts would only be generated on levels 7 and 15.
 20929                                  ;	these assumptions are not true any more. we have to use the firstflag
 20930                                  ;	for every level of interrupt. we will set the firstflag on the following
 20931                                  ;	conditions:
 20932                                  ;
 20933                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 20934                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 20935                                  ;	 c. else if cs:ip points to an iret, then "first"
 20936                                  ;	 d. else if cs:ip points to dummy, then "first"
 20937                                  ;
 20938                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 20939                                  ;	be equal to the value at f000:ff01. this location is the initial value
 20940                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 20941                                  ;	the bioses for all of the machines.
 20942                                  ;
 20943                                  ;	system design group requests bios to handle the phantom interrupts.
 20944                                  ;
 20945                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 20946                                  ;	produced by the bogus adapter card even without interrupt request is
 20947                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 20948                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 20949                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 20950                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 20951                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 20952                                  ;	interrupt line.
 20953                                  ;
 20954                                  ;	to handle those "phantom" interrupts, the main stack code will check
 20955                                  ;	the own firstflag, and if it is not "first" (which means the forward
 20956                                  ;	pointer points to the legal shared interrupt handler), then pass the
 20957                                  ;	control. if it is the first, then the following action should be
 20958                                  ;	taken. we don't have to implement skack logic in this case.
 20959                                  ;
 20960                                  ;	to implement this logic, we rather choose a simple method.
 20961                                  ;	if ont of the above "firstflag" conditions is met, we are not
 20962                                  ;	going to hook this interrupt vector. the reason is if the original
 20963                                  ;	vector points to "iret" and do nothing, we don't need
 20964                                  ;	to implement the stack logic for it. this will simplify implementation
 20965                                  ;	while maintaining compatibility with the old version of dos.
 20966                                  ;	this implies that in the main stack code, there might be a stack code
 20967                                  ;	that will never be used, a dead code.
 20968                                  ;
 20969                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 20970                                  
 20971                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20972                                  	; (SYSINIT:1287h)
 20973                                  
 20974                                  	; 14/12/2022
 20975                                  stackinit:
 20976 000011F6 50                      	push	ax
 20977 000011F7 1E                      	push	ds
 20978 000011F8 06                      	push	es
 20979 000011F9 53                      	push	bx
 20980 000011FA 51                      	push	cx
 20981 000011FB 52                      	push	dx
 20982 000011FC 57                      	push	di
 20983 000011FD 56                      	push	si
 20984 000011FE 55                      	push	bp
 20985                                  
 20986                                  ;currently es -> stack code area
 20987                                  
 20988                                  	; 12/12/2022
 20989                                  	; ds = cs
 20990 000011FF A1[8A02]                	mov	ax,[stack_count]
 20991 00001202 89C1                    	mov	cx,ax  ; *!*!*  
 20992                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20993                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 20994                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 20995 00001204 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 20996                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 20997 00001208 A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 20998 0000120B 26A3[0600]              	mov	[es:stacksize],ax
 20999                                  	; 12/12/2022
 21000 0000120F A1[8E02]                	mov	ax,[stack_addr]			; offset
 21001                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21002                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21003                                  	;mov	ax,[cs:stack_addr]  ; !!
 21004 00001212 26A3[0800]              	mov	[es:stacks],ax
 21005                                  	; 12/12/2022
 21006 00001216 89C5                    	mov	bp,ax ; *!*
 21007 00001218 A1[9002]                	mov	ax,[stack_addr+2]
 21008                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21009                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21010                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 21011 0000121B 26A3[0A00]              	mov	[es:stacks+2],ax
 21012                                  
 21013                                  ; initialize the data fields with the parameters
 21014                                  
 21015                                  ; "firstentry" will always be at stacks
 21016                                  
 21017                                  	;mov	bp,[es:stacks]			; get offset of stack
 21018                                  	; 12/12/2022
 21019                                  	; bp = [es:stacks] ; *!*
 21020 0000121F 26892E[0C00]            	mov	[es:firstentry],bp
 21021                                  
 21022                                  ; the stacks will always immediately follow the table entries
 21023                                  
 21024 00001224 B80800                  	mov	ax,entrysize ; 8
 21025                                  	;mov	cx,[es:stackcount]
 21026                                  	; 12/12/2022
 21027                                  	; cx = [es:stackcount] ; *!*!*
 21028 00001227 F7E1                    	mul	cx
 21029 00001229 01E8                    	add	ax,bp
 21030 0000122B 26A3[0400]              	mov	[es:stackat],ax
 21031 0000122F 89C3                    	mov	bx,ax
 21032 00001231 83EB02                  	sub	bx,2
 21033                                  
 21034                                  ; zero the entire stack area to start with
 21035                                  
 21036 00001234 268B3E[0400]            	mov	di,[es:stackat]
 21037 00001239 26A1[0600]              	mov	ax,[es:stacksize]
 21038 0000123D F7E1                    	mul	cx
 21039 0000123F 89C1                    	mov	cx,ax
 21040 00001241 31C0                    	xor	ax,ax
 21041 00001243 06                      	push	es
 21042 00001244 1F                      	pop	ds				;ds = relocated stack code seg.
 21043                                  
 21044                                  ;now, ds -> stack code area
 21045                                  
 21046 00001245 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 21047 00001249 FC                      	cld
 21048 0000124A F3AA                    	rep	stosb
 21049                                  
 21050 0000124C 8B0E[0200]              	mov	cx,[stackcount]
 21051                                  
 21052                                  ; loop for "count" times, building a table entry
 21053                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 21054                                  ;  cx = number of entries
 21055                                  ;  es:bp => base of stacks - 2
 21056                                  ;  es:bx => first table entry
 21057                                  
 21058                                  buildloop:
 21059                                  	; 11/12/2022
 21060                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 21061                                  	; 25/10/2022
 21062                                  	;mov	byte [es:bp],free
 21063                                  	; 14/08/2023
 21064 00001250 26884600                	mov	[es:bp],al ; 0 ; free
 21065 00001254 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 21066                                  	;mov	[es:bp+1],al
 21067 00001258 26894602                	mov	[es:bp+savedsp],ax
 21068                                  	;mov	[es:bp2],ax
 21069 0000125C 26894604                	mov	[es:bp+savedss],ax
 21070                                  	;mov	[es:bp+4],ax
 21071 00001260 031E[0600]              	add	bx,[stacksize]
 21072 00001264 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 21073                                  	;mov	[es:bp+6],bx
 21074 00001268 26892F                  	mov	[es:bx],bp
 21075 0000126B 83C508                  	add	bp,entrysize ; 8
 21076                                  
 21077 0000126E E2E0                    	loop	buildloop
 21078                                  
 21079 00001270 83ED08                  	sub	bp,entrysize ; 8
 21080 00001273 892E[0E00]              	mov	[lastentry],bp
 21081 00001277 892E[1000]              	mov	[nextentry],bp
 21082                                  
 21083 0000127B 1E                      	push	ds
 21084 0000127C B800F0                  	mov	ax,0F000h		;look at the model byte
 21085 0000127F 8ED8                    	mov	ds,ax
 21086 00001281 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
 21087 00001286 1F                      	pop	ds
 21088 00001287 7504                    	jne	short skip_disablenmis
 21089                                  
 21090 00001289 B007                    	mov	al,07h			; disable convertible nmis
 21091 0000128B E672                    	out	72h,al
 21092                                  
 21093                                  skip_disablenmis:
 21094 0000128D 31C0                    	xor	ax,ax
 21095 0000128F 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 21096                                  					;ds - relocated stack code segment
 21097 00001291 FA                      	cli
 21098                                  
 21099                                  	;irp	aa,<02,08,09,70>
 21100                                  	;
 21101                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21102                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 21103                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 21104                                  	;mov	dx,offset int&aa	;pass where new handler is
 21105                                  	;call	new_init_loop		;adjust the vector to new handler,
 21106                                  	;				;saving pointer to original owner
 21107                                  	;endm
 21108                                  
 21109                                  stkinit_02:
 21110 00001292 BE0800                  	mov	si,02h*4 ; 8
 21111 00001295 BF[4206]                	mov	di,INT19OLD02
 21112 00001298 BB[1200]                	mov	bx,old02
 21113 0000129B BA[1600]                	mov	dx,int02
 21114 0000129E E84901                  	call	new_init_loop
 21115                                  stkinit_08:
 21116 000012A1 BE2000                  	mov	si,08h*4 ; 32
 21117 000012A4 BF[4706]                	mov	di,INT19OLD08
 21118 000012A7 BB[3800]                	mov	bx,old08
 21119 000012AA BA[3C00]                	mov	dx,int08
 21120 000012AD E83A01                  	call	new_init_loop
 21121                                  stkinit_09:
 21122 000012B0 BE2400                  	mov	si,09h*4 ; 36
 21123 000012B3 BF[4C06]                	mov	di,INT19OLD09
 21124 000012B6 BB[4100]                	mov	bx,old09
 21125 000012B9 BA[4500]                	mov	dx,int09
 21126 000012BC E82B01                  	call	new_init_loop
 21127                                  stkinit_70:
 21128 000012BF BEC001                  	mov	si,70h*4 ; 448
 21129 000012C2 BF[6A06]                	mov	di,INT19OLD70
 21130 000012C5 BB[4E00]                	mov	bx,old70
 21131 000012C8 BA[5200]                	mov	dx,int70
 21132 000012CB E81C01                  	call	new_init_loop
 21133                                  
 21134                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 21135                                  	;
 21136                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21137                                  	;push	ds			;save relocated stack code segment
 21138                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 21139                                  	;push	ds
 21140                                  	;pop	dx			;dx = segment value
 21141                                  	;	
 21142                                  	;cmp	dx,0
 21143                                  	;jz	int&aa&_first
 21144                                  	;
 21145                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 21146                                  	;jz	int&aa&_first
 21147                                  	;
 21148                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 21149                                  	;jz	int&aa&_not_first
 21150                                  	;
 21151                                  	;cmp	dx,0f000h		;rom bios segment
 21152                                  	;jnz	int&aa&_not_first
 21153                                  	;
 21154                                  	;push	es
 21155                                  	;push	dx
 21156                                  	;mov	dx,0f000h
 21157                                  	;mov	es,dx
 21158                                  	;cmp	bx,word ptr es:0ff01h
 21159                                         	;pop	dx
 21160                                  	;pop	es
 21161                                  	;jz	int&aa&_first
 21162                                  	;
 21163                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 21164                                  	;pop	ds
 21165                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 21166                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 21167                                  	;mov	dx, offset int&aa	;pass where new handler is
 21168                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 21169                                  	;				;pointer to original owner.
 21170                                  	;jmp	short int&aa&_end
 21171                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 21172                                  	;pop	ds
 21173                                  ;int&aa&_end:
 21174                                  	;
 21175                                  	;endm
 21176                                  
 21177                                  stkinit_0A:
 21178 000012CE BE2800                  	mov	si,0Ah*4 ; 40
 21179                                  	
 21180                                  ; 14/12/2022
 21181                                  %if 0	
 21182                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21183                                  	push	ds
 21184                                  	
 21185                                  	lds	bx,[es:si]
 21186                                  	push	ds
 21187                                  	pop	dx
 21188                                  		
 21189                                  	cmp	dx,0
 21190                                  	je	short int_0A_first
 21191                                  	
 21192                                  	cmp	byte [bx],0CFh
 21193                                  	je	short int_0A_first
 21194                                  	
 21195                                  	cmp	word [bx+6],424Bh
 21196                                  	je	short int_0A_not_first
 21197                                  	
 21198                                  	cmp	dx,0F000h
 21199                                  	jne	short int_0A_not_first
 21200                                  	
 21201                                  	push	es
 21202                                  	push	dx
 21203                                  	mov	dx,0F000h
 21204                                  	mov	es,dx
 21205                                  	cmp	bx,[es:0FF01h]
 21206                                         	pop	dx
 21207                                  	pop	es
 21208                                  	je	short int_0A_first
 21209                                  %Endif
 21210                                  
 21211                                  	; 14/12/2022
 21212                                  	; 25/10/2022
 21213 000012D1 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21214 000012D4 730C                    	jnc	short int_0A_first
 21215                                  	
 21216                                  int_0A_not_first:
 21217                                  	; 14/12/2022
 21218                                  	; 25/10/2022
 21219                                  	;pop	ds
 21220 000012D6 BF[5106]                	mov	di,INT19OLD0A
 21221 000012D9 BB[5900]                	mov	bx,old0A
 21222 000012DC BA[5700]                	mov	dx,int0A
 21223 000012DF E80801                  	call	new_init_loop
 21224                                  	
 21225                                  	; 14/12/2022	
 21226                                  	;jmp	short int_0A_end
 21227                                  ;int_0A_first:
 21228                                  	; 25/10/2022
 21229                                  	;pop	ds
 21230                                  
 21231                                  	; 14/12/2022
 21232                                  int_0A_first:
 21233                                  int_0A_end:
 21234                                  
 21235                                  stkinit_0B:
 21236 000012E2 BE2C00                  	mov	si,0Bh*4 ; 44
 21237                                  	
 21238                                  	; 14/12/2022
 21239                                  	; 25/10/2022
 21240 000012E5 E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21241 000012E8 730C                    	jnc	short int_0B_end ; int_0B_first
 21242                                  
 21243                                  ; 14/12/2022
 21244                                  %if 0	
 21245                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21246                                  	push	ds
 21247                                  	lds	bx,[es:si]
 21248                                  	push	ds
 21249                                  	pop	dx
 21250                                  		
 21251                                  	cmp	dx,0
 21252                                  	je	short int_0B_first
 21253                                  
 21254                                  	cmp	byte [bx],0CFh
 21255                                  	je	short int_0B_first
 21256                                  	
 21257                                  	cmp	word [bx+6],424Bh
 21258                                  	je	short int_0B_not_first
 21259                                  	
 21260                                  	cmp	dx,0F000h
 21261                                  	jne	short int_0B_not_first
 21262                                  
 21263                                  	push	es
 21264                                  	push	dx
 21265                                  	mov	dx,0F000h
 21266                                  	mov	es,dx
 21267                                  	cmp	bx,[es:0FF01h]
 21268                                  	pop	dx
 21269                                  	pop	es
 21270                                  	je	short int_0B_first
 21271                                  %endif
 21272                                  
 21273                                  int_0B_not_first:
 21274                                  	; 14/12/2022
 21275                                  	; 25/10/2022
 21276                                  	;pop	ds
 21277 000012EA BF[5606]                	mov	di,INT19OLD0B
 21278 000012ED BB[7100]                	mov	bx,old0B
 21279 000012F0 BA[6F00]                	mov	dx,int0B
 21280 000012F3 E8F400                  	call	new_init_loop
 21281                                  
 21282                                  	; 14/12/2022
 21283                                  	;jmp	short int_0B_end
 21284                                  ;int_0B_first:
 21285                                  	; 25/10/2022
 21286                                  	;pop	ds
 21287                                  
 21288                                  int_0B_end:
 21289                                  	
 21290                                  stkinit_0C:
 21291 000012F6 BE3000                  	mov	si,0Ch*4 ; 48
 21292                                  	
 21293                                  	; 14/12/2022
 21294                                  	; 25/10/2022
 21295 000012F9 E8C300                  	call	int_xx_first_check
 21296 000012FC 730C                    	jnc	short int_0C_end ; int_0C_first
 21297                                  
 21298                                  ; 14/12/2022
 21299                                  %if 0	
 21300                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21301                                  	push	ds
 21302                                  	lds	bx,[es:si]
 21303                                  	push	ds
 21304                                  	pop	dx
 21305                                  		
 21306                                  	cmp	dx,0
 21307                                  	je	short int_0C_first
 21308                                  
 21309                                  	cmp	byte [bx],0CFh
 21310                                  	je	short int_0C_first
 21311                                  	
 21312                                  	cmp	word [bx+6],424Bh
 21313                                  	je	short int_0C_not_first
 21314                                  	
 21315                                  	cmp	dx,0F000h
 21316                                  	jne	short int_0C_not_first
 21317                                  
 21318                                  	push	es
 21319                                  	push	dx
 21320                                  	mov	dx,0F000h
 21321                                  	mov	es,dx
 21322                                  	cmp	bx,[es:0FF01h]
 21323                                  	pop	dx
 21324                                  	pop	es
 21325                                  	je	short int_0C_first
 21326                                  %endif
 21327                                  	
 21328                                  int_0C_not_first:
 21329                                  	; 14/12/2022
 21330                                  	; 25/10/2022
 21331                                  	;pop	ds
 21332 000012FE BF[5B06]                	mov	di,INT19OLD0C
 21333 00001301 BB[8900]                	mov	bx,old0C
 21334 00001304 BA[8700]                	mov	dx,int0C
 21335 00001307 E8E000                  	call	new_init_loop
 21336                                  
 21337                                  	; 14/12/2022
 21338                                  	;jmp	short int_0C_end
 21339                                  ;int_0C_first:
 21340                                  	; 25/10/2022
 21341                                  	;pop	ds
 21342                                  
 21343                                  int_0C_end:
 21344                                  
 21345                                  stkinit_0D:
 21346 0000130A BE3400                  	mov	si,0Dh*4 ; 52
 21347                                  
 21348                                  	; 14/12/2022	
 21349                                  	; 25/10/2022
 21350 0000130D E8AF00                  	call	int_xx_first_check
 21351 00001310 730C                    	jnc	short int_0D_end ; int_0D_first
 21352                                  
 21353                                  ; 14/12/2022
 21354                                  %if 0	
 21355                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21356                                  	push	ds
 21357                                  	lds	bx,[es:si]
 21358                                  	push	ds
 21359                                  	pop	dx
 21360                                  		
 21361                                  	cmp	dx,0
 21362                                  	je	short int_0D_first
 21363                                  
 21364                                  	cmp	byte [bx],0CFh
 21365                                  	je	short int_0D_first
 21366                                  	
 21367                                  	cmp	word [bx+6],424Bh
 21368                                  	je	short int_0D_not_first
 21369                                  	
 21370                                  	cmp	dx,0F000h
 21371                                  	jne	short int_0D_not_first
 21372                                  
 21373                                  	push	es
 21374                                  	push	dx
 21375                                  	mov	dx,0F000h
 21376                                  	mov	es,dx
 21377                                  	cmp	bx,[es:0FF01h]
 21378                                  	pop	dx
 21379                                  	pop	es
 21380                                  	je	short int_0D_first
 21381                                  %endif
 21382                                  	
 21383                                  int_0D_not_first:
 21384                                  	; 14/12/2022
 21385                                  	; 25/10/2022
 21386                                  	;pop	ds
 21387 00001312 BF[6006]                	mov	di,INT19OLD0D
 21388 00001315 BB[A100]                	mov	bx,old0D
 21389 00001318 BA[9F00]                	mov	dx,int0D
 21390 0000131B E8CC00                  	call	new_init_loop
 21391                                  
 21392                                  	; 14/12/2022
 21393                                  	;jmp	short int_0D_end
 21394                                  	; 02/11/2022
 21395                                  ;int_0D_first:
 21396                                  	;pop	ds
 21397                                  
 21398                                  int_0D_end:
 21399                                  
 21400                                  stkinit_0E:
 21401 0000131E BE3800                  	mov	si,0Eh*4 ; 56
 21402                                  
 21403                                  	; 14/12/2022	
 21404                                  	; 25/10/2022
 21405 00001321 E89B00                  	call	int_xx_first_check
 21406 00001324 730C                    	jnc	short int_0E_end ; int_0E_first
 21407                                  
 21408                                  ; 14/12/2022
 21409                                  %if 0	
 21410                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21411                                  	push	ds
 21412                                  	lds	bx,[es:si]
 21413                                  	push	ds
 21414                                  	pop	dx
 21415                                  		
 21416                                  	cmp	dx,0
 21417                                  	je	short int_0E_first
 21418                                  
 21419                                  	cmp	byte [bx],0CFh
 21420                                  	je	short int_0E_first
 21421                                  	
 21422                                  	cmp	word [bx+6],424Bh
 21423                                  	je	short int_0E_not_first
 21424                                  	
 21425                                  	cmp	dx,0F000h
 21426                                  	jne	short int_0E_not_first
 21427                                  
 21428                                  	push	es
 21429                                  	push	dx
 21430                                  	mov	dx,0F000h
 21431                                  	mov	es,dx
 21432                                  	cmp	bx,[es:0FF01h]
 21433                                  	pop	dx
 21434                                  	pop	es
 21435                                  	je	short int_0E_first
 21436                                  %endif
 21437                                  	
 21438                                  int_0E_not_first:
 21439                                  	; 14/12/2022
 21440                                  	; 25/10/2022
 21441                                  	;pop	ds
 21442 00001326 BF[6506]                	mov	di,INT19OLD0E
 21443 00001329 BB[B900]                	mov	bx,old0E
 21444 0000132C BA[B700]                	mov	dx,int0E
 21445 0000132F E8B800                  	call	new_init_loop
 21446                                  
 21447                                  	; 14/12/2022
 21448                                  	;jmp	short int_0E_end
 21449                                  ;int_0E_first:
 21450                                  	; 25/10/2022
 21451                                  	;pop	ds	
 21452                                  
 21453                                  int_0E_end:
 21454                                  
 21455                                  stkinit_72:
 21456 00001332 BEC801                  	mov	si,72h*4 ; 456
 21457                                  	
 21458                                  	; 14/12/2022
 21459                                  	; 25/10/2022
 21460 00001335 E88700                  	call	int_xx_first_check
 21461 00001338 730C                    	jnc	short int_72_end ; int_72_first
 21462                                  
 21463                                  ; 14/12/2022
 21464                                  %if 0	
 21465                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21466                                  	push	ds
 21467                                  	lds	bx,[es:si]
 21468                                  	push	ds
 21469                                  	pop	dx
 21470                                  		
 21471                                  	cmp	dx,0
 21472                                  	je	short int_72_first
 21473                                  
 21474                                  	cmp	byte [bx],0CFh
 21475                                  	je	short int_72_first
 21476                                  	
 21477                                  	cmp	word [bx+6],424Bh
 21478                                  	je	short int_72_not_first
 21479                                  	
 21480                                  	cmp	dx,0F000h
 21481                                  	jne	short int_72_not_first
 21482                                  
 21483                                  	push	es
 21484                                  	push	dx
 21485                                  	mov	dx,0F000h
 21486                                  	mov	es,dx
 21487                                  	cmp	bx,[es:0FF01h]
 21488                                  	pop	dx
 21489                                  	pop	es
 21490                                  	je	short int_72_first
 21491                                  %endif
 21492                                  	
 21493                                  int_72_not_first:
 21494                                  	; 14/12/2022
 21495                                  	; 25/10/2022
 21496                                  	;pop	ds
 21497 0000133A BF[6F06]                	mov	di,INT19OLD72
 21498 0000133D BB[D100]                	mov	bx,old72
 21499 00001340 BA[CF00]                	mov	dx,int72
 21500 00001343 E8A400                  	call	new_init_loop
 21501                                  
 21502                                  	; 14/12/2022
 21503                                  	;jmp	short int_72_end
 21504                                  ;int_72_first:
 21505                                  	; 25/10/2022
 21506                                  	;pop	ds
 21507                                  
 21508                                  int_72_end:
 21509                                  
 21510                                  stkinit_73:
 21511 00001346 BECC01                  	mov	si,73h*4 ; 460
 21512                                  	
 21513                                  	; 14/12/2022
 21514                                  	; 25/10/2022
 21515 00001349 E87300                  	call	int_xx_first_check
 21516 0000134C 730C                    	jnc	short int_73_end ; int_73_first
 21517                                  
 21518                                  ; 14/12/2022
 21519                                  %if 0	
 21520                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21521                                  	push	ds
 21522                                  	lds	bx,[es:si]
 21523                                  	push	ds
 21524                                  	pop	dx
 21525                                  		
 21526                                  	cmp	dx,0
 21527                                  	je	short int_73_first
 21528                                  
 21529                                  	cmp	byte [bx],0CFh
 21530                                  	je	short int_73_first
 21531                                  	
 21532                                  	cmp	word [bx+6],424Bh
 21533                                  	je	short int_73_not_first
 21534                                  	
 21535                                  	cmp	dx,0F000h
 21536                                  	jne	short int_73_not_first
 21537                                  
 21538                                  	push	es
 21539                                  	push	dx
 21540                                  	mov	dx,0F000h
 21541                                  	mov	es,dx
 21542                                  	cmp	bx,[es:0FF01h]
 21543                                  	pop	dx
 21544                                  	pop	es
 21545                                  	je	short int_73_first
 21546                                  %endif	
 21547                                  	
 21548                                  int_73_not_first:
 21549                                  	; 14/12/2022
 21550                                  	; 25/10/2022
 21551                                  	;pop	ds
 21552 0000134E BF[7406]                	mov	di,INT19OLD73
 21553 00001351 BB[E900]                	mov	bx,old73
 21554 00001354 BA[E700]                	mov	dx,int73
 21555 00001357 E89000                  	call	new_init_loop
 21556                                  
 21557                                  	; 14/12/2022
 21558                                  	;jmp	short int_73_end
 21559                                  ;int_73_first:
 21560                                  	; 25/10/2022
 21561                                  	;pop	ds
 21562                                  
 21563                                  int_73_end:
 21564                                  
 21565                                  stkinit_74:
 21566 0000135A BED001                  	mov	si,74h*4 ; 464
 21567                                  	
 21568                                  	; 14/12/2022
 21569                                  	; 25/10/2022
 21570 0000135D E85F00                  	call	int_xx_first_check
 21571 00001360 730C                    	jnc	short int_74_end ; int_74_first
 21572                                  
 21573                                  ; 14/12/2022
 21574                                  %if 0		
 21575                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21576                                  	push	ds
 21577                                  	lds	bx,[es:si]
 21578                                  	push	ds
 21579                                  	pop	dx
 21580                                  		
 21581                                  	cmp	dx,0
 21582                                  	je	short int_74_first
 21583                                  
 21584                                  	cmp	byte [bx],0CFh
 21585                                  	je	short int_74_first
 21586                                  	
 21587                                  	cmp	word [bx+6],424Bh
 21588                                  	je	short int_74_not_first
 21589                                  	
 21590                                  	cmp	dx,0F000h
 21591                                  	jne	short int_74_not_first
 21592                                  
 21593                                  	push	es
 21594                                  	push	dx
 21595                                  	mov	dx,0F000h
 21596                                  	mov	es,dx
 21597                                  	cmp	bx,[es:0FF01h]
 21598                                  	pop	dx
 21599                                  	pop	es
 21600                                  	je	short int_74_first
 21601                                  %endif
 21602                                  
 21603                                  int_74_not_first:
 21604                                  	; 14/12/2022
 21605                                  	; 25/10/2022
 21606                                  	;pop	ds
 21607 00001362 BF[7906]                	mov	di,INT19OLD74
 21608 00001365 BB[0101]                	mov	bx,old74
 21609 00001368 BA[FF00]                	mov	dx,int74
 21610 0000136B E87C00                  	call	new_init_loop
 21611                                  	
 21612                                  	; 14/12/2022
 21613                                  	;jmp	short int_74_end
 21614                                  ;int_74_first:
 21615                                  	; 25/10/2022
 21616                                  	;pop	ds
 21617                                  
 21618                                  int_74_end:
 21619                                  
 21620                                  stkinit_76:
 21621 0000136E BED801                  	mov	si,76h*4 ; 472
 21622                                  	
 21623                                  	; 14/12/2022
 21624                                  	; 25/10/2022
 21625 00001371 E84B00                  	call	int_xx_first_check
 21626 00001374 730E                    	jnc	short int_76_end ; int_76_first
 21627                                  
 21628                                  ; 14/12/2022
 21629                                  %if 0	
 21630                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21631                                  	push	ds
 21632                                  	lds	bx,[es:si]
 21633                                  	push	ds
 21634                                  	pop	dx
 21635                                  		
 21636                                  	cmp	dx,0
 21637                                  	je	short int_76_first
 21638                                  
 21639                                  	cmp	byte [bx],0CFh
 21640                                  	je	short int_76_first
 21641                                  	
 21642                                  	cmp	word [bx+6],424Bh
 21643                                  	je	short int_76_not_first
 21644                                  	
 21645                                  	cmp	dx,0F000h
 21646                                  	jne	short int_76_not_first
 21647                                  
 21648                                  	push	es
 21649                                  	push	dx
 21650                                  	mov	dx,0F000h
 21651                                  	mov	es,dx
 21652                                  	cmp	bx,[es:0FF01h]
 21653                                  	pop	dx
 21654                                  	pop	es
 21655                                  	je	short int_76_first
 21656                                  %endif
 21657                                  	
 21658                                  int_76_not_first:
 21659                                  	; 14/12/2022
 21660                                  	; 25/10/2022
 21661                                  	;pop	ds
 21662 00001376 BF[7E06]                	mov	di,INT19OLD76
 21663 00001379 BB[1901]                	mov	bx,old76
 21664 0000137C BA[1701]                	mov	dx,int76
 21665 0000137F E86800                  	call	new_init_loop
 21666                                  
 21667                                  	; 14/12/2022
 21668 00001382 EB00                    	jmp	short int_76_end
 21669                                  ;int_76_first:
 21670                                  	; 25/10/2022
 21671                                  	;pop	ds
 21672                                  
 21673                                  int_76_end:
 21674                                  
 21675                                  stkinit_77:
 21676 00001384 BEDC01                  	mov	si,77h*4 ; 476
 21677                                  	
 21678                                  	; 14/12/2022
 21679                                  	; 25/10/2022
 21680 00001387 E83500                  	call	int_xx_first_check
 21681 0000138A 730C                    	jnc	short int_77_end ; int_77_first
 21682                                  
 21683                                  ; 14/12/2022
 21684                                  %if 0	
 21685                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21686                                  	push	ds
 21687                                  	lds	bx,[es:si]
 21688                                  	push	ds
 21689                                  	pop	dx
 21690                                  		
 21691                                  	cmp	dx,0
 21692                                  	je	short int_77_first
 21693                                  
 21694                                  	cmp	byte [bx],0CFh
 21695                                  	je	short int_77_first
 21696                                  	
 21697                                  	cmp	word [bx+6],424Bh
 21698                                  	je	short int_77_not_first
 21699                                  	
 21700                                  	cmp	dx,0F000h
 21701                                  	jne	short int_77_not_first
 21702                                  
 21703                                  	push	es
 21704                                  	push	dx
 21705                                  	mov	dx,0F000h
 21706                                  	mov	es,dx
 21707                                  	cmp	bx,[es:0FF01h]
 21708                                  	pop	dx
 21709                                  	pop	es
 21710                                  	je	short int_77_first
 21711                                  %endif
 21712                                  	
 21713                                  int_77_not_first:
 21714                                  	; 14/12/2022
 21715                                  	; 25/10/2022
 21716                                  	;pop	ds
 21717 0000138C BF[8306]                	mov	di,INT19OLD77
 21718 0000138F BB[3101]                	mov	bx,old77
 21719 00001392 BA[2F01]                	mov	dx,int77
 21720 00001395 E85200                  	call	new_init_loop
 21721                                  
 21722                                  	; 14/12/2022
 21723                                  	;jmp	short int_77_end
 21724                                  ;int_77_first:
 21725                                  	; 25/10/2022
 21726                                  	;pop	ds
 21727                                  
 21728                                  int_77_end:
 21729 00001398 1E                      	push	ds
 21730 00001399 B800F0                  	mov	ax,0F000h		; look at the model byte
 21731 0000139C 8ED8                    	mov	ds,ax
 21732 0000139E 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 21733 000013A3 1F                      	pop	ds
 21734 000013A4 7504                    	jne	short skip_enablenmis
 21735                                  
 21736 000013A6 B027                    	mov	al,27h			; enable convertible nmis
 21737 000013A8 E672                    	out	72h,al
 21738                                  
 21739                                  ; 25/10/2022
 21740                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 21741                                  
 21742                                  skip_enablenmis:
 21743 000013AA FB                      	sti
 21744                                  	;;mov	ax,Bios_Data ; 70h
 21745                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21746                                  	; 21/10/2022
 21747 000013AB B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21748 000013AE 8ED8                    	mov	ds,ax
 21749                                  
 21750                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 21751                                  
 21752 000013B0 C606[4006]01            	mov	byte [INT19SEM],1	; indicate that int 19
 21753                                  					; initialization is complete
 21754                                  
 21755 000013B5 5D                      	pop	bp			; restore all
 21756 000013B6 5E                      	pop	si
 21757 000013B7 5F                      	pop	di
 21758 000013B8 5A                      	pop	dx
 21759 000013B9 59                      	pop	cx
 21760 000013BA 5B                      	pop	bx
 21761 000013BB 07                      	pop	es
 21762 000013BC 1F                      	pop	ds
 21763 000013BD 58                      	pop	ax
 21764 000013BE C3                      	retn
 21765                                  
 21766                                  ; 14/12/2022
 21767                                  ; ----------------------------------------------------------------------
 21768                                  
 21769                                  	; 14/12/2022
 21770                                  	; 25/10/2022
 21771                                  ;%if 0
 21772                                  	; 27/03/2019 - Retro DOS v4.0
 21773                                  int_xx_first_check:
 21774 000013BF 1E                      	push	ds
 21775 000013C0 26C51C                  	lds	bx,[es:si]
 21776 000013C3 1E                      	push	ds
 21777 000013C4 5A                      	pop	dx
 21778                                  		
 21779 000013C5 83FA00                  	cmp	dx,0
 21780 000013C8 741E                    	je	short int_xx_first
 21781                                  	
 21782 000013CA 803FCF                  	cmp	byte [bx],0CFh
 21783 000013CD 7419                    	je	short int_xx_first
 21784                                  	
 21785 000013CF 817F064B42              	cmp	word [bx+6],424Bh
 21786 000013D4 7411                    	je	short int_xx_not_first
 21787                                  	
 21788 000013D6 81FA00F0                	cmp	dx,0F000h
 21789 000013DA 750B                    	jne	short int_xx_not_first
 21790                                  
 21791 000013DC 06                      	push	es
 21792                                  	;push	dx
 21793                                  	;mov	dx,0F000h
 21794 000013DD 8EC2                    	mov	es,dx
 21795 000013DF 263B1E01FF              	cmp	bx,[es:0FF01h]
 21796                                        	;pop	dx
 21797 000013E4 07                      	pop	es
 21798 000013E5 7401                    	je	short int_xx_first
 21799                                  
 21800                                  int_xx_not_first:
 21801 000013E7 F9                      	stc
 21802                                  int_xx_first:
 21803 000013E8 1F                      	pop	ds
 21804 000013E9 C3                      	retn
 21805                                  
 21806                                  ;%endif
 21807                                  
 21808                                  ; ----------------------------------------------------------------------
 21809                                  ; 27/03/2019 - Retro DOS v4.0
 21810                                  
 21811                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21812                                  ; (SYSINIT:1610h)
 21813                                  
 21814                                  new_init_loop:
 21815                                  
 21816                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 21817                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 21818                                  ;	dx=ds:offset of intxx, the new interrupt handler
 21819                                  ;	di=offset value of int19old&aa variable in bios.
 21820                                  ;	es=zero, segid of vector table
 21821                                  ;	ds=relocated stack code segment
 21822                                  
 21823 000013EA 268B04                  	mov	ax,[es:si]		;remember offset in vector
 21824 000013ED 8907                    	mov	[bx],ax			; to original owner in ds
 21825 000013EF 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 21826 000013F3 894702                  	mov	[bx+2],ax		; to original owner in ds
 21827                                  
 21828 000013F6 1E                      	push	ds
 21829                                  	;;mov	ax,Bios_Data ; 70h
 21830                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21831                                  	; 21/10/2022
 21832 000013F7 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21833 000013FA 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 21834 000013FC 268B04                  	mov	ax,[es:si]		;int 19 handler
 21835 000013FF 8905                    	mov	[di],ax
 21836 00001401 268B4402                	mov	ax,[es:si+2]
 21837 00001405 894502                  	mov	word [di+2],ax
 21838 00001408 1F                      	pop	ds
 21839                                  
 21840 00001409 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 21841 0000140C 268C5C02                	mov	[es:si+2],ds
 21842 00001410 C3                      	retn
 21843                                  
 21844                                  ; End of STACK initialization routine
 21845                                  ; ----------------------------------------------------------------------
 21846                                  
 21847                                  ; ----------------------------------------------------------------------
 21848                                  ;set the devmark for mem command.
 21849                                  ;in: [memhi] - the address to place devmark
 21850                                  ;    [memlo] = 0
 21851                                  ;    al = id for devmark_id
 21852                                  ;out: devmark established.
 21853                                  ;     the address saved in cs:[devmark_addr]
 21854                                  ;     [memhi] increase by 1.
 21855                                  ; ----------------------------------------------------------------------
 21856                                  
 21857                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21858                                  ; (SYSINIT:1637h)
 21859                                  
 21860                                  setdevmark:
 21861                                  
 21862 00001411 06                      	push	es
 21863 00001412 51                      	push	cx
 21864                                  
 21865 00001413 2E8B0E[E003]            	mov	cx,[cs:memhi]
 21866 00001418 2E890E[3214]            	mov	[cs:devmark_addr],cx
 21867 0000141D 8EC1                    	mov	es,cx
 21868                                  	; 25/10/2022
 21869                                  	;mov	[es:devmark.id],al
 21870 0000141F 26A20000                	mov	[es:0],al
 21871 00001423 41                      	inc	cx
 21872                                  	;mov	[es:devmark.seg],cx
 21873 00001424 26890E0100              	mov	[es:1],cx
 21874                                  
 21875 00001429 59                      	pop	cx
 21876 0000142A 07                      	pop	es
 21877 0000142B 2EFF06[E003]            	inc	word [cs:memhi]
 21878 00001430 C3                      	retn
 21879                                  
 21880                                  ; ----------------------------------------------------------------------
 21881                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 21882                                  ; ----------------------------------------------------------------------
 21883                                  ; 27/03/2019 - Retro DOS v4.0
 21884                                  
 21885                                  ;MULTI_CONFIG	equ 1
 21886                                  
 21887                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 21888                                                                          ; allocation strategy call
 21889                                  
 21890                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 21891                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 21892                                  
 21893                                  default_filenum equ 8
 21894                                  
 21895                                  ;stacksw	equ true		; include switchable hardware stacks
 21896                                  
 21897                                  ; external variable defined in ibmbio module for multi-track
 21898                                  
 21899                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 21900                                  					; it on after handling config.sys file as a
 21901                                  					; default value,if multrk_flag = multrk_off1.
 21902                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 21903                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 21904                                  
 21905                                  ; if stacksw
 21906                                  
 21907                                  ; internal stack parameters
 21908                                  
 21909                                  ;entrysize	equ 8
 21910                                  
 21911                                  ;mincount	equ 8
 21912                                  ;defaultcount	equ 9
 21913                                  ;maxcount	equ 64
 21914                                  
 21915                                  ;minsize 	equ 32
 21916                                  ;defaultsize	equ 128
 21917                                  ;maxsize 	equ 512
 21918                                  
 21919                                  DOS_FLAG_OFFSET	equ 86h
 21920                                  
 21921                                  ;ifdef MULTI_CONFIG
 21922                                  ;
 21923                                  ;   config_envlen must immediately precede config_wrkseg, because they
 21924                                  ;   may be loaded as a dword ptr
 21925                                  
 21926                                  ; 25/10/2022
 21927                                  ;config_envlen:	dw  0  			; when config_wrkseg is being used as
 21928                                  ;               			;  a scratch env, this is its length
 21929                                  ;config_wrkseg:	dw  0			; config work area (above confbot)
 21930                                  ;                   			;  segment of work area
 21931                                  ;
 21932                                  ;config_cmd:	db  0  			; current config cmd
 21933                                  ;                 			;  (with CONFIG_OPTION_QUERY bit intact)
 21934                                  ;config_multi:	db  0                   ; non-zero if multi-config config.sys
 21935                                  
 21936                                  ;endif ; MULTI_CONFIG
 21937                                  
 21938 00001431 00                      multdeviceflag:	db  0
 21939                                  
 21940 00001432 0000                    devmark_addr:	dw  0			;segment address for devmark.
 21941                                  
 21942 00001434 00                      setdevmarkflag: db  0			;flag used for devmark
 21943                                  
 21944                                  ; 12/12/2022
 21945                                  ;driver_units:	db  0			;total unitcount for driver
 21946                                  
 21947                                  ; 12/12/2022
 21948                                  ;ems_stub_installed:
 21949                                  ;		db  0
 21950                                  
 21951                                  ; 12/12/2022	
 21952                                  ;align 2
 21953                                  
 21954                                  badparm_ptr:	; label	dword
 21955 00001435 0000                    badparm_off:	dw  0
 21956 00001437 0000                    badparm_seg:	dw  0
 21957                                  
 21958                                  ;******************************************************************************
 21959                                  ;take care of config.sys file.
 21960                                  ;system parser data and code.
 21961                                  ;******************************************************************************
 21962                                  
 21963                                  ;*******************************************************************
 21964                                  ; parser options set for msbio sysconf module
 21965                                  ;*******************************************************************
 21966                                  ;
 21967                                  ;**** default assemble swiches definition **************************
 21968                                  
 21969                                  ;farsw	equ 0		; near call expected
 21970                                  ;datesw	equ 0		; check date format
 21971                                  ;timesw	equ 0		; check time format
 21972                                  ;filesw	equ 1		; check file specification
 21973                                  ;capsw	equ 0		; perform caps if specified
 21974                                  ;cmpxsw	equ 0		; check complex list
 21975                                  ;numsw	equ 1		; check numeric value
 21976                                  ;keysw	equ 0		; support keywords
 21977                                  ;swsw	equ 1		; support switches
 21978                                  ;val1sw	equ 1		; support value definition 1
 21979                                  ;val2sw	equ 0		; support value definition 2
 21980                                  ;val3sw	equ 1		; support value definition 3
 21981                                  ;drvsw	equ 1		; support drive only format
 21982                                  ;qussw	equ 0		; support quoted string format
 21983                                  
 21984                                  ; psdata_seg equ cs
 21985                                  
 21986                                  	;.xlist
 21987                                  	;include parse.asm		;together with psdata.inc
 21988                                  	;.list
 21989                                  
 21990                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 21991                                  ; ======================================================================
 21992                                  ; 27/03/2019 - Retro DOS v4.0
 21993                                  
 21994                                  ; 30/03/2019
 21995                                  ; VERSION.INC (MSDOS 6.0) 
 21996                                  ; Set DBCS Blank constant
 21997                                  
 21998                                  ; ifndef DBCS
 21999                                  DB_SPACE EQU 2020h
 22000                                  DB_SP_HI EQU 20h
 22001                                  DB_SP_LO EQU 20h
 22002                                  ; else
 22003                                  
 22004                                  ;*******************************************************************
 22005                                  ; Parser include file
 22006                                  ;*******************************************************************
 22007                                  
 22008                                  ;**** Equation field
 22009                                  ;-------- Character code definition
 22010                                  
 22011                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 22012                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 22013                                  _$P_Period	   equ	"."             ;AN020;
 22014                                  _$P_Slash	   equ	"/"             ;AN020;
 22015                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 22016                                  _$P_Comma	   equ	","             ;AN000;
 22017                                  _$P_Switch	   equ	"/"             ;AN000;
 22018                                  _$P_Keyword	   equ	"="             ;AN000;
 22019                                  _$P_Colon	   equ	":"             ;AN000;
 22020                                  _$P_Plus 	   equ	"+"             ;AN000;
 22021                                  _$P_Minus	   equ	"-"             ;AN000;
 22022                                  _$P_Rparen	   equ	")"             ;AN000;
 22023                                  _$P_Lparen	   equ	"("             ;AN000;
 22024                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 22025                                  _$P_DQuote	   equ	'"'             ;AN000;
 22026                                  _$P_NULL 	   equ	0		;AN000;
 22027                                  _$P_TAB		   equ	9		;AN000;
 22028                                  _$P_CR		   equ	0Dh		;AN000;
 22029                                  _$P_LF		   equ	0Ah		;AN000;
 22030                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 22031                                  
 22032                                  ;-------- Masks
 22033                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 22034                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 22035                                  
 22036                                  ;-------- DOS function call related equs
 22037                                  
 22038                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 22039                                  					; by this call, following information
 22040                                  struc _$P_CDI	
 22041 00000000 ????                     .DateF: resw 1
 22042 00000002 ??????????               .Money: resb 5
 22043 00000007 ????                     .1000:	 resb 2
 22044 00000009 ????                     .Dec:	 resb 2
 22045 0000000B ????                     .DateS: resb 2
 22046 0000000D ????                     .TimeS: resb 2
 22047 0000000F ??                          	 resb 1
 22048 00000010 ??                      	 resb 1
 22049 00000011 ??                       .TimeF: resb 1	 
 22050 00000012 ????????                	 resw 2
 22051 00000016 ????                    	 resb 2
 22052 00000018 <res Ah>                	 resw 5
 22053                                   .size:
 22054                                  endstruc
 22055                                  
 22056                                  _$P_Date_MDY	   equ	0		;AN000;
 22057                                  _$P_Date_DMY	   equ	1		;AN000;
 22058                                  _$P_Date_YMD	   equ	2		;AN000;
 22059                                  ;-------------
 22060                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 22061                                  					;AN000; DS:SI will points to DBCS EV
 22062                                  ;-------------
 22063                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 22064                                  					;AN000; following parameters are set
 22065                                  					;AN000; to get casemap table.
 22066                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 22067                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 22068                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 22069                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 22070                                  					; By this call following information
 22071                                  					; is returned.
 22072                                  struc _$P_DOS_TBL
 22073 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 22074 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 22075 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 22076                                  endstruc
 22077                                  
 22078                                  ; ----------------------------------------------------------------------------
 22079                                  ; PARMS 	LABEL	BYTE
 22080                                  ;		DW	PARMSX
 22081                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 22082                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22083                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 22084                                  ;					; TYPICAL ARE ";", "="
 22085                                  ;					; "," & WHITESPACE ALWAYS
 22086                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22087                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 22088                                  ; ----------------------------------------------------------------------------
 22089                                  
 22090                                  ;-------------------------------- PARMS block structure
 22091                                  struc _$P_PARMS_Blk
 22092 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 22093 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 22094 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 22095                                  endstruc
 22096                                  
 22097                                  _$P_Len_PARMS	   equ	4		;AN000;
 22098                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 22099                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 22100                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 22101                                  
 22102                                  ; ----------------------------------------------------------------------------
 22103                                  ; PARMSX	LABEL	BYTE
 22104                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 22105                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 22106                                  ;		:			; REPEATS maxp-1 TIMES
 22107                                  ;		DB	maxs		; # OF SWITCHES
 22108                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 22109                                  ;		:			; REPEATS maxs-1 TIMES
 22110                                  ;		DB	maxk		; # OF KEYWORD
 22111                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 22112                                  ;		:			; REPEATS maxk-1 TIMES
 22113                                  ; ----------------------------------------------------------------------------
 22114                                  
 22115                                  ;-------------------------------- PARMSX block structure
 22116                                  struc _$P_PARMSX_Blk		;AN000;
 22117 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 22118 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 22119 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 22120                                  endstruc
 22121                                  
 22122                                  ; ----------------------------------------------------------------------------
 22123                                  ; << Control field definition  >>
 22124                                  ;
 22125                                  ;
 22126                                  ;CONTROL   LABEL   BYTE
 22127                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 22128                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 22129                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 22130                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 22131                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 22132                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 22133                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 22134                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 22135                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 22136                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 22137                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 22138                                  ;				   ; 0002H=REPEATS ALLOWED
 22139                                  ;				   ; 0001H=OPTIONAL
 22140                                  ;	   DW	   FUNCTION_FLAGS
 22141                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 22142                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 22143                                  ;				   ; 0010H=REMOVE ":" AT END
 22144                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 22145                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 22146                                  ;	   DW	   VALUES	   ; VALUE LISTS
 22147                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 22148                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 22149                                  ;	   :
 22150                                  ;
 22151                                  ;Note:
 22152                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 22153                                  ;      DATE bit simalteniously.
 22154                                  ;
 22155                                  ;      The parser examins each bit along with the following priority.
 22156                                  ;
 22157                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 22158                                  ;      FILE SPEC -> SIMPLE STRING.
 22159                                  ;
 22160                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 22161                                  ;      in the result buffer is capitalized.
 22162                                  ;
 22163                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 22164                                  ;
 22165                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 22166                                  ;      switch, for example, '/A', then STRING points to;
 22167                                  ;
 22168                                  ;			DB    1 	; number of following synonyms
 22169                                  ;			DB   '/A',0
 22170                                  ;
 22171                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 22172                                  ;
 22173                                  ;			DB    1 	; number of following synonyms
 22174                                  ;			DB   'CODEPAGE=',0
 22175                                  ;
 22176                                  ;    - "..." must consist of upper case characters only because the parser
 22177                                  ;      performs pattern matching after converting input to upper case (by
 22178                                  ;      using the current country upper case table)
 22179                                  ;
 22180                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 22181                                  ;      example /A and /B, the format will be;
 22182                                  ;
 22183                                  ;			DB    2 	; number of following synonyms
 22184                                  ;			DB    '/A',0
 22185                                  ;			DB    '/B',0
 22186                                  ; ----------------------------------------------------------------------------
 22187                                  
 22188                                  ;**** Match_Flags
 22189                                  
 22190                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 22191                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 22192                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 22193                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 22194                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 22195                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 22196                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 22197                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 22198                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 22199                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 22200                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 22201                                  _$P_Optional	   equ	0001h		;AN000; Optional
 22202                                  
 22203                                  ;**** Function flags
 22204                                  
 22205                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 22206                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 22207                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 22208                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 22209                                  
 22210                                  ;-------------------------------- Control block structure
 22211                                  struc _$P_Control_Blk
 22212 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 22213 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 22214 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 22215 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 22216 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 22217 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 22218                                  endstruc
 22219                                  
 22220                                  ; ----------------------------------------------------------------------------
 22221                                  ; << Value List Definition >>
 22222                                  ;
 22223                                  ;VALUES 	LABEL	BYTE
 22224                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 22225                                  ;	     +-
 22226                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 22227                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 22228                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 22229                                  ;	     |	:
 22230                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 22231                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 22232                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 22233                                  ;	     |	:
 22234                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 22235                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 22236                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 22237                                  ;	     +-	:
 22238                                  ;
 22239                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 22240                                  ;
 22241                                  ;Note:
 22242                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 22243                                  ;      when no choice lists are provided.
 22244                                  ;
 22245                                  ;    - STRING must consist of upper case characters only because the parser
 22246                                  ;      performs pattern matching after converting input to upper case (by
 22247                                  ;      using the current country upper case table)
 22248                                  ; ----------------------------------------------------------------------------
 22249                                  
 22250                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 22251                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 22252                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 22253                                  _$P_nval_String	   equ	3		;AN000; string list ID
 22254                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 22255                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 22256                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 22257                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 22258                                  
 22259                                  struc _$P_Val_List
 22260 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 22261 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 22262 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 22263 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 22264 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 22265                                  endstruc
 22266                                  
 22267                                  ; ----------------------------------------------------------------------------
 22268                                  ; << Result Buffer Definition  >>
 22269                                  ;
 22270                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 22271                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 22272                                  ;						;	1=NUMBER, 2=LIST INDEX,
 22273                                  ;						;	3=STRING, 4=COMPLEX,
 22274                                  ;						;	5=FILESPEC, 6=DRIVE
 22275                                  ;						;	7=DATE, 8=TIME
 22276                                  ;						;	9=QUOTED STRING
 22277                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 22278                                  ;
 22279                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 22280                                  ;
 22281                                  ;            +-
 22282                                  ;	    | DD	n			; VALUE IF NUMBER
 22283                                  ;	    | or
 22284                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 22285                                  ;	    |					; (ES presents Segment address)
 22286                                  ;	    | or
 22287                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 22288                                  ;	    | or
 22289                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 22290                                  ;	    | or
 22291                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 22292                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 22293                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 22294                                  ;	    | or
 22295                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 22296                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 22297                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 22298                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 22299                                  ;	    +-
 22300                                  ;
 22301                                  ;
 22302                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 22303                                  ;      list.
 22304                                  ;
 22305                                  ;      YEAR: If the input value for the year is less than 100, parser
 22306                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 22307                                  ;	     the year value, he returns 1987.
 22308                                  ; ----------------------------------------------------------------------------
 22309                                  
 22310                                  ;-------------------------------- Result block structure
 22311                                  struc _$P_Result_Blk
 22312 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 22313 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 22314 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 22315 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 22316                                  endstruc
 22317                                  
 22318                                  ;--------------------------------
 22319                                  ;**** values for the type field in the result block
 22320                                  
 22321                                  _$P_EOL		   equ	0		;AN000; End of line
 22322                                  _$P_Number	   equ	1		;AN000; Number
 22323                                  _$P_List_Idx	   equ	2		;AN000; List Index
 22324                                  _$P_String	   equ	3		;AN000; String
 22325                                  _$P_Complex	   equ	4		;AN000; Complex
 22326                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 22327                                  _$P_Drive	   equ	6		;AN000; Drive
 22328                                  _$P_Date_F	   equ	7		;AN000; Date
 22329                                  _$P_Time_F	   equ	8		;AN000; Time
 22330                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 22331                                  
 22332                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 22333                                  
 22334                                  ;**** Return code
 22335                                  ;
 22336                                  ; following return code will be returned in the AX register.
 22337                                  
 22338                                  _$P_No_Error	   equ	0		;AN000; No error
 22339                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 22340                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 22341                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 22342                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 22343                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 22344                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 22345                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 22346                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 22347                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 22348                                  
 22349                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 22350                                  
 22351                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 22352                                  
 22353                                  ;********************** Local Data *************************************
 22354 00001439 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 22355 0000143B 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 22356 0000143D 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 22357 0000143F 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 22358 00001441 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 22359 00001442 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 22360 00001444 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 22361 00001446 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 22362                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 22363                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 22364                                  
 22365                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 22366                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 22367                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 22368                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 22369                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 22370                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 22371                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 22372                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 22373                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 22374                                  
 22375                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 22376                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 22377                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 22378                                  
 22379 00001448 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 22380 0000144A 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 22381 0000144C 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 22382 0000144E 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 22383                                  
 22384 00001450 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 22385                                  _$P_STRING_BUF_END equ	$		;AN000;
 22386                                  
 22387                                  ; 25/10/2022
 22388                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 22389                                  
 22390 000014D0 FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 22391 000014D1 0000                    		   dw	0		;AN000; offset	of char case map table
 22392 000014D3 0000                    		   dw	0		;AN000; segment of char case map table
 22393                                  ; 25/10/2022
 22394                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 22395                                  ;		   dw	0		;AN000; offset	of file case map table
 22396                                  ;		   dw	0		;AN000; segment of file case map table
 22397                                  
 22398                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 22399                                  ;
 22400                                  
 22401                                  ;M029
 22402                                  ;!!!WARNING!!!
 22403                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 22404                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 22405                                  ;changes need to be made in SYSPARSE
 22406                                  
 22407                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 22408                                  
 22409                                  ; 25/10/2022
 22410                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 22411                                  
 22412 000014D5 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 22413                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 22414                                  
 22415                                  ;ENDIF					;AN000;(of FileSW)
 22416                                  
 22417                                  ; delimiter parsing
 22418                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 22419                                  _$P_period_only	   equ	02h		;AN032; check only for period
 22420                                  
 22421                                  ;filespec error flag
 22422 000014DE 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 22423                                  					;AN033;  was detected.
 22424                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 22425                                  
 22426                                  
 22427                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 22428                                  ; ======================================================================
 22429                                  ; 27/03/2019 - Retro DOS v4.0
 22430                                  
 22431                                  ;***********************************************************************
 22432                                  ; SysParse;
 22433                                  ;
 22434                                  ;  Function : Parser Entry
 22435                                  ;
 22436                                  ;  Input: DS:SI -> command line
 22437                                  ;	  ES:DI -> parameter block
 22438                                  ;	  cs -> psdata.inc
 22439                                  ;	  CX = operand ordinal
 22440                                  ;
 22441                                  ;	  Note:  ES is the segment containing all the control blocks defined
 22442                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 22443                                  ;		 is in DS.
 22444                                  ;
 22445                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 22446                                  ;		    invalid value list. But this parser does NOT implement
 22447                                  ;		    this feature. Therefore CY always zero.
 22448                                  ;
 22449                                  ;	   CY = 0   AX = return code
 22450                                  ;		    BL = terminated delimiter code
 22451                                  ;		    CX = new operand ordinal
 22452                                  ;		    SI = set past scaned operand
 22453                                  ;		    DX = selected result buffer
 22454                                  ;
 22455                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 22456                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 22457                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 22458                                  ;
 22459                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 22460                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 22461                                  ;
 22462                                  ;-------- Modification History -----------------------------------------
 22463                                  ;
 22464                                  ;  4/04/87 : Created by K. K,
 22465                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 22466                                  ;	   : JMP SHORT assemble error (tm02)
 22467                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 22468                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 22469                                  ;	     DateSW equ 1)	      (tm04)
 22470                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 22471                                  ;				      (tm05) in PSDATA.INC
 22472                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 22473                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 22474                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 22475                                  ;	     value-list block	      (tm07)
 22476                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 22477                                  ;	     switch (keyword) or not. If there is, backup si for next call
 22478                                  ;	     (tm08)
 22479                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 22480                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 22481                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 22482                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 22483                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 22484                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 22485                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 22486                                  ;					  (tm12)
 22487                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 22488                                  ;					  (tm13)
 22489                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 22490                                  ;					  (tm14)
 22491                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 22492                                  ;					  (tm15)
 22493                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 22494                                  
 22495                                  ;  7/24/87 : Quoted strings being returned with quotes.
 22496                                  
 22497                                  ;  7/28/87 : Kerry S (;AN018;)
 22498                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 22499                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 22500                                  ;	     affected: _$P_Chk_SW_Control.
 22501                                  
 22502                                  ;  7/29/87 : Kerry S (;AN019;)
 22503                                  ;	     Now allow the optional bit in match flags for switches.  This
 22504                                  ;	     allows the switch to be encountered with a value or without a
 22505                                  ;	     value and no error is returned.
 22506                                  ;
 22507                                  
 22508                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 22509                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 22510                                  ;	     within a date response, instead of checking just for the one
 22511                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 22512                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 22513                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 22514                                  
 22515                                  ;  9/1/87  : Kerry S (;AN021)
 22516                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 22517                                  ;	     the command line with the string in the control block the
 22518                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 22519                                  ;	     on the command line and assuming a match.	This allowed a shorter
 22520                                  ;	     string on the command line than in the synonym list in the control
 22521                                  ;	     block.  I put in a test for a null in the control block so the
 22522                                  ;	     string in the control block must be the same length as the string
 22523                                  ;	     preceeding the colon or equal on the command line.
 22524                                  
 22525                                  ;  8/28/87 : Kerry S (;AN022;)
 22526                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 22527                                  ;	     problems for people who included it themselves in a segment other
 22528                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 22529                                  ;	     segment.
 22530                                  
 22531                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 22532                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 22533                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 22534                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 22535                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 22536                                  ;	     BL be used if TIME is being parsed.
 22537                                  
 22538                                  ;  9/24/87 : Ed K
 22539                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 22540                                  ;	     invocations with their normally expanded code; made comments
 22541                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 22542                                  
 22543                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 22544                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 22545                                  ;	     pointed to by non-existant CONTROL.
 22546                                  
 22547                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 22548                                  ;	     A quoted text string can be framed only by double quote.  Remove
 22549                                  ;	     support to frame quoted text string with single quote.
 22550                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 22551                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 22552                                  ;	     single quote in PROC prologues are left as is for history reasons.
 22553                                  
 22554                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 22555                                  ;	     quote chars within a quoted string is supposed to be reported as
 22556                                  ;	     one quote character, but is reported as two quotes.  This changed
 22557                                  ;	     two instructions in PROC _$P_Quoted_Str.
 22558                                  
 22559                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 22560                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 22561                                  
 22562                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 22563                                  
 22564                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 22565                                  ;	     psdata buffer should have cs.
 22566                                  
 22567                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 22568                                  ;	     positional missing.
 22569                                  
 22570                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 22571                                  ;	     as a line delimiter, should use carriage return.
 22572                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 22573                                  
 22574                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 22575                                  
 22576                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 22577                                  ;	     endless loop since SI is returned still pointing to start
 22578                                  ;	     of that parm.
 22579                                  
 22580                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 22581                                  ;	     Vector to returned string has CS instead of cs, but
 22582                                  ;	     when tried to fix it on previous version, changed similar
 22583                                  ;	     but wrong place.
 22584                                  
 22585                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 22586                                  ;	     delimiters between hours, minutes, seconds for time. And period
 22587                                  ;	     and comma are valid delimiters between seconds and 100th second.
 22588                                  
 22589                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 22590                                  ;	     in a filespec, then flag an error.
 22591                                  
 22592                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 22593                                  ;	     indexed off of the cs equate instead of the DS register.
 22594                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 22595                                  ;  -->	     local parser data. Why were some references to local data changed
 22596                                  ;	     to do this before, but not all ?????
 22597                                  
 22598                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 22599                                  
 22600                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 22601                                  ;
 22602                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 22603                                  
 22604                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 22605                                  
 22606                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 22607                                  ;	     separator in TIME before hundredths field.
 22608                                  ;
 22609                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 22610                                  ;			strings as keywords.
 22611                                  ;
 22612                                  ;***********************************************************************
 22613                                  
 22614                                  ;IF FarSW				;AN000;(Check if need far return)
 22615                                  ;SysParse proc far			;AN000;
 22616                                  ;ELSE					;AN000;
 22617                                  ;SysParse proc near			;AN000;
 22618                                  ;ENDIF					;AN000;(of FarSW)
 22619                                  
 22620                                  ; 27/03/2019 - Retro DOS v4.0
 22621                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 22622                                  
 22623                                  ; 25/10/2022 - Retro DOS v4.0
 22624                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 22625                                  
 22626                                  SysParse:
 22627 000014DF 2EC706[4614]0000        	mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 22628 000014E6 FC                      	cld				;AN000; confirm forward direction
 22629 000014E7 2E890E[3914]            	mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 22630 000014EC 2EC706[3B14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 22631 000014F3 2EC706[4E14]0000        	mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 22632                                  
 22633 000014FA 2EC706[3F14]0000        	mov	word [cs:_$P_DX],0	;AC034; (tm15)
 22634                                  
 22635                                  ;M029 -- Begin changes
 22636                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 22637                                  ;entry to SysParse. This is in the non-checksum region and any program that
 22638                                  ;corrupts this table but does not corrupt the checksum region will leave
 22639                                  ;command.com parsing in an inconsistent state.
 22640                                  ; NB: The special characters string has been hardcoded here. If any change
 22641                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 22642                                  
 22643                                  ;IF FileSW + DrvSW
 22644 00001501 2EC706[D514]5D5B        	mov	word [cs:_$P_FileSp_Char], ']['
 22645 00001508 2EC706[D714]3C7C        	mov	word [cs:_$P_FileSp_Char+2], '<|'
 22646 0000150F 2EC706[D914]2B3E        	mov	word [cs:_$P_FileSp_Char+4], '+>'
 22647 00001516 2EC706[DB14]3B3D        	mov 	word [cs:_$P_FileSp_Char+6], ';='
 22648                                  ;ENDIFtHHH
 22649                                  
 22650                                  ;M029 -- End of changes
 22651                                  
 22652 0000151D E89E06                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 22653 00001520 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 22654                                  ;--------------------------- End of Line
 22655 00001522 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 22656 00001525 53                      	push	bx			;AN000;
 22657                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 22658                                  					;AN000; Get the PARMSX address to
 22659 00001526 268B1D                  	mov	bx,[es:di]
 22660                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 22661                                  					;AN000; check ORDINAL to see if the minimum
 22662 00001529 263A0F                  	cmp	cl,[es:bx]	
 22663 0000152C 7303                    	jae	short _$P_Fin		;AN000; positional found.
 22664                                  
 22665 0000152E B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 22666                                  _$P_Fin: 				;AN000;
 22667 00001531 5B                      	pop	bx			;AN000;
 22668 00001532 E91F01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 22669                                  ;---------------------------
 22670                                  _$P_Start:				;AN000;
 22671 00001535 2E8936[4814]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 22672 0000153A 53                      	push	bx			;AN000; quoted string or file spec.
 22673 0000153B 57                      	push	di			;AN000;
 22674 0000153C 55                      	push	bp			;AN000;
 22675                                  	;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 22676                                  	; 02/11/2022
 22677 0000153D 8D1E[5014]              	lea	bx,[_$P_STRING_BUF]
 22678 00001541 2EF606[4714]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 22679 00001547 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 22680                                  
 22681                                  _$P_Pack_Loop:				;AN000;
 22682 00001549 AC                      	lodsb				;AN000; Pick a operand from buffer
 22683 0000154A E81607                  	call	_$P_Chk_Switch		;AN000; Check switch character
 22684 0000154D 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 22685                                  
 22686 0000154F E88E06                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 22687 00001552 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 22688                                  
 22689 00001554 E8BE06                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 22690 00001557 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 22691                                  
 22692 00001559 2EF606[4714]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 22693                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 22694 0000155F 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 22695                                  
 22696 00001561 E85A06                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 22697 00001564 EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 22698                                  
 22699                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 22700 00001566 2EF606[4714]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 22701 0000156C 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 22702                                  
 22703 0000156E 4E                      	dec	si			;AN000; (tm08)
 22704 0000156F EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 22705                                  
 22706                                  _$P_PL01:				;AN000;
 22707 00001571 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 22708 00001574 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 22709 00001576 7506                    	jne	short _$P_PL00 		;AN000; then
 22710                                  
 22711 00001578 2E800E[4714]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 22712                                  _$P_PL00:				;AN000;
 22713 0000157E 43                      	inc	bx			;AN000; ready to see next byte
 22714 0000157F E8FA06                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 22715 00001582 73C5                    	jnc	_$P_Pack_Loop		;AN000; if no, process to next byte
 22716                                  
 22717 00001584 AC                      	lodsb				;AN000; if yes, store
 22718 00001585 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 22719 00001588 43                      	inc	bx			;AN000; update pointer
 22720 00001589 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 22721                                  
 22722                                  _$P_Pack_End_BY_EOL:			;AN000;
 22723 0000158B 4E                      	dec	si			;AN000; backup si pointer
 22724                                  _$P_Pack_End:				;AN000;
 22725 0000158C 2E8936[3D14]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 22726 00001591 2EC60700                	mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 22727 00001595 2E891E[4C14]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 22728                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 22729 0000159A 268B1D                  	mov	bx,[es:di]
 22730                                  	;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 22731                                  	; 02/11/2022
 22732 0000159D 8D36[5014]              	lea	si,[_$P_STRING_BUF]
 22733 000015A1 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 22734 000015A5 7436                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 22735                                  
 22736 000015A7 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 22737 000015AB 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 22738                                  
 22739 000015AD 2EF606[4714]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 22740 000015B3 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 22741                                  
 22742                                  _$P_Positional_Manager:			;AN000; else process as positional
 22743 000015B5 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22744 000015B9 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22745 000015BB 2E3906[3914]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 22746 000015C0 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 22747                                  
 22748 000015C2 2EA1[3914]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 22749 000015C6 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 22750 000015C8 43                      	inc	bx			;AC035; add '2' to
 22751 000015C9 43                      	inc	bx			;AC035;  BX reg
 22752                                  					;AN000; now bx points to 1st CONTROL
 22753 000015CA 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 22754 000015CC 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 22755 000015CF E88400                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 22756 000015D2 EB65                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22757                                  
 22758                                  _$P_Too_Many_Error:			;AN000;
 22759 000015D4 2EC706[3B14]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 22760 000015DB EB5C                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22761                                  
 22762                                  _$P_SW_Manager:				;AN000;
 22763 000015DD 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22764 000015E1 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22765 000015E3 40                      	inc	ax			;AN000;
 22766 000015E4 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22767 000015E6 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22768 000015E8 268A0F                  	mov	cl,[es:bx]		;AN000;
 22769 000015EB 30ED                    	xor	ch,ch			;AN000; cx = maxs
 22770                                  	;or	cx,cx			;AN000; at least one switch ?
 22771                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 22772                                  	; 14/08/2023
 22773 000015ED E30F                    	jcxz	_$P_SW_Not_Found	; no
 22774                                  
 22775 000015EF 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 22776                                  
 22777                                  _$P_SW_Mgr_Loop: 			;AN000;
 22778 000015F0 53                      	push	bx			;AN000;
 22779 000015F1 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 22780 000015F4 E8BF00                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 22781 000015F7 5B                      	pop	bx			;AN000;
 22782 000015F8 733F                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 22783                                  
 22784 000015FA 43                      	inc	bx			;AC035; add '2' to
 22785 000015FB 43                      	inc	bx			;AC035;  BX reg
 22786                                  					;AN000; else bx points to the next CONTROL
 22787 000015FC E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 22788                                  
 22789                                  _$P_SW_Not_Found:			;AN000;
 22790 000015FE 2EC706[3B14]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 22791 00001605 EB32                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 22792                                  
 22793                                  _$P_Key_Manager: 			;AN000;
 22794 00001607 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22795 0000160B 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22796 0000160D 40                      	inc	ax			;AN000;
 22797 0000160E D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22798 00001610 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22799 00001612 268A07                  	mov	al,[es:bx]		;AN000;
 22800 00001615 30E4                    	xor	ah,ah			;AN000; ax = maxs
 22801 00001617 D1E0                    	shl	ax,1			;AN000;
 22802 00001619 40                      	inc	ax			;AN000; ax = ax*2+1
 22803 0000161A 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 22804 0000161C 268A0F                  	mov	cl,[es:bx]		;AN000;
 22805 0000161F 30ED                    	xor	ch,ch			;AN000; cx = maxk
 22806                                  	;or	cx,cx			;AN000; at least one keyword ?
 22807                                  	;jz	short _$P_Key_Not_Found	;AN000;
 22808                                  	; 14/08/2023
 22809 00001621 E30F                    	jcxz	_$P_Key_Not_Found	; no
 22810                                  
 22811 00001623 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 22812                                  
 22813                                  _$P_Key_Mgr_Loop:			;AN000;
 22814 00001624 53                      	push	bx			;AN000;
 22815 00001625 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 22816 00001628 E85A00                  	call	_$P_Chk_Key_Control	;AN000; do process for keyword
 22817 0000162B 5B                      	pop	bx			;AN000;
 22818 0000162C 730B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 22819                                  
 22820 0000162E 43                      	inc	bx			;AC035; add '2' to
 22821 0000162F 43                      	inc	bx			;AC035;  BX reg
 22822                                  					;AN000; else bx points to the next CONTROL
 22823 00001630 E2F2                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 22824                                  
 22825                                  _$P_Key_Not_Found:			;AN000;
 22826 00001632 2EC706[3B14]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 22827                                  _$P_Return_to_Caller:			;AN000;
 22828 00001639 5D                      	pop	bp			;AN000;
 22829 0000163A 5F                      	pop	di			;AN000;
 22830 0000163B 5B                      	pop	bx			;AN000;
 22831 0000163C 2E8B0E[3914]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 22832 00001641 2EA1[3B14]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 22833 00001645 2E8B36[3D14]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 22834 0000164A 2E8B16[3F14]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 22835 0000164F 2E8A1E[4114]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 22836                                  _$P_Single_Exit: 			;AN000;
 22837 00001654 F8                      	clc				;AN000;
 22838 00001655 C3                      	retn				;AN000;
 22839                                  
 22840                                  ;***********************************************************************
 22841                                  ; _$P_Chk_Pos_Control
 22842                                  ;
 22843                                  ; Function: Parse CONTROL block for a positional
 22844                                  ;
 22845                                  ; Input:     ES:BX -> CONTROL block
 22846                                  ;	     cs:SI -> _$P_STRING_BUF
 22847                                  ;
 22848                                  ; Output:    None
 22849                                  ;
 22850                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 22851                                  ;
 22852                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 22853                                  ;***********************************************************************
 22854                                  
 22855                                  _$P_Chk_Pos_Control:
 22856 00001656 50                      	push	ax			;AN000;
 22857                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 22858 00001657 268B07                  	mov	ax,[es:bx]
 22859                                  	; 12/12/2022
 22860 0000165A A802                    	test	al,_$P_Repeat
 22861                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 22862 0000165C 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 22863                                  
 22864 0000165E 2EFF06[3914]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 22865                                  _$P_CPC00:				;AN000;
 22866 00001663 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 22867 00001667 7517                    	jne	short _$P_CPC01		;AN000;
 22868                                  
 22869                                  	; 12/12/2022
 22870 00001669 A801                    	test	al,_$P_Optional
 22871                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 22872 0000166B 7509                    	jnz	short _$P_CPC02		;AN000;
 22873                                  
 22874 0000166D 2EC706[3B14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 22875 00001674 EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 22876                                  
 22877                                  _$P_CPC02:				;AN000;
 22878 00001676 50                      	push	ax			;AN000;
 22879                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 22880                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 22881                                  	; 14/08/2023
 22882 00001677 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 22883 0000167A E89800                  	call	_$P_Fill_Result		;AN000;
 22884 0000167D 58                      	pop	ax			;AN000;
 22885 0000167E EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 22886                                  
 22887                                  _$P_CPC01:				;AN000;
 22888 00001680 E81701                  	call	_$P_Check_Match_Flags	;AN000;
 22889                                  _$P_CPC_Exit:				;AN000;
 22890 00001683 58                      	pop	ax			;AN000;
 22891 00001684 C3                      	retn				;AN000;
 22892                                  
 22893                                  ;***********************************************************************
 22894                                  ; _$P_Chk_Key_Control
 22895                                  ;
 22896                                  ; Function: Parse CONTROL block for a keyword
 22897                                  ;
 22898                                  ; Input:     ES:BX -> CONTROL block
 22899                                  ;	     cs:SI -> _$P_STRING_BUF
 22900                                  ;
 22901                                  ; Output:    CY = 1 : not match
 22902                                  ;
 22903                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 22904                                  ;
 22905                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 22906                                  ;***********************************************************************
 22907                                  
 22908                                  _$P_Chk_Key_Control:
 22909 00001685 F9                      	stc				;AN000; this logic works when the KeySW
 22910 00001686 C3                      	retn				;AN000; is reset.
 22911                                  
 22912                                  ;***********************************************************************
 22913                                  ; _$P_Search_KEYorSW:
 22914                                  ;
 22915                                  ; Function: Seach specified keyword or switch from CONTROL
 22916                                  ;
 22917                                  ; Input:     ES:BX -> CONTROL block
 22918                                  ;	     cs:SI -> _$P_STRING_BUF
 22919                                  ;
 22920                                  ; Output:    CY = 1 : not match
 22921                                  ;
 22922                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 22923                                  ;***********************************************************************
 22924                                  
 22925                                  	; 25/10/2022 - Retro DOS v4.0
 22926                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 22927                                  
 22928                                  _$P_Search_KEYorSW:			;AN000;
 22929 00001687 55                      	push	bp			;AN000;
 22930 00001688 51                      	push	cx			;AN000;
 22931 00001689 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 22932 0000168D 30ED                    	xor	ch,ch			;AN000; and set it to cx
 22933                                  	;or	cx,cx			;AN000; No synonyms specified ?
 22934                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 22935                                  	; 14/08/2023
 22936 0000168F E30D                    	jcxz	_$P_KEYorSW_Not_Found
 22937                                  
 22938                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 22939                                  	; 25/10/2022
 22940 00001691 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 22941                                  	;lea	bp,[bx+9]
 22942                                  _$P_KEYorSW_Loop:			;AN000;
 22943 00001694 E8C303                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 22944 00001697 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 22945                                  
 22946 00001699 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 22947 0000169C E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 22948                                  _$P_KEYorSW_Not_Found:			;AN000;
 22949 0000169E F9                      	stc				;AN000; indicate not found in synonym list
 22950 0000169F EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 22951                                  
 22952                                  _$P_KEYorSW_Found:			;AN000;
 22953 000016A1 2E892E[4E14]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 22954 000016A6 F8                      	clc				;AN000; indicate found
 22955                                  _$P_KEYorSW_Exit:			;AN000;
 22956 000016A7 59                      	pop	cx			;AN000;
 22957 000016A8 5D                      	pop	bp			;AN000;
 22958 000016A9 C3                      	retn				;AN000;
 22959                                   
 22960                                  ;***********************************************************************
 22961                                  ; _$P_MoveBP_NUL
 22962                                  ;***********************************************************************
 22963                                  
 22964                                  _$P_MoveBP_NUL:
 22965                                  _$P_MBP_Loop:				;AN000;
 22966                                  	; 11/12/2022
 22967 000016AA 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 22968                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22969                                  	; (SYSINIT:18DBh)
 22970                                   	;cmp     byte [es:bp+0],0
 22971 000016AF 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 22972                                  
 22973 000016B1 45                      	inc	bp			;AN000; until
 22974 000016B2 EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 22975                                  
 22976                                  _$P_MBP_Exit:				;AN000;
 22977 000016B4 45                      	inc	bp			;AN000; bp points to next to NULL
 22978 000016B5 C3                      	retn				;AN000;
 22979                                  
 22980                                  ;***********************************************************************
 22981                                  ; _$P_Chk_SW_Control
 22982                                  ;
 22983                                  ; Function: Parse CONTROL block for a switch
 22984                                  ;
 22985                                  ; Input:     ES:BX -> CONTROL block
 22986                                  ;	     cs:SI -> _$P_STRING_BUF
 22987                                  ;
 22988                                  ; Output:    CY = 1 : not match
 22989                                  ;
 22990                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 22991                                  ;
 22992                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 22993                                  ;***********************************************************************
 22994                                  
 22995                                  _$P_Chk_SW_Control:
 22996                                  
 22997                                  ;IF SwSW				;AN000;(Check if switch is supported)
 22998                                  	;or	byte [cs:_$P_Flags+1],10h
 22999 000016B6 2E800E[4714]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 23000 000016BC E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 23001 000016BF 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 23002                                  
 23003                                  	;and	[cs:_$P_Flags+],0EFh
 23004 000016C1 2E8026[4714]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 23005                                  					;AC034; reset the indicator previously set
 23006 000016C7 50                      	push	ax			;AN000; 	      /switch:
 23007 000016C8 2EA1[4A14]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 23008 000016CC 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 23009 000016CE 2E0106[4814]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 23010 000016D3 58                      	pop	ax			;AN000;
 23011                                  
 23012 000016D4 2E8B36[4A14]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 23013 000016D9 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 23014 000016DD 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 23015                                  
 23016 000016DF 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 23017 000016E4 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 23018                                  
 23019 000016E6 2EC706[3B14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 23020 000016ED EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 23021                                  
 23022                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 23023                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 23024 000016EF 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 23025 000016F3 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 23026                                  
 23027                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 23028                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 23029                                  	;test	word [es:bx],1
 23030                                  	; 12/12/2022
 23031                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 23032 000016F5 26F60701                	test	byte [es:bx],_$P_Optional
 23033 000016F9 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 23034                                  
 23035 000016FB 2EC706[3B14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 23036 00001702 EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 23037                                  
 23038                                  _$P_CSW00:				;AN000;
 23039 00001704 E89300                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 23040 00001707 F8                      	clc				;AN000; indicate match
 23041                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23042                                  	; 12/12/2022
 23043 00001708 C3                      	retn
 23044                                  
 23045                                  _$P_Chk_SW_Err0: 			;AN000;
 23046 00001709 F9                      	stc				;AN000; not found in switch synonym list
 23047                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23048                                  	; 12/12/2022
 23049 0000170A C3                      	retn	
 23050                                  
 23051                                  _$P_Chk_SW_Exit: 			;AN000;
 23052 0000170B 50                      	push	ax			;AN000;
 23053                                  	;mov	al,_$P_String		;AN000;
 23054                                  	;mov	ah,_$P_No_Tag		;AN000;
 23055                                  	; 14/08/2023
 23056 0000170C B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23057 0000170F E80300                  	call	_$P_Fill_Result		;AN000; 	 buffer
 23058 00001712 58                      	pop	ax			;AN000;
 23059 00001713 F8                      	clc				;AN000;
 23060                                  _$P_Chk_SW_Single_Exit:			;AN000;
 23061 00001714 C3                      	retn				;AN000;
 23062                                  ;ELSE					;AN000;(of IF SwSW)
 23063                                  ;	stc				;AN000; this logic works when the SwSW
 23064                                  ;	retn				;AN000; is reset.
 23065                                  
 23066                                  ;***********************************************************************
 23067                                  ; _$P_Fill_Result
 23068                                  ;
 23069                                  ; Function: Fill the result buffer
 23070                                  ;
 23071                                  ; Input:    AH = Item tag
 23072                                  ;	    AL = type
 23073                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 23074                                  ;		  AL = 2: DX has index(offset) into value list
 23075                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 23076                                  ;		  AL = 7: DX has year, CL has month and CH has date
 23077                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 23078                                  ;			  amd CH has hundredths
 23079                                  ;		  AL = else: cs:SI points to returned string buffer
 23080                                  ;	    ES:BX -> CONTROL block
 23081                                  ;
 23082                                  ; Output:   None
 23083                                  ;
 23084                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 23085                                  ;
 23086                                  ; Vars: _$P_DX(W)
 23087                                  ;***********************************************************************
 23088                                  
 23089                                  _$P_Fill_Result:
 23090 00001715 57                      	push	di			;AN000;
 23091 00001716 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 23092                                  					;AN000; di points to result buffer
 23093 0000171A 2E893E[3F14]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 23094 0000171F 268805                  	mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 23095 00001722 26886501                	mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 23096 00001726 50                      	push	ax			;AN000;
 23097 00001727 2EA1[4E14]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 23098 0000172B 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 23099                                  					;AN000;   then set it to the result
 23100 0000172F 58                      	pop	ax			;AN000;
 23101                                  _$P_RLT04:				;AN000;
 23102 00001730 3C01                    	cmp	al,_$P_Number		;AN000; if number
 23103 00001732 750A                    	jne	short _$P_RLT00		;AN000;
 23104                                  
 23105                                  _$P_RLT02:				;AN000;
 23106 00001734 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 23107 00001738 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 23108 0000173C EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 23109                                  
 23110                                  _$P_RLT00:				;AN000;
 23111 0000173E 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 23112 00001740 7506                    	jne	short _$P_RLT01		;AN000;
 23113                                  
 23114 00001742 26895504                	mov	word [es:di+_$P_Result_Blk.Picked_Val],dx 
 23115                                  					;AN000; then store list index
 23116 00001746 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 23117                                  
 23118                                  _$P_RLT01:				;AN000;
 23119 00001748 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 23120 0000174A 74E8                    	je	short _$P_RLT02		;AN000;
 23121                                  
 23122 0000174C 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 23123 0000174E 74E4                    	je	short _$P_RLT02		;AN000;
 23124                                  
 23125 00001750 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 23126 00001752 7506                    	jne	short _$P_RLT03		;AN000;
 23127                                  
 23128 00001754 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 23129 00001758 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 23130                                  
 23131                                  _$P_RLT03:				;AN000;
 23132 0000175A 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 23133 0000175C 750F                    	jne	short _$P_RLT05		;AN000;
 23134                                  
 23135 0000175E 2EA1[4814]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 23136 00001762 40                      	inc	ax			;AN000; skip left Parentheses
 23137 00001763 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 23138 00001767 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 23139 0000176B EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 23140                                  
 23141                                  _$P_RLT05:				;AN000;
 23142                                  ;------------------------  AL = 3, 5, or 9
 23143 0000176D 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 23144                                  					;AN000; store offset of STRING_BUF
 23145 00001771 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 23146                                  					;AN031; store segment of STRING_BUF
 23147 00001775 50                      	push	ax			;AN000;
 23148 00001776 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 23149                                  					;AN000; need CAPS by file table?
 23150 0000177B 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 23151                                  
 23152 0000177D B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 23153 0000177F EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 23154                                  
 23155                                  _$P_RLT_CAP00:				;AN000;
 23156 00001781 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 23157                                  					;AN000; need CAPS by char table ?
 23158 00001786 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 23159                                  
 23160 00001788 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 23161                                  _$P_RLT_CAP02:				;AN000;
 23162 0000178A E8DF00                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 23163                                  _$P_RLT_CAP01:				;AN000;
 23164 0000178D 58                      	pop	ax			;AN000;
 23165 0000178E 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 23166                                  					;AN000; removing colon at end ?
 23167 00001793 7403                    	jz	short _$P_RLT_Exit	;AN000;
 23168                                  
 23169 00001795 E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 23170                                  _$P_RLT_Exit:				;AN000;
 23171 00001798 5F                      	pop	di			;AN000;
 23172 00001799 C3                      	retn				;AN000;
 23173                                  
 23174                                  ;***********************************************************************
 23175                                  ; _$P_Check_Match_Flags
 23176                                  ;
 23177                                  ; Function:  Check the mutch_flags and make the exit code and set the
 23178                                  ;	     result buffer
 23179                                  ;
 23180                                  ;	    Check for types in this order:
 23181                                  ;		Complex
 23182                                  ;		Date
 23183                                  ;		Time
 23184                                  ;		Drive
 23185                                  ;		Filespec
 23186                                  ;		Quoted String
 23187                                  ;		Simple String
 23188                                  ;
 23189                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23190                                  ;	     ES:BX -> CONTROL block
 23191                                  ;
 23192                                  ; Output:    None
 23193                                  ;
 23194                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 23195                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 23196                                  ;	     _$P_Drive_Format
 23197                                  ;***********************************************************************
 23198                                  
 23199                                  	; 25/10/2022 - Retro DOS v4.0
 23200                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 23201                                  
 23202                                  	; 12/12/2022
 23203                                  _$P_Check_Match_Flags:
 23204 0000179A 2EC606[DE14]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 23205                                  					;AN033;AC034;; clear filespec error flag.
 23206 000017A0 50                      	push	ax			;AN000;
 23207                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 23208 000017A1 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 23209 000017A4 09C0                    	or	ax,ax			;AC035; test ax for zero
 23210 000017A6 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 23211 000017A8 50                      	push	ax			;AN000; (tm12)
 23212 000017A9 53                      	push	bx			;AN000; (tm12)
 23213 000017AA 52                      	push	dx			;AN000; (tm12)
 23214 000017AB 57                      	push	di			;AN000; (tm12)
 23215 000017AC 2EC706[3B14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 23216                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 23217                                  	;mov	al,_$P_String		;AN000; (tm12)
 23218                                  	; 14/08/2023
 23219 000017B3 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23220 000017B6 E85CFF                  	call	_$P_Fill_Result		;AN000; (tm12)
 23221 000017B9 5F                      	pop	di			;AN000; (tm12)
 23222 000017BA 5A                      	pop	dx			;AN000; (tm12)
 23223 000017BB 5B                      	pop	bx			;AN000; (tm12)
 23224 000017BC 58                      	pop	ax			;AN000; (tm12)
 23225                                  	; 12/12/2022
 23226                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 23227                                  	; 12/12/2022
 23228                                  ;_$P_Mat: 				;AN000; (tm12)
 23229                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 23230                                  _$P_Bridge:
 23231 000017BD EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 23232                                  	
 23233                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23234                                  	; (SYSINIT:19F9h)
 23235                                  	; 12/12/2022
 23236                                  	;nop	; db 90h
 23237                                  
 23238                                  ; 12/12/2022
 23239                                  _$P_Mat:
 23240                                  _$P_Match03:				;AN000;
 23241                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 23242                                  	; 14/08/2023
 23243 000017BF F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 23244 000017C2 7412                    	jz	short _$P_Match04	;AN000;
 23245                                  
 23246 000017C4 2EC706[3B14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23247 000017CB E81F01                  	call	_$P_Value		;AN000; do process
 23248 000017CE 2E833E[3B14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23249 000017D4 7557                    	jne	short _$P_Match_Exit	;AN000;
 23250                                  _$P_Match04:				;AN000;
 23251                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 23252                                  	; 14/08/2023
 23253 000017D6 F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 23254 000017D9 7412                    	jz	short _$P_Match05	;AN000;
 23255                                  
 23256 000017DB 2EC706[3B14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23257 000017E2 E8E400                  	call	_$P_SValue		;AN000; do process
 23258 000017E5 2E833E[3B14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23259 000017EB 7540                    	jne	short _$P_Match_Exit	;AN000;
 23260                                  _$P_Match05:				;AN000;
 23261                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 23262                                  	; 14/08/2023
 23263 000017ED F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 23264 000017F0 7415                    	jz	short _$P_Match06	;AN000;
 23265                                  
 23266 000017F2 2EC706[3B14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23267 000017F9 E8FC02                  	call	_$P_File_Format		;AN000; 1st, call file format
 23268 000017FC E87D03                  	call	_$P_Drive_Format	;AN000; check drive format, next
 23269 000017FF 2E833E[3B14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23270 00001805 7526                    	jne	short _$P_Match_Exit	;AN000;
 23271                                  _$P_Match06:				;AN000;
 23272                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 23273                                  	; 14/08/2023
 23274 00001807 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 23275 0000180A 7412                    	jz	short _$P_Match07	;AN000;
 23276                                  
 23277 0000180C 2EC706[3B14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23278 00001813 E8E202                  	call	_$P_File_Format		;AN000; do process
 23279 00001816 2E833E[3B14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23280 0000181C 750F                    	jne	short _$P_Match_Exit	;AN000;
 23281                                  _$P_Match07:				;AN000;
 23282                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 23283                                  	; 14/08/2023
 23284 0000181E F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 23285 00001821 740A                    	jz	short _$P_Match09	;AN000;
 23286                                  
 23287 00001823 2EC706[3B14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23288 0000182A E8C401                  	call	_$P_Simple_String	;AN000; do process
 23289                                  _$P_Match09:				;AN000;
 23290                                  _$P_Match_Exit:				;AN000;
 23291 0000182D 2E833E[DE14]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 23292 00001833 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23293 00001835 2E833E[3B14]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 23294 0000183B 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23295 0000183D 2EC706[3B14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 23296                                  _$P_Match2_Exit: 			;AN033;
 23297 00001844 58                      	pop	ax			;AN000;
 23298 00001845 C3                      	retn				;AN000;
 23299                                  
 23300                                  ;***********************************************************************
 23301                                  ; _$P_Remove_Colon;
 23302                                  ;
 23303                                  ; Function: Remove colon at end
 23304                                  ;
 23305                                  ; Input:    cs:SI points to string buffer to be examineed
 23306                                  ;
 23307                                  ; Output:   None
 23308                                  ;
 23309                                  ; Use:	_$P_Chk_DBCS
 23310                                  ;***********************************************************************
 23311                                  
 23312                                  _$P_Remove_Colon:
 23313 00001846 50                      	push	ax			;AN000;
 23314 00001847 56                      	push	si			;AN000;
 23315                                  _$P_RCOL_Loop:				;AN000;
 23316 00001848 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23317 0000184B 08C0                    	or	al,al			;AN000; end of string ?
 23318 0000184D 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 23319                                  
 23320 0000184F 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 23321 00001851 750D                    	jne	short _$P_RCOL00	;AN000;
 23322                                  
 23323 00001853 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 23324 00001858 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 23325                                  
 23326 0000185A 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 23327 0000185E EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 23328                                  
 23329                                  _$P_RCOL00:				;AN000;
 23330 00001860 E81904                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 23331 00001863 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 23332                                  
 23333 00001865 46                      	inc	si			;AN000; if yes, skip trailing byte
 23334                                  _$P_RCOL01:				;AN000;
 23335 00001866 46                      	inc	si			;AN000; si points to next byte
 23336 00001867 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 23337                                  
 23338                                  _$P_RCOL_Exit:				;AN000;
 23339 00001869 5E                      	pop	si			;AN000;
 23340 0000186A 58                      	pop	ax			;AN000;
 23341 0000186B C3                      	retn				;AN000;
 23342                                  
 23343                                  ;***********************************************************************
 23344                                  ; _$P_Do_CAPS_String;
 23345                                  ;
 23346                                  ; Function: Perform capitalization along with the file case map table
 23347                                  ;	    or character case map table.
 23348                                  ;
 23349                                  ; Input:    AL = 2 : Use character table
 23350                                  ;	    AL = 4 : Use file table
 23351                                  ;	    cs:SI points to string buffer to be capitalized
 23352                                  ;
 23353                                  ; Output:   None
 23354                                  ;
 23355                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 23356                                  ;***********************************************************************
 23357                                  
 23358                                  _$P_Do_CAPS_String:
 23359 0000186C 56                      	push	si			;AN000;
 23360 0000186D 52                      	push	dx			;AN000;
 23361 0000186E 88C2                    	mov	dl,al			;AN000; save info id
 23362                                  
 23363                                  _$P_DCS_Loop:				;AN000;
 23364 00001870 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 23365 00001873 E80604                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 23366 00001876 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 23367                                  
 23368 00001878 08C0                    	or	al,al			;AN000; end of string ?
 23369 0000187A 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 23370                                  
 23371 0000187C E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 23372 0000187F 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 23373 00001882 EB01                    	jmp	short _$P_DCS01		;AN000; process next
 23374                                  _$P_DCS00:				;AN000;
 23375 00001884 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 23376                                  _$P_DCS01:				;AN000;
 23377 00001885 46                      	inc	si			;AN000; si point to next byte
 23378 00001886 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 23379                                  _$P_DCS_Exit:				;AN000;
 23380 00001888 5A                      	pop	dx			;AN000;
 23381 00001889 5E                      	pop	si			;AN000;
 23382 0000188A C3                      	retn
 23383                                  
 23384                                  ;***********************************************************************
 23385                                  ; _$P_Do_CAPS_Char;
 23386                                  ;
 23387                                  ; Function: Perform capitalization along with the file case map table
 23388                                  ;	    or character case map table.
 23389                                  ;
 23390                                  ; Input:    DL = 2 : Use character table
 23391                                  ;	    DL = 4 : Use file table
 23392                                  ;	    AL = character to be capitalized
 23393                                  ;
 23394                                  ; Output:   None
 23395                                  ;
 23396                                  ; Use:	INT 21h /w AH=65h
 23397                                  ;***********************************************************************
 23398                                  
 23399                                  _$P_Do_CAPS_Char:
 23400 0000188B 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 23401 0000188D 730B                    	jae	short _$P_DCC_Go	;AN000;
 23402                                  
 23403 0000188F 3C61                    	cmp	al,"a"                  ;AN000; if no,
 23404 00001891 7235                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 23405                                  
 23406 00001893 3C7A                    	cmp	al,"z"                  ;AN000;
 23407 00001895 7731                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 23408                                  
 23409 00001897 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 23410                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 23411                                  	; 14/08/2023
 23412 00001899 C3                      	retn
 23413                                  
 23414                                  _$P_DCC_Go:				;AN000;
 23415 0000189A 53                      	push	bx			;AN000;
 23416 0000189B 06                      	push	es			;AN000;
 23417 0000189C 57                      	push	di			;AN000;
 23418                                  
 23419                                  	;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 23420 0000189D 8D3E[D014]              	lea	di,[_$P_Char_CAP_Ptr]
 23421                                  _$P_DCC00:				;AN000;
 23422 000018A1 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 23423 000018A4 7415                    	je	short _$P_DCC01		;AN000; if no,
 23424                                  
 23425                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 23426                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 23427                                  ; call, regardless of what base register is currently be defined as cs.
 23428                                  
 23429 000018A6 50                      	push	ax			;AN000; get CAPS table thru DOS call
 23430 000018A7 51                      	push	cx			;AN000;
 23431 000018A8 52                      	push	dx			;AN000;
 23432                                  
 23433 000018A9 0E                      	push	cs			;AC036; pass current base seg into
 23434                                  					;(Note: this used to push CS.  BUG...
 23435 000018AA 07                      	pop	es			;AN000;   ES reg, required for
 23436                                  					;get extended country information
 23437                                  	;mov	al,dl ; function	;AN000; upper case table
 23438                                  	; 14/08/2023
 23439 000018AB 92                      	xchg	ax,dx
 23440 000018AC B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 23441 000018AE BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 23442 000018B1 B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 23443                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 23444                                  	; 14/08/2023
 23445 000018B4 89DA                    	mov	dx,bx ; 0FFFFh
 23446                                  					;DI already set to point to buffer
 23447 000018B6 CD21                    	int	21h			;AN000; es:di point to buffer that
 23448                                  					;now has been filled in with info
 23449 000018B8 5A                      	pop	dx			;AN000;
 23450 000018B9 59                      	pop	cx			;AN000;
 23451 000018BA 58                      	pop	ax			;AN000;
 23452                                  
 23453                                  _$P_DCC01:				;AN000;
 23454                                  
 23455                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 23456                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 23457                                  ; regardless of which base reg is currently the cs reg.
 23458                                  
 23459                                  	; 14/08/2023
 23460                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 23461                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 23462 000018BB 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 23463 000018BF 43                      	inc	bx			;AC035; add '2' to
 23464 000018C0 43                      	inc	bx			;AC035;  BX reg
 23465                                  					;AN000; skip length field
 23466 000018C1 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 23467                                  	;xlat	es:[bx] 		;AN000; perform case map
 23468 000018C3 26                      	es
 23469 000018C4 D7                      	xlat
 23470 000018C5 5F                      	pop	di			;AN000;
 23471 000018C6 07                      	pop	es			;AN000;
 23472 000018C7 5B                      	pop	bx			;AN000;
 23473                                  _$P_CAPS_Ret:				;AN000;
 23474 000018C8 C3                      	retn				;AN000;
 23475                                  
 23476                                  ;***********************************************************************
 23477                                  ; _$P_Value / _$P_SValue
 23478                                  ;
 23479                                  ; Function:  Make 32bit value from cs:SI and see value list
 23480                                  ;	     and make result buffer.
 23481                                  ;	     _$P_SValue is an entry point for the signed value
 23482                                  ;	     and this will simply call _$P_Value after the handling
 23483                                  ;	     of the sign character, "+" or "-"
 23484                                  ;
 23485                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23486                                  ;	     ES:BX -> CONTROL block
 23487                                  ;
 23488                                  ; Output:    None
 23489                                  ;
 23490                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 23491                                  ;
 23492                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 23493                                  ;***********************************************************************
 23494                                  
 23495                                  	; 26/10/2022 - Retro DOS v4.0
 23496                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 23497                                  
 23498                                  _$P_SValue:				;AN000; when signed value here
 23499 000018C9 50                      	push	ax			;AN000;
 23500 000018CA 2E800E[4714]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 23501 000018D0 2E8026[4714]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 23502 000018D6 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 23503 000018D9 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 23504 000018DB 740A                    	je	short _$P_SVal00	;AN000;
 23505                                  
 23506 000018DD 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 23507 000018DF 7507                    	jne	short _$P_Sval01	;AN000; else
 23508                                  
 23509 000018E1 2E800E[4714]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 23510                                  _$P_SVal00:				;AN000;
 23511 000018E7 46                      	inc	si			;AN000; skip sign char
 23512                                  _$P_Sval01:				;AN000;
 23513 000018E8 E80200                  	call	_$P_Value		;AN000; and process value
 23514 000018EB 58                      	pop	ax			;AN000;
 23515 000018EC C3                      	retn
 23516                                  
 23517                                  ;***********************************************************************
 23518                                  
 23519                                  	; 26/10/2022
 23520                                  _$P_Value:				;AN000;
 23521 000018ED 50                      	push	ax			;AN000;
 23522 000018EE 51                      	push	cx			;AN000;
 23523 000018EF 52                      	push	dx			;AN000;
 23524 000018F0 56                      	push	si			;AN000;
 23525 000018F1 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 23526 000018F3 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 23527 000018F5 53                      	push	bx			;AN000; save control pointer
 23528                                  _$P_Value_Loop:				;AN000;
 23529 000018F6 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23530 000018F9 08C0                    	or	al,al			;AN000; end of line ?
 23531 000018FB 7442                    	jz	short _$P_Value00	;AN000;
 23532                                  
 23533 000018FD E8E600                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 23534 00001900 7239                    	jc	short _$P_Value_Err0	;AN000;
 23535                                  
 23536 00001902 30E4                    	xor	ah,ah			;AN000;
 23537 00001904 89C5                    	mov	bp,ax			;AN000; save binary number
 23538 00001906 D1E2                    	shl	dx,1			;AN000; to have 2*x
 23539 00001908 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23540 0000190A E8C700                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23541 0000190D 722C                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23542                                  
 23543 0000190F 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 23544 00001911 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 23545 00001913 D1E2                    	shl	dx,1			;AN000; to have 4*x
 23546 00001915 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23547 00001917 E8BA00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23548 0000191A 721F                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23549                                  
 23550 0000191C D1E2                    	shl	dx,1			;AN000; to have 8*x
 23551 0000191E D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23552 00001920 E8B100                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23553 00001923 7216                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23554                                  
 23555 00001925 01DA                    	add	dx,bx			;AN000; now have 10*x
 23556 00001927 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 23557 00001929 E8A800                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23558 0000192C 720D                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23559                                  
 23560 0000192E 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 23561 00001930 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 23562 00001933 E89E00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23563 00001936 7203                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23564                                  
 23565 00001938 46                      	inc	si			;AN000; update pointer
 23566 00001939 EBBB                    	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 23567                                  ;
 23568                                  _$P_Value_Err0:				;AN000;
 23569 0000193B 5B                      	pop	bx			;AN000;
 23570 0000193C E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 23571                                  ;
 23572                                  _$P_Value00:				;AN000;
 23573 0000193F 5B                      	pop	bx			;AN000; restore control pointer
 23574 00001940 2EF606[4714]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 23575 00001946 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 23576                                  
 23577 00001948 F7D1                    	not	cx			;AN000; +
 23578 0000194A F7D2                    	not	dx			;AN000; |- Make 2's complement
 23579 0000194C 83C201                  	add	dx,1			;AN000; |
 23580 0000194F 83D100                  	adc	cx,0			;AN000; +
 23581                                  
 23582                                  _$P_Value01:				;AN000; / nval =0
 23583 00001952 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 23584 00001956 268A04                  	mov	al,[es:si]		;AN000; get nval
 23585 00001959 3C00                    	cmp	al,_$P_nval_None 	;AN000; no value list ?
 23586                                  	;*jne	short _$P_Value02	;AN000;
 23587                                  	;* 14/08/2023
 23588 0000195B 7459                    	je	short _$P_Value05
 23589                                  
 23590                                  	;mov	al,_$P_Number		;AN000; Set type
 23591                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23592                                  	; 14/08/2023
 23593                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 23594                                  	;*jmp	short _$P_Value_Exit	;AN000;
 23595                                  
 23596                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 23597                                  	; (SYSINIT:1BA5h)
 23598                                  	; 12/12/2022
 23599                                  	;nop	; db  90h
 23600                                  
 23601                                  _$P_Value02:				;AN000; / nval = 1
 23602                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 23603                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 23604                                  ;(tm07) jne	short _$P_Value03	;AN000;
 23605                                  
 23606 0000195D 46                      	inc	si			;AN000;
 23607 0000195E 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 23608 00001961 3C00                    	cmp	al,_$P_No_nrng		;AN000; (tm07)
 23609 00001963 745D                    	je	short _$P_Value03	;AN000; (tm07)
 23610                                  
 23611 00001965 46                      	inc	si			;AN000; si points to 1st item_tag
 23612                                  _$P_Val02_Loop:				;AN000;
 23613 00001966 2EF606[4714]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 23614 0000196C 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 23615                                  
 23616 0000196E 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 23617 00001972 7234                    	jb	short _$P_Val02_Next	;AN000;
 23618 00001974 7706                    	ja	short _$P_Val_In	;AN000;
 23619                                  
 23620 00001976 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 23621 0000197A 722C                    	jb	short _$P_Val02_Next	;AN000;
 23622                                  
 23623                                  _$P_Val_In:				;AN000;
 23624 0000197C 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 23625 00001980 7726                    	ja	short _$P_Val02_Next	;AN000;
 23626 00001982 7237                    	jb	short _$P_Val_Found	;AN000;
 23627                                  
 23628 00001984 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 23629 00001988 771E                    	ja	short _$P_Val02_Next	;AN000;
 23630                                  
 23631 0000198A EB2F                    	jmp	short _$P_Val_Found	;AN000;
 23632                                  
 23633                                  _$P_Val02_Sign:				;AN000;
 23634 0000198C 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 23635 00001990 7C16                    	jl	short _$P_Val02_Next	;AN000;
 23636 00001992 7F06                    	jg	short _$P_SVal_In	;AN000;
 23637                                  
 23638 00001994 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 23639 00001998 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 23640                                  
 23641                                  _$P_SVal_In:				;AN000;
 23642 0000199A 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 23643 0000199E 7F08                    	jg	short _$P_Val02_Next	;AN000;
 23644                                  
 23645 000019A0 7C19                    	jl	short _$P_Val_Found	;AN000;
 23646                                  
 23647 000019A2 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 23648                                  	;jg	short _$P_Val02_Next	;AN000;
 23649                                  	;jmp	short _$P_Val_Found	;AN000;
 23650                                  	; 14/08/2023
 23651 000019A6 7E13                    	jng	short _$P_Val_Found
 23652                                  
 23653                                  _$P_Val02_Next:				;AN000;
 23654 000019A8 83C609                  	add	si,_$P_Len_Range 	;AN000;
 23655 000019AB FEC8                    	dec	al			;AN000; loop nrng times in AL
 23656 000019AD 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 23657                                  					; / Not found
 23658 000019AF 2EC706[3B14]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 23659                                  	;mov	al,_$P_Number		;AN000;
 23660                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23661                                  _$P_Value05:		;* 14/08/2023
 23662                                  	; 14/08/2023
 23663 000019B6 B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 23664 000019B9 EB11                    	jmp	short _$P_Value_Exit	;AN000;
 23665                                  
 23666                                  _$P_Val_Found:				;AN000;
 23667 000019BB B001                    	mov	al,_$P_Number		;AN000;
 23668 000019BD 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 23669 000019C0 EB0A                    	jmp	short _$P_Value_Exit	;AN000;
 23670                                  
 23671                                  _$P_Value03:				;AN000; / nval = 2
 23672                                  
 23673                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 23674                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 23675                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 23676                                  ;(tm07) inc	si			;AN000;
 23677                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 23678                                  ;	mov	ah,$P_Len_Range 	;AN000;
 23679                                  ;	mul	ah			;AN000;  Skip nrng field
 23680                                  ;	inc	ax			;AN000;
 23681                                  ;	add	si,ax			;AN000; si points to nnval
 23682                                  ;	mov	al,es:[si]		;AN000; get nnval
 23683                                  ;	inc	si			;AN000; si points to 1st item_tag
 23684                                  ;$P_Val03_Loop:				;AN000;
 23685                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 23686                                  ;	jne	$P_Val03_Next		;AN000;
 23687                                  ;
 23688                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 23689                                  ;	je	$P_Val_Found		;AN000;
 23690                                  ;
 23691                                  ;$P_Val03_Next:				;AN000;
 23692                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 23693                                  ;	dec	al			;AN000; loop nval times in AL
 23694                                  ;	jne	$P_Val03_Loop		;AN000;
 23695                                  ;					;AN000; / Not found
 23696                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 23697                                  ;	mov	al,$P_Number		;AN000;
 23698                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 23699                                  ;	jmp	short $P_Value_Exit	;AN000;
 23700                                  ;
 23701                                  ;ENDIF					;AN000;(of Val2SW)
 23702                                  ;$P_Value04:
 23703                                  
 23704                                  _$P_Value_Err:				;AN000;
 23705 000019C2 2EC706[3B14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23706                                  	;mov	al,_$P_String		;AN000; Set type
 23707                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23708                                  	; 14/08/2023
 23709 000019C9 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23710                                  _$P_Value_Exit:				;AN000;
 23711 000019CC E846FD                  	call	_$P_Fill_Result		;AN000;
 23712 000019CF 5E                      	pop	si			;AN000;
 23713 000019D0 5A                      	pop	dx			;AN000;
 23714 000019D1 59                      	pop	cx			;AN000;
 23715 000019D2 58                      	pop	ax			;AN000;
 23716 000019D3 C3                      	retn				;AN000;
 23717                                  
 23718                                  ; 28/03/2019 - Retro DOS v4.0
 23719                                  
 23720                                  ;***********************************************************************
 23721                                  ; _$P_Check_OVF
 23722                                  ;
 23723                                  ; Function:  Check if overflow is occurred with consideration of
 23724                                  ;	     signed or un-signed numeric value
 23725                                  ;
 23726                                  ; Input:     Flag register
 23727                                  ;
 23728                                  ; Output:    CY = 1  :	Overflow
 23729                                  ;
 23730                                  ; Vars:     _$P_Flags(R)
 23731                                  ;***********************************************************************
 23732                                  
 23733                                  	; 26/10/2022
 23734                                  _$P_Check_OVF:
 23735 000019D4 9C                      	pushf				;AN000;
 23736 000019D5 2EF606[4714]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 23737 000019DB 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 23738                                  
 23739 000019DD 9D                      	popf				;AN000; by the CY bit
 23740 000019DE C3                      	retn				;AN000;
 23741                                  
 23742                                  _$P_COVF:				;AN000;
 23743 000019DF 9D                      	popf				;AN000; else,
 23744 000019E0 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 23745                                  
 23746 000019E2 F8                      	clc				;AN000; indicate it with CY bit
 23747 000019E3 C3                      	retn				;AN000; CY=0 means no overflow
 23748                                  
 23749                                  _$P_COVF00:				;AN000;
 23750                                  _$P_0099Err: ; 14/08/2023
 23751 000019E4 F9                      	stc				;AN000; and CY=1 means overflow
 23752                                  _$P_0099Err2: ; 14/08/2023
 23753 000019E5 C3                      	retn				;AN000;
 23754                                  
 23755                                  ;***********************************************************************
 23756                                  ; _$P_0099;
 23757                                  ;
 23758                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 23759                                  ;
 23760                                  ; Input:     AL = character code
 23761                                  ;
 23762                                  ; Output:    CY = 1 : AL is not number
 23763                                  ;	     CY = 0 : AL contains binary value
 23764                                  ;***********************************************************************
 23765                                  
 23766                                  _$P_0099:
 23767 000019E6 3C30                    	cmp	al,"0"                  ;AN000;
 23768                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23769                                  	; 12/12/2022
 23770 000019E8 72FB                    	jb	short _$P_0099Err2  ; cf=1
 23771                                  
 23772 000019EA 3C39                    	cmp	al,"9"                  ;AN000;
 23773 000019EC 77F6                    	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23774                                  
 23775 000019EE 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 23776                                  	; 12/12/2022
 23777                                  	; cf=0	
 23778                                  	;clc				;AN000; indicate no error
 23779 000019F0 C3                      	retn				;AN000;
 23780                                  
 23781                                  	; 14/08/2023
 23782                                  ;_$P_0099Err:				;AN000;
 23783                                  ;	stc				;AN000; indicate error
 23784                                  ;_$P_0099Err2: ; 12/12/2022	
 23785                                  ;	retn				;AN000;
 23786                                  
 23787                                  ;***********************************************************************
 23788                                  ; _$P_Simple_String
 23789                                  ;
 23790                                  ; Function:  See value list for the simple string
 23791                                  ;	     and make result buffer.
 23792                                  ;
 23793                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23794                                  ;	     ES:BX -> CONTROL block
 23795                                  ;
 23796                                  ; Output:    None
 23797                                  ;
 23798                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 23799                                  ;
 23800                                  ; Vars: _$P_RC(W)
 23801                                  ;***********************************************************************
 23802                                  
 23803                                  _$P_Simple_String:
 23804 000019F1 50                      	push	ax			;AN000;
 23805 000019F2 53                      	push	bx			;AN000;
 23806 000019F3 52                      	push	dx			;AN000;
 23807 000019F4 57                      	push	di			;AN000;
 23808 000019F5 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 23809 000019F9 268A05                  	mov	al,[es:di]		;AN000; get nval
 23810 000019FC 08C0                    	or	al,al			;AN000; no value list ?
 23811 000019FE 7504                    	jnz	short _$P_Sim00		;AN000; then
 23812                                  
 23813 00001A00 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23814 00001A02 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 23815                                  
 23816                                  _$P_Sim00:				;AN000;
 23817                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 23818 00001A04 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 23819 00001A06 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 23820                                  
 23821 00001A08 47                      	inc	di			;AN000;
 23822 00001A09 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 23823 00001A0C B409                    	mov	ah,_$P_Len_Range 	;AN000;
 23824 00001A0E F6E4                    	mul	ah			;AN000; Skip nrng field
 23825 00001A10 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 23826 00001A11 01C7                    	add	di,ax			;AN000; di points to nnval
 23827 00001A13 268A05                  	mov	al,[es:di]		;AN000; get nnval
 23828 00001A16 B405                    	mov	ah,_$P_Len_Value 	;AN000;
 23829 00001A18 F6E4                    	mul	ah			;AN000; Skip nnval field
 23830 00001A1A 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 23831 00001A1B 01C7                    	add	di,ax			;AN000; di points to nstrval
 23832 00001A1D 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 23833 00001A20 47                      	inc	di			;AC035; add '2' to
 23834 00001A21 47                      	inc	di			;AC035;  DI reg
 23835                                  					;AN000; di points to 1st string in list
 23836                                  _$P_Sim_Loop:				;AN000;
 23837 00001A22 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 23838 00001A25 E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 23839 00001A28 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 23840                                  
 23841 00001A2A 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 23842 00001A2D FEC8                    	dec	al			;AN000; loop nstval times in AL
 23843 00001A2F 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 23844                                  					;AN000; / Not found
 23845 00001A31 2EC706[3B14]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 23846 00001A38 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23847 00001A3A EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 23848                                  
 23849                                  _$P_Sim_Found:				;AN000;
 23850 00001A3C 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 23851 00001A40 B002                    	mov	al,_$P_List_Idx		;AN000;
 23852 00001A42 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 23853 00001A45 EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 23854                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 23855                                  _$P_Sim01:				;AN000;
 23856 00001A47 2EC706[3B14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23857 00001A4E B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23858                                  _$P_Sim_Exit:				;AN000;
 23859 00001A50 B003                    	mov	al,_$P_String		;AN000; Set type
 23860                                  _$P_Sim_Exit0:				;AN000;
 23861 00001A52 E8C0FC                  	call	_$P_Fill_Result		;AN000;
 23862 00001A55 5F                      	pop	di			;AN000;
 23863 00001A56 5A                      	pop	dx			;AN000;
 23864 00001A57 5B                      	pop	bx			;AN000;
 23865 00001A58 58                      	pop	ax			;AN000;
 23866 00001A59 C3                      	retn				;AN000;
 23867                                  
 23868                                  ;***********************************************************************
 23869                                  ; _$P_String_Comp:
 23870                                  ;
 23871                                  ; Function:  Compare two string
 23872                                  ;
 23873                                  ; Input:     cs:SI -> 1st string
 23874                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 23875                                  ;	     ES:BX -> CONTROL block
 23876                                  ;
 23877                                  ; Output:    CY = 1 if not match
 23878                                  ;
 23879                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 23880                                  ;
 23881                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 23882                                  ;***********************************************************************
 23883                                  
 23884                                  _$P_String_Comp:
 23885 00001A5A 50                      	push	ax			;AN000;
 23886 00001A5B 55                      	push	bp			;AN000;
 23887 00001A5C 52                      	push	dx			;AN000;
 23888 00001A5D 56                      	push	si			;AN000;
 23889 00001A5E B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 23890                                  _$P_SCOM_Loop:				;AN000;
 23891 00001A60 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 23892 00001A63 E81602                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 23893 00001A66 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 23894                                  
 23895 00001A68 E820FE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 23896                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 23897 00001A6B 2EF606[4714]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 23898 00001A71 740D                    	jz	short _$P_SCOM04	;AN000;
 23899                                  
 23900 00001A73 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 23901 00001A75 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 23902                                  
 23903 00001A77 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 23904 00001A7C 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 23905                                  
 23906 00001A7E EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 23907                                  
 23908                                  _$P_SCOM04:				;AN000;
 23909 00001A80 2EF606[4714]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 23910 00001A86 740E                    	jz	short _$P_SCOM03	;AN000;
 23911                                  
 23912 00001A88 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 23913 00001A8A 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 23914                                  
 23915                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23916                                  	;cmp	byte [es:bp+0],_$P_NULL
 23917                                  	; 11/12/2022
 23918 00001A8C 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 23919 00001A91 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 23920                                  
 23921                                  _$P_SCOM05:				;AN000;   found a match
 23922 00001A93 46                      	inc	si			;AN000; si points to just after "=" or ":"
 23923 00001A94 EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 23924                                  
 23925                                  _$P_SCOM03:				;AN000;
 23926                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 23927                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23928                                  	;cmp	al,[es:bp+0]
 23929                                  	; 11/12/2022
 23930 00001A96 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 23931 00001A9A 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 23932                                  
 23933 00001A9C 08C0                    	or	al,al			;AN000; end of line
 23934 00001A9E 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 23935                                  
 23936                                  	; 12/12/2022
 23937                                  	;inc	si			;AN000; update operand pointer
 23938                                  	;inc	bp			;AN000;    and synonym pointer
 23939                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23940 00001AA0 EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 23941                                  
 23942                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 23943                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23944                                  	;cmp	al,[es:bp+0]
 23945                                  	; 11/12/2022
 23946 00001AA2 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 23947 00001AA6 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 23948                                  
 23949 00001AA8 46                      	inc	si			;AN000; else, load next byte
 23950 00001AA9 2E8A04                  	mov	al,[cs:si]		;AN000; and
 23951 00001AAC 45                      	inc	bp			;AN000;
 23952                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23953                                  	;cmp	al,[es:bp+0]
 23954                                  	; 11/12/2022
 23955 00001AAD 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 23956 00001AB1 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 23957                                  
 23958                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23959                                  	; 12/12/2022
 23960                                  _$P_SCOM01:
 23961 00001AB3 46                      	inc	si			;AN000; else update operand pointer
 23962 00001AB4 45                      	inc	bp			;AN000; 		and synonym pointer
 23963                                  ;_$P_SCOM01:				;AN000;
 23964 00001AB5 EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 23965                                  
 23966                                  _$P_SCOM_Differ0:			;AN000;
 23967                                  ;IF SwSW				;AN000;(tm10)
 23968 00001AB7 2EF606[4714]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 23969 00001ABD 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 23970                                  
 23971                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23972                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 23973                                  	; 12/12/2022
 23974 00001ABF 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 23975 00001AC4 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 23976                                  
 23977                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23978                                  	;cmp	byte [es:bp+0],_$P_NULL
 23979                                  	; 11/12/2022
 23980 00001AC6 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 23981                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 23982 00001ACB 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 23983                                  
 23984                                  _$P_not_applicable:			;AN000;(tm10)
 23985                                  ;ENDIF					;AN000;(tm10)
 23986                                  
 23987                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 23988                                  					;AN000; ignore colon option specified ?
 23989                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 23990                                  	; 12/12/2022
 23991 00001ACD 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 23992                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23993                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 23994 00001AD1 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 23995                                  
 23996 00001AD3 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 23997 00001AD5 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 23998                                  
 23999                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24000                                  	;cmp	byte [es:bp+0],_$P_NULL
 24001                                  	; 11/12/2022
 24002 00001AD7 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 24003 00001ADC 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 24004                                  
 24005 00001ADE EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 24006                                  
 24007                                  _$P_SCOM02:				;AN000;
 24008 00001AE0 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 24009 00001AE2 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 24010                                  
 24011                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24012                                  	;cmp	byte [es:bp+0],_$P_Colon
 24013                                  	; 11/12/2022
 24014 00001AE4 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 24015 00001AE9 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 24016                                  
 24017                                  _$P_SCOM_Differ: 			;AN000;
 24018 00001AEB F9                      	stc				;AN000; indicate not found
 24019 00001AEC EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 24020                                  
 24021                                  _$P_SCOM_Same:				;AN000;
 24022                                  	; 12/12/2022
 24023                                  	; cf=0
 24024 00001AEE 2E8936[4A14]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 24025                                  	; 12/12/2022
 24026                                  	;clc				;AN000; indicate found
 24027                                  _$P_SCOM_Exit:				;AN000;
 24028 00001AF3 5E                      	pop	si			;AN000;
 24029 00001AF4 5A                      	pop	dx			;AN000;
 24030 00001AF5 5D                      	pop	bp			;AN000;
 24031 00001AF6 58                      	pop	ax			;AN000;
 24032 00001AF7 C3                      	retn
 24033                                  
 24034                                  ; 30/03/2019
 24035                                  
 24036                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 24037                                  
 24038                                  ;***********************************************************************
 24039                                  ; _$P_File_Format;
 24040                                  ;
 24041                                  ; Function:  Check if the input string is valid file spec format.
 24042                                  ;	     And set the result buffer.
 24043                                  ;
 24044                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24045                                  ;	     ES:BX -> CONTROL block
 24046                                  ;
 24047                                  ; Output:    None
 24048                                  ;
 24049                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 24050                                  ;
 24051                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 24052                                  ;	_$P_SaveSI_Cmpx(R)
 24053                                  ;***********************************************************************
 24054                                  
 24055                                  _$P_File_Format:
 24056 00001AF8 50                      	push	ax			;AN000;
 24057 00001AF9 57                      	push	di			;AN000;
 24058 00001AFA 56                      	push	si			;AN000;
 24059 00001AFB 2E8B3E[4814]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 24060                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 24061 00001B00 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 24062 00001B03 08C0                    	or	al,al			;AN000; end of line ?
 24063 00001B05 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 24064                                  
 24065 00001B07 E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 24066 00001B0A 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 24067                                  
 24068 00001B0C 2EC606[DE14]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 24069                                  					;AN033;AC034;; set error flag- bad char.
 24070 00001B12 5E                      	pop	si			;AN033;
 24071 00001B13 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 24072 00001B17 5F                      	pop	di			;AN033;
 24073 00001B18 EB3E                    	jmp	short _$P_FileF02	;AN033;
 24074                                  
 24075                                  _$P_FileF_Err:				;AN000;
 24076 00001B1A 5E                      	pop	si			;AN000;
 24077 00001B1B 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 24078 00001B1F 5F                      	pop	di			;AN000;
 24079                                  
 24080                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 24081                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 24082                                  	; 12/12/2022
 24083 00001B20 26F60701                	test	byte [es:bx],_$P_Optional
 24084                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24085                                  	;test	word [es:bx],_$P_Optional
 24086 00001B24 7532                    	jnz	short _$P_FileF02	;AN000;
 24087                                  
 24088 00001B26 2EC706[3B14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 24089 00001B2D EB29                    	jmp	short _$P_FileF02	;AN000;
 24090                                  
 24091                                  _$P_FileF03:				;AN000;
 24092 00001B2F 58                      	pop	ax			;AN000; discard save si
 24093 00001B30 56                      	push	si			;AN000; save new si
 24094                                  _$P_FileF_Loop1: 			;AN000;
 24095 00001B31 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 24096 00001B34 08C0                    	or	al,al			;AN000; end of line ?
 24097 00001B36 741E                    	jz	short _$P_FileF_RLT	;AN000;
 24098                                  
 24099 00001B38 E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 24100 00001B3B 740B                    	je	short _$P_FileF00	;AN000;
 24101                                  
 24102 00001B3D E83C01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 24103 00001B40 7302                    	jnc	short _$P_FileF01	;AN000;
 24104 00001B42 47                      	inc	di			;AN000; if yes, skip next byte
 24105 00001B43 46                      	inc	si			;AN000;
 24106                                  _$P_FileF01:				;AN000;
 24107 00001B44 47                      	inc	di			;AN000;
 24108 00001B45 46                      	inc	si			;AN000;
 24109 00001B46 EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 24110                                  ;
 24111                                  _$P_FileF00:				;AN000;
 24112 00001B48 2EA2[4114]              	mov	[cs:_$P_Terminator],al	;AC034;
 24113 00001B4C 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 24114 00001B50 47                      	inc	di			;AN000;
 24115 00001B51 2E893E[3D14]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 24116                                  _$P_FileF_RLT:				;AN000;
 24117 00001B56 5E                      	pop	si			;AN000;
 24118 00001B57 5F                      	pop	di			;AN000;
 24119                                  _$P_FileF02:				;AN000;
 24120 00001B58 58                      	pop	ax			;AN000; (tm14)
 24121                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 24122                                  	; 14/08/2023
 24123 00001B59 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 24124 00001B5C 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 24125                                  
 24126 00001B5E 50                      	push	ax			;AN000;  (tm14)
 24127                                  	;mov	ah,_$P_No_Tag		;AN000; set
 24128                                  	;mov	al,_$P_File_Spec 	;AN000; result
 24129                                  	; 14/08/2023
 24130 00001B5F B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 24131                                  					      ; set result
 24132 00001B62 E8B0FB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 24133 00001B65 58                      	pop	ax			;AN000;
 24134                                  
 24135                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 24136 00001B66 C3                      	retn				;AN000;
 24137                                  
 24138                                  ;***********************************************************************
 24139                                  ; _$P_FileSp_Chk
 24140                                  ;
 24141                                  ; Function:  Check if the input byte is one of file special characters
 24142                                  ;
 24143                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24144                                  ;	     AL = character code to be examineed
 24145                                  ;
 24146                                  ; Output:    ZF = 1 , AL is one of special characters
 24147                                  ;***********************************************************************
 24148                                  
 24149                                  _$P_FileSp_Chk:
 24150 00001B67 53                      	push	bx			;AN000;
 24151 00001B68 51                      	push	cx			;AN000;
 24152                                  	;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 24153 00001B69 8D1E[D514]              	lea	bx,[_$P_FileSp_Char]
 24154 00001B6D B90900                  	mov	cx,_$P_FileSp_Len	;AN000; load length of it
 24155                                  _$P_FileSp_Loop: 			;AN000;
 24156 00001B70 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 24157 00001B73 7404                    	je	short _$P_FileSp_Exit	;AN000;
 24158                                  
 24159 00001B75 43                      	inc	bx			;AN000;
 24160 00001B76 E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 24161                                  
 24162 00001B78 41                      	inc	cx			;AN000; reset ZF
 24163                                  _$P_FileSp_Exit: 			;AN000;
 24164 00001B79 59                      	pop	cx			;AN000;
 24165 00001B7A 5B                      	pop	bx			;AN000;
 24166 00001B7B C3                      	retn
 24167                                  
 24168                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 24169                                  
 24170                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 24171                                  
 24172                                  ;***********************************************************************
 24173                                  ; _$P_Drive_Format;
 24174                                  ;
 24175                                  ; Function:  Check if the input string is valid drive only format.
 24176                                  ;	     And set the result buffer.
 24177                                  ;
 24178                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24179                                  ;	     ES:BX -> CONTROL block
 24180                                  ;
 24181                                  ; Output:    None
 24182                                  ;
 24183                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 24184                                  ;
 24185                                  ; Vars: _$P_RC(W)
 24186                                  ;***********************************************************************
 24187                                  
 24188                                  _$P_Drive_Format:
 24189 00001B7C 50                      	push	ax			;AN000;
 24190 00001B7D 52                      	push	dx			;AN000;
 24191 00001B7E 2E8A04                  	mov	al,[cs:si]		;AN000;
 24192 00001B81 08C0                    	or	al,al			;AN000; if null string
 24193 00001B83 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 24194                                  
 24195 00001B85 E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 24196 00001B88 722A                    	jc	short _$P_Drv_Err	;AN000;
 24197                                  
 24198 00001B8A 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 24199 00001B8F 740D                    	je	short _$P_DrvF00	;AN000;
 24200                                  
 24201                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24202                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 24203                                  	; 12/12/2022
 24204 00001B91 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24205                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24206                                  	;test	word [es:bx],_$P_Ig_Colon
 24207 00001B95 741D                    	jz	short _$P_Drv_Err	;AN000;
 24208                                  
 24209 00001B97 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 24210 00001B9C 7516                    	jne	short _$P_Drv_Err	;AN000;
 24211                                  
 24212                                  _$P_DrvF00:				;AN000;
 24213 00001B9E 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 24214 00001BA0 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 24215 00001BA2 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 24216                                  
 24217 00001BA4 3C7A                    	cmp	al,"z"                  ;AN000; "a" - "z"
 24218 00001BA6 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 24219                                  
 24220 00001BA8 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 24221 00001BAA 88C2                    	mov	dl,al			;AN000; set
 24222                                  	;mov	ah,_$P_No_Tag		;AN000; result
 24223                                  	;mov	al,_$P_Drive		;AN000; buffer
 24224                                  	; 08/07/2023
 24225 00001BAC B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 24226                                  					      ; set result buffer
 24227 00001BAF E863FB                  	call	_$P_Fill_Result		;AN000; to drive
 24228 00001BB2 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 24229                                  
 24230                                  _$P_Drv_Err:				;AN000;
 24231 00001BB4 2EC706[3B14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24232                                  _$P_Drv_Exit:				;AN000;
 24233 00001BBB 5A                      	pop	dx			;AN000;
 24234 00001BBC 58                      	pop	ax			;AN000;
 24235 00001BBD C3                      	retn				;AN000;
 24236                                  
 24237                                  ;ENDIF					;AN000;(of DrvSW)
 24238                                  
 24239                                  ;***********************************************************************
 24240                                  ; _$P_Skip_Delim;
 24241                                  ;
 24242                                  ; Function: Skip delimiters specified in the PARMS list, white space
 24243                                  ;	    and comma.
 24244                                  ;
 24245                                  ; Input:    DS:SI -> Command String
 24246                                  ;	    ES:DI -> Parameter List
 24247                                  ;
 24248                                  ; Output:   CY = 1 if the end of line encounterd
 24249                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 24250                                  ;	    AL = Last examineed character
 24251                                  ;
 24252                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 24253                                  ;
 24254                                  ; Vars:     _$P_Flags(R)
 24255                                  ;***********************************************************************
 24256                                  
 24257                                  _$P_Skip_Delim:
 24258                                  _$P_Skip_Delim_Loop:			;AN000;
 24259 00001BBE AC                      	lodsb				;AN000;
 24260 00001BBF E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 24261 00001BC2 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 24262                                  
 24263 00001BC4 E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 24264 00001BC7 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 24265                                  
 24266 00001BC9 2EF606[4714]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 24267 00001BCF 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 24268                                  
 24269 00001BD1 2EF606[4714]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 24270                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 24271                                  	; 14/08/2023
 24272                                  	; cf=0
 24273 00001BD7 7505                    	jnz	short _$P_Skip_Delim_Exit
 24274 00001BD9 C3                      	retn
 24275                                  
 24276                                  	;dec	si			;AN000; backup si for next call (tm08)
 24277                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 24278                                  	; 12/12/2022
 24279                                  	; cf=0
 24280                                  	; 14/08/2023
 24281                                  	;jmp	short _$P_Skip_Delim_Exit
 24282                                  
 24283                                  _$P_Skip_Delim_CY:			;AN000;
 24284 00001BDA F9                      	stc				;AN000; indicate EOL
 24285 00001BDB EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 24286                                  
 24287                                  _$P_Skip_Delim_NCY:			;AN000;
 24288 00001BDD F8                      	clc				;AN000; indicate non delim
 24289                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 24290 00001BDE 4E                      	dec	si			;AN000;  backup index pointer
 24291                                  	; 14/08/2023
 24292                                  	; 12/12/2022
 24293                                  ;_$P_Exit_At_Extra:	 ; cf=0
 24294 00001BDF C3                      	retn				;AN000;
 24295                                  
 24296                                  	; 12/12/2022
 24297                                  ;_$P_Exit_At_Extra:			;AN000;
 24298                                  	;clc				;AN000; indicate extra delim
 24299                                  	;retn				;AN000;
 24300                                  
 24301                                  ;***********************************************************************
 24302                                  ; _$P_Chk_EOL;
 24303                                  ;
 24304                                  ; Function: Check if AL is one of End of Line characters.
 24305                                  ;
 24306                                  ; Input:    AL = character code
 24307                                  ;	    ES:DI -> Parameter List
 24308                                  ;
 24309                                  ; Output:   ZF = 1 if one of End of Line characters
 24310                                  ;**********************************************************************
 24311                                  
 24312                                  _$P_Chk_EOL:
 24313 00001BE0 53                      	push	bx			;AN000;
 24314 00001BE1 51                      	push	cx			;AN000;
 24315 00001BE2 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 24316 00001BE4 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24317                                  
 24318 00001BE6 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 24319 00001BE8 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24320                                  
 24321                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 24322 00001BEA 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 24323 00001BEC 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24324                                  ;ENDIF					;AN028;
 24325                                  
 24326 00001BEE 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 24327                                  					;AN000; EOL character specified ?
 24328 00001BF3 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 24329                                  
 24330 00001BF5 31DB                    	xor	bx,bx			;AN000;
 24331 00001BF7 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 24332                                  					;AN000; get length of delimiter list
 24333 00001BFB 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 24334                                  	; 14/08/2023
 24335 00001BFE 31C9                    	xor	cx,cx ; *
 24336 00001C00 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 24337 00001C04 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 24338                                  	; 14/08/2023
 24339                                  	;;xor	cx,cx			;AN000; Get number of extra character
 24340                                  	;xor	ch,ch ; *
 24341 00001C06 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 24342                                  _$P_Chk_EOL_Loop:			;AN000;
 24343 00001C09 43                      	inc	bx			;AN000;
 24344 00001C0A 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 24345 00001C0D 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24346 00001C0F E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 24347                                  	; 14/08/2023
 24348                                  	; cx=0
 24349                                  _$P_Chk_EOL_NZ:				;AN000;
 24350                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 24351                                  	; 14/08/2023
 24352 00001C11 41                      	inc	cx  ; zf=0 (cx=1) ; *
 24353                                  _$P_Chk_EOL_Exit:			;AN000;
 24354 00001C12 59                      	pop	cx			;AN000;
 24355 00001C13 5B                      	pop	bx			;AN000;
 24356 00001C14 C3                      	retn
 24357                                  
 24358                                  ;***********************************************************************
 24359                                  ; _$P_Chk_Delim;
 24360                                  ;
 24361                                  ; Function: Check if AL is one of delimiter characters.
 24362                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 24363                                  ;	    blanks.
 24364                                  ;
 24365                                  ; Input:    AL = character code
 24366                                  ;	    DS:SI -> Next Character
 24367                                  ;	    ES:DI -> Parameter List
 24368                                  ;
 24369                                  ; Output:   ZF = 1 if one of delimiter characters
 24370                                  ;	    SI points to the next character
 24371                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 24372                                  ;***********************************************************************
 24373                                  
 24374                                  _$P_Chk_Delim:
 24375 00001C15 53                      	push	bx			;AN000;
 24376 00001C16 51                      	push	cx			;AN000;
 24377 00001C17 2EC606[4114]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 24378                                  					;AC034; Assume terminated by space
 24379                                  	;and	byte [cs:_$P_Flags20,0DFh
 24380 00001C1D 2E8026[4714]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 24381 00001C23 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 24382 00001C25 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24383                                  
 24384 00001C27 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 24385 00001C29 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24386                                  
 24387 00001C2B 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 24388 00001C2D 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24389                                  
 24390                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 24391                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 24392                                  ;        Erdogan Tan - 14/08/2023
 24393                                  ;_$P_Chk_Delim00:
 24394                                  %if 0
 24395                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24396                                  _$P_Chk_Delim00: 			;AN000;
 24397                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 24398                                  	jne	short _$P_Chk_Delim01	;AN000;
 24399                                  
 24400                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 24401                                  	jne	short _$P_Chk_Delim01	;AN000;
 24402                                  
 24403                                  	mov	al,_$P_Space		;AN000;
 24404                                  	inc	si			;AN000; make si point to next character
 24405                                  	cmp	al,al			;AN000; Set ZF
 24406                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24407                                  %endif
 24408                                  
 24409                                  _$P_Chk_Delim01: 			;AN000;
 24410 00001C2F 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 24411                                  					;AN000; delimiter character specified ?
 24412 00001C34 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 24413                                  
 24414                                  	;xor	cx,cx			;AN000;
 24415 00001C36 30ED                    	xor	ch,ch
 24416                                  	;mov	cl,[es:di+3]
 24417 00001C38 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 24418                                  					;AN000; get length of delimiter list
 24419                                  	;or	cx,cx			;AN000; No extra Delim character ?
 24420                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 24421                                  	; 14/08/2023
 24422 00001C3C E30B                    	jcxz	_$P_Chk_Delim_NZ
 24423                                  
 24424 00001C3E BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 24425                                  _$P_Chk_Delim_Loop:			;AN000;
 24426 00001C41 43                      	inc	bx			;AN000;
 24427 00001C42 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 24428 00001C45 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24429                                  
 24430 00001C47 E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 24431                                  
 24432                                  _$P_Chk_Delim_NZ:			;AN000;
 24433                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 24434                                  	; 14/08/2023
 24435                                  	; cx=0 here
 24436 00001C49 41                      	inc	cx ; cx=1, zf=0
 24437                                  _$P_Chk_Delim_Exit:			;AN000;
 24438                                  _$P_ChkDfin:				;AN000;
 24439 00001C4A 59                      	pop	cx			;AN000;
 24440 00001C4B 5B                      	pop	bx			;AN000;
 24441 00001C4C C3                      	retn				;AN000;
 24442                                  
 24443                                  _$P_Chk_Delim_Exit0:			;AN000;
 24444 00001C4D 2EA2[4114]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 24445 00001C51 2EF606[4714]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 24446 00001C57 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 24447                                  
 24448 00001C59 2E800E[4714]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 24449                                  					;AC034; flag terminated extra delimiter or comma
 24450                                  _$P_No_Set_Extra:			;AN027;
 24451 00001C5F 38C0                    	cmp	al,al			;AN000; set ZF
 24452 00001C61 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24453                                  
 24454                                  
 24455                                  ;***********************************************************************
 24456                                  ; _$P_Chk_Switch;
 24457                                  ;
 24458                                  ; Function: Check if AL is the switch character not in first position of
 24459                                  ;	    _$P_STRING_BUF
 24460                                  ;
 24461                                  ; Input:    AL = character code
 24462                                  ;	    BX = current pointer within _$P_String_Buf
 24463                                  ;	    SI =>next char on command line (following the one in AL)
 24464                                  ;
 24465                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 24466                                  ;		 position, and has no chance of being part of a date string,
 24467                                  ;		 i.e. should be treated as a delimiter.
 24468                                  
 24469                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 24470                                  ;		 position, or is a slash but may be part of a date string, i.e.
 24471                                  ;		 should not be treated as a delimiter.
 24472                                  ;
 24473                                  ; Vars:  _$P_Terminator(W)
 24474                                  
 24475                                  ; Use:	 _$P_0099
 24476                                  ;***********************************************************************
 24477                                  
 24478                                  _$P_Chk_Switch:
 24479                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 24480                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 24481                                  	; 14/08/2023
 24482 00001C63 BD[5014]                	mov	bp,_$P_STRING_BUF
 24483                                  
 24484                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 24485 00001C66 39EB                    	cmp	bx,bp			;AN000;
 24486 00001C68 7406                    	je	short _$P_STRUC_L2	;AN000;
 24487                                  
 24488                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 24489 00001C6A 3C2F                    	cmp	al,_$P_Switch		;AN000;
 24490 00001C6C 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 24491                                  
 24492 00001C6E F9                      	stc				;AN020;not in first position and is slash
 24493                                  	;jmp     short _$P_STRUC_L1	;AN000;
 24494                                  	; 12/12/2022
 24495 00001C6F C3                      	retn
 24496                                  
 24497                                  ; 12/12/2022
 24498                                  ;_$P_STRUC_L5:				;AN000;
 24499                                  ;	CLC				;AN020;not a slash
 24500                                  ;;	    .ENDIF			;AN020;
 24501                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 24502                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 24503                                  
 24504                                  _$P_STRUC_L2:				;AN000;
 24505                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;
 24506 00001C70 3C2F                    	cmp     al,_$P_Switch		;AN000;
 24507 00001C72 7506                    	jne	short _$P_STRUC_L12	;AN000;
 24508                                  
 24509 00001C74 2E800E[4714]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020;AC034;;could be valid switch, first char and is slash
 24510                                  ;	    .ENDIF			;AN020;
 24511                                  
 24512                                  	; 12/12/2022
 24513                                  	; cf=0
 24514                                  	;retn
 24515                                  
 24516                                  _$P_STRUC_L5:
 24517                                  	; 12/12/2022
 24518                                  _$P_STRUC_L12:				;AN000;
 24519 00001C7A F8                      	clc				;AN020;CF=0 indicating first char
 24520                                  ;	.ENDIF				;AN020;
 24521                                  _$P_STRUC_L1:				;AN000;
 24522 00001C7B C3                      	retn				;AN000;
 24523                                  
 24524                                  ;**************************************************************************
 24525                                  ; _$P_Chk_DBCS:
 24526                                  ;
 24527                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 24528                                  ;
 24529                                  ;  Input:
 24530                                  ;	  AL	= Code to be examineed
 24531                                  ;
 24532                                  ;  Output:
 24533                                  ;	  If CF is on then a lead byte of DBCS
 24534                                  ;
 24535                                  ; Use: INT 21h w/AH=63
 24536                                  ;
 24537                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 24538                                  ;***************************************************************************
 24539                                  
 24540                                  _$P_Chk_DBCS:
 24541 00001C7C 1E                      	push	ds			;AN000;
 24542 00001C7D 56                      	push	si			;AN000;
 24543 00001C7E 53                      	push	bx			;AN000; (tm11)
 24544                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 24545                                  	;jne	short _$P_DBCS00	;AN000;
 24546                                  	; 14/08/2023
 24547 00001C7F 2E8B36[4414]            	mov	si,[cs:_$P_DBCSEV_SEG]
 24548 00001C84 21F6                    	and	si,si ; 0 ?
 24549 00001C86 7525                    	jnz	short _$P_DBCS00 ; already set
 24550 00001C88 50                      	push	ax			;AN000;
 24551 00001C89 1E                      	push	ds			;AN000; (tm11)
 24552 00001C8A 51                      	push	cx			;AN000;
 24553 00001C8B 52                      	push	dx			;AN000;
 24554 00001C8C 57                      	push	di			;AN000;
 24555 00001C8D 55                      	push	bp			;AN000;
 24556 00001C8E 06                      	push	es			;AN000;
 24557                                  	; si = 0 ; 14/08/2023
 24558                                  	;xor	si,si			;AN000;
 24559 00001C8F 8EDE                    	mov	ds,si ; 0		;AN000;
 24560 00001C91 B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 24561 00001C94 CD21                    	int	21h			;AN000;
 24562                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 24563 00001C96 8CDB                    	mov	bx,ds			;AN000; (tm11)
 24564 00001C98 09DB                    	or	bx,bx			;AN000; (tm11)
 24565 00001C9A 07                      	pop	es			;AN000;
 24566 00001C9B 5D                      	pop	bp			;AN000;
 24567 00001C9C 5F                      	pop	di			;AN000;
 24568 00001C9D 5A                      	pop	dx			;AN000;
 24569 00001C9E 59                      	pop	cx			;AN000;
 24570 00001C9F 1F                      	pop	ds			;AN000; (tm11)
 24571 00001CA0 58                      	pop	ax			;AN000;
 24572 00001CA1 7424                    	jz	short _$P_NON_DBCS	;AN000;
 24573                                  _$P_DBCS02:				;AN000;
 24574 00001CA3 2E8936[4214]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 24575 00001CA8 2E891E[4414]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 24576                                  _$P_DBCS00:				;AN000;
 24577                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 24578                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 24579                                  	; 14/08/2023
 24580 00001CAD 2EC536[4214]            	lds	si,[cs:_$P_DBCSEV_OFF]
 24581                                  _$P_DBCS_LOOP:				;AN000;
 24582 00001CB2 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 24583 00001CB5 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 24584 00001CB7 3A04                    	cmp	al,[si] 		;AN000;
 24585 00001CB9 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 24586 00001CBB 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 24587 00001CBE 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 24588 00001CC0 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 24589 00001CC1 EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 24590                                  _$P_DBCS01:				;AN000;
 24591 00001CC3 46                      	inc	si			;AC035; add '2' to
 24592 00001CC4 46                      	inc	si			;AC035;  SI reg
 24593                                  					;AN000; get next vector
 24594 00001CC5 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 24595                                  _$P_NON_DBCS:				;AN000;
 24596                                  	; 12/12/2022
 24597                                  	; cf=0
 24598                                  	;clc				;AN000; indicate SBCS
 24599                                  _$P_DBCS_EXIT:				;AN000;
 24600 00001CC7 5B                      	pop	bx			;AN000; (tm11)
 24601 00001CC8 5E                      	pop	si			;AN000;
 24602 00001CC9 1F                      	pop	ds			;AN000;
 24603 00001CCA C3                      	retn				;AN000;
 24604                                  
 24605                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 24606                                  ; ======================================================================
 24607                                  ; 27/03/2019 - Retro DOS v4.0
 24608                                  
 24609                                  ;control block definitions for parser.
 24610                                  ;-----------------------------------------------------------------------
 24611                                  ; buffer = [n | n,m] {/e}
 24612                                  
 24613                                  ; 30/03/2019
 24614                                  
 24615                                  struc p_parms
 24616 00000000 ????                    	resw	1	; dw ?
 24617 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 24618 00000003 ??                      	resb	1	; db 1	; length is 1
 24619 00000004 ??                      	resb 	1	; db ';' ; delimiter
 24620                                  .size:
 24621                                  endstruc
 24622                                  
 24623                                  struc p_pos
 24624 00000000 ????                    	resw	1	; dw ?	; numeric value??
 24625 00000002 ????                    	resw	1	; dw ?	; function
 24626 00000004 ????                    	resw	1	; dw ?	; result value buffer
 24627                                  
 24628                                  ; note: by defining result_val before this structure, we could remove
 24629                                  ;  the "result_val" from every structure invocation
 24630                                  
 24631 00000006 ????                    	resw	1	; dw ?	; value list
 24632 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 24633                                  .size:
 24634                                  endstruc
 24635                                  
 24636                                  struc	p_range
 24637 00000000 ??                      	resb	1	; db 1	; range definition
 24638 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 24639 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 24640 00000003 ????????                	resd	1	; dd ?	; numeric min
 24641 00000007 ????????                	resd	1	; dd ?	; numeric max
 24642                                  .size:
 24643                                  endstruc
 24644                                  
 24645                                  ;-----------------------------------------------------------------------
 24646                                  
 24647                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24648                                  	; (SYSINIT:1F48h)
 24649                                  
 24650                                  ; buffer = [n | n,m] {/e}
 24651                                  
 24652                                  ;buf_parms p_parms <buf_parmsx>
 24653                                  buf_parms: 
 24654 00001CCB [D01C]                  	dw	buf_parmsx
 24655 00001CCD 01                      	db	1	; an extra delimiter list
 24656 00001CCE 01                      	db	1	; length is 1
 24657 00001CCF 3B                      	db	';'	; delimiter
 24658                                  
 24659                                  buf_parmsx:
 24660 00001CD0 0102[DA1C][EE1C]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 24661 00001CD6 01                      	db	1			; one switch
 24662 00001CD7 [021D]                  	dw	sw_x_ctrl
 24663 00001CD9 00                      	db	0			; no keywords
 24664                                  
 24665                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 24666                                  buf_pos1:
 24667 00001CDA 0080                    	dw	8000h	; numeric value??
 24668 00001CDC 0000                    	dw	0	; function
 24669 00001CDE [141D]                  	dw	result_val ; result value buffer	
 24670 00001CE0 [E31C]                  	dw	buf_range_1 ; value list
 24671 00001CE2 00                      	db	0  	; no switches/keywords
 24672                                  
 24673                                  ;buf_range_1 p_range <,,,1,99>		; M050
 24674                                  buf_range_1:
 24675 00001CE3 01                      	db	1	; range definition
 24676 00001CE4 01                      	db	1	; 1 definition of range
 24677 00001CE5 01                      	db	1	; item tag for this range
 24678 00001CE6 01000000                	dd	1	; numeric min
 24679 00001CEA 63000000                	dd	99	; numeric max
 24680                                  
 24681                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 24682                                  buf_pos2:
 24683 00001CEE 0180                    	dw	8001h
 24684 00001CF0 0000                    	dw	0
 24685 00001CF2 [141D]                  	dw	result_val	
 24686 00001CF4 [F71C]                  	dw	buf_range_2
 24687 00001CF6 00                      	db	0
 24688                                  
 24689                                  ;buf_range_2 p_range <,,,0,8>
 24690                                  buf_range_2:
 24691 00001CF7 01                      	db	1
 24692 00001CF8 01                      	db	1
 24693 00001CF9 01                      	db	1
 24694 00001CFA 00000000                	dd	0
 24695 00001CFE 08000000                	dd	8
 24696                                  
 24697                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 24698                                  sw_x_ctrl:
 24699 00001D02 0000                    	dw	0
 24700 00001D04 0000                    	dw	0
 24701 00001D06 [141D]                  	dw	result_val	
 24702 00001D08 [131D]                  	dw	noval
 24703 00001D0A 01                      	db	1	; 1 switch
 24704                                  	
 24705                                  switch_x:
 24706 00001D0B 2F5800                  	db	'/X',0		; M016
 24707                                  
 24708                                  p_buffers:
 24709 00001D0E 0000                    	dw	0	; local variables
 24710                                  p_h_buffers:
 24711 00001D10 0000                    	dw	0
 24712                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24713                                  p_buffer_slash_x:
 24714 00001D12 00                      	db	0 ; 31/03/2019
 24715                                  
 24716                                  ;-- common definitions -------------------------------------------------
 24717                                  
 24718 00001D13 00                      noval:	db	0
 24719                                  
 24720                                  result_val: 	;label	byte
 24721 00001D14 00                      	db	0		; type returned
 24722                                  result_val_itag:
 24723 00001D15 00                      	db	0		; item tag returned
 24724                                  result_val_swoff:
 24725 00001D16 0000                    	dw	0		; es:offset of the switch defined
 24726                                  rv_byte:	;label	byte
 24727 00001D18 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 24728                                  
 24729                                  ;-----------------------------------------------------------------------
 24730                                  
 24731                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24732                                  	; (SYSINIT:1F99h)
 24733                                  
 24734                                  ; break = [ on | off ]
 24735                                  
 24736                                  ;brk_parms p_parms  <brk_parmsx>
 24737                                  brk_parms:
 24738 00001D1C [211D]                  	dw	brk_parmsx
 24739 00001D1E 01                      	db	1	; an extra delimiter list
 24740 00001D1F 01                      	db	1	; length is 1
 24741 00001D20 3B                      	db	';'	; delimiter
 24742                                  
 24743                                  brk_parmsx:
 24744 00001D21 0101[271D]              	dw	101h,brk_pos	; min,max = 1 positional
 24745 00001D25 00                      	db	0		; no switches
 24746 00001D26 00                      	db	0		; no keywords
 24747                                  
 24748                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 24749                                  brk_pos:
 24750 00001D27 0020                    	dw	2000h
 24751 00001D29 0000                    	dw	0
 24752 00001D2B [141D]                  	dw	result_val	
 24753 00001D2D [301D]                  	dw	on_off_string
 24754 00001D2F 00                      	db	0
 24755                                  
 24756                                  on_off_string:	;label	byte
 24757 00001D30 03                      	db	3		; signals that there is a string choice
 24758 00001D31 00                      	db	0		; no range definition
 24759 00001D32 00                      	db	0		; no numeric values choice
 24760 00001D33 02                      	db	2		; 2 strings for choice
 24761 00001D34 01                      	db	1		; the 1st string tag
 24762 00001D35 [3A1D]                  	dw	on_string
 24763 00001D37 02                      	db	2		; the 2nd string tag
 24764 00001D38 [3D1D]                  	dw	off_string
 24765                                  
 24766                                  on_string:
 24767 00001D3A 4F4E00                  	db	"ON",0
 24768                                  off_string:
 24769 00001D3D 4F464600                	db	"OFF",0
 24770                                  
 24771                                  p_ctrl_break:
 24772 00001D41 00                      	db	0	; local variable
 24773                                  
 24774                                  ;-----------------------------------------------------------------------
 24775                                  
 24776                                  	; 27/10/2022
 24777                                  
 24778                                  ; country = n {m {path}}
 24779                                  ; or
 24780                                  ; country = n,,path
 24781                                  
 24782                                  ;cntry_parms p_parms <cntry_parmsx>
 24783                                  cntry_parms:
 24784 00001D42 [471D]                  	dw	cntry_parmsx
 24785 00001D44 01                      	db	1
 24786 00001D45 01                      	db	1
 24787 00001D46 3B                      	db	';'
 24788                                  	
 24789                                  cntry_parmsx:
 24790 00001D47 0103[511D][651D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 24790 00001D4D [6E1D]             
 24791 00001D4F 00                      	db	0		; no switches
 24792 00001D50 00                      	db	0		; no keywords
 24793                                  
 24794                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 24795                                  cntry_pos1:
 24796 00001D51 0080                    	dw	8000h
 24797 00001D53 0000                    	dw	0
 24798 00001D55 [141D]                  	dw	result_val	
 24799 00001D57 [5A1D]                  	dw	cc_range
 24800 00001D59 00                      	db	0
 24801                                  
 24802                                  ;cc_range p_range <,,,1,999>
 24803                                  cc_range:
 24804 00001D5A 01                      	db	1
 24805 00001D5B 01                      	db	1
 24806 00001D5C 01                      	db	1
 24807 00001D5D 01000000                	dd	1
 24808 00001D61 E7030000                	dd	999
 24809                                  
 24810                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 24811                                  cntry_pos2:
 24812 00001D65 0180                    	dw	8001h
 24813 00001D67 0000                    	dw	0
 24814 00001D69 [141D]                  	dw	result_val	
 24815 00001D6B [5A1D]                  	dw	cc_range
 24816 00001D6D 00                      	db	0
 24817                                  
 24818                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 24819                                  cntry_pos3:
 24820 00001D6E 0102                    	dw	201h
 24821 00001D70 0000                    	dw	0
 24822 00001D72 [141D]                  	dw	result_val	
 24823 00001D74 [131D]                  	dw	noval
 24824 00001D76 00                      	db	0	
 24825                                  
 24826                                  p_cntry_code:
 24827 00001D77 0000                    	dw	0	; local variable
 24828                                  p_code_page:
 24829 00001D79 0000                    	dw	0	; local variable
 24830                                  
 24831                                  ;-----------------------------------------------------------------------
 24832                                  
 24833                                  	; 27/10/2022
 24834                                  
 24835                                  ; files = n
 24836                                  
 24837                                  ;files_parms p_parms <files_parmsx>
 24838                                  files_parms:
 24839 00001D7B [801D]                  	dw	files_parmsx
 24840 00001D7D 01                      	db	1
 24841 00001D7E 01                      	db	1
 24842 00001D7F 3B                      	db	';'
 24843                                  
 24844                                  files_parmsx:
 24845 00001D80 0101[861D]              	dw	101h,files_pos	; min,max 1 positional
 24846 00001D84 00                      	db	0		; no switches
 24847 00001D85 00                      	db	0		; no keywords
 24848                                  
 24849                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 24850                                  files_pos:
 24851 00001D86 0080                    	dw	8000h
 24852 00001D88 0000                    	dw	0
 24853 00001D8A [141D]                  	dw	result_val	
 24854 00001D8C [8F1D]                  	dw	files_range
 24855 00001D8E 00                      	db	0
 24856                                  
 24857                                  ;files_range p_range <,,,8,255>
 24858                                  files_range:
 24859 00001D8F 01                      	db	1
 24860 00001D90 01                      	db	1
 24861 00001D91 01                      	db	1
 24862 00001D92 08000000                	dd	8
 24863 00001D96 FF000000                	dd	255
 24864                                  
 24865                                  p_files:
 24866 00001D9A 00                      	db	0		; local variable
 24867                                  
 24868                                  ;-----------------------------------------------------------------------
 24869                                  
 24870                                  	; 27/10/2022
 24871                                  
 24872                                  ; fcbs = n,m
 24873                                  
 24874                                  ;fcbs_parms p_parms <fcbs_parmsx>
 24875                                  fcbs_parms:
 24876 00001D9B [A01D]                  	dw	fcbs_parmsx
 24877 00001D9D 01                      	db	1
 24878 00001D9E 01                      	db	1
 24879 00001D9F 3B                      	db	';'
 24880                                  
 24881                                  fcbs_parmsx:
 24882 00001DA0 0102[A81D][BC1D]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 24883 00001DA6 00                      	db	0		; no switches
 24884 00001DA7 00                      	db	0		; no keywords
 24885                                  
 24886                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 24887                                  fcbs_pos_1:
 24888 00001DA8 0080                    	dw	8000h
 24889 00001DAA 0000                    	dw	0
 24890 00001DAC [141D]                  	dw	result_val	
 24891 00001DAE [B11D]                  	dw	fcbs_range
 24892 00001DB0 00                      	db	0
 24893                                  
 24894                                  ;fcbs_range p_range <,,,1,255>
 24895                                  fcbs_range:
 24896 00001DB1 01                      	db	1
 24897 00001DB2 01                      	db	1
 24898 00001DB3 01                      	db	1
 24899 00001DB4 01000000                	dd	1
 24900 00001DB8 FF000000                	dd	255
 24901                                  
 24902                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 24903                                  fcbs_pos_2:
 24904 00001DBC 0080                    	dw	8000h
 24905 00001DBE 0000                    	dw	0
 24906 00001DC0 [141D]                  	dw	result_val	
 24907 00001DC2 [C51D]                  	dw	fcbs_keep_range
 24908 00001DC4 00                      	db	0
 24909                                  
 24910                                  ;fcbs_keep_range p_range <,,,0,255>
 24911                                  fcbs_keep_range:
 24912 00001DC5 01                      	db	1
 24913 00001DC6 01                      	db	1
 24914 00001DC7 01                      	db	1
 24915 00001DC8 00000000                	dd	0
 24916 00001DCC FF000000                	dd	255
 24917                                  
 24918 00001DD0 00                      p_fcbs:	db	0		; local variable
 24919 00001DD1 00                      p_keep:	db	0		; local variable
 24920                                  
 24921                                  ;-----------------------------------------------------------------------
 24922                                  
 24923                                  	; 27/10/2022
 24924                                  
 24925                                  ; lastdrive = x
 24926                                  
 24927                                  ;ldrv_parms p_parms <ldrv_parmsx>
 24928                                  ldrv_parms:
 24929 00001DD2 [D71D]                  	dw	ldrv_parmsx
 24930 00001DD4 01                      	db	1
 24931 00001DD5 01                      	db	1
 24932 00001DD6 3B                      	db	';'
 24933                                  
 24934                                  ldrv_parmsx:
 24935 00001DD7 0101[DD1D]              	dw	101h,ldrv_pos	; min,max = 1 positional
 24936 00001DDB 00                      	db	0		; no switches
 24937 00001DDC 00                      	db	0		; no keywords
 24938                                  
 24939                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 24940                                  ldrv_pos:				    ; remove colon at end
 24941 00001DDD 1001                    	dw	110h
 24942 00001DDF 1000                    	dw	10h
 24943 00001DE1 [141D]                  	dw	result_val	
 24944 00001DE3 [131D]                  	dw	noval
 24945 00001DE5 00                      	db	0
 24946                                  	
 24947 00001DE6 00                      p_ldrv:	db	0		; local variable
 24948                                  
 24949                                  ;-----------------------------------------------------------------------
 24950                                  
 24951                                  	; 27/10/2022
 24952                                  
 24953                                  ; stacks = n,m
 24954                                  
 24955                                  ;stks_parms p_parms <stks_parmsx>
 24956                                  stks_parms:
 24957 00001DE7 [EC1D]                  	dw	stks_parmsx
 24958 00001DE9 01                      	db	1
 24959 00001DEA 01                      	db	1
 24960 00001DEB 3B                      	db	';'
 24961                                  
 24962                                  stks_parmsx:
 24963 00001DEC 0202[F41D][081E]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 24964 00001DF2 00                      	db	0		; no switches
 24965 00001DF3 00                      	db	0		; no keywords
 24966                                  
 24967                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 24968                                  stks_pos_1:
 24969 00001DF4 0080                    	dw	8000h
 24970 00001DF6 0000                    	dw	0
 24971 00001DF8 [141D]                  	dw	result_val	
 24972 00001DFA [FD1D]                  	dw	stks_range
 24973 00001DFC 00                      	db	0
 24974                                  
 24975                                  ;stks_range p_range <,,,0,64>
 24976                                  stks_range:
 24977 00001DFD 01                      	db	1
 24978 00001DFE 01                      	db	1
 24979 00001DFF 01                      	db	1
 24980 00001E00 00000000                	dd	0
 24981 00001E04 40000000                	dd	64
 24982                                  
 24983                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 24984                                  stks_pos_2:
 24985 00001E08 0080                    	dw	8000h
 24986 00001E0A 0000                    	dw	0
 24987 00001E0C [141D]                  	dw	result_val	
 24988 00001E0E [111E]                  	dw	stk_size_range
 24989 00001E10 00                      	db	0
 24990                                  
 24991                                  ;stk_size_range p_range <,,,0,512>
 24992                                  stk_size_range:
 24993 00001E11 01                      	db	1
 24994 00001E12 01                      	db	1
 24995 00001E13 01                      	db	1
 24996 00001E14 00000000                	dd	0
 24997 00001E18 00020000                	dd	512	
 24998                                  
 24999                                  p_stack_count:
 25000 00001E1C 0000                    	dw	0	; local variable
 25001                                  p_stack_size:
 25002 00001E1E 0000                    	dw	0	; local variable
 25003                                  
 25004                                  ;-----------------------------------------------------------------------
 25005                                  
 25006                                  	; 27/10/2022
 25007                                  
 25008                                  ; multitrack = [ on | off ]
 25009                                  
 25010                                  ;mtrk_parms p_parms <mtrk_parmsx>
 25011                                  mtrk_parms:
 25012 00001E20 [251E]                  	dw	mtrk_parmsx
 25013 00001E22 01                      	db	1
 25014 00001E23 01                      	db	1
 25015 00001E24 3B                      	db	';'
 25016                                  
 25017                                  mtrk_parmsx:
 25018 00001E25 0101[2B1E]              	dw	101h,mtrk_pos	; min,max = 1 positional
 25019 00001E29 00                      	db	0		; no switches
 25020 00001E2A 00                      	db	0		; no keywords
 25021                                  
 25022                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25023                                  mtrk_pos:
 25024 00001E2B 0020                    	dw	2000h
 25025 00001E2D 0000                    	dw	0
 25026 00001E2F [141D]                  	dw	result_val	
 25027 00001E31 [301D]                  	dw	on_off_string
 25028 00001E33 00                      	db	0
 25029                                  
 25030 00001E34 00                      p_mtrk:	db	0		; local variable
 25031                                  
 25032                                  ;-----------------------------------------------------------------------
 25033                                  
 25034                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25035                                  	; (SYSINIT:20B2h)
 25036                                  
 25037                                  ; switches=/k
 25038                                  
 25039                                  ;swit_parms p_parms <swit_parmsx>
 25040                                  swit_parms:
 25041 00001E35 [3A1E]                  	dw	swit_parmsx
 25042 00001E37 01                      	db	1
 25043 00001E38 01                      	db	1
 25044 00001E39 3B                      	db	';'
 25045                                  
 25046                                  swit_parmsx:
 25047 00001E3A 0000                    	dw	0		; no positionals
 25048                                  	;db	5               ; # of switches
 25049                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25050 00001E3C 03                      	db	3
 25051 00001E3D [441E]                  	dw	swit_k_ctrl	; /k control
 25052                                  	;dw	swit_n_ctrl     ; /n control (for MULTI_CONFIG only)
 25053                                  	;dw	swit_f_ctrl     ; /f control (for MULTI_CONFIG only)
 25054 00001E3F [501E]                  	dw	swit_t_ctrl     ; /t control
 25055 00001E41 [5C1E]                  	dw	swit_w_ctrl     ; /w control
 25056 00001E43 00                      	db	0		; no keywords
 25057                                  
 25058                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25059                                  swit_k_ctrl:
 25060 00001E44 00000000[141D]-         	dw	0,0,result_val,noval
 25060 00001E4A [131D]             
 25061 00001E4C 01                      	db	1
 25062 00001E4D 2F4B00                  swit_k:	db	'/K',0
 25063                                  
 25064                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25065                                  ;
 25066                                  ;;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25067                                  ;swit_n_ctrl:
 25068                                  ;	dw	0,0,result_val,noval
 25069                                  ;	db	1
 25070                                  ;swit_n: db	'/N',0
 25071                                  ;
 25072                                  ;;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25073                                  ;swit_f_ctrl:
 25074                                  ;	dw	0,0,result_val,noval
 25075                                  ;	db	1
 25076                                  ;swit_f: db 	'/F',0
 25077                                  
 25078                                  	; 27/10/2022
 25079                                  
 25080                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 25081                                  swit_t_ctrl:
 25082 00001E50 00000000[141D]-         	dw	0,0,result_val,noval
 25082 00001E56 [131D]             
 25083 00001E58 01                      	db	1
 25084 00001E59 2F5400                  swit_t:	db	'/T',0			   ;				M059
 25085                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 25086                                  swit_w_ctrl:
 25087 00001E5C 00000000[141D]-         	dw	0,0,result_val,noval
 25087 00001E62 [131D]             
 25088 00001E64 01                      	db	1
 25089 00001E65 2F5700                  swit_w:	db	'/W',0			   ;				M063
 25090                                  
 25091                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 25092                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 25093                                  ;   in the above table to prevent the parsing code from complaining about them
 25094                                  
 25095 00001E68 00                      p_swit_k:	db     0	; local variable
 25096 00001E69 00                      p_swit_t:	db     0	; local variable			M059
 25097 00001E6A 00                      p_swit_w:	db     0	; local variable			M063
 25098                                  
 25099                                  ;-----------------------------------------------------------------------
 25100                                  
 25101                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25102                                  	; (SYSINIT:20E8h)
 25103                                  
 25104                                  ; DOS = [ high | low ]
 25105                                  
 25106                                  ;dos_parms p_parms  <dos_parmsx>
 25107                                  dos_parms:
 25108 00001E6B [701E]                  	dw	dos_parmsx
 25109 00001E6D 01                      	db	1
 25110 00001E6E 01                      	db	1
 25111 00001E6F 3B                      	db	';'
 25112                                  dos_parmsx:
 25113 00001E70 01                      	db	1		; min parameters
 25114 00001E71 02                      	db	2		; max parameters
 25115 00001E72 [781E]                  	dw	dos_pos		; 
 25116 00001E74 [781E]                  	dw	dos_pos		; 
 25117 00001E76 00                      	db	0		; no switches
 25118 00001E77 00                      	db	0		; no keywords
 25119                                  
 25120                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25121                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25122                                  dos_pos:
 25123 00001E78 00200000[141D]-         	dw	2000h,0,result_val,dos_strings
 25123 00001E7E [8A1E]             
 25124 00001E80 00                      	db	0
 25125 00001E81 00200000[141D]-         	dw	2000h,0,result_val,dos_strings
 25125 00001E87 [8A1E]             
 25126 00001E89 00                      	db	0	
 25127                                  
 25128                                  dos_strings:	;label	byte
 25129 00001E8A 03                      	db	3		; signals that there is a string choice
 25130 00001E8B 00                      	db	0		; no range definition
 25131 00001E8C 00                      	db	0		; no numeric values choice
 25132 00001E8D 04                      	db	4		; 4 strings for choice
 25133 00001E8E 01                      	db	1		; the 1st string tag
 25134 00001E8F [9A1E]                  	dw	hi_string
 25135 00001E91 02                      	db	2		; the 2nd string tag
 25136 00001E92 [9F1E]                  	dw	lo_string
 25137 00001E94 03                      	db	3
 25138 00001E95 [A31E]                  	dw	umb_string
 25139 00001E97 04                      	db	4
 25140 00001E98 [A71E]                  	dw	noumb_string
 25141                                  
 25142 00001E9A 4849474800              hi_string:	db	"HIGH",0
 25143 00001E9F 4C4F5700                lo_string:	db	"LOW",0
 25144 00001EA3 554D4200                umb_string:	db	"UMB",0
 25145 00001EA7 4E4F554D4200            noumb_string:	db	"NOUMB",0
 25146                                  
 25147 00001EAD 00                      p_dos_hi:	db	0	; local variable
 25148                                  				; BUGBUG : I dont know whether PARSER uses
 25149                                  				;          this variable or not
 25150                                  
 25151                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25152                                  
 25153                                  %if 0
 25154                                  
 25155                                  ;****************************************************************** RICHID ****
 25156                                  
 25157                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 25158                                  
 25159                                  ; 30/03/2019 - Retro DOS v4.0
 25160                                  ;------------------------------------------------------------------------------
 25161                                  
 25162                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 25163                                  ;
 25164                                  ;   Date:     May 14, 1992
 25165                                  ;
 25166                                  ;******************************************************************************
 25167                                  ;
 25168                                  ;   Modification log:
 25169                                  ;
 25170                                  ;     DATE    WHO      DESCRIPTION
 25171                                  ;   --------  -------  --------------------------------------------------------
 25172                                  ;   05/14/92  t-richj  Original
 25173                                  ;   06/21/92  t-richj  Final revisions before check-in
 25174                                  ;
 25175                                  ;******************************************************************************
 25176                                  ;
 25177                                  ; There are two primary definitions which need to be made, selectively, before
 25178                                  ; this include file should be used.  These are:
 25179                                  ;    HV_Extern - If this has been defined, variables for this module will be
 25180                                  ;                declared as external.  Otherwise, variables will be declared
 25181                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 25182                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 25183                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 25184                                  ;                (as only one module, sysconf.asm, includes this file).
 25185                                  ;    HV_LoadHigh - This should be defined when this module is going into
 25186                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 25187                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 25188                                  ;
 25189                                  ;******************************************************************************
 25190                                  
 25191                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 25192                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 25193                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 25194                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 25195                                  ; space problem (it's just such a nice round number, eh?).
 25196                                  
 25197                                  MAXUMB	equ	16
 25198                                  
 25199                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 25200                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 25201                                  
 25202                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 25203                                  SystemPSPOwner	equ	8
 25204                                  ;JapanPSPOwner	equ	9
 25205                                  
 25206                                  ; for LoadHigh and DeviceHigh:
 25207                                  ;
 25208                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 25209                                  ;	          UnHideUMBs().
 25210                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 25211                                  ;	           line.
 25212                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 25213                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 25214                                  ;	          given a command-line like "/L:3,500;4"
 25215                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 25216                                  ;	          matching its index number was specified on the command-line;
 25217                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 25218                                  ;	          will be set to 1.  All others will be set to 0.
 25219                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 25220                                  ;	          specified by the user for a UMB (in the above example, all
 25221                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 25222                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 25223                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 25224                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 25225                                  ;	           for details).
 25226                                  
 25227                                  fInHigh:  db	0
 25228                                  fUmbTiny: db	0
 25229                                  SegLoad:  dw	0
 25230                                  UmbLoad:  db	0
 25231                                  UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 25232                                  UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 25233                                  fm_umb:   db	0
 25234                                  fm_strat: db	0
 25235                                  fm_argc:  db	0	
 25236                                  
 25237                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 25238                                  ; UmbLoad is set to the UMB number given.
 25239                                  
 25240                                  UNSPECIFIED	equ	-1
 25241                                  
 25242                                  %endif
 25243                                  
 25244                                  ;****************************************************************** RICHID ****
 25245                                  
 25246                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 25247                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 25248                                  
 25249                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25250                                  ; (SYSINIT:212Bh)	
 25251                                  
 25252                                  		;public	DevEntry
 25253                                  
 25254 00001EAE 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 25255 00001EB0 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 25256 00001EB2 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 25257 00001EB4 00000000                DevEntry:	dd	0	; Entry point to the device driver
 25258 00001EB8 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 25259                                  ; 27/10/2022 
 25260                                  ;ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 25261                                  ;
 25262 00001EBC 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 25263 00001EBD 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 25264 00001EBF 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 25265 00001EC1 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 25266                                  ;
 25267 00001EC3 00000000                DevXMSAddr:	dd	0
 25268                                  ;
 25269 00001EC7 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 25270 00001EC9 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 25271                                  ;
 25272 00001ECB 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 25273                                  				;  is being loaded into UMB
 25274 00001ECC 0000                    DevSizeOption:	dw	0	; SIZE= option
 25275                                  ;
 25276 00001ECE 00                      Int12Lied:	db	0	; did we trap int 12 ?
 25277 00001ECF 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 25278 00001ED1 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 25279                                  ;
 25280 00001ED9 00                      FirstUMBLinked:	db	0
 25281 00001EDA 0000                    DevDOSData:	dw	0	; segment of DOS Data
 25282 00001EDC 00000000                DevCmdLine:	dd	0	; Current Command line
 25283 00001EE0 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 25284                                  				; to use the file name in the command line
 25285                                  ;
 25286                                  ;	ifdef	dblspace_hooks
 25287                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 25288                                  ;	endif
 25289                                  
 25290                                  ; ===========================================================================
 25291                                  
 25292                                  ; 31/03/2019 - Retro DOS v4.0
 25293                                  
 25294                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25295                                  ; (SYSINIT:215Eh)
 25296                                  
 25297                                  ;----------------------------------------------------------------------------
 25298                                  ;
 25299                                  ; procedure : doconf
 25300                                  ;
 25301                                  ;             Config file is parsed initially with this routine. For the
 25302                                  ;             Subsequent passes 'multi_pass' entry is used .
 25303                                  ;
 25304                                  ;----------------------------------------------------------------------------
 25305                                  
 25306                                  	; 27/10/2022
 25307                                  doconf:
 25308 00001EE1 0E                      	push	cs
 25309 00001EE2 1F                      	pop	ds
 25310                                  
 25311 00001EE3 B80037                  	mov	ax,3700h
 25312                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 25313 00001EE6 CD21                    	int	21h
 25314 00001EE8 8816[AA02]              	mov	[command_line+1],dl	; set in default command line
 25315                                  
 25316                                  ; 27/10/2022
 25317                                  ;;ifdef	MULTI_CONFIG
 25318                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 25319                                  ;	mov	[def_swchr],dl ; 31/03/2019 
 25320                                  ;;endif	;MULTI_CONFIG
 25321                                  
 25322 00001EEC BA[C433]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 25323 00001EEF B8003D                  	mov	ax,3D00h
 25324                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 25325 00001EF2 F9                      	stc				;in case of int 24
 25326 00001EF3 CD21                    	int	21h			;function request
 25327 00001EF5 7306                    	jnc	short noprob		; brif opened okay
 25328                                  
 25329                                  ; 27/10/2022
 25330                                  ;;ifdef	MULTI_CONFIG
 25331                                  ;      	call	kbd_read		; we still want to give the guy
 25332                                  ;					; a chance to select clean boot!
 25333                                  ;;endif					; (ie, no autoexec.bat processing)
 25334 00001EF7 C606[4903]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 25335 00001EFC C3                      	retn
 25336                                  noprob: 				;get file size (note < 64k!!)
 25337 00001EFD 89C3                    	mov	bx,ax  ; File handle
 25338 00001EFF 31C9                    	xor	cx,cx
 25339 00001F01 31D2                    	xor	dx,dx
 25340                                  	;mov	ax,4202h
 25341 00001F03 B80242                  	mov	ax,(LSEEK<<8)|2
 25342 00001F06 CD21                    	int	21h
 25343 00001F08 A3[D203]                	mov	[count],ax
 25344                                  
 25345 00001F0B 31D2                    	xor	dx,dx
 25346                                  	;mov	ax,4200h
 25347 00001F0D B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 25348 00001F10 CD21                    	int	21h
 25349                                  
 25350                                  	;mov	dx,[ALLOCLIM]		;use current alloclim value
 25351                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25352 00001F12 8B16[A102]              	mov	dx,[top_of_cdss] 
 25353                                  
 25354 00001F16 A1[D203]                	mov	ax,[count]
 25355 00001F19 A3[4C03]                	mov	[config_size],ax	;save the size of config.sys file.
 25356 00001F1C E8A1F1                  	call	ParaRound
 25357 00001F1F 29C2                    	sub	dx,ax
 25358                                  
 25359                                  ; 27/10/2022
 25360                                  ;;ifdef	MULTI_CONFIG
 25361                                  ;;
 25362                                  ;;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 25363                                  ;;  CONFIG.SYS image, and later for building the initial environment) need
 25364                                  ;;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 25365                                  ;;  we (may) add a variable to the environment that does not explicity appear
 25366                                  ;;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 25367                                  ;;  The default setting for CONFIG cannot result in more than 1 paragraph
 25368                                  ;;  of extra space, so here we account for it (the worst case of course is
 25369                                  ;;  when CONFIG.SYS is some very small size, like 0 -JTP)
 25370                                  ;;
 25371                                  ;       dec     dx                      ;reserve 1 additional paragraph
 25372                                  ;       mov     [config_wrkseg],dx      ;this is the segment to be used for
 25373                                  ;       sub     dx,ax                   ;rebuilding the config.sys memory image
 25374                                  ;;endif	;MULTI_CONFIG
 25375                                  
 25376 00001F21 83EA11                  	sub	dx,11h			;room for header
 25377                                  	
 25378                                  	;mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 25379                                  	;mov	[CONFBOT],dx
 25380                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25381 00001F24 8916[A102]              	mov	[top_of_cdss],dx
 25382 00001F28 E8ABEC                  	call    TempCDS 
 25383                                  	; 11/12/2022
 25384                                  	; ds <> cs 
 25385 00001F2B 2E8B16[A102]            	mov	dx,[cs:top_of_cdss]
 25386                                   
 25387 00001F30 8EDA                    	mov	ds,dx
 25388 00001F32 8EC2                    	mov	es,dx
 25389                                  
 25390 00001F34 31D2                    	xor	dx,dx
 25391 00001F36 2E8B0E[D203]            	mov	cx,[cs:count]
 25392 00001F3B B43F                    	mov	ah,3Fh
 25393                                  	;mov	ah,READ  ; 3Fh
 25394 00001F3D F9                      	stc				;in case of int 24
 25395 00001F3E CD21                    	int	21h			;function request
 25396 00001F40 9C                      	pushf
 25397                                  
 25398                                  ; find the eof mark in the file. if present,then trim length.
 25399                                  
 25400 00001F41 50                      	push	ax
 25401 00001F42 57                      	push	di
 25402 00001F43 51                      	push	cx
 25403 00001F44 B01A                    	mov	al,1Ah			; eof mark
 25404 00001F46 89D7                    	mov	di,dx			; point to buffer
 25405 00001F48 E305                    	jcxz	puteol			; no chars
 25406 00001F4A F2AE                    	repnz	scasb			; find end
 25407 00001F4C 7501                    	jnz	short puteol		; none found and count exhausted
 25408                                  
 25409                                  ; we found a 1a. back up
 25410                                  
 25411 00001F4E 4F                      	dec	di			; backup past 1Ah
 25412                                  
 25413                                  ;  just for the halibut, stick in an extra eol
 25414                                  
 25415                                  puteol:
 25416 00001F4F B00D                    	mov	al,cr ; 0Dh
 25417 00001F51 AA                      	stosb
 25418 00001F52 B00A                    	mov	al,lf  ;0Ah
 25419 00001F54 AA                      	stosb
 25420 00001F55 29D7                    	sub	di,dx			; difference moved
 25421                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25422                                  	;mov	[cs:count],di		; new count
 25423                                  
 25424                                  	; 11/12/2022	
 25425                                  	; 31/03/2019 - Retro DOS v4.0
 25426 00001F57 0E                      	push	cs
 25427 00001F58 1F                      	pop	ds
 25428                                  
 25429 00001F59 893E[D203]              	mov	[count],di		; new count
 25430                                  
 25431 00001F5D 59                      	pop	cx
 25432 00001F5E 5F                      	pop	di
 25433 00001F5F 58                      	pop	ax
 25434                                  
 25435                                  	; 11/12/2022
 25436                                  	; 27/10/2022
 25437                                  	;push	cs
 25438                                  	;pop	ds
 25439                                  
 25440 00001F60 50                      	push	ax
 25441                                  	;mov	ah,CLOSE
 25442 00001F61 B43E                    	mov	ah,3Eh
 25443 00001F63 CD21                    	int	21h
 25444 00001F65 58                      	pop	ax
 25445 00001F66 9D                      	popf
 25446 00001F67 7204                    	jc	short conferr 		;if not we've got a problem
 25447 00001F69 39C1                    	cmp	cx,ax
 25448 00001F6B 742C                    	jz	short getcom		;couldn't read the file
 25449                                  conferr:
 25450 00001F6D BA[C433]                	mov	dx,config		;want to print config error
 25451 00001F70 E8A813                  	call	badfil
 25452                                  endconv:
 25453 00001F73 C3                      	retn
 25454                                  
 25455                                  ;----------------------------------------------------------------------------
 25456                                  ;
 25457                                  ; entry : multi_pass
 25458                                  ;
 25459                                  ;             called to execute device=,install= commands
 25460                                  ;
 25461                                  ;----------------------------------------------------------------------------
 25462                                  
 25463                                  	; 27/10/2022
 25464                                  multi_pass:
 25465 00001F74 0E                      	push	cs
 25466 00001F75 1F                      	pop	ds
 25467                                  
 25468 00001F76 803E[4903]0A            	cmp	byte [multi_pass_id],10
 25469                                  ;jae_endconv:
 25470 00001F7B 73F6                    	jae	short endconv 		; do nothing. just return.
 25471                                  
 25472                                  	;push	word [CONFBOT]
 25473                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25474 00001F7D FF36[A102]              	push	word [top_of_cdss]
 25475 00001F81 07                      	pop	es			; es -> confbot
 25476                                  
 25477 00001F82 8B36[D403]              	mov	si,[org_count]
 25478 00001F86 8936[D203]              	mov	[count],si		; set count
 25479 00001F8A 31F6                    	xor	si,si ; 0
 25480 00001F8C 8936[D603]                      mov     [chrptr],si		; reset chrptr
 25481 00001F90 8936[2B03]                      mov     [linecount],si		; reset linecount
 25482                                  
 25483 00001F94 E86807                  	call	getchr
 25484 00001F97 EB06                    	jmp	short conflp
 25485                                  
 25486                                  getcom:
 25487 00001F99 E8AD0E                          call    organize                ; organize the file
 25488 00001F9C E86007                  	call	getchr
 25489                                  conflp: 
 25490 00001F9F 72D2                    	jc	short endconv
 25491                                  
 25492 00001FA1 FF06[2B03]                      inc     word [linecount]	; increase linecount
 25493                                  
 25494 00001FA5 C606[3114]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 25495 00001FAA C606[3414]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 25496 00001FAF 3C0A                    	cmp	al,lf			; linefeed?
 25497 00001FB1 7416                    	je	short blank_line	;  then ignore this line.
 25498                                  
 25499                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25500                                  %if 0
 25501                                  
 25502                                  ;ifdef	MULTI_CONFIG
 25503                                  
 25504                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 25505                                  ;   number immediately following it....
 25506                                  
 25507                                          mov     [config_cmd],al         ; save original command code
 25508                                  	;and	al,NOT CONFIG_OPTION_QUERY
 25509                                  	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 25510                                          cmp     byte [config_multi],0	; is this a multi-config config.sys?
 25511                                          je      short not_final		; no, line number is not embedded
 25512                                  
 25513                                          push    ax                      ;
 25514                                          call    getchr                  ; ignore end-of-image errors,
 25515                                          mov     ah,al                   ; because if there's an error
 25516                                          call    getchr                  ; fetching the line number that's
 25517                                          xchg    al,ah                   ; supposed to be there, the next
 25518                                          mov     [linecount],ax          ; getchr call will get the same error
 25519                                          pop     ax
 25520                                  ;
 25521                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 25522                                  ;   which to obtain its original program name, it grovels through all of
 25523                                  ;   memory to find the filename that was used to exec it; it wants to find
 25524                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 25525                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 25526                                  ;   immediately before the filename, but since we are now storing line # info
 25527                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 25528                                  ;   spot.
 25529                                  ;
 25530                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 25531                                  ;   over the line number info, since we no longer need that info anyway. This
 25532                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 25533                                  ;   retrieved.
 25534                                  ;
 25535                                          cmp	byte [multi_pass_id],2	; final pass?
 25536                                          jb	short not_final		; no
 25537                                          ;test	word [install_flag],have_install_cmd
 25538                                  	test	byte [install_flag],have_install_cmd ; 1
 25539                                          jz	short final		; no install cmds, so yes it is
 25540                                          cmp	byte [multi_pass_id],3	; final pass?
 25541                                          jb	short not_final		; no
 25542                                  final:                                  ;
 25543                                  	mov	[es:si],al		; save backward-compatible command code
 25544                                  not_final:                              ;
 25545                                  ;endif
 25546                                  
 25547                                  %endif
 25548 00001FB3 88C4                    	mov	ah,al
 25549 00001FB5 E84707                  	call	getchr
 25550 00001FB8 7314                    	jnc	short tryi
 25551                                  
 25552 00001FBA 803E[4903]02            	cmp	byte [multi_pass_id],2
 25553                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 25554                                  	; 27/10/2022
 25555 00001FBF 73B2                    	jnb	short endconv	
 25556 00001FC1 E90707                  	jmp	badop
 25557                                  	
 25558                                  coff:	
 25559                                  	; 11/12/2022
 25560                                  	; ds = cs
 25561                                  	;push	cs
 25562                                  	;pop	ds
 25563 00001FC4 E89910                  	call	newline
 25564 00001FC7 EBD6                    	jmp	short conflp	; 13/05/2019
 25565                                  
 25566                                  blank_line:
 25567 00001FC9 E83307                  	call	getchr
 25568 00001FCC EBD1                    	jmp	short conflp
 25569                                  
 25570                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25571                                  ; 11/12/2022
 25572                                  ; (there is not a jump or call to here from anywhere!)
 25573                                  ;coff_p:
 25574                                  	;push	cs
 25575                                  	;pop	ds
 25576                                  
 25577                                  ;to handle install= commands,we are going to use multi-pass.
 25578                                  ;the first pass handles the other commands and only set install_flag when
 25579                                  ;it finds any install command. the second pass will only handle the
 25580                                  ;install= command.
 25581                                  
 25582                                  ;------------------------------------------------------------------------------
 25583                                  ;install command
 25584                                  ;------------------------------------------------------------------------------
 25585                                  
 25586                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25587                                  	; (SYSINIT:2250h)
 25588                                  tryi:
 25589 00001FCE 803E[4903]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 25590 00001FD3 7503                    	jne	short not_init_pass
 25591 00001FD5 E92301                  	jmp	multi_try_doshi
 25592                                  not_init_pass:
 25593 00001FD8 803E[4903]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 25594                                          ; 11/12/2022
 25595                                  	;je	short multi_pass_coff2	; now it is NOPs
 25596 00001FDD 74E5                    	je	short coff
 25597                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25598                                  	;je	short multi_pass_coff	
 25599                                  					; This pass can be made use of if
 25600                                  					; we want do some config.sys process
 25601                                  					; after device drivers are loaded
 25602                                  					; and before install= commands
 25603                                  					; are processed
 25604                                  
 25605 00001FDF 803E[4903]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 25606 00001FE4 7411                    	je	short multi_try_i
 25607 00001FE6 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 25608                                  	; 11/12/2022
 25609                                  	;je	short multi_pass_coff2
 25610 00001FE9 74D9                    	je	short coff
 25611                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25612                                  	;je	short multi_pass_coff	
 25613                                  
 25614                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 25615                                  ;       but don't process them now.        
 25616                                          
 25617 00001FEB 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 25618                                  	;jne	short precheck_installhigh ; the first pass is for normal operation.
 25619                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25620 00001FEE 752A                    	jne	short tryb	
 25621                                  	
 25622                                  	;or	word [install_flag],have_install_cmd ; set the flag
 25623 00001FF0 800E[4A03]01            	or	byte [install_flag],have_install_cmd ; 1
 25624                                  multi_pass_coff2:
 25625 00001FF5 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 25626                                  
 25627                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25628                                  ;precheck_installhigh:
 25629                                  ;       cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 25630                                  ;       jne     short tryb		; carry on with normal processing
 25631                                  ;	;or	word [install_flag],have_install_cmd
 25632                                  ;	or	byte [install_flag],have_install_cmd ; 1
 25633                                  ;       jmp	short coff
 25634                                  
 25635                                  multi_try_i:
 25636 00001FF7 80FC49                          cmp     ah, CONFIG_INSTALL ; 'I' ; install= command?
 25637                                  	;jne	short multi_try_n	; no, check for installhigh
 25638                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25639 00001FFA 7505                    	jne	short multi_pass_filter
 25640                                  
 25641                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25642                                  ;;ifdef	MULTI_CONFIG
 25643                                  ;       call    query_user              ; query the user if config_cmd
 25644                                  ;       jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25645                                  ;;endif
 25646                                  
 25647 00001FFC E841F0                  	call	do_install_exec 	;install it.
 25648 00001FFF EBC3                    	jmp	short coff		;to handle next install= command.
 25649                                  
 25650                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25651                                  %if 0
 25652                                  
 25653                                  multi_try_n:
 25654                                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 25655                                          jne	short multi_pass_filter	; no. ignore this.
 25656                                  ;ifdef	MULTI_CONFIG
 25657                                          call    query_user              ; query the user if config_cmd
 25658                                          jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25659                                  ;endif
 25660                                  
 25661                                  ;       The memory environment is in its normal DOS state, so do
 25662                                  ;       the standard calls to set the alloc strategy for loading high
 25663                                  
 25664                                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 25665                                  	int	21h			;get alloc strategy
 25666                                  	mov	bx,ax
 25667                                          push    bx                      ; save for the return
 25668                                  
 25669                                          or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 25670                                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 25671                                  	int	21h			;set alloc strategy
 25672                                  
 25673                                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 25674                                          int     21h                     ; get link state
 25675                                          xor     ah,ah                   ; clear top byte
 25676                                          push    ax                      ; save for return
 25677                                  
 25678                                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 25679                                  	mov	bx,1
 25680                                  	int	21h			;link in UMBs
 25681                                  
 25682                                  	call	do_install_exec 	;install it.
 25683                                  
 25684                                          mov     ax,(ALLOCOPER<<8)|3
 25685                                          pop     bx                      ; recover original link state
 25686                                          int     21h
 25687                                          pop     bx                      ; recover original alloc strategy
 25688                                          mov     ax,(ALLOCOPER<<8)|1
 25689                                          int     21h
 25690                                  
 25691                                  	jmp	coff			;to handle next install= command.
 25692                                  
 25693                                  %endif
 25694                                  
 25695                                  multi_pass_filter:
 25696 00002001 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 25697 00002004 740A                    	je	short multi_pass_adjust
 25698 00002006 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 25699 00002009 7405                    	je	short multi_pass_adjust
 25700 0000200B 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 25701 0000200E 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 25702                                  
 25703                                  multi_pass_adjust:			; these commands need to
 25704 00002010 FF0E[D603]              	dec	word [chrptr]		;  adjust chrptr,count
 25705 00002014 FF06[D203]              	inc	word [count]		;  for newline proc.
 25706                                  
 25707                                  multi_pass_coff:
 25708                                  	; 11/12/2022
 25709 00002018 EBAA                    	jmp	short coff		; to handle next install= commands.
 25710                                  
 25711                                  ;------------------------------------------------------------------------------
 25712                                  ; buffer command
 25713                                  ;------------------------------------------------------------------------------
 25714                                  
 25715                                  ;******************************************************************************
 25716                                  ;									      *
 25717                                  ; function: parse the parameters of buffers= command.			      *
 25718                                  ;									      *
 25719                                  ; input :								      *
 25720                                  ;	es:si -> parameters in command line.				      *
 25721                                  ; output:								      *
 25722                                  ;	buffers set							      *
 25723                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 25724                                  ;	h_buffers set if secondary buffer cache specified.		      *
 25725                                  ;									      *
 25726                                  ; subroutines to be called:						      *
 25727                                  ;	sysinit_parse							      *
 25728                                  ; logic:								      *
 25729                                  ; {									      *
 25730                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 25731                                  ;	set dx,cx to 0; 						      *
 25732                                  ;	reset buffer_slash_x;						      *
 25733                                  ;	while (end of command line)					      *
 25734                                  ;	{ sysinit_parse;						      *
 25735                                  ;	  if (no error) then						      *
 25736                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 25737                                  ;		    buffer_slash_x = 1					      *
 25738                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 25739                                  ;			  buffers = result_val._$P_picked_val;		      *
 25740                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 25741                                  ;	  else	{show error message;error exit} 			      *
 25742                                  ;	};								      *
 25743                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 25744                                  ; };									      *
 25745                                  ;									      *
 25746                                  ;******************************************************************************
 25747                                  
 25748                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25749                                  	; (SYSINIT:229Ch)
 25750                                  tryb:
 25751 0000201A 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 25752 0000201D 7557                    	jne	short tryc
 25753                                  
 25754                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25755                                  ;;ifdef	MULTI_CONFIG
 25756                                  ;       call    query_user              ; query the user if config_cmd
 25757                                  ;       jc      short tryc		; has the CONFIG_OPTION_QUERY bit set
 25758                                  ;;endif
 25759                                  
 25760                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25761                                  	; 18/12/2022
 25762 0000201F 31C9                    	xor	cx,cx
 25763                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 25764 00002021 880E[121D]              	mov	[p_buffer_slash_x],cl ; 0
 25765                                  
 25766 00002025 BF[CB1C]                	mov	di,buf_parms
 25767                                  	;xor	cx,cx	; 18/12/2022
 25768                                  	; 04/01/2023
 25769                                  	;mov	dx,cx
 25770                                  do7:
 25771 00002028 E87D06                  	call	sysinit_parse
 25772 0000202B 7303                    	jnc	short if7		; parse error,
 25773                                  	; 04/01/2023
 25774                                  	;call	badparm_p		;  and show messages and end the search loop.
 25775                                  	;;jmp	short sr7
 25776                                  	; 31/12/2022
 25777                                  ;sr7:
 25778                                  	;jmp	coff
 25779                                  	; 04/01/2023
 25780 0000202D E9F605                  	jmp	badparm_p_coff
 25781                                  if7:
 25782 00002030 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 25783 00002033 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 25784                                  	;cmp	word [result_val_swoff],switch_x
 25785 00002035 813E[161D][0B1D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 25786                                  	;jne	short if11
 25787                                  	; 31/12/2022
 25788 0000203B 74EB                    	je	short do7 ;je short en11
 25789                                  
 25790                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 25791                                  	;jmp	short en11 ; 31/12/2022
 25792                                  if11:
 25793                                  	;mov	ax,[rv_dword]
 25794 0000203D A1[181D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 25795 00002040 83F901                  	cmp	cx,1
 25796 00002043 7505                    	jne	short if13
 25797                                  
 25798 00002045 A3[0E1D]                	mov	[p_buffers],ax
 25799                                  	;jmp	short en11
 25800                                  	; 31/12/2022
 25801 00002048 EBDE                    	jmp	short do7
 25802                                  if13:
 25803 0000204A A3[101D]                	mov	[p_h_buffers],ax
 25804                                  en11:
 25805 0000204D EBD9                    	jmp	short do7
 25806                                  en7:
 25807 0000204F 833E[0E1D]63            	cmp	word [p_buffers],99
 25808 00002054 760B                    	jbe	short if18
 25809                                  
 25810                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 25811                                  ;	jne	short if18
 25812                                  
 25813 00002056 E87E06                  	call	badparm_p
 25814 00002059 C706[101D]0000          	mov	word [p_h_buffers],0
 25815 0000205F EB12                    	jmp	short sr7
 25816                                  if18:
 25817 00002061 A1[0E1D]                	mov	ax,[p_buffers]	; we don't have any problem.
 25818 00002064 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 25819                                  
 25820 00002067 A1[101D]                	mov	ax,[p_h_buffers]
 25821 0000206A A3[9902]                	mov	[h_buffers],ax
 25822                                  
 25823                                  ;	mov	al,[p_buffer_slash_x]	; M016
 25824                                  ;	mov	[buffer_slash_x],al
 25825                                  
 25826 0000206D A1[2B03]                	mov	ax,[linecount]
 25827 00002070 A3[3503]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 25828                                  	; 31/12/2022
 25829                                  	;jmp	short sr7
 25830                                  	; 04/01/2023
 25831                                  sr7:
 25832 00002073 E94EFF                  	jmp	coff
 25833                                  
 25834                                  ;------------------------------------------------------------------------------
 25835                                  ; break command
 25836                                  ;------------------------------------------------------------------------------
 25837                                  
 25838                                  ;****************************************************************************
 25839                                  ;									    *
 25840                                  ; function: parse the parameters of break = command.			    *
 25841                                  ;									    *
 25842                                  ; input :								    *
 25843                                  ;	es:si -> parameters in command line.				    *
 25844                                  ; output:								    *
 25845                                  ;	turn the control-c check on or off.				    *
 25846                                  ;									    *
 25847                                  ; subroutines to be called:						    *
 25848                                  ;	sysinit_parse							    *
 25849                                  ; logic:								    *
 25850                                  ; {									    *
 25851                                  ;	set di to brk_parms;						    *
 25852                                  ;	set dx,cx to 0; 						    *
 25853                                  ;	while (end of command line)					    *
 25854                                  ;	{ sysinit_parse;						    *
 25855                                  ;	  if (no error) then						    *
 25856                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 25857                                  ;		   set p_ctrl_break,on;					    *
 25858                                  ;	       else					  /*off 	 */ *
 25859                                  ;		   set p_ctrl_break,off;				    *
 25860                                  ;	  else {show message;error_exit};				    *
 25861                                  ;	};								    *
 25862                                  ;	if (no error) then						    *
 25863                                  ;	   dos function call to set ctrl_break check according to	    *
 25864                                  ; };									    *
 25865                                  ;									    *
 25866                                  ;****************************************************************************
 25867                                  
 25868                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25869                                  	; (SYSINIT:22FFh)
 25870                                  tryc:
 25871 00002076 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 25872 00002079 7534                    	jne	short trym
 25873                                  
 25874                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25875                                  ;;ifdef MULTI_CONFIG
 25876                                  ;       call    query_user              ; query the user if config_cmd
 25877                                  ;       jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 25878                                  ;;endif
 25879 0000207B BF[1C1D]                	mov	di,brk_parms
 25880 0000207E 31C9                    	xor	cx,cx
 25881                                  	; 04/01/2023
 25882                                  	;mov	dx,cx
 25883                                  do22:
 25884 00002080 E82506                  	call	sysinit_parse
 25885 00002083 7303                    	jnc	short if22		; parse error
 25886                                  	;call	badparm_p		;  show message and end the search loop.
 25887                                  	;;jmp	short sr22
 25888                                  	; 31/12/2022
 25889                                  ;sr22:
 25890                                  	;jmp	coff
 25891                                  	; 04/01/2023
 25892 00002085 E99E05                  	jmp	badparm_p_coff
 25893                                  if22:
 25894 00002088 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 25895 0000208B 7415                    	je	short en22		; then end the $endloop
 25896                                  
 25897                                  	;cmp	byte [result_val_itag],1
 25898 0000208D 803E[151D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 25899 00002092 7507                    	jne	short if26
 25900                                  
 25901 00002094 C606[411D]01            	mov	byte [p_ctrl_break],1	; turn it on
 25902                                  	;jmp	short en26
 25903                                  	; 31/12/2022
 25904 00002099 EBE5                    	jmp	short do22
 25905                                  if26:
 25906 0000209B C606[411D]00            	mov	byte [p_ctrl_break],0	; turn it off
 25907                                  en26:
 25908 000020A0 EBDE                    	jmp	short do22		; we actually set the ctrl break
 25909                                  en22:
 25910 000020A2 B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 25911 000020A4 B001                    	mov	al,1
 25912 000020A6 8A16[411D]              	mov	dl,[p_ctrl_break]
 25913 000020AA CD21                    	int	21h
 25914                                  	; 31/12/2022
 25915                                  	;jmp	short sr22
 25916                                  	; 04/01/2023
 25917                                  sr22:
 25918 000020AC E915FF                  	jmp	coff
 25919                                  
 25920                                  ;------------------------------------------------------------------------------
 25921                                  ; multitrack command
 25922                                  ;------------------------------------------------------------------------------
 25923                                  
 25924                                  ;******************************************************************************
 25925                                  ;									      *
 25926                                  ; function: parse the parameters of multitrack= command.		      *
 25927                                  ;									      *
 25928                                  ; input :								      *
 25929                                  ;	es:si -> parameters in command line.				      *
 25930                                  ; output:								      *
 25931                                  ;	turn multrk_flag on or off.					      *
 25932                                  ;									      *
 25933                                  ; subroutines to be called:						      *
 25934                                  ;	sysinit_parse							      *
 25935                                  ; logic:								      *
 25936                                  ; {									      *
 25937                                  ;	set di to brk_parms;						      *
 25938                                  ;	set dx,cx to 0; 						      *
 25939                                  ;	while (end of command line)					      *
 25940                                  ;	{ sysinit_parse;						      *
 25941                                  ;	  if (no error) then						      *
 25942                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 25943                                  ;		   set p_mtrk,on;					      *
 25944                                  ;	       else					  /*off 	 */   *
 25945                                  ;		   set p_mtrk,off;					      *
 25946                                  ;	  else {show message;error_exit};				      *
 25947                                  ;	};								      *
 25948                                  ;	if (no error) then						      *
 25949                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 25950                                  ;									      *
 25951                                  ; };									      *
 25952                                  ;									      *
 25953                                  ;******************************************************************************
 25954                                  
 25955                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25956                                  trym:
 25957 000020AF 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 25958 000020B2 7569                    	jne	short tryu
 25959                                  
 25960                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25961                                  ;;ifdef	MULTI_CONFIG
 25962                                  ;       call    query_user      ; query the user if config_cmd
 25963                                  ;       jc      short tryu	; has the CONFIG_OPTION_QUERY bit set
 25964                                  ;;endif
 25965 000020B4 BF[201E]                	mov	di,mtrk_parms
 25966 000020B7 31C9                    	xor	cx,cx
 25967                                  	; 04/01/2023
 25968                                  	;mov	dx,cx
 25969                                  do31:
 25970 000020B9 E8EC05                  	call	sysinit_parse
 25971 000020BC 7303                    	jnc	short if31	; parse error
 25972                                  	;call	badparm_p	;  show message and end the search loop.
 25973                                  	;;jmp	short sr31
 25974                                  	; 31/12/2022
 25975                                  ;sr31:
 25976                                  	;jmp	coff
 25977                                  	; 04/01/2023
 25978 000020BE E96505                  	jmp	badparm_p_coff
 25979                                  if31:
 25980 000020C1 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 25981 000020C4 7415                    	je	short en31	; then end the $endloop
 25982                                  
 25983                                  	;cmp	byte [result_val_itag],1
 25984 000020C6 803E[151D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 25985 000020CB 7507                    	jne	short if35
 25986                                  
 25987 000020CD C606[341E]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 25988                                  	;jmp	short en35
 25989                                  	; 31/12/2022
 25990 000020D2 EBE5                    	jmp	short do31
 25991                                  if35:
 25992 000020D4 C606[341E]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 25993                                  en35:
 25994 000020D9 EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 25995                                  en31:
 25996 000020DB 1E                      	push	ds
 25997                                  	;;mov	ax,Bios_Data ; 70h
 25998                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 25999                                  	; 21/10/2022
 26000 000020DC B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 26001 000020DF 8ED8                    	mov	ds,ax
 26002                                  
 26003 000020E1 2E803E[341E]00          	cmp	byte [cs:p_mtrk],0
 26004 000020E7 7508                    	jne	short if39
 26005                                  
 26006 000020E9 C706[2F05]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 26007 000020EF EB06                    	jmp	short en39
 26008                                  if39:
 26009 000020F1 C706[2F05]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 26010                                  en39:
 26011 000020F7 1F                      	pop	ds
 26012                                  	; 31/12/2022
 26013                                  	;jmp	short sr31
 26014                                  	; 04/01/2023
 26015                                  sr31:
 26016 000020F8 E9C9FE                  	jmp	coff
 26017                                  
 26018                                  ;----------------------------------------------------------------------------
 26019                                  ; DOS=HIGH/LOW command
 26020                                  ;----------------------------------------------------------------------------
 26021                                  
 26022                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26023                                  multi_try_doshi:
 26024 000020FB 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 26025 000020FE 7403                    	je	short it_is_h
 26026                                  skip_it:
 26027 00002100 E9FEFE                  	jmp	multi_pass_filter
 26028                                  it_is_h:				; M003 - removed initing DevUMB
 26029                                  					;	 & runhigh
 26030                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26031                                  ;;ifdef	MULTI_CONFIG
 26032                                  ;       call    query_user              ; query the user if config_cmd
 26033                                  ;       jc      short skip_it		; has the CONFIG_OPTION_QUERY bit set
 26034                                  ;;endif
 26035 00002103 BF[6B1E]                	mov	di,dos_parms
 26036 00002106 31C9                    	xor	cx,cx
 26037                                  	; 04/01/2023
 26038                                  	;mov	dx,cx
 26039                                  h_do_parse:
 26040 00002108 E89D05                  	call	sysinit_parse
 26041 0000210B 7303                    	jnc	short h_parse_ok	; parse error
 26042                                  h_badparm:
 26043                                  	; 04/01/2023
 26044                                  	;call	badparm_p		; show message and end the search loop.
 26045                                  	;;jmp	short h_end
 26046                                  	; 11/12/2022
 26047                                  ;h_end:
 26048                                  	;jmp	coff
 26049                                  	; 04/01/2023
 26050 0000210D E91605                  	jmp	badparm_p_coff	
 26051                                  h_parse_ok:
 26052 00002110 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26053 00002113 7405                    	je	short h_end		; then end the $endloop
 26054 00002115 E82D06                  	call	ProcDOS
 26055 00002118 EBEE                    	jmp	short h_do_parse
 26056                                  	; 11/12/2022
 26057                                  	; 04/01/2023
 26058                                  h_end:
 26059 0000211A E9A7FE                  	jmp	coff
 26060                                  
 26061                                  ;-----------------------------------------------------------------------------
 26062                                  ; devicehigh command
 26063                                  ;-----------------------------------------------------------------------------
 26064                                  
 26065                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26066                                  tryu:
 26067 0000211D 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 26068 00002120 7539                    	jne	short tryd
 26069                                  
 26070                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26071                                  ;;ifdef	MULTI_CONFIG
 26072                                  ;       call    query_user              ; query the user if config_cmd
 26073                                  ;       jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 26074                                  ;;endif
 26075                                  
 26076                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26077                                  ;	call	InitVar
 26078                                  ;	call	ParseSize		; process the size= option
 26079                                  ;	;jnc	short tryu_0
 26080                                  	
 26081                                  	;jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 26082                                  
 26083                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26084                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 26085                                  	;mov	[cs:badparm_seg], es
 26086                                  	; 11/12/2022
 26087                                  	; ds = cs
 26088 00002122 8936[3514]              	mov	[badparm_off], si
 26089 00002126 8C06[3714]              	mov	[badparm_seg], es
 26090                                  	;
 26091 0000212A E88A08                  	call	ParseSize
 26092 0000212D 7303                    	jnc	short tryu_2	; 28/10/2022
 26093                                  
 26094                                  	;call	badparm_p
 26095                                  	;jmp	coff
 26096                                  	; 04/01/2023
 26097 0000212F E9F404                  	jmp	badparm_p_coff
 26098                                  
 26099                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26100                                  ;tryu_0:
 26101                                  ;	mov	ax,[cs:DevSizeOption]
 26102                                  ;	or	ax,ax
 26103                                  ;	jnz	short tryu_2
 26104                                  ;
 26105                                  ;	call	ParseVar
 26106                                  ;	jnc	short tryu_2
 26107                                  ;tryu_1:
 26108                                  ;	mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 26109                                  ;	mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 26110                                  ;	call	badparm_p		; so all we have to do is choke and
 26111                                  ;	jmp	coff			; die, rather verbosely.
 26112                                  
 26113                                  tryu_2:	
 26114 00002132 56                      	push	si
 26115 00002133 06                      	push	es
 26116                                  tryu_3:
 26117 00002134 268A04                  	mov	al,[es:si]
 26118 00002137 3C0D                    	cmp	al,cr
 26119 00002139 740C                    	je	short tryu_4
 26120 0000213B 3C0A                    	cmp	al,lf
 26121 0000213D 7408                    	je	short tryu_4
 26122 0000213F E8030F                  	call	delim
 26123 00002142 7403                    	jz	short tryu_4
 26124 00002144 46                      	inc	si
 26125 00002145 EBED                    	jmp	short tryu_3
 26126                                  tryu_4:	
 26127                                  	; 11/12/2022
 26128                                  	; ds = cs
 26129 00002147 A2[E01E]                	mov	[DevSavedDelim],al
 26130                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 26131                                  					;  it with null
 26132                                  	; 18/12/2022
 26133 0000214A 29DB                    	sub	bx,bx
 26134 0000214C 26881C                  	mov	[es:si],bl ; 0
 26135                                   	;mov	byte [es:si],0
 26136                                  
 26137 0000214F 07                      	pop	es
 26138 00002150 5E                      	pop	si
 26139                                  
 26140                                  ;------------------------------------------------------------------------------
 26141                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26142                                  ;------------------------------------------------------------------------------
 26143                                  
 26144                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26145                                  ;
 26146                                  ;	call	UmbTest			; See if UMBs are around...
 26147                                  ;	jnc	short NrmTst		; ...yep. So do that normal thang.
 26148                                  ;
 26149                                  ;	mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 26150                                  ;	jmp	short LoadDevice
 26151                                  
 26152                                  ;------------------------------------------------------------------------------
 26153                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26154                                  ;------------------------------------------------------------------------------
 26155                                  
 26156                                  NrmTst:
 26157                                  	; 11/12/2022
 26158                                  	; ds = cs
 26159                                  	;;mov	byte [cs:DeviceHi],0
 26160                                  	;mov	byte [DeviceHi],0
 26161                                  	; 18/12/2022
 26162                                  	; bx = 0
 26163 00002151 381E[BC1E]              	cmp	[DevUMB],bl ; 0
 26164                                  	;cmp	byte [DevUMB],0
 26165                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 26166 00002155 7417                    	je	short LoadDevice	; no, we don't
 26167                                  	;mov	byte [cs:DeviceHi],1
 26168                                  	; 11/12/2022
 26169                                  	;mov	byte [DeviceHi],1
 26170                                  	; 18/12/2022
 26171 00002157 FEC3                    	inc	bl ; mov bl,1 ; (*)
 26172                                  	; 11/12/2022
 26173                                  	;jmp	short LoadDevice2	; 11/12/2022
 26174 00002159 EB13                    	jmp	short LoadDevice
 26175                                  
 26176                                  ;------------------------------------------------------------------------------
 26177                                  ; device command
 26178                                  ;------------------------------------------------------------------------------
 26179                                  
 26180                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26181                                  	; (SYSINIT:2401h)
 26182                                  tryd:
 26183                                  	; 11/12/2022
 26184 0000215B 31DB                    	xor 	bx, bx
 26185                                  	;
 26186 0000215D 80FC44                          cmp     ah,CONFIG_DEVICE ;  'D'
 26187 00002160 7403                    	je	short gotd
 26188                                  skip_it2:
 26189 00002162 E93502                  	jmp	tryq
 26190                                  gotd:
 26191                                  
 26192                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26193                                  ;;ifdef	MULTI_CONFIG
 26194                                  ;       call    query_user              ; query the user if config_cmd
 26195                                  ;       jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 26196                                  ;;endif
 26197                                  	; 11/12/2022
 26198                                  	; ds = cs
 26199                                  	;mov	byte [DeviceHi],0
 26200                                  	;mov	word [DevSizeOption],0
 26201 00002165 891E[CC1E]              	mov	[DevSizeOption],bx ; 0
 26202 00002169 C606[E01E]20            	mov	byte [DevSavedDelim],' '
 26203                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 26204                                  	;mov	word [cs:DevSizeOption],0
 26205                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 26206                                  					;  be replaced with a ' '
 26207                                  LoadDevice:                             ; device= or devicehigh= command.
 26208                                  	; 11/12/2022
 26209                                  	;mov	byte [DeviceHi],0
 26210 0000216E 881E[CB1E]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 26211                                  LoadDevice2:
 26212                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 26213                                  	;
 26214                                  	;push    cs
 26215                                          ;pop     ds
 26216                                  	;
 26217                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 26218                                  	;mov	[bpb_addr+2],es
 26219                                  	;
 26220                                  	;mov	[DevCmdLine],si		; save it for ourself
 26221                                  	;mov	[DevCmdLine+2],es
 26222                                  	;
 26223                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 26224                                  
 26225                                  	; 11/12/2022
 26226                                  	; ds = cs
 26227                                  	;mov	bx,cs
 26228                                  	;mov	ds,bx
 26229                                  
 26230                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 26231 00002172 8936[F803]              	mov	[bpb_addr],si
 26232                                  	;mov	[cs:bpb_addr+2],es
 26233 00002176 8C06[FA03]              	mov	[bpb_addr+2],es
 26234                                  
 26235                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 26236 0000217A 8936[DC1E]              	mov	[DevCmdLine],si
 26237                                  	;mov	[cs:DevCmdLine+2],es	
 26238 0000217E 8C06[DE1E]              	mov	[DevCmdLine+2],es	
 26239                                  
 26240 00002182 E8030F                  	call	round
 26241                                  	
 26242 00002185 E83F07                  	call	SizeDevice
 26243 00002188 7215                    	jc	short BadFile
 26244                                  
 26245                                  	; 11/12/2022
 26246                                  	; ds = cs
 26247                                  
 26248                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 26249                                  
 26250                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26251                                  ;
 26252                                  ;	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 26253                                  ;
 26254                                  ;	mov	al,[DeviceHi]		; If not using upper memory,
 26255                                  ;	or	byte [DeviceHi],0	; Skip all this and go on to
 26256                                  ;	jz	short DevConvLoad	; the actual load.
 26257                                  ;
 26258                                  ;	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 26259                                  ;	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 26260                                  ;
 26261                                  ;	cmp	al,-1			; If umb0 not specified, it's old style
 26262                                  ;	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 26263                                  ;
 26264                                  ;	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 26265                                  ;
 26266                                  ;	call	GetLoadSize		; Returns size of first UMB specified
 26267                                  ;	or	ax,ax
 26268                                  ;	jz	short tryd_1		; If size1 not specified, nada to do:
 26269                                  ;
 26270                                  ;	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 26271                                  ;	jge	short DevConvLoad
 26272                                  ;
 26273                                  ;tryd_1: mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 26274                                  ;	call	StoLoadSize		; minsize for load UMB.
 26275                                  
 26276                                  ; - End DeviceHigh primary logic changes --------------------------------------
 26277                                  
 26278                                  DevConvLoad:
 26279                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26280 0000218A E84F06                  	call	InitDevLoad
 26281                                  
 26282                                  	; 11/12/2022
 26283                                  	; ds = cs
 26284 0000218D A1[B01E]                	mov	ax,[DevLoadAddr]
 26285 00002190 0306[AE1E]              	add	ax,[DevSize]
 26286 00002194 7206                    	jc	short NoMem
 26287 00002196 3906[B21E]              	cmp	[DevLoadEnd],ax
 26288 0000219A 7312                    	jae	short LoadDev
 26289                                  	
 26290                                  	; 11/12/2022
 26291                                  	;mov	ax,[cs:DevLoadAddr]
 26292                                  	;add	ax,[cs:DevSize]
 26293                                  	;jc	short NoMem
 26294                                  	;cmp	[cs:DevLoadEnd],ax
 26295                                  	;jae	short LoadDev
 26296                                  NoMem:
 26297                                  	; 11/12/2022
 26298                                  	; ds = cs
 26299                                  	;jmp	mem_err
 26300 0000219C E92C0F                  	jmp	mem_err2
 26301                                  
 26302                                  BadFile:
 26303                                  	;28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26304                                  	;call	RetFromUM		; Does nothing if didn't call HideUMBs
 26305                                  	;cmp    byte [es:si],' '
 26306                                          ;jae	short tryd_2
 26307 0000219F 26803C0D                	cmp	byte [es:si],0Dh	; cr
 26308 000021A3 7503                            jne	short tryd_2
 26309 000021A5 E92305                  	jmp	badop
 26310                                  tryd_2:
 26311 000021A8 E87411                  	call	badload
 26312 000021AB E916FE                  	jmp	coff
 26313                                  
 26314                                  LoadDev:
 26315 000021AE 06                      	push	es
 26316 000021AF 1F                      	pop	ds
 26317                                  
 26318 000021B0 89F2                    	mov	dx,si			;ds:dx points to file name
 26319 000021B2 E86307                  	call	ExecDev			; load device driver using exec call
 26320                                  badldreset:
 26321 000021B5 1E                      	push	ds
 26322 000021B6 07                      	pop	es			;es:si back to config.sys
 26323 000021B7 0E                      	push	cs
 26324 000021B8 1F                      	pop	ds			;ds back to sysinit
 26325 000021B9 72E4                    	jc	short BadFile
 26326                                  goodld:
 26327                                  	; 11/12/2022
 26328                                  	; ds = cs
 26329                                  
 26330 000021BB 06                      	push	es
 26331 000021BC 56                      	push	si
 26332 000021BD E87507                  	call	RemoveNull
 26333 000021C0 06                      	push	es
 26334 000021C1 56                      	push	si
 26335                                  
 26336 000021C2 0E                      	push	cs
 26337 000021C3 07                      	pop	es
 26338                                  
 26339 000021C4 1E                      	push	ds
 26340 000021C5 56                      	push	si
 26341                                  
 26342                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 26343                                  	; 31/12/2022
 26344                                  	; ds = cs
 26345 000021C6 C536[B41E]              	lds	si,[DevEntry]
 26346                                  	
 26347                                  	;test	word [si+4],8000h
 26348                                  	; 11/12/2022
 26349 000021CA F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 26350                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 26351 000021CE 7511                    	jnz	short got_device_com_cont   ; no.
 26352                                  
 26353 000021D0 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 26354                                  	;cmp	byte [si+32],26
 26355 000021D5 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 26356 000021D9 7206                    	jb	short got_device_com_cont
 26357                                  
 26358 000021DB 5E                      	pop	si
 26359 000021DC 1F                      	pop	ds
 26360                                  
 26361 000021DD 5E                      	pop	si			; clear the stack
 26362 000021DE 07                      	pop	es
 26363                                  
 26364                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26365                                  	;call	RetFromUM		; Do this before we leave
 26366                                  
 26367 000021DF EB57                    	jmp	short badnumblock
 26368                                  
 26369                                  got_device_com_cont:
 26370 000021E1 5E                      	pop	si
 26371 000021E2 1F                      	pop	ds
 26372                                  
 26373                                  	; 11/12/2022
 26374                                  	; ds = cs
 26375                                  
 26376 000021E3 E88205                  	call	LieInt12Mem
 26377 000021E6 E8E105                  	call	UpdatePDB		; update the PSP:2 value M020
 26378                                  
 26379                                  	; 11/12/2022
 26380                                  	; ds = cs
 26381 000021E9 803E[3114]00            	cmp	byte [multdeviceflag],0
 26382                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 26383                                  					;  driver in the file ; M027
 26384 000021EE 750E                    	jne	short skip_pass_limit	;		      ; M027
 26385                                  
 26386                                  	; 11/12/2022
 26387                                  	; ds = cs
 26388                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 26389                                  	;mov	bx,[cs:DevLoadEnd]
 26390                                  	;mov	[cs:break_addr+2],bx
 26391                                  
 26392 000021F0 C706[F403]0000          	mov	word [break_addr],0
 26393 000021F6 8B1E[B21E]              	mov	bx,[DevLoadEnd]
 26394 000021FA 891E[F603]              	mov	[break_addr+2],bx
 26395                                  
 26396                                  skip_pass_limit:
 26397                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 26398                                  ;	number of installed devices (including DblSpace drives) where
 26399                                  ;	"drivenumber" is the number that the next block device will
 26400                                  ;	be assigned to. Because some naughty device drivers (like
 26401                                  ;	interlnk) look at the internal DOS variable instead of the
 26402                                  ;	value we pass it, we'll temporarily stick our value into
 26403                                  ;	DOS DATA while we're initializing the device drivers.
 26404                                  ;
 26405                                  ;	Note that this will make it impossible for this device
 26406                                  ;	driver to access the DblSpace drive letters, whether
 26407                                  ;	they are swapped-hosts or unswapped compressed drives,
 26408                                  ;	during its initialization phase.
 26409                                  
 26410                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26411                                  	;push	ds
 26412                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26413                                  	;
 26414                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 26415                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 26416                                  	;mov	ah,al
 26417                                  	;
 26418                                  	;xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 26419                                  	;pop	ds
 26420                                  	;
 26421                                  	;push	ax			; save real sysi_numio/ncds in ax
 26422                                  
 26423                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26424                                  	; (SYSINIT:24B9h)
 26425                                  
 26426 000021FE BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 26427 00002201 E8D00E                  	call	calldev 		; calldev (sdevstrat);
 26428 00002204 BB0800                  	mov	bx,SYSDEV.INT ; 8
 26429 00002207 E8CA0E                  	call	calldev 		; calldev (sdevint);
 26430                                  
 26431                                  	; 11/12/2022
 26432                                  	; ds <> cs
 26433                                  
 26434                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26435                                  	;pop	ax			; get real sysi_numio value
 26436                                  	;push	ds
 26437                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26438                                  	;mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 26439                                  	;pop	ds
 26440                                  
 26441                                  	; 11/12/2022
 26442 0000220A 0E                      	push	cs
 26443 0000220B 1F                      	pop	ds
 26444                                  
 26445 0000220C E88905                  	call	TrueInt12Mem
 26446                                  
 26447                                  	; 11/12/2022
 26448                                  	; ds = cs
 26449                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 26450                                  	;mov	[cs:DevBrkAddr],ax
 26451                                  	;mov	ax,[cs:break_addr+2]
 26452                                  	;mov	[cs:DevBrkAddr+2],ax
 26453 0000220F A1[F403]                	mov	ax,[break_addr]	
 26454 00002212 A3[B81E]                	mov	[DevBrkAddr],ax
 26455 00002215 A1[F603]                	mov	ax,[break_addr+2]
 26456 00002218 A3[BA1E]                	mov	[DevBrkAddr+2],ax
 26457                                  
 26458                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26459                                  	;call	RetFromUM		; There we go... all done.
 26460                                  
 26461                                  	; 11/12/2022
 26462 0000221B 803E[BC1E]00            	cmp	byte [DevUMB],0	
 26463                                  	;cmp	byte [cs:DevUMB],0
 26464 00002220 7403                    	je	short tryd_3
 26465 00002222 E83608                  	call	AllocUMB
 26466                                  	; 31/12/2022
 26467                                  	; ds= cs
 26468                                  tryd_3:
 26469                                  
 26470                                  ;ifndef ROMDOS
 26471                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 26472                                  
 26473                                  	; 11/12/2022
 26474                                  	; ds = cs
 26475                                  	
 26476                                  	;cmp	byte [cs:runhigh],0FFh
 26477 00002225 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 26478 0000222A 7503                    	jne	short tryd_4
 26479                                  	
 26480                                  	; 11/12/2022
 26481                                  	; ds = cs
 26482 0000222C E8ADE6                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 26483                                  tryd_4:
 26484                                  ;endif ; ROMDOS
 26485                                  
 26486 0000222F 5E                      	pop	si
 26487 00002230 1F                      	pop	ds
 26488 00002231 C60400                  	mov	byte [si],0		; *p = 0;
 26489                                  
 26490 00002234 0E                      	push	cs
 26491 00002235 1F                      	pop	ds
 26492                                  
 26493 00002236 EB1F                    	jmp	short was_device_com
 26494                                  
 26495                                  ;----------------------------------------------------------------------------
 26496                                  
 26497                                  ;02/04/2019 - Retro DOS v4.0
 26498                                  
 26499                                  badnumblock:
 26500 00002238 0E                      	push	cs
 26501 00002239 1F                      	pop	ds
 26502 0000223A BA[1838]                	mov	dx,badblock
 26503 0000223D E80711                  	call	print
 26504                                  
 26505                                  ;------ fall thru -----------------------------------------------------------
 26506                                  
 26507                                  erase_dev_do:				; modified to show message "error in config.sys..."
 26508                                  	
 26509                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 26510                                  	
 26511 00002240 5E                      	pop	si
 26512 00002241 07                      	pop	es
 26513                                  
 26514 00002242 0E                      	push	cs
 26515 00002243 1F                      	pop	ds
 26516                                  
 26517                                  skip1_resetmemhi:
 26518                                  	; 11/12/2022
 26519                                  	; ds = cs
 26520 00002244 833E[FD03]00            	cmp	word [configmsgflag],0
 26521                                  	;cmp	word [cs:configmsgflag],0
 26522 00002249 7409                    	je	short no_error_line_msg
 26523                                  
 26524 0000224B E8C804                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 26525                                  	; 11/12/2022
 26526                                  	; ds = cs
 26527                                  	;mov	word [cs:configmsgflag],0
 26528 0000224E C706[FD03]0000          	mov	word [configmsgflag],0	; set the default value again.
 26529                                  
 26530                                  no_error_line_msg:
 26531 00002254 E96DFD                  	jmp	coff
 26532                                  
 26533                                  ;----------------------------------------------------------------------------
 26534                                  
 26535                                  was_device_com:
 26536                                  	; 14/12/2022
 26537                                  	; ds = cs
 26538 00002257 A1[BA1E]                	mov	ax,[DevBrkAddr+2]
 26539                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 26540 0000225A 3B06[B21E]              	cmp	ax,[DevLoadEnd]
 26541                                  	;cmp	ax,[cs:DevLoadEnd]
 26542 0000225E 7605                    	jbe	short breakok
 26543                                  
 26544 00002260 5E                      	pop	si
 26545 00002261 07                      	pop	es
 26546 00002262 E93AFF                  	jmp	BadFile
 26547                                  
 26548                                  breakok:
 26549                                  	; 14/12/2022
 26550                                  	; ds = cs
 26551 00002265 C43E[6B02]              	les	di,[DOSINFO] 
 26552 00002269 C516[B41E]              	lds	dx,[DevEntry]
 26553                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 26554 0000226D 89D6                    	mov	si,dx
 26555                                  
 26556                                  	; 14/11/2022
 26557                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 26558                                  
 26559                                  	; 14/12/2022
 26560                                  	; ds <> cs
 26561                                  	
 26562                                  	;mov	ax,[si+4]
 26563 0000226F 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 26564                                  	; 12/12/2022
 26565 00002272 F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 26566                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 26567 00002275 7426                    	jz	short isblock
 26568                                  
 26569                                  ;------ lets deal with character devices
 26570                                  
 26571 00002277 2E800E[3414]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26572 0000227D E8E806                  	call	DevSetBreak		;go ahead and alloc mem for device
 26573                                  jc_edd:
 26574 00002280 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 26575                                  
 26576                                  	; 12/12/2022
 26577 00002282 A801                    	test	al,ISCIN
 26578                                  	;test	ax,ISCIN ; 1		;is it a console in?
 26579 00002284 7408                    	jz	short tryclk
 26580                                  
 26581 00002286 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 26582 0000228A 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 26583                                  tryclk: 
 26584                                  	; 12/12/2022
 26585 0000228E A808                    	test	al,ISCLOCK
 26586                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 26587 00002290 7408                    	jz	short golink
 26588                                  
 26589 00002292 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 26590 00002296 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 26591                                  golink: 
 26592 0000229A E9B000                  	jmp	linkit
 26593                                  
 26594                                  ;------ deal with block device drivers
 26595                                  
 26596                                  isblock:
 26597 0000229D 2EA0[F303]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 26598 000022A1 08C0                    	or	al,al
 26599 000022A3 749B                    	jz	short erase_dev_do
 26600                                  	;mov	[si+10],al
 26601 000022A5 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 26602                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26603                                  	;add	[cs:driver_units],al	; keep total for all drivers in file
 26604                                  perdrv:
 26605 000022A8 98                      	cbw				; warning no device > 127 units
 26606 000022A9 89C1                    	mov	cx,ax
 26607 000022AB 88E6                    	mov	dh,ah
 26608                                  	;mov	dl,[es:di+32]
 26609 000022AD 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 26610 000022B1 88D4                    	mov	ah,dl
 26611 000022B3 00C4                    	add	ah,al			; check for too many devices
 26612 000022B5 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 26613 000022B8 7603                    	jbe	short ok_block
 26614 000022BA E97BFF                  	jmp	badnumblock
 26615                                  
 26616                                  ok_block:
 26617 000022BD 2E800E[3414]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26618 000022C3 E8A206                  	call	DevSetBreak		; alloc the device
 26619 000022C6 72B8                    	jc	short jc_edd
 26620 000022C8 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 26621                                  
 26622 000022CC 2E0006[FC03]            	add	[cs:drivenumber],al	; remember amount for next device
 26623 000022D1 2EC51E[F803]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 26624                                  perunit:
 26625 000022D6 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 26626                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 26627                                  	; 11/12/2022
 26628 000022DB 26C46E00                	les	bp,[es:bp]
 26629                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26630                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 26631                                  scandpb:
 26632                                  	;cmp	word [es:bp+25],-1
 26633 000022DF 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 26634 000022E4 7406                    	je	short foundpb
 26635                                  	;les	bp,[es:bp+25]
 26636 000022E6 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 26637 000022EA EBF3                    	jmp	short scandpb
 26638                                  foundpb:
 26639 000022EC 2EA1[B81E]              	mov	ax,[cs:DevBrkAddr]
 26640 000022F0 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 26641 000022F4 2EA1[BA1E]              	mov	ax,[cs:DevBrkAddr+2]
 26642 000022F8 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 26643                                  
 26644 000022FC 2EC42E[B81E]            	les	bp,[cs:DevBrkAddr]
 26645 00002301 2E8306[B81E]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 26646                                  
 26647 00002307 E83D06                  	call	RoundBreakAddr
 26648                                  
 26649 0000230A 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 26650 00002310 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 26651                                  
 26652 00002315 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 26653 00002317 43                      	inc	bx
 26654 00002318 43                      	inc	bx			;point to next guy
 26655                                  	;mov	[es:bp+DPB.DRIVE],dx
 26656                                  	; 11/12/2022
 26657 00002319 26895600                	mov	[es:bp],dx ; 13/05/2019
 26658                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26659                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 26660                                  	
 26661 0000231D B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 26662 0000231F CD21                    	int	21h
 26663                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 26664                                  			; DS:SI -> BPB (BIOS Parameter Block)
 26665                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 26666                                  
 26667                                  	;mov	ax,[es:bp+2]
 26668 00002321 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 26669 00002325 06                      	push	es
 26670 00002326 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 26671                                  	;cmp	ax,[es:di+10h]
 26672 0000232B 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 26673 0000232F 07                      	pop	es
 26674                                  	;jna	short iblk_1
 26675                                  	;jmp	short bad_bpb_size_sector
 26676                                  	; 29/10/2022
 26677 00002330 775A                    	ja	short bad_bpb_size_sector
 26678                                  iblk_1:
 26679 00002332 1E                      	push	ds
 26680 00002333 52                      	push	dx
 26681                                  
 26682 00002334 2EC516[B41E]            	lds	dx,[cs:DevEntry]
 26683                                  	;mov	[es:bp+13h],dx
 26684 00002339 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 26685                                  	;mov	[es:bp+15h],ds
 26686 0000233D 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 26687                                  
 26688 00002341 5A                      	pop	dx
 26689 00002342 1F                      	pop	ds
 26690                                  
 26691 00002343 42                      	inc	dx
 26692 00002344 FEC6                    	inc	dh
 26693 00002346 E28E                    	loop	perunit
 26694                                  
 26695 00002348 0E                      	push	cs
 26696 00002349 1F                      	pop	ds
 26697                                  
 26698 0000234A E889E8                  	call	TempCDS 		; set cds for new drives
 26699                                  linkit:
 26700 0000234D 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 26701 00002352 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 26702 00002356 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 26703                                  
 26704 0000235A 2EC536[B41E]            	lds	si,[cs:DevEntry]	;ds:si = device location
 26705 0000235F 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 26706 00002363 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 26707 00002367 8B04                    	mov	ax,[si]			;get pointer to next device
 26708 00002369 2EA3[B41E]              	mov	[cs:DevEntry],ax	;and save it
 26709                                  
 26710 0000236D 890C                    	mov	[si],cx			;link in the driver
 26711 0000236F 895402                  	mov	[si+2],dx
 26712                                  enddev:
 26713 00002372 5E                      	pop	si
 26714 00002373 07                      	pop	es
 26715 00002374 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 26716 00002375 740B                    	jz	short coffj3
 26717                                  
 26718 00002377 2EFE06[3114]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 26719 0000237C E80B06                  	call	DevBreak		; M009
 26720                                  	; 11/12/2022
 26721                                  	; ds = cs (DevBreak)
 26722                                  
 26723                                  	; 03/04/2019 - Retro DOS v4.0
 26724                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 26725 0000237F E939FE                  	jmp	goodld			; otherwise pretend we loaded it in
 26726                                  coffj3: 
 26727                                  	; 18/12/2022
 26728                                  	; ax = 0
 26729 00002382 2EA2[3114]              	mov	[cs:multdeviceflag],al ; 0
 26730                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 26731 00002386 E80106                  	call	DevBreak
 26732                                  	; 11/12/2022
 26733                                  	; ds = cs (DevBreak)
 26734                                  	
 26735                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 26736                                  	;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 26737                                  ;					;  created a bogus arena to try
 26738                                  ;					;  to protect some of its resident-
 26739                                  ;					;  init code.
 26740                                  	;call	CheckDoubleSpace
 26741 00002389 E938FC                  	jmp	coff
 26742                                  
 26743                                  ;----------------------------------------------------------------------------
 26744                                  
 26745                                  ;CheckDoubleSpace:
 26746                                  ;;;;	ifdef	dblspace_hooks
 26747                                  ;
 26748                                  ;;	Now check for two special MagicDrv cases:
 26749                                  ;;
 26750                                  ;;       a) the last driver load was MagicDrv final placement:
 26751                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 26752                                  ;;
 26753                                  ;;       b) MagicDrv is currently in temporary home:
 26754                                  ;;          -> call it to give it a chance to mount and shuffle drives
 26755                                  ;
 26756                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 26757                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 26758                                  ;
 26759                                  ;;	Now inquire of driver whether it is present, and final located
 26760                                  ;
 26761                                  ;	mov	ax,multMagicdrv ; 4A11h
 26762                                  ;	mov	bx,MD_VERSION ; 0
 26763                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 26764                                  ;	or	ax,ax			; is it there?
 26765                                  ;	jnz	short no_more_magic_calls ; done if not
 26766                                  ;
 26767                                  ;	test	dx,8000h		; is it final placed?
 26768                                  ;	jnz	short magic_not_yet_home ;  skip if not
 26769                                  ;
 26770                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 26771                                  ;;	don't keep checking it, and add its number of drive letters
 26772                                  ;;	to drivenumber.
 26773                                  ;
 26774                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 26775                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 26776                                  ;;					;  the drive number we'll pass to the
 26777                                  ;;					;  next loadable block device.
 26778                                  ;
 26779                                  ;	jmp	short no_more_magic_calls ; and finished.
 26780                                  ;
 26781                                  ;magic_not_yet_home:
 26782                                  ;	push	es
 26783                                  ;	push	si
 26784                                  ;
 26785                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 26786                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 26787                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 26788                                  ;
 26789                                  ;	mov	bx,2
 26790                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 26791                                  ;;					;   by this many units
 26792                                  ;
 26793                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 26794                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 26795                                  ;;					;  sees this, to prevent bad things
 26796                                  ;;					;  from happening if people run the
 26797                                  ;;					;  new driver with an old BIOS
 26798                                  ;	call	far [cs:MagicBackdoor]
 26799                                  ;
 26800                                  ;	pop	si
 26801                                  ;	pop	es
 26802                                  ;
 26803                                  ;no_more_magic_calls:
 26804                                  ;
 26805                                  ;;;;	endif
 26806                                  ;	retn
 26807                                  
 26808                                  ; 03/04/2019 - Retro DOS v4.0
 26809                                  
 26810                                  bad_bpb_size_sector:
 26811 0000238C 5E                      	pop	si
 26812 0000238D 07                      	pop	es
 26813 0000238E BA[3A37]                	mov	dx,badsiz_pre
 26814 00002391 BB[1837]                	mov	bx,crlfm
 26815 00002394 E88E0F                  	call	prnerr
 26816                                  
 26817 00002397 E92AFC                  	jmp	coff
 26818                                  
 26819                                  ;------------------------------------------------------------------------------
 26820                                  ; country command
 26821                                  ;      the syntax is:
 26822                                  ;	country=country id {,codepage {,path}}
 26823                                  ;	country=country id {,,path}	:default codepage id in dos
 26824                                  ;------------------------------------------------------------------------------
 26825                                  
 26826                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26827                                  	; (SYSINIT:2663h)
 26828                                  tryq:
 26829 0000239A 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 26830 0000239D 7403                    	je	short tryq_cont
 26831                                  skip_it3:
 26832 0000239F E90801                  	jmp	tryf
 26833                                  tryq_cont:
 26834                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26835                                  ;;ifdef	MULTI_CONFIG
 26836                                  ;       call    query_user		; query the user if config_cmd
 26837                                  ;       jc      short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 26838                                  ;;endif
 26839                                  	; 14/12/2022
 26840                                  	; ds = cs
 26841                                  	; bx = 0
 26842                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 26843                                  	;mov	word [cs:p_code_page],0
 26844 000023A2 881E[D033]              	mov	[cntry_drv],bl ; 0
 26845 000023A6 891E[791D]              	mov	[p_code_page],bx ; 0
 26846                                  	
 26847 000023AA BF[421D]                	mov	di,cntry_parms
 26848 000023AD 31C9                    	xor	cx,cx
 26849                                  	; 04/01/2023
 26850                                  	;mov	dx,cx
 26851                                  do52:
 26852 000023AF E8F602                  	call	sysinit_parse
 26853 000023B2 730B                    	jnc	short if52		; parse error,check error code and
 26854                                  
 26855 000023B4 E8E000                  	call	cntry_error		; show message and end the search loop.
 26856                                  	; 14/12/2022
 26857                                  	; ds = cs
 26858 000023B7 C706[771D]FFFF          	mov	word [p_cntry_code],-1
 26859                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 26860 000023BD EB34                    	jmp	short sr52
 26861                                  if52:
 26862 000023BF 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 26863 000023C2 742F                    	jz	short sr52		; then end the search loop
 26864                                  
 26865                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 26866                                  	; 14/12/2022
 26867                                  	; ds = cs
 26868 000023C4 803E[141D]01            	cmp	byte [result_val],_$P_Number	
 26869                                  	;cmp	byte [cs:result_val],_$P_Number
 26870 000023C9 7512                    	jnz	short if56
 26871                                  
 26872                                  	;;mov	ax,[cs:rw_dword]
 26873                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 26874                                  	; 14/12/2022
 26875 000023CB A1[181D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 26876 000023CE 83F901                  	cmp	cx,1
 26877 000023D1 7505                    	jne	short if57
 26878                                  
 26879                                  	;mov	[cs:p_cntry_code],ax
 26880                                  	; 14/12/2022
 26881 000023D3 A3[771D]                	mov	[p_cntry_code],ax
 26882                                  
 26883                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26884                                  	;jmp	short en57
 26885                                  	; 12/12/2022
 26886                                  	;jmp	short en56
 26887 000023D6 EBD7                    	jmp	short do52
 26888                                  
 26889                                  if57:
 26890                                  	;mov	[cs:p_code_page],ax
 26891                                  	; 14/12/2022
 26892                                  	; ds = cs
 26893 000023D8 A3[791D]                	mov	[p_code_page],ax
 26894                                  en57:
 26895                                  	;jmp	short en56		; path entered
 26896                                  	; 12/12/2022
 26897 000023DB EBD2                    	jmp	short do52
 26898                                  
 26899                                  if56:
 26900 000023DD 1E                      	push	ds
 26901 000023DE 06                      	push	es
 26902 000023DF 56                      	push	si
 26903 000023E0 57                      	push	di
 26904                                  
 26905 000023E1 0E                      	push	cs
 26906 000023E2 07                      	pop	es
 26907                                  
 26908                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 26909                                  	; 14/12/2022
 26910 000023E3 C536[181D]              	lds	si,[rv_dword]
 26911 000023E7 BF[D033]                	mov	di,cntry_drv
 26912 000023EA E8260F                  	call	move_asciiz
 26913                                  
 26914 000023ED 5F                      	pop	di
 26915 000023EE 5E                      	pop	si
 26916 000023EF 07                      	pop	es
 26917 000023F0 1F                      	pop	ds
 26918                                  
 26919                                  en56:
 26920 000023F1 EBBC                    	jmp	short do52
 26921                                  
 26922                                  sr52:
 26923                                  	; 14/12/2022
 26924                                  	; ds = cs
 26925 000023F3 833E[771D]FF            	cmp	word [p_cntry_code],-1
 26926                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 26927 000023F8 7509                    	jne	short tryq_open
 26928 000023FA E9C7FB                  	jmp	coff
 26929                                  
 26930                                  tryqbad:				;"invalid country code or code page"
 26931 000023FD F9                      	stc
 26932 000023FE BA[8137]                	mov     dx,badcountry
 26933 00002401 EB79                    	jmp     tryqchkerr
 26934                                  
 26935                                  tryq_open:
 26936                                  	; 14/12/2022
 26937                                  	; ds = cs
 26938 00002403 803E[D033]00            	cmp	byte [cntry_drv],0
 26939                                  	;cmp	byte [cs:cntry_drv],0
 26940 00002408 7405                    	je	short tryq_def
 26941 0000240A BA[D033]                	mov	dx,cntry_drv
 26942 0000240D EB03                    	jmp	short tryq_openit
 26943                                  
 26944                                  tryq_def:
 26945 0000240F BA[D233]                	mov	dx,cntry_root
 26946                                  tryq_openit:
 26947 00002412 B8003D                  	mov	ax,3D00h		;open a file
 26948 00002415 F9                      	stc
 26949 00002416 CD21                    	int	21h
 26950 00002418 7242                    	jc	short tryqfilebad	;open failure
 26951                                  
 26952                                  	; 14/12/2022
 26953                                  	; ds = cs
 26954 0000241A A3[D803]                	mov	[cntryfilehandle],ax
 26955                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 26956 0000241D 89C3                    	mov	bx,ax
 26957 0000241F A1[771D]                	mov	ax,[p_cntry_code]
 26958 00002422 8B16[791D]              	mov	dx,[p_code_page]
 26959                                  	;mov	ax,[cs:p_cntry_code]
 26960                                  	;mov	dx,[cs:p_code_page]	; now,ax=country id,bx=filehandle
 26961                                  	;mov	cx,[cs:memhi]
 26962 00002426 8B0E[E003]              	mov	cx,[memhi]
 26963 0000242A 81C18001                	add	cx,384			; need 6k buffer to handle country.sys
 26964                                  					; M023
 26965                                  	; 14/12/2022
 26966                                  	; ds = cs
 26967 0000242E 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 26968                                  	;cmp	cx,[cs:ALLOCLIM]
 26969 00002432 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 26970                                  
 26971 00002434 BE[D033]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 26972 00002437 803C00                  	cmp	byte [si],0 		;default path?
 26973 0000243A 7502                    	jne	short tryq_set_for_dos
 26974                                  
 26975 0000243C 46                      	inc	si
 26976 0000243D 46                      	inc	si			;ds:si -> cntry_root
 26977                                  
 26978                                  tryq_set_for_dos:
 26979                                  	; 14/12/2022
 26980                                  	; ds = cs
 26981 0000243E C43E[7702]              	les	di,[sysi_country]
 26982                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 26983 00002442 57                      	push	di			;save di
 26984                                  	;add	di,8
 26985 00002443 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 26986 00002446 E8CA0E                  	call	move_asciiz		;set the path to country.sys in dos.
 26987 00002449 5F                      	pop	di			;es:di -> country info tab again.
 26988                                  
 26989                                  	; 14/12/2022	
 26990 0000244A 8B0E[E003]              	mov	cx,[memhi]
 26991                                  	;mov	cx,[cs:memhi]
 26992 0000244E 8ED9                    	mov	ds,cx
 26993 00002450 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 26994 00002452 E8020D                  	call	setdoscountryinfo	;now do the job!!!
 26995                                  	; ds <> cs ; 14/12/2022
 26996 00002455 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 26997                                  
 26998 00002457 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 26999 0000245A 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 27000                                  
 27001                                  tryqfilebad:
 27002 0000245C 0E                      	push	cs
 27003 0000245D 07                      	pop	es
 27004 0000245E 2E803E[D033]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 27005 00002464 7405                    	je	short tryqdefbad
 27006                                  
 27007 00002466 BE[D033]                	mov	si,cntry_drv
 27008 00002469 EB03                    	jmp	short tryqbadload
 27009                                  
 27010                                  tryqdefbad:				;default file has been used.
 27011 0000246B BE[D233]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 27012                                  tryqbadload:
 27013 0000246E E8AE0E                  	call	badload 		;ds will be restored to sysinit_seg
 27014                                  	;mov	cx,[cs:CONFBOT]
 27015                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27016                                  	;mov	cx,[cs:top_of_cdss]
 27017                                  	; 11/12/2022
 27018                                  	; ds = cs
 27019 00002471 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 27020 00002475 8EC1                    	mov	es,cx			;restore es -> confbot.
 27021 00002477 EB13                    	jmp	short coffj4
 27022                                  
 27023                                  tryqmemory:
 27024 00002479 BA[C437]                	mov	dx,insufmemory
 27025                                  tryqchkerr:
 27026                                  	;mov	cx,[cs:CONFBOT]
 27027                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27028                                  	;mov	cx,[cs:top_of_cdss]
 27029                                  	; 12/12/2022
 27030 0000247C 0E                      	push	cs
 27031 0000247D 1F                      	pop	ds
 27032 0000247E 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 27033 00002482 8EC1                    	mov	es,cx			;restore es -> confbot seg
 27034                                  	;push	cs
 27035                                  	;pop	ds			;restore ds to sysinit_seg
 27036 00002484 7306                    	jnc	short coffj4		;if no error,then exit
 27037                                  
 27038 00002486 E8BE0E                  	call	print			;else show error message
 27039 00002489 E88A02                  	call	error_line
 27040                                  coffj4:
 27041                                  	;mov	bx,[cs:cntryfilehandle]
 27042                                  	; 11/12/2022
 27043                                  	; ds = cs
 27044 0000248C 8B1E[D803]              	mov	bx,[cntryfilehandle]
 27045 00002490 B43E                    	mov	ah,3Eh
 27046 00002492 CD21                    	int	21h			;close a file. don't care even if it fails.
 27047 00002494 E92DFB                  	jmp	coff
 27048                                  
 27049                                  ;--------------------------------------------
 27050                                  
 27051                                  cntry_error:
 27052                                  
 27053                                  ;function: show "invalid country code or code page" messages,or
 27054                                  ;		"error in country command" depending on the error code
 27055                                  ;		in ax returned by sysparse;
 27056                                  ;in:	ax - error code
 27057                                  ;	ds - sysinitseg
 27058                                  ;	es - confbot
 27059                                  ;out:	show message.  dx destroyed.
 27060                                  
 27061 00002497 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 27062 0000249A 7505                    	jne	short if64
 27063 0000249C BA[8137]                	mov	dx,badcountry		;"invalid country code or code page"
 27064 0000249F EB03                    	jmp	short en64
 27065                                  if64:
 27066 000024A1 BA[A737]                	mov	dx,badcountrycom	;"error in contry command"
 27067                                  en64:
 27068 000024A4 E8A00E                  	call	print
 27069                                  	;call	error_line
 27070                                  	;retn
 27071                                  	; 11/12/2022
 27072 000024A7 E96C02                  	jmp	error_line
 27073                                  
 27074                                  ;------------------------------------------------------------------------------
 27075                                  ; files command
 27076                                  ;------------------------------------------------------------------------------
 27077                                  
 27078                                  ;******************************************************************************
 27079                                  ; function: parse the parameters of files= command.			      *
 27080                                  ;									      *
 27081                                  ; input :								      *
 27082                                  ;	es:si -> parameters in command line.				      *
 27083                                  ; output:								      *
 27084                                  ;	variable files set.						      *
 27085                                  ;									      *
 27086                                  ; subroutines to be called:						      *
 27087                                  ;	sysinit_parse							      *
 27088                                  ; logic:								      *
 27089                                  ; {									      *
 27090                                  ;	set di points to files_parms;					      *
 27091                                  ;	set dx,cx to 0; 						      *
 27092                                  ;	while (end of command line)					      *
 27093                                  ;	{ sysinit_parse;						      *
 27094                                  ;	  if (no error) then						      *
 27095                                  ;	     files = result_val._$P_picked_val				      *
 27096                                  ;	  else								      *
 27097                                  ;	     error exit;						      *
 27098                                  ;	};								      *
 27099                                  ; };									      *
 27100                                  ;									      *
 27101                                  ;******************************************************************************
 27102                                  
 27103                                  tryf:
 27104 000024AA 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 27105 000024AD 7523                    	jne	short tryl
 27106                                  
 27107                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27108                                  ;;ifdef	MULTI_CONFIG
 27109                                  ;       call    query_user              ; query the user if config_cmd
 27110                                  ;       jc      short tryl		; has the CONFIG_OPTION_QUERY bit set
 27111                                  ;;endif
 27112                                  
 27113                                  	; 14/12/2022
 27114                                  	; ds = cs
 27115                                  
 27116 000024AF BF[7B1D]                	mov	di,files_parms
 27117 000024B2 31C9                    	xor	cx,cx
 27118                                  	; 04/01/2023
 27119                                  	;mov	dx,cx
 27120                                  do67:
 27121 000024B4 E8F101                  	call	sysinit_parse
 27122 000024B7 7303                    	jnc	short if67		; parse error
 27123                                  	;call	badparm_p		;  and show messages and end the search loop.
 27124                                  	;jmp	short sr67
 27125                                  	; 04/01/2023
 27126 000024B9 E96A01                  	jmp	badparm_p_coff
 27127                                  if67:
 27128 000024BC 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27129 000024BF 7408                    	je	short en67		; then end the $endloop
 27130                                  
 27131                                  	; 14/12/2022
 27132                                  	; ds = cs
 27133                                  	;;mov	al,[cs:rv_dword]
 27134                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27135                                  	;mov	[cs:p_files],al		; save it temporarily
 27136                                  	;mov	al,[rv_dword]
 27137 000024C1 A0[181D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27138 000024C4 A2[9A1D]                	mov	[p_files],al
 27139                                  
 27140 000024C7 EBEB                    	jmp	short do67
 27141                                  en67:
 27142                                  	; 14/12/2022
 27143                                  	; ds = cs
 27144 000024C9 A0[9A1D]                	mov	al,[p_files]
 27145 000024CC A2[9D02]                	mov	[FILES],al	
 27146                                  	;mov	al,[cs:p_files]
 27147                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 27148                                  sr67:
 27149 000024CF E9F2FA                  	jmp	coff
 27150                                  
 27151                                  ; 04/04/2019 - Retro DOS v4.0
 27152                                  
 27153                                  ;------------------------------------------------------------------------------
 27154                                  ; lastdrive command
 27155                                  ;------------------------------------------------------------------------------
 27156                                  
 27157                                  ;******************************************************************************
 27158                                  ; function: parse the parameters of lastdrive= command. 		      *
 27159                                  ;									      *
 27160                                  ; input :								      *
 27161                                  ;	es:si -> parameters in command line.				      *
 27162                                  ; output:								      *
 27163                                  ;	set the variable num_cds.					      *
 27164                                  ;									      *
 27165                                  ; subroutines to be called:						      *
 27166                                  ;	sysinit_parse							      *
 27167                                  ; logic:								      *
 27168                                  ; {									      *
 27169                                  ;	set di points to ldrv_parms;					      *
 27170                                  ;	set dx,cx to 0; 						      *
 27171                                  ;	while (end of command line)					      *
 27172                                  ;	{ sysinit_parse;						      *
 27173                                  ;	  if (no error) then						      *
 27174                                  ;	     set num_cds to the returned value; 			      *
 27175                                  ;	  else	/*error exit*/						      *
 27176                                  ;	     error exit;						      *
 27177                                  ;	};								      *
 27178                                  ; };									      *
 27179                                  ;									      *
 27180                                  ;******************************************************************************
 27181                                  
 27182                                  tryl:
 27183 000024D2 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 27184 000024D5 7523                    	jne	short tryp
 27185                                  
 27186                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27187                                  ;;ifdef	MULTI_CONFIG
 27188                                  ;       call    query_user      ; query the user if config_cmd
 27189                                  ;       jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 27190                                  ;;endif
 27191                                  	; 14/12/2022
 27192                                  	; ds = cs
 27193                                  
 27194 000024D7 BF[D21D]                	mov	di,ldrv_parms
 27195 000024DA 31C9                    	xor	cx,cx
 27196                                  	; 04/01/2023
 27197                                  	;mov	dx,cx
 27198                                  do73:
 27199 000024DC E8C901                  	call	sysinit_parse
 27200 000024DF 7303                    	jnc	short if73	; parse error
 27201                                  	;call	badparm_p	;  and show messages and end the search loop.
 27202                                  	;jmp	short sr73
 27203                                  	; 04/01/2023
 27204 000024E1 E94201                  	jmp	badparm_p_coff
 27205                                  if73:
 27206 000024E4 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27207 000024E7 7408                    	je	short en73	; then end the $endloop
 27208                                  
 27209                                  	; 14/12/2022
 27210                                  	; ds = cs
 27211                                  	;;mov	al,[cs:rv_dword]
 27212                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 27213                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 27214                                  
 27215                                  	;mov	al,[rv_dword]
 27216 000024E9 A0[181D]                	mov	al,[rv_byte]
 27217 000024EC A2[E61D]                	mov	[p_ldrv],al
 27218                                  
 27219 000024EF EBEB                    	jmp	short do73
 27220                                  en73:
 27221                                  	; 14/12/2022
 27222                                  	; ds = cs
 27223 000024F1 A0[E61D]                	mov	al,[p_ldrv]
 27224 000024F4 A2[A002]                	mov	[NUM_CDS],al
 27225                                  	;mov	al,[cs:p_ldrv]
 27226                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 27227                                  sr73:
 27228 000024F7 E9CAFA                  	jmp	coff
 27229                                  
 27230                                  ;--------------------------------------------------------------------------
 27231                                  ; setting drive parameters
 27232                                  ;--------------------------------------------------------------------------
 27233                                  
 27234                                  tryp:
 27235 000024FA 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 27236 000024FD 7511                    	jne	short tryk
 27237                                  
 27238                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27239                                  ;;ifdef	MULTI_CONFIG
 27240                                  ;       call    query_user      ; query the user if config_cmd
 27241                                  ;       jc      short tryk	; has the CONFIG_OPTION_QUERY bit set
 27242                                  ;;endif
 27243                                  
 27244 000024FF E86508                  	call	parseline
 27245 00002502 7209                    	jc	short trypbad
 27246 00002504 E88707                  	call	setparms
 27247 00002507 E8BB07                  	call	diddleback
 27248                                  
 27249                                  ; No error check here, because setparms and diddleback have no error 
 27250                                  ; returns, and setparms as coded now can return with carry set. 
 27251                                  ;       jc	short trypbad
 27252                                  
 27253                                  	; 12/12/2022
 27254                                  	; cf = 0
 27255                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27256                                  	;jc	short trypbad
 27257                                  	
 27258 0000250A E9B7FA                  	jmp	coff
 27259                                  trypbad:
 27260 0000250D E9BB01                  	jmp	badop
 27261                                  
 27262                                  ;--------------------------------------------------------------------------
 27263                                  ; setting internal stack parameters
 27264                                  ; stacks=m,n where
 27265                                  ;	m is the number of stacks (range 8 to 64,default 9)
 27266                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 27267                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 27268                                  ;	any combinations that are not within the specified limits will
 27269                                  ;	result in "unrecognized command" error.
 27270                                  ;--------------------------------------------------------------------------
 27271                                  
 27272                                  ;**************************************************************************
 27273                                  ;									  *
 27274                                  ; function: parse the parameters of stacks= command.			  *
 27275                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 27276                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 27277                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 27278                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 27279                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 27280                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 27281                                  ;	    (or if "0,0" pair has been entered.)			  *
 27282                                  ; input :								  *
 27283                                  ;	es:si -> parameters in command line.				  *
 27284                                  ; output:								  *
 27285                                  ;	set the variables stack_count,stack_size.			  *
 27286                                  ;									  *
 27287                                  ; subroutines to be called:						  *
 27288                                  ;	sysinit_parse							  *
 27289                                  ; logic:								  *
 27290                                  ; {									  *
 27291                                  ;	set di points to stks_parms;					  *
 27292                                  ;	set dx,cx to 0; 						  *
 27293                                  ;	while (end of command line)					  *
 27294                                  ;	{ sysinit_parse;						  *
 27295                                  ;	  if (no error) then						  *
 27296                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 27297                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 27298                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 27299                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 27300                                  ;	     }								  *
 27301                                  ;	  else	/*error exit*/						  *
 27302                                  ;	     error exit;						  *
 27303                                  ;	};								  *
 27304                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 27305                                  ;	if o.k.,then set stack_count,stack_size;			  *
 27306                                  ;	 else error_exit;						  *
 27307                                  ; };									  *
 27308                                  ;**************************************************************************
 27309                                  
 27310                                  tryk:
 27311                                          ;if      stacksw
 27312                                  
 27313 00002510 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 27314 00002513 7402                    	je	short do_tryk
 27315                                  skip_it4:
 27316 00002515 EB74                    	jmp	short trys	; 15/12/2022
 27317                                  do_tryk:
 27318                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27319                                  ;;ifdef	MULTI_CONFIG
 27320                                  ;       call    query_user              ; query the user if config_cmd
 27321                                  ;       jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 27322                                  ;;endif
 27323                                  	; 14/12/2022
 27324                                  	; ds = cs
 27325                                  
 27326 00002517 BF[E71D]                	mov	di,stks_parms
 27327 0000251A 31C9                    	xor	cx,cx
 27328                                  	; 04/01/2023
 27329                                  	;mov	dx,cx
 27330                                  do79:
 27331 0000251C E88901                  	call	sysinit_parse
 27332 0000251F 730B                    	jnc	short if79		; parse error
 27333                                  
 27334 00002521 BA[3338]                	mov	dx,badstack		; "invalid stack parameter"
 27335 00002524 E8200E                  	call	print			;  and show messages and end the search loop.
 27336 00002527 E8EC01                  	call	error_line
 27337                                  	;jmp	sr79
 27338                                  	; 11/12/2022
 27339 0000252A EB39                    	jmp	short sr79
 27340                                  if79:
 27341 0000252C 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27342 0000252F 7412                    	je	short en79		; then end the $endloop
 27343                                  
 27344                                  	; 14/12/2022
 27345                                  	; ds = cs
 27346                                  
 27347                                  	;;mov	ax,[cs:rv_dword]
 27348                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27349                                  	;mov	ax,[rv_dword]
 27350 00002531 A1[181D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27351                                  
 27352 00002534 83F901                  	cmp	cx,1
 27353 00002537 7505                    	jne	short if83
 27354                                  
 27355                                  	; 14/12/2022
 27356                                  	;mov	[cs:p_stack_count],ax
 27357                                  	;jmp	short en83
 27358 00002539 A3[1C1E]                	mov	[p_stack_count],ax
 27359 0000253C EBDE                    	jmp	short do79
 27360                                  if83:
 27361                                  	; 14/12/2022
 27362                                  	;mov	[cs:p_stack_size],ax
 27363 0000253E A3[1E1E]                	mov	[p_stack_size],ax
 27364                                  en83:
 27365 00002541 EBD9                    	jmp	short do79
 27366                                  en79:
 27367                                  	; 14/12/2022
 27368                                  	; ds = cs
 27369 00002543 A1[1C1E]                	mov	ax,[p_stack_count]
 27370 00002546 09C0                    	or	ax,ax
 27371 00002548 741E                    	jz	short if87		
 27372                                  
 27373                                  	; 14/12/2022
 27374                                  	;cmp	word [p_stack_count],0
 27375                                  	;;cmp	word [cs:p_stack_count],0
 27376                                  	;je	short if87
 27377                                  
 27378                                  	; 14/12/2022
 27379 0000254A 83F808                  	cmp	ax, mincount ; 8
 27380                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 27381                                  	; 15/12/2022
 27382 0000254D 721F                    	jb	short en87
 27383 0000254F 833E[1E1E]20            	cmp	word [p_stack_size],minsize ; 32
 27384                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 27385                                  	; 15/12/2022
 27386 00002554 7218                    	jb	short en87
 27387                                  if94:
 27388                                  	; 14/12/2022
 27389                                  	; ds = cs
 27390                                  	; ax = [p_stack_count]
 27391                                  	;mov	ax,[p_stack_count]
 27392                                  	;;mov	ax,[cs:p_stack_count]
 27393 00002556 A3[8A02]                	mov	[stack_count],ax
 27394                                  	;mov	[cs:stack_count],ax
 27395                                  	;mov	ax,[cs:p_stack_size]
 27396 00002559 A1[1E1E]                	mov	ax,[p_stack_size]
 27397                                  	;mov	[cs:stack_size],ax
 27398 0000255C A3[8C02]                	mov	[stack_size],ax
 27399                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27400 0000255F C706[8E02]FFFF          	mov	word [stack_addr],-1
 27401                                  sr79:
 27402 00002565 E95CFA                  	jmp	coff
 27403                                  
 27404                                  if87:
 27405                                  	; 14/12/2022
 27406 00002568 3906[1E1E]              	cmp	[p_stack_size],ax ; 0
 27407 0000256C 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 27408                                  	;cmp	word [cs:p_stack_size],0
 27409                                  	;je	short if94
 27410                                  en87:
 27411                                  	; 15/12/2022
 27412                                  	; ([p_stack_count] is invalid, use default values)
 27413                                  	; 14/12/2022
 27414                                  	; ds = cs
 27415 0000256E C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 27416 00002574 C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 27417 0000257A C706[8E02]0000          	mov	word [stack_addr],0
 27418                                  	;mov	word [cs:stack_count],defaultcount ; 9
 27419                                  	;				; reset to default value.
 27420                                  	;mov	word [cs:stack_size],defaultsize ; 128
 27421                                  	;mov	word [cs:stack_addr],0
 27422                                  
 27423 00002580 BA[3338]                	mov	dx,badstack
 27424 00002583 E8C10D                  	call	print
 27425 00002586 E88D01                  	call	error_line
 27426 00002589 EBDA                    	jmp	short sr79
 27427                                  
 27428                                  ; 15/12/2022
 27429                                  %if 0
 27430                                  	mov	di,stks_parms
 27431                                  	xor	cx,cx
 27432                                  	; 04/01/2023
 27433                                  	;mov	dx,cx
 27434                                  do79:
 27435                                  	call	sysinit_parse
 27436                                  	jnc	short if79		; parse error
 27437                                  
 27438                                  	mov	dx,badstack		; "invalid stack parameter"
 27439                                  	call	print			;  and show messages and end the search loop.
 27440                                  	call	error_line
 27441                                  	;jmp	sr79
 27442                                  	; 11/12/2022
 27443                                  	jmp	short sr79
 27444                                  if79:
 27445                                  	cmp	ax,_$P_RC_EOL		; end of line?
 27446                                  	je	short en79		; then end the $endloop
 27447                                  
 27448                                  	;mov	ax,[cs:rv_dword]
 27449                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27450                                  	cmp	cx,1
 27451                                  	jne	short if83
 27452                                  
 27453                                  	mov	[cs:p_stack_count],ax
 27454                                  	jmp	short en83
 27455                                  if83:
 27456                                  	mov	[cs:p_stack_size],ax
 27457                                  en83:
 27458                                  	jmp	short do79
 27459                                  en79:
 27460                                  	cmp	word [cs:p_stack_count],0
 27461                                  	je	short if87
 27462                                  
 27463                                  	cmp	word [cs:p_stack_count],mincount ; 8
 27464                                  	jb	short ll88
 27465                                  	cmp	word [cs:p_stack_size],minsize ; 32
 27466                                  	jnb	short if88
 27467                                  ll88:
 27468                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27469                                  if88:
 27470                                  	jmp	short en87
 27471                                  
 27472                                  	; 11/12/2022
 27473                                  if94:
 27474                                  	mov	ax,[cs:p_stack_count]
 27475                                  	mov	[cs:stack_count],ax
 27476                                  	mov	ax,[cs:p_stack_size]
 27477                                  	mov	[cs:stack_size],ax
 27478                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27479                                  sr79:
 27480                                  	jmp	coff
 27481                                  
 27482                                  if87:
 27483                                  	cmp	word [cs:p_stack_size],0
 27484                                  	je	short en87
 27485                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27486                                  en87:
 27487                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 27488                                  	jne	short if94
 27489                                  
 27490                                  	mov	word [cs:stack_count],defaultcount ; 9
 27491                                  					; reset to default value.
 27492                                  	mov	word [cs:stack_size],defaultsize ; 128
 27493                                  	mov	word [cs:stack_addr],0
 27494                                  
 27495                                  	mov	dx,badstack
 27496                                  	call	print
 27497                                  	call	error_line
 27498                                  	jmp	short sr79
 27499                                  
 27500                                  %endif
 27501                                  
 27502                                  ; 11/12/2022
 27503                                  %if 0 
 27504                                  
 27505                                  if94:
 27506                                  	mov	ax,[cs:p_stack_count]
 27507                                  	mov	[cs:stack_count],ax
 27508                                  	mov	ax,[cs:p_stack_size]
 27509                                  	mov	[cs:stack_size],ax
 27510                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27511                                  sr79:
 27512                                  	jmp	coff
 27513                                  
 27514                                  %endif
 27515                                  
 27516                                  	;endif
 27517                                  
 27518                                  ;------------------------------------------------------------------------
 27519                                  ; shell command
 27520                                  ;------------------------------------------------------------------------
 27521                                  
 27522                                  trys:
 27523 0000258B 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 27524 0000258E 753C                    	jne	short tryx
 27525                                  
 27526                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27527                                  ;;ifdef	MULTI_CONFIG
 27528                                  ;       call    query_user              ; query the user if config_cmd
 27529                                  ;       jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 27530                                  ;       mov	byte [cs:newcmd],1
 27531                                  ;;endif
 27532                                  
 27533                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 27534                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27535                                  	;mov	byte [cs:command_line+1],0
 27536                                  	; 15/12/2022
 27537                                  	; ds = cs
 27538 00002590 C606[AA02]00            	mov	byte [command_line+1],0
 27539                                  
 27540 00002595 BF[1E34]                        mov     di,commnd+1		; we already have the first char
 27541 00002598 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 27542                                  storeshell:
 27543 0000259B E86101                  	call	getchr
 27544 0000259E 08C0                            or      al,al                   ; this is the normal case: "organize"
 27545 000025A0 7419                            jz	short getshparms	; put a ZERO right after the filename
 27546                                  
 27547 000025A2 3C20                            cmp     al," "                  ; this may happen if there are no args
 27548 000025A4 7205                            jb	short endofshell	; I suppose...
 27549 000025A6 8805                    	mov	[di],al
 27550 000025A8 47                      	inc	di
 27551                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 27552                                          ;jb	short storeshell	; commnd (the filename)
 27553                                          ;jmp	short endofshell
 27554                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27555 000025A9 EBF0                    	jmp	short storeshell
 27556                                  
 27557                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27558                                  ;getshparms:
 27559                                  ;	mov     byte [di],0		; zero-terminate the filename
 27560                                  ;	mov     di,command_line+1	; prepare to process the command-line
 27561                                  ;
 27562                                  ;parmloop:
 27563                                  ;	call	getchr
 27564                                  ;	cmp	al," "
 27565                                  ;	jb	short endofparms
 27566                                  ;	mov	[di],al
 27567                                  ;	inc	di
 27568                                  ;	cmp     di,command_line+126
 27569                                  ;	jb	short parmloop
 27570                                  ;endofparms:
 27571                                  ;	mov     cx,di
 27572                                  ;	sub     cx,command_line+1
 27573                                  ;	mov     [cs:command_line],cl
 27574                                  ;
 27575                                  ;endofshell:
 27576                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 27577                                  ;					; the command-line as the case may be)
 27578                                  ;skipline:
 27579                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27580                                  ;       je	short endofline		; the line: watch for ever-present LF
 27581                                  ;call	getchr
 27582                                  ;       jnc	short skipline		; keep it up as long as there are chars
 27583                                  ;
 27584                                  ;endofline:
 27585                                  ;       jmp     conflp
 27586                                  
 27587                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27588                                  endofshell:
 27589 000025AB C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 27590                                  					; the command-line as the case may be)
 27591 000025AE E84E01                  	call	getchr
 27592                                  skipline:
 27593 000025B1 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27594 000025B3 7403                    	je	short endofline		; the line: watch for ever-present LF
 27595 000025B5 E84701                  	call	getchr
 27596                                  endofline:
 27597 000025B8 E9E4F9                  	jmp     conflp
 27598                                  
 27599                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27600                                  getshparms:
 27601                                  	; 18/12/2022
 27602                                  	; al = 0
 27603 000025BB 8805                    	mov	[di],al ; 0
 27604                                  	;mov	byte [di],0		; zero-terminate the filename
 27605 000025BD BF[AA02]                	mov     di,command_line+1	; prepare to process the command-line
 27606                                  parmloop:
 27607 000025C0 E83C01                  	call	getchr
 27608 000025C3 3C20                    	cmp	al," " ; 20h
 27609 000025C5 72E4                    	jb	short endofshell
 27610 000025C7 8805                    	mov	[di],al
 27611 000025C9 47                      	inc	di
 27612 000025CA EBF4                    	jmp	short parmloop
 27613                                  
 27614                                  ;------------------------------------------------------------------------
 27615                                  ; fcbs command
 27616                                  ;------------------------------------------------------------------------
 27617                                  
 27618                                  ;************************************************************************
 27619                                  ; function: parse the parameters of fcbs= command.			*
 27620                                  ;									*
 27621                                  ; input :								*
 27622                                  ;	es:si -> parameters in command line.				*
 27623                                  ; output:								*
 27624                                  ;	set the variables fcbs,keep.					*
 27625                                  ;									*
 27626                                  ; subroutines to be called:						*
 27627                                  ;	sysinit_parse							*
 27628                                  ; logic:								*
 27629                                  ; {									*
 27630                                  ;	set di points to fcbs_parms;					*
 27631                                  ;	set dx,cx to 0; 						*
 27632                                  ;	while (end of command line)					*
 27633                                  ;	{ sysparse;							*
 27634                                  ;	  if (no error) then						*
 27635                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 27636                                  ;		   fcbs = result_val._$P_picked_val;			*
 27637                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 27638                                  ;		   keep = result_val._$P_picked_val;			*
 27639                                  ;	     }								*
 27640                                  ;	  else	/*error exit*/						*
 27641                                  ;	     error exit;						*
 27642                                  ;	};								*
 27643                                  ; };									*
 27644                                  ;************************************************************************
 27645                                  
 27646                                  tryx:
 27647 000025CC 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 27648                                          ;jne	short try1
 27649                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27650 000025CF 752F                    	jne	short tryy	; comment command
 27651                                  
 27652                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27653                                  ;;ifdef	MULTI_CONFIG
 27654                                  ;       call    query_user      ; query the user if config_cmd
 27655                                  ;       jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 27656                                  ;;endif
 27657                                  
 27658 000025D1 BF[9B1D]                	mov	di,fcbs_parms
 27659 000025D4 31C9                    	xor	cx,cx
 27660                                  	; 04/01/2023
 27661                                  	;mov	dx,cx
 27662                                  do98:
 27663 000025D6 E8CF00                  	call	sysinit_parse
 27664                                          ; 04/01/2023
 27665                                  	;jnc	short if98	; parse error
 27666                                          ;call	badparm_p	;  and show messages and end the search loop.
 27667                                  	;jmp	short sr98
 27668                                  	;------------------------
 27669                                  	; 04/01/2023
 27670 000025D9 724B                    	jc	short badparm_p_coff
 27671                                  if98:
 27672 000025DB 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27673 000025DE 7412                    	je	short en98	; then end the $endloop
 27674                                  
 27675                                  	;;mov	al,[cs:rv_dword]
 27676                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27677                                  	; 15/12/2022
 27678                                  	; ds = cs
 27679 000025E0 A0[181D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27680 000025E3 83F901                  	cmp	cx,1		; the first positional?
 27681 000025E6 7505                    	jne	short if102
 27682                                  	;mov	[cs:p_fcbs],al
 27683                                  	; 15/12/2022
 27684 000025E8 A2[D01D]                	mov	[p_fcbs],al
 27685                                  	;jmp	short en102
 27686 000025EB EBE9                    	jmp	short do98
 27687                                  if102:
 27688                                  	;mov	[cs:p_keep],al
 27689                                  	; 15/12/2022
 27690 000025ED A2[D11D]                	mov	[p_keep],al
 27691                                  en102:
 27692 000025F0 EBE4                    	jmp	short do98
 27693                                  en98:
 27694                                  	; 15/12/2022
 27695                                  	; ds = cs
 27696 000025F2 A0[D01D]                	mov	al,[p_fcbs]
 27697 000025F5 A2[9E02]                	mov	[FCBS],al
 27698 000025F8 C606[9F02]00            	mov	byte [KEEP],0
 27699                                  	;mov	al,[cs:p_fcbs]	 ; M017
 27700                                  	;mov	[cs:FCBS],al	 ; M017
 27701                                  	;mov	byte [cs:KEEP],0 ; M017
 27702                                  sr98:
 27703 000025FD E9C4F9                  	jmp	coff
 27704                                  
 27705                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27706                                  ;-------------------------------------------------------------------------
 27707                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 27708                                  ;		line number
 27709                                  ;-------------------------------------------------------------------------
 27710                                  
 27711                                  tryy:
 27712 00002600 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 27713 00002603 750B                    	jne	short try0
 27714                                  
 27715                                  donothing:
 27716                                  	; 15/12/2022
 27717                                  	; ds = cs
 27718 00002605 FF0E[D603]              	dec	word [chrptr]
 27719 00002609 FF06[D203]              	inc	word [count]
 27720                                  	; 02/11/2022
 27721                                  	;dec	word [cs:chrptr]
 27722                                  	;inc	word [cs:count]
 27723                                  
 27724 0000260D E9B4F9                  	jmp	coff
 27725                                  
 27726                                  ;------------------------------------------------------------------------
 27727                                  ; rem command
 27728                                  ;------------------------------------------------------------------------
 27729                                  
 27730                                  try0:				; do nothing with this line.
 27731 00002610 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 27732 00002613 74F0                    	je	short donothing
 27733                                  
 27734                                  ; 07/04/2019 - Retro DOS v4.0
 27735                                  
 27736                                  ;-----------------------------------------------------------------------
 27737                                  ; switches command
 27738                                  ;-----------------------------------------------------------------------
 27739                                  
 27740                                  ;***********************************************************************
 27741                                  ;								       *
 27742                                  ; function: parse the option switches specified.		       *
 27743                                  ; note - this command is intended for the future use also.	       *
 27744                                  ; when we need to set system data flag,use this command.	       *
 27745                                  ;								       *
 27746                                  ; input :							       *
 27747                                  ;	es:si -> parameters in command line.			       *
 27748                                  ; output:							       *
 27749                                  ;	p_swit_k set if /k option chosen.			       *
 27750                                  ;								       *
 27751                                  ; subroutines to be called:					       *
 27752                                  ;	sysinit_parse						       *
 27753                                  ; logic:							       *
 27754                                  ; {								       *
 27755                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 27756                                  ;	set dx,cx to 0; 					       *
 27757                                  ;	while (end of command line)				       *
 27758                                  ;	{ sysinit_parse;					       *
 27759                                  ;	  if (no error) then					       *
 27760                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 27761                                  ;		    p_swit_k = 1				       *
 27762                                  ;	       endif						       *
 27763                                  ;	  else {show error message;error exit}			       *
 27764                                  ;	};							       *
 27765                                  ; };								       *
 27766                                  ;								       *
 27767                                  ;***********************************************************************
 27768                                  
 27769                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 27770                                  
 27771                                  try1:
 27772 00002615 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 27773 00002618 7402                    	je	short do_try1	; switches= command entered?
 27774                                  skip_it5:
 27775                                  	;jmp	tryv
 27776                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27777 0000261A EB7A                    	jmp	tryz
 27778                                  
 27779                                  do_try1:
 27780                                  
 27781                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27782                                  ;;ifdef	MULTI_CONFIG
 27783                                  ;       call    query_user      ; query the user if config_cmd
 27784                                  ;       jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 27785                                  ;;endif
 27786                                  
 27787 0000261C BF[351E]                	mov	di,swit_parms
 27788 0000261F 31C9                    	xor	cx,cx
 27789                                  	; 04/01/2023
 27790                                  	;mov	dx,cx
 27791                                  do110:
 27792 00002621 E88400                  	call	sysinit_parse
 27793 00002624 7306                    	jnc	short if110	; parse error
 27794                                  	;call	badparm_p	;  and show messages and end the search loop.
 27795                                  	;jmp	short sr110
 27796                                  	; -----------------------
 27797                                  	; 04/01/2023
 27798                                  badparm_p_coff:
 27799 00002626 E8AE00                  	call	badparm_p
 27800 00002629 E998F9                  	jmp	coff
 27801                                  	;------------------------
 27802                                  if110:
 27803 0000262C 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27804 0000262F 742D                    	je	short en110	; then jmp to $endloop for semantic check
 27805                                  
 27806                                  	; 15/12/2022
 27807                                  	; ds = cs
 27808                                  	;;cmp	word [cs:result_val_swoff],swit_k
 27809                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 27810 00002631 813E[161D][4D1E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 27811 00002637 7507                    	jne	short if115	;				;M059
 27812                                  	; 15/12/2022
 27813 00002639 C606[681E]01            	mov	byte [p_swit_k],1
 27814                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 27815 0000263E EBE1                    	jmp	short do110
 27816                                  if115:	
 27817                                  	; 15/12/2022							;M059
 27818                                  	;;cmp	word [cs:result_val_swoff],swit_t
 27819                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 27820 00002640 813E[161D][591E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 27821 00002646 7507                    	jne	short if116					;M059 M063
 27822                                  	; 15/12/2022
 27823 00002648 C606[691E]01            	mov	byte [p_swit_t],1
 27824                                  	;mov	byte [cs:p_swit_t],1				;M059
 27825 0000264D EBD2                    	jmp	short do110					;M059
 27826                                  if116:
 27827                                  	; 15/12/2022
 27828                                  	;;cmp	word [cs:result_val_swoff],swit_w
 27829                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 27830 0000264F 813E[161D][651E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 27831 00002655 75CA                    	jne	short do110					;M063
 27832                                  	; 15/12/2022
 27833 00002657 C606[6A1E]01            	mov	byte [p_swit_w],1
 27834                                  	;mov	byte [cs:p_swit_w],1				;M063
 27835 0000265C EBC3                    	jmp	short do110					;M063
 27836                                  en110:
 27837                                  	; 15/12/2022
 27838                                  	; ds = cs
 27839 0000265E 803E[681E]01            	cmp	byte [p_swit_k],1
 27840                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 27841 00002663 1E                      	push	ds
 27842                                  	;;mov	ax,Bios_Data
 27843                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 27844                                  	; 21/10/2022
 27845 00002664 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27846 00002667 8ED8                    	mov	ds,ax
 27847 00002669 750A                    	jne	short if117
 27848 0000266B C606[E504]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 27849 00002670 C606[E604]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 27850                                  if117:
 27851                                  	; 15/12/2022
 27852                                  	; ds <> cs
 27853 00002675 2EA0[691E]              	mov	al,[cs:p_swit_t]				;M059
 27854 00002679 A2[F204]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 27855                                  
 27856 0000267C 2E803E[6A1E]00          	cmp	byte [cs:p_swit_w],0				;M063
 27857 00002682 740E                    	je	short skip_dos_flag				;M063
 27858 00002684 06                      	push	es
 27859 00002685 53                      	push	bx
 27860 00002686 B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 27861 00002688 CD21                    	int	21h						;M063
 27862                                  			; DOS - 2+ internal - GET LIST OF LISTS
 27863                                  			; Return: ES:BX -> DOS list of lists
 27864                                  	;or	bytes [es:86h],2
 27865 0000268A 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 27866 00002690 5B                      	pop	bx
 27867 00002691 07                      	pop	es
 27868                                  skip_dos_flag:							;M063
 27869 00002692 1F                      	pop	ds
 27870                                  sr110:
 27871 00002693 E92EF9                  	jmp	coff
 27872                                  
 27873                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27874                                  ;
 27875                                  ;tryv:
 27876                                  ;
 27877                                  ;;ifdef	MULTI_CONFIG
 27878                                  ;;------------------------------------------------------------------------
 27879                                  ;; set command (as in "set var=value<cr/lf>")
 27880                                  ;;------------------------------------------------------------------------
 27881                                  ;
 27882                                  ;       cmp     ah,CONFIG_SET  ; 'V'
 27883                                  ;       jne	short tryn
 27884                                  ;       call    query_user      ; query the user if config_cmd
 27885                                  ;       jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 27886                                  ;       call    copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 27887                                  ;       jnc	short sr110	; no error
 27888                                  ;err:    
 27889                                  ;	call    error_line      ; whoops, display error in line XXX
 27890                                  ;       jmp     short sr110     ; jump to coff (to skip to next line)
 27891                                  ;
 27892                                  ;;------------------------------------------------------------------------
 27893                                  ;; numlock command (as in "numlock=on|off")
 27894                                  ;;------------------------------------------------------------------------
 27895                                  ;tryn:
 27896                                  ;       cmp     ah,CONFIG_NUMLOCK  ;'N'
 27897                                  ;       jne	short tryy            ;
 27898                                  ;       call    query_user      ; query thye user if config_cmd
 27899                                  ;       jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 27900                                  ;       call    set_numlock
 27901                                  ;       jc	short err
 27902                                  ;       jmp	short sr110	; all done
 27903                                  ;
 27904                                  ;;endif	;MULTI_CONFIG
 27905                                  
 27906                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27907                                  ;;-------------------------------------------------------------------------
 27908                                  ;; comment= do nothing. just decrese chrptr,and increase count for correct
 27909                                  ;;		line number
 27910                                  ;;-------------------------------------------------------------------------
 27911                                  ;
 27912                                  ;tryy:
 27913                                  ;       cmp     ah,CONFIG_COMMENT ; 'Y'
 27914                                  ;	jne	short try0
 27915                                  ;donothing:
 27916                                  ;	dec	word [chrptr]
 27917                                  ;	inc	word [count]
 27918                                  ;	jmp	coff
 27919                                  ;
 27920                                  ;;------------------------------------------------------------------------
 27921                                  ;; rem command
 27922                                  ;;------------------------------------------------------------------------
 27923                                  ;
 27924                                  ;try0:				;do nothing with this line.
 27925                                  ;	cmp     ah,CONFIG_REM ; '0'
 27926                                  ;	je	short donothing
 27927                                  
 27928                                  ; 30/10/2022
 27929                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 27930                                  
 27931                                  ;------------------------------------------------------------------------
 27932                                  ; bogus command
 27933                                  ;------------------------------------------------------------------------
 27934                                  
 27935                                  tryz:
 27936 00002696 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 27937                                  	;je	short donothing
 27938                                  	; 02/11/2022
 27939 00002699 740A                    	je	short tryz_donothing
 27940                                  
 27941 0000269B FF0E[D603]              	dec	word [chrptr]
 27942 0000269F FF06[D203]              	inc	word [count]
 27943 000026A3 EB26                    	jmp	short badop
 27944                                  
 27945                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27946                                  tryz_donothing:
 27947 000026A5 E95DFF                  	jmp	donothing
 27948                                  
 27949                                  ; 07/04/2019 - Retro DOS v4.0
 27950                                  
 27951                                  ;------------------------------------------------------------------------------
 27952                                  
 27953                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27954                                  ;
 27955                                  ;
 27956                                  ;;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 27957                                  ;;
 27958                                  ;;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 27959                                  ;
 27960                                  ;CheckProtmanArena:
 27961                                  ;	push	es
 27962                                  ;	mov	ax,[cs:area]	; get our arena header
 27963                                  ;	dec	ax
 27964                                  ;	mov	es,ax
 27965                                  ;	add	ax,[es:3]	; find end of arena
 27966                                  ;	inc	ax
 27967                                  ;	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 27968                                  ;	ja	short CheckProtmanDone
 27969                                  ;
 27970                                  ;	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 27971                                  ;CheckProtmanDone:
 27972                                  ;	pop	es
 27973                                  ;	retn
 27974                                  
 27975                                  ;------------------------------------------------------------------------------
 27976                                  
 27977                                  sysinit_parse:
 27978                                  
 27979                                  ;------------------------------------------------------------------------------
 27980                                  ;set up registers for sysparse
 27981                                  ;in)	es:si -> command line in confbot
 27982                                  ;	di -> offset of the parse control definition.
 27983                                  ;
 27984                                  ;out)	calls sysparse.
 27985                                  ;	carry will set if parse error.
 27986                                  ;	*** the caller should check the eol condition by looking at ax
 27987                                  ;	*** after each call.
 27988                                  ;	*** if no parameters are found,then ax will contain a error code.
 27989                                  ;	*** if the caller needs to look at the synomym@ of the result,
 27990                                  ;	***  the caller should use cs:@ instead of es:@.
 27991                                  ;	cx register should be set to 0 at the first time the caller calls this
 27992                                  ;	 procedure.
 27993                                  ;	ax - exit code
 27994                                  ;	bl - terminated delimeter code
 27995                                  ;	cx - new positional ordinal
 27996                                  ;	si - set to pase scanned operand
 27997                                  ;	dx - selected result buffer
 27998                                  ;------------------------------------------------------------------------------
 27999                                  
 28000                                  	; 24/10/2022
 28001 000026A8 06                      	push	es			;save es,ds
 28002 000026A9 1E                      	push	ds
 28003                                  
 28004 000026AA 06                      	push	es
 28005 000026AB 1F                      	pop	ds			;now ds:si -> command line
 28006                                  
 28007 000026AC 0E                      	push	cs
 28008 000026AD 07                      	pop	es			;now es:di -> control definition
 28009                                  
 28010 000026AE 2E8C1E[3714]            	mov	[cs:badparm_seg],ds	;save the pointer to the parm
 28011 000026B3 2E8936[3514]            	mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 28012                                  	;mov	dx,0
 28013                                  	; 04/01/2023
 28014 000026B8 29D2                    	sub	dx,dx ; 0
 28015 000026BA E822EE                  	call	SysParse
 28016 000026BD 83F800                  	cmp	ax,_$P_No_Error	; 0	;no error
 28017                                  
 28018                                  ;**cas note:  when zero true after cmp, carry clear
 28019                                  
 28020                                  	;je	short ll4
 28021                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 28022                                  	; 12/12/2022
 28023 000026C0 7406                    	je	short en4 ; cf=0
 28024 000026C2 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 28025                                  	;jne	short if4
 28026                                  	; 12/12/2022
 28027 000026C5 7401                    	je	short en4 ; cf=0
 28028                                  
 28029                                  ; 12/12/2022
 28030                                  ;ll4:
 28031                                  ;	; 12/12/2022
 28032                                  ;	; cf=0
 28033                                  ;	;clc
 28034                                  ;	jmp	short en4
 28035                                  
 28036                                  if4:
 28037                                  	; 24/10/2022
 28038 000026C7 F9                      	stc
 28039                                  en4:
 28040 000026C8 1F                      	pop	ds
 28041 000026C9 07                      	pop	es
 28042 000026CA C3                      	retn
 28043                                  
 28044                                  ; 11/12/2022
 28045                                  %if 0
 28046                                  
 28047                                  ;----------------------------------------------------------------------------
 28048                                  ;
 28049                                  ; procedure : badop_p
 28050                                  ;
 28051                                  ;             same thing as badop,but will make sure to set ds register back
 28052                                  ;             to sysinitseg and return back to the caller.
 28053                                  ;
 28054                                  ;----------------------------------------------------------------------------
 28055                                  
 28056                                  badop_p:
 28057                                  	push	cs
 28058                                  	pop	ds		;set ds to configsys seg.
 28059                                  	mov	dx,badopm
 28060                                  	call	print
 28061                                          ;call	error_line
 28062                                  	;retn
 28063                                  	; 11/12/2022
 28064                                  	jmp	error_line
 28065                                  
 28066                                  %endif
 28067                                  
 28068                                  ;----------------------------------------------------------------------------
 28069                                  ;
 28070                                  ; label : badop
 28071                                  ;
 28072                                  ;----------------------------------------------------------------------------
 28073                                  
 28074                                  badop:	
 28075 000026CB BA[F436]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 28076 000026CE E8760C                  	call	print
 28077 000026D1 E84200                  	call	error_line	;show "error in config.sys ..." .
 28078 000026D4 E9EDF8                  	jmp	coff
 28079                                  
 28080                                  ;----------------------------------------------------------------------------
 28081                                  ;
 28082                                  ; procedure : badparm_p
 28083                                  ;
 28084                                  ;             show "bad command or parameters - xxxxxx"
 28085                                  ;             in badparm_seg,badparm_off -> xxxxx
 28086                                  ;
 28087                                  ;----------------------------------------------------------------------------
 28088                                  
 28089                                  	; 24/10/2022
 28090                                  badparm_p:
 28091                                  	; 11/12/2022
 28092                                  	; ds = cs
 28093                                  	; 11/12/2022
 28094                                  	;push	ds ; *
 28095 000026D7 52                      	push	dx
 28096 000026D8 56                      	push	si
 28097                                  
 28098                                  	; 11/12/2022
 28099                                  	; ds = cs
 28100                                  	;push	cs
 28101                                  	;pop	ds
 28102                                  
 28103 000026D9 BA[1B37]                	mov	dx,badparm
 28104 000026DC E8680C                  	call	print			; "bad command or parameters - "
 28105 000026DF C536[3514]              	lds	si,[badparm_ptr]
 28106                                  
 28107                                  ;	print "xxxx" until cr.
 28108                                  
 28109                                  do1:
 28110 000026E3 8A14                    	mov	dl,[si]			; get next character
 28111 000026E5 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 28112 000026E8 7407                    	je	short en1		; exit loop if so
 28113                                  
 28114 000026EA B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 28115 000026EC CD21                    	int	21h			; display character
 28116 000026EE 46                      	inc	si			; next character
 28117 000026EF EBF2                    	jmp	short do1
 28118                                  en1:
 28119 000026F1 0E                      	push	cs
 28120 000026F2 1F                      	pop	ds
 28121                                  
 28122 000026F3 BA[1837]                	mov	dx,crlfm
 28123 000026F6 E84E0C                  	call	print
 28124 000026F9 E81A00                  	call	error_line
 28125                                  
 28126 000026FC 5E                      	pop	si
 28127 000026FD 5A                      	pop	dx
 28128                                  	; 11/12/2022
 28129                                  	;pop	ds ; *
 28130                                  badparmp_ret:
 28131 000026FE C3                      	retn
 28132                                  
 28133                                  ;----------------------------------------------------------------------------
 28134                                  ;
 28135                                  ; procedure : getchr
 28136                                  ;
 28137                                  ;----------------------------------------------------------------------------
 28138                                  
 28139                                  	; 24/10/2022
 28140                                  getchr:
 28141                                  	; 12/12/2022
 28142                                  	;push	cx
 28143                                  	;mov	cx,[count]
 28144                                  	;jcxz	nochar
 28145                                  	; 12/12/2022
 28146 000026FF 833E[D203]01            	cmp	word [count],1 
 28147 00002704 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 28148                                  	
 28149 00002706 8B36[D603]              	mov	si,[chrptr]
 28150 0000270A 268A04                  	mov	al,[es:si]
 28151 0000270D FF0E[D203]              	dec	word [count]
 28152 00002711 FF06[D603]              	inc	word [chrptr]
 28153                                  	; 12/12/202
 28154                                  	; cf=0
 28155                                  	;clc
 28156                                  ;get_ret:
 28157                                  	;pop	cx
 28158                                  	;retn
 28159                                  nochar: 
 28160                                  	; 12/12/2022
 28161                                  	; cf=1
 28162                                  	;stc
 28163                                  	;jmp	short get_ret
 28164                                  	
 28165 00002715 C3                      	retn
 28166                                  
 28167                                  ; 11/12/2022
 28168                                  %if 0
 28169                                  
 28170                                  ;----------------------------------------------------------------------------
 28171                                  ;
 28172                                  ; procedure : incorrect_order
 28173                                  ;
 28174                                  ;             show "incorrect order in config.sys ..." message.
 28175                                  ;
 28176                                  ;----------------------------------------------------------------------------
 28177                                  
 28178                                  incorrect_order:
 28179                                  	mov	dx,badorder
 28180                                  	call	print
 28181                                  	call	showlinenum
 28182                                  	retn
 28183                                  
 28184                                  %endif
 28185                                  
 28186                                  ;----------------------------------------------------------------------------
 28187                                  ;
 28188                                  ; procedure : error_line
 28189                                  ;
 28190                                  ;             show "error in config.sys ..." message.
 28191                                  ;
 28192                                  ;----------------------------------------------------------------------------
 28193                                  
 28194                                  	; 11/12/2022
 28195                                  	; 24/10/2022
 28196                                  error_line:
 28197                                  	; 11/12/2022
 28198                                  	; ds = cs
 28199                                  	;push	cs
 28200                                  	;pop	ds
 28201                                  
 28202 00002716 BA[5038]                	mov	dx,errorcmd
 28203 00002719 E82B0C                  	call	print
 28204                                  	;call	showlinenum
 28205                                  	;retn
 28206                                  	; 11/12/2022
 28207                                  	;jmp	short shortlinemum
 28208                                  
 28209                                  ;----------------------------------------------------------------------------
 28210                                  ;
 28211                                  ; procedure : showlinenum
 28212                                  ;
 28213                                  ; convert the binary linecount to decimal ascii string in showcount
 28214                                  ; and display showcount at the current curser position.
 28215                                  ; in.) linecount
 28216                                  ;
 28217                                  ; out) the number is printed.
 28218                                  ;
 28219                                  ;----------------------------------------------------------------------------
 28220                                  
 28221                                  	; 11/12/2022
 28222                                  	; ds = cs
 28223                                  	; 24/10/2022
 28224                                  showlinenum:
 28225 0000271C 06                      	push	es
 28226                                  	; 11/12/2022
 28227                                  	;push	ds
 28228 0000271D 57                      	push	di
 28229                                  
 28230 0000271E 0E                      	push	cs
 28231 0000271F 07                      	pop	es		; es=cs
 28232                                  
 28233                                  	; 11/12/2022
 28234                                  	;push	cs
 28235                                  	;pop	ds
 28236                                  
 28237 00002720 BF[3103]                	mov	di,showcount+4	; di -> the least significant decimal field.
 28238 00002723 B90A00                  	mov	cx,10		; decimal divide factor
 28239                                  	;mov	ax,[cs:linecount]
 28240                                  	; 11/12/2022
 28241 00002726 A1[2B03]                	mov	ax,[linecount]
 28242                                  sln_loop:
 28243                                  	; 11/12/2022
 28244 00002729 39C8                    	cmp	ax,cx ; < 10 ?
 28245                                  	;cmp	ax,10		; < 10?
 28246 0000272B 720C                    	jb	short sln_last
 28247                                  
 28248 0000272D 31D2                    	xor	dx,dx
 28249 0000272F F7F1                    	div	cx	; cx = 10
 28250 00002731 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 28251 00002734 8815                    	mov	[di],dl
 28252 00002736 4F                      	dec	di
 28253 00002737 EBF0                    	jmp	short sln_loop
 28254                                  
 28255                                  sln_last:
 28256 00002739 0C30                    	or	al,30h	; "0"
 28257 0000273B 8805                    	mov	[di],al
 28258 0000273D 89FA                    	mov	dx,di
 28259 0000273F E8050C                  	call	print		; show it.
 28260 00002742 5F                      	pop	di
 28261                                  	; 11/12/2022
 28262                                  	;pop	ds
 28263 00002743 07                      	pop	es
 28264 00002744 C3                      	retn
 28265                                  
 28266                                  ; 07/04/2019 - Retro DOS v4.0
 28267                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 28268                                  
 28269                                  ;----------------------------------------------------------------------------
 28270                                  ;
 28271                                  ; procedure : ProcDOS
 28272                                  ;
 28273                                  ;	Process the result of DOS= parsing
 28274                                  ;
 28275                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 28276                                  ;				= 2 for DOS=LOW
 28277                                  ;				= 3 for DOS=UMB
 28278                                  ;				= 4 for DOS=NOUMB
 28279                                  ;----------------------------------------------------------------------------
 28280                                  
 28281                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 28282                                  	; (SYTSINIT:2AB5h)
 28283                                  ProcDOS:
 28284                                  	; 01/01/2023
 28285                                  	; ds = cs
 28286 00002745 30E4                    	xor	ah,ah
 28287                                  	;;mov	al,[cs:result_val_itag]
 28288                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 28289                                  	; 04/01/2023
 28290 00002747 A0[151D]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 28291 0000274A 48                      	dec	ax
 28292 0000274B 7415                    	jz	short pd_hi
 28293 0000274D 48                      	dec	ax
 28294 0000274E 740E                    	jz	short pd_lo
 28295 00002750 48                      	dec	ax
 28296 00002751 7405                    	jz	short pd_umb
 28297                                  	;;mov	byte [cs:DevUMB],0
 28298                                  	; 18/12/2022
 28299                                  	;mov	byte [cs:DevUMB],ah ; 0
 28300                                  	; 01/01/2023
 28301 00002753 8826[BC1E]              	mov	byte [DevUMB],ah ; 0
 28302 00002757 C3                      	retn
 28303                                  pd_umb:
 28304                                  	; 04/01/2023
 28305 00002758 C606[BC1E]FF            	mov	byte [DevUMB],0FFh
 28306                                  	;mov	byte [cs:DevUMB],0FFh
 28307 0000275D C3                      	retn
 28308                                  pd_lo:
 28309                                  	; 04/01/2023
 28310 0000275E A2[6A02]                	mov	[runhigh],al ; 0
 28311                                  	; 18/12/2022
 28312                                  	;mov	[cs:runhigh],al ; 0
 28313                                  	;;mov	byte [cs:runhigh],0
 28314 00002761 C3                      	retn
 28315                                  pd_hi:
 28316                                  	; 04/01/2023
 28317 00002762 C606[6A02]FF            	mov	byte [runhigh],0FFh
 28318                                  	;mov	byte [cs:runhigh],0FFh
 28319                                  limx:	; 11/12/2022
 28320 00002767 C3                      	retn
 28321                                  
 28322                                  ;----------------------------------------------------------------------------
 28323                                  ;
 28324                                  ; procedure : LieInt12Mem
 28325                                  ;
 28326                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 28327                                  ;		alloclim set to the limit of low memory.
 28328                                  ;
 28329                                  ;	Output : none
 28330                                  ;
 28331                                  ;	Changes the ROM BIOS variable which stores the total low memory
 28332                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 28333                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 28334                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 28335                                  ;	converted into Ks and stored in 40:13h
 28336                                  ;
 28337                                  ;----------------------------------------------------------------------------
 28338                                  
 28339                                  LieInt12Mem:
 28340                                  	; 11/12/2022
 28341                                  	; ds = cs
 28342 00002768 A1[A302]                	mov	ax,[ALLOCLIM]
 28343                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 28344                                  					; assuming that it is 3Com
 28345 0000276B E84400                  	call	IsIt3Com		; Is it 3Com driver?
 28346 0000276E 740A                    	jz	short lim_set		; yes, lie to him differently
 28347                                  	; 13/05/2019
 28348                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 28349                                  	;je	short limx		; no, don't lie
 28350                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 28351                                  	; 11/12/2022
 28352                                  	; ds = cs
 28353 00002770 803E[CB1E]00            	cmp	byte [DeviceHi],0
 28354 00002775 74F0                    	je	short limx
 28355 00002777 A1[B21E]                	mov	ax,[DevLoadEnd]
 28356                                  lim_set:
 28357                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28358                                  	; 11/12/2022
 28359                                  	;call	SetInt12Mem
 28360                                  ;limx:
 28361                                  	;retn
 28362                                  	
 28363                                  	;jmp	short SetInt12Mem 
 28364                                  
 28365                                  ;----------------------------------------------------------------------------
 28366                                  ;
 28367                                  ; procedure : SetInt12Mem
 28368                                  ;
 28369                                  ;	Input : AX = Memory size to be set (in paras)
 28370                                  ;	Output : none
 28371                                  ;
 28372                                  ;	Sets the variable 40:13 to the memory size passed in AX
 28373                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 28374                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 28375                                  ;	restoring the value of 40:13
 28376                                  ;
 28377                                  ;----------------------------------------------------------------------------
 28378                                  
 28379                                  	; 01/11/2022
 28380                                  SetInt12Mem:
 28381 0000277A 1E                      	push	ds
 28382 0000277B BB4000                  	mov	bx,40h
 28383 0000277E 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 28384 00002780 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 28385 00002784 2E891E[CF1E]            	mov	[cs:OldInt12Mem],bx	; save it
 28386 00002789 B106                    	mov	cl,6
 28387 0000278B D3E8                    	shr	ax,cl			; convert paras into Ks
 28388 0000278D A31300                  	mov	[13h],ax		; Lie
 28389 00002790 2EC606[CE1E]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 28390 00002796 1F                      	pop	ds
 28391                                  ;limx:
 28392 00002797 C3                      	retn
 28393                                  
 28394                                  ;----------------------------------------------------------------------------
 28395                                  ;
 28396                                  ; procedure : TrueInt12Mem
 28397                                  ;
 28398                                  ;	Input : Int12Lied = 0 if we are not lying currently
 28399                                  ;			  = 0ffh if we are lying
 28400                                  ;		OldInt12Mem = Saved value of 40:13h
 28401                                  ;
 28402                                  ;	Output : none
 28403                                  ;
 28404                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 28405                                  ;	and resets the flag which indicates that we were lying
 28406                                  ;
 28407                                  ;----------------------------------------------------------------------------
 28408                                  
 28409                                  TrueInt12Mem:
 28410                                  	; 11/12/2022
 28411                                  	; ds = cs
 28412 00002798 803E[CE1E]00            	cmp	byte [Int12Lied],0
 28413                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 28414                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 28415                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 28416 0000279D 7412                    	je	short timx		; no, we weren't
 28417                                  	; 18/12/2022
 28418 0000279F B84000                  	mov	ax,40h
 28419 000027A2 8826[CE1E]              	mov	[Int12Lied],ah ; 0
 28420                                  	;mov	byte [Int12Lied],0
 28421                                  	;mov	byte [cs:Int12Lied],0
 28422 000027A6 1E                      	push	ds
 28423                                  	;mov	ax,40h
 28424 000027A7 8ED8                    	mov	ds,ax
 28425 000027A9 2EA1[CF1E]              	mov	ax,[cs:OldInt12Mem]
 28426 000027AD A31300                  	mov	[13h],ax		; restore INT 12 memory
 28427 000027B0 1F                      	pop	ds
 28428                                  timx:
 28429 000027B1 C3                      	retn
 28430                                  
 28431                                  ;----------------------------------------------------------------------------
 28432                                  ;
 28433                                  ; procedure : IsIt3Com?
 28434                                  ;
 28435                                  ;	Input : DevEntry = Seg:0 of device driver
 28436                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 28437                                  ;		 else Zero flag is reset
 28438                                  ;
 28439                                  ;----------------------------------------------------------------------------
 28440                                  
 28441                                  IsIt3Com:
 28442                                  	; 11/12/2022
 28443                                  	; ds = cs
 28444 000027B2 1E                      	push	ds
 28445 000027B3 06                      	push	es
 28446 000027B4 56                      	push	si
 28447                                  	; 11/12/2022
 28448 000027B5 C536[B41E]              	lds	si,[DevEntry]
 28449                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 28450 000027B9 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 28451 000027BC 0E                      	push	cs
 28452 000027BD 07                      	pop	es
 28453 000027BE BF[D11E]                	mov	di,ThreeComName
 28454 000027C1 B90800                  	mov	cx,8			; name length
 28455 000027C4 F3A6                    	rep	cmpsb
 28456 000027C6 5E                      	pop	si
 28457 000027C7 07                      	pop	es
 28458 000027C8 1F                      	pop	ds
 28459 000027C9 C3                      	retn
 28460                                  
 28461                                  ;M020 : BEGIN
 28462                                  ;----------------------------------------------------------------------------
 28463                                  
 28464                                  UpdatePDB:
 28465 000027CA 1E                      	push	ds
 28466 000027CB B462                    	mov	ah,62h
 28467 000027CD CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 28468 000027CF 8EDB                    	mov	ds,bx
 28469 000027D1 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 28470                                  	;mov	[2],bx
 28471 000027D6 891E0200                	mov	[PDB.BLOCK_LEN],bx
 28472 000027DA 1F                      	pop	ds
 28473 000027DB C3                      	retn
 28474                                  
 28475                                  ; M020 : END
 28476                                  
 28477                                  ;----------------------------------------------------------------------------
 28478                                  
 28479                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28480                                  
 28481                                  %if 0
 28482                                  
 28483                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 28484                                  ;include highexit.inc	; umb's, etc
 28485                                  
 28486                                  ; ----------------------------------------------------------------------
 28487                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 28488                                  ; ----------------------------------------------------------------------
 28489                                  ; 07/04/2019 - Retro DOS v4.0
 28490                                  
 28491                                  ;******************************************************************************
 28492                                  ;
 28493                                  ; This file contains routines needed to parse and implement user-given
 28494                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 28495                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 28496                                  ; the variables in highvar.inc, for use by the rest of the routines.
 28497                                  ;
 28498                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 28499                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 28500                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 28501                                  ;    DH/LH module opts
 28502                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 28503                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 28504                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 28505                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 28506                                  ; available during the load.
 28507                                  ;
 28508                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 28509                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 28510                                  ; upper-memory block which was not specified by the user... in addition, if
 28511                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 28512                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 28513                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 28514                                  ; free any UMBs so allocated.
 28515                                  ;
 28516                                  ; When a device driver loads, there is the additional problem of allocating its
 28517                                  ; initial load site; this should be restricted to the first UMB specified on
 28518                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 28519                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 28520                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 28521                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 28522                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 28523                                  ;
 28524                                  ;******************************************************************************
 28525                                  
 28526                                  SWTCH	equ	'/'		; Switch character
 28527                                  
 28528                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 28529                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 28530                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 28531                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 28532                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 28533                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 28534                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 28535                                  
 28536                                  CR	equ	0Dh		; Carriage Return
 28537                                  LF	equ	0Ah		; Line Feed
 28538                                  TAB	equ	09h		; Tab character (^I)
 28539                                  
 28540                                  ; -----------------------------------------------------------------------------
 28541                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 28542                                  ; -----------------------------------------------------------------------------
 28543                                  ; ENTRY:       None
 28544                                  ; EXIT:        Variables listed in highvar.inc are initialized
 28545                                  ; ERROR EXIT:  None
 28546                                  ; USES:        Flags, variables in highvar.inc
 28547                                  ; -----------------------------------------------------------------------------
 28548                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 28549                                  ; are largely ignored, but it is initialized nonetheless.
 28550                                  ; -----------------------------------------------------------------------------
 28551                                  
 28552                                  InitVar:
 28553                                  	;pushreg <ax, cx, di, es>
 28554                                  	push	ax
 28555                                  	push	cx
 28556                                  	push	di
 28557                                  	push	es
 28558                                  
 28559                                  	;dataseg es			;Point ES into appropriate data segment
 28560                                  	push	cs
 28561                                  	pop	es
 28562                                  
 28563                                  	xor	ax,ax
 28564                                  	mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 28565                                  	mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 28566                                  	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 28567                                  	mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 28568                                  					;Later is the # of the 1st spec'd UMB
 28569                                  	mov	[es:fm_argc], al	;Start with zero args having been read
 28570                                  
 28571                                  	cld
 28572                                  
 28573                                  	mov	cx,MAXUMB ; 16		;For each entry
 28574                                  	mov	di,UmbUsed		;on the UmbUsed array,
 28575                                  	rep	stosb			;	Store 0
 28576                                  
 28577                                  	mov	cx,MAXUMB ; 16		;Okay... for each entry
 28578                                  	mov	di,UmbSize		;on the UmbSize array,
 28579                                  	rep	stosw			;	Store 0
 28580                                  
 28581                                  	;normseg es			; Return ES
 28582                                  
 28583                                  	;popreg	<es, di, cx, ax>
 28584                                  	pop	es
 28585                                  	pop	di
 28586                                  	pop	cx
 28587                                  	pop	ax	 	
 28588                                  
 28589                                  	retn
 28590                                  
 28591                                  ; -----------------------------------------------------------------------------
 28592                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 28593                                  ; -----------------------------------------------------------------------------
 28594                                  ; ENTRY   : None
 28595                                  ; EXIT    : None
 28596                                  ; ERROR   : None
 28597                                  ; USES    : Flags, fm_umb, fm_strat
 28598                                  ; -----------------------------------------------------------------------------
 28599                                  
 28600                                  FixMem:
 28601                                  	push	ax
 28602                                  	push	bx
 28603                                  	push	cx
 28604                                  	push	dx
 28605                                  	push	es
 28606                                  
 28607                                  	call	fm_link		; Link in UMBs
 28608                                  
 28609                                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 28610                                  	jc	short fmX	; (if couldn't get it, leave now).
 28611                                  
 28612                                  	mov	es,ax		; It returns in AX, so move it to ES.
 28613                                  
 28614                                  ; - Walk MCB Chain ------------------------------------------------------------
 28615                                  
 28616                                  	xor	dx,dx		; We're keeping the address of the last MCB
 28617                                  	mov 	cx,dx		; in CX... and the last owner
 28618                                  	inc	dx		; in dx as we go through the loop:
 28619                                  
 28620                                  ; ------------------------------------------
 28621                                  ; FM10--DX  = last MCB's owner's PSP address
 28622                                  ;       CX  = last MCB's address (segment)
 28623                                  ; ------------------------------------------
 28624                                  
 28625                                  fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 28626                                  	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 28627                                  	or	bx,dx			; dx was owner of previous MCB
 28628                                  	jnz	short fm30		; If not both zero, don't cat.
 28629                                  
 28630                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 28631                                  
 28632                                  fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 28633                                  	mov	es,cx			; Go back to prev MCB's address
 28634                                  	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 28635                                  
 28636                                  	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 28637                                  	;add	bx,1			; And add one for the header
 28638                                  	; 14/08/2023
 28639                                  	inc	bx
 28640                                  	mov	[es:ARENA.SIZE],bx	; Write the size
 28641                                  
 28642                                  	; ---------------------------------------------------------------------
 28643                                  
 28644                                  fm30:	mov	cx,es			; Put this address on the stack
 28645                                  	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 28646                                  
 28647                                  	mov	bx,es			; Move to the next MCB
 28648                                  	add	bx,[es:ARENA.SIZE]
 28649                                  	inc	bx
 28650                                  	mov	es,bx
 28651                                  
 28652                                  	;cmp	al,'Z'
 28653                                  	cmp	al,arena_signature_end
 28654                                  	jne	short fm10		; If signature != 'Z', there are more.
 28655                                  fmX:	
 28656                                  	call	fm_unlink		; Unlink UMBs
 28657                                  
 28658                                  	pop	es
 28659                                  	pop	dx
 28660                                  	pop	cx
 28661                                  	pop	bx
 28662                                  	pop	ax
 28663                                  
 28664                                  	retn
 28665                                  
 28666                                  ; -----------------------------------------------------------------------------
 28667                                  ;*** fm_link - links UMBs not already linked in
 28668                                  ; -----------------------------------------------------------------------------
 28669                                  ; ENTRY:    None
 28670                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 28671                                  ; ERROR:    None
 28672                                  ; USES:     AX, BX, fm_umb
 28673                                  ; -----------------------------------------------------------------------------
 28674                                  
 28675                                  fm_link:
 28676                                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 28677                                  	int	21h			; Current link-state is now in al
 28678                                  
 28679                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 28680                                  	;
 28681                                  	;push	es
 28682                                  	;push	cs
 28683                                  	;pop	es
 28684                                  	;mov	[es:fm_umb],al
 28685                                  	;pop	es
 28686                                  	
 28687                                  	mov	[cs:fm_umb],al
 28688                                  
 28689                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28690                                  	mov	bx,1
 28691                                  	int	21h
 28692                                  	retn
 28693                                  
 28694                                  ; -----------------------------------------------------------------------------
 28695                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 28696                                  ; -----------------------------------------------------------------------------
 28697                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 28698                                  ; EXIT:     None
 28699                                  ; ERROR:    None
 28700                                  ; USES:     AX, BX
 28701                                  ; -----------------------------------------------------------------------------
 28702                                  
 28703                                  fm_unlink:
 28704                                  	xor	bx,bx
 28705                                  	
 28706                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 28707                                  	;
 28708                                  	;push	ds
 28709                                  	;push	cs
 28710                                  	;pop	ds
 28711                                  	;mov	bl,[fm_umb]	
 28712                                  	;pop	ds
 28713                                  	
 28714                                  	mov	bl,[cs:fm_umb]
 28715                                  
 28716                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28717                                  	int	21h			; so just use that, and call int 21h
 28718                                  	retn
 28719                                  
 28720                                  ; 08/04/2019 - Retro DOS v4.0
 28721                                  
 28722                                  ; -----------------------------------------------------------------------------
 28723                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 28724                                  ; laid out in highvar.inc
 28725                                  ; -----------------------------------------------------------------------------
 28726                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 28727                                  ; EXIT:     ES:SI points to first character in child program name
 28728                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 28729                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 28730                                  ; -----------------------------------------------------------------------------
 28731                                  ; Error codes (in AX if carry set on return):
 28732                                  ;
 28733                                  PV_InvArg	equ	1	; Invalid argument passed
 28734                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 28735                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 28736                                  ;
 28737                                  ; This routine exects ES:SI to point to a string much like the following:
 28738                                  ;    "/S/L:1,200;2 module options"
 28739                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 28740                                  ; required, though that's what this routine is supposed to parse.
 28741                                  ;
 28742                                  optS		equ	'S'	; /S
 28743                                  optL		equ	'L'	; /L:...
 28744                                  ;
 28745                                  ; -----------------------------------------------------------------------------
 28746                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 28747                                  ; a command-line for spawning a child process. For a typical LH command, say,
 28748                                  ;     lh /l:1,1000;2 print/d:lpt2
 28749                                  ; the arguments would look like (one per line):
 28750                                  ;     lh
 28751                                  ;     /l
 28752                                  ;     1
 28753                                  ;     1000
 28754                                  ;     2
 28755                                  ;     print
 28756                                  ;     /d
 28757                                  ;     :lpt2
 28758                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 28759                                  ; arg was the filename. So, inside this routine, we keep a running counter
 28760                                  ; of the number of arguments LH will need to skip in order to get to the
 28761                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 28762                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 28763                                  ; for:
 28764                                  ;    Each /L
 28765                                  ;    Each /S (there should be only one)
 28766                                  ;    Each UMB number (they follow ":" or ";")
 28767                                  ;    Each UMB size   (they follow ",")
 28768                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 28769                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 28770                                  ; -----------------------------------------------------------------------------
 28771                                  
 28772                                  ParseVar:
 28773                                  	;pushreg <di, ds, es>
 28774                                  	push	di
 28775                                  	push	ds
 28776                                  	push	es
 28777                                  
 28778                                  	push	es		; Make DS:SI point to it, as well as ES:SI
 28779                                  	pop	ds		; (regardless if we're in devhigh or loadhigh)
 28780                                  	cld
 28781                                  
 28782                                  ; ------------------------------------------------
 28783                                  ; PV10--ES:SI = any whitespace on the command-line
 28784                                  ; ------------------------------------------------
 28785                                  
 28786                                  pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 28787                                  	call	isWhite
 28788                                  	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 28789                                  	;cmp	al,'/'
 28790                                  	cmp	al,SWTCH
 28791                                  	je	short pv20	;       ES:SI=="/L..."--go process a switch
 28792                                  
 28793                                  	dec	si		; Backup--it's now "odule options", and we need
 28794                                  	clc			; that "m" we just read (or whatever it is).
 28795                                  	jmp	short pvX	; Then return with carry clear == we're done.
 28796                                  
 28797                                  pv20:	lodsb			; Just read 'S' or 'L', hopefully
 28798                                  	;toUpper al		; So we make it upper-case, and...
 28799                                  	and	al,0DFh
 28800                                  	;cmp	al,'S'
 28801                                  	cmp	al,optS		; just read 'S'?
 28802                                  	jne	short pv30
 28803                                  
 28804                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 28805                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 28806                                  
 28807                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 28808                                  	;
 28809                                  	;push	es
 28810                                  	;push	cs
 28811                                  	;pop	es
 28812                                  	;mov	[es:fUmbTiny],1	
 28813                                  	;pop	es
 28814                                  
 28815                                  	mov	byte [cs:fUmbTiny],1
 28816                                  
 28817                                  	jmp	short pv10	; possibly even "/L...".
 28818                                  
 28819                                  pv30:	;cmp	al,'L'
 28820                                  	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 28821                                  	jne	short pvE1		; switch!
 28822                                  
 28823                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 28824                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 28825                                  
 28826                                  	call	parseL
 28827                                  	jnc	short pv10	; If no carry, go back and look for more
 28828                                  
 28829                                  	dec	si		; Else, back up and exit.
 28830                                  	jmp	short pvErr	; AX has already been set by parseL
 28831                                  
 28832                                  pvE1:	;mov	ax,3
 28833                                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 28834                                  pvErr:	dec	si
 28835                                  	dec	si
 28836                                  	stc
 28837                                  pvX:	;popreg	<es, ds, di>
 28838                                  	pop	es
 28839                                  	pop	ds
 28840                                  	pop	di
 28841                                  	retn
 28842                                  
 28843                                  ; -----------------------------------------------------------------------------
 28844                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 28845                                  ; -----------------------------------------------------------------------------
 28846                                  ; ENTRY:    ES:SI points to colon
 28847                                  ; EXIT:     ES:SI points to first character not parsed
 28848                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 28849                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 28850                                  ; -----------------------------------------------------------------------------
 28851                                  ; If the string here is terminated with anything other than whitespace or a
 28852                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 28853                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 28854                                  ; makes sure the app /L: is reported as being the culprit.
 28855                                  ; -----------------------------------------------------------------------------
 28856                                  
 28857                                  parseL:
 28858                                  	lodsb
 28859                                  	cmp	al,':'		; Make sure they did /L:
 28860                                  	jne	short plE1	; If they didn't, return with carry set.
 28861                                  
 28862                                  ; ------------------------------------------
 28863                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 28864                                  ; ------------------------------------------
 28865                                  
 28866                                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 28867                                  	jc	short plE2	; And error if it's a bad number.
 28868                                  	call	convUMB		; Convert any address to a UMB number
 28869                                  
 28870                                  	mov	cl,al		; Remember the UMB number
 28871                                  	call	stowUMB		; Mark this UMB # as used;
 28872                                  	jc	short plE2	; If it was already marked, it'll error
 28873                                  
 28874                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 28875                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 28876                                  
 28877                                  	lodsb
 28878                                  	cmp	al,';'		; Did "umb;" ?
 28879                                  	je	short pl10	; Yep: go back and get another UMB.
 28880                                  
 28881                                  	call	isWhite		; Did "umb " ?
 28882                                  	jz	short plX	; Yep: return (it'll go back to whitespace)
 28883                                  
 28884                                  	call	isEOL		; Did "umb" ?
 28885                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 28886                                  
 28887                                  	;cmp	al,'/'
 28888                                  	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 28889                                  	je	short plSwX	; If so, back up ES:SI one character and return
 28890                                  
 28891                                  	cmp	al,','		; Did "umb," ?
 28892                                  	jne	short plE1	; Just what the heck DID they do? Return error.
 28893                                  
 28894                                  ; --- Read a size -------------------------------------------------------------
 28895                                  
 28896                                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 28897                                  	jc	short plE1	; And error if it's a bad size.
 28898                                  
 28899                                  	call	toPara		; Convert from bytes to paragraphs
 28900                                  
 28901                                  	call	stowSiz		; CL still has the UMB number for this routine
 28902                                  
 28903                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 28904                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 28905                                  
 28906                                  	lodsb
 28907                                  	cmp	al,';'		; They did "umb,size;", so get another UMB.
 28908                                  	je	short pl10	;
 28909                                  
 28910                                  	call	isWhite		; Did it end with whitespace?
 28911                                  	jz	short plX	; If so, we're done here--go back.
 28912                                  
 28913                                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 28914                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 28915                                  
 28916                                  	;cmp	al,'/'
 28917                                  	cmp	al,SWTCH	; Did they do "umb,size/" ?
 28918                                  	je	short plSwX	; If so, again, we're done here.
 28919                                  plE1:	
 28920                                  	;mov	ax,1
 28921                                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 28922                                  	dec	si
 28923                                  	stc
 28924                                  	retn
 28925                                  
 28926                                  plE2:	;mov	ax,2
 28927                                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 28928                                  	; 12/12/2022
 28929                                  	; cf=1
 28930                                  	;stc
 28931                                  	retn
 28932                                  plSwX:	
 28933                                  	dec	si		; If we hit a '/' character, back up one char
 28934                                  				; so the whitespace checker will see it too.
 28935                                  plX:	; 12/12/2022
 28936                                  	; cf=0
 28937                                  	;clc			; Then just return with carry clear, so
 28938                                  	retn			; ParseVar will go about its business.
 28939                                  
 28940                                  ; -----------------------------------------------------------------------------
 28941                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 28942                                  ; -----------------------------------------------------------------------------
 28943                                  ; ENTRY:    None
 28944                                  ; EXIT:     None
 28945                                  ; ERROR:    None
 28946                                  ; USES:     fm_argc, flags
 28947                                  ; -----------------------------------------------------------------------------
 28948                                  
 28949                                  ;incArgc:
 28950                                  	;push	ax
 28951                                  
 28952                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 28953                                  
 28954                                  	;mov	al,[cs:fm_argc]
 28955                                  
 28956                                  	;inc	al		; Increment it,
 28957                                  
 28958                                  	;;putdata fm_argc, al	; And store it right back.
 28959                                  
 28960                                  	;mov	[cs:fm_argc],al
 28961                                  
 28962                                  	;pop	ax
 28963                                  	;retn
 28964                                  
 28965                                  ; -----------------------------------------------------------------------------
 28966                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 28967                                  ; -----------------------------------------------------------------------------
 28968                                  ; ENTRY:    AL contains character to test
 28969                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 28970                                  ; ERROR:    None
 28971                                  ; USES:     ZF
 28972                                  ; -----------------------------------------------------------------------------
 28973                                  
 28974                                  isEOL:
 28975                                  	cmp	al,0		; Null-terminator
 28976                                  	je	short ieX
 28977                                  	cmp	al,CR ; 0Dh	; Carriage Return
 28978                                  	je	short ieX
 28979                                  	cmp	al,LF ; 0Ah	; LineFeed
 28980                                  ieX:	
 28981                                  	retn
 28982                                  
 28983                                  ; -----------------------------------------------------------------------------
 28984                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 28985                                  ; -----------------------------------------------------------------------------
 28986                                  ; ENTRY:    AL contains character to test
 28987                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 28988                                  ; ERROR:    None
 28989                                  ; USES:     ZF
 28990                                  ; -----------------------------------------------------------------------------
 28991                                  
 28992                                  isWhite:
 28993                                  	cmp	al,' '		; Space
 28994                                  	je	short iwX
 28995                                  	cmp	al,'='		; Equals (treat as whitespace)
 28996                                  	je	short iwX
 28997                                  	cmp	al,tab ; 9	; Tab
 28998                                  iwX:	
 28999                                  	retn
 29000                                  
 29001                                  ; -----------------------------------------------------------------------------
 29002                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 29003                                  ; -----------------------------------------------------------------------------
 29004                                  ; ENTRY:    AL contains UMB number
 29005                                  ; EXIT:     None
 29006                                  ; ERROR:    None
 29007                                  ; USES:     Flags, variables in highvar.inc
 29008                                  ; -----------------------------------------------------------------------------
 29009                                  
 29010                                  unMarkUMB:
 29011                                  	push	ax
 29012                                  	push	bx
 29013                                  	push	di
 29014                                  	push	es
 29015                                  
 29016                                  	push	cs
 29017                                  	pop	es
 29018                                  
 29019                                  	xor	ah,ah
 29020                                  	mov	bx,ax
 29021                                  
 29022                                  	; 19/04/2019
 29023                                  	
 29024                                  	;mov	byte [es:bx+UmbUsed],0
 29025                                  	mov	[es:bx+UmbUsed],ah ; 0
 29026                                  
 29027                                  	cmp	[es:UmbLoad],al
 29028                                  	jne	short umu10
 29029                                  
 29030                                  	;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 29031                                  	mov	[es:UmbLoad],ah ; 0
 29032                                  umu10:	
 29033                                  	pop	es
 29034                                  	pop	di
 29035                                  	pop	bx
 29036                                  	pop	ax
 29037                                  	retn
 29038                                  
 29039                                  ; -----------------------------------------------------------------------------
 29040                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 29041                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 29042                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 29043                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 29044                                  ; -----------------------------------------------------------------------------
 29045                                  ; ENTRY:    AL contains UMB number, as specified by the user
 29046                                  ; EXIT:     None
 29047                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 29048                                  ; USES:     AX, Flags, variables in highvar.inc
 29049                                  ; -----------------------------------------------------------------------------
 29050                                  
 29051                                  stowUMB:
 29052                                  	cmp	al,MAXUMB ; 16
 29053                                  	jb	short su10
 29054                                  	stc
 29055                                  	retn			; Ooops-- UMB>=MAXUMB
 29056                                  su10:	
 29057                                  	push	bx
 29058                                  	push	di
 29059                                  	push	si
 29060                                  	push	ds
 29061                                  	push	es
 29062                                  	push	cs
 29063                                  	pop	es
 29064                                  	push	cs
 29065                                  	pop	ds
 29066                                  	
 29067                                  	;cmp	byte [UmbLoad],0FFh
 29068                                  	cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 29069                                  	jne	short su20
 29070                                  	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 29071                                  su20:	
 29072                                  	or	al,al		; If they gave UMB 0, there's really nothing
 29073                                  	jz	short su30	; that we should do here.
 29074                                  
 29075                                  	mov	bl,al
 29076                                  	xor	bh,bh
 29077                                  	mov	ax,1		; Now, AX = 1, and BX = UMB Number
 29078                                  
 29079                                  	xchg	[es:bx+UmbUsed],al
 29080                                  
 29081                                  	or	al,al		; If it was already 1, then al==1... and that
 29082                                  	jz	short su30	; means an error.
 29083                                  
 29084                                  	stc			; OOOPS!  This one's been used before.  :(
 29085                                  su30:	
 29086                                  	pop	es
 29087                                  	pop	ds
 29088                                  	pop	si
 29089                                  	pop	di
 29090                                  	pop	bx
 29091                                  	retn
 29092                                  
 29093                                  ; -----------------------------------------------------------------------------
 29094                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 29095                                  ; -----------------------------------------------------------------------------
 29096                                  ; ENTRY:    CL contains UMB number, AX contains size
 29097                                  ; EXIT:     None
 29098                                  ; ERROR:    None
 29099                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 29100                                  ; -----------------------------------------------------------------------------
 29101                                  
 29102                                  ; 13/05/2019
 29103                                  
 29104                                  stowSiz:
 29105                                  	push	bx
 29106                                  	;push	di ; ?
 29107                                  	push	es
 29108                                  
 29109                                  	push	cs
 29110                                  	pop	es	
 29111                                  
 29112                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 29113                                  	mov	bh,0			;     bx==UMB number, AX==size
 29114                                  	shl	bl,1			;     bx==offset into array, AX=size
 29115                                  	mov	[es:bx+UmbSize],ax	; Store the size
 29116                                  	
 29117                                  	pop	es
 29118                                  	;pop	di ; ?
 29119                                  	pop	bx
 29120                                  
 29121                                  	retn
 29122                                  
 29123                                  ; -----------------------------------------------------------------------------
 29124                                  ;*** toDigit - converts a character-digit to its binary counterpart
 29125                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 29126                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 29127                                  ; A-F are considered valid iff gnradix is 16.
 29128                                  ; -----------------------------------------------------------------------------
 29129                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 29130                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 29131                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 29132                                  ; USES:     CL, Flags
 29133                                  ; -----------------------------------------------------------------------------
 29134                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29135                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29136                                  ; will be 10 or 16.
 29137                                  ; -----------------------------------------------------------------------------
 29138                                  
 29139                                  gnradix:
 29140                                  	dw	0		; Must be a word--16x16 multiplication
 29141                                  
 29142                                  toDigit:
 29143                                  	cmp	word [cs:gnradix],16
 29144                                  	jne	short td20	; Don't check hex digits if radix isn't 16
 29145                                  
 29146                                  toDigit_hex:
 29147                                  	cmp	cl,'a'	; 61h
 29148                                  	jb	short td10
 29149                                  	cmp	cl,'f'	; 66h
 29150                                  	ja	short tdE	; Nothing valid above 'z' at all...
 29151                                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 29152                                  	;clc			; <- CLC is implicit from last SUB
 29153                                  	retn
 29154                                  td10:	
 29155                                  	cmp	cl,'A'  ; 41h
 29156                                  	jb	short td20	; Below 'A'?  Not a letter...
 29157                                  	cmp	cl,'F'	; 46h
 29158                                  	ja	short tdE	; Above 'F'?  Not a digit.
 29159                                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 29160                                  	;clc			; <- CLC is implicit from last SUB
 29161                                  	retn
 29162                                  toDigit_dec:
 29163                                  td20:	
 29164                                  	cmp	cl,'0'		; If less than zero,
 29165                                  	;jb	short tdE	; Done.
 29166                                  	jb	short tdEr ; 08/04/2019
 29167                                  	cmp	cl,'9'		; Or, if greater than nine,
 29168                                  	ja	short tdE	; Done.
 29169                                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 29170                                  	;clc			; <- CLC is implicit from last SUB
 29171                                  	retn
 29172                                  tdE:	
 29173                                  	stc
 29174                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 29175                                  	retn
 29176                                  
 29177                                  ; -----------------------------------------------------------------------------
 29178                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 29179                                  ; -----------------------------------------------------------------------------
 29180                                  ; ENTRY:    ES:SI points to an ascii string to scan
 29181                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 29182                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 29183                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 29184                                  ; -----------------------------------------------------------------------------
 29185                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29186                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29187                                  ; will be 10 or 16.
 29188                                  ; -----------------------------------------------------------------------------
 29189                                  
 29190                                  ; 08/04/2019 - Retro DOS v4.0
 29191                                  
 29192                                  GetXNum:
 29193                                  	;pushreg <bx, cx, ds>
 29194                                  	push	bx
 29195                                  	push	cx
 29196                                  	push	ds
 29197                                  
 29198                                  	cld
 29199                                  	xor	ax,ax
 29200                                  	xor	bx,bx
 29201                                  	xor	cx,cx
 29202                                  	xor	dx,dx			; Start with 0 (makes sense)
 29203                                  
 29204                                  	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 29205                                  
 29206                                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 29207                                  	;call	toDigit
 29208                                  	call	toDigit_dec
 29209                                  	jc	short gxnE		; If it's not a digit, leave now.
 29210                                  
 29211                                  	or	cl,cl
 29212                                  	jnz	short gxn20		; Doesn't have '0x'
 29213                                  	mov	cl,[es:si+1]
 29214                                  	cmp	cl,'x'			; Either 'x'...
 29215                                  	je	short gxn10
 29216                                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 29217                                  	jne	short gxn20
 29218                                  
 29219                                  gxn10:	
 29220                                  	mov	word [cs:gnradix], 16
 29221                                  	inc	si			; Since we read "0x", march over it.
 29222                                  	inc	si
 29223                                  
 29224                                  ; ------------------------------------------------------
 29225                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 29226                                  ;        DX:AX = current total
 29227                                  ;        BX    = 0
 29228                                  ;        CH    = 0
 29229                                  ; ------------------------------------------------------
 29230                                  
 29231                                  gxn20:	
 29232                                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 29233                                  	inc	si
 29234                                  
 29235                                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 29236                                  	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 29237                                  
 29238                                  	call	mul32		; Multiply DX:AX by gnradix
 29239                                  	jc	short gxnX	; (if it's too big, error out)
 29240                                  
 29241                                  	add	ax,cx		; Add the digit
 29242                                  	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 29243                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 29244                                  	;jmp	short gxn20
 29245                                  	jnc	short gxn20
 29246                                  gxnE:	
 29247                                  	;stc			; In this case, we need to set the carry
 29248                                  	jmp	short gxnX	; and leave--there were no digits given.
 29249                                  gxnQ:	
 29250                                  	dec	si		; Don't read in the offensive character.
 29251                                  	clc			; And clear carry, so they know it's okay.
 29252                                  gxnX:	
 29253                                  	pop	ds
 29254                                  	pop	cx
 29255                                  	pop	bx
 29256                                  	retn
 29257                                  
 29258                                  ; -----------------------------------------------------------------------------
 29259                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 29260                                  ; -----------------------------------------------------------------------------
 29261                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 29262                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 29263                                  ; ERROR:   Carry set if number was too large
 29264                                  ; USES:    Flags, AX, DX
 29265                                  ; -----------------------------------------------------------------------------
 29266                                  
 29267                                  mul32:
 29268                                  	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 29269                                  	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 29270                                  	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 29271                                  	jc	short m32E	; Too big?
 29272                                  
 29273                                  	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 29274                                  	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 29275                                  
 29276                                  	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 29277                                  	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 29278                                  	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29279                                  	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29280                                  	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 29281                                  	retn
 29282                                  m32E:	
 29283                                  	pop	ax
 29284                                  	retn
 29285                                  
 29286                                  ; -----------------------------------------------------------------------------
 29287                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 29288                                  ; -----------------------------------------------------------------------------
 29289                                  ; ENTRY:   DX:AX = the number to be divided
 29290                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 29291                                  ; ERROR:   None
 29292                                  ; USES:    Flags, AX, DX
 29293                                  ; -----------------------------------------------------------------------------
 29294                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 29295                                  ;       can't ensure a 386 host machine. Sorry.
 29296                                  ; -----------------------------------------------------------------------------
 29297                                  
 29298                                  toPara:
 29299                                  	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 29300                                  
 29301                                  	mov	cl,4		;
 29302                                  	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 29303                                  	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 29304                                  	mov	cl,12
 29305                                  	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 29306                                  	or	ax,dx		;    AX=hhhh LLLL llll llll
 29307                                  
 29308                                  	pop	cx
 29309                                  	retn
 29310                                  
 29311                                  ; -----------------------------------------------------------------------------
 29312                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 29313                                  ; -----------------------------------------------------------------------------
 29314                                  ; ENTRY:  Nothing
 29315                                  ; EXIT:   AX contains 0x9FFF for most systems
 29316                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 29317                                  ; USES:   Flags, AX
 29318                                  ; -----------------------------------------------------------------------------
 29319                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 29320                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 29321                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 29322                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 29323                                  ; -----------------------------------------------------------------------------
 29324                                  
 29325                                  UmbHead:
 29326                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 29327                                  
 29328                                  	;push	si ; ?
 29329                                  	;push	ds ; ? 
 29330                                  	;push	es
 29331                                  	;push	bx ; *	
 29332                                  
 29333                                  	; 09/04/2019
 29334                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 29335                                  
 29336                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 29337                                  	int	21h
 29338                                  
 29339                                  	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 29340                                  	cmp	ax,0FFFFh
 29341                                  	je	short uhE		; If it's 0xFFFF, it's an error...
 29342                                  
 29343                                  	clc				; Else, it isn't (CLC done by prev cmp)
 29344                                  	;jmp	short uhX
 29345                                  	; 12/12/2022
 29346                                  	retn
 29347                                  uhE:	
 29348                                  	stc
 29349                                  uhX:	
 29350                                  	;pop	bx ; *
 29351                                  	;pop	es
 29352                                  	;pop	ds ; ?
 29353                                  	;pop	si ; ?
 29354                                  	retn
 29355                                  
 29356                                  ; -----------------------------------------------------------------------------
 29357                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 29358                                  ; -----------------------------------------------------------------------------
 29359                                  ; ENTRY:  ES:0 should point to a valid MCB
 29360                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 29361                                  ; USES:   Flags
 29362                                  ; -----------------------------------------------------------------------------
 29363                                  
 29364                                  isSysMCB:
 29365                                  	;push	ax
 29366                                  
 29367                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 29368                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 29369                                  	;je	short ism10
 29370                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 29371                                  	;;je	short ism10
 29372                                  	;;jmp	short ismX		; Anything else isn't.
 29373                                  	;jne	short ismX
 29374                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 29375                                  	jne	short ismX 
 29376                                  ism10:	
 29377                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 29378                                  	;cmp	ax,'SC' ; 4353h
 29379                                  	cmp	word [es:ARENA.NAME],'SC'
 29380                                  ismX:	
 29381                                  	;pop	ax
 29382                                  	retn
 29383                                  
 29384                                  ; 09/04/2019 - Retro DOS v4.0
 29385                                  
 29386                                  ; -----------------------------------------------------------------------------
 29387                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 29388                                  ; -----------------------------------------------------------------------------
 29389                                  ; ENTRY:  AX contains a segment address
 29390                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 29391                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 29392                                  ; USES:   Flags, AX
 29393                                  ; -----------------------------------------------------------------------------
 29394                                  ; An address in the following areas is treated as:
 29395                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 29396                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 29397                                  ;      ...
 29398                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 29399                                  ; -----------------------------------------------------------------------------
 29400                                  
 29401                                  AddrToUmb:
 29402                                  	push	cx
 29403                                  	push	dx
 29404                                  	push	es
 29405                                  
 29406                                  	mov	dx,ax		; DX = address to search for
 29407                                  
 29408                                  	call	UmbHead		; AX = first segment
 29409                                  	jc	short atuE	; If it couldn't get it, error out.
 29410                                  
 29411                                  	; 14/08/2023
 29412                                  	;mov	es,ax ; *	; ES = first UMB segment
 29413                                  	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 29414                                  
 29415                                  	; 22/07/2023
 29416                                  atu10:
 29417                                  	mov	es,ax ; * ; ** ; 14/08/2023
 29418                                  ; ----------------------------------------
 29419                                  ; ATU10--ES - Current MCB address
 29420                                  ;        DX - Address given for conversion
 29421                                  ;        CX - Current UMB #
 29422                                  ; ----------------------------------------
 29423                                  
 29424                                  ;atu10:	
 29425                                  	;mov	ax,es ; * ; 14/08/2023
 29426                                          cmp	ax,dx		; Present segment >= given segment?
 29427                                  	jae	short atuX	; Yep--done.
 29428                                  
 29429                                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 29430                                  	jnz	short atu20
 29431                                  
 29432                                  	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 29433                                  atu20:	
 29434                                  	;mov	al,[es:ARENA.SIGNATURE]
 29435                                  	;cmp	al,arena_signature_end  ; 'Z'
 29436                                  	; 14/08/2023
 29437                                  	; ax = es
 29438                                  	;mov	ax,es ; **
 29439                                  	add	ax,[es:ARENA.SIZE]
 29440                                  	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 29441                                  	je	short atu30		; 'Z' means this was the last MCB... that's it.
 29442                                  
 29443                                  	;NextMCB es,ax
 29444                                  
 29445                                  	;mov	ax,es ; **
 29446                                  	;;add	ax,[es:3]
 29447                                  	;add	ax,[es:ARENA.SIZE]
 29448                                  	inc	ax
 29449                                  	; 14/08/2023
 29450                                  	;mov	es,ax ; *
 29451                                  	jmp	short atu10
 29452                                  
 29453                                  ; -----------------------------------------------------------------------------
 29454                                  ; if we get to atu30, they specified a number that was past the last MCB.
 29455                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 29456                                  ; -----------------------------------------------------------------------------
 29457                                  
 29458                                  atu30:	
 29459                                  	; 14/08/2023
 29460                                  	; ax = es + [es:ARENA.SIZE] 
 29461                                  	;mov	ax,es ; **
 29462                                  	;add	ax,[es:ARENA.SIZE] ; **
 29463                                  	cmp	ax,dx		; Present >= given?
 29464                                  	jae	short atuX	; Yep! It _was_ inside.
 29465                                  atuE:	
 29466                                  	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 29467                                  	dec	cx		; (that makes it return 0xFFFF and sets CF)
 29468                                  atuX:	
 29469                                  	mov	ax,cx		; Return the UMB number in AX
 29470                                  	
 29471                                  	pop	es	
 29472                                  	pop	dx
 29473                                  	pop	cx
 29474                                  	retn
 29475                                  
 29476                                  ; -----------------------------------------------------------------------------
 29477                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 29478                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 29479                                  ; address rather than a UMB number... and use that address to look up a UMB.
 29480                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 29481                                  ; -----------------------------------------------------------------------------
 29482                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 29483                                  ; EXIT:   AX will contain a UMB number
 29484                                  ; ERROR:  None
 29485                                  ; USES:   Flags, AX
 29486                                  ; -----------------------------------------------------------------------------
 29487                                  
 29488                                  convUMB:
 29489                                  	cmp	word [cs:gnradix],16
 29490                                  	jne	short cu10	; If it didn't read in hex, it's not an address
 29491                                  	call	AddrToUmb	; Else, convert the address to a UMB number
 29492                                  ;cmp	ax,0FFFFh
 29493                                  	;jne	short cu10
 29494                                  	;inc	ax		; If too high, ignore it (make it conventional)
 29495                                  	; 14/08/2023
 29496                                  	inc	ax
 29497                                  	jz	short cu10	; If too high, ignore it (make it conventional)
 29498                                  	dec	ax
 29499                                  cu10:	
 29500                                  	retn
 29501                                  
 29502                                  ; -----------------------------------------------------------------------------
 29503                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 29504                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 29505                                  ; of the usual HIGH_FIRST.  See the code.
 29506                                  ; -----------------------------------------------------------------------------
 29507                                  ; ENTRY:  None
 29508                                  ; EXIT:   None
 29509                                  ; ERROR:  None
 29510                                  ; USES:   Flags, fm_umb, fm_strat
 29511                                  ; -----------------------------------------------------------------------------
 29512                                  
 29513                                  setUMBs:
 29514                                  	push	ax
 29515                                  	push	bx
 29516                                  	call	fm_link
 29517                                  	pop	bx
 29518                                  	pop	ax
 29519                                  	retn
 29520                                  
 29521                                  ; -----------------------------------------------------------------------------
 29522                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 29523                                  ; -----------------------------------------------------------------------------
 29524                                  ; ENTRY:  None
 29525                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 29526                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 29527                                  ; ERROR:  None
 29528                                  ; USES:   Flags, fm_strat, fm_umb
 29529                                  ; -----------------------------------------------------------------------------
 29530                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 29531                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 29532                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 29533                                  ; such that the load UMB is too small, and shouldn't be used.
 29534                                  ; -----------------------------------------------------------------------------
 29535                                  
 29536                                  loadLow:
 29537                                  	;push	ds
 29538                                  	;push	cs		; Point DS into appropriate data segment
 29539                                  	;pop	ds	
 29540                                  
 29541                                  	;mov	al,[UmbLoad]
 29542                                  	mov	al,[cs:UmbLoad]
 29543                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 29544                                  	jne	short ll10
 29545                                  
 29546                                  	stc
 29547                                  ll15:
 29548                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 29549                                  	;stc
 29550                                  	;jmp	short llX
 29551                                  	retn
 29552                                  ll10:	
 29553                                  	or	al,al		; AL=the load UMB: Is it == 0?
 29554                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 29555                                  
 29556                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 29557                                  	retn
 29558                                  
 29559                                  	;mov	al,1
 29560                                  	;clc
 29561                                  ;llX:
 29562                                  	;pop	ds		; Return DS to where it was
 29563                                  	;retn
 29564                                  
 29565                                  ; -----------------------------------------------------------------------------
 29566                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 29567                                  ; -----------------------------------------------------------------------------
 29568                                  ; ENTRY:  None
 29569                                  ; EXIT:   None
 29570                                  ; ERROR:  None
 29571                                  ; USES:   Flags, fm_strat, fm_umb
 29572                                  ; -----------------------------------------------------------------------------
 29573                                  
 29574                                  HideUMBs:
 29575                                  	push	ax
 29576                                  	push	cx
 29577                                  	push	ds
 29578                                  	push	es
 29579                                  
 29580                                  	call	UmbTest		; See if we REALLY linked in anything...
 29581                                  	jc	short husX	; ...if not, there's nothing for us to do.
 29582                                  
 29583                                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 29584                                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 29585                                  
 29586                                  	;putdata fInHigh,1	; Remember that we're now running high
 29587                                  	mov	byte [cs:fInHigh],1
 29588                                  
 29589                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 29590                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 29591                                  
 29592                                  	cmp	al,UNSPECIFIED	; If they didn't,
 29593                                  	je	short husX	; then we shouldn't do this loop:
 29594                                  
 29595                                  	xor	cx,cx
 29596                                  
 29597                                  ; -----------------------------------------------
 29598                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 29599                                  ; -----------------------------------------------
 29600                                  
 29601                                  hus10:	inc	cx		; For each UMB:
 29602                                  	cmp	cx,MAXUMB ; 16
 29603                                  	jae	short hus20
 29604                                  
 29605                                  	mov	al,cl		; (stopping as soon as we're outside of the
 29606                                  	push	es
 29607                                  	call	findUMB		; valid range of UMBs)
 29608                                  	pop	es		; push/pop: trash what findumb finds.  :-)
 29609                                  	jc	short hus20
 29610                                  
 29611                                  	call	_hideUMB_	; hide what we need to hide.
 29612                                  
 29613                                  	jmp	short hus10
 29614                                  hus20:	
 29615                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 29616                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 29617                                  
 29618                                  	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 29619                                  	jnz	short husX	; If not, we're done.
 29620                                  
 29621                                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 29622                                  husX:	
 29623                                  	pop	es
 29624                                  	pop	ds
 29625                                  	pop	cx
 29626                                  	pop	ax
 29627                                  	retn
 29628                                  
 29629                                  ; -----------------------------------------------------------------------------
 29630                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 29631                                  ; -----------------------------------------------------------------------------
 29632                                  ; ENTRY:  None
 29633                                  ; EXIT:   AL == load UMB
 29634                                  ; ERROR:  None
 29635                                  ; USES:   Flags, AX
 29636                                  ; -----------------------------------------------------------------------------
 29637                                  
 29638                                  ;GetLoadUMB:
 29639                                  ;	;getdata al, UmbLoad
 29640                                  ;	push	ds
 29641                                  ;	push	cs
 29642                                  ;	pop	ds
 29643                                  ;	mov	al,[UmLoad]
 29644                                  ;	pop	ds
 29645                                  ;	retn
 29646                                  
 29647                                  ; -----------------------------------------------------------------------------
 29648                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 29649                                  ; -----------------------------------------------------------------------------
 29650                                  ; ENTRY:  None
 29651                                  ; EXIT:   AX == load UMB minimum size
 29652                                  ; ERROR:  None
 29653                                  ; USES:   Flags, AX
 29654                                  ; -----------------------------------------------------------------------------
 29655                                  
 29656                                  GetLoadSize:
 29657                                  	; 09/04/2019 - Retro DOS v4.0
 29658                                  	mov	al,[cs:UmbLoad]
 29659                                  	jmp	short GetSize
 29660                                  
 29661                                  	;push	bx
 29662                                  	;;push	si
 29663                                  	;push	ds
 29664                                  	;push	cs
 29665                                  	;pop	ds
 29666                                  
 29667                                  	;mov	al,[UmbLoad]
 29668                                  
 29669                                  	;xor	ah,ah			;    ax==UMB
 29670                                  	;mov	bx,UmbSize		;    bx==array
 29671                                  	;shl	al,1	                ;    ax==offset
 29672                                  	;;add	ax,bx			;    ax==element index
 29673                                  	;;mov	si,ax			; ds:si==element index
 29674                                  
 29675                                  	;;lodsw				;    ax==size
 29676                                  
 29677                                  	;add	bx,ax
 29678                                  	;mov	ax,[bx]
 29679                                  
 29680                                  	;pop	ds
 29681                                  	;;pop	si
 29682                                  	;pop	bx
 29683                                  	;retn
 29684                                  
 29685                                  ; -----------------------------------------------------------------------------
 29686                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 29687                                  ; -----------------------------------------------------------------------------
 29688                                  ; ENTRY:  AL == a UMB number
 29689                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 29690                                  ; ERROR:  None
 29691                                  ; USES:   Flags, AX
 29692                                  ; -----------------------------------------------------------------------------
 29693                                  
 29694                                  GetSize:
 29695                                  	; 09/04/2019 - Retro DOS v4.0
 29696                                  
 29697                                  	push	bx
 29698                                  	;push	si
 29699                                  	;push	ds
 29700                                  	;push	cs
 29701                                  	;pop	ds
 29702                                  
 29703                                  	xor	ah,ah			;    ax==UMB
 29704                                  	mov	bx,UmbSize		;    bx==array
 29705                                  	shl	al,1	                ;    ax==offset
 29706                                  	;add	ax,bx			;    ax==element index
 29707                                  	;mov	si,ax			; ds:si==element index
 29708                                  
 29709                                  	;lodsw				;    ax==size
 29710                                  
 29711                                  	add	bx,ax
 29712                                  	;mov	ax,[bx]
 29713                                  	mov	ax,[cs:bx]
 29714                                  
 29715                                  	;pop	ds
 29716                                  	;pop	si
 29717                                  	pop	bx
 29718                                  	retn
 29719                                  
 29720                                  ; -----------------------------------------------------------------------------
 29721                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 29722                                  ; -----------------------------------------------------------------------------
 29723                                  ; ENTRY:   AL == new load UMB
 29724                                  ; EXIT:    None
 29725                                  ; ERROR:   None
 29726                                  ; USES:    Flags, AX
 29727                                  ; -----------------------------------------------------------------------------
 29728                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 29729                                  ;          time you would ever need this, so that's okay.
 29730                                  ; -----------------------------------------------------------------------------
 29731                                  
 29732                                  ;StoLoadUMB:
 29733                                  ;	;putdata UmbLoad, al
 29734                                  ;	push	es
 29735                                  ;	push	cs
 29736                                  ;	pop	es
 29737                                  ;	mov	[es:UmbLoad],al
 29738                                  ;	pop	es
 29739                                  ;	retn
 29740                                  
 29741                                  ; -----------------------------------------------------------------------------
 29742                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 29743                                  ; -----------------------------------------------------------------------------
 29744                                  ; ENTRY:  AL == new load size
 29745                                  ; EXIT:   None
 29746                                  ; ERROR:  None
 29747                                  ; USES:   Flags, AX
 29748                                  ; -----------------------------------------------------------------------------
 29749                                  
 29750                                  StoLoadSize:
 29751                                  	push	dx
 29752                                  
 29753                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 29754                                  	;
 29755                                  	;push	ds
 29756                                  	;push	cs
 29757                                  	;pop	ds
 29758                                  	;mov	dl,[UmbLoad]
 29759                                  	;pop	ds	
 29760                                  
 29761                                  	mov	dl,[cs:UmbLoad]
 29762                                  
 29763                                  	cmp	dl,UNSPECIFIED ; 0FFh
 29764                                  	je	short sls10
 29765                                  
 29766                                  	call	stowSiz			; We've got a function to do just this
 29767                                  sls10:	
 29768                                  	pop	dx
 29769                                  	retn
 29770                                  
 29771                                  ; -----------------------------------------------------------------------------
 29772                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 29773                                  ; -----------------------------------------------------------------------------
 29774                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 29775                                  ; EXIT:     None; free elements in UMB marked as hidden
 29776                                  ; ERROR:    None
 29777                                  ; USES:     Flags
 29778                                  ; -----------------------------------------------------------------------------
 29779                                  
 29780                                  hideUMB:
 29781                                  	push	ax
 29782                                  	push	es
 29783                                  
 29784                                  	call	findUMB		; Returns with carry if err, else ES == MCB
 29785                                  	jc	short huX
 29786                                  
 29787                                  ; ------------------------------------------------
 29788                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 29789                                  ;            we're not in the same UMB, so exit.
 29790                                  ; ------------------------------------------------
 29791                                  
 29792                                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 29793                                  	jz	short huX	; If it is, we've finished the UMB.
 29794                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 29795                                  	or	word [es:ARENA.OWNER],0
 29796                                  	jnz	short hu20
 29797                                  
 29798                                  	call	hideMCB
 29799                                  hu20:	
 29800                                  	mov	al,[es:ARENA.SIGNATURE]
 29801                                  	cmp	al,arena_signature_end  ;'Z'
 29802                                  	jz	short huX	; 'Z' means this was the last MCB... that's it.
 29803                                  
 29804                                  	;NextMCB es, ax		; Go on forward.
 29805                                  	mov     ax,es
 29806                                  	;add	ax,[es:3]
 29807                                  	add     ax,[es:ARENA.SIZE]
 29808                                  	inc     ax
 29809                                  	mov     es,ax
 29810                                  
 29811                                  	jmp	short hu10
 29812                                  huX:	
 29813                                  	pop	es
 29814                                  	pop	ax
 29815                                  	retn
 29816                                  
 29817                                  ; -----------------------------------------------------------------------------
 29818                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 29819                                  ; -----------------------------------------------------------------------------
 29820                                  ; ENTRY:    None
 29821                                  ; EXIT:     ZF set if user DIDN'T specify /S
 29822                                  ; ERROR:    None
 29823                                  ; USES:     Flags
 29824                                  ; -----------------------------------------------------------------------------
 29825                                  
 29826                                  isTiny:
 29827                                  	push	ax
 29828                                  
 29829                                  	;getdata al, fUmbTiny
 29830                                  	;
 29831                                  	;push	ds
 29832                                  	;push	cs
 29833                                  	;pop	ds
 29834                                  	;mov	al,[fUmbTiny]
 29835                                  	;pop	ds
 29836                                  
 29837                                  	mov	al,[cs:fUmbTiny]		
 29838                                  
 29839                                  	or	al,al
 29840                                  	pop	ax
 29841                                  	retn
 29842                                  
 29843                                  ; -----------------------------------------------------------------------------
 29844                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 29845                                  ; -----------------------------------------------------------------------------
 29846                                  ; ENTRY:    ES:0 should point to an MCB
 29847                                  ; EXIT:     ZF set if MCB is free, else !ZF
 29848                                  ; ERROR:    None
 29849                                  ; USES:     Flags
 29850                                  ; -----------------------------------------------------------------------------
 29851                                  
 29852                                  ;isFreeMCB:
 29853                                  ;	or	word [es:ARENA.OWNER],0
 29854                                  ;	retn
 29855                                  
 29856                                  ; -----------------------------------------------------------------------------
 29857                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 29858                                  ; -----------------------------------------------------------------------------
 29859                                  ; ENTRY:    ES:0 should point to an MCB
 29860                                  ; EXIT:     None; MCB marked as HIDDEN
 29861                                  ; ERROR:    None
 29862                                  ; USES:     None
 29863                                  ; -----------------------------------------------------------------------------
 29864                                  
 29865                                  hideMCB:
 29866                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 29867                                  	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 29868                                  	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 29869                                  	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 29870                                  	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 29871                                  	retn
 29872                                  
 29873                                  ; -----------------------------------------------------------------------------
 29874                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 29875                                  ; -----------------------------------------------------------------------------
 29876                                  ; ENTRY:    ES:0 should point to an MCB
 29877                                  ; EXIT:     None; MCB marked as FREE
 29878                                  ; ERROR:    None
 29879                                  ; USES:     None
 29880                                  ; -----------------------------------------------------------------------------
 29881                                  
 29882                                  unHideMCB:
 29883                                  	push	ax
 29884                                  	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 29885                                  	mov	ax,'  ' ; 2020h
 29886                                  	mov	[es:ARENA.NAME+0],ax
 29887                                  	mov	[es:ARENA.NAME+2],ax
 29888                                  	mov	[es:ARENA.NAME+4],ax
 29889                                  	mov	[es:ARENA.NAME+6],ax
 29890                                  	pop	ax
 29891                                  	retn
 29892                                  
 29893                                  ; -----------------------------------------------------------------------------
 29894                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 29895                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 29896                                  ; -----------------------------------------------------------------------------
 29897                                  ; ENTRY:    AL should be to a valid UMB number
 29898                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 29899                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 29900                                  ; USES:     Flags, ES
 29901                                  ; -----------------------------------------------------------------------------
 29902                                  
 29903                                  findUMB:
 29904                                  	push	ax
 29905                                  	push	cx
 29906                                  	push	dx
 29907                                  
 29908                                  	xor	ah,ah		; Zap ah, so al==ax
 29909                                  
 29910                                  	mov	dx,ax		; Store the to-be-found UMB number in DX
 29911                                  
 29912                                  	call	UmbHead		; Returns first UMB segment in AX
 29913                                  	mov	es,ax
 29914                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 29915                                  
 29916                                  ; ---------------------------------------------
 29917                                  ; FU10--CX - This UMB number; 0 == conventional
 29918                                  ;       DX - The UMB number they're looking for
 29919                                  ;       ES - The current MCB address
 29920                                  ; ---------------------------------------------
 29921                                  
 29922                                  fu10:	
 29923                                  	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 29924                                  	je	short fuX	; searching for--so exit.
 29925                                  
 29926                                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 29927                                  	jnz	short fu20
 29928                                  
 29929                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 29930                                  fu20:	
 29931                                  	mov	al,[es:ARENA.SIGNATURE]
 29932                                  	cmp	al,arena_signature_end ; 'Z'
 29933                                  	je	short fuE	; 'Z' means this was the last MCB... that's it.
 29934                                  
 29935                                  	;NextMCB es, ax		; Go on forward.
 29936                                  	mov     ax,es
 29937                                  	;add	ax,[es:3]
 29938                                  	add     ax,[es:ARENA.SIZE]
 29939                                  	inc     ax
 29940                                  	mov     es,ax
 29941                                  
 29942                                  	jmp	short fu10
 29943                                  fuE:	
 29944                                  	stc
 29945                                  fuX:
 29946                                  	pop	dx
 29947                                  	pop	cx
 29948                                  	pop	ax		; The address is already in ES.
 29949                                  	retn
 29950                                  
 29951                                  ; -----------------------------------------------------------------------------
 29952                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 29953                                  ; -----------------------------------------------------------------------------
 29954                                  ; ENTRY:    AL should be to a valid UMB number
 29955                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 29956                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 29957                                  ; USES:     Flags, ES
 29958                                  ; -----------------------------------------------------------------------------
 29959                                  
 29960                                  BigFree:
 29961                                  	push	bx
 29962                                  	push	cx
 29963                                  
 29964                                  	call	findUMB			; Returns with CF if err, else ES==MCB
 29965                                  	jc	short bfX		; (would be "jc bfE"; it just does stc)
 29966                                  
 29967                                  	xor	bx,bx			; Segment address of largest free MCB
 29968                                  	xor	cx,cx			; Size of largest free MCB
 29969                                  
 29970                                  ; ---------------------------------------------
 29971                                  ; BF10--ES - Current MCB address
 29972                                  ;       BX - Address of largest free MCB so far
 29973                                  ;       CX - Size of largest free MCB so far
 29974                                  ; ---------------------------------------------
 29975                                  
 29976                                  bf10:	
 29977                                  	call	isSysMCB		; If we've left the MCB, we're done.
 29978                                  	jz	short bf30
 29979                                  
 29980                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 29981                                  	or	word [es:ARENA.OWNER],0
 29982                                  	jnz	short bf20
 29983                                  
 29984                                  	mov	ax,[es:ARENA.SIZE]
 29985                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 29986                                  	cmp	cx,ax
 29987                                  	jg	short bf20		; Unless we're bigger,
 29988                                  
 29989                                  	mov	bx,es			; Store this new element's address,
 29990                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 29991                                  	mov	cx,ax
 29992                                  
 29993                                  bf20:	mov	al,[es:ARENA.SIGNATURE]
 29994                                  	cmp	al,arena_signature_end	; 'Z'
 29995                                  	jz	short bf30		; 'Z' means this was the last MCB.
 29996                                  
 29997                                  	;NextMCB es,ax		; Go on forward.
 29998                                  	mov     ax,es
 29999                                  	;add	ax,[es:3]
 30000                                  	add     ax,[es:ARENA.SIZE]
 30001                                  	inc     ax
 30002                                  	mov     es,ax
 30003                                  
 30004                                  	jmp	short bf10
 30005                                  
 30006                                  bf30:	mov	es,bx			; Return the address
 30007                                  	mov	ax,cx			; Return the size
 30008                                  	or	bx,bx
 30009                                  	jnz	short bfX		; (if size==0, there's nothing free)
 30010                                  bfE:	
 30011                                  	stc
 30012                                  bfX:
 30013                                  	pop	cx
 30014                                  	pop	bx
 30015                                  	retn
 30016                                  
 30017                                  ; -----------------------------------------------------------------------------
 30018                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 30019                                  ; -----------------------------------------------------------------------------
 30020                                  ; ENTRY:    AL should be to a valid UMB number
 30021                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 30022                                  ; ERROR:    None
 30023                                  ; USES:     Flags
 30024                                  ; -----------------------------------------------------------------------------
 30025                                  
 30026                                  isSpecified:
 30027                                  	push	ax
 30028                                  
 30029                                  	xor	bh,bh
 30030                                  	mov	bl,al
 30031                                  
 30032                                  	;getdata al, DS:UmbUsed[bx]
 30033                                  	;
 30034                                  	;push	ds
 30035                                  	;push	cs
 30036                                  	;pop	ds
 30037                                  	;mov	al,[bx+UmbUsed]
 30038                                  	;pop	ds
 30039                                  	
 30040                                  	mov	al,[cs:bx+UmbUsed]
 30041                                  	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 30042                                  
 30043                                  	pop	ax
 30044                                  	retn
 30045                                  
 30046                                  ; -----------------------------------------------------------------------------
 30047                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 30048                                  ; -----------------------------------------------------------------------------
 30049                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 30050                                  ; EXIT:     None; MCB broken if carry clear
 30051                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 30052                                  ; USES:     Flags
 30053                                  ; -----------------------------------------------------------------------------
 30054                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 30055                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 30056                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 30057                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 30058                                  ; minimum for performing a split.
 30059                                  ; -----------------------------------------------------------------------------
 30060                                  
 30061                                  MIN_SPLIT_SIZE	equ	20h
 30062                                  
 30063                                  shrinkMCB:
 30064                                  	;pushreg <bx, cx, es>
 30065                                  	push	bx
 30066                                  	push	cx
 30067                                  	push	es
 30068                                  
 30069                                  	mov	bx,ax			; Move things around... and
 30070                                  	mov	ax,es			; save this one for later.
 30071                                  
 30072                                  	mov	cx,[es:ARENA.SIZE]
 30073                                  	sub	cx,MIN_SPLIT_SIZE ; 32
 30074                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 30075                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 30076                                  	; 18/12/2022
 30077                                  	cmp	cx,bx
 30078                                  	jb	short smE ; (*)
 30079                                  
 30080                                  	mov	dl,[es:ARENA.SIGNATURE]
 30081                                  	mov	cx,[es:ARENA.SIZE]
 30082                                  
 30083                                  	mov	[es:ARENA.SIZE],bx
 30084                                  	mov	byte [es:ARENA.SIGNATURE],'M'
 30085                                  
 30086                                  	add	ax,bx
 30087                                  	inc	ax
 30088                                  	mov	es,ax			; Move to new arena area
 30089                                  
 30090                                  	mov	ax,cx
 30091                                  	sub	ax,bx
 30092                                  	; 12/12/2022
 30093                                  	; ax > 0
 30094                                  	dec	ax			; And prepare the new size
 30095                                  
 30096                                  	; 18/12/2022
 30097                                  	mov	[es:ARENA.SIGNATURE],dl
 30098                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 30099                                  	mov	[es:ARENA.SIZE],ax
 30100                                  	;mov	ax,'  ' ; 2020h
 30101                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 30102                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 30103                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 30104                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 30105                                  
 30106                                  	; 18/12/2022
 30107                                  	call	freeMCB	; (**)
 30108                                  
 30109                                  	; 12/12/2022
 30110                                  	; cf=0
 30111                                  	;clc
 30112                                  	; 18/12/2022
 30113                                  	;jmp	short smX
 30114                                  smE:	
 30115                                  	; 18/12/2022
 30116                                  	; cf=1 (*)
 30117                                  	;stc
 30118                                  smX:	
 30119                                  	;popreg	<es, cx, bx>
 30120                                  	pop	es
 30121                                  	pop	cx
 30122                                  	pop	bx
 30123                                  	retn
 30124                                  
 30125                                  ; -----------------------------------------------------------------------------
 30126                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 30127                                  ; -----------------------------------------------------------------------------
 30128                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 30129                                  ; EXIT:     None; UMB is hidden as necessary
 30130                                  ; ERROR:    None
 30131                                  ; USES:     Flags, AX, CX
 30132                                  ; -----------------------------------------------------------------------------
 30133                                  ; PRIMARY LOGIC:
 30134                                  ;
 30135                                  ; If the UMB is specified in the DH/LH statement, then:
 30136                                  ;    If the largest free segment is too small (check specified size), then:
 30137                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 30138                                  ;    Else, if largest free segment is LARGER than specified size, then:
 30139                                  ;       If /S was given on the command-line, then:
 30140                                  ;          Break that element into two pieces
 30141                                  ;          Set a flag that we're shrinking
 30142                                  ;       Endif
 30143                                  ;    Endif
 30144                                  ; Endif
 30145                                  ; If the UMB is NOT specified (or was removed by the above):
 30146                                  ;    Hide all free elements in the UMB
 30147                                  ;    If the flag that we're shrinking was set, then:
 30148                                  ;       UN-hide the lower portion of the shrunken UMB
 30149                                  ;    ENDIF
 30150                                  ; ENDIF
 30151                                  ; -----------------------------------------------------------------------------
 30152                                  
 30153                                  _hideUMB_:
 30154                                  	push	bx
 30155                                  	push	dx
 30156                                  	push	es
 30157                                  
 30158                                  	mov	al,cl
 30159                                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 30160                                  	jz	short hu_20
 30161                                  
 30162                                  	mov	al,cl		; Retrieve the size of the largest
 30163                                  	call	BigFree		; free element in AX; put its address in ES
 30164                                  	jc	short hu_20	; Oops. Errors mean skip this part.
 30165                                  
 30166                                  	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 30167                                  	mov	al,cl		; Retrieve the user's specified
 30168                                  	call	GetSize		; minimum size for this umb (into AX)
 30169                                  	pop	bx		; Now BX==BigFree, AX==Specified Size
 30170                                  
 30171                                  	or	ax,ax		; If they didn't specify one,
 30172                                  	jz	short hu_20	; Skip over all this.
 30173                                  
 30174                                  	cmp	ax,bx		; Ah... if (specified > max free)
 30175                                  	jbe	short hu_10
 30176                                  
 30177                                  	mov	al,cl		;   Then mark that UMB as unused. Nya nya.
 30178                                  	call	unMarkUMB
 30179                                  	jmp	short hu_20
 30180                                  hu_10:	
 30181                                  	call	isTiny		; Returns ZF clear if user specified /S
 30182                                  	jz	short hu_20
 30183                                  
 30184                                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 30185                                  	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 30186                                  
 30187                                  	mov	dx,es
 30188                                  	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 30189                                  
 30190                                  hu_20:	mov	ax,cx
 30191                                  	call	isSpecified	; If they specified this UMB, we're done...
 30192                                  	jnz	short hu_X	; so leave.
 30193                                  
 30194                                  	xor	dx,dx
 30195                                  hu_30:	
 30196                                  	mov	al,cl
 30197                                  
 30198                                  	call	hideUMB		; Hides everything in UMB #al
 30199                                  
 30200                                  	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 30201                                  	jz	short hu_X	; So we should leave.
 30202                                  
 30203                                  	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 30204                                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 30205                                  hu_X:	
 30206                                  	pop	es
 30207                                  	pop	dx
 30208                                  	pop	bx
 30209                                  	retn
 30210                                  
 30211                                  ; -----------------------------------------------------------------------------
 30212                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 30213                                  ; -----------------------------------------------------------------------------
 30214                                  ; Entry:  None
 30215                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 30216                                  ; Error:  None
 30217                                  ; Uses:   Flags
 30218                                  ; -----------------------------------------------------------------------------
 30219                                  
 30220                                  UnFreeze:
 30221                                  	push	ax
 30222                                  	push	es
 30223                                  
 30224                                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 30225                                  	jc	short ufX
 30226                                  
 30227                                  	mov	es,ax
 30228                                  
 30229                                  ; ------------------------------
 30230                                  ; UF10--ES - Current MCB address
 30231                                  ; ------------------------------
 30232                                  
 30233                                  uf10:	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 30234                                  	jnz	short uf20
 30235                                  	call	unHideMCB
 30236                                  uf20:	
 30237                                  	mov	al,[es:ARENA.SIGNATURE]
 30238                                  
 30239                                  	cmp	al,arena_signature_end ; 'Z'
 30240                                  	jz	short ufX	; 'Z' means this was the last MCB... that's it.
 30241                                  
 30242                                  	;NextMCB es, ax		; Go on forward.
 30243                                  	mov     ax,es
 30244                                  	;add	ax,[es:3]
 30245                                  	add     ax,[es:ARENA.SIZE]
 30246                                  	inc     ax
 30247                                  	mov     es,ax
 30248                                  
 30249                                  	jmp	short uf10
 30250                                  ufX:	
 30251                                  	pop	es
 30252                                  	pop	ax
 30253                                  	retn
 30254                                  
 30255                                  ; -----------------------------------------------------------------------------
 30256                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 30257                                  ; -----------------------------------------------------------------------------
 30258                                  ; ENTRY:    ES:0 should point to an MCB
 30259                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 30260                                  ; ERROR:    None
 30261                                  ; USES:     Flags
 30262                                  ; -----------------------------------------------------------------------------
 30263                                  
 30264                                  isFrozMCB:
 30265                                  	;push	ax
 30266                                  
 30267                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30268                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30269                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 30270                                  	jne	short ifmX
 30271                                  
 30272                                  	;mov	ax,[es:ARENA.NAME+0]
 30273                                  	;cmp	ax,'FR' ; 5246h
 30274                                  	cmp	word [es:ARENA.NAME+0],'FR'
 30275                                  	jne	short ifmX
 30276                                  	;mov	ax,[es:ARENA.NAME+2]
 30277                                  	;cmp	ax,'OZ' ; 5A4Fh
 30278                                  	cmp	word [es:ARENA.NAME+2],'OZ'
 30279                                  	jne	short ifmX
 30280                                  	;mov	ax,[es:ARENA.NAME+4]
 30281                                  	;cmp	ax,'EN' ; 4E45h
 30282                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30283                                  	jne	short ifmX
 30284                                  	;mov	ax,[es:ARENA.NAME+6]
 30285                                  	;cmp	ax,'  ' ; 2020h
 30286                                  	cmp	word [es:ARENA.NAME+6],'  '
 30287                                  ifmX:	
 30288                                  	;pop	ax
 30289                                  	retn
 30290                                  
 30291                                  ; -----------------------------------------------------------------------------
 30292                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 30293                                  ; -----------------------------------------------------------------------------
 30294                                  ; ENTRY:    ES:0 should point to an MCB
 30295                                  ; EXIT:     None; MCB frozen
 30296                                  ; ERROR:    None
 30297                                  ; USES:     None
 30298                                  ; -----------------------------------------------------------------------------
 30299                                  
 30300                                  frezMCB:
 30301                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30302                                  	mov	word [es:ARENA.NAME+0],'FR'
 30303                                  	mov	word [es:ARENA.NAME+2],'OZ'
 30304                                  	mov	word [es:ARENA.NAME+4],'EN'
 30305                                  	mov	word [es:ARENA.NAME+6],'  '
 30306                                  	retn
 30307                                  
 30308                                  ; -----------------------------------------------------------------------------
 30309                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 30310                                  ; -----------------------------------------------------------------------------
 30311                                  ; Entry:  None
 30312                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 30313                                  ; Error:  None
 30314                                  ; Uses:   Flags
 30315                                  ; -----------------------------------------------------------------------------
 30316                                  
 30317                                  FreezeUM:
 30318                                  	push	ax
 30319                                  	push	cx
 30320                                  	push	dx
 30321                                  	push	es
 30322                                  
 30323                                  	;call	GetLoadUMB
 30324                                  	mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 30325                                  
 30326                                  	xor	ah,ah		; Zap ah, so al==ax
 30327                                  	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 30328                                  
 30329                                  	call	UmbHead		; Returns first UMB segment in AX
 30330                                  	mov	es,ax
 30331                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30332                                  
 30333                                  ; -----------------------------------------
 30334                                  ; FUM10--ES - Current MCB address
 30335                                  ;        CX - Current UMB number
 30336                                  ;        DX - UMB number to skip (load UMB)
 30337                                  ; -----------------------------------------
 30338                                  
 30339                                  fum10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30340                                  	jnz	short fum20
 30341                                  
 30342                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30343                                  fum20:	
 30344                                  	cmp	cx,dx		; If this is the load UMB, we don't want to
 30345                                  	je	short fum30	; freeze anything... so skip that section.
 30346                                  
 30347                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 30348                                  	or	word [es:ARENA.OWNER],0
 30349                                  	jnz	short fum30	; either.
 30350                                  
 30351                                  	call	frezMCB
 30352                                  fum30:	
 30353                                  	mov	al,[es:ARENA.SIGNATURE]
 30354                                  	cmp	al,arena_signature_end ; 'Z'
 30355                                  	je	short fumX	; 'Z' means this was the last MCB... that's it.
 30356                                  
 30357                                  	;NextMCB es, ax		; Go on forward.
 30358                                  	mov     ax,es
 30359                                  	;add	ax,[es:3]
 30360                                  	add     ax,[es:ARENA.SIZE]
 30361                                  	inc     ax
 30362                                  	mov     es,ax
 30363                                  	
 30364                                  	jmp	short fum10
 30365                                  
 30366                                  fumX:	pop	es
 30367                                  	pop	dx
 30368                                  	pop	cx
 30369                                  	pop	ax
 30370                                  	retn
 30371                                  
 30372                                  ; -----------------------------------------------------------------------------
 30373                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 30374                                  ; -----------------------------------------------------------------------------
 30375                                  ; ENTRY:    None
 30376                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 30377                                  ; ERROR:    None
 30378                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 30379                                  ; -----------------------------------------------------------------------------
 30380                                  
 30381                                  UmbTest:
 30382                                  	push	ax
 30383                                  	push	bx
 30384                                  	push	ds
 30385                                  	push	es
 30386                                  
 30387                                  	call	fm_link			; Link in UMBs (if not already linked)
 30388                                  	call	WalkMem			; Check to see if they're really linked
 30389                                  	pushf				; And remember what we found out
 30390                                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 30391                                  	popf				; And restore what we found out.
 30392                                  
 30393                                  	pop	es
 30394                                  	pop	ds
 30395                                  	pop	bx
 30396                                  	pop	ax
 30397                                  	retn
 30398                                  
 30399                                  ; -----------------------------------------------------------------------------
 30400                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 30401                                  ; -----------------------------------------------------------------------------
 30402                                  ; ENTRY:    None
 30403                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 30404                                  ; ERROR:    None
 30405                                  ; USES:     Flags
 30406                                  ; -----------------------------------------------------------------------------
 30407                                  
 30408                                  WalkMem:
 30409                                  	push	ax ; ?
 30410                                  	push	bx ; ?
 30411                                  	push	es ; ? no need to save contents of these registers ?
 30412                                  		   	
 30413                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30414                                  	int	21h
 30415                                  
 30416                                  	mov	ax,[es:bx-2]
 30417                                  	mov	es,ax
 30418                                  
 30419                                  ; ------------------------------
 30420                                  ; UM10: ES = Current MCB pointer
 30421                                  ; ------------------------------
 30422                                  
 30423                                  um10:	mov	al,[es:ARENA.SIGNATURE]
 30424                                  	cmp	al,arena_signature_end ;  'Z'
 30425                                  	je	short um20		; If signature == 'Z', hay no more.
 30426                                  
 30427                                  	;NextMCB es, bx			; Move to the next MCB
 30428                                  
 30429                                  	mov     bx,es
 30430                                  	;add	bx,[es:3]
 30431                                  	add     bx,[es:ARENA.SIZE]
 30432                                  	inc     bx
 30433                                  	mov     es,bx
 30434                                  		
 30435                                  	jmp	short um10		; And restart the loop.
 30436                                  um20:	
 30437                                  	mov	ax,es
 30438                                  
 30439                                  	cmp	ax,9FFFh		; This sets CF iff ax < 9FFF.
 30440                                  
 30441                                  	pop	es ; ?
 30442                                  	pop	bx ; ?
 30443                                  	pop	ax ; ?
 30444                                  	retn
 30445                                  
 30446                                  ; -----------------------------------------------------------------------------
 30447                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 30448                                  ; -----------------------------------------------------------------------------
 30449                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30450                                  ; EXIT:     None
 30451                                  ; ERROR:    None
 30452                                  ; USES:     AX, BX
 30453                                  ; -----------------------------------------------------------------------------
 30454                                  
 30455                                  hl_unlink:
 30456                                  	xor	bh,bh
 30457                                  
 30458                                  	;getdata bl,fm_umb		; Restore original link-state
 30459                                  	;
 30460                                  	;push	ds
 30461                                  	;push	cs
 30462                                  	;pop	ds
 30463                                  	;mov	bl,[fm_umb]
 30464                                  	;pop	ds
 30465                                  
 30466                                  	mov	bl,[cs:fm_umb]
 30467                                  
 30468                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30469                                  	int	21h
 30470                                  	retn
 30471                                  
 30472                                  ; ----------------------------------------------------------------------
 30473                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 30474                                  ; ----------------------------------------------------------------------
 30475                                  ; 09/04/2019 - Retro DOS v4.0
 30476                                  
 30477                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 30478                                  ;   Date:     May 14, 1992
 30479                                  
 30480                                  ;   Modification log:
 30481                                  ;
 30482                                  ;     DATE    WHO      DESCRIPTION
 30483                                  ;   --------  -------  --------------------------------------------------------
 30484                                  ;   05/14/92  t-richj  Original
 30485                                  ;   06/21/92  t-richj  Final revisions before check-in
 30486                                  
 30487                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 30488                                  
 30489                                  ; -----------------------------------------------------------------------------
 30490                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 30491                                  ; -----------------------------------------------------------------------------
 30492                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 30493                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 30494                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 30495                                  ; ERROR:  None
 30496                                  ; USES:   fInHigh (from highvar.inc), carry flag
 30497                                  ; -----------------------------------------------------------------------------
 30498                                  
 30499                                  UnHideUMBs:
 30500                                  	push	ax		; Save ax for what we're about to do
 30501                                  
 30502                                  ; -----------------------------------------------------------------------------
 30503                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 30504                                  ;    length of time. Those six constitute a check of whether or not we should
 30505                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 30506                                  ;    will destroy the current link-state and memory-allocation strategy after
 30507                                  ;    every command execution.
 30508                                  ; -----------------------------------------------------------------------------
 30509                                  
 30510                                  	;getdata al,fInHigh	; Get InHigh from data segment
 30511                                  	;
 30512                                  	;push	ds
 30513                                  	;push	cs
 30514                                  	;pop	ds
 30515                                  	;mov	al,[fInHigh]
 30516                                  	;pop	ds	
 30517                                  
 30518                                  	mov	al,[cs:fInHigh]
 30519                                  
 30520                                  	or	al,al
 30521                                  	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 30522                                  
 30523                                  	pop	ax		; then there's nothing to do here... so
 30524                                  	stc			; restore everything and return. Just like
 30525                                  	retn			; that.
 30526                                  uhu10:	
 30527                                  	call	linkumb		; Make sure UMBs are linked in.
 30528                                  	call	FreeUMBs
 30529                                  
 30530                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 30531                                  	;
 30532                                  	;push	es
 30533                                  	;push	cs
 30534                                  	;pop	es
 30535                                  	;mov	byte [es:fInHigh],0
 30536                                  	;pop	ds	
 30537                                  
 30538                                  	mov	byte [cs:fInHigh],0	
 30539                                  
 30540                                  	call	he_unlink	; Unlink UMBs
 30541                                  
 30542                                  	pop	ax
 30543                                  	; 12/12/2022
 30544                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 30545                                  	retn
 30546                                  
 30547                                  ; -----------------------------------------------------------------------------
 30548                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 30549                                  ; -----------------------------------------------------------------------------
 30550                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30551                                  ; EXIT:     None
 30552                                  ; ERROR:    None
 30553                                  ; USES:     AX, BX
 30554                                  ; -----------------------------------------------------------------------------
 30555                                  
 30556                                  he_unlink:
 30557                                  	xor	bh, bh
 30558                                  
 30559                                  	;getdata bl, fm_umb	; Restore original link-state
 30560                                  	mov	bl,[cs:fm_umb]	
 30561                                  
 30562                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30563                                  	int	21h
 30564                                  	retn
 30565                                  
 30566                                  ; -----------------------------------------------------------------------------
 30567                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 30568                                  ; -----------------------------------------------------------------------------
 30569                                  ; ENTRY:    None
 30570                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 30571                                  ; ERROR:    None (ignore CF)
 30572                                  ; USES:     Flags
 30573                                  ; -----------------------------------------------------------------------------
 30574                                  
 30575                                  FreeUMBs:
 30576                                  	push	ax
 30577                                  	push	es
 30578                                  
 30579                                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 30580                                  	jc	short fusX
 30581                                  
 30582                                  	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 30583                                  fus10:	
 30584                                  	call	isHideMCB	; Returns with ZF set if owner is 0
 30585                                  	jnz	short fus20
 30586                                  	call	freeMCB
 30587                                  fus20:	   
 30588                                  	mov	al,[es:ARENA.SIGNATURE]
 30589                                  	cmp	al,arena_signature_end ; 'Z'
 30590                                  	jz	short fusX	; That means this was the last MCB--that's it.
 30591                                  
 30592                                  	mov	ax,es
 30593                                  	add	ax,[es:ARENA.SIZE]
 30594                                  	inc	ax
 30595                                  	mov	es,ax		; Go on forward.
 30596                                  
 30597                                  	jmp	short fus10
 30598                                  fusX:	
 30599                                  	pop	es
 30600                                  	pop	ax
 30601                                  	retn
 30602                                  
 30603                                  ; -----------------------------------------------------------------------------
 30604                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 30605                                  ; -----------------------------------------------------------------------------
 30606                                  ; ENTRY:    ES:0 should point to an MCB
 30607                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 30608                                  ; ERROR:    None
 30609                                  ; USES:     Flags
 30610                                  ; -----------------------------------------------------------------------------
 30611                                  
 30612                                  isHideMCB:
 30613                                  	;push	ax
 30614                                  
 30615                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 30616                                  	jne	short ihm_x				; then check for HIDDEN
 30617                                  
 30618                                  	;mov	ax,[es:ARENA.NAME]
 30619                                  	;cmp	ax,'HI' ; 4948h
 30620                                  	cmp	word [es:ARENA.NAME+0],'HI'
 30621                                  	jne	short ihm_x
 30622                                  	;mov	ax,[es:ARENA.NAME+2]
 30623                                  	;cmp	ax,'DD' ; 4444h
 30624                                  	cmp	word [es:ARENA.NAME+2],'DD'
 30625                                  	jne	short ihm_x
 30626                                  	;mov	ax,[es:ARENA.NAME+4]
 30627                                  	;cmp	ax,'EN' ; 4E45h
 30628                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30629                                  	jne	short ihm_x
 30630                                  	;mov	ax,[es:ARENA.NAME+6]
 30631                                  	;cmp	ax,'  ' ; 2020h
 30632                                  	cmp	word [es:ARENA.NAME+6],'  '
 30633                                  ihm_x:	
 30634                                  	;pop	ax
 30635                                  	retn
 30636                                  
 30637                                  ; -----------------------------------------------------------------------------
 30638                                  ;*** freeMCB - marks as free the MCB at ES:0
 30639                                  ; -----------------------------------------------------------------------------
 30640                                  ; ENTRY:    ES:0 should point to an MCB
 30641                                  ; EXIT:     None; MCB free'd
 30642                                  ; ERROR:    None
 30643                                  ; USES:     AX
 30644                                  ; -----------------------------------------------------------------------------
 30645                                  
 30646                                  freeMCB:
 30647                                  	mov	word [es:ARENA.OWNER],0
 30648                                  	mov	ax,'  '
 30649                                  	mov	[es:ARENA.NAME+0],ax
 30650                                  	mov	[es:ARENA.NAME+2],ax
 30651                                  	mov	[es:ARENA.NAME+4],ax
 30652                                  	mov	[es:ARENA.NAME+6],ax
 30653                                  	retn
 30654                                  
 30655                                  ; -----------------------------------------------------------------------------
 30656                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 30657                                  ; -----------------------------------------------------------------------------
 30658                                  ; ENTRY:  Nothing
 30659                                  ; EXIT:   AX contains 0x9FFF for most systems
 30660                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 30661                                  ; USES:   Flags, AX
 30662                                  ; -----------------------------------------------------------------------------
 30663                                  
 30664                                  HeadUmb:
 30665                                  	; 13/05/2019
 30666                                  
 30667                                  	;push	si ; ?
 30668                                  	;push	ds ; ?
 30669                                  	;push	es
 30670                                  	;push	bx ; *
 30671                                  
 30672                                  	; 09/04/2019
 30673                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 30674                                  
 30675                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30676                                  	int	21h
 30677                                  			; DOS - 2+ internal - GET LIST OF LISTS
 30678                                  			; Return: ES:BX -> DOS list of lists
 30679                                  	;mov	ax,[es:8Ch]
 30680                                  	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 30681                                  	cmp	ax,0FFFFh
 30682                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 30683                                  
 30684                                  	;clc				; Else, it isn't.
 30685                                  	;jmp	short xhu_x
 30686                                  xhu_e:	
 30687                                  	;stc
 30688                                  	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 30689                                  xhu_x:	
 30690                                  	;pop	bx ; *
 30691                                  	;pop	es	
 30692                                  	;pop	ds ; ?
 30693                                  	;pop	si ; ?
 30694                                  	retn
 30695                                  
 30696                                  ; -----------------------------------------------------------------------------
 30697                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 30698                                  ; -----------------------------------------------------------------------------
 30699                                  ; ENTRY:    None
 30700                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 30701                                  ; ERROR:    None
 30702                                  ; USES:     AX, BX, fm_umb
 30703                                  ; -----------------------------------------------------------------------------
 30704                                  
 30705                                  linkumb:
 30706                                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 30707                                  	int	21h			; Current link-state is now in al
 30708                                  
 30709                                  	or	al,al			; BUGBUG: proper check?
 30710                                  	jnz	short lumbX		; Jumps if UMBs already linked in
 30711                                  
 30712                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30713                                  	mov	bx,1
 30714                                  	int	21h
 30715                                  lumbX:
 30716                                  	retn
 30717                                  
 30718                                  %endif
 30719                                  
 30720                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30721                                  ; (SYSINIT:2B5Fh)
 30722                                  
 30723                                  ; ----------------------------------------------------------------------
 30724                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 30725                                  ; ----------------------------------------------------------------------
 30726                                  ; 09/04/2019 - Retro DOS v4.0
 30727                                  
 30728                                  ;----------------------------------------------------------------------------
 30729                                  ;
 30730                                  ; procedure : InitDevLoad
 30731                                  ;
 30732                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 30733                                  ;			 = 1 indicates load in UMB:
 30734                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 30735                                  ;		                    = 1 indicates a DOS 5-style load
 30736                                  ;		DevSize  = Size of the device driver file in paras
 30737                                  ;
 30738                                  ;	Output : none
 30739                                  ;
 30740                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 30741                                  ;	Also sets up a header for the Device driver entry for mem utility
 30742                                  ;
 30743                                  ;----------------------------------------------------------------------------
 30744                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 30745                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 30746                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 30747                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 30748                                  ;----------------------------------------------------------------------------
 30749                                  
 30750                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30751                                  InitDevLoad:
 30752                                  	; 11/12/2022
 30753                                  	; ds = cs
 30754 000027DC 803E[CB1E]00            	cmp	byte [DeviceHi],0
 30755                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 30756                                  	;je	short InitForLo		; no, init for lo mem
 30757 000027E1 741F                    	je	short initforlo_x ; 09/04/2019
 30758                                  
 30759                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30760                                  ;	cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 30761                                  ;	je	short InitForConv
 30762                                  ;
 30763                                  ;; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 30764                                  ;; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 30765                                  ;; any areas left in upper-memory, except for elements in the load UMB...
 30766                                  ;; we then malloc space as per Dos-5 style, and mark as free any spaces which
 30767                                  ;; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 30768                                  ;; and UnHideUMBs later on marks all 8+HIDDEN as free.
 30769                                  ;
 30770                                  ;	call	ShrinkUMB		; Stop using the old device arena
 30771                                  ;
 30772                                  ;	call	HideUMBs		; Mark up the UM area as we see fit
 30773                                  ;	call	FreezeUM		; Hide everything BUT the load area
 30774                                  ;	call	GetUMBForDev		; And grab that load area as needed
 30775                                  ;	pushf
 30776                                  ;	call	UnFreeze		; Then unhide everything frozen
 30777                                  ;	popf
 30778                                  ;
 30779                                  ;	jc	short InitForLo		; (if carry, it's loading low)
 30780                                  ;
 30781                                  ;	jmp	short InitForHi
 30782                                  
 30783                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30784                                  	; (SYSINIT:2B67h)
 30785                                  InitForConv:
 30786                                  	; 11/12/2022
 30787                                  	; ds = cs
 30788 000027E3 E83700                  	call	SpaceInUMB		; Do we have space left in the
 30789                                  					;  current UMB ?
 30790 000027E6 7308                    	jnc	short InitForHi		; yes, we have
 30791 000027E8 E84D04                  	call	ShrinkUMB		; shrink the current UMB in use
 30792 000027EB E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 30793 000027EE 720D                    	jc	short InitForLo		; we didn't succeed, so load
 30794                                  					;  in low memory
 30795                                  InitForHi:
 30796                                  	; 11/12/2022
 30797                                  	; ds = cs
 30798                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 30799                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 30800                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 30801 000027F0 A1[C11E]                	mov	ax,[DevUMBFree]
 30802 000027F3 8B16[BD1E]              	mov	dx,[DevUMBAddr]
 30803 000027F7 0316[BF1E]              	add	dx,[DevUMBSize]
 30804 000027FB EB0C                    	jmp	short idl1
 30805                                  
 30806                                  InitForLo:
 30807                                  	; 11/12/2022
 30808                                  	; ds = cs
 30809                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 30810 000027FD C606[CB1E]00            	mov	byte [DeviceHi],0
 30811                                  initforlo_x:
 30812                                  	; 11/12/2022
 30813                                  	; ds = cs
 30814                                  					;  into UMB indicate that
 30815                                  					;  we are loading low
 30816                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 30817                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 30818 00002802 A1[E003]                	mov	ax,[memhi]
 30819 00002805 8B16[A302]              	mov	dx,[ALLOCLIM]
 30820                                  idl1:
 30821 00002809 E86C00                  	call	DevSetMark		; setup a sub-arena for DD
 30822                                  	; 11/12/2022
 30823                                  	; ds = cs
 30824                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 30825                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 30826                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 30827                                  	;mov	[cs:DevEntry+2],ax
 30828 0000280C A3[B01E]                	mov	[DevLoadAddr],ax
 30829 0000280F 8916[B21E]              	mov	[DevLoadEnd],dx
 30830 00002813 C706[B41E]0000          	mov	word [DevEntry],0
 30831 00002819 A3[B61E]                	mov	[DevEntry+2],ax
 30832 0000281C C3                      	retn
 30833                                  
 30834                                  ;----------------------------------------------------------------------------
 30835                                  ;
 30836                                  ; procedure : SpaceInUMB?
 30837                                  ;
 30838                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 30839                                  ;	Output : Carry set if no space in UMB
 30840                                  ;		 Carry clear if Space is available for the device in
 30841                                  ;		   current UMB
 30842                                  ;
 30843                                  ;----------------------------------------------------------------------------
 30844                                  
 30845                                  SpaceInUMB:
 30846                                  	; 11/12/2022
 30847                                  	; ds = cs
 30848                                  	;mov	ax,[cs:DevUMBSize]
 30849                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 30850                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 30851 0000281D A1[BF1E]                	mov	ax,[DevUMBSize]
 30852 00002820 0306[BD1E]              	add	ax,[DevUMBAddr]		; End of UMB
 30853 00002824 2B06[C11E]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 30854                                  	; 11/12/2022
 30855                                  	;or	ax,ax			; Nospace ?
 30856                                  	;jnz	short spcinumb1
 30857                                  	;stc
 30858                                  	;retn
 30859                                  	; 11/12/2022
 30860 00002828 83F801                  	cmp	ax,1
 30861 0000282B 7205                    	jb	short spcinumb2	; cf=1
 30862                                  spcinumb1:
 30863 0000282D 48                      	dec	ax			; space for sub-arena
 30864                                  	; 11/12/2022
 30865                                  	; ds = cs
 30866 0000282E 3B06[AE1E]              	cmp	ax,[DevSize]
 30867                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 30868                                  spcinumb2:
 30869 00002832 C3                      	retn
 30870                                  
 30871                                  ;----------------------------------------------------------------------------
 30872                                  ;
 30873                                  ; procedure : PrepareMark
 30874                                  ;
 30875                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 30876                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 30877                                  ;
 30878                                  ;----------------------------------------------------------------------------
 30879                                  
 30880                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30881                                  ;
 30882                                  ;PrepareMark:
 30883                                  ;	push	ds
 30884                                  ;	mov	ds,ax
 30885                                  ;	mov	word [ARENA.OWNER],8
 30886                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 30887                                  ;	pop	ds
 30888                                  ;
 30889                                  ;	inc	ax
 30890                                  ;	mov	[cs:DevUMBAddr],ax
 30891                                  ;	mov	[cs:DevUMBFree],ax
 30892                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 30893                                  ;	retn
 30894                                  
 30895                                  ;----------------------------------------------------------------------------
 30896                                  ;
 30897                                  ; procedure : GetUMBForDev
 30898                                  ;
 30899                                  ;	Input : DevSize
 30900                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 30901                                  ;		 the device.
 30902                                  ;		 If success carry clear
 30903                                  ;
 30904                                  ;	Allocates the biggest UMB for loading devices and updates
 30905                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 30906                                  ;	UMB.
 30907                                  ;
 30908                                  ;	This routine relies on the fact that all of the low memory
 30909                                  ;	is allocated, and any DOS alloc calls should return memory
 30910                                  ;	from the UMB pool.
 30911                                  ;
 30912                                  ;----------------------------------------------------------------------------
 30913                                  
 30914                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30915                                  	; (SYSINIT:2BC6h)
 30916                                  
 30917                                  GetUMBForDev:
 30918                                  	; 11/12/2022
 30919                                  	; ds = cs
 30920 00002833 BBFFFF                  	mov	bx,0FFFFh
 30921 00002836 B80048                  	mov	ax,4800h
 30922 00002839 CD21                    	int	21h
 30923                                  		; DOS - 2+ - ALLOCATE MEMORY
 30924                                  		; BX = number of 16-byte paragraphs desired
 30925                                  
 30926 0000283B 09DB                    	or	bx,bx
 30927 0000283D 742C                    	jz	short gufd_err
 30928                                  
 30929 0000283F 4B                      	dec	bx
 30930                                  	; 11/12/2022
 30931                                  	; ds = cs
 30932 00002840 391E[AE1E]              	cmp	[DevSize],bx
 30933                                  	;cmp	[cs:DevSize],bx
 30934 00002844 7725                    	ja	short gufd_err
 30935 00002846 43                      	inc	bx
 30936                                  
 30937 00002847 B80048                  	mov	ax,4800h
 30938 0000284A CD21                    	int	21h
 30939 0000284C 721D                    	jc	short gufd_err
 30940                                  
 30941                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30942                                  	;dec	ax
 30943                                  	;call	PrepareMark
 30944                                  	;
 30945                                  PrepareMark:
 30946 0000284E 1E                      	push	ds
 30947 0000284F 48                      	dec	ax
 30948 00002850 8ED8                    	mov	ds,ax
 30949 00002852 C70601000800            	mov	word [ARENA.OWNER],8
 30950 00002858 C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 30951 0000285E 40                      	inc	ax
 30952 0000285F 1F                      	pop	ds
 30953                                  	; 11/12/2022
 30954                                  	; ds = cs
 30955                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 30956                                  	;mov	[cs:DevUMBAddr],ax
 30957                                  	;mov	[cs:DevUMBFree],ax
 30958 00002860 891E[BF1E]              	mov	[DevUMBSize],bx		; update the UMB Variables
 30959 00002864 A3[BD1E]                	mov	[DevUMBAddr],ax
 30960 00002867 A3[C11E]                	mov	[DevUMBFree],ax
 30961                                  	;
 30962                                  	; 11/12/2022
 30963                                  	; cf=0
 30964                                  	;clc				; mark no error
 30965 0000286A C3                      	retn
 30966                                  gufd_err:
 30967 0000286B 31C0                    	xor	ax,ax ; 0
 30968                                  	; 11/12/2022
 30969                                  	; ds = cs
 30970                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 30971                                  	;mov	[cs:DevUMBAddr],ax
 30972                                  	;mov	[cs:DevUMBFree],ax
 30973 0000286D A3[BF1E]                	mov	[DevUMBSize],ax		; erase the previous values
 30974 00002870 A3[BD1E]                	mov	[DevUMBAddr],ax
 30975 00002873 A3[C11E]                	mov	[DevUMBFree],ax
 30976 00002876 F9                      	stc
 30977 00002877 C3                      	retn
 30978                                  
 30979                                  ;----------------------------------------------------------------------------
 30980                                  ;
 30981                                  ; procedure : DevSetMark
 30982                                  ;
 30983                                  ;	Input : AX - Free segment were device is going to be loaded
 30984                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 30985                                  ;
 30986                                  ;	Creates a sub-arena for the device driver
 30987                                  ;	puts 'D' marker in the sub-arena
 30988                                  ;	Put the owner of the sub-arena as (AX+1)
 30989                                  ;	Copies the file name into sub-arena name field
 30990                                  ;
 30991                                  ;	Size field of the sub-arena will be set only at succesful
 30992                                  ;	completion of Device load.
 30993                                  ;
 30994                                  ;----------------------------------------------------------------------------
 30995                                  
 30996                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30997                                  	; (SYSINIT:2C13h)
 30998                                  
 30999                                  DevSetMark:
 31000 00002878 06                      	push	es
 31001 00002879 57                      	push	di
 31002 0000287A 1E                      	push	ds
 31003 0000287B 56                      	push	si
 31004 0000287C 8EC0                    	mov	es,ax
 31005 0000287E 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 31006 00002884 40                      	inc	ax
 31007 00002885 26A30100                	mov	[es:devmark.seg],ax
 31008                                  
 31009                                  ;-------------- Copy file name
 31010                                  
 31011 00002889 50                      	push	ax			; save load addr
 31012 0000288A 2EC536[F803]            	lds	si,[cs:bpb_addr]	; command line is still there
 31013                                  
 31014 0000288F 89F7                    	mov	di,si
 31015 00002891 FC                      	cld
 31016                                  dsm_again:
 31017 00002892 AC                      	lodsb
 31018 00002893 3C3A                    	cmp	al,':'
 31019 00002895 7504                    	jne	short isit_slash
 31020 00002897 89F7                    	mov	di,si
 31021 00002899 EBF7                    	jmp	short dsm_again
 31022                                  isit_slash:
 31023 0000289B 3C5C                    	cmp	al, '\'
 31024 0000289D 7504                    	jne	short isit_null
 31025 0000289F 89F7                    	mov	di,si
 31026 000028A1 EBEF                    	jmp	short dsm_again
 31027                                  isit_null:
 31028 000028A3 08C0                    	or	al,al
 31029 000028A5 75EB                    	jnz	short dsm_again
 31030 000028A7 89FE                    	mov	si,di
 31031                                  
 31032 000028A9 BF0800                  	mov	di,devmark.filename ; 8
 31033 000028AC B90800                  	mov	cx,8			; maximum 8 characters
 31034                                  dsm_next_char:
 31035 000028AF AC                      	lodsb
 31036 000028B0 08C0                    	or	al, al
 31037 000028B2 7407                    	jz	short blankout
 31038 000028B4 3C2E                    	cmp	al, '.'
 31039 000028B6 7403                    	je	short blankout
 31040 000028B8 AA                      	stosb
 31041 000028B9 E2F4                    	loop	dsm_next_char
 31042                                  blankout:
 31043 000028BB E304                    	jcxz	dsm_exit
 31044 000028BD B020                    	mov	al, ' '
 31045 000028BF F3AA                    	rep	stosb			; blank out the rest
 31046                                  dsm_exit:
 31047 000028C1 58                      	pop	ax			; restore load addr
 31048 000028C2 5E                      	pop	si
 31049 000028C3 1F                      	pop	ds
 31050 000028C4 5F                      	pop	di
 31051 000028C5 07                      	pop	es
 31052 000028C6 C3                      	retn
 31053                                  
 31054                                  ;----------------------------------------------------------------------------
 31055                                  ;
 31056                                  ; procedure : SizeDevice
 31057                                  ;
 31058                                  ;	Input : ES:SI - points to device file to be sized
 31059                                  ;
 31060                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 31061                                  ;
 31062                                  ;	Calculates the size of the device file in paras and stores it
 31063                                  ;	in DevSize
 31064                                  ;
 31065                                  ;----------------------------------------------------------------------------
 31066                                  
 31067                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31068                                  SizeDevice:
 31069                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31070                                  	; 11/12/2022 ; *
 31071 000028C7 1E                      	push	ds ; *
 31072 000028C8 06                      	push	es
 31073 000028C9 1F                      	pop	ds
 31074 000028CA 89F2                    	mov	dx,si			; ds:dx -> file name
 31075 000028CC B8003D                  	mov	ax,3D00h		; open
 31076 000028CF CD21                    	int	21h
 31077 000028D1 7243                    	jc	short sd_err		; open failed
 31078                                  
 31079 000028D3 89C3                    	mov	bx,ax			; BX - file handle
 31080 000028D5 B80242                  	mov	ax,4202h		; seek
 31081 000028D8 31C9                    	xor	cx,cx
 31082 000028DA 89CA                    	mov	dx,cx			; to end of file
 31083 000028DC CD21                    	int	21h
 31084 000028DE 722F                    	jc	short sd_close		; did seek fail (impossible)
 31085 000028E0 83C00F                  	add	ax,15			; para convert
 31086 000028E3 83D200                  	adc	dx,0
 31087 000028E6 F7C2F0FF                	test	dx,0FFF0h		; size > 0ffff paras ?
 31088 000028EA 7409                    	jz	short szdev1		; no
 31089 000028EC 2EC706[AE1E]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 31090                                  					; assuming that we fail later
 31091 000028F3 EB1A                    	jmp	short sd_close
 31092                                  szdev1:
 31093 000028F5 B104                    	mov	cl,4			; convert it to paras
 31094 000028F7 D3E8                    	shr	ax,cl
 31095 000028F9 B10C                    	mov	cl,12
 31096 000028FB D3E2                    	shl	dx,cl
 31097 000028FD 09D0                    	or	ax,dx
 31098                                  	;
 31099                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31100 000028FF 2E3B06[CC1E]            	cmp     ax,[cs:DevSizeOption]
 31101                                  	;ja	short szdev2
 31102                                  	; 14/08/2023
 31103 00002904 7305                    	jnb	short szdev2
 31104                                  
 31105 00002906 2EA1[CC1E]              	mov     ax,[cs:DevSizeOption]
 31106                                  	; 12/12/2022
 31107 0000290A F8                      	clc
 31108                                  szdev2:
 31109 0000290B 2EA3[AE1E]              	mov	[cs:DevSize],ax		; save file size
 31110                                  
 31111                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31112                                  	; 12/12/2022
 31113                                  	; cf=0
 31114                                  	;clc
 31115                                  sd_close:
 31116 0000290F 9C                      	pushf				; let close not spoil our
 31117                                  					;  carry flag
 31118 00002910 B8003E                  	mov	ax,3E00h		; close
 31119 00002913 CD21                    	int	21h			; we are not checking for err
 31120 00002915 9D                      	popf
 31121                                  sd_err:
 31122                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31123                                  	; 11/12/2022 ; *
 31124 00002916 1F                      	pop     ds ; *
 31125 00002917 C3                      	retn
 31126                                  
 31127                                  ;----------------------------------------------------------------------------
 31128                                  ;
 31129                                  ; procedure : ExecDev
 31130                                  ;
 31131                                  ;	Input : ds:dx -> device to be executed
 31132                                  ;		DevLoadAddr - contains where device has to be loaded
 31133                                  ;
 31134                                  ;	Output : Carry if error
 31135                                  ;		 Carry clear if no error
 31136                                  ;
 31137                                  ;	Loads a device driver using the 4b03h function call
 31138                                  ;
 31139                                  ;----------------------------------------------------------------------------
 31140                                  
 31141                                  	; 01/11/2022
 31142                                  ExecDev:
 31143 00002918 2E8B1E[B01E]            	mov	bx,[cs:DevLoadAddr]
 31144 0000291D 2E891E[C71E]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 31145                                  					;  block for exec with
 31146                                  					;  Load address
 31147 00002922 2E891E[C91E]            	mov	[cs:DevExecReloc],bx
 31148 00002927 8CCB                    	mov	bx,cs
 31149 00002929 8EC3                    	mov	es,bx
 31150 0000292B BB[C71E]                	mov	bx,DevExecAddr		;es:bx points to parameters
 31151 0000292E B003                    	mov	al,3	; (load program only)
 31152 00002930 B44B                    	mov	ah,EXEC ; 4Bh
 31153 00002932 CD21                    	int	21h			;load in the device driver
 31154                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 31155                                  		; DS:DX -> ASCIZ filename
 31156                                  		; ES:BX -> parameter block
 31157                                  		; AL = subfunction 
 31158 00002934 C3                      	retn
 31159                                  
 31160                                  ;----------------------------------------------------------------------------
 31161                                  ;
 31162                                  ; procedure : RetFromUM
 31163                                  ;
 31164                                  ;	Input : None
 31165                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 31166                                  ;		 ConvLoad clear if did.
 31167                                  ;
 31168                                  ;	Prepares memory for more devices after returning from loading one
 31169                                  ;	using the DOS 6 options (/L:... etc).
 31170                                  ;
 31171                                  ;----------------------------------------------------------------------------
 31172                                  
 31173                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31174                                  ;RetFromUM:
 31175                                  ;	pushf
 31176                                  ;	mov	byte [cs:ConvLoad],1
 31177                                  ;	call	UnHideUMBs
 31178                                  ;	jc	short rfUM1		; Skip this if didn't HideUMBs
 31179                                  ;	mov	byte [cs:ConvLoad],0
 31180                                  ;rfUM1:	
 31181                                  ;	popf
 31182                                  ;	retn
 31183                                  
 31184                                  ;----------------------------------------------------------------------------
 31185                                  ;
 31186                                  ; procedure : RemoveNull
 31187                                  ;
 31188                                  ;	Input : ES:SI points to a null terminated string
 31189                                  ;
 31190                                  ;	Output : none
 31191                                  ;
 31192                                  ;	Replaces the null at the end of a string with blank
 31193                                  ;
 31194                                  ;----------------------------------------------------------------------------
 31195                                  
 31196                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31197                                  	; (SYSINIT:2CCEh)
 31198                                  RemoveNull:
 31199                                  	; 11/12/2022
 31200                                  	; ds = cs
 31201                                  rn_next:
 31202 00002935 268A1C                  	mov	bl,[es:si]
 31203 00002938 08DB                    	or	bl,bl			; null ?
 31204 0000293A 7403                    	jz	short rn_gotnull
 31205 0000293C 46                      	inc	si			; advance the pointer
 31206 0000293D EBF6                    	jmp	short rn_next
 31207                                  rn_gotnull:
 31208                                  	; 11/12/2022
 31209 0000293F 8A1E[E01E]              	mov	bl,[DevSavedDelim]
 31210                                  	;mov	bl,[cs:DevSavedDelim]
 31211 00002943 26881C                  	mov	[es:si],bl		; replace null with blank
 31212                                  	; 02/11/2022
 31213                                  ; 11/12/2022
 31214                                  rba_ok:		; 10/04/2019
 31215 00002946 C3                      	retn
 31216                                  
 31217                                  ;----------------------------------------------------------------------------
 31218                                  ;
 31219                                  ; procedure : RoundBreakAddr
 31220                                  ;
 31221                                  ;	Input : DevBrkAddr
 31222                                  ;	Output : DevBrkAddr
 31223                                  ;
 31224                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 31225                                  ;
 31226                                  ;----------------------------------------------------------------------------
 31227                                  
 31228                                  RoundBreakAddr:
 31229 00002947 2EA1[B81E]              	mov	ax,[cs:DevBrkAddr]
 31230 0000294B E872E7                  	call	ParaRound
 31231 0000294E 2E0106[BA1E]            	add	[cs:DevBrkAddr+2],ax
 31232 00002953 2EC706[B81E]0000        	mov	word [cs:DevBrkAddr],0
 31233 0000295A 2EA1[B21E]              	mov	ax,[cs:DevLoadEnd]
 31234 0000295E 2E3906[BA1E]            	cmp	[cs:DevBrkAddr+2],ax
 31235 00002963 76E1                    	jbe	short rba_ok
 31236 00002965 E96107                  	jmp	mem_err
 31237                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31238                                  	; 11/12/2022
 31239                                  ;rba_ok:
 31240                                  ;	retn
 31241                                  
 31242                                  ;----------------------------------------------------------------------------
 31243                                  ;
 31244                                  ; procedure : DevSetBreak
 31245                                  ;
 31246                                  ;	Input : DevBrkAddr
 31247                                  ;	Output : Carry set if Device returned Init failed
 31248                                  ;		 Else carry clear
 31249                                  ;
 31250                                  ;----------------------------------------------------------------------------
 31251                                  
 31252                                  DevSetBreak:
 31253 00002968 50                      	push	ax
 31254                                  
 31255 00002969 2EA1[BA1E]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 31256 0000296D 2E803E[3114]00          	cmp	byte [cs:multdeviceflag],0
 31257 00002973 750F                    	jne	short set_break_continue ;do not check it.
 31258 00002975 2E3B06[B01E]            	cmp	ax,[cs:DevLoadAddr]
 31259 0000297A 7508                    	jne	short set_break_continue ;if not same, then o.k.
 31260                                  
 31261                                  	;cmp	word [cs:DevBrkAddr],0
 31262                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 31263                                  	; 12/12/2022
 31264 0000297C 2E833E[B81E]01          	cmp	word [cs:DevBrkAddr],1
 31265 00002982 7204                    	jb	short break_failed
 31266                                  
 31267                                  set_break_continue:
 31268 00002984 E8C0FF                  	call	RoundBreakAddr
 31269                                  	; 12/12/2022
 31270 00002987 F8                      	clc
 31271                                  break_failed:
 31272 00002988 58                      	pop	ax
 31273                                  	;clc
 31274 00002989 C3                      	retn
 31275                                  
 31276                                  	; 12/12/2022
 31277                                  ;break_failed:
 31278                                  	;pop	ax
 31279                                  	;stc
 31280                                  	;retn
 31281                                  
 31282                                  ;----------------------------------------------------------------------------
 31283                                  ;
 31284                                  ; procedure : DevBreak
 31285                                  ;
 31286                                  ;	Input : DevLoadAddr & DevBrkAddr
 31287                                  ;	Output : none
 31288                                  ;
 31289                                  ;	Marks a succesful install of a device driver
 31290                                  ;	Sets device size field in sub-arena &
 31291                                  ;	Updates Free ptr in UMB or adjusts memhi
 31292                                  ;
 31293                                  ;----------------------------------------------------------------------------
 31294                                  
 31295                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31296                                  DevBreak:
 31297                                  	;push	ds ; 11/12/2022
 31298                                  
 31299                                  	; 11/12/2022
 31300 0000298A 0E                      	push	cs
 31301 0000298B 1F                      	pop	ds
 31302                                  	;mov	ax,[cs:DevLoadAddr]
 31303                                  	;mov	bx,[cs:DevBrkAddr+2]
 31304 0000298C A1[B01E]                	mov	ax,[DevLoadAddr]
 31305 0000298F 8B1E[BA1E]              	mov	bx,[DevBrkAddr+2]
 31306                                  	; 11/12/2022
 31307 00002993 1E                      	push	ds
 31308                                  
 31309 00002994 48                      	dec	ax			; seg of sub-arena
 31310 00002995 8ED8                    	mov	ds,ax
 31311 00002997 40                      	inc	ax			; Back to Device segment
 31312 00002998 29D8                    	sub	ax,bx
 31313 0000299A F7D8                    	neg	ax			; size of device in paras
 31314 0000299C A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 31315                                  	
 31316                                  	; 11/12/2022
 31317 0000299F 1F                      	pop	ds
 31318                                  	; ds = cs
 31319                                   	
 31320 000029A0 803E[CB1E]00            	cmp	byte [DeviceHi],0
 31321                                  	;cmp	byte [cs:DeviceHi],0
 31322 000029A5 7405                    	je	short db_lo
 31323                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 31324                                  	;jmp	short db_exit
 31325                                  	; 11/12/2022
 31326 000029A7 891E[C11E]              	mov	[DevUMBFree],bx
 31327 000029AB C3                      	retn	
 31328                                  db_lo:
 31329                                  	; 11/12/2022
 31330                                  	; ds = cs
 31331                                  	;mov	[cs:memhi],bx
 31332                                  	;mov	word [cs:memlo],0
 31333 000029AC 891E[E003]              	mov	[memhi],bx
 31334 000029B0 C706[DE03]0000          	mov	word [memlo],0 ; 18/12/2022
 31335                                  db_exit:
 31336                                  	;pop	ds ; 11/12/2022
 31337 000029B6 C3                      	retn
 31338                                  
 31339                                  ; 10/04/2019 - Retro DOS v4.0
 31340                                  
 31341                                  ;----------------------------------------------------------------------------
 31342                                  ;
 31343                                  ; procedure : ParseSize
 31344                                  ;
 31345                                  ;	Parses the command line for SIZE= command
 31346                                  ;
 31347                                  ;	ES:SI = command line to parsed
 31348                                  ;
 31349                                  ;	returns ptr to command line after SIZE= option in ES:SI
 31350                                  ;	updates the DevSizeOption variable with value supplied
 31351                                  ;	in SIZE=option
 31352                                  ;	Returns carry if the SIZE option was invalid
 31353                                  ;
 31354                                  ;----------------------------------------------------------------------------
 31355                                  
 31356                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31357                                  	; (SYSINIT:2D5Ah)
 31358                                  ParseSize:
 31359                                  	;push	bx
 31360                                  	;mov	bx,si
 31361                                  
 31362                                  	; 11/12/2022
 31363                                  	; ds = cs
 31364                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 31365                                  	;mov	[cs:DevCmdLine],si
 31366                                  	;mov	[cs:DevCmdLine+2],es
 31367 000029B7 C706[CC1E]0000          	mov	word [DevSizeOption],0 ; init the value
 31368 000029BD 8936[DC1E]              	mov	[DevCmdLine],si
 31369 000029C1 8C06[DE1E]              	mov	[DevCmdLine+2],es	
 31370 000029C5 E82800                  	call	SkipDelim
 31371 000029C8 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 31372 000029CD 751F                    	jne	short ps_no_size
 31373 000029CF 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 31374 000029D5 7517                    	jne	short ps_no_size
 31375 000029D7 268A4404                	mov	al,[es:si+4]
 31376 000029DB E86706                  	call	delim
 31377 000029DE 750E                    	jne	short ps_no_size
 31378 000029E0 83C605                  	add	si,5
 31379 000029E3 E81500                  	call	GetHexNum
 31380 000029E6 7207                    	jc	short ps_err
 31381                                  	; 11/12/2022
 31382                                  	; ds = cs
 31383                                  	;mov	[cs:DevSizeOption],ax
 31384 000029E8 A3[CC1E]                	mov	[DevSizeOption],ax
 31385 000029EB E80200                  	call	SkipDelim
 31386                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31387                                  	;mov	bx,si
 31388                                  ps_no_size:	
 31389                                  	;mov	si,bx
 31390                                  	;pop	bx
 31391 000029EE F8                      	clc	; cf=0
 31392                                  	;retn
 31393                                  	; 11/12/2022
 31394                                  ps_err:		; cf=1
 31395                                  sd_ret:		; cf=?
 31396 000029EF C3                      	retn
 31397                                  ;ps_err:
 31398                                  	; 02/11/2022
 31399                                  	;pop	bx
 31400                                  	;stc
 31401                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31402                                  	; 11/12/2022
 31403                                  	; cf=1
 31404                                  	;stc
 31405                                  	; 11/12/2022
 31406                                  ;sd_ret: 
 31407                                  	; 22/07/2023
 31408                                  	; 12/04/2019
 31409                                  	;retn
 31410                                  
 31411                                  ; 12/04/2019 - Retro DOS v4.0
 31412                                  
 31413                                  ;----------------------------------------------------------------------------
 31414                                  ;
 31415                                  ; procedure : SkipDelim
 31416                                  ;
 31417                                  ;	Skips delimiters in the string pointed to by ES:SI
 31418                                  ;	Returns ptr to first non-delimiter character in ES:SI
 31419                                  ;
 31420                                  ;----------------------------------------------------------------------------
 31421                                  	
 31422                                  	; 01/11/2022
 31423                                  SkipDelim:
 31424                                  sd_next_char:
 31425 000029F0 268A04                  	mov	al,[es:si]
 31426 000029F3 E84F06                  	call	delim
 31427 000029F6 75F7                    	jnz	short sd_ret
 31428 000029F8 46                      	inc	si
 31429 000029F9 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 31430                                  	; 11/12/2022
 31431                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31432                                  ;sd_ret:
 31433                                  	;retn
 31434                                  
 31435                                  ;----------------------------------------------------------------------------
 31436                                  ;
 31437                                  ; procedure : GetHexNum
 31438                                  ;
 31439                                  ;	Converts an ascii string terminated by a delimiter into binary.
 31440                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 31441                                  ;
 31442                                  ;	Returns in AX the number number of paras equivalent to the
 31443                                  ;	hex number of bytes specified by the hexadecimal string.
 31444                                  ;
 31445                                  ;	Returns carry in case it encountered a non-hex character or
 31446                                  ;	if it encountered crlf
 31447                                  ;
 31448                                  ;----------------------------------------------------------------------------
 31449                                  
 31450                                  ; 13/05/2019
 31451                                  
 31452                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31453                                  	; (SYSINIT:2DA5h)
 31454                                  GetHexNum:
 31455 000029FB 31C0                    	xor	ax,ax
 31456 000029FD 31D2                    	xor	dx,dx
 31457                                  ghn_next:
 31458 000029FF 268A1C                  	mov	bl,[es:si]
 31459 00002A02 80FB0D                  	cmp	bl,cr  ; 0Dh
 31460 00002A05 7436                    	je	short ghn_err
 31461 00002A07 80FB0A                  	cmp	bl,lf  ; 0Ah
 31462 00002A0A 7431                    	je	short ghn_err
 31463 00002A0C 50                      	push	ax
 31464 00002A0D 88D8                    	mov	al,bl
 31465 00002A0F E83306                  	call	delim
 31466 00002A12 58                      	pop	ax
 31467                                  	; 04/01/2023
 31468 00002A13 B90400                  	mov	cx, 4
 31469 00002A16 7410                    	jz	short ghn_into_paras
 31470 00002A18 E82400                  	call	GetNibble
 31471                                  	;jc	short ghn_err
 31472                                  	; 11/12/2022
 31473 00002A1B 7221                    	jc	short ghn_ret ; cf=1
 31474                                  	; 04/01/2023
 31475                                  	;mov	cx,4
 31476                                  ghn_shift1:
 31477 00002A1D D1E0                    	shl	ax,1
 31478 00002A1F D1D2                    	rcl	dx,1
 31479 00002A21 E2FA                    	loop	ghn_shift1
 31480 00002A23 08D8                    	or	al,bl
 31481 00002A25 46                      	inc	si
 31482 00002A26 EBD7                    	jmp	short ghn_next
 31483                                  ghn_into_paras:
 31484 00002A28 83C00F                  	add	ax,15
 31485 00002A2B 83D200                  	adc	dx,0
 31486 00002A2E F7C2F0FF                	test	dx,0FFF0h
 31487 00002A32 7509                    	jnz	short ghn_err
 31488                                  	; 04/01/2023
 31489                                  	;mov	cx,4
 31490                                  ghn_shift2:
 31491 00002A34 F8                      	clc
 31492 00002A35 D1DA                    	rcr	dx,1
 31493 00002A37 D1D8                    	rcr	ax,1
 31494 00002A39 E2F9                    	loop	ghn_shift2
 31495 00002A3B F8                      	clc
 31496 00002A3C C3                      	retn
 31497                                  	; 11/12/2022
 31498                                  ghn_err:
 31499                                  gnib_err:
 31500 00002A3D F9                      	stc
 31501                                  ghn_ret:
 31502                                  gnib_ret:
 31503 00002A3E C3                      	retn
 31504                                  
 31505                                  ;----------------------------------------------------------------------------
 31506                                  ;
 31507                                  ; procedure : GetNibble
 31508                                  ;
 31509                                  ;	Convert one nibble (hex digit) in BL into binary
 31510                                  ;
 31511                                  ;	Retruns binary value in BL
 31512                                  ;
 31513                                  ;	Returns carry if BL contains non-hex digit
 31514                                  ;
 31515                                  ;----------------------------------------------------------------------------
 31516                                  
 31517                                  GetNibble:
 31518 00002A3F 80FB30                  	cmp	bl,'0'
 31519                                  	;jb	short gnib_err
 31520                                  	; 11/12/2022
 31521 00002A42 72FA                    	jb	short gnib_ret ; cf=1
 31522 00002A44 80FB39                  	cmp	bl,'9'
 31523 00002A47 7704                    	ja	short is_it_hex
 31524 00002A49 80EB30                  	sub	bl,'0'		; clc
 31525 00002A4C C3                      	retn
 31526                                  is_it_hex:
 31527 00002A4D 80FB41                  	cmp	bl,'A'
 31528                                  	;jb	short gnib_err
 31529                                  	; 11/12/2022
 31530 00002A50 72EC                    	jb	short gnib_ret ; cf=1
 31531 00002A52 80FB46                  	cmp	bl,'F'
 31532 00002A55 77E6                    	ja	short gnib_err ; 11/12/2022
 31533 00002A57 80EB37                  	sub	bl,'A'- 10	; clc
 31534 00002A5A C3                      	retn
 31535                                  	; 11/12/2022
 31536                                  ;gnib_err:
 31537                                  ;	stc
 31538                                  ;gnib_ret:
 31539                                  ;	retn
 31540                                  
 31541                                  ;============================================================================
 31542                                  
 31543                                  ; 12/04/2019 - Retro DOS v4.0
 31544                                  
 31545                                  ; umb.inc (MSDOS 6.0, 1991)
 31546                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 31547                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 31548                                  
 31549                                  XMM_REQUEST_UMB	equ 10h
 31550                                  XMM_RELEASE_UMB	equ 11h
 31551                                  
 31552                                  ;----------------------------------------------------------------------------
 31553                                  ;
 31554                                  ; procedure : AllocUMB
 31555                                  ;
 31556                                  ;	Allocate all UMBs and link it to DOS arena chain
 31557                                  ;
 31558                                  ;----------------------------------------------------------------------------
 31559                                  
 31560                                  AllocUMB:
 31561                                  	; 31/12/2022
 31562                                  	; ds = cs
 31563 00002A5B E81000                  	call	InitAllocUMB		; link in the first UMB
 31564 00002A5E 720D                    	jc	short au_exit		; quit on error
 31565                                  au_next:
 31566 00002A60 E83900                  	call	umb_allocate		; allocate
 31567 00002A63 7205                    	jc	short au_coalesce
 31568 00002A65 E85000                  	call	umb_insert		; & insert till no UMBs
 31569 00002A68 EBF6                    	jmp	short au_next
 31570                                  au_coalesce:
 31571 00002A6A E80901                  	call	umb_coalesce		; coalesce all UMBs
 31572                                  au_exit:
 31573                                  	; 31/12/2022
 31574                                  	; ds = cs
 31575 00002A6D C3                      	retn
 31576                                  
 31577                                  ;----------------------------------------------------------------------------
 31578                                  ;
 31579                                  ; procedure : InitAllocUMB
 31580                                  ;
 31581                                  ;----------------------------------------------------------------------------
 31582                                  
 31583                                  InitAllocUMB:
 31584                                  	; 31/12/2022
 31585                                  	; ds = cs
 31586 00002A6E E8AFDF                  	call	IsXMSLoaded
 31587 00002A71 7527                    	jnz	short iau_err		; quit on no XMS driver
 31588 00002A73 B452                    	mov	ah,52h
 31589 00002A75 CD21                    	int	21h			; get DOS DATA seg
 31590                                  	; 31/12/2022
 31591                                  	; ds = cs
 31592                                  	;mov	[cs:DevDOSData],es	; & save it for later
 31593 00002A77 8C06[DA1E]              	mov	[DevDOSData],es		; & save it for later
 31594 00002A7B B81043                  	mov	ax,4310h
 31595 00002A7E CD2F                    	int	2Fh
 31596                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 31597                                  	;mov	[cs:DevXMSAddr+2],es
 31598 00002A80 891E[C31E]              	mov	[DevXMSAddr],bx		; get XMS driver address
 31599 00002A84 8C06[C51E]              	mov	[DevXMSAddr+2],es	
 31600                                  	; 31/12/2022
 31601 00002A88 803E[D91E]00            	cmp	byte [FirstUMBLinked],0 
 31602                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 31603                                  	;jne	short ia_1		; quit if we already did it
 31604                                  	; 12/12/2022
 31605 00002A8D 770A                    	ja	short ia_1 ; cf=0
 31606 00002A8F E83201                  	call	LinkFirstUMB		; else link the first UMB
 31607                                  	;jc	short iau_err
 31608                                  	; 12/12/2022
 31609 00002A92 7207                    	jc	short iau_err2  ; cf=1
 31610                                  	; 31/12/2022
 31611                                  	; ds = cs
 31612 00002A94 C606[D91E]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31613                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31614                                  ia_1:
 31615                                  	; 12/12/2022
 31616                                  	; cf=0
 31617                                  	;clc
 31618 00002A99 C3                      	retn
 31619                                  iau_err:
 31620 00002A9A F9                      	stc
 31621                                  iau_err2:
 31622 00002A9B C3                      	retn
 31623                                  
 31624                                  ;-------------------------------------------------------------------------
 31625                                  ;
 31626                                  ; Procedure Name	: umb_allocate
 31627                                  ;
 31628                                  ; Inputs		: DS = data
 31629                                  ;
 31630                                  ; Outputs		: if UMB available
 31631                                  ;				Allocates the largest available UMB and 
 31632                                  ;			  	BX = segment of allocated block
 31633                                  ;				DX = size of allocated block
 31634                                  ;				NC
 31635                                  ;			  else 
 31636                                  ;				CY
 31637                                  ;
 31638                                  ; Uses			: BX, DX
 31639                                  ;
 31640                                  ;-------------------------------------------------------------------------
 31641                                  
 31642                                  umb_allocate:
 31643                                  	; 31/12/2022
 31644                                  	; ds = cs
 31645 00002A9C 50                      	push	ax
 31646 00002A9D B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31647 00002A9F BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 31648                                  					;   possible
 31649                                  	; 31/12/2022
 31650 00002AA2 FF1E[C31E]              	call	far [DevXMSAddr]
 31651                                  	;call	far [cs:DevXMSAddr]
 31652                                  					; dx now contains the size of
 31653                                  					; the largest UMB
 31654 00002AA6 09D2                    	or	dx,dx
 31655 00002AA8 740B                    	jz	short ua_err
 31656                                  	
 31657 00002AAA B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31658                                  
 31659                                  	; 31/12/2022
 31660 00002AAC FF1E[C31E]              	call	far [DevXMSAddr]
 31661                                  	;call	far [cs:DevXMSAddr]
 31662                                  
 31663 00002AB0 83F801                  	cmp	ax,1			; Q: was the reqst successful
 31664                                  	;jne	short ua_err		; N: error
 31665                                  	; 14/08/2023
 31666 00002AB3 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 31667                                  ua_err:
 31668 00002AB5 F9                      	stc	
 31669                                  
 31670                                  	;clc
 31671                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31672                                  	; 12/12/2022
 31673                                  	; cf=0
 31674                                  	;clc 
 31675                                  ua_done:
 31676 00002AB6 58                      	pop	ax
 31677 00002AB7 C3                      	retn
 31678                                  	; 14/08/2023
 31679                                  ;ua_err:
 31680                                  	;stc
 31681                                  	;jmp	short ua_done
 31682                                  
 31683                                  ;---------------------------------------------------------------------------
 31684                                  ;
 31685                                  ; Procedure Name	: umb_insert
 31686                                  ;
 31687                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 31688                                  ;			: BX = seg address of UMB to be linked in
 31689                                  ;			: DX = size of UMB to be linked in paras
 31690                                  ;			; DS = data
 31691                                  ;
 31692                                  ; Outputs		: links the UMB into the arena chain
 31693                                  ;
 31694                                  ; Uses			: AX, CX, ES, DX, BX
 31695                                  ;
 31696                                  ;---------------------------------------------------------------------------
 31697                                  
 31698                                  umb_insert:
 31699 00002AB8 1E                      	push	ds
 31700                                  
 31701                                  	; 31/12/2022
 31702                                  	; ds = cs
 31703                                  
 31704                                  	;mov	ds,[cs:DevDOSData]
 31705 00002AB9 8E1E[DA1E]              	mov	ds,[DevDOSData] ; 31/12/2022 
 31706                                  	;mov	ds,[8Ch]
 31707 00002ABD 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 31708 00002AC1 8CD8                    	mov	ax,ds
 31709 00002AC3 8EC0                    	mov	es,ax
 31710                                  ui_next:
 31711 00002AC5 39D8                    	cmp	ax,bx			; Q: is current block above
 31712                                  					;    new block
 31713 00002AC7 770F                    	ja	short ui_insert		; Y: insert it
 31714                                  					; Q: is current block the
 31715                                  					;    last
 31716 00002AC9 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31717 00002ACF 745C                    	je	short ui_append		; Y: append new block to chain
 31718                                  					; N: get next block
 31719 00002AD1 8ED8                    	mov	ds,ax			; M005
 31720                                  	;call	get_next		; ax = es = next block
 31721 00002AD3 E8E200                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 31722 00002AD6 EBED                    	jmp	short ui_next
 31723                                  
 31724                                  ui_insert:
 31725 00002AD8 8CD9                    	mov	cx,ds			; ds = previous arena
 31726 00002ADA 41                      	inc	cx			; top of previous block
 31727                                  
 31728 00002ADB 29D9                    	sub	cx,bx
 31729 00002ADD F7D9                    	neg	cx			; cx = size of used block
 31730                                  	;mov	byte [0],'M'
 31731 00002ADF C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31732                                  	;mov	word [1],8
 31733 00002AE4 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 31734                                  	;mov	[3],cx
 31735 00002AEA 890E0300                	mov	[ARENA.SIZE],cx	
 31736                                  	;mov	word [8],4353h ; 'SC'
 31737 00002AEE C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 31738                                  
 31739                                  ; prepare the arena at start of new block
 31740                                  
 31741 00002AF4 8EC3                    	mov	es,bx
 31742 00002AF6 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31743 00002AFC 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 31744                                  					; mark as free
 31745 00002B03 83EA02                  	sub	dx,2			; make room for arena at
 31746                                  					; start & end of new block
 31747 00002B06 2689160300              	mov	[es:ARENA.SIZE],dx
 31748                                  
 31749                                  ; prepare arena at end of new block
 31750                                  	
 31751 00002B0B 01D3                    	add	bx,dx
 31752 00002B0D 43                      	inc	bx
 31753 00002B0E 8EC3                    	mov	es,bx			; es=arena at top of new block
 31754 00002B10 43                      	inc	bx			; bx=top of new block
 31755                                  
 31756                                  					; ax contains arena just above
 31757                                  					; this block
 31758 00002B11 29D8                    	sub	ax,bx			; ax = size of used block
 31759                                  	
 31760 00002B13 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31761 00002B19 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31762 00002B20 26A30300                	mov	[es:ARENA.SIZE],ax	
 31763 00002B24 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 31764                                  
 31765 00002B2B EB47                    	jmp	short ui_done
 31766                                  
 31767                                  ui_append:
 31768                                  					; es = arena of last block	
 31769 00002B2D 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 31770 00002B32 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 31771                                  					; going to rsrv on top of this 
 31772                                  					; block for the next arena.
 31773                                  	; 13/05/2019
 31774 00002B38 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31775                                  
 31776 00002B3E 89C1                    	mov	cx,ax			; cx=top of prev block-1
 31777 00002B40 40                      	inc	ax
 31778 00002B41 29D8                    	sub	ax,bx			; ax=top of prev block - 
 31779                                  					;    seg. address of new block
 31780 00002B43 F7D8                    	neg	ax
 31781                                  
 31782 00002B45 8EC1                    	mov	es,cx			; ds = arena of unused block
 31783                                  
 31784 00002B47 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31785 00002B4D 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31786 00002B54 26A30300                	mov	[es:ARENA.SIZE],ax	
 31787 00002B58 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 31788                                  
 31789                                  ; prepare the arena at start of new block
 31790 00002B5F 8EC3                    	mov	es,bx
 31791 00002B61 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 31792 00002B67 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 31793                                  					; mark as free
 31794 00002B6E 4A                      	dec	dx			; make room for arena
 31795 00002B6F 2689160300              	mov	[es:ARENA.SIZE],dx	
 31796                                  ui_done:
 31797                                  uc_done: ; 31/12/2022 ; *!
 31798 00002B74 1F                      	pop	ds
 31799                                  	; ds = cs ; 31/12/2022
 31800                                  ;uc_done:	; 18/12/2022
 31801 00002B75 C3                      	retn
 31802                                  
 31803                                  ; 13/04/2019 - Retro DOS v4.0
 31804                                  
 31805                                  ;----------------------------------------------------------------------------
 31806                                  ;
 31807                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 31808                                  ;
 31809                                  ;	Coalesce adds the block following the argument to the argument block,
 31810                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 31811                                  ;	some callers (such as $setblock) use it to join a free block to it's
 31812                                  ;	preceeding allocated block.
 31813                                  ;
 31814                                  ;	EXIT	'C' clear if OK
 31815                                  ;		  (ds) unchanged, this block updated
 31816                                  ;		  (ax) = address of next block, IFF not at end
 31817                                  ;		'C' set if arena trashed
 31818                                  ;	USES	cx, di, ds, es
 31819                                  ;
 31820                                  ;----------------------------------------------------------------------------
 31821                                  
 31822                                  umb_coalesce:
 31823                                  	; 31/12/2022
 31824                                  	; ds = cs
 31825 00002B76 1E                      	push	ds ; *!
 31826                                  
 31827 00002B77 31FF                    	xor	di, di
 31828                                  
 31829                                  	;mov	es,[cs:DevDOSData]
 31830                                  	; 31/12/2022
 31831 00002B79 8E06[DA1E]              	mov	es,[DevDOSData]
 31832 00002B7D 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 31833                                  uc_nextfree:
 31834 00002B82 8CC0                    	mov	ax,es
 31835 00002B84 8ED8                    	mov	ds,ax
 31836                                  	;cmp	[es:1],di
 31837 00002B86 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 31838 00002B8B 7407                    	je	short uc_again		; Y: try to coalesce with next block
 31839                                  					; N: get next arena
 31840 00002B8D E82100                  	call	get_next		; es, ax = next arena
 31841 00002B90 72E2                    	jc	short uc_done	; *!
 31842 00002B92 EBEE                    	jmp	short uc_nextfree
 31843                                  uc_again:
 31844 00002B94 E81A00                  	call	get_next		; ES, AX <- next block
 31845 00002B97 72DB                    	jc	short uc_done	; *!
 31846                                  uc_check:
 31847 00002B99 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 31848 00002B9E 75E2                    	jne	short uc_nextfree	; N: get next free arena
 31849                                  					; Y: coalesce
 31850 00002BA0 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 31851 00002BA5 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 31852                                  	;add	[3],cx
 31853 00002BA6 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 31854 00002BAA 268A0D                  	mov     cl,[es:di]              ; move up signature
 31855 00002BAD 880D                    	mov     [di],cl
 31856 00002BAF EBE3                    	jmp     short uc_again		; try again
 31857                                  
 31858                                  	; 18/12/2022
 31859                                  ;uc_done:
 31860                                  	;retn
 31861                                  
 31862                                  ;----------------------------------------------------------------------------
 31863                                  ;
 31864                                  ;**	get_next - Find Next item in Arena
 31865                                  ;
 31866                                  ;	ENTRY	dS - pointer to block head
 31867                                  ;	EXIT	AX,ES - pointers to next head
 31868                                  ;		'C' set if arena damaged
 31869                                  ;
 31870                                  ;----------------------------------------------------------------------------
 31871                                  
 31872                                  	; 01/11/2022
 31873                                  get_next:
 31874 00002BB1 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 31875 00002BB6 740A                    	je	short gn_err
 31876                                  _get_next_:
 31877 00002BB8 8CD8                    	mov     ax,ds                   ; ax=current block
 31878 00002BBA 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 31879 00002BBE 40                      	inc     ax                      ; remember that header!
 31880 00002BBF 8EC0                    	mov	es,ax
 31881                                  	;clc
 31882                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31883                                  	; 11/12/2022
 31884                                  	; cf=0
 31885                                  	;clc
 31886 00002BC1 C3                      	retn
 31887                                  gn_err:
 31888 00002BC2 F9                      	stc
 31889                                  	; 11/12/2022	
 31890                                  lfu_err:	 ; cf=1
 31891 00002BC3 C3                      	retn
 31892                                  
 31893                                  ;----------------------------------------------------------------------------
 31894                                  ;
 31895                                  ; procedure : LinkFirstUMB
 31896                                  ;
 31897                                  ;----------------------------------------------------------------------------
 31898                                  
 31899                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31900                                  	; (SYSINIT:2F81h)
 31901                                  LinkFirstUMB:
 31902                                  	; 31/12/2022
 31903                                  	; ds = cs
 31904 00002BC4 E8D5FE                  	call	umb_allocate
 31905 00002BC7 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 31906                                  
 31907                                  ; bx = segment of allocated UMB
 31908                                  ; dx = size of UMB
 31909                                  
 31910                                  	; 31/12/2022
 31911                                  	; ds = cs
 31912                                  
 31913 00002BC9 CD12                    	int	12h			; ax = size of memory
 31914 00002BCB B106                    	mov	cl,6
 31915 00002BCD D3E0                    	shl	ax,cl			; ax = size in paragraphs
 31916                                  
 31917 00002BCF 89C1                    	mov	cx,ax			; cx = size in paras
 31918 00002BD1 29D8                    	sub	ax,bx			; ax = - size of unused block
 31919                                  
 31920 00002BD3 F7D8                    	neg	ax
 31921                                  
 31922 00002BD5 83E901                  	sub	cx,1			; cx = first umb_arena
 31923 00002BD8 8EC1                    	mov	es,cx			; es = first umb_arena
 31924                                  	
 31925 00002BDA 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31926 00002BE0 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31927                                  					
 31928 00002BE7 26A30300                	mov	[es:ARENA.SIZE],ax	
 31929 00002BEB 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 31930                                  
 31931                                  ; put in the arena for the first UMB
 31932                                  
 31933 00002BF2 8EC3                    	mov	es,bx			; es has first free umb seg
 31934 00002BF4 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31935 00002BFA 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 31936                                  					; mark as free 
 31937 00002C01 4A                      	dec	dx			; make room for arena
 31938 00002C02 2689160300              	mov	[es:ARENA.SIZE],dx	
 31939                                  
 31940                                  	;mov	es,[cs:DevDOSData]
 31941                                  	; 31/12/2022
 31942 00002C07 8E06[DA1E]              	mov	es,[DevDOSData] ; ds = cs
 31943 00002C0B BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 31944 00002C0E 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 31945                                  					;  data segment with the arena
 31946                                  					;  just below Top of Mem
 31947                                  
 31948                                  ; we must now scan the arena chain and update the size of the last arena
 31949                                  
 31950 00002C11 BF2400                  	mov	di,DOS_ARENA ; 24h
 31951 00002C14 268E05                  	mov	es,[es:di]		; es = start arena
 31952 00002C17 31FF                    	xor	di,di
 31953                                  ;scan_next
 31954                                  ; 09/12/2022
 31955                                  scannext:
 31956 00002C19 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 31957 00002C1D 740C                    	je	short got_last
 31958                                  	
 31959 00002C1F 8CC0                    	mov	ax,es
 31960 00002C21 2603060300              	add	ax,[es:ARENA.SIZE]
 31961 00002C26 40                      	inc	ax
 31962 00002C27 8EC0                    	mov	es,ax
 31963                                  	;jmp	short scan_next
 31964                                  	; 09/12/2022
 31965 00002C29 EBEE                    	jmp	short scannext
 31966                                  got_last:
 31967 00002C2B 26832E030001            	sub	word [es:ARENA.SIZE],1
 31968 00002C31 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31969                                  	;clc
 31970                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31971                                  	; 11/12/2022
 31972                                  	; cf=0
 31973                                  	;clc
 31974 00002C37 C3                      	retn
 31975                                  
 31976                                  ; 11/12/2022
 31977                                  ;;lfu_err:
 31978                                  ;	;stc
 31979                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31980                                  ;	; 11/12/2022
 31981                                  ;	; cf=1
 31982                                  ;	;stc
 31983                                  ;	retn
 31984                                  
 31985                                  ;----------------------------------------------------------------------------
 31986                                  ;
 31987                                  ; procedure : ShrinkUMB
 31988                                  ;
 31989                                  ;	Shrinks the current UMB in use, so that the unused portions
 31990                                  ;	of the UMB is given back to the DOS free mem pool
 31991                                  ;
 31992                                  ;----------------------------------------------------------------------------
 31993                                  
 31994                                  ShrinkUMB:
 31995                                  	; 12/12/2022
 31996                                  	; ds = cs
 31997 00002C38 833E[BD1E]00            	cmp	word [DevUMBAddr],0
 31998                                  	;cmp	word [cs:DevUMBAddr],0
 31999 00002C3D 7421                    	je	short su_exit
 32000 00002C3F 06                      	push	es
 32001 00002C40 53                      	push	bx
 32002                                  	; 12/12/2022
 32003                                  	;mov	bx,[cs:DevUMBFree]
 32004                                  	;sub	bx,[cs:DevUMBAddr]
 32005                                  	;mov	es,[cs:DevUMBAddr]
 32006 00002C41 8B1E[C11E]              	mov	bx,[DevUMBFree]
 32007 00002C45 2B1E[BD1E]              	sub	bx,[DevUMBAddr]
 32008 00002C49 8E06[BD1E]              	mov	es,[DevUMBAddr]
 32009                                  	
 32010 00002C4D B8004A                  	mov	ax,4A00h
 32011 00002C50 CD21                    	int	21h
 32012                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 32013                                  		; ES = segment address of block to change
 32014                                  		; BX = new size in paragraphs
 32015 00002C52 8CC0                    	mov	ax,es
 32016 00002C54 48                      	dec	ax
 32017 00002C55 8EC0                    	mov	es,ax
 32018 00002C57 26C70601000800          	mov	word [es:ARENA.OWNER],8
 32019 00002C5E 5B                      	pop	bx
 32020 00002C5F 07                      	pop	es
 32021                                  su_exit:
 32022 00002C60 C3                      	retn
 32023                                  
 32024                                  ;----------------------------------------------------------------------------
 32025                                  ;
 32026                                  ; procedure : UnlinkUMB
 32027                                  ;
 32028                                  ;	Unlinks the UMBs from the DOS arena chain
 32029                                  ;
 32030                                  ;----------------------------------------------------------------------------
 32031                                  
 32032                                  UnlinkUMB:
 32033                                  	; 12/12/2022
 32034                                  	; ds = cs
 32035 00002C61 1E                      	push	ds
 32036 00002C62 06                      	push	es
 32037                                  	; 12/12/2022
 32038 00002C63 803E[D91E]00            	cmp	byte [FirstUMBLinked],0
 32039                                  	;cmp	byte [cs:FirstUMBLinked],0
 32040 00002C68 7420                    	je	short ulu_x		; nothing to unlink
 32041                                  	; 12/12/2022
 32042 00002C6A 8E06[DA1E]              	mov	es,[DevDOSData]
 32043                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 32044 00002C6E 268E1E2400              	mov	ds,[es:DOS_ARENA]
 32045 00002C73 268B3E8C00              	mov	di,[es:UMB_ARENA]
 32046                                  ulu_next:
 32047 00002C78 E836FF                  	call	get_next
 32048 00002C7B 720D                    	jc	short ulu_x
 32049 00002C7D 39C7                    	cmp	di,ax			; is the next one UMB ?
 32050 00002C7F 7404                    	je	short ulu_found
 32051 00002C81 8ED8                    	mov	ds,ax
 32052 00002C83 EBF3                    	jmp	short ulu_next
 32053                                  ulu_found:
 32054                                  	;mov	byte [0],'Z'
 32055 00002C85 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32056                                  ulu_x:
 32057 00002C8A 07                      	pop	es
 32058 00002C8B 1F                      	pop	ds
 32059 00002C8C C3                      	retn
 32060                                  
 32061                                  ; ----------------------------------------------------------------------
 32062                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 32063                                  ; ----------------------------------------------------------------------
 32064                                  ; 14/04/2019 - Retro DOS v4.0
 32065                                  
 32066                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 32067                                  ;
 32068                                  ; Summary:
 32069                                  ;
 32070                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 32071                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 32072                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 32073                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 32074                                  ;   and/or config.inc for the full list.
 32075                                  ;
 32076                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 32077                                  ;   configuration support. blockname is either MENU, which contains one
 32078                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 32079                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 32080                                  ;   INCLUDE allows the current block to name another block for inclusion
 32081                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 32082                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 32083                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 32084                                  ;
 32085                                  ; Example:
 32086                                  ;
 32087                                  ;   [menu]
 32088                                  ;   menuitem=misc,Miscellaneous
 32089                                  ;   menuitem=network,Network Configuration
 32090                                  ;   menudefault=network,15
 32091                                  ;
 32092                                  ;   [network]
 32093                                  ;   include misc
 32094                                  ;   device=foo
 32095                                  ;
 32096                                  ;   [misc]
 32097                                  ;   device=bar
 32098                                  ;   include alternate
 32099                                  ;
 32100                                  ;   [alternate]
 32101                                  ;   device=tar
 32102                                  ;
 32103                                  ;
 32104                                  ;   When the menu is displayed
 32105                                  ;
 32106                                  ;    1. Miscellaneous
 32107                                  ;    2. Network Configuration
 32108                                  ;
 32109                                  ;   #2 is highlighted as the default option, and will be automatically
 32110                                  ;   selected after 15 seconds. It will invoke the following lines in the
 32111                                  ;   following order:
 32112                                  ;
 32113                                  ;       DEVICE=BAR
 32114                                  ;       DEVICE=TAR
 32115                                  ;       DEVICE=FOO
 32116                                  ;
 32117                                  
 32118                                  ;MULTI_CONFIG equ 1
 32119                                  
 32120                                  ; the following depend on the positions of the various letters in switchlist
 32121                                  
 32122                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 32123                                  
 32124                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 32125                                  flagdrive	equ 00001000b ; 8 
 32126                                  flagcyln	equ 00010000b ; 16
 32127                                  flagseclim	equ 00100000b ; 32
 32128                                  flagheads	equ 01000000b ; 64
 32129                                  flagff		equ 10000000b ; 128
 32130                                  
 32131                                  ;----------------------------------------------------------------------------
 32132                                  ; 19/04/2019 - Retro DOS v4.0
 32133                                  
 32134                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 32135                                  
 32136                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32137                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 32138                                  
 32139 00002C8D 00                      insert_blank:	db 	0
 32140                                  
 32141                                  ;----------------------------------------------------------------------------
 32142                                  ;
 32143                                  ; procedure : setparms
 32144                                  ;
 32145                                  ; the following set of routines is used to parse the drivparm = command in
 32146                                  ; the config.sys file to change the default drive parameters.
 32147                                  ;
 32148                                  ;----------------------------------------------------------------------------
 32149                                  
 32150                                  setparms:
 32151 00002C8E 1E                      	push	ds
 32152 00002C8F 50                      	push	ax
 32153 00002C90 53                      	push	bx
 32154 00002C91 51                      	push	cx
 32155 00002C92 52                      	push	dx
 32156                                  
 32157 00002C93 0E                      	push	cs
 32158 00002C94 1F                      	pop	ds
 32159                                  
 32160 00002C95 31DB                    	xor	bx,bx
 32161 00002C97 8A1E[5636]              	mov	bl,[drive]
 32162                                  	; 18/12/2022
 32163 00002C9B 43                      	inc	bx
 32164                                  	;inc	bl			; get it correct for ioctl call
 32165                                  					; (1=a,2=b...)
 32166 00002C9C BA[2E35]                	mov	dx,deviceparameters
 32167                                  	;mov	ah,IOCTL ; 44h
 32168                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 32169                                  	; 14/08/2023
 32170 00002C9F B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 32171                                  	;mov	ch,RAWIO ; 8
 32172                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 32173                                  	; 14/08/2023
 32174 00002CA2 B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 32175 00002CA5 CD21                    	int	21h
 32176                                  
 32177                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32178                                  ;
 32179                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 32180                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 32181                                  ;	; 21/10/2022
 32182                                  ;	mov	ax,DOSBIODATASEG ; 0070h	
 32183                                  ;	mov	ds,ax			; set Bios_Data segment
 32184                                  ;
 32185                                  ;	test	word [cs:switches],flagec35 ; 4
 32186                                  ;	jz	short not_ec35
 32187                                  
 32188                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32189                                  	;test	word [switches],flagec35 ; 4
 32190                                  	; 12/12/2022
 32191 00002CA7 F606[5736]04            	test	byte [switches],flagec35 ; 4
 32192 00002CAC 7411                    	jz	short eot_ok
 32193                                  
 32194                                  	;mov	cl,[cs:drive]		; which drive was this for?
 32195                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32196 00002CAE 8A0E[5636]              	mov	cl,[drive]
 32197 00002CB2 B87000                  	mov	ax,DOSBIODATASEG ; 0070h	
 32198 00002CB5 8ED8                    	mov	ds,ax	
 32199                                  
 32200 00002CB7 B001                    	mov	al,1			; assume drive 0
 32201 00002CB9 D2E0                    	shl	al,cl			; set proper bit depending on drive
 32202                                  	;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 32203 00002CBB 0806[3105]              	or	[ec35_flag],al		; set the bit in the permanent flags
 32204                                  
 32205                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32206                                  ;
 32207                                  ;not_ec35:
 32208                                  ;;	Now adjust the BIOS's EOT variable if our new drive has more
 32209                                  ;;	sectors per track than any old ones.
 32210                                  ;
 32211                                  ;	;mov	al,[cs:deviceparameters+20]
 32212                                  ;	mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32213                                  ;	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 32214                                  ;	cmp	al,[EOT]
 32215                                  ;	jbe	short eot_ok
 32216                                  ;	mov	[EOT],al
 32217                                  
 32218                                  eot_ok:
 32219 00002CBF 5A                      	pop	dx			; fix up all the registers
 32220 00002CC0 59                      	pop	cx
 32221 00002CC1 5B                      	pop	bx
 32222 00002CC2 58                      	pop	ax
 32223 00002CC3 1F                      	pop	ds ; 13/05/2019
 32224 00002CC4 C3                      	retn
 32225                                  
 32226                                  ;----------------------------------------------------------------------------
 32227                                  ;
 32228                                  ; procedure : diddleback
 32229                                  ;
 32230                                  ; replace default values for further drivparm commands
 32231                                  ;
 32232                                  ;----------------------------------------------------------------------------
 32233                                  
 32234                                  diddleback:
 32235 00002CC5 1E                      	push	ds
 32236 00002CC6 0E                      	push	cs
 32237 00002CC7 1F                      	pop	ds
 32238                                  	;mov	word [deviceparameters+4],80
 32239 00002CC8 C706[3235]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32240                                  	;mov	byte [deviceparameters+1],2
 32241 00002CCE C606[2F35]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 32242                                  	;mov	word [deviceparameters+2],0
 32243 00002CD3 C706[3035]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 32244 00002CD9 C706[5736]0000          	mov	word [switches],0	    ; zero all switches
 32245 00002CDF 1F                      	pop	ds
 32246 00002CE0 C3                      	retn
 32247                                  
 32248                                  ; 04/01/2023
 32249                                  %if 0
 32250                                  
 32251                                  ; 15/04/2019 - Retro DOS v4.0
 32252                                  
 32253                                  ;----------------------------------------------------------------------------
 32254                                  ;
 32255                                  ; procedure : parseline
 32256                                  ;
 32257                                  ; entry point is parseline. al contains the first character in command line.
 32258                                  ;
 32259                                  ;----------------------------------------------------------------------------
 32260                                  
 32261                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32262                                  	; (SYSINIT:30ACh)
 32263                                  
 32264                                  parseline:
 32265                                  	push	ds
 32266                                  
 32267                                  	push	cs
 32268                                  	pop	ds
 32269                                  
 32270                                  nextswtch:
 32271                                  	cmp	al,cr			; carriage return?
 32272                                  	je	short done_line
 32273                                  	cmp	al,lf			; linefeed?
 32274                                  	je	short put_back		; put it back and done
 32275                                  
 32276                                  ; anything less or equal to a space is ignored.
 32277                                  
 32278                                  	cmp	al,' '                  ; space?
 32279                                  	jbe	short getnext		; skip over space
 32280                                  	cmp	al,'/'
 32281                                  	je	short getparm
 32282                                  	stc				; mark error invalid-character-in-input
 32283                                  	jmp	short exitpl
 32284                                  
 32285                                  getparm:
 32286                                  	call	check_switch
 32287                                  	mov	[switches],bx		; save switches read so far
 32288                                  	jc	short swterr
 32289                                  getnext:
 32290                                  	call	getchr
 32291                                  	jc	short done_line
 32292                                  	jmp	short nextswtch
 32293                                  swterr:
 32294                                  	jmp	short exitpl		; exit if error
 32295                                  
 32296                                  done_line:
 32297                                  	; 12/12/2022
 32298                                  	test	byte [switches],flagdrive ; 8
 32299                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32300                                  	jnz	short okay
 32301                                  	stc				; mark error no-drive-specified
 32302                                  	jmp	short exitpl
 32303                                  
 32304                                  okay:
 32305                                  	mov	ax,[switches]
 32306                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32307                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32308                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32309                                  	;clc			    ; everything is fine
 32310                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32311                                  	; 12/12/2022
 32312                                  	; cf=0
 32313                                  	;clc
 32314                                  	call	setdeviceparameters
 32315                                  exitpl:
 32316                                  	pop	ds
 32317                                  	retn
 32318                                  put_back:
 32319                                  	inc	word [count]		; one more char to scan
 32320                                  	dec	word [chrptr]		; back up over linefeed
 32321                                  	jmp	short done_line
 32322                                  
 32323                                  %endif
 32324                                  
 32325                                  ;----------------------------------------------------------------------------
 32326                                  ;
 32327                                  ; procedure : check_switch
 32328                                  ;
 32329                                  ; processes a switch in the input. it ensures that the switch is valid, and
 32330                                  ; gets the number, if any required, following the switch. the switch and the
 32331                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 32332                                  ; error.
 32333                                  ;
 32334                                  ;----------------------------------------------------------------------------
 32335                                  
 32336                                  check_switch:
 32337 00002CE1 E81BFA                  	call	getchr
 32338                                  	;jc	short err_check
 32339 00002CE4 724E                    	jc	short err_chk
 32340 00002CE6 24DF                            and     al,0DFh                 ; convert it to upper case
 32341 00002CE8 3C41                    	cmp	al,'A'
 32342                                  	;jb	short err_check
 32343 00002CEA 7248                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 32344 00002CEC 3C5A                    	cmp	al,'Z'
 32345 00002CEE 7743                    	ja	short err_check
 32346                                  
 32347 00002CF0 06                      	push	es
 32348                                  
 32349 00002CF1 0E                      	push	cs
 32350 00002CF2 07                      	pop	es
 32351                                  
 32352 00002CF3 8A0E[EA36]              	mov	cl,[switchlist]		; get number of valid switches
 32353 00002CF7 B500                    	mov	ch,0
 32354 00002CF9 BF[EB36]                	mov	di,1+switchlist		; point to string of valid switches
 32355 00002CFC F2AE                    	repne	scasb
 32356                                  
 32357 00002CFE 07                      	pop	es
 32358 00002CFF 7532                    	jnz	short err_check
 32359                                  
 32360 00002D01 B80100                  	mov	ax,1
 32361 00002D04 D3E0                    	shl	ax,cl			; set bit to indicate switch
 32362 00002D06 8B1E[5736]              	mov	bx,[switches]		; get switches so far
 32363 00002D0A 09C3                    	or	bx,ax			; save this with other switches
 32364 00002D0C 89C1                    	mov	cx,ax
 32365                                  	; 12/12/2022
 32366 00002D0E A8F8                    	test	al,switchnum ; 0F8h
 32367                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 32368 00002D10 741E                    	jz	short done_swtch
 32369                                  
 32370 00002D12 E8EAF9                  	call	getchr
 32371 00002D15 721A                    	jc	short err_swtch
 32372                                  
 32373 00002D17 3C3A                    	cmp	al,':'
 32374 00002D19 7516                    	jne	short err_swtch
 32375                                  
 32376 00002D1B E8E1F9                  	call	getchr
 32377 00002D1E 53                      	push	bx			; preserve switches
 32378                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32379                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 32380                                  	; 12/12/2022
 32381                                  	; ds = cs
 32382 00002D1F C606[2A03]20            	mov	byte [sepchr],' '
 32383 00002D24 E8D803                  	call	getnum
 32384                                  	;mov	byte [cs:sepchr],0
 32385                                  	; 12/12/2022
 32386 00002D27 C606[2A03]00            	mov	byte [sepchr],0
 32387 00002D2C 5B                      	pop	bx			; restore switches
 32388                                  
 32389                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 32390                                  ; not check for carry set here. if there is an error, it will be detected
 32391                                  ; further on (hopefully).
 32392                                  
 32393 00002D2D E80500                  	call	process_num
 32394                                  
 32395                                  done_swtch:
 32396                                  	;clc
 32397                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32398                                  	; 12/12/2022
 32399                                  	; cf=0
 32400                                  	;clc
 32401 00002D30 C3                      	retn
 32402                                  
 32403                                  err_swtch:
 32404 00002D31 31CB                    	xor	bx,cx			; remove this switch from the records
 32405                                  err_check:
 32406 00002D33 F9                      	stc
 32407                                  err_chk:
 32408 00002D34 C3                      	retn
 32409                                  
 32410                                  ;----------------------------------------------------------------------------
 32411                                  ;
 32412                                  ; procedure : process_num
 32413                                  ;
 32414                                  ; this routine takes the switch just input, and the number following (if any),
 32415                                  ; and sets the value in the appropriate variable. if the number input is zero
 32416                                  ; then it does nothing - it assumes the default value that is present in the
 32417                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 32418                                  ;
 32419                                  ;----------------------------------------------------------------------------
 32420                                  
 32421                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32422                                  	; (SYSINIT:3156h)
 32423                                  process_num:
 32424 00002D35 850E[5736]              	test	[switches],cx		; if this switch has been done before,
 32425 00002D39 752B                    	jnz	short done_ret		; ignore this one.
 32426                                  	; 12/12/2022
 32427 00002D3B F6C108                  	test	cl,flagdrive ; 8
 32428                                  	;test	cx,flagdrive ; 8
 32429 00002D3E 7404                    	jz	short try_f
 32430 00002D40 A2[5636]                	mov	byte [drive],al
 32431                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32432                                  	;jmp	short done_ret
 32433                                  	; 12/12/2022
 32434                                  	; cf=0
 32435 00002D43 C3                      	retn	; 13/05/2019
 32436                                  try_f:
 32437                                  	; 12/12/2022
 32438 00002D44 F6C180                  	test	cl,flagff ; 80h
 32439                                  	;test	cx,flagff ; 80h
 32440 00002D47 7404                    	jz	short try_t
 32441                                  
 32442                                  ; ensure that we do not get bogus form factors that are not supported
 32443                                  
 32444                                  	;mov	[deviceparameters+1],al
 32445 00002D49 A2[2F35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 32446                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32447                                  	;jmp	short done_ret
 32448                                  	; 12/12/2022
 32449                                  	; cf=0
 32450 00002D4C C3                      	retn	; 13/05/2019
 32451                                  try_t:
 32452 00002D4D 09C0                    	or	ax,ax
 32453 00002D4F 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 32454                                  	; 12/12/2022
 32455 00002D51 F6C110                  	test	cl,flagcyln ; 10h
 32456                                  	;test	cx,flagcyln ; 10h
 32457 00002D54 7404                    	jz	short try_s
 32458                                  
 32459                                  	;mov	[deviceparameters+4],ax
 32460 00002D56 A3[3235]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 32461                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32462                                  	;jmp	short done_ret
 32463                                  	; 12/12/2022
 32464                                  	; cf=0
 32465 00002D59 C3                      	retn	; 13/05/2019
 32466                                  try_s:
 32467                                  	; 12/12/2022
 32468 00002D5A F6C120                  	test	cl,flagseclim ; 20h
 32469                                  	;test	cx,flagseclim ; 20h
 32470 00002D5D 7404                    	jz	short try_h
 32471 00002D5F A3[5436]                	mov	[slim],ax
 32472                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32473                                  	;jmp	short done_ret
 32474                                  	; 12/12/2022
 32475                                  	; cf=0
 32476 00002D62 C3                      	retn	; 13/05/2019
 32477                                  
 32478                                  ; must be for number of heads
 32479                                  
 32480                                  try_h:
 32481 00002D63 A3[5236]                	mov	[hlim],ax
 32482                                  done_ret:
 32483                                  	;clc
 32484                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32485                                  	; 12/12/2022
 32486                                  	; cf=0 (test instruction resets cf)
 32487                                  	;clc
 32488 00002D66 C3                      	retn
 32489                                  
 32490                                  ; 04/01/2023 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32491                                  %if 1
 32492                                  
 32493                                  ; 15/04/2019 - Retro DOS v4.0
 32494                                  
 32495                                  ;----------------------------------------------------------------------------
 32496                                  ;
 32497                                  ; procedure : parseline
 32498                                  ;
 32499                                  ; entry point is parseline. al contains the first character in command line.
 32500                                  ;
 32501                                  ;----------------------------------------------------------------------------
 32502                                  
 32503                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32504                                  	; (SYSINIT:30ACh)
 32505                                  parseline:
 32506                                  	; 04/01/2023
 32507                                  	; ds = cs ; *
 32508                                  
 32509                                  	;push	ds ; *
 32510                                  
 32511                                  	;push	cs ; *
 32512                                  	;pop	ds ; *
 32513                                  
 32514                                  nextswtch:
 32515 00002D67 3C0D                    	cmp	al,cr			; carriage return?
 32516 00002D69 741C                    	je	short done_line
 32517 00002D6B 3C0A                    	cmp	al,lf			; linefeed?
 32518 00002D6D 7421                    	je	short put_back		; put it back and done
 32519                                  
 32520                                  ; anything less or equal to a space is ignored.
 32521                                  
 32522 00002D6F 3C20                    	cmp	al,' '                  ; space?
 32523 00002D71 760F                    	jbe	short getnext		; skip over space
 32524 00002D73 3C2F                    	cmp	al,'/'
 32525 00002D75 7402                    	je	short getparm
 32526 00002D77 F9                      	stc				; mark error invalid-character-in-input
 32527                                  	;jmp	short exitpl
 32528                                  	; 04/01/2023
 32529                                  swterr:
 32530 00002D78 C3                      	retn
 32531                                  
 32532                                  getparm:
 32533 00002D79 E865FF                  	call	check_switch
 32534 00002D7C 891E[5736]              	mov	[switches],bx		; save switches read so far
 32535 00002D80 72F6                    	jc	short swterr
 32536                                  getnext:
 32537 00002D82 E87AF9                  	call	getchr
 32538                                  	;jc	short done_line
 32539                                  	;jmp	short nextswtch
 32540                                  	; 04/01/2023
 32541 00002D85 73E0                    	jnc	short nextswtch
 32542                                  ;swterr:
 32543                                  	;jmp	short exitpl		; exit if error
 32544                                  
 32545                                  done_line:
 32546                                  	; 12/12/2022
 32547 00002D87 F606[5736]08            	test	byte [switches],flagdrive ; 8
 32548                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32549 00002D8C 750C                    	jnz	short okay
 32550 00002D8E F9                      	stc				; mark error no-drive-specified
 32551                                  	;jmp	short exitpl
 32552                                  	; 04/01/2023
 32553 00002D8F C3                      	retn
 32554                                  
 32555                                  ;exitpl:
 32556                                  	; 04/01/2023
 32557                                  	; ds = cs
 32558                                  	;;pop	ds ; *
 32559                                  	;retn
 32560                                  
 32561                                  put_back:
 32562 00002D90 FF06[D203]              	inc	word [count]		; one more char to scan
 32563 00002D94 FF0E[D603]              	dec	word [chrptr]		; back up over linefeed
 32564 00002D98 EBED                    	jmp	short done_line
 32565                                  
 32566                                  okay:
 32567 00002D9A A1[5736]                	mov	ax,[switches]
 32568 00002D9D 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32569 00002DA0 A3[3035]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32570 00002DA3 C706[5435]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32571                                  	;clc			    ; everything is fine
 32572                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32573                                  	; 12/12/2022
 32574                                  	; cf=0
 32575                                  	;clc
 32576                                  	;call	setdeviceparameters
 32577                                  	; 04/01/2023
 32578                                  	;jmp	short setdeviceparameters
 32579                                  
 32580                                  %endif
 32581                                  
 32582                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 32583                                  
 32584                                  ;----------------------------------------------------------------------------
 32585                                  ;
 32586                                  ; procedure : setdeviceparameters
 32587                                  ;
 32588                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 32589                                  ; system based on the form factor. it is assumed that the bpbs for the
 32590                                  ; various form factors are present in the bpbtable. for hard files,
 32591                                  ; the recommended bpb is the same as the bpb on the drive.
 32592                                  ; no attempt is made to preserve registers since we are going to jump to
 32593                                  ; sysinit straight after this routine.
 32594                                  ;
 32595                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 32596                                  ;	  we always return no carry
 32597                                  ;
 32598                                  ;	note:  there is a routine by the same name in msdioctl.asm
 32599                                  ;
 32600                                  ;----------------------------------------------------------------------------
 32601                                  
 32602                                  ; 15/04/2019 - Retro DOS v4.0
 32603                                  
 32604                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32605                                  setdeviceparameters:
 32606                                  	; 04/01/2023
 32607                                  	; ds = cs
 32608                                  	
 32609 00002DA9 06                      	push	es
 32610                                  
 32611 00002DAA 0E                      	push	cs
 32612 00002DAB 07                      	pop	es
 32613                                  
 32614 00002DAC 31DB                    	xor	bx,bx
 32615 00002DAE 8A1E[2F35]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 32616 00002DB2 80FB00                  	cmp	bl,DEV_5INCH ; 0
 32617 00002DB5 7506                    	jne	short got_80
 32618                                  
 32619 00002DB7 C706[3235]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32620                                  							; 48 tpi=40 cyl
 32621                                  got_80:
 32622 00002DBD D1E3                    	shl	bx,1			; get index into bpb table
 32623 00002DBF 8BB7[D636]              	mov	si,[bpbtable+bx]	; get address of bpb
 32624                                  
 32625                                  	;mov	di,deviceparameters+7	
 32626                                  	; 02/11/2022
 32627 00002DC3 BF[3535]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 32628 00002DC6 B91F00                  	mov	cx,A_BPB.size ; 31
 32629 00002DC9 FC                      	cld
 32630                                  	;repe	movsb
 32631                                  	; 02/11/2022
 32632 00002DCA F3A4                    	rep	movsb
 32633                                  
 32634 00002DCC 07                      	pop	es
 32635                                  
 32636                                  	; 12/12/2022
 32637 00002DCD F606[5736]20            	test	byte [switches],flagseclim ; 20h
 32638                                  	;test	word [switches],flagseclim ; 20h
 32639 00002DD2 7406                    	jz	short see_heads
 32640                                  
 32641 00002DD4 A1[5436]                	mov	ax,[slim]
 32642                                  	;mov	[deviceparameters+20],ax
 32643 00002DD7 A3[4235]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 32644                                  
 32645                                  see_heads:
 32646                                  	; 12/12/2022
 32647 00002DDA F606[5736]40            	test	byte [switches],flagheads ; 40h
 32648                                  	;test	word [switches],flagheads ; 40h
 32649 00002DDF 7406                    	jz	short heads_not_altered
 32650                                  
 32651 00002DE1 A1[5236]                	mov	ax,[hlim]
 32652                                  	;mov	[deviceparameters+22],ax	
 32653 00002DE4 A3[4435]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 32654                                  
 32655                                  heads_not_altered:
 32656                                  
 32657                                  ; set up correct media descriptor byte and sectors/cluster
 32658                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 32659                                  
 32660                                  	;mov	byte [deviceparameters+9],2
 32661                                  	; 02/11/2022
 32662                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 32663                                  	; 04/01/2023
 32664 00002DE7 B80200                  	mov	ax,2	
 32665 00002DEA A2[3735]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 32666                                  
 32667 00002DED B3F0                    	mov	bl,0F0h			; get default mediabyte
 32668                                  
 32669                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 32670                                  
 32671                                  	;mov	bh,[deviceparameters+17]
 32672                                  	; 02/11/2022
 32673 00002DEF 8A3E[3F35]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 32674                                  
 32675                                  	; 04/01/2023
 32676                                  	; ax = 2
 32677 00002DF3 3906[4435]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 32678                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 32679 00002DF7 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 32680                                  
 32681 00002DF9 7524                    	jne	short only_one_head	; one head, do one head stuff
 32682                                  
 32683                                  ;	two head drives will use the mediadescriptor from the bpb
 32684                                  
 32685 00002DFB 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 32686                                  
 32687                                  ;	two sided drives have two special cases to look for. One is
 32688                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 32689                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 32690                                  ;	   one sector/cluster.
 32691                                  
 32692                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 32693                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 32694                                  ;	   type of 2 headed drive is all set.
 32695                                  
 32696 00002DFD 833E[4235]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 32697 00002E02 7509                    	jne	short not_144m
 32698 00002E04 833E[3235]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32699 00002E09 7502                    	jne	short not_144m
 32700                                  
 32701                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 32702                                  
 32703 00002E0B EB24                    	jmp	short got_one_secperclus_drive
 32704                                  
 32705                                  ;	check for 320K
 32706                                  
 32707                                  not_144m:
 32708 00002E0D 833E[3235]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32709 00002E12 7521                    	jne	short got_correct_mediad
 32710 00002E14 833E[4235]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32711 00002E19 751A                    	jne	short got_correct_mediad
 32712                                  
 32713 00002E1B B3FC                    	mov	bl,0FCh
 32714 00002E1D EB16                    	jmp	short got_correct_mediad
 32715                                  
 32716                                  only_one_head:
 32717                                  
 32718                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 32719                                  
 32720 00002E1F 803E[2F35]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 32721 00002E24 740B                    	je	short got_one_secperclus_drive
 32722                                  
 32723                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 32724                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 32725                                  ;	  besides 8 will be considered 0fch
 32726                                  
 32727 00002E26 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 32728 00002E28 833E[4235]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32729                                  	; 12/12/2022
 32730 00002E2D 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 32731                                  
 32732 00002E2F B3FE                    	mov	bl,0FEh			; 160K mediaid
 32733                                  
 32734                                  ;	we've either got a one sided drive, or a 1.44M drive
 32735                                  ;	  either case we'll use 1 sector per cluster instead of 2
 32736                                  
 32737                                  got_one_secperclus_drive:
 32738                                  	; 04/01/2023
 32739                                  	; ax = 2
 32740 00002E31 48                      	dec	ax  ; ax = 1
 32741 00002E32 A2[3735]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 32742                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 32743                                  
 32744                                  got_correct_mediad:
 32745 00002E35 881E[3F35]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 32746                                  
 32747                                  ;	 Calculate the correct number of Total Sectors on medium
 32748                                  
 32749 00002E39 A1[3235]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 32750 00002E3C F726[4435]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 32751 00002E40 F726[4235]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32752 00002E44 A3[3D35]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 32753 00002E47 F8                      	clc				; we currently return no errors
 32754                                  
 32755 00002E48 C3                      	retn
 32756                                  
 32757                                  ;	M047 -- end rewritten routine
 32758                                  
 32759                                  ;----------------------------------------------------------------------------
 32760                                  ;
 32761                                  ; procedure : organize
 32762                                  ;
 32763                                  ;----------------------------------------------------------------------------
 32764                                  
 32765                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32766                                  	; (SYSINIT:3234h)
 32767                                  
 32768                                  organize:
 32769                                  	; 04/01/2023
 32770                                  	; ds = cs
 32771 00002E49 8B0E[D203]              	mov	cx,[count]
 32772                                  	;mov	cx,[cs:count]
 32773 00002E4D E326                    	jcxz	nochar1
 32774                                  
 32775                                  ;ifndef	MULTI_CONFIG
 32776                                  ;
 32777                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 32778                                  ;;   because we the case of values in SET commands preserved
 32779                                  ;
 32780                                  ;	call	mapcase
 32781                                  ;endif
 32782                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32783 00002E4F E81B02                  	call	mapcase
 32784                                  
 32785 00002E52 31F6                    	xor	si,si
 32786 00002E54 89F7                    	mov	di,si
 32787 00002E56 31C0                    	xor	ax,ax
 32788                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32789                                  	;;mov	byte [cs:com_level],0
 32790                                  	; 12/12/2022
 32791                                  	;mov	[cs:com_level],al ; 0
 32792                                  	; 04/01/2023
 32793                                  	; ds = cs
 32794 00002E58 A2[CC03]                	mov	[com_level],al ; 0
 32795                                  org1:
 32796 00002E5B E8B101                  	call	skip_comment
 32797 00002E5E 740D                    	jz	short end_commd_line	; found a comment string and skipped.
 32798 00002E60 E89601                  	call	get2			; not a comment string. then get a char.
 32799 00002E63 3C0A                    	cmp	al,lf ; 0Ah
 32800 00002E65 7406                    	je	short end_commd_line	; starts with a blank line.
 32801 00002E67 3C20                    	cmp	al,' ' ; 20h
 32802 00002E69 76F0                    	jbe	short org1		; skip leading control characters
 32803 00002E6B EB0A                    	jmp	short findit
 32804                                  
 32805                                  end_commd_line:
 32806 00002E6D AA                      	stosb				; store line feed char in buffer for the linecount.
 32807                                  	;mov	byte [cs:com_level],0	; reset the command level.
 32808                                  	; 04/01/2023
 32809                                  	; ds = cs
 32810 00002E6E C606[CC03]00            	mov	byte [com_level],0
 32811 00002E73 EBE6                    	jmp	short org1
 32812                                  
 32813                                  nochar1:
 32814 00002E75 F9                      	stc
 32815 00002E76 C3                      	retn
 32816                                  
 32817                                  findit:
 32818 00002E77 51                      	push	cx
 32819 00002E78 56                      	push	si
 32820 00002E79 57                      	push	di
 32821 00002E7A 89F5                    	mov	bp,si
 32822 00002E7C 4D                      	dec	bp
 32823 00002E7D BE[9D34]                        mov     si,comtab		; prepare to search command table
 32824 00002E80 B500                    	mov	ch,0
 32825                                  findcom:
 32826 00002E82 89EF                    	mov	di,bp
 32827 00002E84 8A0C                    	mov	cl,[si]
 32828 00002E86 46                      	inc	si
 32829 00002E87 E324                    	jcxz	nocom
 32830                                  
 32831                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32832                                  
 32833                                  ;ifdef	MULTI_CONFIG
 32834                                  ;
 32835                                  ;;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 32836                                  ;;   time skip the upcoming delimiter test (since ";" need not be followed by
 32837                                  ;;   anything in particular)
 32838                                  ;
 32839                                  ;       cmp     byte [es:di],CONFIG_SEMICOLON  ; ';'
 32840                                  ;       je	short semicolon
 32841                                  ;loopcom:
 32842                                  ;       mov     al,[es:di]
 32843                                  ;       inc     di
 32844                                  ;       and     al,~20h ; 0DFh		; force upper case
 32845                                  ;       inc     si                      ; compare to byte @es:di
 32846                                  ;       cmp     al,[si-1]
 32847                                  ;       loope   loopcom
 32848                                  ;;else
 32849                                  ;;	repe	cmpsb
 32850                                  ;endif
 32851                                  	; 02/11/2022
 32852 00002E89 F3A6                    	repe	cmpsb
 32853                                  
 32854 00002E8B 9F                      	lahf
 32855 00002E8C 01CE                            add     si,cx                   ; bump to next position without affecting flags
 32856 00002E8E 9E                      	sahf
 32857 00002E8F AC                              lodsb                           ; get indicator letter
 32858 00002E90 75F0                    	jnz	short findcom
 32859 00002E92 26803D0D                        cmp     byte [es:di],cr		; the next char might be cr,lf
 32860 00002E96 7410                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 32861 00002E98 26803D0A                	cmp	byte [es:di],lf
 32862 00002E9C 740A                    	je	short gotcom0
 32863                                  
 32864                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32865                                  ;
 32866                                  ;;ifdef	MULTI_CONFIG
 32867                                  ;
 32868                                  ;;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 32869                                  ;
 32870                                  ;       cmp     al,CONFIG_BEGIN  ; '['
 32871                                  ;       je	short gotcom0
 32872                                  ;;endif
 32873                                  ;	push	ax
 32874                                  ;       mov     al,[es:di]		; now the next char. should be a delim.
 32875                                  ;
 32876                                  ;;ifdef	MULTI_CONFIG
 32877                                  ;
 32878                                  ;;   If keyword is *immediately* followed by a question mark (?), then
 32879                                  ;;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 32880                                  ;;   stored in the CONFIG.SYS memory image.
 32881                                  ;
 32882                                  ;       cmp     al,'?'                  ; explicit interactive command?
 32883                                  ;       jne	short no_query		; no
 32884                                  ;       pop     ax                      ; yes, so retrieve the original code
 32885                                  ;       or      al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 32886                                  ;       jmp     short gotcom0           ;
 32887                                  ;semicolon:
 32888                                  ;       mov     al,CONFIG_REM
 32889                                  ;       jmp     short gotcom0
 32890                                  ;no_query:
 32891                                  ;;endif  ;MULTI_CONFIG
 32892                                  
 32893                                  	; 02/11/2022
 32894 00002E9E 50                      	push	ax
 32895 00002E9F 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 32896                                  
 32897 00002EA2 E8A001                  	call	delim
 32898                                  no_delim:
 32899 00002EA5 58                      	pop	ax
 32900 00002EA6 75DA                    	jnz	short findcom
 32901                                  gotcom0:
 32902 00002EA8 5F                      	pop	di
 32903 00002EA9 5E                      	pop	si
 32904 00002EAA 59                      	pop	cx
 32905 00002EAB EB0F                    	jmp	short gotcom
 32906                                  nocom:
 32907 00002EAD 5F                      	pop	di
 32908 00002EAE 5E                      	pop	si
 32909 00002EAF 59                      	pop	cx
 32910 00002EB0 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 32911 00002EB2 AA                      	stosb				; save indicator char.
 32912                                  _skipline:
 32913 00002EB3 E84301                  	call	get2
 32914 00002EB6 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 32915 00002EB8 75F9                            jne     short _skipline
 32916 00002EBA EBB1                    	jmp	short end_commd_line	; handle next command line
 32917                                  gotcom:
 32918 00002EBC AA                              stosb                           ; save indicator char in buffer
 32919                                  
 32920                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32921                                  ;;ifdef	MULTI_CONFIG
 32922                                  ;
 32923                                  ;;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 32924                                  ;;   it screws up the direct comparisons below.
 32925                                  ;
 32926                                  ;       and     al,~CONFIG_OPTION_QUERY ; 7Fh
 32927                                  ;;endif
 32928                                  ;	mov	[cs:cmd_indicator],al	; save it for the future use.
 32929                                  ;
 32930                                  ;;ifdef	MULTI_CONFIG
 32931                                  ;
 32932                                  ;;   There is no whitespace/delimiter between the "begin block" character
 32933                                  ;;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 32934                                  ;;   skipping code
 32935                                  ;
 32936                                  ;       cmp     al,CONFIG_BEGIN
 32937                                  ;       je	short org31
 32938                                  ;       cmp     al,CONFIG_SUBMENU ; 'O'
 32939                                  ;       je      short no_mapcase
 32940                                  ;       cmp     al,CONFIG_MENUITEM ; 'E'
 32941                                  ;       je      short no_mapcase
 32942                                  ;       cmp     al,CONFIG_MENUDEFAULT ; 'A'
 32943                                  ;       je      short no_mapcase
 32944                                  ;       cmp     al,CONFIG_INCLUDE ; 'J'
 32945                                  ;       je      short no_mapcase
 32946                                  ;       call    mapcase                 ; map case of rest of line to UPPER
 32947                                  ;no_mapcase:
 32948                                  ;;endif
 32949                                  
 32950                                  	; 02/11/2022
 32951                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 32952                                  	; 04/01/2023
 32953                                  	; ds = cs
 32954 00002EBD A2[D003]                	mov	[cmd_indicator],al
 32955                                  org2:	
 32956 00002EC0 E83601                  	call    get2                    ; skip the command name until delimiter
 32957 00002EC3 3C0A                            cmp     al,lf
 32958 00002EC5 740B                    	je	short org21
 32959 00002EC7 3C0D                    	cmp	al,cr
 32960 00002EC9 7407                    	je	short org21
 32961                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32962                                  	;cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 32963                                  	;je	short org21		; T-RICHJ: to be parsed properly.
 32964                                  
 32965 00002ECB E87701                  	call	delim
 32966 00002ECE 75F0                            jnz	short org2
 32967 00002ED0 EB02                    	jmp	short org3
 32968                                  org21:					;if cr or lf then
 32969 00002ED2 4E                      	dec	si			; undo si, cx register
 32970 00002ED3 41                      	inc	cx			;  and continue
 32971                                  org3:	
 32972                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 32973                                  	;je	short get_cmt_token
 32974                                  	;; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32975                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 32976                                  	;;je	short org_file
 32977                                          ;cmp     byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 32978                                  	;je	short org_file
 32979                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 32980                                          ;;je	short org_file
 32981                                  	;; 02/11/2022
 32982                                  	;cmp     byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 32983                                  	;je	short org_file
 32984                                          ;cmp     byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 32985                                  	;je	short org_file
 32986                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 32987                                  	;je	short org_switch
 32988                                  
 32989                                  	; 04/01/2023
 32990                                  	; ds = cs
 32991                                  
 32992 00002ED4 803E[D003]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 32993 00002ED9 7456                    	je	short get_cmt_token
 32994                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32995                                          ;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 32996                                  	;je	short org_file
 32997 00002EDB 803E[D003]49                    cmp     byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 32998 00002EE0 7429                    	je	short org_file
 32999                                          ;cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 33000                                          ;je	short org_file
 33001                                  	; 02/11/2022
 33002 00002EE2 803E[D003]44            	cmp     byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 33003 00002EE7 7422                    	je	short org_file
 33004 00002EE9 803E[D003]53                    cmp     byte [cmd_indicator],CONFIG_SHELL ; 'S'
 33005 00002EEE 741B                    	je	short org_file
 33006 00002EF0 803E[D003]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 33007 00002EF5 7403                    	je	short org_switch
 33008                                  	
 33009                                  org31:
 33010 00002EF7 E99500                  	jmp	org4
 33011                                  
 33012                                  org_switch:
 33013 00002EFA E81201                  	call	skip_comment
 33014 00002EFD 7472                    	jz	short end_commd_line_brdg
 33015                                  
 33016 00002EFF E8F700                  	call	get2
 33017 00002F02 E84801                  	call	org_delim
 33018 00002F05 74F3                    	jz	short org_switch
 33019                                  
 33020 00002F07 AA                      	stosb
 33021 00002F08 E99300                  	jmp	org5
 33022                                  
 33023                                  org_file:			; get the filename and put 0 at end
 33024 00002F0B E80101                  	call	skip_comment
 33025 00002F0E 7464                    	jz	short org_put_zero
 33026                                  
 33027 00002F10 E8E600                  	call	get2		; not a comment
 33028 00002F13 E82F01                  	call	delim
 33029 00002F16 74F3                    	jz	short org_file	; skip the possible delimiters
 33030                                  
 33031 00002F18 AA                      	stosb			; copy the first non delim char found in buffer
 33032                                  
 33033                                  org_copy_file:
 33034 00002F19 E8F300                  	call	skip_comment	; comment char in the filename?
 33035 00002F1C 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 33036                                  
 33037 00002F1E E8D800                  	call	get2
 33038 00002F21 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 33039 00002F23 7457                    	je	short end_file_slash ; this will be the special case.
 33040                                  
 33041 00002F25 AA                      	stosb			; save the char. in buffer
 33042 00002F26 E81C01                  	call	delim
 33043 00002F29 7459                    	jz	short end_copy_file
 33044                                  
 33045 00002F2B 3C20                    	cmp	al, ' '
 33046 00002F2D 77EA                    	ja	short org_copy_file ; keep copying
 33047 00002F2F EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 33048                                  
 33049                                  get_cmt_token:			; get the token. just max. 2 char.
 33050 00002F31 E8C500                  	call	get2
 33051 00002F34 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 33052 00002F36 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 33053 00002F38 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 33054 00002F3A 74F5                    	je	short get_cmt_token ;  character.)
 33055 00002F3C 3C3D                    	cmp	al,'='		; = is special in this case.
 33056 00002F3E 74F1                    	je	short get_cmt_token
 33057 00002F40 3C0D                    	cmp	al,cr
 33058 00002F42 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 33059 00002F44 3C0A                    	cmp	al,lf
 33060 00002F46 7422                    	je	short get_cmt_end
 33061                                  
 33062                                  	; 04/01/2023
 33063                                  	; ds = cs
 33064                                  	;mov	[cs:cmmt1],al	; store it
 33065                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 33066 00002F48 A2[CE03]                	mov	[cmmt1],al	; store it
 33067 00002F4B C606[CD03]01            	mov	byte [cmmt],1 ; 1 char. so far.
 33068 00002F50 E8A600                  	call	get2
 33069 00002F53 3C20                    	cmp	al,' ' ; 20h
 33070 00002F55 7413                    	je	short get_cmt_end
 33071 00002F57 3C09                    	cmp	al,tab ; 9
 33072 00002F59 740F                    	je	short get_cmt_end
 33073 00002F5B 3C0D                    	cmp	al,cr  ; 0Dh
 33074 00002F5D 740B                    	je	short get_cmt_end
 33075 00002F5F 3C0A                    	cmp	al,lf  ; 0Ah
 33076 00002F61 740E                    	je	short end_commd_line_brdg
 33077                                  
 33078                                  	;mov	[cs:cmmt2],al
 33079                                  	;inc	byte [cs:cmmt]
 33080                                  	; 04/01/2023
 33081 00002F63 A2[CF03]                	mov	[cmmt2],al
 33082 00002F66 FE06[CD03]              	inc	byte [cmmt]
 33083                                  
 33084                                  get_cmt_end:
 33085 00002F6A E88C00                  	call	get2
 33086 00002F6D 3C0A                    	cmp	al,lf
 33087 00002F6F 75F9                    	jne	short get_cmt_end	; skip it.
 33088                                  end_commd_line_brdg: 
 33089 00002F71 E9F9FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 33090                                  
 33091                                  org_put_zero:				; make the filename in front of
 33092 00002F74 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 33093 00002F78 47                      	inc	di
 33094 00002F79 E9F1FE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 33095                                  
 33096                                  end_file_slash: 			; al = "/" option char.
 33097 00002F7C 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 33098 00002F80 47                      	inc	di			; and
 33099 00002F81 AA                      	stosb				; store "/" after that.
 33100 00002F82 EB1A                    	jmp	short org5		; continue with the rest of the line
 33101                                  
 33102                                  end_copy_file:
 33103 00002F84 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 33104 00002F89 3C0A                    	cmp	al,lf
 33105 00002F8B 74E4                    	je	short end_commd_line_brdg
 33106 00002F8D EB0F                    	jmp	short org5
 33107                                  
 33108                                  org4:					; org4 skips all delimiters after the command name except for '/'
 33109 00002F8F E87D00                  	call	skip_comment
 33110 00002F92 74DD                    	jz	short end_commd_line_brdg
 33111                                  
 33112 00002F94 E86200                  	call	get2
 33113 00002F97 E8B300                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 33114 00002F9A 74F3                    	jz	short org4
 33115 00002F9C EB08                    	jmp	short org51
 33116                                  
 33117                                  org5:					; rest of the line
 33118 00002F9E E86E00                  	call	skip_comment		; comment?
 33119 00002FA1 74CE                    	jz	short end_commd_line_brdg
 33120 00002FA3 E85300                  	call	get2			; not a comment.
 33121                                  
 33122                                  org51:
 33123 00002FA6 AA                      	stosb				; copy the character
 33124 00002FA7 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 33125 00002FA9 743A                    	je	short at_quote
 33126 00002FAB 3C20                    	cmp	al,' '  ; 20h
 33127 00002FAD 77EF                    	ja	short org5
 33128                                  					; M051 - Start
 33129                                  	; 04/01/2023
 33130                                  	; ds = cs
 33131 00002FAF 803E[D003]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 33132                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 33133 00002FB4 7514                    	jne	short not_dh		; N: 
 33134 00002FB6 3C0A                    	cmp	al,lf			; Q: is this line feed
 33135 00002FB8 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 33136 00002FBA 3C0D                    	cmp	al,cr			; Q: is this a cr
 33137 00002FBC 75E0                    	jne	short org5		; N: 
 33138 00002FBE 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 33139 00002FC3 AA                      	stosb				; put cr after blank
 33140 00002FC4 FE06[8D2C]              	inc	byte [insert_blank]
 33141                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 33142                                  					; inserted
 33143 00002FC8 EBD4                    	jmp	short org5
 33144                                  not_dh:					; M051 - End
 33145                                  
 33146 00002FCA 3C0A                    	cmp	al,lf			; line feed?
 33147 00002FCC 740F                    	je	short org1_brdg		; handles the next command line.
 33148 00002FCE EBCE                    	jmp	short org5		; handles next char in this line.
 33149                                  
 33150                                  org_dhlf:				; M051 - Start
 33151                                  	; 04/01/2023
 33152                                  	; ds = cs
 33153 00002FD0 803E[8D2C]01            	cmp	byte [insert_blank],1
 33154                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 33155 00002FD5 7406                    	je	short org1_brdg		; Y:
 33156 00002FD7 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 33157 00002FDC AA                      	stosb				; put lf after blank
 33158                                  					; M051 - End
 33159                                  org1_brdg:
 33160 00002FDD C606[8D2C]00            	mov	byte [insert_blank],0 
 33161                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 33162                                  					; M051: devicehigh
 33163 00002FE2 E976FE                  	jmp	org1
 33164                                  
 33165                                  at_quote:
 33166 00002FE5 803E[CC03]00            	cmp	byte [com_level],0
 33167                                  	;cmp	byte [cs:com_level],0
 33168 00002FEA 7407                    	je	short up_level
 33169                                  	;mov	byte [cs:com_level],0	; reset it.
 33170 00002FEC C606[CC03]00            	mov	byte [com_level],0
 33171 00002FF1 EBAB                    	jmp	short org5
 33172                                  
 33173                                  up_level:
 33174                                  	;inc	byte [cs:com_level]	; set it.
 33175 00002FF3 FE06[CC03]              	inc	byte [com_level]
 33176 00002FF7 EBA5                    	jmp	short org5
 33177                                  
 33178                                  ;----------------------------------------------------------------------------
 33179                                  ;
 33180                                  ; procedure : get2
 33181                                  ;
 33182                                  ;----------------------------------------------------------------------------
 33183                                  
 33184                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33185                                  	; (SYSINIT:33FAh)
 33186                                  	; 04/01/2023
 33187                                  get2:
 33188 00002FF9 E304                    	jcxz	noget
 33189                                  	;
 33190                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33191                                  	;;lods	byte ptr es:[si]
 33192                                  	; 12/12/2022
 33193 00002FFB 26                      	es	
 33194 00002FFC AC                      	lodsb
 33195                                  	;mov	al, [es:si]
 33196                                  	;inc	si
 33197                                  	;
 33198 00002FFD 49                      	dec	cx
 33199 00002FFE C3                      	retn
 33200                                  noget:
 33201 00002FFF 59                      	pop	cx
 33202                                  	; 04/01/2023
 33203                                  	; ds = cs
 33204                                  	;mov	[cs:count],di ; 13/05/2019
 33205                                  	;mov	[cs:org_count],di
 33206 00003000 893E[D203]              	mov	[count],di
 33207 00003004 893E[D403]              	mov	[org_count],di
 33208 00003008 31F6                    	xor	si,si
 33209                                  	;mov	[cs:chrptr],si
 33210 0000300A 8936[D603]              	mov	[chrptr],si
 33211                                  
 33212                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33213                                  ;;ifndef MULTI_CONFIG
 33214                                  ;;	retn
 33215                                  ;;else
 33216                                  ;
 33217                                  ;;   This was the rather kludgy way out of procedure "organize", but instead
 33218                                  ;;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 33219                                  ;;   and the new boot menu stuff...
 33220                                  ;
 33221                                  ;	mov     cx,di
 33222                                  ;	jmp     menu_check
 33223                                  ;;endif
 33224                                  
 33225                                  	; 02/11/2022
 33226 0000300E C3                      	retn
 33227                                  
 33228                                  ;----------------------------------------------------------------------------
 33229                                  ;
 33230                                  ; procedure : skip_comment
 33231                                  ;
 33232                                  ;skip the commented string until lf, if current es:si-> a comment string.
 33233                                  ;in) es:si-> string
 33234                                  ;	 cx -> length.
 33235                                  ;out) zero flag not set if not found a comment string.
 33236                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 33237                                  ;	  the line feed character at this moment when return.
 33238                                  ;	  ax register destroyed.
 33239                                  ;	  if found, si, cx register adjusted accordingly.
 33240                                  ;
 33241                                  ;----------------------------------------------------------------------------
 33242                                  
 33243                                  	; 04/01/2023 - Retro DOS v4.0
 33244                                  
 33245                                  skip_comment:
 33246 0000300F E3EE                    	jcxz	noget		; get out of the organize routine.
 33247                                  
 33248                                  	; 04/01/2023
 33249                                  	; ds = cs	
 33250                                  
 33251 00003011 803E[CC03]00            	cmp	byte [com_level],0
 33252                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 33253 00003016 752C                    	jne	short no_commt	 ; (not inside quotations)
 33254                                  
 33255 00003018 803E[CD03]01            	cmp	byte [cmmt],1
 33256                                  	;cmp	byte [cs:cmmt],1
 33257 0000301D 7225                    	jb	short no_commt
 33258                                  
 33259 0000301F 268A04                  	mov	al,[es:si]
 33260                                  	
 33261 00003022 3806[CE03]              	cmp	[cmmt1],al
 33262                                  	;cmp	[cs:cmmt1],al
 33263 00003026 751C                    	jne	short no_commt
 33264                                  
 33265 00003028 803E[CD03]02            	cmp	byte [cmmt],2
 33266                                  	;cmp	byte [cs:cmmt],2
 33267 0000302D 750A                    	jne	short skip_cmmt
 33268                                  
 33269 0000302F 268A4401                	mov	al,[es:si+1]
 33270                                  	
 33271 00003033 3806[CF03]              	cmp	[cmmt2],al
 33272                                  	;cmp	[cs:cmmt2],al
 33273 00003037 750B                    	jne	short no_commt
 33274                                  skip_cmmt:
 33275 00003039 E3C4                    	jcxz	noget		; get out of organize routine.
 33276 0000303B 268A04                  	mov	al,[es:si]
 33277 0000303E 46                      	inc	si
 33278 0000303F 49                      	dec	cx
 33279 00003040 3C0A                    	cmp	al,lf		; line feed?
 33280 00003042 75F5                    	jne	short skip_cmmt
 33281                                  no_commt:
 33282 00003044 C3                      	retn
 33283                                  
 33284                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33285                                  %if 0
 33286                                  
 33287                                  ;ifdef	MULTI_CONFIG
 33288                                  
 33289                                  ;----------------------------------------------------------------------------
 33290                                  ;
 33291                                  ;   kbd_read: wait for keystroke
 33292                                  ;
 33293                                  ;   INPUT
 33294                                  ;       DS == CS == sysinitseg
 33295                                  ;
 33296                                  ;   OUTPUT
 33297                                  ;       Carry SET to clean boot, CLEAR otherwise
 33298                                  ;
 33299                                  ;   OTHER REGS USED
 33300                                  ;       All
 33301                                  ;
 33302                                  ;   HISTORY
 33303                                  ;       Created 16-Nov-1992 by JeffPar
 33304                                  ;
 33305                                  ;----------------------------------------------------------------------------
 33306                                  
 33307                                  kbd_read:
 33308                                          test    byte [bDisableUI],2
 33309                                          jnz     short kbd_nodelay
 33310                                  
 33311                                          push    ds              ; the bios timer tick count is incremented
 33312                                          sub     ax,ax           ; 18.2 times per second;
 33313                                          mov     ds,ax           ; watch the timer tick count for 37 transitions
 33314                                  	;mov	dx,[046Ch]	; get initial value
 33315                                  kbd_loop:
 33316                                          mov     ah,1            ;
 33317                                          int     16h             ; peek the keyboard
 33318                                          jnz	short kbd_loopdone ; something's there, get out
 33319                                          mov     ah,2            ; peek the shift states
 33320                                          int     16h             ;
 33321                                          test    al,03h          ; either right or left shift key bits set?
 33322                                          jnz	short kbd_loopdone ; yes
 33323                                          mov     ax,[046Ch]	;
 33324                                  	;sub	ax,dx           ; get difference
 33325                                  	; 15/04/2019 - Retro DOS v4.0
 33326                                  	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 33327                                  
 33328                                  	cmp     al,37           ; reached limit?
 33329                                          jb	short kbd_loop	; not yet
 33330                                  kbd_loopdone:
 33331                                          pop     ds              ; delay complete!
 33332                                  kbd_nodelay:
 33333                                          sub     bx,bx           ; assume clean boot
 33334                                          mov     ah,2            ; peek the shift states
 33335                                          int     16h             ;
 33336                                          test    al,03h          ; either right or left shift key bits set?
 33337                                          jz      short kbd_notshift ; no
 33338                                          inc     bx              ; yes
 33339                                          inc     bx
 33340                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 33341                                  	or	byte [bQueryOpt],4
 33342                                  kbd_notshift:                   ;
 33343                                          mov     ah,1            ; peek the keyboard
 33344                                          int     16h             ;
 33345                                          jz	short kbd_test	; no key present
 33346                                          or      al,al           ; is it a function key?
 33347                                          jnz	short kbd_test	; no
 33348                                  
 33349                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 33350                                          cmp     ah,62h          ; CTRL F5
 33351                                          je	short kbd_cfg_bypass
 33352                                  	
 33353                                          cmp     ah,3Fh          ; F5 function key?
 33354                                          jne	short kbd_notf5	; no
 33355                                  kbd_cfg_bypass:
 33356                                          mov     dx,_$CleanMsg
 33357                                          call    print
 33358                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 33359                                  	or	byte [bQueryOpt],4           ;
 33360                                          jmp     short kbd_eat   ; yes, clean boot selected
 33361                                  kbd_notf5:
 33362                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 33363                                          cmp     ah,65h          ; CTRL F8
 33364                                          je	short kbd_cfg_confirm
 33365                                  
 33366                                          cmp     ah,42h          ; F8 function key?
 33367                                          jne	short kbd_exit	; no
 33368                                  kbd_cfg_confirm:
 33369                                          mov     dx,_$InterMsg
 33370                                          call    print           ;
 33371                                          mov     bl,1            ; yes, interactive-boot option enabled
 33372                                          mov     [bQueryOpt],bl  ; change default setting
 33373                                  kbd_eat:                        ;
 33374                                          mov     ah,0            ;
 33375                                          int     16h             ; eat the key we assumed was a signal
 33376                                          mov	byte [secElapsed],-1
 33377                                          or      bx,bx           ;
 33378                                          jz	short kbd_clean	;
 33379                                  kbd_test:                       ;
 33380                                          cmp     bl,2            ;
 33381                                          jb	short kbd_exit	;
 33382                                  kbd_clean:                      ;
 33383                                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 33384                                          stc                     ; set carry to indicate abort
 33385                                          retn			;
 33386                                  kbd_exit:                       ;
 33387                                          clc                     ; clear carry to indicate success
 33388                                          retn			;
 33389                                  
 33390                                  ;----------------------------------------------------------------------------
 33391                                  ;
 33392                                  ;   set_numlock: set numlock LED
 33393                                  ;
 33394                                  ;   INPUT
 33395                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 33396                                  ;
 33397                                  ;   OUTPUT
 33398                                  ;       None
 33399                                  ;
 33400                                  ;   OTHER REGS USED
 33401                                  ;       None
 33402                                  ;
 33403                                  ;   HISTORY
 33404                                  ;       Created 16-Nov-1992 by JeffPar
 33405                                  ;
 33406                                  ;----------------------------------------------------------------------------
 33407                                  
 33408                                  set_numlock:
 33409                                          push    ax
 33410                                          push    ds
 33411                                          sub     ax,ax
 33412                                          mov     ds,ax
 33413                                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 33414                                          cmp     ax,[cs:OnOff+2]	; should we turn it off?
 33415                                          jne	short not_off	; no
 33416                                          and     byte [0417h],~20h ; 0DFh
 33417                                          jmp     short set_done
 33418                                  not_off:
 33419                                          cmp     ax,[cs:OnOff]	; should we turn it on?
 33420                                          stc
 33421                                          jne	short set_done	; no
 33422                                          or      byte [0417h],20h
 33423                                  set_done:
 33424                                          pop     ds
 33425                                          pop     ax
 33426                                          retn
 33427                                  
 33428                                  ; 16/04/2019 - Retro DOS v4.0
 33429                                  
 33430                                  ;----------------------------------------------------------------------------
 33431                                  ;
 33432                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 33433                                  ;
 33434                                  ;   INPUT
 33435                                  ;       CX == "organized" config.sys memory image length
 33436                                  ;    ES:SI -> "organized" config.sys memory image
 33437                                  ;       DS == CS == sysinitseg
 33438                                  ;
 33439                                  ;   OUTPUT
 33440                                  ;       Same as above;  the idea is that menu_check simply transforms
 33441                                  ;       a block-structured config.sys image into a conventional image,
 33442                                  ;       based on the user's block selection and any other boot-time options
 33443                                  ;       the user may have employed...
 33444                                  ;
 33445                                  ;   OTHER REGS USED
 33446                                  ;       All
 33447                                  ;
 33448                                  ;   NOTES
 33449                                  ;       [count] and [org_count] are set to the new config.sys image length
 33450                                  ;
 33451                                  ;   HISTORY
 33452                                  ;       Created 16-Mar-1992 by JeffPar
 33453                                  ;
 33454                                  ;----------------------------------------------------------------------------
 33455                                  
 33456                                  menu_check:
 33457                                  
 33458                                  ;   Search for SWITCHES, determine if /N or /F are present;  if so, then
 33459                                  ;   disable clean/interactive boot options
 33460                                  
 33461                                          push    cx              ;
 33462                                          push    si              ;
 33463                                          sub     bx,bx           ; remains ZERO until first block
 33464                                  swchk_loop:                     ;
 33465                                          call    get_char        ; get first char of current line
 33466                                          jc	short swchk_end	; hit eof
 33467                                          cmp     al,CONFIG_BEGIN ;
 33468                                          jne	short swchk_next1 ;
 33469                                          inc     bx              ; remember that we've seen a block
 33470                                          jmp     short swchk_nextline
 33471                                  swchk_next1:                    ;
 33472                                          cmp     al,CONFIG_NUMLOCK
 33473                                          jne	short swchk_next2 ;
 33474                                          or      bx,bx           ; only do NUMLOCK commands that exist
 33475                                          jnz	short swchk_nextline ; before the first block
 33476                                          call    set_numlock     ; REM it out so we don't act on it later, too
 33477                                          mov     byte [es:si-1],CONFIG_REM
 33478                                          jmp     short swchk_nextline
 33479                                  swchk_next2:                    ;
 33480                                          cmp     al,CONFIG_SWITCHES
 33481                                          jne	short swchk_nextline ; this line ain't it
 33482                                  swchk_scan:                     ;
 33483                                          call    get_char        ; look for /N or /F
 33484                                  swchk_scan1:                    ;
 33485                                          cmp     al,LF           ; end of line?
 33486                                          je	short swchk_nextline ; yes
 33487                                          cmp     al,'/'          ; switch-char?
 33488                                          jne	short swchk_scan ; no
 33489                                          call    get_char        ;
 33490                                          and     al,~20h ; 0DFh	; convert to upper case
 33491                                          cmp     al,[swit_n+1]
 33492                                          jne	short swchk_scan2 ; no
 33493                                          or      byte [bDisableUI],1
 33494                                          jmp	short swchk_scan ; continue looking for switches of interest
 33495                                  swchk_scan2:                    ;
 33496                                          cmp     al,[swit_f+1]
 33497                                          jne	short swchk_scan1 ; no
 33498                                          or      byte [bDisableUI],2
 33499                                          jmp     short swchk_scan ; continue looking for switches of interest
 33500                                  swchk_nextline:                 ;
 33501                                          call    skip_opt_line   ;
 33502                                          jmp     short swchk_loop ;
 33503                                  swchk_end:                      ;
 33504                                          pop     si              ;
 33505                                          pop     cx              ;
 33506                                  
 33507                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 33508                                  ;   the DisableUI flag is still clear
 33509                                  
 33510                                          test    byte [bDisableUI],1
 33511                                          jnz	short menu_search
 33512                                  ;
 33513                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 33514                                  ;   there is anything at all in the keyboard buffer
 33515                                  ;
 33516                                          call    kbd_read
 33517                                          jnc	short menu_search
 33518                                          jmp	menu_abort
 33519                                  
 33520                                  ;   Search for MENU block;  it is allowed to be anywhere in config.sys
 33521                                  
 33522                                  menu_search:
 33523                                          sub     bx,bx           ; if no MENU, default to zero for no_selection
 33524                                          mov     di,szMenu	;
 33525                                          call    find_block      ; find the MENU block
 33526                                          jnc	short menu_found ;
 33527                                          mov     byte [szBoot],0
 33528                                          jmp	no_selection ; not found
 33529                                  
 33530                                  ;   Process the requested menu color(s)
 33531                                  
 33532                                  menu_color:
 33533                                          push    cx              ;
 33534                                          push    dx              ;
 33535                                          mov     dx,0007h        ; default color setting
 33536                                          call    get_number	; get first number
 33537                                          and     bl,0Fh		; first # is foreground color (for low nibble)
 33538                                          mov     ch,bl           ; save it in CH
 33539                                          and     dl,0F0h         ;
 33540                                          or      dl,bl           ;
 33541                                          call    delim           ; did we hit a delimiter
 33542                                          jne	short check_color ; no, all done
 33543                                          call    get_number	; get next number
 33544                                          and     bl,0Fh		; second # is background color (for high nibble)
 33545                                          mov     dh,bl           ; save it in DH
 33546                                          and     dl,0Fh		;
 33547                                          mov     cl,4            ;
 33548                                          shl     bl,cl           ;
 33549                                          or      dl,bl           ;
 33550                                  check_color:                    ;
 33551                                          cmp     ch,dh           ; are foreground/background the same?
 33552                                          jne	short set_color	; no
 33553                                          xor     dl,08h          ; yes, so modify the fgnd intensity
 33554                                  set_color:
 33555                                          mov     [bMenuColor],dl ;
 33556                                          pop     dx              ;
 33557                                          pop     cx              ;
 33558                                          jmp	menu_nextitem
 33559                                  
 33560                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 33561                                  ;   above is there simply to alleviate short jump problems)
 33562                                  
 33563                                  menu_found:
 33564                                          mov     byte [bDefBlock],1
 33565                                          mov     word [offDefBlock],0
 33566                                          mov     byte [secTimeOut],-1
 33567                                          and     byte [bQueryOpt],~2 ; 0FDh
 33568                                  
 33569                                          call    skip_opt_line   ; skip to next line
 33570                                          sub     dx,dx           ; initialize total block count (0 => none yet)
 33571                                  
 33572                                  ;   Process the menu block now
 33573                                  
 33574                                  menu_process:
 33575                                          call    get_char        ; get first char of current line
 33576                                          jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 33577                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33578                                          cmp     al,CONFIG_BEGIN ; BEGIN implies END
 33579                                          je	short to_menu_getdefault
 33580                                          cmp     al,CONFIG_SUBMENU
 33581                                          je	short menu_item	; go process sub-menu
 33582                                          cmp     al,CONFIG_MENUITEM
 33583                                          je	short menu_item	; go process menu item
 33584                                          cmp     al,CONFIG_MENUDEFAULT
 33585                                          je	short menu_default ; go process menu default
 33586                                          cmp     al,CONFIG_MENUCOLOR
 33587                                          je	short menu_color ; go process menu color
 33588                                          cmp     al,CONFIG_NUMLOCK
 33589                                          je	short menu_numlock ;
 33590                                          cmp     al,CONFIG_REM   ; allow remarks in menu block
 33591                                          je	short menu_nextitem ;
 33592                                          call    any_delim       ; allow blank lines and such
 33593                                          je	short menu_nextitem ;
 33594                                          stc                     ;
 33595                                          call    print_error     ; non-MENU command!
 33596                                          jmp     short menu_nextitem
 33597                                  menu_numlock:
 33598                                          call    set_numlock
 33599                                          jmp     short menu_nextitem
 33600                                  to_menu_getdefault:
 33601                                          jmp     short menu_getdefault
 33602                                  
 33603                                  ;   Save the offset of the default block name, we'll need it later
 33604                                  
 33605                                  menu_default:
 33606                                          mov     [offDefBlock],si; save address of default block name
 33607                                          cmp     byte [secElapsed],0
 33608                                          jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 33609                                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 33610                                          jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 33611                                          call    skip_delim      ; something is typed
 33612                                          jc	short menu_nextitem ;
 33613                                          mov     si,bx           ;
 33614                                          call    get_number      ; get number (of seconds for timeout)
 33615                                          cmp     bl,90           ; limit it to a reasonable number
 33616                                          jb	short timeout_ok ; (besides, 99 is the largest # my simple
 33617                                          mov     bl,90           ;  display function can handle)
 33618                                  timeout_ok:                     ;
 33619                                          mov     [secTimeOut],bl ;
 33620                                  timeout_skip:
 33621                                          jmp     short menu_nextitem
 33622                                  
 33623                                  ;   Verify that this is a valid menu item by searching for the named block
 33624                                  
 33625                                  menu_item:
 33626                                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 33627                                          jae	short menu_nextitem ;
 33628                                          mov     di,si           ; DS:DI -> block name to search for
 33629                                          call    srch_block      ;
 33630                                          je	short menu_itemfound ;
 33631                                          stc                     ;
 33632                                          call    print_error     ; print error and pause
 33633                                          jmp     short menu_nextitem ; if not found, ignore this menu item
 33634                                  
 33635                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 33636                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 33637                                  ;   and CX are unmodified
 33638                                  
 33639                                  menu_itemfound:
 33640                                          inc     dx              ; otherwise, increment total block count
 33641                                          mov     bx,dx           ; and use it to index the arrays of offsets
 33642                                          mov	[abBlockType+bx],al
 33643                                          add     bx,bx           ; of recorded block names and descriptions
 33644                                  
 33645                                  ;   There should be a description immediately following the block name on
 33646                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 33647                                  ;   description...
 33648                                  
 33649                                          mov     [aoffBlockName+bx],si
 33650                                          mov     [aoffBlockDesc+bx],si
 33651                                          mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 33652                                          call    skip_token      ;
 33653                                          jc	short menu_nextitem ; hit eol/eof
 33654                                          call    skip_delim      ;
 33655                                          jc	short menu_nextitem ; hit eol/eof
 33656                                          xchg    bx,di           ;
 33657                                          mov     [aoffBlockDesc+bx],di
 33658                                  
 33659                                  menu_nextitem:
 33660                                          call    skip_opt_line   ;
 33661                                          jmp     menu_process    ; go back for more lines
 33662                                  
 33663                                  ;   Display menu items now, after determining which one is default
 33664                                  
 33665                                  menu_getdefault:
 33666                                          or      dl,dl           ; where there any valid blocks at all?
 33667                                          jnz	short menu_valid ; yes
 33668                                          sub     bx,bx           ; no, so force autoselect of 0
 33669                                          jmp     menu_autoselect ; (meaning: process common blocks only)
 33670                                  menu_valid:
 33671                                          sub     bx,bx           ;
 33672                                          mov     [bMaxBlock],dl  ; first, record how many blocks we found
 33673                                          mov     di,[offDefBlock];
 33674                                          or      di,di           ; does a default block exist?
 33675                                          jz	short menu_nodefault ; no
 33676                                          inc     bx              ; yes, walk name table, looking for default
 33677                                  menu_chkdefault:
 33678                                          push    bx              ;
 33679                                          add     bx,bx           ;
 33680                                          mov     si,[aoffBlockName+bx]
 33681                                          mov     cx,128          ; arbitrary maximum length of a name
 33682                                          push    ds              ;
 33683                                          push    es              ;
 33684                                          pop     ds              ;
 33685                                          call    comp_names      ; is this block the same as the default?
 33686                                          pop     ds              ;
 33687                                          pop     bx              ;
 33688                                          je	short menu_setdefault ; yes
 33689                                          inc     bx              ;
 33690                                          cmp     bl,[bMaxBlock]  ; all done searching?
 33691                                          jbe	short menu_chkdefault ; not yet
 33692                                  menu_nodefault:
 33693                                          mov     bl,1            ; if no default, force default to #1
 33694                                  menu_setdefault:
 33695                                          mov     [bDefBlock],bl  ; yes, this will be the initial current block
 33696                                  
 33697                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 33698                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 33699                                  ;   supposed to skip menu display and run with the specified default block;
 33700                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 33701                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 33702                                  ;   with no timeout)
 33703                                  
 33704                                          cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 33705                                          jne	short menu_display ; no
 33706                                          test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 33707                                          jnz	short menu_display ; yes, so *don't* assume default after all
 33708                                          jmp     not_topmenu	;
 33709                                  
 33710                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 33711                                  
 33712                                  menu_display:
 33713                                          mov     ah,0Fh          ; get current video mode
 33714                                          int     10h             ;
 33715                                          mov     ah,00h          ; just re-select that mode
 33716                                          int     10h             ;
 33717                                          push    es              ;
 33718                                          mov     ax,40h          ; reach down into the ROM BIOS data area
 33719                                          mov     es,ax           ; and save the current (default) video page
 33720                                          mov     ax,[es:004Eh]   ; start address and page #, in case the
 33721                                          mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 33722                                          mov     al,[es:0062h]   ;
 33723                                          mov     [bCRTPage],al   ;
 33724                                          mov     ax,[bMenuPage]	; select new page for menu
 33725                                          int     10h             ;
 33726                                          mov     ax,0600h        ; clear entire screen
 33727                                          mov     bh,[bMenuColor] ; using this color
 33728                                          sub     cx,cx           ; upper left row/col
 33729                                          ;mov	dl,[es:CRT_Cols] 
 33730                                          mov	dl,[es:4Ah]
 33731                                  	dec     dl              ;
 33732                                          ;mov	dh,[es:CRT_Rows];
 33733                                          mov	dh,[es:84h]
 33734                                  	or      dh,dh           ; # of rows valid?
 33735                                          jnz	short menu_clear ; hopefully
 33736                                          mov     dh,[bLastRow]   ; no, use a default
 33737                                  menu_clear:
 33738                                          int     10h             ; clear the screen using the req. attribute
 33739                                          pop     es              ;
 33740                                          mov     [bLastRow],dh   ; save DH
 33741                                          mov     dx,_$MenuHeader
 33742                                          call    print           ; cursor now on row 3 (numbered from 0)
 33743                                  
 33744                                          test    byte [bDisableUI],1
 33745                                          jnz     short menu_nostatus
 33746                                          mov     bh,[bMenuPage]  ;
 33747                                          mov     dh,[bLastRow]   ; restore DH
 33748                                          mov     dl,0            ; print the status line on row DH, col 0,
 33749                                          mov     ah,02h          ; now that we can trash the cursor position
 33750                                          int     10h             ;
 33751                                          mov     dx,_$StatusLine
 33752                                          call    print           ;
 33753                                          mov     ah,3            ; get cursor position
 33754                                          int     10h             ;
 33755                                          sub     dl,2            ;
 33756                                          mov     [bLastCol],dl   ; save column where status char will go
 33757                                  
 33758                                  menu_nostatus:
 33759                                          mov     bx,1            ; now prepare to display all the menu items
 33760                                  menu_disploop:
 33761                                          call    print_item	; print item #BL
 33762                                          inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 33763                                          cmp     bl,[bMaxBlock]  ; all done?
 33764                                          jbe	short menu_disploop ; not yet
 33765                                  
 33766                                  ;   Set cursor position to just below the menu items
 33767                                  
 33768                                          mov     dl,0            ; select column
 33769                                          mov     dh,bl           ;
 33770                                          add     dh,4            ; select row below menu
 33771                                          mov     bh,[bMenuPage]  ;
 33772                                          mov     ah,02h          ; set cursor position beneath the block list
 33773                                          int     10h             ;
 33774                                  
 33775                                          mov     dx,_$MenuPrmpt
 33776                                          call    print           ;
 33777                                          call    select_item     ; make a selection, return # in BX
 33778                                          mov     dx,crlfm	
 33779                                          call    print           ;
 33780                                          push    word [bDisableUI]
 33781                                          or      byte [bDisableUI],1
 33782                                          call    show_status     ; clear the status line now
 33783                                          pop     word [bDisableUI]
 33784                                  
 33785                                  ;   Now begins the "re-organization" process...
 33786                                  
 33787                                  menu_autoselect:
 33788                                          cmp     bx,-1           ; clean boot requested?
 33789                                          jne	short normal_boot ; no
 33790                                          call    disable_autoexec; basically, add a /D to the command.com line
 33791                                  menu_abort:
 33792                                          sub     cx,cx           ; then immediately exit with 0 config.sys image
 33793                                          jmp	menu_exit	;
 33794                                  
 33795                                  normal_boot:
 33796                                          cmp     bx,-2           ; back to top-level menu?
 33797                                          jne	short not_topmenu ; no
 33798                                          mov     cx,[count]      ; yes, start all over
 33799                                          sub     si,si           ;
 33800                                          jmp     menu_search
 33801                                  
 33802                                  not_topmenu:
 33803                                          cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 33804                                          jne	short not_submenu
 33805                                          add     bx,bx           ;
 33806                                          mov     di,[aoffBlockName+bx]
 33807                                          call    srch_block      ; THIS CANNOT FAIL!
 33808                                          mov     si,di           ;
 33809                                          mov     cx,bx           ; ES:SI and CX are ready for another round
 33810                                          jmp     menu_found
 33811                                  
 33812                                  not_submenu:
 33813                                          add     bx,bx           ; get BX -> name of selected block
 33814                                          mov     bx,[aoffBlockName+bx]
 33815                                  
 33816                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 33817                                  ;   the offset relative to ES of the block name to be processed (along with
 33818                                  ;   all the "common" lines of course)
 33819                                  
 33820                                  no_selection:
 33821                                          mov     [offDefBlock],bx; save selection
 33822                                          mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 33823                                          sub     si,si           ;
 33824                                          push    ds              ;
 33825                                          mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 33826                                          sub     di,di           ;
 33827                                  
 33828                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 33829                                  ;
 33830                                  ;   Work our way through the config.sys image again, this time copying
 33831                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 33832                                  ;   within the requested block.  Lines inside INCLUDEd blocks are transparently
 33833                                  ;   copied by copy_block in a recursive fashion;  the amount of recursion is
 33834                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 33835                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 33836                                  ;
 33837                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 33838                                  ;   stack we're running on, then we should check it inside copy_block
 33839                                  
 33840                                  copyblock_loop:
 33841                                          push    bx              ; save selected block name
 33842                                          call    copy_block      ; process (named or common) block
 33843                                          pop     bx              ;
 33844                                          jc	short move_config ; hit eof
 33845                                  
 33846                                  ;   copy_block can only return for two reasons:  it hit eof or a new block
 33847                                  
 33848                                  copyblock_begin:
 33849                                          push    ax              ;
 33850                                          push    cx              ;
 33851                                          push    si              ;
 33852                                          push    di              ; always do "common" blocks
 33853                                          mov     di,szCommon
 33854                                          push    ds              ;
 33855                                          push    cs              ;
 33856                                          pop     ds              ;
 33857                                          call    comp_names      ;
 33858                                          pop     ds              ;
 33859                                          pop     di              ;
 33860                                          pop     si              ;
 33861                                          pop     cx              ;
 33862                                          pop     ax              ;
 33863                                          je	short copyblock_check
 33864                                          or      bx,bx           ; is there a block name to check?
 33865                                          jz	short copyblock_skip ; no
 33866                                          push    di              ;
 33867                                          mov     di,bx           ; check block against given block name
 33868                                          push    ds              ;
 33869                                          push    es              ;
 33870                                          pop     ds              ;
 33871                                          call    comp_names      ; is this the block we really want to do?
 33872                                          pop     ds              ;
 33873                                          pop     di              ;
 33874                                  copyblock_check:
 33875                                          jc	short move_config ; hit eof
 33876                                          jne	short copyblock_skip  ;
 33877                                          call    skip_opt_line   ;
 33878                                          jmp	short copyblock_loop 
 33879                                  
 33880                                  copyblock_skip:                 ;
 33881                                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 33882                                          call    get_char        ;
 33883                                          jc	short move_config ; hit eof
 33884                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33885                                          cmp     al,CONFIG_BEGIN ;
 33886                                          je	short copyblock_begin
 33887                                          jmp     short copyblock_skip ; anything else is just skipped
 33888                                  ;
 33889                                  ;   To create as little risk to the rest of SysInit as little as possible,
 33890                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 33891                                  ;   copy the new config.sys image to "confbot"
 33892                                  ;
 33893                                  move_config:
 33894                                          mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 33895                                          push    cx              ;
 33896                                  ;
 33897                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 33898                                  ;   since the configuration name only currently exists in the "confbot" area
 33899                                  ;
 33900                                   	;mov	cx,7
 33901                                  	mov     cx,szMenu-szBoot-1
 33902                                          mov     si,szBoot	; first copy the CONFIG= part
 33903                                          inc     di              ; skip a byte, in case absolutely nothing
 33904                                                                  ; was copied to the workspace, because we always
 33905                                                                  ; zero the first byte of the workspace (below)
 33906                                  copy_boot: 
 33907                                  	;lods    byte ptr cs:[si];
 33908                                          cs
 33909                                  	lodsb
 33910                                  	mov     [di],al         ;
 33911                                          inc     di              ;
 33912                                          loop    copy_boot       ;
 33913                                  
 33914                                          push    es              ; then copy the configuration name
 33915                                          mov     cx,128-7        ; put an upper limit on the name, to be safe
 33916                                          mov     si,[cs:offDefBlock]; ES:SI -> default block name
 33917                                          or      si,si           ; valid?
 33918                                          jnz	short l1	; yes
 33919                                          push    cs              ;
 33920                                          pop     es              ;
 33921                                          mov     si,szCommon
 33922                                  l1:     mov     al,[es:si]      ;
 33923                                          call    any_delim       ;
 33924                                          je	short l2	;
 33925                                          mov     [di],al         ;
 33926                                          inc     si              ;
 33927                                          inc     di              ;
 33928                                          loop    l1              ;
 33929                                  l2:     mov     byte [di],lf	; terminate the configuration string
 33930                                          pop     es              ;
 33931                                  
 33932                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 33933                                  
 33934                                          sub     di,di           ;
 33935                                          mov     [cs:config_envlen],di
 33936                                          sub     si,si           ;
 33937                                          pop     cx              ; recover the size of "config_wrkseg"
 33938                                  
 33939                                          push    cx              ;
 33940                                          rep     movsb           ; moved!
 33941                                          pop     cx              ;
 33942                                          mov     ax,ds           ;
 33943                                          pop     ds              ;
 33944                                  
 33945                                  ;   Now that the config_wrkseg is available once again, we shall
 33946                                  ;   use it to create an environment. The first thing to go in will be
 33947                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 33948                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 33949                                  ;   is empty.
 33950                                  
 33951                                          push    es              ;
 33952                                          mov     es,ax           ;
 33953                                          inc     si              ; ES:SI -> "CONFIG=configuration"
 33954                                          mov     byte [es:0],0	;empty the environment block
 33955                                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 33956                                          pop     es
 33957                                  
 33958                                  ;   Before returning, restore the default video page setting but do NOT
 33959                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 33960                                  ;   displayed on a different page, then it's because we don't want to see
 33961                                  ;   all the device driver/TSR goop (which goes to the default page)
 33962                                  
 33963                                  menu_done:
 33964                                          cmp     byte [bMenuPage],0
 33965                                          je	short menu_exit	;
 33966                                          push    es              ;
 33967                                          mov     ax,40h          ;
 33968                                          mov     es,ax           ;
 33969                                          mov     ax,[wCRTStart]  ;
 33970                                          mov     [es:004Eh],ax   ;
 33971                                          mov     al,[bCRTPage]   ;
 33972                                          mov     [es:0062h],al   ;
 33973                                          pop     es              ;
 33974                                  menu_exit:
 33975                                          mov     [count],cx      ; set new counts
 33976                                          mov     [org_count],cx  ;
 33977                                          sub     si,si           ; always return ES:SI pointing to config.sys
 33978                                          retn
 33979                                  
 33980                                  ;----------------------------------------------------------------------------
 33981                                  ;
 33982                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 33983                                  ;
 33984                                  ;   INPUT
 33985                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 33986                                  ;
 33987                                  ;   OUTPUT
 33988                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 33989                                  ;       carry set if error (eg, missing =); clear otherwise
 33990                                  ;
 33991                                  ;   OTHER REGS USED
 33992                                  ;       None
 33993                                  ;
 33994                                  ;   NOTES
 33995                                  ;       None
 33996                                  ;
 33997                                  ;   HISTORY
 33998                                  ;       Created 29-Mar-1992 by JeffPar
 33999                                  ;
 34000                                  ;----------------------------------------------------------------------------
 34001                                  
 34002                                  copy_envvar:
 34003                                          push    cx              ;
 34004                                          push    si              ;
 34005                                          push    ds              ;
 34006                                          push    es              ;
 34007                                          push    es              ;
 34008                                          mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 34009                                          pop     ds                 ; DS:SI to point to envvar
 34010                                  
 34011                                  ;   Have to calculate the length of the variable name (and if we hit
 34012                                  ;   the end of the line before we hit '=', then it's curtains for this
 34013                                  ;   config.sys line)
 34014                                  ;
 34015                                  ;   The check for NULL is important because copy_envvar is also used to copy
 34016                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 34017                                  ;   menu block existed (in order to prevent the creation of an environment)
 34018                                  
 34019                                          sub     cx,cx           ;
 34020                                  copy_varlen:                    ;
 34021                                          lodsb                   ;
 34022                                          or      al,al           ; NULL?
 34023                                          stc                     ;
 34024                                          jz	short copy_envexit ; yes, abort
 34025                                          cmp     al,cr          ;
 34026                                          stc                     ;
 34027                                          je	short copy_envexit
 34028                                          cmp     al,lf          ;
 34029                                          stc                     ;
 34030                                          je	short copy_envexit
 34031                                          inc     cx              ;
 34032                                          cmp     al,'='          ;
 34033                                          jne	short copy_varlen
 34034                                          mov     al,0            ;
 34035                                          mov     ah,[si]         ; save char after '='
 34036                                          sub     si,cx           ; back up to given varname
 34037                                          dec     cx              ; CX == # of bytes in varname
 34038                                          sub     di,di           ; start looking for DS:SI at ES:0
 34039                                  copy_varsrch:
 34040                                          cmp     byte [es:di],al
 34041                                          je	short copy_envprep ; search failed, just copy var
 34042                                          mov     bx,di           ; ES:BX -> start of this varname
 34043                                          push    cx              ;
 34044                                          push    si              ;
 34045                                          repe    cmpsb           ;
 34046                                          pop     si              ;
 34047                                          pop     cx              ;
 34048                                          jne	short copy_varnext ; no match, skip to next varname
 34049                                          cmp     byte [es:di],'='
 34050                                          jne     short copy_varnext ; no match, there's more characters
 34051                                  
 34052                                  ;   Previous occurrence of variable has been found; determine the
 34053                                  ;   entire length and then destroy it
 34054                                  
 34055                                          mov     cx,-1           ;
 34056                                          repne   scasb           ; guaranteed to get null (since we put it there)
 34057                                          push    si              ;
 34058                                          mov     si,di           ;
 34059                                          mov     di,bx           ;
 34060                                          mov     cx,[cs:config_envlen]
 34061                                          sub     cx,si           ; destroy variable now
 34062                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 34063                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO:SYS - SYSINIT:4724h
 34064                                  
 34065                                  	rep	; 0F3h
 34066                                  	es	; 26h
 34067                                  	movsb	; 0A4h
 34068                                  
 34069                                  	pop     si
 34070                                  copy_envprep:
 34071                                          cmp     ah,cr          ; if there is nothing after the '='
 34072                                          je	short copy_envdel ; then just exit with variable deleted
 34073                                          cmp     ah,lf           ;
 34074                                          je	short copy_envdel
 34075                                          jmp     short copy_envloop
 34076                                  
 34077                                  copy_varnext:                   ;
 34078                                          push    cx              ;
 34079                                          mov     cx,-1           ;
 34080                                          repne   scasb           ;
 34081                                          pop     cx              ;
 34082                                          jmp	short copy_varsrch
 34083                                  
 34084                                  copy_envloop:                   ;
 34085                                          lodsb                   ;
 34086                                          cmp     al,cr           ;
 34087                                          je	short copy_envdone
 34088                                          cmp     al,lf           ;
 34089                                          je	short copy_envdone
 34090                                          stosb                   ;
 34091                                          jmp     short copy_envloop
 34092                                  
 34093                                  copy_envdone:                   ;
 34094                                          sub     al,al           ; do SUB to clear carry as well
 34095                                          stosb                   ; always null-terminate these puppies
 34096                                  copy_envdel:                    ;
 34097                                          mov     [es:di],al      ; and stick another null to terminate the env.
 34098                                          mov     [cs:config_envlen],di
 34099                                  
 34100                                  copy_envexit:                   ;
 34101                                          pop     es              ;
 34102                                          pop     ds              ;
 34103                                          pop     si              ;
 34104                                          pop     cx              ;
 34105                                  
 34106                                  copy_done:	; 18/12/2022
 34107                                          retn
 34108                                  
 34109                                  ;----------------------------------------------------------------------------
 34110                                  ;
 34111                                  ;   copy_block:  copy the current block to the new config.sys workspace
 34112                                  ;
 34113                                  ;   INPUT
 34114                                  ;       CX == remaining bytes in "organized" config.sys memory image
 34115                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 34116                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 34117                                  ;             config.sys image) where the current block is to be copied
 34118                                  ;
 34119                                  ;   OUTPUT
 34120                                  ;       Same as above
 34121                                  ;       AL also equals the last character read from the organized image
 34122                                  ;
 34123                                  ;   OTHER REGS USED
 34124                                  ;       All
 34125                                  ;
 34126                                  ;   NOTES
 34127                                  ;       None
 34128                                  ;
 34129                                  ;   HISTORY
 34130                                  ;       Created 16-Mar-1992 by JeffPar
 34131                                  ;
 34132                                  ;----------------------------------------------------------------------------
 34133                                  
 34134                                  copy_block:
 34135                                          call    get_char        ; check for include
 34136                                          jc	short copy_done	;
 34137                                  	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34138                                  	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 34139                                          je	short copy_done ;
 34140                                  
 34141                                          cmp     al,CONFIG_INCLUDE ; 'J'
 34142                                          mov     al,ah           ; AL == the original line code
 34143                                          jne	short copy_line	; not an "include" line
 34144                                  
 34145                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 34146                                  ;   never try to include the block again (no infinite include loops please),
 34147                                  ;   then search for the named block and call copy_block again.
 34148                                  
 34149                                          mov     byte [es:si-1],CONFIG_REM ; '0'
 34150                                          push    di              ;
 34151                                  
 34152                                          mov     di,szMenu
 34153                                          call    comp_names_safe ; don't allow INCLUDE MENU
 34154                                          je	short copy_skip	;
 34155                                  
 34156                                          mov     di,szCommon
 34157                                          call    comp_names_safe ; don't allow INCLUDE COMMON
 34158                                          je	short copy_skip	;
 34159                                  
 34160                                          mov     di,si           ; try to find the block
 34161                                          call    srch_block      ;
 34162                                          mov     dx,di           ;
 34163                                          pop     di              ;
 34164                                          jne	short copy_error ; no such block
 34165                                          push    cx              ;
 34166                                          mov     cx,bx           ;
 34167                                          push    si              ;
 34168                                          dec     dx              ;
 34169                                          mov     si,dx           ;
 34170                                          call    skip_line       ; skip the rest of the "block name" line
 34171                                          call    copy_block      ; and copy in the rest of that block
 34172                                          pop     si              ;
 34173                                          pop     cx              ;
 34174                                          sub     al,al           ; force skip_opt_line to skip...
 34175                                          jmp     short copy_nextline
 34176                                  
 34177                                  copy_skip:
 34178                                          pop     di
 34179                                  copy_error:
 34180                                          clc                     ;
 34181                                          call    print_error     ; note that carry is clear, no pause
 34182                                          jmp     short copy_nextline
 34183                                  
 34184                                  ;   Copy the line at ES:SI to the current location at DS:DI
 34185                                  
 34186                                  copy_line:
 34187                                          mov     [di],al         ;
 34188                                          inc     di              ;
 34189                                          cmp     al,' '          ; is this is a "real" line with a "real" code?
 34190                                          jb	short copy_nextline ; no
 34191                                          cmp     byte [cs:config_multi],0
 34192                                          je	short copy_loop	; not a multi-config config.sys, don't embed #s
 34193                                          call    get_linenum	; BX == line # of line @ES:SI
 34194                                          mov     [di],bx         ; stash it immediately following the line code
 34195                                          inc     di              ;
 34196                                          inc     di              ;
 34197                                          jmp     short copy_next ;
 34198                                  copy_loop:                      ;
 34199                                          call    get_char        ;
 34200                                          jc	short copy_done ; end of file
 34201                                          mov     [di],al         ;
 34202                                          inc     di              ;
 34203                                  copy_next:
 34204                                          cmp     al,lf ; 0Ah	; done with line?
 34205                                          jne	short copy_loop	; nope
 34206                                  
 34207                                  copy_nextline:
 34208                                          call    skip_opt_line   ;
 34209                                          jmp     short copy_block
 34210                                  
 34211                                  	; 18/12/2022
 34212                                  ;copy_done:
 34213                                          ;retn
 34214                                  
 34215                                  ;----------------------------------------------------------------------------
 34216                                  ;
 34217                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 34218                                  ;
 34219                                  ;   INPUT
 34220                                  ;    ES:SI -> some line in the config.sys memory image
 34221                                  ;
 34222                                  ;   OUTPUT
 34223                                  ;       BX == line # (relative to 1)
 34224                                  ;
 34225                                  ;   OTHER REGS USED
 34226                                  ;       DX
 34227                                  ;
 34228                                  ;   NOTES
 34229                                  ;       None
 34230                                  ;
 34231                                  ;   HISTORY
 34232                                  ;       Created 16-Mar-1992 by JeffPar
 34233                                  ;
 34234                                  ;----------------------------------------------------------------------------
 34235                                  
 34236                                  get_linenum:
 34237                                          push    ax              ;
 34238                                          sub     bx,bx           ; BX == line # (to be returned)
 34239                                          push    cx              ;
 34240                                          mov     dx,si           ; DX == the offset we're looking for
 34241                                          push    si              ;
 34242                                          mov     cx,[cs:count]   ;
 34243                                          sub     si,si           ; prepare to scan entire file
 34244                                  get_linenum_loop:               ;
 34245                                          call    skip_line       ;
 34246                                          jc	short get_linenum_done
 34247                                          inc     bx              ;
 34248                                          cmp     si,dx           ; have we exceeded the desired offset yet?
 34249                                          jb	short get_linenum_loop ; no
 34250                                  get_linenum_done:               ;
 34251                                          pop     si              ;
 34252                                          pop     cx              ;
 34253                                          pop     ax              ;
 34254                                          retn
 34255                                  
 34256                                  ;----------------------------------------------------------------------------
 34257                                  ;
 34258                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 34259                                  ;
 34260                                  ;   INPUT
 34261                                  ;       ES -> config.sys image
 34262                                  ;    ES:DI -> block name to find
 34263                                  ;
 34264                                  ;   OUTPUT
 34265                                  ;       ZF flag set, if found
 34266                                  ;    ES:DI -> just past the name in the block heading, if found
 34267                                  ;       BX == # bytes remaining from that point, if found
 34268                                  ;
 34269                                  ;   OTHER REGS USED
 34270                                  ;       None
 34271                                  ;
 34272                                  ;   NOTES
 34273                                  ;       This differs from "find_block" in that it searches the ENTIRE
 34274                                  ;       config.sys image, not merely the remaining portion, and that it
 34275                                  ;       takes a pointer to block name that is *elsewhere* in the image
 34276                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 34277                                  ;
 34278                                  ;   HISTORY
 34279                                  ;       Created 16-Mar-1992 by JeffPar
 34280                                  ;
 34281                                  ;----------------------------------------------------------------------------
 34282                                  
 34283                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 34284                                          push    ax              ;
 34285                                          push    cx              ;
 34286                                          mov     cx,[cs:count]   ;
 34287                                          push    si              ;
 34288                                          sub     si,si           ;
 34289                                          push    ds              ;
 34290                                          push    es              ;
 34291                                          pop     ds              ;
 34292                                          call    find_block      ;
 34293                                          mov     di,si           ;
 34294                                          mov     bx,cx           ;
 34295                                          pop     ds              ;
 34296                                          pop     si              ;
 34297                                          pop     cx              ;
 34298                                          pop     ax              ;
 34299                                  find_exit: ; 16/04/2019
 34300                                          retn			;
 34301                                  
 34302                                  ;----------------------------------------------------------------------------
 34303                                  ;
 34304                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 34305                                  ;
 34306                                  ;   INPUT
 34307                                  ;    DS:DI -> block name to find
 34308                                  ;    ES:SI -> remainder of config.sys image
 34309                                  ;       CX == remaining size of config.sys image
 34310                                  ;
 34311                                  ;   OUTPUT
 34312                                  ;       ZF flag set, if found (also, CF set if EOF)
 34313                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 34314                                  ;       CX == # bytes remaining from that point
 34315                                  ;
 34316                                  ;   OTHER REGS USED
 34317                                  ;       AX
 34318                                  ;
 34319                                  ;   NOTES
 34320                                  ;       This differs from "srch_block" in that it searches only the
 34321                                  ;       remaining portion of the config.sys image and leaves SI and CX
 34322                                  ;       pointing to where the search left off, and that it takes a pointer
 34323                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 34324                                  ;
 34325                                  ;   HISTORY
 34326                                  ;       Created 16-Mar-1992 by JeffPar
 34327                                  ;
 34328                                  ;----------------------------------------------------------------------------
 34329                                  
 34330                                  find_block:
 34331                                          call    get_char        ; get line code
 34332                                          jc	short find_exit	; end of file
 34333                                          and     al,~CONFIG_OPTION_QUERY
 34334                                          cmp     al,CONFIG_BEGIN ; beginning of a block?
 34335                                          je	short check_line ; no
 34336                                          cmp     al,CONFIG_INCLUDE
 34337                                          jne	short next_line	;
 34338                                          or	byte [cs:config_multi],1
 34339                                          jmp     short next_line ;
 34340                                  check_line:
 34341                                          or      byte [cs:config_multi],1
 34342                                          call    comp_names      ; compare block names
 34343                                          jbe	short find_exit	; end of file, or names matched
 34344                                  next_line:
 34345                                          call    skip_opt_line   ; no, so skip to next line
 34346                                          jmp	short find_block  ;
 34347                                  ;find_exit:
 34348                                  ;	retn
 34349                                  
 34350                                  ;----------------------------------------------------------------------------
 34351                                  ;
 34352                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 34353                                  ;
 34354                                  ;   INPUT
 34355                                  ;    DS:DI -> keyword to compare
 34356                                  ;    ES:SI -> position in config.sys
 34357                                  ;       CX == remaining bytes in config.sys
 34358                                  ;
 34359                                  ;   OUTPUT
 34360                                  ;       ZF flag set, if match (also, CF set if EOF)
 34361                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 34362                                  ;       CX == # bytes remaining from that point
 34363                                  ;
 34364                                  ;   OTHER REGS USED
 34365                                  ;       AX
 34366                                  ;
 34367                                  ;   NOTES
 34368                                  ;       None
 34369                                  ;
 34370                                  ;   HISTORY
 34371                                  ;       Created 16-Mar-1992 by JeffPar
 34372                                  ;
 34373                                  ;----------------------------------------------------------------------------
 34374                                  
 34375                                  comp_names:
 34376                                          push    di              ;
 34377                                  comp_loop:                      ;
 34378                                          call    get_char        ;
 34379                                          jc	short comp_exit	;
 34380                                          call    any_delim       ; is next character a delimiter?
 34381                                          mov     ah,[di]         ; (get next character we're supposed to match)
 34382                                          je	short comp_almost ; yes, it *could* be a match
 34383                                          inc     di              ;
 34384                                          and     ax,~2020h ; 0DFDFh 
 34385                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 34386                                          cmp     al,ah           ; match?
 34387                                          je	short comp_loop ; yes, keep looking at the characters
 34388                                          clc                     ; prevent erroneous eof indication: clear carry
 34389                                  comp_exit:                      ;
 34390                                          pop     di              ;
 34391                                          retn			;
 34392                                  comp_almost:                    ;
 34393                                          xchg    al,ah           ; we don't know for sure if it's a match
 34394                                          call    any_delim       ; until we verify that the second string has
 34395                                          xchg    al,ah           ; been exhausted also...
 34396                                          jmp     comp_exit       ; if we are, this call to any_delim will tell...
 34397                                  
 34398                                  ;----------------------------------------------------------------------------
 34399                                  
 34400                                  comp_names_safe:
 34401                                          push    ax
 34402                                          push    cx
 34403                                          push	si
 34404                                          push    ds
 34405                                          push    cs
 34406                                          pop     ds
 34407                                          call    comp_names
 34408                                          pop     ds
 34409                                  	pop	si
 34410                                          pop     cx
 34411                                          pop     ax
 34412                                          retn
 34413                                  
 34414                                  ;----------------------------------------------------------------------------
 34415                                  ;
 34416                                  ;   print_item:  display menu item #BL
 34417                                  ;
 34418                                  ;   INPUT
 34419                                  ;       BL == menu item # to display
 34420                                  ;
 34421                                  ;   OUTPUT
 34422                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 34423                                  ;
 34424                                  ;   OTHER REGS USED
 34425                                  ;       None
 34426                                  ;
 34427                                  ;   NOTES
 34428                                  ;       This function saves/restores the current cursor position, so you
 34429                                  ;       needn't worry about it.
 34430                                  ;
 34431                                  ;   HISTORY
 34432                                  ;       Created 16-Mar-1992 by JeffPar
 34433                                  ;
 34434                                  ;----------------------------------------------------------------------------
 34435                                  
 34436                                  print_item:		; prints menu item #BL (1 to N)
 34437                                          push    ax              ;
 34438                                          push    bx              ;
 34439                                          push    cx              ;
 34440                                          push    dx              ;
 34441                                          push    si              ;
 34442                                          mov     ah,03h          ; get cursor position
 34443                                          mov     bh,[bMenuPage]  ; always page zero
 34444                                          int     10h             ; DH/DL = row/column
 34445                                          push    dx              ; save it
 34446                                          mov     ah,02h          ; set cursor position
 34447                                          mov     dh,bl           ;
 34448                                          add     dh,3            ;
 34449                                          mov     dl,5            ;
 34450                                          int     10h             ; set cursor position for correct row/col
 34451                                          mov     al,bl           ;
 34452                                          add     al,'0'          ; convert menu item # to ASCII digit
 34453                                          mov     ah,[bMenuColor] ; normal attribute
 34454                                          cmp     bl,[bDefBlock]  ; are we printing the current block?
 34455                                          jne	short print_other ; no
 34456                                          or      ah,70h          ; yes, set bgnd color to white
 34457                                          mov     ch,ah           ;
 34458                                          mov     cl,4            ;
 34459                                          rol     ch,cl           ;
 34460                                          cmp     ch,ah           ; are fgnd/bgnd the same?
 34461                                          jne	short print_other ; no
 34462                                          xor     ah,08h          ; yes, so modify the fgnd intensity
 34463                                  print_other:                    ;
 34464                                          mov     bh,0            ;
 34465                                          add     bx,bx           ;
 34466                                          mov     di,[aoffBlockDesc+bx]
 34467                                          mov     bl,ah           ; put the attribute in the correct register now
 34468                                          mov     bh,[bMenuPage]  ; get correct video page #
 34469                                          mov     ah,09h          ; write char/attr
 34470                                          mov     cx,1            ;
 34471                                          int     10h             ;
 34472                                          inc     dl              ; increment column
 34473                                          mov     ah,02h          ;
 34474                                          int     10h             ;
 34475                                          ;mov	ax,0900h+'.'    ;
 34476                                          mov	ax,092Eh
 34477                                  	int     10h             ; display '.'
 34478                                          inc     dl              ; increment column
 34479                                          mov     ah,02h          ;
 34480                                          int     10h             ;
 34481                                          ;mov	ax,0900h+' '    ;
 34482                                          mov	ax,0920h
 34483                                  	int     10h             ; display ' '
 34484                                          inc     dl              ; increment column
 34485                                          mov     ah,02h          ;
 34486                                          int     10h             ;
 34487                                          push    es              ;
 34488                                  print_loop:                     ;
 34489                                          mov     al,[es:di]	; get a character of the description
 34490                                          inc     di              ;
 34491                                          cmp     al,TAB ; 9	; substitute spaces for tabs
 34492                                          jne	short print_nontab ;
 34493                                          mov     al,' '          ;
 34494                                  print_nontab:                   ;
 34495                                          cmp     al,' '          ;
 34496                                          jb	short print_done ; stop at the 1st character < space
 34497                                          cmp     al,'$'          ;
 34498                                          je	short print_done ; also stop on $
 34499                                          mov     ah,09h          ; display function #
 34500                                          int     10h             ;
 34501                                          inc     dl              ; increment column
 34502                                          cmp     dl,78           ; far enough?
 34503                                          jae	short print_done ; yes
 34504                                          mov     ah,02h          ;
 34505                                          int     10h             ;
 34506                                          jmp     print_loop      ;
 34507                                  print_done:                     ;
 34508                                          pop     es              ;
 34509                                          pop     dx              ;
 34510                                          mov     ah,02h          ;
 34511                                          int     10h             ; restore previous row/col
 34512                                          pop     si              ;
 34513                                          pop     dx              ;
 34514                                          pop     cx              ;
 34515                                          pop     bx              ;
 34516                                          pop     ax              ;
 34517                                          retn			;
 34518                                  
 34519                                  ;----------------------------------------------------------------------------
 34520                                  ;
 34521                                  ;   select_item:  wait for user to select menu item, with time-out
 34522                                  ;
 34523                                  ;   INPUT
 34524                                  ;       None
 34525                                  ;
 34526                                  ;   OUTPUT
 34527                                  ;       BX == menu item # (1-N), or -1 for clean boot
 34528                                  ;       Selected menu item highlighted
 34529                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 34530                                  ;
 34531                                  ;   OTHER REGS USED
 34532                                  ;       None
 34533                                  ;
 34534                                  ;   NOTES
 34535                                  ;       None
 34536                                  ;
 34537                                  ;   HISTORY
 34538                                  ;       Created 16-Mar-1992 by JeffPar
 34539                                  ;
 34540                                  ;----------------------------------------------------------------------------
 34541                                  
 34542                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 34543                                          mov     bl,[bDefBlock]  ; BL will be the default block #
 34544                                          mov     al,bl           ;
 34545                                          call    disp_num        ;
 34546                                          call    show_status     ; display current interactive status
 34547                                          cmp     byte [secTimeOut],-1
 34548                                          je	short input_key	; no time-out, just go to input
 34549                                          mov     ah,GET_TIME ; 2Ch
 34550                                          int     21h             ;
 34551                                          mov     bh,dh           ; BH = initial # of seconds
 34552                                  check_time:
 34553                                          mov     al,[secTimeOut] ;
 34554                                          sub     al,[secElapsed] ;
 34555                                          jae	short show_time	;
 34556                                          or      byte [bQueryOpt],2  ; disable all further prompting
 34557                                          mov     byte [secElapsed],0
 34558                                          jmp	select_done	; time's up!
 34559                                  show_time:
 34560                                          push    bx              ;
 34561                                          mov     bl,al           ; save # in BL
 34562                                          mov     bh,[bMenuPage]  ;
 34563                                          mov     ah,03h          ; get cursor position
 34564                                          int     10h             ;
 34565                                          push    dx              ;
 34566                                  	add	dl,8		; move cursor to the right
 34567                                          mov     ah,02h          ; set cursor position
 34568                                          int     10h             ;
 34569                                          mov     dx,_$TimeOut
 34570                                          call    print           ; print the "Time remaining: " prompt
 34571                                          mov     al,bl           ; recover # from BL
 34572                                          cbw                     ; this works because AL is always <= 90
 34573                                          mov     cl,10           ;
 34574                                          div     cl              ; AL = tens digit, AH = ones digit
 34575                                          mov     cl,ah           ;
 34576                                          add     al,'0'          ;
 34577                                          mov     ah,0Eh          ;
 34578                                          int     10h             ; write TTY tens digit
 34579                                          mov     al,cl           ;
 34580                                          add     al,'0'          ;
 34581                                          mov     ah,0Eh          ;
 34582                                          int     10h             ; write TTY ones digit
 34583                                          pop     dx
 34584                                          mov     ah,02h          ; set cursor position back to where it was
 34585                                          int     10h             ;
 34586                                          pop     bx              ;
 34587                                  input_key:
 34588                                          mov     ah,RAW_CON_IO ; 6
 34589                                          mov     dl,0FFh         ; input request
 34590                                          int     21h             ;
 34591                                          jnz	short got_key	;
 34592                                          cmp     byte [secTimeOut],-1; is there a time-out?
 34593                                          je	short input_key	; no, just go back to input
 34594                                          mov     ah,GET_TIME     ;
 34595                                          int     21h             ; DH = seconds
 34596                                          mov     ah,dh           ;
 34597                                          sub     dh,bh           ; should generally be zero or one
 34598                                          mov     bh,ah           ;
 34599                                          jnc	short got_time	;
 34600                                          mov     dh,1            ; it wrapped back to zero, so assume one
 34601                                  got_time:
 34602                                          or      dh,dh           ; any change?
 34603                                          jz	short input_key	; no
 34604                                          add     [secElapsed],dh ;
 34605                                          jmp	short check_time ;
 34606                                  got_key:
 34607                                          push    ax              ;
 34608                                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 34609                                          xchg    [secTimeOut],ax
 34610                                          cmp     al,-1           ; was time-out already disabled?
 34611                                          je	short timeout_disabled ; yes
 34612                                          push    bx              ; let's disable # seconds display
 34613                                          mov     ax,0A20h        ; write multiple spaces
 34614                                          mov     bx,[bMenuColor]
 34615                                          mov     cx,80           ; 80 of them, to be safe
 34616                                          int     10h             ; to completely obliterate # seconds display
 34617                                          pop     bx   		;
 34618                                  
 34619                                  timeout_disabled:
 34620                                          pop     ax              ;
 34621                                          or      al,al           ; extended key pressed?
 34622                                          jnz	short normal_key ; no
 34623                                          int     21h             ; get the next part of the key then
 34624                                          jz	short input_key	; hmmm, what happened to the second part?
 34625                                  
 34626                                          cmp     al,48h          ; up arrow?
 34627                                          jne	short not_up	; no
 34628                                          cmp     bl,1            ; are we as up as up can get?
 34629                                          jbe	short input_key	; yes, ignore it
 34630                                          dec     byte [bDefBlock] ;
 34631                                          call    print_item      ; re-print the current item
 34632                                          dec     bl              ; and then print the new current item
 34633                                          jmp     short print1
 34634                                  not_up:
 34635                                          cmp     al,50h          ; down arrow?
 34636                                          jne	short not_down	; no
 34637                                          cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 34638                                          jae	short to_input_key ; yes, ignore it
 34639                                          inc     byte [bDefBlock] ;
 34640                                          call    print_item      ; re-print the current item
 34641                                          inc     bx              ; and then print the new current item
 34642                                  print1: 
 34643                                  	mov     al,bl           ;
 34644                                  print2: 
 34645                                  	call    print_item      ;
 34646                                          call    disp_num        ;
 34647                                  to_input_key:
 34648                                          jmp     input_key       ;
 34649                                  not_down:
 34650                                          test    byte [bDisableUI],1
 34651                                          jnz	short to_input_key ; don't allow F8 or F5
 34652                                          cmp     al,42h          ; F8 function key?
 34653                                          jne	short not_f8	; no
 34654                                          xor     byte [bQueryOpt],1
 34655                                          call    show_status     ;
 34656                                          jmp     input_key	;
 34657                                  not_f8:
 34658                                          cmp     al,3Fh          ; F5 function key?
 34659                                          jne	short to_input_key ; no
 34660                                          mov     bx,-1           ; special return code (-1) indicating clean boot
 34661                                          mov     al,' '          ; don't want to display anything really;
 34662                                          jmp     short disp_input; just want to display the cr/lf sequence...
 34663                                  
 34664                                  normal_key:
 34665                                          cmp     al,0Dh          ; Enter?
 34666                                          je	short select_done ; yes
 34667                                          cmp     al,08h          ; backspace?
 34668                                          jne	short not_backspace ; no
 34669                                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 34670                                          retn			;
 34671                                  not_backspace:
 34672                                          sub     al,'0'          ; is greater than '0'?
 34673                                          jbe	short to_input_key ; no
 34674                                          cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 34675                                          ja	short to_input_key ; no
 34676                                          mov	[bDefBlock],al  ;
 34677                                          call    print_item      ; redisplay the current selection
 34678                                          mov     bl,al           ; set new selection
 34679                                          jmp	short print2
 34680                                  
 34681                                  select_done:
 34682                                          mov     bh,0            ; return a full 16-bit value (for indexing)
 34683                                          mov     al,bl           ;
 34684                                          add     al,'0'          ; convert it into a digit, then display it
 34685                                  
 34686                                  	; fall into disp_input
 34687                                  
 34688                                  ; 16/04/2019 - Retro DOS v4.0
 34689                                  
 34690                                  ;----------------------------------------------------------------------------
 34691                                  ;
 34692                                  ;   disp_input:  display a single character + cr/lf
 34693                                  ;
 34694                                  ;   INPUT
 34695                                  ;       AL == character to display
 34696                                  ;
 34697                                  ;   OUTPUT
 34698                                  ;       None
 34699                                  ;
 34700                                  ;   OTHER REGS USED
 34701                                  ;       None
 34702                                  ;
 34703                                  ;   NOTES
 34704                                  ;       This function is used not only for the menu input selection but
 34705                                  ;       also for the interactive line prompting (the y/n/a thing).
 34706                                  ;
 34707                                  ;   HISTORY
 34708                                  ;       Created 16-Mar-1992 by JeffPar
 34709                                  ;
 34710                                  ;----------------------------------------------------------------------------
 34711                                  
 34712                                  disp_input:
 34713                                          push    ax
 34714                                          cmp     al,' '
 34715                                          jae	short disp_ok
 34716                                          mov     al,' '
 34717                                  disp_ok:
 34718                                          mov     dl,al
 34719                                          mov     ah,STD_CON_OUTPUT ; 2
 34720                                          int     21h
 34721                                          mov     dx,crlfm
 34722                                          call    print
 34723                                          pop     ax
 34724                                          retn
 34725                                  
 34726                                  ;----------------------------------------------------------------------------
 34727                                  
 34728                                  disp_num:
 34729                                          push    bx
 34730                                          add     al,'0'
 34731                                          mov     ah,0Ah
 34732                                          mov     bx,[bMenuColor]
 34733                                          mov     cx,1
 34734                                          int     10h
 34735                                          pop     bx
 34736                                          retn
 34737                                  
 34738                                  ;----------------------------------------------------------------------------
 34739                                  ;
 34740                                  ;   show_status:  display current interactive mode setting (on/off/none)
 34741                                  ;
 34742                                  ;   INPUT
 34743                                  ;       None
 34744                                  ;
 34745                                  ;   OUTPUT
 34746                                  ;       None
 34747                                  ;
 34748                                  ;   OTHER REGS USED
 34749                                  ;       None
 34750                                  ;
 34751                                  ;   NOTES
 34752                                  ;       None
 34753                                  ;
 34754                                  ;   HISTORY
 34755                                  ;       Created 16-Mar-1992 by JeffPar
 34756                                  ;
 34757                                  ;----------------------------------------------------------------------------
 34758                                  
 34759                                  show_status:
 34760                                          push    bx              ; BL = video page #
 34761                                          mov     bx,[bMenuColor]
 34762                                          mov     ah,03h          ; get cursor position
 34763                                          int     10h             ;
 34764                                          push    dx              ; save it
 34765                                          mov     ah,02h          ; set cursor position
 34766                                          mov     dx,[bLastCol]   ; set correct row/col
 34767                                          test    byte [bDisableUI],1
 34768                                          jz	short show_onoff ; just show on/off
 34769                                          mov     dl,0            ;
 34770                                          int     10h             ;
 34771                                          mov     ax,0A20h        ; write multiple spaces
 34772                                          mov     cx,80           ; 80 of them, to be exact
 34773                                          int     10h             ; to obliterate the status line
 34774                                          jmp     short show_done ;
 34775                                  show_onoff: 
 34776                                          int     10h
 34777                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 34778                                  		; AL = character, BH = display page - alpha mode
 34779                                  		; BL = color of character (graphics mode, PCjr only)
 34780                                  		; CX = number of times to write character
 34781                                  
 34782                                          mov     al,[_$NO]	; assume OFF
 34783                                          cmp     byte [bQueryOpt],1 ; is interactive mode on?
 34784                                          jne	short show_noton ; no
 34785                                          mov     al,[_$YES]	; yes
 34786                                  show_noton:                     ;
 34787                                          mov     ah,0Eh          ; write TTY
 34788                                          int     10h             ;
 34789                                  show_done:                      ;
 34790                                          pop     dx              ;
 34791                                          mov     ah,02h          ;
 34792                                          int     10h             ; restore original cursor position
 34793                                          pop     bx              ;
 34794                                          retn			;
 34795                                  
 34796                                  ; 16/04/2019 - Retro DOS v4.0
 34797                                  
 34798                                  ;----------------------------------------------------------------------------
 34799                                  ;
 34800                                  ;   skip_token: advances ES:SI/CX past the current token
 34801                                  ;
 34802                                  ;   INPUT
 34803                                  ;    ES:SI -> position in config.sys
 34804                                  ;       CX == remaining bytes in config.sys
 34805                                  ;
 34806                                  ;   OUTPUT
 34807                                  ;       CF set if EOL/EOF hit
 34808                                  ;       AL == 1st char of delimiter
 34809                                  ;    ES:SI -> just past the delimiter
 34810                                  ;       CX == # bytes remaining from that point
 34811                                  ;
 34812                                  ;   OTHER REGS USED
 34813                                  ;       AX
 34814                                  ;
 34815                                  ;   NOTES
 34816                                  ;       None
 34817                                  ;
 34818                                  ;   HISTORY
 34819                                  ;       Created 16-Mar-1992 by JeffPar
 34820                                  ;
 34821                                  ;----------------------------------------------------------------------------
 34822                                  
 34823                                  skip_token:
 34824                                          call    get_char
 34825                                          jc	short skip_token_done
 34826                                          call    any_delim
 34827                                          jne	short skip_token
 34828                                  skip_check_eol:
 34829                                          cmp     al,cr ; 0Dh
 34830                                          je	short skip_token_eol
 34831                                          cmp     al,lf ; 0Ah
 34832                                          je	short skip_token_eol
 34833                                          clc
 34834                                          ;jmp	short skip_token_done
 34835                                  	retn
 34836                                  skip_token_eol:
 34837                                          stc
 34838                                  skip_token_done:
 34839                                          retn
 34840                                  
 34841                                  ;----------------------------------------------------------------------------
 34842                                  ;
 34843                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 34844                                  ;
 34845                                  ;   INPUT
 34846                                  ;    ES:SI -> position in config.sys
 34847                                  ;       CX == remaining bytes in config.sys
 34848                                  ;
 34849                                  ;   OUTPUT
 34850                                  ;       CF set if EOF hit
 34851                                  ;       AL == 1st char of token
 34852                                  ;    ES:SI -> just past the token
 34853                                  ;       CX == # bytes remaining from that point
 34854                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 34855                                  ;
 34856                                  ;   OTHER REGS USED
 34857                                  ;       AX
 34858                                  ;
 34859                                  ;   NOTES
 34860                                  ;       None
 34861                                  ;
 34862                                  ;   HISTORY
 34863                                  ;       Created 16-Mar-1992 by JeffPar
 34864                                  ;
 34865                                  ;----------------------------------------------------------------------------
 34866                                  
 34867                                  skip_delim:       ; returns carry set if eol/eof
 34868                                          call    get_char        ;
 34869                                          lea     bx,[si-1]       ; also returns BX -> next token
 34870                                          jc	short skip_token_done ;
 34871                                          call    delim           ;
 34872                                          je	short skip_delim ;
 34873                                          jmp	short skip_check_eol  ; 13/05/2019
 34874                                  
 34875                                  ;----------------------------------------------------------------------------
 34876                                  ;
 34877                                  ;   skip_opt_line: same as skip_line provided AL != LF
 34878                                  ;
 34879                                  ;   INPUT
 34880                                  ;       AL == last character read
 34881                                  ;    ES:SI -> position in config.sys
 34882                                  ;       CX == remaining bytes in config.sys
 34883                                  ;
 34884                                  ;   OUTPUT
 34885                                  ;       CF set if EOF hit
 34886                                  ;       AL == 1st char of new line
 34887                                  ;    ES:SI -> just past 1st char of new line
 34888                                  ;       CX == # bytes remaining from that point
 34889                                  ;
 34890                                  ;   OTHER REGS USED
 34891                                  ;       AX
 34892                                  ;
 34893                                  ;   NOTES
 34894                                  ;       In other words, the purpose here is to skip to the next line,
 34895                                  ;       unless ES:SI is already sitting at the front of the next line (which
 34896                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 34897                                  ;
 34898                                  ;   HISTORY
 34899                                  ;       Created 16-Mar-1992 by JeffPar
 34900                                  ;
 34901                                  ;----------------------------------------------------------------------------
 34902                                  
 34903                                  skip_opt_line:
 34904                                          cmp     al,lf ; 0Ah
 34905                                          je	short skip_line_done
 34906                                       
 34907                                  	; fall into skip_line
 34908                                  
 34909                                  ;----------------------------------------------------------------------------
 34910                                  ;
 34911                                  ;   skip_line: skip to the next line
 34912                                  ;
 34913                                  ;   INPUT
 34914                                  ;    ES:SI -> position in config.sys
 34915                                  ;       CX == remaining bytes in config.sys
 34916                                  ;
 34917                                  ;   OUTPUT
 34918                                  ;       CF set if EOF hit
 34919                                  ;    ES:SI -> just past 1st char of new line
 34920                                  ;       CX == # bytes remaining from that point
 34921                                  ;
 34922                                  ;   OTHER REGS USED
 34923                                  ;       AX
 34924                                  ;
 34925                                  ;   NOTES
 34926                                  ;       None
 34927                                  ;
 34928                                  ;   HISTORY
 34929                                  ;       Created 16-Mar-1992 by JeffPar
 34930                                  ;
 34931                                  ;----------------------------------------------------------------------------
 34932                                  
 34933                                  skip_line:
 34934                                          call    get_char
 34935                                          jc	short skip_line_done
 34936                                          cmp     al,lf ; 0Ah
 34937                                          jne	short skip_line
 34938                                  skip_line_done:
 34939                                  num_done:	; 18/12/2022
 34940                                          retn
 34941                                  
 34942                                  ;----------------------------------------------------------------------------
 34943                                  ;
 34944                                  ;   get_number: return binary equivalent of numeric string
 34945                                  ;
 34946                                  ;   INPUT
 34947                                  ;    ES:SI -> position in config.sys
 34948                                  ;       CX == remaining bytes in config.sys
 34949                                  ;
 34950                                  ;   OUTPUT
 34951                                  ;       AL == non-digit encountered
 34952                                  ;       BX == binary #
 34953                                  ;    ES:SI -> just past 1st non-digit
 34954                                  ;       CX == # bytes remaining from that point
 34955                                  ;
 34956                                  ;   OTHER REGS USED
 34957                                  ;       AX
 34958                                  ;
 34959                                  ;   NOTES
 34960                                  ;       None
 34961                                  ;
 34962                                  ;   HISTORY
 34963                                  ;       Created 16-Mar-1992 by JeffPar
 34964                                  ;
 34965                                  ;----------------------------------------------------------------------------
 34966                                  
 34967                                  ; 13/05/2019
 34968                                  
 34969                                  get_number:
 34970                                          sub     bx,bx           ; BX = result
 34971                                  num_loop:
 34972                                          call    get_char        ;
 34973                                          jc	short num_done	;
 34974                                          cmp     al,'0'          ; convert to value
 34975                                          jb	short num_done	; no more number
 34976                                          cmp     al,'9'          ;
 34977                                          ja	short num_done	;
 34978                                          push    ax              ;
 34979                                          mov     ax,10           ;
 34980                                          push    dx              ;
 34981                                          mul     bx              ;
 34982                                          pop     dx              ;
 34983                                          mov     bx,ax           ;
 34984                                          pop     ax              ;
 34985                                          sub     al,'0'          ;
 34986                                          cbw                     ;
 34987                                          add     bx,ax           ;
 34988                                          jmp	short num_loop	;
 34989                                  
 34990                                  	; 18/12/2022
 34991                                  ;num_done:
 34992                                          ;retn
 34993                                  
 34994                                  ;----------------------------------------------------------------------------
 34995                                  ;
 34996                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 34997                                  ;
 34998                                  ;   INPUT
 34999                                  ;    ES:SI -> position in config.sys
 35000                                  ;       CX == remaining bytes in config.sys
 35001                                  ;
 35002                                  ;   OUTPUT
 35003                                  ;       AL == next character
 35004                                  ;    ES:SI -> just past next character
 35005                                  ;       CX == # bytes remaining from that point
 35006                                  ;
 35007                                  ;   OTHER REGS USED
 35008                                  ;       AX
 35009                                  ;
 35010                                  ;   NOTES
 35011                                  ;       None
 35012                                  ;
 35013                                  ;   HISTORY
 35014                                  ;       Created 16-Mar-1992 by JeffPar
 35015                                  ;
 35016                                  ;----------------------------------------------------------------------------
 35017                                  
 35018                                  get_char:
 35019                                          sub     cx,1            ; use SUB to set carry,zero
 35020                                          jb	short get_fail	; out of data
 35021                                          ;lods	byte ptr es:[si] ;
 35022                                  	es	
 35023                                  	lodsb
 35024                                          mov     ah,al           ;
 35025                                          retn			;
 35026                                  get_fail:                       ; restore CX to zero
 35027                                          mov     cx,0            ; leave carry set, zero not set
 35028                                  nearby_ret:
 35029                                          retn
 35030                                  
 35031                                  ;----------------------------------------------------------------------------
 35032                                  ;
 35033                                  ;   query_user: ask user whether to execute current config.sys command
 35034                                  ;
 35035                                  ;   INPUT
 35036                                  ;       AL == current command code
 35037                                  ;    ES:SI -> current command line in config.sys
 35038                                  ;    config_cmd == current command code, but with QUERY bit intact
 35039                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 35040                                  ;
 35041                                  ;   OUTPUT
 35042                                  ;       CF set if command should be ignored (it is also REM'ed out)
 35043                                  ;
 35044                                  ;   OTHER REGS USED
 35045                                  ;       BX, CX, DX, DI
 35046                                  ;
 35047                                  ;   NOTES
 35048                                  ;       None
 35049                                  ;
 35050                                  ;   HISTORY
 35051                                  ;       Created 16-Mar-1992 by JeffPar
 35052                                  ;
 35053                                  ;----------------------------------------------------------------------------
 35054                                  
 35055                                  	; 12/12/2022
 35056                                  query_user:
 35057                                          test    byte [bQueryOpt],4	; answer no to everything?
 35058                                          ;jz	short qu_1		;
 35059                                          ; 12/12/2022
 35060                                  	;jmp	short skip_all		;
 35061                                  	jnz	short skip_all
 35062                                  qu_1:
 35063                                  	test    byte [bQueryOpt],2	; answer yes to everything?
 35064                                          jnz	short nearby_ret	; yes (and return carry clear!)
 35065                                          push    ax                      ;
 35066                                          mov     al,[config_cmd]         ;
 35067                                          test    byte [bQueryOpt],1	; query every command?
 35068                                          jnz	short query_all		; yes
 35069                                          test    al,CONFIG_OPTION_QUERY  ;
 35070                                          ;jnz	short query_all		;
 35071                                          ; 12/12/2022
 35072                                  	;jmp	short do_cmd		;
 35073                                  	jz	short do_cmd ; cf=0
 35074                                  query_all:
 35075                                  
 35076                                  ;   Search for the command code (AL) in "comtab", and then print
 35077                                  ;   out the corresponding keyword, followed by the rest of the actual
 35078                                  ;   line pointed to by ES:SI
 35079                                  
 35080                                          push    si                      ; save pointer to rest of CONFIG.SYS line
 35081                                          mov     dx,_$AutoPrmpt    	;
 35082                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35083                                          jz	short generic_prompt	; config_cmd must have been 0
 35084                                  
 35085                                          mov     dh,al                   ; save config_cmd in DH
 35086                                          sub     bx,bx                   ;
 35087                                          mov     di,comtab		;
 35088                                  find_match:                             ;
 35089                                          mov     bl,[di]                 ; get size of current keyword
 35090                                          or      bl,bl                   ;
 35091                                          jz	short line_print	; end of table
 35092                                          inc     di                      ;
 35093                                          cmp     al,[di+bx]              ; match?
 35094                                          je	short cmd_match		; yes
 35095                                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 35096                                  	; 13/05/2019	
 35097                                          jmp	short find_match	; loop
 35098                                  cmd_match:                              ;
 35099                                          mov     cl,[di-1]               ;
 35100                                          mov     ch,0                    ;
 35101                                          mov     ah,STD_CON_OUTPUT ; 2
 35102                                  cmd_print:                              ;
 35103                                          mov     al,[di]                 ;
 35104                                          inc     di                      ;
 35105                                          mov     dl,al                   ;
 35106                                          int     21h                     ;
 35107                                          loop    cmd_print               ;
 35108                                          mov     dl,'='                  ;
 35109                                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 35110                                          jne	short cmd_notset	;
 35111                                          mov     dl,' '                  ;
 35112                                  cmd_notset:
 35113                                          int     21h                     ; '=' looks funny on SET commands
 35114                                  line_print:                             ;
 35115                                  	;lods	byte ptr es:[si]        ;
 35116                                          es
 35117                                  	lodsb
 35118                                  	or      al,al                   ;
 35119                                          jnz	short non_null		;
 35120                                          mov     al,' '                  ;
 35121                                  non_null:                               ;
 35122                                          cmp     al,' '                  ; control code?
 35123                                          jb	short prompt_user	; yes, assume end of line
 35124                                          jne	short non_space		;
 35125                                          cmp     byte [es:si],' '	;
 35126                                          jb	short prompt_user	;
 35127                                  non_space:                              ;
 35128                                          mov     dl,al                   ;
 35129                                          mov     ah,STD_CON_OUTPUT ; 2	;
 35130                                          int     21h                     ;
 35131                                          jmp	short line_print	;
 35132                                  prompt_user:                            ;
 35133                                          mov     dx,_$InterPrmpt		;
 35134                                  
 35135                                  generic_prompt:
 35136                                          call    print                   ;
 35137                                  input_loop:                             ;
 35138                                          mov     ah,0                    ; read a key
 35139                                          int     16h                     ;
 35140                                          or      al,al                   ; is it a function key?
 35141                                          jnz	short not_func		; no
 35142                                          cmp     ah,3Fh                  ; F5 function key?
 35143                                          jne	short input_loop	; no
 35144                                          mov     al,[_$NO]                  ;
 35145                                          or      byte [bQueryOpt],4	; no more queries
 35146                                          jmp     short legal_char        ;
 35147                                  not_func:
 35148                                          and     al,~20h ; 0DFh		; converting to upper case
 35149                                          cmp     al,[_$NO]		; verify character is legal
 35150                                          je	short legal_char	;
 35151                                          cmp     al,[_$YES]		;
 35152                                          je	short legal_char	;
 35153                                          cmp     byte [config_cmd],0	;
 35154                                          je	short input_loop	; don't allow Esc on this query
 35155                                          cmp     al,1Bh                  ; Esc?
 35156                                          jne	short input_loop	;
 35157                                          or      byte [bQueryOpt],2	; no more interactive boot prompts
 35158                                          mov     al,[_$YES]
 35159                                  legal_char:                             ;
 35160                                          call    disp_input              ;
 35161                                          pop     si                      ; restore pointer to rest of CONFIG.SYS line
 35162                                  
 35163                                          cmp     al,[_$NO]		; process line?
 35164                                          je	short skip_cmd		; no
 35165                                  	; 12/12/2022
 35166                                  	clc
 35167                                  do_cmd:
 35168                                  	pop     ax			;
 35169                                  	; 12/12/2022
 35170                                  	; cf=0
 35171                                  	;clc				; just do the command
 35172                                  	retn
 35173                                  
 35174                                  skip_cmd:
 35175                                  	pop     ax			;
 35176                                  skip_all:
 35177                                  	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 35178                                  	stc
 35179                                  	retn
 35180                                  
 35181                                  ;----------------------------------------------------------------------------
 35182                                  ;
 35183                                  ;   print_error: displays multi-config error conditions
 35184                                  ;
 35185                                  ;   INPUT
 35186                                  ;    Carry set to pause, clear to not
 35187                                  ;    ES:SI -> current command line in config.sys
 35188                                  ;
 35189                                  ;   OUTPUT
 35190                                  ;       None
 35191                                  ;
 35192                                  ;   OTHER REGS USED
 35193                                  ;       None
 35194                                  ;
 35195                                  ;   NOTES
 35196                                  ;       None
 35197                                  ;
 35198                                  ;   HISTORY
 35199                                  ;       Created 16-Mar-1992 by JeffPar
 35200                                  ;
 35201                                  ;----------------------------------------------------------------------------
 35202                                  
 35203                                  print_error:
 35204                                          push    ax
 35205                                          push    bx
 35206                                          push    cx
 35207                                          push    dx
 35208                                          push    ds
 35209                                          push    cs
 35210                                          pop     ds
 35211                                          pushf
 35212                                          call    get_linenum
 35213                                          mov     [linecount],bx
 35214                                          call    error_line
 35215                                          popf
 35216                                          jnc	short pe_ret
 35217                                          mov     dx,_$PauseMsg
 35218                                          call    print
 35219                                          mov     ax,0C07h		; flush input buffer, then wait for key
 35220                                          int     21h			; wait for a key
 35221                                          or      al,al			; extended key?
 35222                                          jnz	short pe_1		; no
 35223                                          mov     ah,07h			; yes
 35224                                          int     21h			; eat it too
 35225                                  pe_1:     
 35226                                  	mov     dx,crlfm
 35227                                          call    print
 35228                                  pe_ret: 
 35229                                  	pop     ds
 35230                                          pop     dx
 35231                                          pop     cx
 35232                                          pop     bx
 35233                                          pop     ax
 35234                                  	retn
 35235                                  
 35236                                  ;----------------------------------------------------------------------------
 35237                                  
 35238                                  ;   This function is very simple:  it merely prepends a "/D" to the
 35239                                  ;   command-line for the shell;  this (undocumented) switch disables
 35240                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 35241                                  ;   displayed when there's no AUTOEXEC.BAT.
 35242                                  
 35243                                  disable_autoexec:
 35244                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 35245                                  	; 17/04/2019 - Retro DOS v4.0
 35246                                  
 35247                                  	test	byte [bQueryOpt],4
 35248                                  	jz	short disable_exit
 35249                                  	test	byte [dae_flag],1
 35250                                  	jnz	short disable_exit
 35251                                  	or	byte [dae_flag],1
 35252                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 35253                                  	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 35254                                  	mov     dx,'D ' ; 2044h
 35255                                  dae_1:
 35256                                          ;mov	al,[def_swchr]
 35257                                  	mov     al,[command_line-1]     ; get default switchchar
 35258                                          or      al,al                   ; anything there?
 35259                                          jz	short disable_exit	; no, disable_autoexec already called
 35260                                          mov     bl,[command_line]       ;
 35261                                          mov     bh,0                    ; BX == command-line length
 35262                                          mov     cx,bx                   ;
 35263                                          add     bl,3                    ;
 35264                                          cmp     bl,126                  ;
 35265                                          ja	short disable_exit	;
 35266                                          mov     [command_line],bl       ; update length
 35267                                          add     bx,command_line+1	; make sure we move the NULL too
 35268                                          inc     cx                      ; (just for consistency sake)
 35269                                  disable_loop:                           ;
 35270                                          mov     ah,[bx-3]               ;
 35271                                          mov     [bx],ah                 ;
 35272                                          dec     bx                      ;
 35273                                          loop    disable_loop            ;
 35274                                          mov     [bx-2],al               ;
 35275                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 35276                                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 35277                                          ;mov	byte [command_line-1],0 ;
 35278                                  disable_exit:                           ;
 35279                                          retn
 35280                                  
 35281                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 35282                                  	cmp     byte [bQueryOpt],1
 35283                                  	jnz     short disable_exit
 35284                                  	test	byte [dae_flag],2
 35285                                  	jnz     short disable_exit
 35286                                  	or      byte [dae_flag],2
 35287                                  	mov     dx,' Y'
 35288                                  	jmp     short dae_1
 35289                                  
 35290                                  ;endif  ;MULTI_CONFIG
 35291                                  
 35292                                  %endif	; 02/11/2022
 35293                                  
 35294                                  
 35295                                  ; 19/04/2019 - Retro DOS v4.0
 35296                                  
 35297                                  ;----------------------------------------------------------------------------
 35298                                  ;
 35299                                  ; procedure : delim
 35300                                  ;
 35301                                  ;----------------------------------------------------------------------------
 35302                                  
 35303                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35304                                  ;
 35305                                  ;;ifdef	MULTI_CONFIG
 35306                                  ;
 35307                                  ;any_delim:
 35308                                  ;       cmp     al,cr
 35309                                  ;       je	short delim_ret
 35310                                  ;       cmp     al,lf
 35311                                  ;       je	short delim_ret
 35312                                  ;       cmp     al,'['
 35313                                  ;       je	short delim_ret
 35314                                  ;       cmp     al,']'
 35315                                  ;       je	short delim_ret
 35316                                  ;
 35317                                  ;;endif  ;MULTI_CONFIG
 35318                                  
 35319                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35320                                  	; (SYSINIT:3450h)	
 35321                                  delim:
 35322 00003045 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 35323 00003047 7416                    	je	short delim_ret
 35324                                  
 35325 00003049 3C00                    	cmp	al,0		; special case for sysinit!!!
 35326 0000304B 7412                    	je	short delim_ret
 35327                                  
 35328                                  org_delim:			; used by organize routine except for getting
 35329 0000304D 3C20                    	cmp	al,' '          ; the filename.
 35330 0000304F 740E                    	je	short delim_ret
 35331 00003051 3C09                            cmp     al,tab ; 9
 35332 00003053 740A                    	je	short delim_ret
 35333 00003055 3C3D                    	cmp	al,'='
 35334 00003057 7406                    	je	short delim_ret
 35335 00003059 3C2C                    	cmp	al,','
 35336 0000305B 7402                    	je	short delim_ret
 35337 0000305D 3C3B                    	cmp	al,';'
 35338                                  
 35339                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35340                                  ;;ifdef	MULTI_CONFIG
 35341                                  ;;   Make sure there's no chance of a false EOF indication
 35342                                  ;	clc
 35343                                  ;;endif
 35344                                  
 35345                                  	; 02/11/2022
 35346                                  delim_ret:
 35347 0000305F C3                      	retn
 35348                                  
 35349                                  ;----------------------------------------------------------------------------
 35350                                  ;
 35351                                  ; procedure : newline
 35352                                  ;
 35353                                  ;  newline returns with first character of next line
 35354                                  ;
 35355                                  ;----------------------------------------------------------------------------
 35356                                  
 35357                                  newline:
 35358 00003060 E89CF6                  	call	getchr			;skip non-control characters
 35359 00003063 7207                    	jc	short nl_ret
 35360 00003065 3C0A                    	cmp	al,lf			;look for line feed
 35361 00003067 75F7                    	jne	short newline
 35362 00003069 E893F6                  	call	getchr
 35363                                  nl_ret:
 35364 0000306C C3                      	retn
 35365                                  
 35366                                  ;----------------------------------------------------------------------------
 35367                                  ; 
 35368                                  ; procedure : mapcase
 35369                                  ;
 35370                                  ;----------------------------------------------------------------------------
 35371                                  
 35372                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 35373                                  mapcase:
 35374 0000306D 51                      	push	cx
 35375 0000306E 56                      	push	si
 35376 0000306F 1E                      	push	ds
 35377                                  
 35378 00003070 06                      	push	es
 35379 00003071 1F                      	pop	ds
 35380                                  
 35381                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35382                                  ;;ifdef	MULTI_CONFIG
 35383                                  ;
 35384                                  ;	mov	bl,al                   ; same cmd code this line
 35385                                  ;;else
 35386                                  ;;	xor	si,si
 35387                                  ;;endif
 35388                                  	; 02/11/2022
 35389 00003072 31F6                    	xor	si, si
 35390                                  
 35391                                  convloop:
 35392 00003074 AC                      	lodsb
 35393 00003075 3C61                    	cmp	al,'a'
 35394 00003077 7209                    	jb	short noconv
 35395 00003079 3C7A                    	cmp	al,'z'
 35396 0000307B 7705                    	ja	short noconv
 35397 0000307D 2C20                    	sub	al,20h
 35398 0000307F 8844FF                  	mov	[si-1],al
 35399                                  noconv:
 35400                                  
 35401                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35402                                  ;;ifdef	MULTI_CONFIG
 35403                                  ;;
 35404                                  ;;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 35405                                  ;;   upper-case a line at a time, after we've been able to figure out whether
 35406                                  ;;   the line is a SET command or not (since we don't want to upper-case
 35407                                  ;;   anything after the "=" in a SET)
 35408                                  ;;
 35409                                  ;       cmp     bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 35410                                  ;       jne	short check_eol		; no, just check for end-of-line
 35411                                  ;       cmp     al,'='                  ; separator between SET var and value?
 35412                                  ;       je	short convdone		; yes
 35413                                  ;check_eol:
 35414                                  ;       cmp     al,cr
 35415                                  ;       je	short convdone
 35416                                  ;       cmp     al,lf
 35417                                  ;       je	short convdone
 35418                                  ;;endif
 35419                                  	
 35420                                  	; 02/11/2022
 35421 00003082 E2F0                    	loop	convloop
 35422                                  convdone:
 35423 00003084 1F                      	pop	ds
 35424 00003085 5E                      	pop	si
 35425 00003086 59                      	pop	cx
 35426 00003087 C3                      	retn
 35427                                  
 35428                                  ;----------------------------------------------------------------------------
 35429                                  ;
 35430                                  ; procedure : round
 35431                                  ;
 35432                                  ; round the values in memlo and memhi to paragraph boundary.
 35433                                  ; perform bounds check.
 35434                                  ;
 35435                                  ;----------------------------------------------------------------------------
 35436                                  
 35437                                  round:
 35438 00003088 50                      	push	ax
 35439 00003089 2EA1[DE03]              	mov	ax,[cs:memlo]
 35440                                  
 35441 0000308D E830E0                  	call	ParaRound		; para round up
 35442                                  
 35443 00003090 2E0106[E003]            	add	[cs:memhi],ax
 35444 00003095 2EC706[DE03]0000        	mov	word [cs:memlo],0
 35445 0000309C 2EA1[E003]              	mov	ax,[cs:memhi]		; ax = new memhi
 35446 000030A0 2E3B06[A302]            	cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 35447 000030A5 7322                    	jae	short mem_err
 35448 000030A7 2EF606[3414]02          	test	byte [cs:setdevmarkflag],for_devmark ; 2
 35449 000030AD 7418                    	jz	short skip_set_devmarksize
 35450 000030AF 06                      	push	es
 35451 000030B0 56                      	push	si
 35452 000030B1 2E8B36[3214]            	mov	si,[cs:devmark_addr]
 35453 000030B6 8EC6                    	mov	es,si
 35454 000030B8 29F0                    	sub	ax,si
 35455 000030BA 48                      	dec	ax
 35456                                  	;mov	[es:3],ax
 35457 000030BB 26A30300                	mov	[es:devmark.size],ax	; paragraph
 35458 000030BF 2E8026[3414]FD          	and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 35459 000030C5 5E                      	pop	si
 35460 000030C6 07                      	pop	es
 35461                                  skip_set_devmarksize:
 35462 000030C7 58                      	pop	ax
 35463                                  	; 11/12/2022
 35464                                  	; cf = 0
 35465                                  	; 02/11/2022
 35466                                  	;clc	; ? (not needed here)	; clear carry
 35467 000030C8 C3                      	retn
 35468                                  
 35469                                  ;----------------------------------------------------------------------------
 35470                                  
 35471                                  mem_err:
 35472                                  	; 11/12/2022
 35473 000030C9 0E                      	push	cs
 35474 000030CA 1F                      	pop	ds
 35475                                  mem_err2:
 35476 000030CB BA[F137]                	mov	dx,badmem
 35477                                  	;push	cs
 35478                                  	;pop	ds
 35479 000030CE E87602                  	call	print
 35480 000030D1 E97FD7                  	jmp	stall
 35481                                  
 35482                                  ;----------------------------------------------------------------------------
 35483                                  ;
 35484                                  ; procedure : calldev
 35485                                  ;
 35486                                  ;----------------------------------------------------------------------------
 35487                                  
 35488                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35489                                  	; (SYSINIT:34E0h)
 35490                                  calldev:
 35491 000030D4 2E8E1E[B61E]            	mov	ds,[cs:DevEntry+2]
 35492 000030D9 2E031E[B41E]            	add	bx,[cs:DevEntry]	; do a little relocation
 35493 000030DE 8B07                    	mov	ax,[bx]
 35494                                  
 35495 000030E0 2EFF36[B41E]            	push	word [cs:DevEntry]
 35496 000030E5 2EA3[B41E]              	mov	word [cs:DevEntry],ax
 35497 000030E9 BB[E603]                	mov	bx,packet
 35498 000030EC 2EFF1E[B41E]            	call	far [cs:DevEntry]
 35499 000030F1 2E8F06[B41E]            	pop	word [cs:DevEntry]
 35500 000030F6 C3                      	retn
 35501                                  
 35502                                  ;----------------------------------------------------------------------------
 35503                                  ;
 35504                                  ; procedure : todigit
 35505                                  ;
 35506                                  ;----------------------------------------------------------------------------
 35507                                  
 35508                                  todigit:
 35509 000030F7 2C30                    	sub	al,'0'
 35510                                  	;jb	short notdig  ; 02/11/2022
 35511                                  	; 12/12/2022
 35512 000030F9 7203                    	jb	short notdig2
 35513                                  	;cmp	al,9
 35514                                  	;ja	short notdig
 35515                                  	;clc
 35516                                  	;retn
 35517                                  	; 12/12/2022
 35518 000030FB 3C0A                    	cmp	al,10
 35519 000030FD F5                      	cmc
 35520                                  notdig:
 35521                                  	;stc
 35522                                  notdig2:
 35523 000030FE C3                      	retn
 35524                                  
 35525                                  ;----------------------------------------------------------------------------
 35526                                  ;
 35527                                  ; procedure : getnum
 35528                                  ;
 35529                                  ; getnum parses a decimal number.
 35530                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 35531                                  ; error), if number is bad carry is set, zero is set, ax=0.
 35532                                  ;
 35533                                  ;----------------------------------------------------------------------------
 35534                                  
 35535                                  getnum:
 35536 000030FF 53                      	push	bx
 35537 00003100 31DB                    	xor	bx,bx			; running count is zero
 35538                                  b2:
 35539 00003102 E8F2FF                  	call	todigit 		; do we have a digit ?
 35540 00003105 7247                    	jc	short badnum		; no, bomb
 35541                                  
 35542 00003107 93                      	xchg	ax,bx			; put total in ax
 35543 00003108 53                      	push	bx			; save digit (0 to 9)
 35544                                  	;mov	bx,10			; base of arithmetic
 35545                                  	; 12/12/2022
 35546 00003109 B30A                    	mov	bl,10
 35547 0000310B F7E3                    	mul	bx			; shift by one decimal digit
 35548 0000310D 5B                      	pop	bx			; get back digit (0 to 9)
 35549 0000310E 00D8                    	add	al,bl			; get total
 35550 00003110 80D400                  	adc	ah,0			; make that 16 bits
 35551 00003113 7239                    	jc	short badnum		; too big a number
 35552                                  
 35553 00003115 93                      	xchg	ax,bx			; stash total
 35554                                  
 35555 00003116 E8E6F5                  	call	getchr			;get next digit
 35556 00003119 722D                    	jc	short b1		; no more characters
 35557 0000311B 3C20                    	cmp	al,' ' 			; space?
 35558 0000311D 741F                    	je	short b15		; then end of digits
 35559 0000311F 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 35560 00003121 741B                    	je	short b15		; then end of digits.
 35561 00003123 3C09                    	cmp	al, tab ; 9		; tab
 35562 00003125 7417                    	je	short b15
 35563 00003127 2E3A06[2A03]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 35564 0000312C 7410                    	je	short b15
 35565 0000312E 3C2F                    	cmp	al,'/'			; see if another switch follows
 35566                                  	;nop				; cas - remnant of old bad code
 35567                                  	;nop
 35568                                  	; 12/12/2022
 35569                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35570                                  	;nop
 35571                                  	;nop
 35572 00003130 740C                    	je	short b15
 35573 00003132 3C0A                    	cmp	al,lf			; line-feed?
 35574 00003134 7408                    	je	short b15
 35575 00003136 3C0D                    	cmp	al,cr			; carriage return?
 35576 00003138 7404                    	je	short b15
 35577 0000313A 08C0                    	or	al,al			; end of line separator?
 35578 0000313C 75C4                    	jnz	short b2		; no, try as a valid char...
 35579                                  b15:
 35580 0000313E 2EFF06[D203]            	inc	word [cs:count]		; one more character to s...
 35581 00003143 2EFF0E[D603]            	dec	word [cs:chrptr]	; back up over separator
 35582                                  b1:
 35583 00003148 89D8                    	mov	ax,bx			; get proper count
 35584 0000314A 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 35585 0000314C 5B                      	pop	bx
 35586 0000314D C3                      	retn
 35587                                  badnum:
 35588                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35589                                  	;mov	byte [cs:sepchr],0
 35590 0000314E 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 35591                                  	; 12 /12/2022
 35592 00003150 2EA2[2A03]              	mov	[cs:sepchr],al ; 0
 35593 00003154 5B                      	pop	bx
 35594 00003155 F9                      	stc				; and carry set
 35595 00003156 C3                      	retn
 35596                                  
 35597                                  ;****************************************************************************
 35598                                  
 35599                                  setdoscountryinfo:
 35600                                  
 35601                                  ;----------------------------------------------------------------------------
 35602                                  ;input: es:di -> pointer to dos_country_cdpg_info
 35603                                  ;	ds:0  -> buffer.
 35604                                  ;	si = 0
 35605                                  ;	ax = country id
 35606                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 35607                                  ;	bx = file handle
 35608                                  ;	this routine can handle maximum 438 country_data entries.
 35609                                  ;
 35610                                  ;output: dos_country_cdpg_info set.
 35611                                  ;	 carry set if any file read failure or wrong information in the file.
 35612                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 35613                                  ;	 codepage_id in the file.
 35614                                  ;----------------------------------------------------------------------------
 35615                                  
 35616 00003157 57                      	push	di
 35617 00003158 50                      	push	ax
 35618 00003159 52                      	push	dx
 35619                                  
 35620 0000315A 31C9                    	xor	cx,cx
 35621 0000315C 31D2                    	xor	dx,dx
 35622 0000315E B80002                  	mov	ax,512			;read 512 bytes
 35623 00003161 E84F01                  	call	readincontrolbuffer	;read the file header
 35624 00003164 724D                    	jc	short setdosdata_fail
 35625                                  
 35626 00003166 06                      	push	es
 35627 00003167 56                      	push	si
 35628                                  
 35629 00003168 0E                      	push	cs
 35630 00003169 07                      	pop	es
 35631                                  
 35632 0000316A BF[1334]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 35633 0000316D B90800                  	mov	cx,8			;length of the signature
 35634 00003170 F3A6                    	repz	cmpsb
 35635                                  
 35636 00003172 5E                      	pop	si
 35637 00003173 07                      	pop	es
 35638 00003174 753D                    	jnz	short setdosdata_fail 	;signature mismatch
 35639                                  
 35640 00003176 83C612                  	add	si,18			;si -> county info type
 35641 00003179 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 35642 0000317C 7535                    	jne	short setdosdata_fail 	;cannot proceed. error return
 35643                                  
 35644 0000317E 46                      	inc	si			;si -> file offset
 35645 0000317F 8B14                    	mov	dx,[si]			;get the info file offset.
 35646 00003181 8B4C02                  	mov	cx,[si+2]
 35647 00003184 B80018                  	mov	ax,6144			;read 6144 bytes.
 35648 00003187 E82901                  	call	readincontrolbuffer	;read info
 35649 0000318A 7227                    	jc	short setdosdata_fail
 35650                                  
 35651 0000318C 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 35652 0000318E 81F9B601                	cmp	cx, 438			;cannot handle more than 438 entries.
 35653 00003192 771F                    	ja	short setdosdata_fail
 35654                                  
 35655 00003194 46                      	inc	si
 35656 00003195 46                      	inc	si			;si -> entry information packet
 35657 00003196 5A                      	pop	dx			;restore code page id
 35658 00003197 58                      	pop	ax			;restore country id
 35659 00003198 5F                      	pop	di
 35660                                  
 35661                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 35662 00003199 3B4402                  	cmp	ax,[si+2]		;compare country_id
 35663 0000319C 750A                    	jne	short setdoscntry_next
 35664                                  
 35665 0000319E 83FA00                  	cmp	dx,0			;no user specified code page ?
 35666 000031A1 7415                    	je	short setdoscntry_any_codepage ;then no need to match code page id.
 35667 000031A3 3B5404                  	cmp	dx,[si+4]		;compare code page id
 35668 000031A6 7413                    	je	short setdoscntry_got_it
 35669                                  
 35670                                  setdoscntry_next:
 35671 000031A8 0334                    	add	si,[si]			;next entry
 35672 000031AA 46                      	inc	si
 35673 000031AB 46                      	inc	si			;take a word for size of entry itself
 35674 000031AC E2EB                    	loop	setdoscntry_find
 35675                                  
 35676 000031AE B9FFFF                  	mov	cx,-1			;signals that bad country id entered.
 35677                                  setdoscntry_fail:
 35678 000031B1 F9                      	stc
 35679 000031B2 C3                      	retn
 35680                                  
 35681                                  setdosdata_fail:
 35682 000031B3 5E                      	pop	si
 35683 000031B4 59                      	pop	cx
 35684 000031B5 5F                      	pop	di
 35685 000031B6 EBF9                    	jmp	short setdoscntry_fail
 35686                                  
 35687                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 35688 000031B8 8B5404                  	mov	dx,[si+4]
 35689                                  
 35690                                  setdoscntry_got_it:			;found the matching entry
 35691 000031BB 2E8916[1B34]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 35692 000031C0 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 35693 000031C3 8B4C0C                  	mov	cx,[si+12]
 35694 000031C6 B80002                  	mov	ax,512 			;read 512 bytes
 35695 000031C9 E8E700                  	call	readincontrolbuffer
 35696 000031CC 72E3                    	jc	short setdoscntry_fail
 35697                                  
 35698 000031CE 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 35699 000031D0 46                      	inc	si
 35700 000031D1 46                      	inc	si			;si -> first entry
 35701                                  
 35702                                  setdoscntry_data:
 35703 000031D2 57                      	push	di			;es:di -> dos_country_cdpg_info
 35704 000031D3 51                      	push	cx			;save # of entry left
 35705 000031D4 56                      	push	si			;si -> current entry in control buffer
 35706                                  
 35707 000031D5 8A4402                  	mov	al,[si+2]		;get data entry id
 35708 000031D8 E8AA00                  	call	getcountrydestination	;get the address of destination in es:di
 35709 000031DB 727D                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 35710                                  
 35711 000031DD 8B5404                  	mov	dx,[si+4]		;get offset of data
 35712 000031E0 8B4C06                  	mov	cx,[si+6]
 35713 000031E3 B80042                  	mov	ax,4200h
 35714 000031E6 F9                      	stc
 35715 000031E7 CD21                    	int	21h			;move pointer
 35716 000031E9 72C8                    	jc	short setdosdata_fail
 35717                                  
 35718 000031EB BA0002                  	mov	dx,512			;start of data buffer
 35719 000031EE B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 35720 000031F1 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 35721 000031F3 F9                      	stc
 35722 000031F4 CD21                    	int	21h			;read the country.sys data
 35723 000031F6 72BB                    	jc	short setdosdata_fail 	;read failure
 35724                                  
 35725 000031F8 39C8                    	cmp	ax,cx
 35726 000031FA 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 35727                                  
 35728 000031FC 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 35729 000031FF 8B4C06                  	mov	cx,[si+6]
 35730 00003202 B80042                  	mov	ax,4200h
 35731 00003205 F9                      	stc
 35732 00003206 CD21                    	int	21h			;move pointer back again
 35733 00003208 72A9                    	jc	short setdosdata_fail
 35734                                  
 35735 0000320A 56                      	push	si
 35736 0000320B BE0802                  	mov	si,(512+8)		;get length of the data from the file
 35737 0000320E 8B0C                    	mov	cx,[si]
 35738 00003210 5E                      	pop	si
 35739 00003211 BA0002                  	mov	dx,512			;start of data buffer
 35740 00003214 83C10A                  	add	cx,10			;signature + a word for the length itself
 35741 00003217 B43F                    	mov	ah,3Fh			;read the data from the file.
 35742 00003219 F9                      	stc
 35743 0000321A CD21                    	int	21h
 35744 0000321C 7295                    	jc	short setdosdata_fail
 35745                                  
 35746 0000321E 39C8                    	cmp	ax,cx
 35747 00003220 7591                    	jne	short setdosdata_fail
 35748                                  
 35749 00003222 8A4402                  	mov	al,[si+2]		;save data id for future use.
 35750 00003225 BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 35751 00003228 8B0C                    	mov	cx,[si]			;get the length of the file
 35752 0000322A 41                      	inc	cx			;take care of a word for lenght of tab
 35753 0000322B 41                      	inc	cx			;itself.
 35754 0000322C 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 35755 00003230 7781                    	ja	short setdosdata_fail
 35756                                  
 35757                                  	;if	bugfix
 35758 00003232 E83500                  	call	setdbcs_before_copy
 35759                                  	;endif
 35760                                  
 35761 00003235 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 35762 00003237 7512                    	jne	short setdoscntry_mov 	;no, don't worry
 35763                                  
 35764 00003239 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 35765                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 35766 0000323D 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 35767                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 35768                                  	
 35769 00003241 57                      	push	di			;save di
 35770                                  
 35771 00003242 50                      	push	ax
 35772 00003243 2EA1[1B34]              	mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 35773 00003247 894404                  	mov	[si+4],ax		;use the saved one for this !!!!
 35774 0000324A 58                      	pop	ax
 35775                                  
 35776                                  setdoscntry_mov:
 35777 0000324B F3A4                    	rep	movsb			;copy the table into dos
 35778 0000324D 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 35779 0000324F 7509                    	jne	short setdoscntry_data_next
 35780                                  
 35781 00003251 5F                      	pop	di			;restore di
 35782 00003252 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 35783                                  	;pop	word [es:di+26]		;restore
 35784 00003256 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 35785                                  	;pop	word [es:di+24]
 35786                                  
 35787                                  setdoscntry_data_next:
 35788 0000325A 5E                      	pop	si			;restore control buffer pointer
 35789 0000325B 59                      	pop	cx			;restore # of entries left
 35790 0000325C 5F                      	pop	di			;restore pointer to dso_country_cdpg
 35791 0000325D 0334                    	add	si,[si]			;try to get the next entry
 35792 0000325F 46                      	inc	si
 35793 00003260 46                      	inc	si			;take a word of entry length itself
 35794 00003261 49                      	dec	cx
 35795 00003262 83F900                  	cmp	cx,0
 35796 00003265 741D                    	je	short setdoscntry_ok
 35797 00003267 E968FF                  	jmp	setdoscntry_data
 35798                                  
 35799                                  	; 18/12/2022
 35800                                  ;setdoscntry_ok:
 35801                                  	;retn
 35802                                  
 35803                                  ;----------------------------------------------------------------------------
 35804                                  
 35805                                  	;if	bugfix
 35806                                  
 35807                                  setdbcs_before_copy:
 35808 0000326A 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 35809 0000326C 7516                    	jne	short sdbcsbc		; jump if not
 35810 0000326E 26833D00                	cmp	word [es:di],0		; zero byte data block?
 35811 00003272 7410                    	je	short sdbcsbc		; jump if so
 35812                                  
 35813 00003274 57                      	push	di
 35814 00003275 50                      	push	ax
 35815 00003276 51                      	push	cx
 35816 00003277 268B0D                  	mov	cx,[es:di]		; load block length
 35817 0000327A 83C702                  	add	di,2			; points actual data
 35818 0000327D 30C0                    	xor	al,al			; fill bytes
 35819 0000327F F3AA                    	rep	stosb			; clear data block
 35820 00003281 59                      	pop	cx
 35821 00003282 58                      	pop	ax
 35822 00003283 5F                      	pop	di
 35823                                  sdbcsbc:
 35824                                  setdoscntry_ok:	; 18/12/2022	
 35825 00003284 C3                      	retn
 35826                                  
 35827                                  	;endif
 35828                                  
 35829                                  ;----------------------------------------------------------------------------
 35830                                  
 35831                                  getcountrydestination:
 35832                                  
 35833                                  ;get the destination address in the dos country info table.
 35834                                  ;input: al - data id
 35835                                  ;	es:di -> dos_country_cdpg_info
 35836                                  ;on return:
 35837                                  ;	es:di -> destination address of the matching data id
 35838                                  ;	carry set if no matching data id found in dos.
 35839                                  
 35840 00003285 51                      	push	cx
 35841                                  	;add	di,74
 35842 00003286 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 35843                                  					;skip the reserved area, syscodepage etc.
 35844 00003289 268B0D                  	mov	cx,[es:di]		;get the number of entries
 35845 0000328C 47                      	inc	di
 35846 0000328D 47                      	inc	di			;si -> the first start entry id
 35847                                  
 35848                                  getcntrydest:
 35849 0000328E 263805                  	cmp	byte [es:di],al
 35850 00003291 7413                    	je	short getcntrydest_ok
 35851 00003293 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 35852 00003297 7405                    	je	short getcntrydest_1
 35853                                  
 35854 00003299 83C705                  	add	di,5			;next data id
 35855 0000329C EB03                    	jmp	short getcntrydest_loop
 35856                                  
 35857                                  getcntrydest_1:
 35858                                  	;add	di,41
 35859 0000329E 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 35860                                  getcntrydest_loop:
 35861 000032A1 E2EB                    	loop	getcntrydest
 35862 000032A3 F9                      	stc
 35863 000032A4 EB0B                    	jmp	short getcntrydest_exit
 35864                                  
 35865                                  getcntrydest_ok:
 35866 000032A6 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 35867 000032A8 7503                    	jne	short getcntrydest_ok1
 35868                                  
 35869 000032AA 47                      	inc	di			;now di -> cccountryinfolen
 35870 000032AB EB04                    	jmp	short getcntrydest_exit
 35871                                  
 35872                                  getcntrydest_ok1:
 35873 000032AD 26C47D01                	les	di,[es:di+1]		;get the destination in es:di
 35874                                  
 35875                                  getcntrydest_exit:
 35876 000032B1 59                      	pop	cx
 35877 000032B2 C3                      	retn
 35878                                  
 35879                                  ;----------------------------------------------------------------------------
 35880                                  
 35881                                  readincontrolbuffer:
 35882                                  
 35883                                  ;move file pointer to cx:dx
 35884                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 35885                                  ;si will be set to 0 hence ds:si points to the control buffer.
 35886                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 35887                                  ;	 be moved.
 35888                                  ;	 ax - # of bytes to read
 35889                                  ;	 bx - file handle
 35890                                  ;	 ds - buffer seg.
 35891                                  ;return: the control data information is read into ds:0 - ds:0200.
 35892                                  ;	 cx,dx value destroyed.
 35893                                  ;	 carry set if error in reading file.
 35894                                  
 35895 000032B3 50                      	push	ax			;# of bytes to read
 35896 000032B4 B80042                  	mov	ax,4200h
 35897 000032B7 F9                      	stc
 35898 000032B8 CD21                    	int	21h			;move pointer
 35899 000032BA 59                      	pop	cx			;# of bytes to read
 35900 000032BB 7209                    	jc	short ricb_exit
 35901                                  
 35902 000032BD 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 35903 000032BF 31F6                    	xor	si,si
 35904 000032C1 B43F                    	mov	ah,3Fh			;read into the buffer
 35905 000032C3 F9                      	stc
 35906 000032C4 CD21                    	int	21h			;should be less than 1024 bytes.
 35907                                  ricb_exit:
 35908 000032C6 C3                      	retn
 35909                                  
 35910                                  ;----------------------------------------------------------------------------
 35911                                  
 35912                                  set_country_path:
 35913                                  
 35914                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 35915                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 35916                                  ;     assumes current directory is the root directory.
 35917                                  ;out: ds:di -> full path (cntry_drv).
 35918                                  ;     set the cntry_drv string from the country=,,path command.
 35919                                  ;     ds, es, si value saved.
 35920                                  
 35921 000032C7 56                      	push	si
 35922                                  
 35923 000032C8 1E                      	push	ds			;switch ds, es
 35924 000032C9 06                      	push	es
 35925 000032CA 1F                      	pop	ds
 35926 000032CB 07                      	pop	es			;now ds -> confbot, es -> sysinitseg
 35927                                  
 35928 000032CC E82E00                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 35929 000032CF 7206                    	jc	short scp_default_drv 	;no, use current default drive.
 35930                                  
 35931 000032D1 8A04                    	mov	al,[si]
 35932 000032D3 46                      	inc	si
 35933 000032D4 46                      	inc	si			;si -> next char after ":"
 35934 000032D5 EB06                    	jmp	short scp_setdrv
 35935                                  
 35936                                  scp_default_drv:
 35937 000032D7 B419                    	mov	ah,19h
 35938 000032D9 CD21                    	int	21h
 35939 000032DB 0441                    	add	al,"A"			;convert it to a character.
 35940                                  
 35941                                  scp_setdrv:
 35942 000032DD 2EA2[D033]              	mov	[cs:cntry_drv],al	;set the drive letter.
 35943 000032E1 BF[D333]                	mov	di,cntry_path
 35944 000032E4 8A04                    	mov	al,[si]
 35945 000032E6 3C5C                    	cmp	al, "\"
 35946 000032E8 7406                    	je	short scp_root_dir
 35947                                  
 35948 000032EA 3C2F                    	cmp	al,"/"			;let's accept "/" as an directory delim
 35949 000032EC 7402                    	je	short scp_root_dir
 35950                                  
 35951 000032EE EB01                    	jmp	short scp_path
 35952                                  
 35953                                  scp_root_dir:
 35954 000032F0 4F                      	dec	di			;di -> cntry_root
 35955                                  scp_path:
 35956 000032F1 E81F00                  	call	move_asciiz		;copy it
 35957                                  
 35958 000032F4 BF[D033]                	mov	di,cntry_drv
 35959                                  scpath_exit:
 35960                                  
 35961 000032F7 1E                      	push	ds			;switch ds, es
 35962 000032F8 06                      	push	es
 35963 000032F9 1F                      	pop	ds
 35964 000032FA 07                      	pop	es			;ds, es value restored
 35965                                  
 35966 000032FB 5E                      	pop	si
 35967 000032FC C3                      	retn
 35968                                  
 35969                                  ;----------------------------------------------------------------------------
 35970                                  
 35971                                  chk_drive_letter:
 35972                                  
 35973                                  ;check if ds:[si] is a drive letter followed by ":".
 35974                                  ;assume that every alpha character is already converted to upper case.
 35975                                  ;carry set if not.
 35976                                  
 35977 000032FD 50                      	push	ax
 35978 000032FE 803C41                  	cmp	byte [si],"A"
 35979                                  	;jb	short cdletter_no
 35980 00003301 720E                    	jb	short cdletter_exit
 35981 00003303 803C5A                  	cmp	byte [si],"Z"
 35982 00003306 7708                    	ja	short cdletter_no
 35983 00003308 807C013A                	cmp	byte [si+1],":"
 35984 0000330C 7502                    	jne	short cdletter_no
 35985                                  
 35986 0000330E EB01                    	jmp	short cdletter_exit
 35987                                  
 35988                                  cdletter_no:
 35989 00003310 F9                      	stc
 35990                                  cdletter_exit:
 35991 00003311 58                      	pop	ax
 35992 00003312 C3                      	retn
 35993                                  
 35994                                  ;----------------------------------------------------------------------------
 35995                                  
 35996                                  move_asciiz:
 35997                                  
 35998                                  ;in: ds:si -> source es:di -> target
 35999                                  ;out: copy the string until 0.
 36000                                  ;assumes there exists a 0.
 36001                                  
 36002                                  masciiz_loop:
 36003 00003313 A4                      	movsb
 36004 00003314 807CFF00                	cmp	byte [si-1],0	; was it 0?
 36005 00003318 75F9                    	jne	short masciiz_loop
 36006 0000331A C3                      	retn
 36007                                  
 36008                                  ;----------------------------------------------------------------------------
 36009                                  
 36010                                  ;	ds:dx points to string to output (asciz)
 36011                                  ;
 36012                                  ;	prints <badld_pre> <string> <badld_post>
 36013                                  
 36014                                  badfil:
 36015 0000331B 0E                      	push	cs
 36016 0000331C 07                      	pop	es
 36017                                  
 36018 0000331D 89D6                    	mov	si,dx
 36019                                  badload:
 36020 0000331F BA[5B37]                	mov	dx,badld_pre	; want to print config error
 36021 00003322 BB[1837]                	mov	bx,crlfm
 36022                                  prnerr:
 36023 00003325 0E                      	push	cs
 36024 00003326 1F                      	pop	ds ; *
 36025 00003327 E81D00                  	call	print
 36026                                  prn1:
 36027 0000332A 268A14                  	mov	dl,[es:si]
 36028 0000332D 08D2                    	or	dl,dl
 36029 0000332F 7407                    	jz	short prn2
 36030 00003331 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 36031 00003333 CD21                    	int	21h
 36032 00003335 46                      	inc	si
 36033 00003336 EBF2                    	jmp	short prn1
 36034                                  prn2:
 36035 00003338 89DA                    	mov	dx,bx
 36036 0000333A E80A00                  	call	print
 36037                                  	; 11/12/2022
 36038                                  	; ds = cs ; *
 36039 0000333D 803E[D103]01            	cmp	byte [donotshownum],1 ; suppress line number when handling command.com
 36040                                  	;cmp	byte [cs:donotshownum],1 
 36041 00003342 7407                    	je	short prnexit
 36042                                  	
 36043                                  	; 18/12/2022
 36044                                  	;call	error_line
 36045 00003344 E9CFF3                  	jmp	error_line
 36046                                  ;prnexit:
 36047                                  	;retn
 36048                                  
 36049                                  ;----------------------------------------------------------------------------
 36050                                  
 36051                                  print:
 36052 00003347 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 36053 00003349 CD21                    	int	21h
 36054                                  prnexit:	; 18/12/2022
 36055 0000334B C3                      	retn
 36056                                  
 36057                                  ;----------------------------------------------------------------------------
 36058                                  
 36059                                  ;  open device pointed to by dx, al has access code
 36060                                  ;   if unable to open do a device open null device instead
 36061                                  
 36062                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36063                                  	; (SYSINIT:3764h)
 36064                                  open_dev:
 36065 0000334C E80500                  	call	open_file
 36066 0000334F 7309                    	jnc	short open_dev3
 36067                                  
 36068                                  open_dev1:
 36069 00003351 BA[B433]                	mov	dx,nuldev
 36070                                  	; 18/12/2022
 36071                                  	;call	open_file
 36072                                  ;of_retn:
 36073                                  	;retn
 36074                                  	; 18/12/2022
 36075                                  	;jmp	short open_file
 36076                                  open_file:
 36077 00003354 B43D                    	mov	ah,OPEN	; 3Dh
 36078 00003356 F9                      	stc
 36079 00003357 CD21                    	int	21h
 36080                                  of_retn:	; 18/12/2022
 36081 00003359 C3                      	retn
 36082                                  
 36083                                  open_dev3:
 36084 0000335A 89C3                    	mov	bx,ax			; handle from open to bx
 36085                                  	;;xor	ax,ax			; get device info
 36086                                  	;;mov	ah,IOCTL ; 44h
 36087                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 36088                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36089                                  	;xor	ax,ax
 36090                                  	;mov	ah,44h	; IOCTL
 36091                                  	; 11/12/2022
 36092 0000335C B80044                  	mov	ax,4400h ; IOCTL<<8 
 36093                                  
 36094 0000335F CD21                    	int	21h
 36095                                  
 36096 00003361 F6C280                  	test	dl,10000000b ; 80h
 36097 00003364 75F3                    	jnz	short of_retn
 36098                                  
 36099 00003366 B43E                    	mov	ah,CLOSE ; 3Eh
 36100 00003368 CD21                    	int	21h
 36101 0000336A EBE5                    	jmp	short open_dev1
 36102                                  
 36103                                  ;----------------------------------------------------------------------------
 36104                                  
 36105                                  ; 18/12/2022
 36106                                  %if 0
 36107                                  open_file:
 36108                                  	mov	ah,OPEN	; 3Dh
 36109                                  	stc
 36110                                  	int	21h
 36111                                  	retn
 36112                                  %endif
 36113                                  
 36114                                  ;----------------------------------------------------------------------------
 36115                                  
 36116                                  ; test int24. return back to dos with the fake user response of "fail"
 36117                                  
 36118                                  int24:
 36119 0000336C B003                    	mov	al,3			; fail the system call
 36120 0000336E CF                      	iret				; return back to dos.
 36121                                  
 36122                                  ; 19/04/2019 - Retro DOS v4.0
 36123                                  
 36124                                  ;----------------------------------------------------------------------------
 36125                                  ; DATA
 36126                                  ;----------------------------------------------------------------------------
 36127                                  
 36128                                  ;include copyrigh.inc			; copyright statement
 36129                                  
 36130                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 36131                                  
 36132                                  ;MsDosVersion6Copyr:
 36133                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 36134                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 36135                                  
 36136                                  ; 22/10/2022
 36137                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 36138                                  
 36139                                  ; 28/12/2022
 36140                                  %if 0
 36141                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36142                                  MsDosVersion5Copyr:
 36143                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 36144                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 36145                                  %endif
 36146                                  
 36147                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36148                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36149                                  ; 20/04/2019 - Retro DOS v4.0
 36150                                  ;BOOTMES:
 36151                                  ;	db      13
 36152                                  ;	db      10
 36153                                  ;	db      "MS-DOS version "
 36154                                  ;	db      MAJOR_VERSION + "0"
 36155                                  ;	db      "."
 36156                                  ;	db      (MINOR_VERSION / 10) + "0"
 36157                                  ;	db      (MINOR_VERSION % 10) + "0"
 36158                                  ;	db      13,10
 36159                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 36160                                  ;	; 22/10/2022
 36161                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 36162                                  ;	;
 36163                                  ;	db	0
 36164                                  
 36165                                  	; 12/12/2022
 36166 0000336F 00                      	db	0
 36167                                  ; 12/12/2022
 36168                                  BOOTMES:
 36169 00003370 0D0A                    	db	13,10
 36170                                  	;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 36171                                  	; 28/12/2022
 36172 00003372 526574726F20444F53-     	db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 36172 0000337B 2076342E3120284D6F-
 36172 00003384 646966696564204D53-
 36172 0000338D 444F5320352E302920 
 36173 00003396 0D0A                    	db	13,10
 36174                                  	;db	"by Erdogan Tan [2022] "
 36175 00003398 6279204572646F6761-     	db	"by Erdogan Tan [2023] " ; 04/01/2023
 36175 000033A1 6E2054616E205B3230-
 36175 000033AA 32335D20           
 36176 000033AE 0D0A                    	db	13,10
 36177 000033B0 0D0A2400                	db	13,10,"$",0
 36178                                  
 36179 000033B4 4E554C00                nuldev:	db	"NUL",0
 36180 000033B8 434F4E00                condev:	db	"CON",0
 36181 000033BC 41555800                auxdev:	db	"AUX",0
 36182 000033C0 50524E00                prndev:	db	"PRN",0
 36183                                  
 36184                                  ;IFDEF	CONFIGPROC
 36185 000033C4 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 36185 000033CD 595300             
 36186                                  
 36187 000033D0 413A                    cntry_drv:  db	"A:"
 36188 000033D2 5C                      cntry_root: db	"\"
 36189 000033D3 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 36189 000033DC 595300             
 36190                                  	    ;db	52 dup (0)
 36191 000033DF 00<rep 34h>             	    times 52 db 0	
 36192                                  
 36193                                  country_file_signature:
 36194 00003413 FF434F554E545259        	db	0FFh,'COUNTRY'
 36195                                  
 36196                                  cntrycodepage_id: 
 36197 0000341B 0000                    	dw	0 	
 36198                                  
 36199                                  ;ENDIF ; CONFIGPROC
 36200                                  
 36201                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36202                                  ;;ifdef	MULTI_CONFIG
 36203                                  ;newcmd:  db	0			; non-zero if non-std shell specified
 36204                                  ;tmplate: db	64                      ; must precede commnd
 36205                                  ;;endif
 36206                                  	; 02/11/2022
 36207                                  	;db	12                      ; size of commnd line (excl. null)
 36208                                  
 36209 0000341D 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 36209 00003426 434F4D00           
 36210                                  	;db	51 dup (0)
 36211 0000342A 00<rep 33h>             	times	51 db 0
 36212                                  ;endif
 36213                                  
 36214                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36215                                  ;;ifdef	MULTI_CONFIG
 36216                                  ;commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 36217                                  ;	 db	2,"/P",0 		; followed by their respective alternate
 36218                                  ;commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 36219                                  ;	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 36220                                  ;commnd4: db	"\DOS\COMMAND.COM",0 	;
 36221                                  ;	 db	9,"A:\DOS /P",0		;
 36222                                  ;def_swchr:	
 36223                                  ;	 db	0			; default switchchar (referenced as command_line-1)
 36224                                  ;;endif
 36225                                  
 36226                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36227                                  ;command_line:
 36228                                  ;	db	2,"/P"			; default command.com args
 36229                                  ;	;db	125 dup (0)
 36230                                  ;	times	125 db 0
 36231                                  
 36232                                  pathstring:
 36233                                  	;db	64 dup (0)
 36234 0000345D 00<rep 40h>             	times	64 db 0
 36235                                  
 36236                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36237                                  %if 0
 36238                                  
 36239                                  dae_flag:
 36240                                  	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 36241                                  
 36242                                  ;ifdef	MULTI_CONFIG
 36243                                  
 36244                                  MAX_MULTI_CONFIG equ 10
 36245                                  
 36246                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 36247                                  
 36248                                  bMenuColor:	db      07h ;1Fh        ; default fgnd/bgnd color
 36249                                  bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 36250                                  		db      5               ; video page function # (KEEP AFTER bMenuPage)
 36251                                  bLastCol:	db      0               ; ending column on status line
 36252                                  bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 36253                                  bDisableUI:	db      0               ; 1=disable clean/interactive
 36254                                                                          ; 2=disable default 2-second delay
 36255                                  bCRTPage:	db      0               ; value saved from BIOS data area
 36256                                  wCRTStart:	dw      0               ; value saved from BIOS data area
 36257                                  bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 36258                                  bDefBlock:	db      1               ; default block #
 36259                                  bMaxBlock:	db      0               ; maxmimum block #
 36260                                  offDefBlock:	dw      0               ; offset of name of default block (if any)
 36261                                  secTimeOut:	db      -1              ; # of seconds for timeout (-1 == indefinite)
 36262                                  secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 36263                                  abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 36264                                  aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 36265                                  aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 36266                                  
 36267                                  szBoot:		db      "CONFIG=",0
 36268                                  szMenu:		db      "MENU",0
 36269                                  szCommon:	db      "COMMON",0
 36270                                  
 36271                                  ;endif	;MULTI_CONFIG
 36272                                  
 36273                                  comtab:	 ; label byte
 36274                                  
 36275                                  ;            cmd len    command         cmd code
 36276                                  ;            -------    -------         --------
 36277                                  
 36278                                  ;ifdef MULTI_CONFIG
 36279                                          db      1,      "[",            CONFIG_BEGIN
 36280                                  ;endif
 36281                                          db      5,      "BREAK",        CONFIG_BREAK
 36282                                          db      7,      "BUFFERS",      CONFIG_BUFFERS
 36283                                          db      7,      "COMMENT",      CONFIG_COMMENT
 36284                                          db      7,      "COUNTRY",      CONFIG_COUNTRY
 36285                                          db      6,      "DEVICE",       CONFIG_DEVICE
 36286                                          db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36287                                          db      3,      "DOS",          CONFIG_DOS
 36288                                          db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36289                                          db      4,      "FCBS",         CONFIG_FCBS
 36290                                          db      5,      "FILES",        CONFIG_FILES
 36291                                  ;ifdef MULTI_CONFIG
 36292                                          db      7,      "INCLUDE",      CONFIG_INCLUDE
 36293                                  ;endif
 36294                                          db      7,      "INSTALL",      CONFIG_INSTALL
 36295                                          db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 36296                                          db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36297                                  ;ifdef MULTI_CONFIG
 36298                                          db      7,      "SUBMENU",      CONFIG_SUBMENU
 36299                                          db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 36300                                          db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 36301                                          db      8,      "MENUITEM",     CONFIG_MENUITEM
 36302                                  ;endif
 36303                                          db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36304                                  ;ifdef MULTI_CONFIG
 36305                                          db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 36306                                  ;endif
 36307                                          db      3,      "REM",          CONFIG_REM
 36308                                  ;ifdef MULTI_CONFIG
 36309                                          db      3,      "SET",          CONFIG_SET
 36310                                  ;endif
 36311                                          db      5,      "SHELL",        CONFIG_SHELL
 36312                                  ;if    STACKSW
 36313                                          db      6,      "STACKS",       CONFIG_STACKS
 36314                                  ;endif
 36315                                          db      8,      "SWITCHES",     CONFIG_SWITCHES
 36316                                  	db	0
 36317                                  %endif
 36318                                  
 36319                                  comtab:
 36320                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36321                                  	; (SYSINIT:38EDh)
 36322 0000349D 074255464645525342      	db      7,      "BUFFERS",      CONFIG_BUFFERS
 36323 000034A6 05425245414B43          	db      5,      "BREAK",        CONFIG_BREAK
 36324 000034AD 0644455649434544        	db      6,      "DEVICE",       CONFIG_DEVICE
 36325 000034B5 0A4445564943454849-     	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36325 000034BE 474855             
 36326 000034C1 0546494C455346          	db      5,      "FILES",        CONFIG_FILES
 36327 000034C8 044643425358            	db      4,      "FCBS",         CONFIG_FCBS
 36328 000034CE 094C41535444524956-     	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36328 000034D7 454C               
 36329 000034D9 0A4D554C5449545241-     	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36329 000034E2 434B4D             
 36330 000034E5 08445249565041524D-     	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36330 000034EE 50                 
 36331 000034EF 06535441434B534B        	db      6,      "STACKS",       CONFIG_STACKS
 36332 000034F7 07434F554E54525951      	db      7,      "COUNTRY",      CONFIG_COUNTRY
 36333 00003500 055348454C4C53          	db      5,      "SHELL",        CONFIG_SHELL
 36334 00003507 07494E5354414C4C49      	db      7,      "INSTALL",      CONFIG_INSTALL
 36335 00003510 07434F4D4D454E5459      	db      7,      "COMMENT",      CONFIG_COMMENT
 36336 00003519 0352454D30              	db      3,      "REM",          CONFIG_REM
 36337 0000351E 085357495443484553-     	db      8,      "SWITCHES",     CONFIG_SWITCHES
 36337 00003527 31                 
 36338 00003528 03444F5348              	db      3,      "DOS",          CONFIG_DOS
 36339 0000352D 00                      	db	0
 36340                                  
 36341                                  deviceparameters:	
 36342                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 36343                                  devp.specialfunc:	; deviceparameters +
 36344 0000352E 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 36345                                  devp.devtype:
 36346 0000352F 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 36347                                  devp.devattr:
 36348 00003530 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 36349                                  devp.cylinders:
 36350 00003532 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 36351                                  
 36352 00003534 00<rep 11Eh>            	times	286	db 0
 36353                                  	
 36354 00003652 0200                    hlim:	dw	2
 36355 00003654 0900                    slim:	dw	9
 36356                                  
 36357 00003656 00                      drive:	db	0
 36358                                  
 36359                                  switches:
 36360 00003657 0000                    	dw	0
 36361                                  
 36362                                  ; the following are the recommended bpbs for the media that
 36363                                  ; we know of so far.
 36364                                  
 36365                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36366                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 36367                                  
 36368                                  ; 48 tpi diskettes
 36369                                  
 36370 00003659 0002                    bpb48t	dw	512
 36371 0000365B 02                      	db	2
 36372 0000365C 0100                    	dw	1
 36373 0000365E 02                      	db	2
 36374 0000365F 7000                    	dw	112
 36375 00003661 D002                    	dw	2*9*40 ; 720
 36376 00003663 FD                      	db	0FDh
 36377 00003664 0200                    	dw	2
 36378 00003666 0900                    	dw	9
 36379 00003668 0200                    	dw	2
 36380 0000366A 00000000                	dd	0
 36381 0000366E 00000000                        dd      0
 36382                                  
 36383                                  ; 96tpi diskettes
 36384                                  
 36385 00003672 0002                    bpb96t:	dw	512
 36386 00003674 01                      	db	1
 36387 00003675 0100                    	dw	1
 36388 00003677 02                      	db	2
 36389 00003678 E000                    	dw	224
 36390 0000367A 6009                    	dw	2*15*80 ; 2400
 36391 0000367C F9                      	db	0F9h
 36392 0000367D 0700                    	dw	7
 36393 0000367F 0F00                    	dw	15
 36394 00003681 0200                    	dw	2
 36395 00003683 00000000                	dd	0
 36396 00003687 00000000                        dd      0
 36397                                  
 36398                                  ; 3 1/2 inch diskette bpb
 36399                                  
 36400 0000368B 0002                    bpb35:	dw	512
 36401 0000368D 02                      	db	2
 36402 0000368E 0100                    	dw	1
 36403 00003690 02                      	db	2
 36404 00003691 7000                    	dw	112
 36405 00003693 A005                    	dw	2*9*80 ; 1440
 36406 00003695 F9                      	db	0F9h
 36407 00003696 0300                    	dw	3
 36408 00003698 0900                    	dw	9
 36409 0000369A 0200                    	dw	2
 36410 0000369C 00000000                	dd	0
 36411 000036A0 00000000                        dd      0
 36412                                        
 36413 000036A4 0002                    bpb35h:	dw	512
 36414 000036A6 01                      	db	1
 36415 000036A7 0100                    	dw	1
 36416 000036A9 02                      	db	2
 36417 000036AA E000                    	dw	224
 36418 000036AC 400B                    	dw	2*18*80 ; 2880
 36419 000036AE F0                      	db	0F0h
 36420 000036AF 0900                    	dw	9
 36421 000036B1 1200                    	dw	18
 36422 000036B3 0200                    	dw	2
 36423 000036B5 00000000                	dd	0
 36424 000036B9 00000000                        dd      0
 36425                                  
 36426                                  ; m037 - BEGIN
 36427                                  
 36428 000036BD 0002                    bpb288:	dw	512
 36429 000036BF 02                      	db	2
 36430 000036C0 0100                    	dw	1
 36431 000036C2 02                      	db	2
 36432 000036C3 F000                    	dw	240
 36433 000036C5 8016                    	dw	2*36*80 ; 5760
 36434 000036C7 F0                      	db	0F0h
 36435 000036C8 0900                    	dw	9
 36436 000036CA 2400                    	dw	36
 36437 000036CC 0200                    	dw	2
 36438 000036CE 00000000                	dd	0
 36439 000036D2 00000000                        dd      0
 36440                                  
 36441                                  ; m037 - END
 36442                                  
 36443                                  ; 12/05/2019
 36444                                  
 36445                                  align 2
 36446                                  
 36447                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36448                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 36449                                  
 36450 000036D6 [5936]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 36451 000036D8 [7236]                  	    dw	    bpb96t		; 96tpi drives
 36452 000036DA [8B36]                  	    dw	    bpb35		; 3.5" drives
 36453                                  ; the following are not supported, so default to 3.5" media layout
 36454 000036DC [8B36]                  	    dw	    bpb35		; not used - 8" drives
 36455 000036DE [8B36]                  	    dw	    bpb35		; not used - 8" drives
 36456 000036E0 [8B36]                  	    dw	    bpb35		; not used - hard files
 36457 000036E2 [8B36]                  	    dw	    bpb35		; not used - tape drives
 36458 000036E4 [A436]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 36459 000036E6 [8B36]                  	    dw	    bpb35		; ERIMO				m037
 36460 000036E8 [BD36]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 36461                                  
 36462                                  switchlist: 
 36463 000036EA 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 36464                                  
 36465                                  ;----------------------------------------------------------------------------
 36466                                  ; Messages
 36467                                  ;----------------------------------------------------------------------------
 36468                                  
 36469                                  ; 19/04/2019 - Retro DOS v4.0
 36470                                  
 36471                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 36472                                  
 36473 000036F3 00                      	db 	0
 36474                                  
 36475                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36476                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 36477                                  
 36478                                  badopm:
 36479 000036F4 0D0A                    	db	0Dh,0Ah 
 36480 000036F6 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 36480 000036FF 7A656420636F6D6D61-
 36480 00003708 6E6420696E20434F4E-
 36480 00003711 4649472E535953     
 36481                                  crlfm:
 36482 00003718 0D0A24                  	db	0Dh,0Ah,'$'
 36483                                  badparm:
 36484 0000371B 0D0A                    	db	0Dh,0Ah
 36485 0000371D 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 36485 00003726 6E64206F7220706172-
 36485 0000372F 616D6574657273202D-
 36485 00003738 2024               
 36486                                  badsiz_pre:
 36487 0000373A 0D0A                    	db	0Dh,0Ah
 36488 0000373C 536563746F72207369-     	db	'Sector size too large in file $'
 36488 00003745 7A6520746F6F206C61-
 36488 0000374E 72676520696E206669-
 36488 00003757 6C652024           
 36489                                  badld_pre:
 36490 0000375B 0D0A                    	db	0Dh,0Ah
 36491 0000375D 426164206F72206D69-     	db	'Bad or missing $'
 36491 00003766 7373696E672024     
 36492                                  badcom:
 36493 0000376D 436F6D6D616E642049-     	db	'Command Interpreter',0
 36493 00003776 6E7465727072657465-
 36493 0000377F 7200               
 36494                                  badcountry:
 36495 00003781 0D0A                    	db	0Dh,0Ah
 36496 00003783 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 36496 0000378C 6F756E74727920636F-
 36496 00003795 6465206F7220636F64-
 36496 0000379E 6520706167650D0A24 
 36497                                  badcountrycom:
 36498 000037A7 0D0A                    	db	0Dh,0Ah
 36499 000037A9 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 36499 000037B2 434F554E5452592063-
 36499 000037BB 6F6D6D616E640D0A24 
 36500                                  insufmemory:
 36501 000037C4 0D0A                    	db	0Dh,0Ah
 36502 000037C6 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 36502 000037CF 656E74206D656D6F72-
 36502 000037D8 7920666F7220434F55-
 36502 000037E1 4E5452592E53595320-
 36502 000037EA 66696C650D0A24     
 36503                                  badmem:
 36504 000037F1 0D0A                    	db	0Dh,0Ah
 36505 000037F3 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 36505 000037FC 74696F6E20746F6F20-
 36505 00003805 6C6172676520666F72-
 36505 0000380E 206D656D6F72790D0A-
 36505 00003817 24                 
 36506                                  badblock:
 36507 00003818 0D0A                    	db	0Dh,0Ah
 36508 0000381A 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 36508 00003823 626C6F636B20646576-
 36508 0000382C 696365730D0A24     
 36509                                  badstack:
 36510 00003833 0D0A                    	db	0Dh,0Ah
 36511 00003835 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 36511 0000383E 5441434B2070617261-
 36511 00003847 6D65746572730D0A24 
 36512                                  	; 18/12/2022
 36513                                  ;badorder:
 36514                                  	;db	0Dh,0Ah
 36515                                  	;db	'Incorrect order in CONFIG.SYS line $'
 36516                                  errorcmd:
 36517 00003850 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 36517 00003859 434F4E4649472E5359-
 36517 00003862 53206C696E652024   
 36518                                  
 36519                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36520                                  %if 0
 36521                                  
 36522                                  OnOff:	db	'ON'
 36523                                  OnOff2:	db	'OFF'
 36524                                  
 36525                                  StartMsg:
 36526                                  	db	'Starting MS-DOS...',0Dh,0Ah
 36527                                  	db	0Ah,0
 36528                                  _$PauseMsg:
 36529                                  	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 36530                                  _$CleanMsg:
 36531                                  	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 36532                                  _$InterMsg:
 36533                                  	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 36534                                  _$MenuHeader:
 36535                                  	db	0Dh,0Ah
 36536                                  	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 36537                                  	db	'  =======================',0Dh,0Ah,'$'
 36538                                  _$MenuPrmpt:
 36539                                  	db	'  Enter a choice: $'
 36540                                  _$StatusLine:
 36541                                  	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS'
 36542                                  	db	'and AUTOEXEC.BAT [ ]$'
 36543                                  _$InterPrmpt:
 36544                                  	db	' [Y,N]?$'
 36545                                  _$YES:	db	'YES$'
 36546                                  _$NO:	db	'NO $'
 36547                                  _$TimeOut:
 36548                                  	db	'Time remaining: $'
 36549                                  badcomprmpt:
 36550                                  	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 36551                                  	db	0Dh,0Ah,'$'
 36552                                  _$AutoPrmpt:
 36553                                  	db	'Process AUTOEXEC.BAT [Y,N]?$'
 36554                                  
 36555                                  %endif
 36556                                  
 36557                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36558                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 36559                                  
 36560                                  TooManyDrivesMsg:
 36561 0000386A 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 36561 00003873 4C6F676963616C2064-
 36561 0000387C 726976657320706173-
 36561 00003885 74205A3A2065786973-
 36561 0000388E 7420616E642077696C-
 36561 00003897 6C2062652069676E6F-
 36561 000038A0 7265640D0A24       
 36562                                  
 36563                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 36564                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 36565                                  	;db	7 dup(0)
 36566                                  
 36567                                  	;times	7 db 0
 36568                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36569                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 36570                                  	; 09/12/2022
 36571                                  	;times 4 db 0
 36572                                  
 36573                                  ;----------------------------------------------------------------------------
 36574                                  		; 09/12/2022
 36575                                  		;db 0
 36576                                  
 36577                                  number3div	equ ($-SYSINIT$)
 36578                                  number3mod	equ (number3div % 16)
 36579                                  
 36580                                  %if number3mod>0 & number3mod<16
 36581 000038A6 00<rep Ah>              		times (16-number3mod) db 0
 36582                                  %endif
 36583                                  
 36584                                  ;----------------------------------------------------------------------------
 36585                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 36586                                  ;----------------------------------------------------------------------------
 36587                                  
 36588                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 36589                                  
 36590                                  ;----------------------------------------------------------------------------
 36591                                  ; 20/04/2019 - Retro DOS v4.0
 36592                                  
 36593                                  ; 09/12/2022
 36594                                  ;
 36595                                  ;bss_start:
 36596                                  ;
 36597                                  ;ABSOLUTE bss_start
 36598                                  ;
 36599                                  ;alignb 16
 36600                                  
 36601                                  SI_end:  ; SI_end equ $
 36602                                  
 36603                                  ;----------------------------------------------------------------------------
 36604                                  
 36605                                  ;sysinitseg	ends
 36606                                  
 36607                                  ; ***************************************************************************
 36608                                  
 36609                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 36610                                  
 36611                                  SYSINITSIZE	equ SI_end - SYSINIT$
 36612                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 36613                                  
 36614                                  ;----------------------------------------------------------------------------
 36615                                  ; End of Retro DOS v4.0 (MSDOS 5.0) IO.SYS source by Erdogan Tan - 09/12/2022
 36616                                  ;----------------------------------------------------------------------------
 36617                                  
 36618                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 36619                                  ;----------------------------------------------------------------------------
 36620                                  ;----------------------------------------------------------------------------
 36621                                  
 36622                                  ; ----------------------------------------------------------------------------
 36623                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 36624                                  ; ----------------------------------------------------------------------------
 36625                                  ; 18/03/2019 - Retro DOS v4.0 
 36626                                  ; 11/06/2018 - Retro DOS v3.0 
 36627                                  
 36628                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 36629                                  		;; 28/06/2019 ('msdos6.s') 
 36630                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 36631                                  		
 36632                                  		; 29/12/2022
 36633 000038B0 <bin 8EFAh>             		incbin	'MSDOS51.BIN' ; Retro DOS 4.1 - MSDOS 5.0+ KERNEL
 36634                                  		
 36635                                  		;; 28/12/2022 (BugFix)
 36636                                  		;; 22/12/2022
 36637                                  		;; 21/12/2022 ('msdos5.s')
 36638                                  		;incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 36639                                  	
 36640                                  msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 36641                                  
 36642                                  align 2
 36643                                  
 36644                                  ; 21/12/2022
 36645                                  ;END_OF_KERNEL:
 36646                                  END_OF_KERNEL equ $
 36647                                  
 36648                                  ;=============================================================================
 36649                                  ;	END
 36650                                  ;=============================================================================
 36651                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 36652                                  ; ------------------------------
 36653                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
