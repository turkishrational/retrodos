     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 02/09/2023 - Retro DOS v4.1 (Previous: 28/08/2023)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 25/05/2018 (Retro DOS 3.0), 26/12/2018 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15 (2.11)
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))		-	
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB    (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  
   881                                  section .BIOSDATA vstart=0
   882                                  
   883                                  ;--- DOSBIOS data segment ----------------------------------------------------
   884                                  ;-----------------------------------------------------------------------------
   885                                  
   886                                  ;Bios_Data segment
   887                                  
   888                                  BData_start:				
   889 00000000 E96017                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   890                                  ; ----------------------------------------------------------------------------
   891                                  
   892 00000003 0000                    DosDataSg:	dw 0
   893                                  
   894                                  ; DOS's int 2f handler will exit via a jump through here.
   895                                  ; This is how the BIOS hooks int2f
   896                                  			
   897 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   898 00000006 [9108]                  off_706:	dw int_2f
   899 00000008 7000                    word_708:	dw 70h			; KERNEL_SEGMENT
   900                                  
   901 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   902                                  					; This is to maintain binary compatibility
   903                                  					; with DISK based DOS 5.0
   904                                  
   905                                  ; This is a byte used for special key handling in the resident
   906                                  ; console device driver. It must be here so that it can be included
   907                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   908                                  
   909 0000000C 00                      altah:		db 0			; special key handling
   910                                  			
   911 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   912 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   913                                  
   914                                  ; PTRSAV - pointer save
   915                                  ;
   916                                  ; This variable holds the pointer to the Request Header passed by a program
   917                                  ; wishing to use a device driver. When the strategy routine is called it 
   918                                  ; puts the address of the Request header in this variable and returns.
   919                                  		
   920 00000012 00000000                ptrsav:		dd 0			
   921                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   922 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   923 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   924 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   925 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   926 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   927 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   928                                  
   929                                  ;-----------------------------------------------------------------------------
   930                                  
   931                                  res_dev_list:
   932                                  
   933                                  ; Device Header for the CON Device Driver
   934                                  
   935                                  CONHeader:				; HEADER FOR DEVICE "CON"
   936 00000023 [3500]                  		dw auxdev2
   937 00000025 7000                    		dw 70h	
   938 00000027 1380                    word_727:	dw 8013h
   939 00000029 [F506]                  		dw strategy
   940 0000002B [0007]                  		dw con_entry
   941 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   942 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   943 00000037 7000                    		dw 70h
   944 00000039 0080                    		dw 8000h
   945 0000003B [F506]                  		dw strategy
   946 0000003D [2107]                  		dw aux0_entry
   947 0000003F 4155582020202020        aAux:		db 'AUX     '
   948 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   949 00000049 7000                    		dw 70h
   950 0000004B C0A0                    word_74B:	dw 0A0C0h
   951 0000004D [F506]                  		dw strategy
   952 0000004F [0507]                  		dw prn0_entry
   953 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   954 00000059 [6B00]                  timdev:		dw dskdev	
   955 0000005B 7000                    		dw 70h
   956 0000005D 0880                    		dw 8008h
   957 0000005F [F506]                  		dw strategy
   958 00000061 [3907]                  		dw tim_entry
   959 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   960 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   961 0000006D 7000                    		dw 70h
   962 0000006F C208                    		dw 8C2h
   963                                  		;dw offset strategy
   964                                  		;dw offset dsk_entry
   965                                  		; 19/10/2022
   966 00000071 [F506]                  		dw strategy
   967 00000073 [3E07]                  		dw dsk_entry
   968                                  
   969                                  ; maximum number of drives
   970                                  
   971 00000075 04                      drvmax:		db 4			
   972 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   973 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   974                                  					; 96tpi support		
   975 00000078 00                      single:		db 0			; used to detect single drive systems		
   976 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   977                                  					; used by console driver.			
   978 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   979                                  					; drive. (examined by checksingle).
   980                                  		
   981 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   982 0000007D 7000                    		dw 70h
   983 0000007F 0080                    		dw 8000h
   984 00000081 [F506]                  		dw strategy
   985 00000083 [2107]                  		dw aux0_entry
   986 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   987 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   988 0000008F 7000                    		dw 70h
   989 00000091 C0A0                    		dw 0A0C0h
   990 00000093 [F506]                  		dw strategy
   991 00000095 [0C07]                  		dw prn1_entry
   992 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
   993 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
   994 000000A1 7000                    		dw 70h
   995 000000A3 C0A0                    		dw 0A0C0h
   996 000000A5 [F506]                  		dw strategy
   997 000000A7 [1307]                  		dw prn2_entry
   998 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
   998 000000B2 0000               
   999                                  
  1000                                  ;M058; Start of changes
  1001                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1002                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1003                                  ;cannot change for them to work. Even ProComm does this.
  1004                                  
  1005 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1006                                  
  1007 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1008 000000BA 7000                    		dw 70h
  1009 000000BC C0A0                    		dw 0A0C0h
  1010 000000BE [F506]                  		dw strategy
  1011 000000C0 [1A07]                  		dw prn3_entry
  1012 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1013 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1014 000000CC 7000                    		dw 70h
  1015 000000CE 0080                    		dw 8000h
  1016 000000D0 [F506]                  		dw strategy
  1017 000000D2 [2707]                  		dw aux1_entry
  1018                                  		; 19/10/2022
  1019 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1020                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1021 000000DC [EE00]                  		dw com4dev
  1022 000000DE 7000                    		dw 70h
  1023 000000E0 0080                    		dw 8000h
  1024                                  		;dw offset strategy
  1025                                  		;dw offset aux2_entry
  1026 000000E2 [F506]                  		dw strategy
  1027 000000E4 [2D07]                  		dw aux2_entry	
  1028 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1029 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1030 000000F0 7000                    		dw 70h
  1031 000000F2 0080                    		dw 8000h
  1032 000000F4 [F506]                  		dw strategy
  1033 000000F6 [3307]                  		dw aux3_entry
  1034 000000F8 434F4D3420202020        		db 'COM4    '
  1035                                  
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  
  1038 00000100 10                      RomVectors:	db 10h			
  1039 00000101 00000000                Old10:		dd 0
  1040 00000105 13                      		db 13h
  1041 00000106 00000000                Old13:		dd 0			
  1042 0000010A 15                      		db 15h
  1043 0000010B 00000000                Old15:		dd 0			
  1044 0000010F 19                      		db 19h
  1045 00000110 00000000                Old19:		dd 0
  1046 00000114 1B                      		db 1Bh
  1047 00000115 00000000                Old1B:		dd 0
  1048                                  
  1049                                  ;EndRomVectors	equ $
  1050                                  
  1051                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1052                                  
  1053                                  ;-----------------------------------------------------------------------------
  1054                                  
  1055 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1056 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1057                                  
  1058                                  ; (MSDOS 3.3) NOTE:
  1059                                  ; Some floppy drives do not have changeline support. The result is a
  1060                                  ; large amount of inefficiency in the code. A media-check always returns
  1061                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1062                                  ; always discard any cached data.
  1063                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1064                                  ; The following three items are used to do this. The logical door latch is
  1065                                  ; based on the premise that it is not physically possible to change floppy
  1066                                  ; disks in a drive in under two seconds (most people take about 10). The
  1067                                  ; logical door latch is implemented by saving the time of the last successful
  1068                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1069                                  ; current time is compared to the saved time. If less than two seconds have
  1070                                  ; passed then the value "No Change" is returned. If more than two seconds
  1071                                  ; have passed the value "Don't Know" is returned.
  1072                                  ;    There is one complecation to this algorithm. Some programs change the
  1073                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1074                                  ; This possibility is detected by counting the number of disk operations
  1075                                  ; which occur without any time passing. If this count exceeds the value of
  1076                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1077                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1078                                  ; of disk operation which occur without the time changing.
  1079                                  
  1080 0000011D 00                      accesscount:	db 0			
  1081 0000011E FF                      tim_drv:	db 0FFh			
  1082 0000011F 00                      medbyt:		db 0
  1083                                  wrtverify:	; 15/10/2022			
  1084 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1085 00000121 00                      verify:		db 0			; 1 if verify after write
  1086 00000122 0000                    seccnt:		dw 0			
  1087 00000124 00                      		db 0			; -- pad where hardnum was
  1088 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1089                                  
  1090                                  ; (MSDOS 3.3) NOTE:
  1091                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1092                                  ; have to be made to read the diskette. Consequently a large head settle
  1093                                  ; time was always used in the I/O operations. To get around this problem
  1094                                  ; we need to continually adjust the head settle time. The following
  1095                                  ; algorithm is used:
  1096                                  ;
  1097                                  ;   Get the current head settle value.
  1098                                  ;   If it is 1, then
  1099                                  ;	set slow = 15
  1100                                  ;   else
  1101                                  ;	set slow = value
  1102                                  ;   ...
  1103                                  ;   if we are seeking and writing then
  1104                                  ;	use slow
  1105                                  ;   else
  1106                                  ;	use fast
  1107                                  ;   ...
  1108                                  ;   restore current head settle value
  1109                                  
  1110 00000126 00                      motorstartup:	db 0			; value from table
  1111 00000127 00                      settlecurrent:	db 0			; value	from table
  1112 00000128 00                      settleslow:	db 0			; slow settle value
  1113 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1114 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1115 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1116 0000012C 09                      eot:		db 9			
  1117 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table			
  1118 00000131 00                      cursec:		db 0			; current sector
  1119 00000132 00                      curhd:		db 0			; current head
  1120 00000133 0000                    curtrk:		dw 0			; current track
  1121 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1122 00000137 08                      formt_eot:	db 8			; eot used for format
  1123 00000138 00                      hdnum:		db 0			; head number
  1124 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1125 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1126                                  
  1127                                  ;-----------------------------------------------------------------------------
  1128                                  
  1129                                  ; disk errors returned from the IBM rom
  1130                                  
  1131 0000013C CC                      errin:		db 0CCh			; write	fault error
  1132 0000013D 80                      		db 80h			; no response
  1133 0000013E 40                      		db 40h			; seek failure
  1134 0000013F 10                      		db 10h			; bad crc
  1135 00000140 08                      		db 8			; dma overrun
  1136 00000141 06                      		db 6			; media	change
  1137 00000142 04                      		db 4			; sector not found
  1138 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1139 00000144 00                      lsterr:		db 0			; all other errors
  1140                                  
  1141                                  ; returned error codes corresponding to above
  1142                                  
  1143 00000145 0A                      errout:		db 10			; write	fault error
  1144 00000146 02                      		db 2			; no response
  1145 00000147 06                      		db 6			; seek failure
  1146 00000148 04                      		db 4			; bad crc
  1147 00000149 04                      		db 4			; dma overrun
  1148 0000014A 0F                      		db 15			; invalid media	change
  1149 0000014B 08                      		db 8			; sector not found
  1150 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1151 0000014D 0C                      		db 12			; general error
  1152                                  
  1153                                  ;-----------------------------------------------------------------------------
  1154                                  
  1155                                  ; 30/12/2018 - Retro DOS v4.0
  1156                                  
  1157                                  ; read in boot sector here, read done in readboot.
  1158                                  ; also read sector for dma check for hard disk.
  1159                                  ;
  1160                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1161                                  ; in them which causes the byte after the buffer to be trashed
  1162                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1163                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1164                                  ; makes that system more-or-less work.
  1165                                  
  1166                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1167                                  		; 19/10/2022
  1168 0000014E 00<rep 200h>            		times 512 db 0
  1169                                  
  1170                                  ;-----------------------------------------------------------------------------
  1171                                  
  1172                                  ; 30/12/2018 - Retro DOS v4.0
  1173                                  ;-----------------------------------------------------------------------------
  1174                                  ; 25/05/2018 (04/04/2018)
  1175                                  ;*****************************************************************************
  1176                                  ;	"bds" contains information for each drive in the system.
  1177                                  ;	various values are patched whenever actions are performed.
  1178                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1179                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1180                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1181                                  ;	that the parameters have not been set.
  1182                                  
  1183                                  bds1:		;dw offset bds2
  1184 0000034E [B203]                  		dw bds2	; 19/10/2022
  1185 00000350 7000                    		dw 70h			; dword	link to	next structure
  1186 00000352 00                      		db 0			; int 13h drive	number
  1187 00000353 00                      		db 0			; logical drive	letter
  1188 00000354 0002                    fdrive1:	dw 512			
  1189                                  					; physical sector size in bytes
  1190 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1191 00000357 0100                    		dw 1			; reserved sectors for dos
  1192 00000359 02                      		db 2			; no of	file allocation	tables
  1193 0000035A 4000                    		dw 64			; number of root directory entries
  1194 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1195 0000035E 00                      		db 0			; media	descriptor, initially 0
  1196 0000035F 0200                    		dw 2			; number of fat	sectors
  1197 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1198 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1199 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1200 00000367 0000                    		dw 0			; hidden sector	(high)
  1201 00000369 0000                    		dw 0			; number sectors (low)
  1202 0000036B 0000                    		dw 0			; number sectors (high)
  1203 0000036D 00                      		db 0			; true => large	fats
  1204 0000036E 0000                    		dw 0			; open ref. count
  1205 00000370 03                      		db 3			; form factor
  1206 00000371 2000                    		dw 20h			; various flags
  1207 00000373 2800                    		dw 40			; number of cylinders
  1208 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1209 00000377 01                      		db 1
  1210 00000378 0100                    		dw 1
  1211 0000037A 02                      		db 2
  1212 0000037B E000                    		dw 224			; number of root directory entries
  1213 0000037D 6801                    		dw 360
  1214 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1215 00000380 0200                    		dw 2
  1216 00000382 0900                    		dw 9
  1217 00000384 0200                    		dw 2
  1218 00000386 0000                    		dw 0
  1219 00000388 0000                    		dw 0
  1220 0000038A 0000                    		dw 0
  1221 0000038C 0000                    		dw 0
  1222                                  		;db 6 dup(0)
  1223 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1224 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1225 00000395 FFFF                    word_A95:	dw 0FFFFh		; keep these two contiguous (?)
  1226 00000397 FFFF                    		dw 0FFFFh
  1227 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1227 000003A2 202000             
  1228 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1229 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1230                                  ; ----
  1231                                  
  1232 000003B2 [1604]                  bds2:		dw bds3		
  1233 000003B4 7000                    		dw 70h
  1234 000003B6 00                      		db 0
  1235 000003B7 00                      		db 0
  1236 000003B8 0002                    fdrive2:	dw 512			
  1237 000003BA FF0100024000680100-     byte_ABA:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1237 000003C3 020009000100       
  1238 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1238 000003D2 00000320002800     
  1239 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1239 000003E2 01F002000900       
  1240 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1240 000003F1 00000000000000FF   
  1241 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1241 00000402 4D                 
  1242 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1242 0000040C 00464154           
  1243 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1244                                  ; ----
  1245                                  
  1246 00000416 [7A04]                  bds3:		dw bds4		
  1247 00000418 7000                    		dw 70h
  1248 0000041A 00                      		db 0
  1249 0000041B 00                      		db 0
  1250 0000041C 0002                    fdrive3:	dw 512			
  1251 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1251 00000427 020009000100       
  1252 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1252 00000436 00000320002800     
  1253 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1253 00000446 01F002000900       
  1254 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1254 00000455 00000000000000FF   
  1255 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1255 00000466 4D                 
  1256 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1256 00000470 00464154           
  1257 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1258                                  ; ----
  1259                                  
  1260 0000047A FFFF                    bds4:		dw 0FFFFh		
  1261 0000047C 7000                    		dw 70h
  1262 0000047E 00                      		db 0
  1263 0000047F 00                      		db 0
  1264 00000480 0002                    fdrive4:	dw 512			
  1265 00000482 FF0100024000680100-     byte_B82:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1265 0000048B 020009000100       
  1266 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1266 0000049A 00000320002800     
  1267 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1267 000004AA 01F002000900       
  1268 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1268 000004B9 00000000000000FF   
  1269 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1269 000004CA 4D                 
  1270 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1270 000004D4 00464154           
  1271 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1272                                  
  1273                                  ;-----------------------------------------------------------------------------
  1274                                  
  1275 000004DE 03                      sm92:		db 3			; .spf			
  1276 000004DF 09                      		db 9			; .spt
  1277 000004E0 70                      		db 112	; 70h		; .cdire
  1278 000004E1 A005                    		dw 1440	; 2*9*80	; .csec
  1279 000004E3 02                      		db 2			; .spau
  1280 000004E4 02                      		db 2			; .chead
  1281                                  
  1282 000004E5 00                      keyrd_func:	db 0			
  1283 000004E6 01                      keysts_func:	db 1			
  1284 000004E7 00                      printdev:	db 0			; printer device index
  1285                                  
  1286                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1287 000004E8 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1288                                  
  1289 000004F0 0000                    daycnt:		dw 0			
  1290 000004F2 00                      t_switch:	db 0			; flag for updating daycnt
  1291 000004F3 00                      havecmosclock:	db 0			
  1292 000004F4 13                      base_century:	db 19			
  1293 000004F5 50                      base_year:	db 80			
  1294 000004F6 1F1C1F1E1F1E1F1F1E-     month_tab:	db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
  1294 000004FF 1F1E1F             
  1295 00000502 [FD14]                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1296 00000504 7000                    		dw 70h ; 17/10/2022	
  1297 00000506 [2C14]                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1298 00000508 7000                    		dw 70h ; 17/10/2022
  1299 0000050A 00                      set_id_flag:	db 0			; flag for getbp routine
  1300 0000050B 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1301 00000514 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1302 0000051D 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1302 00000526 202000             
  1303                                  
  1304 00000529 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1305 0000052B 0000                    start_sec_h:	dw 0			; starting sector number high word
  1306 0000052D 0000                    saved_word:	dw 0			; tempory saving place for a word
  1307 0000052F 0000                    multrk_flag:	dw 0			
  1308 00000531 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1309 00000532 0000                    vretry_cnt:	dw 0			
  1310 00000534 0000                    soft_ecc_cnt:	dw 0			
  1311 00000536 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1312 00000537 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1313                                  
  1314                                  ; variables for msdioctl.asm module
  1315                                  
  1316                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1317                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1318                                  ;	n	bytes per sector
  1319                                  ;      ---	----------------
  1320                                  ;	0	      128
  1321                                  ;	1	      256
  1322                                  ;	2	      512
  1323                                  ;	3	     1024
  1324                                  
  1325                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1326                                  ;					; we support (was 40 in dos 3.2)
  1327                                  
  1328 00000539 2400                    sectorspertrack: dw 36			
  1329 0000053B 00000102                tracktable:	db 0, 0, 1, 2		
  1330 0000053F 00000202                		db 0, 0, 2, 2
  1331 00000543 00000302                		db 0, 0, 3, 2
  1332 00000547 00000402                		db 0, 0, 4, 2
  1333 0000054B 00000502                		db 0, 0, 5, 2
  1334 0000054F 00000602                		db 0, 0, 6, 2
  1335 00000553 00000702                		db 0, 0, 7, 2
  1336 00000557 00000802                		db 0, 0, 8, 2
  1337 0000055B 00000902                		db 0, 0, 9, 2
  1338 0000055F 00000A02                		db 0, 0, 10, 2
  1339 00000563 00000B02                		db 0, 0, 11, 2
  1340 00000567 00000C02                		db 0, 0, 12, 2
  1341 0000056B 00000D02                		db 0, 0, 13, 2
  1342 0000056F 00000E02                		db 0, 0, 14, 2
  1343 00000573 00000F02                		db 0, 0, 15, 2
  1344 00000577 00001002                		db 0, 0, 16, 2
  1345 0000057B 00001102                		db 0, 0, 17, 2
  1346 0000057F 00001202                		db 0, 0, 18, 2
  1347 00000583 00001302                		db 0, 0, 19, 2
  1348 00000587 00001402                		db 0, 0, 20, 2
  1349 0000058B 00001502                		db 0, 0, 21, 2
  1350 0000058F 00001602                		db 0, 0, 22, 2
  1351 00000593 00001702                		db 0, 0, 23, 2
  1352 00000597 00001802                		db 0, 0, 24, 2
  1353 0000059B 00001902                		db 0, 0, 25, 2
  1354 0000059F 00001A02                		db 0, 0, 26, 2
  1355 000005A3 00001B02                		db 0, 0, 27, 2
  1356 000005A7 00001C02                		db 0, 0, 28, 2
  1357 000005AB 00001D02                		db 0, 0, 29, 2
  1358 000005AF 00001E02                		db 0, 0, 30, 2
  1359 000005B3 00001F02                		db 0, 0, 31, 2
  1360 000005B7 00002002                		db 0, 0, 32, 2
  1361 000005BB 00002102                		db 0, 0, 33, 2
  1362 000005BF 00002202                		db 0, 0, 34, 2
  1363 000005C3 00002302                		db 0, 0, 35, 2
  1364 000005C7 00002402                		db 0, 0, 36, 2
  1365 000005CB 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1366                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1367                                  					; times	((4*63)	- 144) db 0
  1368                                  
  1369                                  ;-----------------------------------------------------------------------------
  1370                                  
  1371                                  ; this is a real ugly place to put this
  1372                                  ; it should really go in the bds
  1373                                  
  1374 00000637 00                      mediatype:	db 0			
  1375 00000638 00                      media_set_for_format: db 0		; 1 if we have done an int 13 set media
  1376                                  					; type for format call
  1377 00000639 00                      had_format_error: db 0			; 1 if the previous format operation
  1378                                  					; failed.
  1379                                  
  1380                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1381                                  ; the one passed by "new roms" before we perform a format operation. the old
  1382                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1383                                  ; this table does not contain the previously saved dpt.
  1384                                  		
  1385 0000063A FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1386 0000063E FF                      model_byte:	db 0FFh			; model	byte set at init time
  1387 0000063F 00                      secondary_model_byte: db 0
  1388                                  		
  1389 00000640 00                      int19sem:	db 0			; indicate that all int 19
  1390                                  					; initialization is complete
  1391                                  		
  1392                                  ;; we assume the following remain contiguous and their order doesn't change
  1393                                  ;i19_lst:
  1394                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1395                                  ;	public	int19old&aa
  1396                                  ;		db	aa&h	; store the number as a byte
  1397                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1398                                  ;	endm
  1399                                  
  1400                                  ; 21/10/2022
  1401                                  
  1402 00000641 02                      i19_lst:	db 2			
  1403                                  					; Int19old&aa
  1404 00000642 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1405 00000646 08                      		db 8
  1406 00000647 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1407 0000064B 09                      		db 9
  1408 0000064C FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1409 00000650 0A                      		db 0Ah
  1410 00000651 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1411 00000655 0B                      		db 0Bh
  1412 00000656 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1413 0000065A 0C                      		db 0Ch
  1414 0000065B FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1415 0000065F 0D                      		db 0Dh
  1416 00000660 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1417 00000664 0E                      		db 0Eh
  1418 00000665 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1419 00000669 70                      		db 70h
  1420 0000066A FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1421 0000066E 72                      		db 72h
  1422 0000066F FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1423 00000673 73                      		db 73h
  1424 00000674 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1425 00000678 74                      		db 74h
  1426 00000679 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1427 0000067D 76                      		db 76h
  1428 0000067E FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1429 00000682 77                      		db 77h
  1430 00000683 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1431                                  
  1432                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1433                                  
  1434                                  ;-----------------------------------------------------------------------------
  1435                                  
  1436 00000687 [5403]                  dskdrvs:	dw fdrive1	
  1437 00000689 [B803]                  		dw fdrive2
  1438 0000068B [1C04]                  		dw fdrive3
  1439 0000068D [8004]                  		dw fdrive4
  1440                                  
  1441                                  ;M011 -- made all hard drive stuff variable
  1442                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1443 0000068F 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1444                                  
  1445                                  ;-----------------------------------------------------------------------------
  1446                                  
  1447                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1448                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1449                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1450                                  
  1451                                  ;variables for dynamic relocatable modules
  1452                                  ;these should be stay resident.
  1453                                  
  1454 000006BB 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1455                                  					; for p12 machine
  1456                                  
  1457                                  ; data structures for real-time date and time
  1458                                  			
  1459 000006BF 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1460                                  
  1461 000006C3 0000                    month_table:	dw 0			; january
  1462 000006C5 1F00                    		dw 31			; february
  1463 000006C7 3B00                    		dw 59
  1464 000006C9 5A00                    		dw 90
  1465 000006CB 7800                    		dw 120
  1466 000006CD 9700                    		dw 151
  1467 000006CF B500                    		dw 181
  1468 000006D1 D400                    		dw 212
  1469 000006D3 F300                    		dw 243
  1470 000006D5 1101                    		dw 273
  1471 000006D7 3001                    		dw 304
  1472 000006D9 4E01                    		dw 334			; december
  1473                                  
  1474 000006DB 0000                    daycnt2:	dw 0			
  1475 000006DD 00                      feb29:		db 0			; february 29 in a leap	year flag
  1476                                  
  1477                                  ;-----------------------------------------------------------------------------
  1478                                  ;
  1479                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1480                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1481                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1482                                  
  1483                                  ; ----------------------------------------------------------------------------
  1484                                  
  1485                                  ;************************************************************************
  1486                                  ;*									*
  1487                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1488                                  ;*	  are plugged in by seg_reinit.					*
  1489                                  ;*									*
  1490                                  ;************************************************************************
  1491                                  
  1492                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1493                                  ; BIOSCODE_SEGMENT equ 2C7h
  1494                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1495                                  
  1496                                  ; 01/10/2022 - Erdogan Tan
  1497                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1498                                  ;  addresses, they will be changed to table labels later)
  1499                                  
  1500                                  ; 09/12/2022
  1501                                  %if 0
  1502                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1503                                  					; at 2C7h:43h =	70h:25B3h
  1504                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1505                                  					; at 2C7h:396h = 70h:2906h
  1506                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1507                                  					; at 2C7h:1302h	= 70h:3872h
  1508                                  i13x:		dw 154Bh, 2C7h		; i13z
  1509                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1510                                  %endif
  1511                                  
  1512                                  ; 09/12/2022
  1513 000006DE [4300]9D02              cdev:		dw chardev_entry, IOSYSCODESEG
  1514 000006E2 [8B03]9D02              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1515 000006E6 [A412]9D02              bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1516 000006EA [CF14]9D02              i13x:		dw i13z, IOSYSCODESEG
  1517                                  
  1518                                  end_BC_entries:	; 15/10/2022
  1519                                  
  1520                                  ;************************************************************************
  1521                                  ;*									*
  1522                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1523                                  ;*									*
  1524                                  ;************************************************************************
  1525                                  
  1526                                  cbreak:					
  1527 000006EE 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1528                                  					; indicate break key set
  1529                                  intret:					
  1530 000006F4 CF                      		iret
  1531                                  
  1532                                  ; =============== S U B	R O U T	I N E ========================================
  1533                                  
  1534                                  
  1535                                  ;************************************************************************
  1536                                  ;*									*
  1537                                  ;*	strategy - store es:bx (device driver request packet)		*
  1538                                  ;*		     away at [ptrsav] for next driver function call	*
  1539                                  ;*									*
  1540                                  ;************************************************************************
  1541                                  
  1542                                  strategy:	; proc far		
  1543 000006F5 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1544                                  					; away at [ptrsav] for next driver function call
  1545 000006FA 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1546 000006FF CB                      		retf
  1547                                  
  1548                                  ; ----------------------------------------------------------------------------
  1549                                  
  1550                                  ;************************************************************************
  1551                                  ;*									*
  1552                                  ;*	device driver entry points. these are the initial		*
  1553                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1554                                  ;*	  in the case of our resident drivers, they'll just		*
  1555                                  ;*	  stick a fake return address on the stack which		*
  1556                                  ;*	  points to dispatch tables and possibly some unit		*
  1557                                  ;*	  numbers, and then call through a common entry point		*
  1558                                  ;*	  which can take care of a20 switching				*
  1559                                  ;*									*
  1560                                  ;************************************************************************
  1561                                  
  1562                                  ; 01/10/2022 - Erdogan Tan
  1563                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1564                                  ;  addresses, they will be changed to table labels later)
  1565                                  
  1566                                  ; 09/12/2022
  1567                                  
  1568                                  con_entry:				
  1569 00000700 E84000                  		call	cdev_entry
  1570                                  ; ----------------------------------------------------------------------------
  1571                                  		;dw 0E4h		; con_table
  1572 00000703 [E300]                  		dw con_table	
  1573                                  					; 2C7h:0E4h = 70h:2654h
  1574                                  ; ----------------------------------------------------------------------------
  1575                                  
  1576                                  prn0_entry:				
  1577 00000705 E83B00                  		call	cdev_entry
  1578                                  ; ----------------------------------------------------------------------------
  1579                                  		;dw 0FBh		; prn_table
  1580 00000708 [FA00]                  		dw prn_table
  1581                                  					; 2C7h:0FBh = 70h:266Bh
  1582 0000070A 0000                    		db 0, 0
  1583                                  ; ----------------------------------------------------------------------------
  1584                                  
  1585                                  prn1_entry:				
  1586 0000070C E83400                  		call	cdev_entry
  1587                                  ; ----------------------------------------------------------------------------
  1588                                  		;dw 0FBh		; prn_table
  1589 0000070F [FA00]                  		dw prn_table
  1590                                  					; 2C7h:0FBh = 70h:266Bh
  1591 00000711 0001                    		db 0, 1
  1592                                  ; ----------------------------------------------------------------------------
  1593                                  
  1594                                  prn2_entry:				
  1595 00000713 E82D00                  		call	cdev_entry
  1596                                  ; ----------------------------------------------------------------------------
  1597                                  		;dw 0FBh		; prn_table
  1598 00000716 [FA00]                  		dw prn_table
  1599                                  					; 2C7h:0FBh = 70h:266Bh
  1600 00000718 0102                    		db 1, 2
  1601                                  ; ----------------------------------------------------------------------------
  1602                                  
  1603                                  prn3_entry:				
  1604 0000071A E82600                  		call	cdev_entry
  1605                                  ; ----------------------------------------------------------------------------
  1606                                  		;dw 0FBh		; prn_table
  1607 0000071D [FA00]                  		dw prn_table
  1608                                  					; 2C7h:0FBh = 70h:266Bh
  1609 0000071F 0203                    		db 2, 3
  1610                                  ; ----------------------------------------------------------------------------
  1611                                  
  1612                                  aux0_entry:				
  1613 00000721 E81F00                  		call	cdev_entry
  1614                                  ; ----------------------------------------------------------------------------
  1615                                  		;dw 130h		; aux_table
  1616 00000724 [2F01]                  		dw aux_table
  1617                                  					; 2C7h:130h = 70h:26A0h
  1618 00000726 00                      		db 0
  1619                                  ; ----------------------------------------------------------------------------
  1620                                  
  1621                                  aux1_entry:				
  1622 00000727 E81900                  		call	cdev_entry
  1623                                  ; ----------------------------------------------------------------------------
  1624                                  		;dw 130h		; aux_table
  1625 0000072A [2F01]                  		dw aux_table
  1626                                  					; 2C7h:130h = 70h:26A0h
  1627 0000072C 01                      		db 1
  1628                                  ; ----------------------------------------------------------------------------
  1629                                  
  1630                                  aux2_entry:				
  1631 0000072D E81300                  		call	cdev_entry
  1632                                  ; ----------------------------------------------------------------------------
  1633                                  		;dw 130h		; aux_table
  1634 00000730 [2F01]                  		dw aux_table
  1635                                  					; 2C7h:130h = 70h:26A0h
  1636 00000732 02                      		db 2
  1637                                  ; ----------------------------------------------------------------------------
  1638                                  
  1639                                  aux3_entry:				
  1640 00000733 E80D00                  		call	cdev_entry
  1641                                  ; ----------------------------------------------------------------------------
  1642                                  		;dw 130h		; aux_table
  1643 00000736 [2F01]                  		dw aux_table
  1644                                  					; 2C7h:130h = 70h:26A0h
  1645 00000738 03                      		db 3
  1646                                  ; ----------------------------------------------------------------------------
  1647                                  
  1648                                  tim_entry:				
  1649 00000739 E80700                  		call	cdev_entry
  1650                                  ; ----------------------------------------------------------------------------
  1651                                  		;dw 147h		; tim_table
  1652 0000073C [4601]                  		dw tim_table
  1653                                  					; 2C7h:147h = 70h:26B7h
  1654                                  ; ----------------------------------------------------------------------------
  1655                                  
  1656                                  ; 15/10/2022
  1657                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1658                                  ; 09/12/2022
  1659                                  DSKTBL equ dsktbl
  1660                                  
  1661                                  dsk_entry:				
  1662 0000073E E80200                  		call	cdev_entry
  1663                                  ; ----------------------------------------------------------------------------
  1664                                  		;dw 4A2h		; dsktbl
  1665 00000741 [9604]                  		dw DSKTBL		; 09/12/2022
  1666                                  					; 2C7h:4A2h = 70h:2A12h
  1667                                  
  1668                                  ; =============== S U B	R O U T	I N E ========================================
  1669                                  
  1670                                  ;************************************************************************
  1671                                  ;*									*
  1672                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1673                                  ;*	This code assumes that if Segment of Device request packet is	*
  1674                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1675                                  ;*	A20 is already on.						*
  1676                                  ;*									*
  1677                                  ;************************************************************************
  1678                                  
  1679                                  cdev_entry:	; proc near		
  1680 00000743 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1681 00000749 740D                    		jz	short ce_enter_codeseg
  1682                                  				; optimized for DOS in HMA
  1683 0000074B 50                      		push	ax
  1684 0000074C 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1685 00000750 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1686 00000755 58                      		pop	ax
  1687 00000756 7505                    		jnz	short not_from_dos
  1688                                  				; jump is coded this way to fall thru
  1689                                  				; in 99.99% of the cases
  1690                                  ce_enter_codeseg:
  1691 00000758 2EFF2E[DE06]            		jmp	far [cs:cdev]			
  1692                                  		;jmp	dword ptr cs:cdev
  1693                                  ;-----------------------------------------------------------------------------
  1694                                  
  1695                                  not_from_dos:				
  1696 0000075D E86200                  		call	EnsureA20On
  1697 00000760 EBF6                    		jmp	short ce_enter_codeseg
  1698                                  
  1699                                  ;************************************************************************
  1700                                  ;*									*
  1701                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1702                                  ;*	   character in al on the display using int 10h ttywrite	*
  1703                                  ;*									*
  1704                                  ;************************************************************************
  1705                                  
  1706                                  outchr:					
  1707 00000762 50                      		push	ax		; int 29h handler
  1708 00000763 56                      		push	si
  1709 00000764 57                      		push	di
  1710 00000765 55                      		push	bp
  1711 00000766 53                      		push	bx
  1712 00000767 B40E                    		mov	ah, 0Eh
  1713 00000769 BB0700                  		mov	bx, 7
  1714 0000076C CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1715                                  					; AL = character, BH = display page (alpha modes)
  1716                                  					; BL = foreground color	(graphics modes)
  1717 0000076E 5B                      		pop	bx
  1718 0000076F 5D                      		pop	bp
  1719 00000770 5F                      		pop	di
  1720 00000771 5E                      		pop	si
  1721 00000772 58                      		pop	ax
  1722 00000773 CF                      		iret
  1723                                  ;-----------------------------------------------------------------------------
  1724                                  
  1725                                  ;************************************************************************
  1726                                  ;*									*
  1727                                  ;*	block13 - our int13 hooker					*
  1728                                  ;*									*
  1729                                  ;************************************************************************
  1730                                  
  1731                                  block13:				
  1732 00000774 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1733 0000077A 7408                    		jz	short skipa20
  1734 0000077C E85400                  		call	IsA20Off	; A20 Off?
  1735 0000077F 7503                    		jnz	short skipa20
  1736 00000781 E84300                  		call	EnableA20	; assure a20 enabled
  1737                                  
  1738                                  skipa20:				
  1739 00000784 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1740 00000789 9C                      		pushf			; fake interrupt
  1741 0000078A 2EFF1E[EA06]            		call	far [cs:i13x]
  1742                                  		;call	dword ptr cs:i13x
  1743                                  					; call through Bios_Code entry table
  1744 0000078F 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1745 00000794 CA0200                  		retf	2
  1746                                  
  1747                                  ; =============== S U B	R O U T	I N E =======================================
  1748                                  
  1749                                  ; the int13 hook calls back here to call-through to the ROM
  1750                                  ; this is necessary because some people have extended their
  1751                                  ; ROM BIOSs to use ds as a parameter/result register and
  1752                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1753                                  
  1754                                  call_orig13:	; proc far		
  1755 00000797 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1756 0000079B 9C                      		pushf			; simulate an int13
  1757 0000079C 2EFF1E[B400]            		call	far [cs:Orig13]
  1758                                  		;call	cs:Orig13
  1759 000007A1 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1760 000007A6 0E                      		push	cs
  1761 000007A7 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1762                                  
  1763 000007A8 9C                      		pushf
  1764                                  		; 10/12/2022
  1765                                  		; ds = cs
  1766 000007A9 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1767                                  		;cmp	byte [cs:inHMA], 0
  1768 000007AE 7408                    		jz	short corig13_popf_retf
  1769 000007B0 E82000                  		call	IsA20Off
  1770 000007B3 7503                    		jnz	short corig13_popf_retf
  1771 000007B5 E80F00                  		call	EnableA20
  1772                                  corig13_popf_retf:			
  1773 000007B8 9D                      		popf
  1774 000007B9 CB                      		retf
  1775                                  
  1776                                  ;-----------------------------------------------------------------------------
  1777                                  
  1778                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1779                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1780                                  
  1781 000007BA 9000FFFF                HiMem:		dd 0FFFF0090h		
  1782 000007BE 80000000                LoMem:		dd 80h
  1783                                  
  1784                                  ; ----------------------------------------------------------------------------			
  1785                                  
  1786                                  ; =============== S U B	R O U T	I N E ========================================
  1787                                  
  1788                                  
  1789                                  ;************************************************************************
  1790                                  ;*									*
  1791                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1792                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1793                                  ;*									*
  1794                                  ;************************************************************************
  1795                                  
  1796                                  EnsureA20On:	; proc near		
  1797 000007C2 E80E00                  		call	IsA20Off
  1798                                  		;jz	short EnableA20
  1799                                  		;retn
  1800                                  		; 18/12/2022
  1801 000007C5 750B                    		jnz	short A20On_retn	
  1802                                  
  1803                                  ; =============== S U B	R O U T	I N E ========================================
  1804                                  
  1805                                  
  1806                                  EnableA20:	; proc near		
  1807 000007C7 50                      		push	ax
  1808 000007C8 53                      		push	bx
  1809 000007C9 B405                    		mov	ah, 5	 ; local enable a20
  1810                                  		;call	cs:xms
  1811 000007CB 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1812 000007D0 5B                      		pop	bx
  1813 000007D1 58                      		pop	ax
  1814                                  A20On_retn:	; 18/12/2022	
  1815 000007D2 C3                      		retn
  1816                                  
  1817                                  ; =============== S U B	R O U T	I N E ========================================
  1818                                  
  1819                                  
  1820                                  IsA20Off:	; proc near		
  1821 000007D3 1E                      		push	ds
  1822 000007D4 06                      		push	es
  1823 000007D5 51                      		push	cx
  1824 000007D6 56                      		push	si
  1825 000007D7 57                      		push	di
  1826 000007D8 2EC536[BA07]            		lds	si, [cs:HiMem]
  1827 000007DD 2EC43E[BE07]            		les	di, [cs:LoMem]
  1828 000007E2 B90800                  		mov	cx, 8
  1829 000007E5 F3A7                    		repe cmpsw
  1830 000007E7 5F                      		pop	di
  1831 000007E8 5E                      		pop	si
  1832 000007E9 59                      		pop	cx
  1833 000007EA 07                      		pop	es
  1834 000007EB 1F                      		pop	ds
  1835 000007EC C3                      		retn
  1836                                  
  1837                                  ; ----------------------------------------------------------------------------
  1838                                  
  1839                                  DisableA20:
  1840 000007ED 50                      		push	ax
  1841 000007EE 53                      		push	bx
  1842 000007EF B406                    		mov	ah, 6		; local disable A20
  1843 000007F1 2EFF1E[0E00]            		call	far [cs:xms]
  1844                                  		;call	cs:xms
  1845 000007F6 5B                      		pop	bx
  1846 000007F7 58                      		pop	ax
  1847 000007F8 C3                      		retn
  1848                                  
  1849                                  ; ----------------------------------------------------------------------------
  1850                                  
  1851                                  ;************************************************************************
  1852                                  ;*									*
  1853                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1854                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1855                                  ;*									*
  1856                                  ;************************************************************************
  1857                                  
  1858                                  int19:					
  1859 000007F9 0E                      		push	cs
  1860 000007FA 1F                      		pop	ds
  1861 000007FB 8E06[1A00]              		mov	es, [zeroseg]	; 16/10/2022
  1862 000007FF B90500                  		mov	cx, 5		; NUMROMVECTORS
  1863                                  		;mov	si, offset RomVectors
  1864 00000802 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1865                                  next_int:				
  1866 00000805 AC                      		lodsb			; get int number
  1867 00000806 98                      		cbw			; assume < 128
  1868 00000807 D1E0                    		shl	ax, 1
  1869 00000809 D1E0                    		shl	ax, 1		; int *	4
  1870 0000080B 89C7                    		mov	di, ax
  1871 0000080D AD                      		lodsw
  1872 0000080E AB                      		stosw
  1873 0000080F AD                      		lodsw
  1874 00000810 AB                      		stosw			; install the saved vector
  1875 00000811 E2F2                    		loop	next_int
  1876 00000813 803E[4006]00            		cmp	byte [int19sem], 0 ; 19/10/2022
  1877 00000818 7422                    		jz	short doint19
  1878 0000081A BE[4106]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1879                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1880 0000081D B90E00                  		mov	cx, 14		; num_i19
  1881                                  
  1882                                  i19_restore_loop:			
  1883 00000820 AC                      		lodsb			; get interrupt	number
  1884 00000821 98                      		cbw			; assume < 128
  1885 00000822 89C7                    		mov	di, ax
  1886 00000824 AD                      		lodsw			; get original vector offset
  1887 00000825 89C3                    		mov	bx, ax		; save it
  1888 00000827 AD                      		lodsw
  1889 00000828 83FBFF                  		cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1890 0000082B 740D                    		jz	short i19_restor_1 ; opt no need to check selector too
  1891 0000082D 83F8FF                  		cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1892 00000830 7408                    		jz	short i19_restor_1
  1893 00000832 01FF                    		add	di, di
  1894 00000834 01FF                    		add	di, di
  1895 00000836 93                      		xchg	ax, bx
  1896 00000837 AB                      		stosw
  1897 00000838 93                      		xchg	ax, bx
  1898 00000839 AB                      		stosw			; put the vector back
  1899                                  
  1900                                  i19_restor_1:				
  1901 0000083A E2E4                    		loop	i19_restore_loop
  1902                                  
  1903                                  doint19:				
  1904 0000083C 803E[0D00]00            		cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1905 00000841 7403                    		jz	short SkipVDisk
  1906 00000843 E83000                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1907                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1908                                  					; the memory above 1MB during a	warm boot.
  1909                                  SkipVDisk:				
  1910 00000846 CD19                    		int	19h		; DISK BOOT
  1911                                  					; causes reboot	of disk	system
  1912                                  
  1913                                  ; =============== S U B	R O U T	I N E ========================================
  1914                                  
  1915                                  ;-----------------------------------------------------------------------------
  1916                                  ;
  1917                                  ; procedure : int15
  1918                                  ;
  1919                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1920                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1921                                  ;		is running high, it Erases the VDISK header
  1922                                  ;		present at 1MB boundary
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------
  1925                                  
  1926                                  ; 16/10/2022
  1927                                  ;DELKEY		equ	53h
  1928                                  ;ROMDATASEG	equ	40h
  1929                                  KBFLAG		equ	17h
  1930                                  ;CTRLSTATE	equ	04h
  1931                                  ;ALTSTATE	equ	08h
  1932                                  
  1933                                  Int15:		; proc near		
  1934                                  		;cmp	ax, 4F00h+DELKEY
  1935 00000848 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1936 0000084B 7405                    		jz	short int15_1
  1937 0000084D 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1938                                  		;jmp	cs:Old15
  1939                                  ; ----------------------------------------------------------------------------
  1940                                  
  1941                                  int15_1:				
  1942 00000852 1E                      		push	ds
  1943 00000853 50                      		push	ax
  1944 00000854 B84000                  		mov	ax, 40h		; ROMDATASEG
  1945 00000857 8ED8                    		mov	ds, ax
  1946                                  		;mov	al, ds:17h	; [KBFLAG]
  1947                                  		; 16/10/2022
  1948 00000859 A01700                  		mov	al, [KBFLAG]
  1949 0000085C 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1950 0000085E 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1951 00000860 750C                    		jnz	short int15_2
  1952 00000862 0E                      		push	cs
  1953 00000863 1F                      		pop	ds
  1954 00000864 803E[0D00]00            		cmp	byte [inHMA], 0	; is DOS running from HMA
  1955 00000869 7403                    		jz	short int15_2
  1956 0000086B E80800                  		call	EraseVDiskHead
  1957                                  int15_2:				
  1958 0000086E 58                      		pop	ax
  1959 0000086F 1F                      		pop	ds
  1960 00000870 F9                      		stc
  1961 00000871 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1962                                  		;jmp	cs:Old15
  1963                                  
  1964                                  ; =============== S U B	R O U T	I N E ========================================
  1965                                  
  1966                                  ;-----------------------------------------------------------------------------
  1967                                  ;
  1968                                  ; procedure : EraseVDiskHead
  1969                                  ;
  1970                                  ;		Erases the VDisk Header present in the 1MB boundary
  1971                                  ;
  1972                                  ;-----------------------------------------------------------------------------
  1973                                  
  1974                                  EraseVDiskHead:	; proc near		
  1975 00000876 50                      		push	ax
  1976 00000877 51                      		push	cx
  1977 00000878 57                      		push	di
  1978 00000879 06                      		push	es
  1979 0000087A E845FF                  		call	EnsureA20On
  1980 0000087D B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  1981 00000880 8EC0                    		mov	es, ax
  1982 00000882 BF1000                  		mov	di, 10h		; point	to VDISK header
  1983 00000885 B91000                  		mov	cx, 10h		; size of vdisk	header
  1984 00000888 31C0                    		xor	ax, ax
  1985 0000088A F3AB                    		rep stosw		; clear	it
  1986 0000088C 07                      		pop	es
  1987 0000088D 5F                      		pop	di
  1988 0000088E 59                      		pop	cx
  1989 0000088F 58                      		pop	ax
  1990 00000890 C3                      		retn
  1991                                  
  1992                                  ; ----------------------------------------------------------------------------
  1993                                  
  1994                                  ;************************************************************************
  1995                                  ;*									*
  1996                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  1997                                  ;*	  it returns through one of the three functions that follow.	*
  1998                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  1999                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2000                                  ;*									*
  2001                                  ;************************************************************************
  2002                                  
  2003                                  int_2f:		
  2004 00000891 2EFF2E[E606]            		jmp	far [cs:bcode_i2f] ; 16/10/2022			
  2005                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2006                                  
  2007                                  ; ----------------------------------------------------------------------------
  2008                                  
  2009                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2010                                  ; note:  is it really necessary to transiton out and then back in?
  2011                                  ;	 It's not as if this is a really speed critical function.
  2012                                  ;	 might as well do whatever's most compact.
  2013                                  
  2014                                  i2f_dskentry:				
  2015 00000896 E9A5FE                  		jmp	dsk_entry
  2016                                  
  2017                                  ; ----------------------------------------------------------------------------
  2018                                  
  2019                                  ;************************************************************************
  2020                                  ;*									*
  2021                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2022                                  ;*		is done. presently does nothing. affects no		*
  2023                                  ;*		registers!						*
  2024                                  ;*									*
  2025                                  ;************************************************************************
  2026                                  
  2027                                  ; 09/12/2022
  2028                                  ; re_init_:
  2029                                  re_init:				; called back by sysinit after
  2030 00000899 CB                      		retf			; a bunch of stuff is done.
  2031                                  					; presently does nothing
  2032                                  
  2033                                  ; ----------------------------------------------------------------------------
  2034                                  
  2035                                  ;SR; WIN386 support
  2036                                  
  2037                                  ; WIN386 instance data structure
  2038                                  ;
  2039                                  ; Here is a Win386 startup info structure which we set up and to which
  2040                                  ; we return a pointer when Win386 initializes.
  2041                                  
  2042 0000089A 0300                    Win386_SI:	db 3, 0			; SI_Version
  2043                                  					; Startup Info for Win386
  2044 0000089C 00000000                SI_Next:	dd 0			; pointer to next info structure
  2045 000008A0 00000000                		dd 0			; a field we don't need
  2046 000008A4 00000000                		dd 0			; another field	we don't need
  2047 000008A8 [AC08]                  SI_Instance:	dw Instance_Table
  2048 000008AA 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2049                                  
  2050                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2051                                  ; areas. Note that the address and size of the hardware stacks must
  2052                                  ; be calculated and inserted at boot time.
  2053                                  
  2054 000008AC 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2055 000008B0 0200                    		dw 2			; ... 2	bytes
  2056 000008B2 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2057 000008B6 1400                    		dw 14h			; ... 14H bytes
  2058 000008B8 [0C00]                  		dw altah		; a con	device buffer...
  2059 000008BA 7000                    		dw 70h			; Bios_Data segment
  2060 000008BC 0100                    		dw 1			; ... 1 byte
  2061                                  
  2062                                  NextStack:
  2063                                  
  2064                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2065                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2066                                  ;	That's just fine as long as these are the last items
  2067                                  ;	in the instance list since the first item is initialized
  2068                                  ;	to 0000 at load time.
  2069                                  
  2070 000008BE 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2071 000008C2 0200                    		dw 2			; ... 2 bytes
  2072 000008C4 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2073 000008C8 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2074 000008CA 00000000                		dd 0			; terminate the	instance table
  2075                                  
  2076                                  					;SR;
  2077 000008CE 00                      IsWin386:	db 0			; Flag to indicate whether
  2078                                  					; Win386 is running or not
  2079                                  ;-----------------------------------------------------------------------------
  2080                                  
  2081                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2082                                  ;when we call it including checking of A20. The code being only about 
  2083                                  ;30 bytes, we might as well put it in BIOS_DATA
  2084                                  
  2085                                  V86_Crit_SetFocus:			
  2086 000008CF 57                      		push	di
  2087 000008D0 06                      		push	es
  2088 000008D1 53                      		push	bx
  2089 000008D2 50                      		push	ax
  2090 000008D3 31FF                    		xor	di, di
  2091 000008D5 8EC7                    		mov	es, di
  2092 000008D7 BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2093 000008DA B88416                  		mov	ax, 1684h	; Get API entry	point
  2094 000008DD CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2095                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2096                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2097 000008DF 8CC0                    		mov	ax, es
  2098 000008E1 09F8                    		or	ax, di
  2099 000008E3 740B                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2100                                  					; Set up stack frame to	simulate a call.
  2101 000008E5 0E                      		push	cs
  2102                                  		;mov	ax, offset Skip
  2103 000008E6 B8[F008]                		mov	ax, Skip
  2104 000008E9 50                      		push	ax
  2105 000008EA 06                      		push	es
  2106 000008EB 57                      		push	di		; API far call address
  2107 000008EC B80100                  		mov	ax, 1		; SetFocus function number
  2108 000008EF CB                      		retf			; do the call
  2109                                  ;-----------------------------------------------------------------------------
  2110                                  
  2111                                  Skip:					
  2112 000008F0 58                      		pop	ax
  2113 000008F1 5B                      		pop	bx
  2114 000008F2 07                      		pop	es
  2115 000008F3 5F                      		pop	di
  2116 000008F4 CB                      		retf
  2117                                  
  2118                                  ;End WIN386 support
  2119                                  
  2120                                  ; ----------------------------------------------------------------------------
  2121                                  
  2122                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2123                                  
  2124                                  ; 09/12/2022
  2125                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2126                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2127                                  ; (followings are in sysinit segment)
  2128                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2129                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2130                                  ;DEVICELIST	equ 273h
  2131                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2132                                  ;MEMORYSIZE	equ 292h	
  2133                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2134                                  ;DEFAULTDRIVE	equ 296h
  2135                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2136                                  ;;currentdoslocation equ 271h
  2137                                  ;CURRENTDOSLOCATION equ 271h
  2138                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2139                                  ;SYSINITSTART	equ 267h
  2140                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2141                                  ; 18/10/2022
  2142                                  ;toomanydrivesflag equ 3FFh 
  2143                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2144                                  
  2145                                  ; ----------------------------------------------------------------------------
  2146                                  
  2147 000008F5 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2148                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2149                                  					; (procedure in	SYSINIT	segment)
  2150                                  ; 17/10/2022
  2151 000008F7 [280A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2152 000008F9 3A04                    		dw SYSINITSEG	
  2153                                  
  2154                                  ;SR;
  2155                                  ; A communication block has been setup between the DOS and the BIOS. All
  2156                                  ;the data starting from SysinitPresent will be part of the data block. 
  2157                                  ;Right now, this is the only data being communicated. It can be expanded 
  2158                                  ;later to add more stuff
  2159                                  
  2160 000008FB 00                      SysinitPresent:	db 0			
  2161 000008FC 0000                    endfloppy:	db 0, 0
  2162                                  
  2163                                  ; ----------------------------------------------------------------------------			
  2164                                  
  2165                                  ; Bios_Data ends
  2166                                  	
  2167                                  ; Possibly disposable BIOS data
  2168                                  ; This data follows the	regular	BIOS data,
  2169                                  ; and is part of the same group.
  2170                                  
  2171 000008FE 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2171 00000907 202000             
  2172                                  					; null volume id
  2173 0000090A 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2173 00000913 202000             
  2174                                  					; vid scratch buffer
  2175 00000916 80                      harddrv:	db 80h			
  2176                                  
  2177                                  end96tpi:
  2178                                  
  2179                                  ;;*********************************************************************
  2180                                  ;;memory allocation for bdss
  2181                                  ;;*********************************************************************
  2182                                  ;
  2183                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2184                                  ;
  2185                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2186                                  ;
  2187                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2188                                  
  2189 00000917 FFFF                    bdss:		dw 0FFFFh		
  2190 00000919 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2190 00000922 0210000000F8       
  2191 00000928 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2191 00000931 000000000000000003 
  2192 0000093A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2192 00000943 00000000000000     
  2193 0000094A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2193 00000953 000000000000000000 
  2194 0000095C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2194 00000965 4E414D45           
  2195 00000969 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2195 00000972 46415431           
  2196 00000976 3220202000              		db 32h,	20h, 20h, 20h, 0
  2197 0000097B FFFF                    		dw 0FFFFh
  2198 0000097D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2198 00000986 0210000000F8       
  2199 0000098C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2199 00000995 000000000000000003 
  2200 0000099E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2200 000009A7 00000000000000     
  2201 000009AE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2201 000009B7 000000000000000000 
  2202 000009C0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2202 000009C9 4E414D45           
  2203 000009CD 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2203 000009D6 46415431           
  2204 000009DA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2205 000009DF FFFF                    		dw 0FFFFh
  2206 000009E1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2206 000009EA 0210000000F8       
  2207 000009F0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2207 000009F9 000000000000000003 
  2208 00000A02 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2208 00000A0B 00000000000000     
  2209 00000A12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2209 00000A1B 000000000000000000 
  2210 00000A24 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2210 00000A2D 4E414D45           
  2211 00000A31 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2211 00000A3A 46415431           
  2212 00000A3E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2213 00000A43 FFFF                    		dw 0FFFFh
  2214 00000A45 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2214 00000A4E 0210000000F8       
  2215 00000A54 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2215 00000A5D 000000000000000003 
  2216 00000A66 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2216 00000A6F 00000000000000     
  2217 00000A76 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2217 00000A7F 000000000000000000 
  2218 00000A88 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2218 00000A91 4E414D45           
  2219 00000A95 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2219 00000A9E 46415431           
  2220 00000AA2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2221 00000AA7 FFFF                    		dw 0FFFFh
  2222 00000AA9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2222 00000AB2 0210000000F8       
  2223 00000AB8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2223 00000AC1 000000000000000003 
  2224 00000ACA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2224 00000AD3 00000000000000     
  2225 00000ADA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2225 00000AE3 000000000000000000 
  2226 00000AEC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2226 00000AF5 4E414D45           
  2227 00000AF9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2227 00000B02 46415431           
  2228 00000B06 3220202000              		db 32h,	20h, 20h, 20h, 0
  2229 00000B0B FFFF                    		dw 0FFFFh
  2230 00000B0D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2230 00000B16 0210000000F8       
  2231 00000B1C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2231 00000B25 000000000000000003 
  2232 00000B2E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2232 00000B37 00000000000000     
  2233 00000B3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2233 00000B47 000000000000000000 
  2234 00000B50 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2234 00000B59 4E414D45           
  2235 00000B5D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2235 00000B66 46415431           
  2236 00000B6A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2237 00000B6F FFFF                    		dw 0FFFFh
  2238 00000B71 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2238 00000B7A 0210000000F8       
  2239 00000B80 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2239 00000B89 000000000000000003 
  2240 00000B92 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2240 00000B9B 00000000000000     
  2241 00000BA2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2241 00000BAB 000000000000000000 
  2242 00000BB4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2242 00000BBD 4E414D45           
  2243 00000BC1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2243 00000BCA 46415431           
  2244 00000BCE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2245 00000BD3 FFFF                    		dw 0FFFFh
  2246 00000BD5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2246 00000BDE 0210000000F8       
  2247 00000BE4 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2247 00000BED 000000000000000003 
  2248 00000BF6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2248 00000BFF 00000000000000     
  2249 00000C06 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2249 00000C0F 000000000000000000 
  2250 00000C18 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2250 00000C21 4E414D45           
  2251 00000C25 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2251 00000C2E 46415431           
  2252 00000C32 3220202000              		db 32h,	20h, 20h, 20h, 0
  2253 00000C37 FFFF                    		dw 0FFFFh
  2254 00000C39 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2254 00000C42 0210000000F8       
  2255 00000C48 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2255 00000C51 000000000000000003 
  2256 00000C5A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2256 00000C63 00000000000000     
  2257 00000C6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2257 00000C73 000000000000000000 
  2258 00000C7C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2258 00000C85 4E414D45           
  2259 00000C89 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2259 00000C92 46415431           
  2260 00000C96 3220202000              		db 32h,	20h, 20h, 20h, 0
  2261 00000C9B FFFF                    		dw 0FFFFh
  2262 00000C9D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2262 00000CA6 0210000000F8       
  2263 00000CAC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2263 00000CB5 000000000000000003 
  2264 00000CBE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2264 00000CC7 00000000000000     
  2265 00000CCE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2265 00000CD7 000000000000000000 
  2266 00000CE0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2266 00000CE9 4E414D45           
  2267 00000CED 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2267 00000CF6 46415431           
  2268 00000CFA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2269 00000CFF FFFF                    		dw 0FFFFh
  2270 00000D01 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2270 00000D0A 0210000000F8       
  2271 00000D10 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2271 00000D19 000000000000000003 
  2272 00000D22 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2272 00000D2B 00000000000000     
  2273 00000D32 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2273 00000D3B 000000000000000000 
  2274 00000D44 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2274 00000D4D 4E414D45           
  2275 00000D51 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2275 00000D5A 46415431           
  2276 00000D5E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2277 00000D63 FFFF                    		dw 0FFFFh
  2278 00000D65 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2278 00000D6E 0210000000F8       
  2279 00000D74 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2279 00000D7D 000000000000000003 
  2280 00000D86 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2280 00000D8F 00000000000000     
  2281 00000D96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2281 00000D9F 000000000000000000 
  2282 00000DA8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2282 00000DB1 4E414D45           
  2283 00000DB5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2283 00000DBE 46415431           
  2284 00000DC2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2285 00000DC7 FFFF                    		dw 0FFFFh
  2286 00000DC9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2286 00000DD2 0210000000F8       
  2287 00000DD8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2287 00000DE1 000000000000000003 
  2288 00000DEA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2288 00000DF3 00000000000000     
  2289 00000DFA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2289 00000E03 000000000000000000 
  2290 00000E0C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2290 00000E15 4E414D45           
  2291 00000E19 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2291 00000E22 46415431           
  2292 00000E26 3220202000              		db 32h,	20h, 20h, 20h, 0
  2293 00000E2B FFFF                    		dw 0FFFFh
  2294 00000E2D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2294 00000E36 0210000000F8       
  2295 00000E3C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2295 00000E45 000000000000000003 
  2296 00000E4E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2296 00000E57 00000000000000     
  2297 00000E5E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2297 00000E67 000000000000000000 
  2298 00000E70 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2298 00000E79 4E414D45           
  2299 00000E7D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2299 00000E86 46415431           
  2300 00000E8A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2301 00000E8F FFFF                    		dw 0FFFFh
  2302 00000E91 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2302 00000E9A 0210000000F8       
  2303 00000EA0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2303 00000EA9 000000000000000003 
  2304 00000EB2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2304 00000EBB 00000000000000     
  2305 00000EC2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2305 00000ECB 000000000000000000 
  2306 00000ED4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2306 00000EDD 4E414D45           
  2307 00000EE1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2307 00000EEA 46415431           
  2308 00000EEE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2309 00000EF3 FFFF                    		dw 0FFFFh
  2310 00000EF5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2310 00000EFE 0210000000F8       
  2311 00000F04 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2311 00000F0D 000000000000000003 
  2312 00000F16 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2312 00000F1F 00000000000000     
  2313 00000F26 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2313 00000F2F 000000000000000000 
  2314 00000F38 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2314 00000F41 4E414D45           
  2315 00000F45 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2315 00000F4E 46415431           
  2316 00000F52 3220202000              		db 32h,	20h, 20h, 20h, 0
  2317 00000F57 FFFF                    		dw 0FFFFh
  2318 00000F59 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2318 00000F62 0210000000F8       
  2319 00000F68 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2319 00000F71 000000000000000003 
  2320 00000F7A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2320 00000F83 00000000000000     
  2321 00000F8A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2321 00000F93 000000000000000000 
  2322 00000F9C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2322 00000FA5 4E414D45           
  2323 00000FA9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2323 00000FB2 46415431           
  2324 00000FB6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2325 00000FBB FFFF                    		dw 0FFFFh
  2326 00000FBD 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2326 00000FC6 0210000000F8       
  2327 00000FCC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2327 00000FD5 000000000000000003 
  2328 00000FDE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2328 00000FE7 00000000000000     
  2329 00000FEE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2329 00000FF7 000000000000000000 
  2330 00001000 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2330 00001009 4E414D45           
  2331 0000100D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2331 00001016 46415431           
  2332 0000101A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2333 0000101F FFFF                    		dw 0FFFFh
  2334 00001021 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2334 0000102A 0210000000F8       
  2335 00001030 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2335 00001039 000000000000000003 
  2336 00001042 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2336 0000104B 00000000000000     
  2337 00001052 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2337 0000105B 000000000000000000 
  2338 00001064 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2338 0000106D 4E414D45           
  2339 00001071 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2339 0000107A 46415431           
  2340 0000107E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2341 00001083 FFFF                    		dw 0FFFFh
  2342 00001085 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2342 0000108E 0210000000F8       
  2343 00001094 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2343 0000109D 000000000000000003 
  2344 000010A6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2344 000010AF 00000000000000     
  2345 000010B6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2345 000010BF 000000000000000000 
  2346 000010C8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2346 000010D1 4E414D45           
  2347 000010D5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2347 000010DE 46415431           
  2348 000010E2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2349 000010E7 FFFF                    		dw 0FFFFh
  2350 000010E9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2350 000010F2 0210000000F8       
  2351 000010F8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2351 00001101 000000000000000003 
  2352 0000110A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2352 00001113 00000000000000     
  2353 0000111A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2353 00001123 000000000000000000 
  2354 0000112C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2354 00001135 4E414D45           
  2355 00001139 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2355 00001142 46415431           
  2356 00001146 3220202000              		db 32h,	20h, 20h, 20h, 0
  2357 0000114B FFFF                    		dw 0FFFFh
  2358 0000114D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2358 00001156 0210000000F8       
  2359 0000115C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2359 00001165 000000000000000003 
  2360 0000116E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2360 00001177 00000000000000     
  2361 0000117E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2361 00001187 000000000000000000 
  2362 00001190 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2362 00001199 4E414D45           
  2363 0000119D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2363 000011A6 46415431           
  2364 000011AA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2365 000011AF FFFF                    		dw 0FFFFh
  2366 000011B1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2366 000011BA 0210000000F8       
  2367 000011C0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2367 000011C9 000000000000000003 
  2368 000011D2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2368 000011DB 00000000000000     
  2369 000011E2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2369 000011EB 000000000000000000 
  2370 000011F4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2370 000011FD 4E414D45           
  2371 00001201 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2371 0000120A 46415431           
  2372 0000120E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2373 00001213 FFFF                    		dw 0FFFFh
  2374 00001215 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2374 0000121E 0210000000F8       
  2375 00001224 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2375 0000122D 000000000000000003 
  2376 00001236 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2376 0000123F 00000000000000     
  2377 00001246 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2377 0000124F 000000000000000000 
  2378 00001258 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2378 00001261 4E414D45           
  2379 00001265 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2379 0000126E 46415431           
  2380 00001272 3220202000              		db 32h,	20h, 20h, 20h, 0
  2381 00001277 FFFF                    		dw 0FFFFh
  2382 00001279 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2382 00001282 0210000000F8       
  2383 00001288 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2383 00001291 000000000000000003 
  2384 0000129A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2384 000012A3 00000000000000     
  2385 000012AA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2385 000012B3 000000000000000000 
  2386 000012BC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2386 000012C5 4E414D45           
  2387 000012C9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2387 000012D2 46415431           
  2388 000012D6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2389 000012DB 00                      		db 0
  2390                                  
  2391                                  ;---------------------------------------------------------------------------
  2392                                  ; Possibly disposable data, goes at end of data group
  2393                                  ;***************************************************************************
  2394                                  
  2395                                  ; Possibly disposable data, goes at end of data group
  2396                                  
  2397                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2398                                  ;
  2399                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2400                                  ;		(dl) = drive number (80h or 81h).
  2401                                  ;		(dh) = head number.
  2402                                  ;		(ch) = cylinder number.
  2403                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2404                                  ;		(al) = number of sectors.
  2405                                  ;		(es:bx) = address of read buffer.
  2406                                  ;		for more on register contents see rom bios listing.
  2407                                  ;		stack set up for return by an iret.
  2408                                  ;
  2409                                  ;	exit:	(ah) = status of current operation.
  2410                                  ;		(cy) = 1 if failed, 0 if successful.
  2411                                  ;		for other register contents see rom bios listing.
  2412                                  ;
  2413                                  ;	uses:	
  2414                                  ;
  2415                                  ;
  2416                                  ;	warning: uses old13 vector for non-read calls.
  2417                                  ;		does direct calls to the at rom.
  2418                                  ;		does segment arithmatic.
  2419                                  ;
  2420                                  ;	effects: performs disk i/o operation.
  2421                                  
  2422                                  ; 16/10/2022
  2423                                  ; 28/05/2019
  2424                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2425                                  
  2426                                  ;* offsets into cmd_block for registers
  2427                                  
  2428                                  pre_comp equ 0	;write pre-compensation
  2429                                  sec_cnt	 equ 1	;sector count
  2430                                  sec_num	 equ 2	;sector number
  2431                                  cyl_low	 equ 3	;cylinder number, low part
  2432                                  cyl_high equ 4	;cylinder number, high part
  2433                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2434                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2435                                  cmd_reg  equ 6	;command register
  2436                                  
  2437                                  ; 01/10/2022
  2438                                  disk_status1	equ 74h
  2439                                  hf_num		equ 75h
  2440                                  control_byte	equ 76h
  2441                                  
  2442                                  ibm_disk_io:				
  2443 000012DC 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2444 000012DF 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2445 000012E1 80FC02                  		cmp	ah, 2
  2446 000012E4 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2447 000012E6 80FC0A                  		cmp	ah, 0Ah
  2448 000012E9 7405                    		jz	short atd2	; and call 0Ah (read long).
  2449                                  atd1:
  2450 000012EB 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2451                                  		;jmp	cs:Old13	; use rom int 13h handler
  2452                                  ;-----------------------------------------------------------------------------
  2453                                  
  2454                                  atd2:					
  2455 000012F0 53                      		push	bx
  2456 000012F1 51                      		push	cx
  2457 000012F2 52                      		push	dx
  2458 000012F3 57                      		push	di
  2459 000012F4 1E                      		push	ds
  2460 000012F5 06                      		push	es
  2461 000012F6 50                      		push	ax
  2462 000012F7 B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2463                                  					; establish bios segment addressing
  2464 000012FA 8ED8                    		mov	ds, ax
  2465                                  		; 16/10/2022
  2466 000012FC C606740000              		mov	byte [disk_status1], 0
  2467                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2468                                  					; initially no error code.
  2469 00001301 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2470 00001304 3A167500                		cmp	dl, [hf_num]
  2471                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2472 00001308 7207                    		jb	short atd3	; disk number in range
  2473                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2474 0000130A C606740001              		mov	byte [disk_status1], 1
  2475 0000130F EB20                    		jmp	short atd4	; disk number out of range error,
  2476                                  					; return
  2477                                  ; ----------------------------------------------------------------------------
  2478                                  
  2479                                  atd3:					
  2480 00001311 53                      		push	bx
  2481 00001312 8CC0                    		mov	ax, es
  2482 00001314 C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2483 00001317 01D8                    		add	ax, bx
  2484 00001319 8EC0                    		mov	es, ax
  2485 0000131B 5B                      		pop	bx
  2486 0000131C 83E30F                  		and	bx, 0Fh
  2487 0000131F 0E                      		push	cs
  2488 00001320 E8DF00                  		call	check_dma
  2489 00001323 720C                    		jb	short atd4	; abort if dma across segment boundary
  2490 00001325 58                      		pop	ax
  2491 00001326 50                      		push	ax
  2492 00001327 E81A00                  		call	setcmd		; set up command block for disk op
  2493 0000132A BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2494 0000132D EE                      		out	dx, al		; write out command modifier
  2495 0000132E E86B00                  		call	docmd		; carry out command
  2496                                  ; ----------------------------------------------------------------------------
  2497                                  
  2498                                  atd4:	
  2499                                  
  2500                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2501                                  ;	      and save a couple bytes while were at it.
  2502                                  				
  2503 00001331 58                      		pop	ax
  2504                                  		;mov	ah, ds:74h	; [disk_status1]
  2505 00001332 8A267400                		mov	ah, [disk_status1]
  2506 00001336 08E4                    		or	ah, ah
  2507 00001338 7401                    		jz	short atd5
  2508 0000133A F9                      		stc
  2509                                  atd5:					
  2510 0000133B 07                      		pop	es
  2511 0000133C 1F                      		pop	ds
  2512 0000133D 5F                      		pop	di
  2513 0000133E 5A                      		pop	dx
  2514 0000133F 59                      		pop	cx
  2515 00001340 5B                      		pop	bx
  2516 00001341 CA0200                  		retf	2		; far return, dropping flags
  2517                                  
  2518                                  ; =============== S U B	R O U T	I N E ========================================
  2519                                  
  2520                                  ;***	setcmd - set up cmd_block for the disk operation
  2521                                  ;
  2522                                  ;	entry:	(ds) = bios data segment.
  2523                                  ;		(es:bx) in seg:000x form.
  2524                                  ;		other registers as in int 13h call
  2525                                  ;	
  2526                                  ;	exit:	cmd_block set up for disk read call.
  2527                                  ;		control_byte set up for disk operation.
  2528                                  ;		(al) = control byte modifier
  2529                                  ;
  2530                                  ;	sets the fields of cmd_block using the register contents
  2531                                  ;	and the contents of the disk parameter block for the given drive.
  2532                                  ;
  2533                                  ;	warning: (ax) destroyed.
  2534                                  ;		does direct calls to the at rom.
  2535                                  
  2536                                  setcmd:		; proc near		
  2537                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2538                                  		; 16/10/2022
  2539 00001344 A24300                  		mov	[cmd_block+sec_cnt], al
  2540                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2541 00001347 C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2542 0000134C 80FC02                  		cmp	ah, 2
  2543 0000134F 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2544 00001351 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2545                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2546                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2547                                  setc1:					
  2548 00001356 88C8                    		mov	al, cl
  2549 00001358 243F                    		and	al, 3Fh		; mask sector number
  2550                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2551                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2552 0000135A A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2553 0000135D 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2554 00001361 88C8                    		mov	al, cl
  2555 00001363 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2556                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2557 00001366 A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2558 00001369 89D0                    		mov	ax, dx
  2559 0000136B C0E004                  		shl	al, 4		; drive	number
  2560 0000136E 80E40F                  		and	ah, 0Fh
  2561 00001371 08E0                    		or	al, ah		; head number
  2562 00001373 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2563                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2564 00001375 A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2565 00001378 06                      		push	es
  2566 00001379 53                      		push	bx
  2567 0000137A 0E                      		push	cs
  2568 0000137B E85C00                  		call	get_vec
  2569 0000137E 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2570                                  			 		; write pre-comp from disk parameters
  2571 00001382 C1E802                  		shr	ax, 2
  2572                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2573 00001385 A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2574                                  					; only use low part
  2575 00001388 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2576                                  					; control byte modifier
  2577 0000138C 5B                      		pop	bx
  2578 0000138D 07                      		pop	es
  2579                                  		;mov	ah, ds:76h	; [control_byte]
  2580 0000138E 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2581 00001392 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2582 00001395 08C4                    		or	ah, al
  2583                                  		;mov	ds:76h,	ah
  2584 00001397 88267600                		mov	[control_byte], ah ; mov [76h],al
  2585 0000139B C3                      		retn
  2586                                  
  2587                                  ; =============== S U B	R O U T	I N E ========================================
  2588                                  
  2589                                  ;***	docmd - carry out read operation to at hard disk
  2590                                  ;
  2591                                  ;	entry:	(es:bx) = address for read in data.
  2592                                  ;		cmd_block set up for disk read.
  2593                                  ;
  2594                                  ;	exit:	buffer at (es:bx) contains data read.
  2595                                  ;		disk_status1 set to error code (0 if success).
  2596                                  ;
  2597                                  ;	
  2598                                  ;
  2599                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2600                                  ;		no check is made for dma boundary overrun.
  2601                                  ;
  2602                                  ;	effects: programs disk controller.
  2603                                  ;		performs disk input.
  2604                                  
  2605                                  docmd:		; proc near		
  2606 0000139C 89DF                    		mov	di, bx
  2607 0000139E 0E                      		push	cs
  2608 0000139F E84000                  		call	command
  2609 000013A2 7535                    		jnz	short doc3
  2610                                  doc1:					
  2611 000013A4 0E                      		push	cs
  2612 000013A5 E84200                  		call	waitt		; wait for controller to complete read
  2613 000013A8 752F                    		jnz	short doc3
  2614 000013AA B90001                  		mov	cx, 256		; 256 words per sector
  2615 000013AD BAF001                  		mov	dx, 1F0h	; hf_port
  2616 000013B0 FC                      		cld			; string op goes up
  2617 000013B1 FA                      		cli			; disable interrupts
  2618                                  					; (bug was forgetting this)
  2619                                  
  2620                                  ;	M062 -- some of these old machines have intermittent failures
  2621                                  ;		when the read is done at full speed. Instead of using
  2622                                  ;		a string rep instruction, we'll use a loop. There is
  2623                                  ;		a slight performance hit, but it only affects these
  2624                                  ;		very old machines with an exact date code match, and
  2625                                  ;		it makes said machines more reliable
  2626                                  ;
  2627                                  ;M062	repz	insw		;read in sector
  2628                                  
  2629                                  rsct_loop:				
  2630 000013B2 6D                      		insw
  2631 000013B3 E2FD                    		loop	rsct_loop
  2632 000013B5 FB                      		sti
  2633                                  		; 16/10/2022
  2634 000013B6 F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2635                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2636                                  					; (ds =	40h)
  2637 000013BB 7410                    		jz	short doc2	; no ecc bytes to read.
  2638 000013BD 0E                      		push	cs
  2639 000013BE E83100                  		call	wait_drq	; wait for controller to complete read
  2640 000013C1 7216                    		jb	short doc3
  2641 000013C3 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2642 000013C6 BAF001                  		mov	dx, 1F0h	; hf_port
  2643 000013C9 FA                      		cli
  2644 000013CA F36C                    		rep insb		; read in ecc
  2645 000013CC FB                      		sti
  2646                                  doc2:					
  2647 000013CD 0E                      		push	cs
  2648 000013CE E82900                  		call	check_status
  2649 000013D1 7506                    		jnz	short doc3	; operation failed
  2650                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2651 000013D3 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2652 000013D7 75CB                    		jnz	short doc1	; loop while more sectors to read
  2653                                  doc3:					
  2654 000013D9 C3                      		retn
  2655                                  
  2656                                  ; =============== S U B	R O U T	I N E ========================================
  2657                                  
  2658                                  ;***	define where the rom routines are actually located
  2659                                  ;	   in the buggy old AT BIOS that we might need to
  2660                                  ;	   install a special level of int13 handler for
  2661                                  
  2662                                  ; 16/10/2022
  2663                                  
  2664                                  romsegment 	equ 0F000h  ; segment
  2665                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2666                                  romwait		equ 2E7Fh   ; offset in romsegment
  2667                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2668                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2669                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2670                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2671                                  romfret		equ 0FF65h  ; far return in rom	
  2672                                  
  2673                                  ;***	get_vec - get pointer to hard disk parameters.
  2674                                  ;
  2675                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2676                                  ;
  2677                                  ;	exit:	(es:bx) = address of disk parameters table.
  2678                                  ;
  2679                                  ;	uses:	ax for segment computation.
  2680                                  ;
  2681                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2682                                  ;	or 70h (disk 1).
  2683                                  ;	
  2684                                  ;	warning: (ax) destroyed.
  2685                                  ;		this does a direct call to the at rom.
  2686                                  
  2687                                  get_vec:	; proc near		
  2688                                  		;push	0FF65h		; romfret ; far	return in rom
  2689                                  		;jmp	far ptr	0F000h:2F8Eh
  2690                                  		; 16/10/2022
  2691 000013DA 6865FF                  		push	romfret		; far return in rom
  2692 000013DD EA8E2F00F0              		jmp	romsegment:romget_vec
  2693                                  
  2694                                  ; =============== S U B	R O U T	I N E ========================================
  2695                                  
  2696                                  ;***	command - send contents of cmd_block to disk controller.
  2697                                  ;
  2698                                  ;	entry:	control_byte 
  2699                                  ;		cmd_block - set up with values for hard disk controller.
  2700                                  ;
  2701                                  ;	exit:	disk_status1 = error code.
  2702                                  ;		nz if error, zr for no error.
  2703                                  ;
  2704                                  ;
  2705                                  ;	warning: (ax), (cx), (dx) destroyed.
  2706                                  ;		does a direct call to the at rom.
  2707                                  ;
  2708                                  ;	effects: programs disk controller.
  2709                                  
  2710                                  command:	; proc near		
  2711                                  		;push	0FF65h		; romfret ; far	return in rom
  2712                                  		;jmp	far ptr	0F000h:2E1Eh
  2713                                  		; 16/10/2022
  2714 000013E2 6865FF                  		push	romfret		; far return in rom
  2715 000013E5 EA1E2E00F0              		jmp	romsegment:romcommand
  2716                                  
  2717                                  ; =============== S U B	R O U T	I N E ========================================
  2718                                  
  2719                                  ;***	waitt - wait for disk interrupt
  2720                                  ;
  2721                                  ;	entry:	nothing.
  2722                                  ;
  2723                                  ;	exit:	disk_status1 = error code.
  2724                                  ;		nz if error, zr if no error.
  2725                                  ;
  2726                                  ;
  2727                                  ;	warning: (ax), (bl), (cx) destroyed.
  2728                                  ;		does a direct call to the at rom.
  2729                                  ;		
  2730                                  ;	effects: calls int 15h, function 9000h.
  2731                                  
  2732                                  waitt:		; proc near		
  2733                                  		;push	0FF65h		; romfret ; far	return in rom
  2734                                  		;jmp	far ptr	0F000h:2E7Fh
  2735                                  		; 16/10/2022
  2736 000013EA 6865FF                  		push	romfret		; far return in rom
  2737 000013ED EA7F2E00F0              		jmp	romsegment:romwait
  2738                                  
  2739                                  ; =============== S U B	R O U T	I N E ========================================
  2740                                  
  2741                                  ;***	wait_drq - wait for data request.
  2742                                  ;
  2743                                  ;	entry:	nothing.
  2744                                  ;
  2745                                  ;	exit:	disk_status1 = error code.
  2746                                  ;		cy if error, nc if no error.
  2747                                  ;
  2748                                  ;	warning: (al), (cx), (dx) destroyed.
  2749                                  ;		does a direct call to the at rom.
  2750                                  
  2751                                  wait_drq:	; proc near		
  2752                                  		;push	0FF65h		; romfret ; far	return in rom
  2753                                  		;jmp	far ptr	0F000h:2EE2h
  2754                                  		; 16/10/2022
  2755 000013F2 6865FF                  		push	romfret		; far return in rom
  2756 000013F5 EAE22E00F0              		jmp	romsegment:romwait_drq
  2757                                  
  2758                                  ; =============== S U B	R O U T	I N E ========================================
  2759                                  
  2760                                  ;***	check_status - check hard disk status.
  2761                                  ;
  2762                                  ;	entry:	nothing.
  2763                                  ;
  2764                                  ;	exit:	disk_status1 = error code.
  2765                                  ;		nz if error, zr if no error.
  2766                                  ;
  2767                                  ;	warning: (ax), (cx), (dx) destroyed.
  2768                                  ;		does a direct call to the at rom.
  2769                                  
  2770                                  check_status:	; proc near		
  2771                                  		;push	0FF65h		; romfret ; far	return in rom
  2772                                  		;jmp	far ptr	0F000h:2EF8h
  2773                                  		; 16/10/2022
  2774 000013FA 6865FF                  		push	romfret		; far return in rom
  2775 000013FD EAF82E00F0              		jmp	romsegment:romcheck_status
  2776                                  
  2777                                  ; =============== S U B	R O U T	I N E ========================================
  2778                                  
  2779                                  ;***	check_dma - check for dma overrun 64k segment.
  2780                                  ;
  2781                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2782                                  ;		cmd_block set up for operation.
  2783                                  ;
  2784                                  ;	exit:	disk_status1 - error code.
  2785                                  ;		cy if error, nc if no error.
  2786                                  ;
  2787                                  ;	warning: does a direct call to the at rom.
  2788                                  
  2789                                  check_dma:	; proc near		
  2790                                  		;push	0FF65h		; romfret ; far	return in rom
  2791                                  		;jmp	far ptr	0F000h:2F69h
  2792                                  		; 16/10/2022
  2793 00001402 6865FF                  		push	romfret		; far return in rom
  2794 00001405 EA692F00F0              		jmp	romsegment:romcheck_dma
  2795                                  
  2796                                  ;-----------------------------------------------------------------------------
  2797                                  
  2798                                  endatrom:
  2799                                  
  2800                                  ; ----------------------------------------------------------------------------
  2801                                  
  2802                                  ;; M015 -- begin changes
  2803                                  ;;
  2804                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2805                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2806                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2807                                  ;; If our init code detects this error, it will install this
  2808                                  ;; special Int13 hook through the same mechanism that was set
  2809                                  ;; up for the IBM patch above. This code is also dynamically
  2810                                  ;; relocated by MSINIT.
  2811                                  
  2812                                  compaq_disk_io:
  2813 0000140A 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2814                                  					;
  2815                                  					; the following	label defines the end of the at	rom patch.
  2816                                  					; this is used at configuration	time.
  2817                                  					;
  2818                                  					; warning!!!
  2819                                  					; this code will be dynamically	relocated by msinit
  2820 0000140D 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2821                                  no_hookit:				
  2822                                  		;jmp	cs:Old13
  2823                                  		; 16/10/2022
  2824 0000140F 2EFF2E[0601]            		jmp	far [cs:Old13]
  2825                                  
  2826                                  ; ----------------------------------------------------------------------------
  2827                                  
  2828                                  mebbe_hookit:				
  2829 00001414 80FA80                  		cmp	dl, 80h
  2830 00001417 72F6                    		jb	short no_hookit
  2831 00001419 1E                      		push	ds
  2832 0000141A 50                      		push	ax
  2833 0000141B B84000                  		mov	ax, 40h
  2834 0000141E 8ED8                    		mov	ds, ax
  2835 00001420 58                      		pop	ax
  2836 00001421 9C                      		pushf
  2837                                  		;call	cs:Old13
  2838                                  		; 16/10/2022
  2839 00001422 2EFF1E[0601]            		call	far [cs:Old13]
  2840 00001427 1F                      		pop	ds
  2841 00001428 CA0200                  		retf	2
  2842                                  
  2843                                  ; ----------------------------------------------------------------------------
  2844                                  
  2845 0000142B 00                      end_compaq_i13hook: db 0			
  2846                                  
  2847                                  ; =============== S U B	R O U T	I N E ========================================
  2848                                  
  2849                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2850                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2851                                  
  2852                                  daycnt_to_day:	; proc far
  2853                                  
  2854                                  ; entry: [daycnt] = number of days since 1-1-80
  2855                                  ;
  2856                                  ; return: ch - century in bcd
  2857                                  ;	  cl - year in bcd
  2858                                  ;	  dh - month in bcd
  2859                                  ;	  dl - day in bcd
  2860                                  
  2861                                  		; 16/10/2022		
  2862 0000142C 2EFF36[F004]            		push	word [cs:daycnt] ; save daycnt
  2863 00001431 2E813E[F004]891C        		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2864                                  					; # days from 1-1-1980 to 1-1-2000
  2865 00001438 730E                    		jnb	short century20
  2866 0000143A 2EC606[F404]13          		mov	byte [cs:base_century], 19
  2867 00001440 2EC606[F504]50          		mov	byte [cs:base_year], 80
  2868 00001446 EB13                    		jmp	short years
  2869                                  ; ----------------------------------------------------------------------------
  2870                                  		
  2871                                  century20:				
  2872 00001448 2EC606[F404]14          		mov	byte [cs:base_century], 20
  2873 0000144E 2EC606[F504]00          		mov	byte [cs:base_year], 0
  2874 00001454 2E812E[F004]891C        		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2875                                  					; adjust daycnt
  2876                                  years:					
  2877 0000145B 31D2                    		xor	dx, dx
  2878 0000145D 2EA1[F004]              		mov	ax, [cs:daycnt]
  2879 00001461 BBB505                  		mov	bx, 1461	; (366+365*3)
  2880                                  					; # of days in a Leap year block
  2881 00001464 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  2882 00001466 2E8916[F004]            		mov	[cs:daycnt], dx	; save daycnt left
  2883 0000146B B304                    		mov	bl, 4
  2884 0000146D F6E3                    		mul	bl		; AX = # of years. Less	than 100
  2885 0000146F 2E0006[F504]            		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2886 00001474 2EFF06[F004]            		inc	word [cs:daycnt]	; set daycnt to	1 base
  2887 00001479 2E813E[F004]6E01        		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2888 00001480 7626                    		jbe	short leapyear	; within 366+355+355+355 days.
  2889 00001482 2EFE06[F504]            		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2890 00001487 2E812E[F004]6E01        		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2891 0000148E B90300                  		mov	cx, 3		; And next three years are normal
  2892                                  regularyear:				
  2893 00001491 2E813E[F004]6D01        		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2894 00001498 7614                    		jbe	short yeardone	; {if (daycnt >	365)
  2895 0000149A 2EFE06[F504]            		inc	byte [cs:base_year]	;   { daycnt -=	365
  2896 0000149F 2E812E[F004]6D01        		sub	word [cs:daycnt], 365	;   }
  2897 000014A6 E2E9                    		loop	regularyear	; }
  2898                                  					;
  2899                                  					; should never fall through loop
  2900                                  leapyear:				
  2901 000014A8 2EC606[F704]1D          		mov	byte [cs:month_tab+1], 29 ; leap year.
  2902                                  					; change month table.
  2903                                  yeardone:				
  2904 000014AE 31DB                    		xor	bx, bx
  2905 000014B0 31D2                    		xor	dx, dx
  2906 000014B2 2EA1[F004]              		mov	ax, [cs:daycnt]
  2907                                  		;mov	si, offset month_tab
  2908 000014B6 BE[F604]                		mov	si, month_tab	; 19/10/2022
  2909 000014B9 B90C00                  		mov	cx, 12
  2910                                  months:					
  2911 000014BC FEC3                    		inc	bl
  2912                                  
  2913                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  2914                                  		;mov	dl, [cs:si]
  2915                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  2916                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  2917                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  2918                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  2919                                  		
  2920 000014BE 8A14                    		mov	dl, [si] ; ?	; mov dl, [cs:si]
  2921 000014C0 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  2922                                  					; dh=0
  2923 000014C2 7605                    		jbe	short month_done
  2924 000014C4 46                      		inc	si		; next month
  2925 000014C5 29D0                    		sub	ax, dx		; adjust daycnt
  2926 000014C7 E2F3                    		loop	months		;
  2927                                  					; should never fall through loop
  2928                                  month_done:				
  2929 000014C9 2EC606[F704]1C          		mov	byte [cs:month_tab+1], 28
  2930                                  					; restore month table value
  2931 000014CF 88DA                    		mov	dl, bl
  2932 000014D1 2E8A36[F504]            		mov	dh, [cs:base_year]
  2933 000014D6 2E8A0E[F404]            		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  2934 000014DB 2EFF1E[0205]            		call	far [cs:bintobcd]
  2935                                  		;call	cs:bintobcd	; convert "day"	to bcd
  2936                                  					; dl = bcd day,	al = month
  2937 000014E0 86D0                    		xchg	dl, al
  2938 000014E2 2EFF1E[0205]            		call	far [cs:bintobcd]
  2939                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  2940 000014E7 86F0                    		xchg	dh, al
  2941 000014E9 2EFF1E[0205]            		call	far [cs:bintobcd]
  2942                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  2943 000014EE 86C8                    		xchg	cl, al
  2944 000014F0 2EFF1E[0205]            		call	far [cs:bintobcd]
  2945                                  		;call	cs:bintobcd	; ch = bcd century
  2946 000014F5 88C5                    		mov	ch, al
  2947 000014F7 2E8F06[F004]            		pop	word [cs:daycnt] ; restore original value
  2948 000014FC CB                      		retf
  2949                                  
  2950                                  enddaycnttoday:	
  2951                                  
  2952                                  ; =============== S U B	R O U T	I N E ========================================
  2953                                  
  2954                                  bin_to_bcd:	; proc far		; real time clock support
  2955                                  
  2956                                  ;convert a binary input in al (less than 63h or 99 decimal)
  2957                                  ;into a bcd value in al. ah destroyed.	
  2958                                  		
  2959 000014FD 51                      		push	cx		
  2960 000014FE D40A                    		aam			; al=high digit	bcd, ah=low digit bc
  2961 00001500 B104                    		mov	cl, 4
  2962 00001502 D2E4                    		shl	ah, cl		; mov the high digit to	high nibble
  2963 00001504 08E0                    		or	al, ah
  2964 00001506 59                      		pop	cx
  2965 00001507 CB                      		retf
  2966                                  
  2967                                  ; ----------------------------------------------------------------------------
  2968                                  
  2969                                  ; the k09 requires the routines for reading the clock because of the suspend/
  2970                                  ; resume facility. the system clock needs to be reset after resume.
  2971                                  
  2972                                  ; the following routine is executed at resume time when the system
  2973                                  ; powered on after suspension. it reads the real time clock and
  2974                                  ; resets the system time and date, and then irets.
  2975                                  
  2976                                  ; warning!!! this code will be dynamically relocated by msinit.
  2977                                  
  2978                                  int6c:					
  2979 00001508 0E                      		push	cs
  2980 00001509 1F                      		pop	ds
  2981 0000150A 8F06[BB06]              		pop	word [int6c_ret_addr]	; pop off return address
  2982 0000150E 8F06[BD06]              		pop	word [int6c_ret_addr+2]
  2983 00001512 9D                      		popf
  2984 00001513 E81300                  		call	read_real_date	; get the date from the clock
  2985 00001516 FA                      		cli
  2986 00001517 8936[F004]              		mov	[daycnt], si	; update dos copy of date
  2987 0000151B FB                      		sti
  2988 0000151C E8CB00                  		call	read_real_time	; get the time from the	rtc
  2989 0000151F FA                      		cli
  2990 00001520 B401                    		mov	ah, 1
  2991 00001522 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  2992                                  					; CX:DX	= clock	count
  2993                                  					; Return: time of day set
  2994 00001524 FB                      		sti
  2995                                  		;jmp	int6c_ret_addr	; long jump
  2996                                  		; 16/10/2022
  2997 00001525 FF2E[BB06]              		jmp	far [int6c_ret_addr] ; long jump
  2998                                  
  2999                                  ; =============== S U B	R O U T	I N E ========================================
  3000                                  
  3001                                  ;   read_real_date reads real-time clock for date and returns the number
  3002                                  ;   of days elapsed since 1-1-80 in si
  3003                                  
  3004                                  read_real_date:	; proc near		
  3005 00001529 50                      		push	ax
  3006 0000152A 51                      		push	cx
  3007 0000152B 52                      		push	dx
  3008 0000152C 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3009 0000152E CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3010                                  					; Return: CX:DX	= clock	count
  3011                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3012                                  					; midnight
  3013                                  					; Otherwise, AL	> 0
  3014 00001530 5A                      		pop	dx
  3015 00001531 59                      		pop	cx
  3016 00001532 58                      		pop	ax
  3017 00001533 50                      		push	ax
  3018 00001534 53                      		push	bx
  3019 00001535 51                      		push	cx
  3020 00001536 52                      		push	dx
  3021 00001537 2EC706[DB06]0100        		mov	word [cs:daycnt2], 1
  3022                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3023 0000153E B404                    		mov	ah, 4
  3024 00001540 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3025                                  					; Return: DL = day in BCD
  3026                                  					; DH = month in	BCD
  3027                                  					; CL = year in BCD
  3028                                  					; CH = century (19h or 20h)
  3029 00001542 7303                    		jnb	short read_ok
  3030 00001544 E99300                  		jmp	r_d_ret
  3031                                  ;-----------------------------------------------------------------------------
  3032                                  
  3033                                  read_ok:				
  3034 00001547 882E[BF06]              		mov	[bin_date_time], ch
  3035 0000154B 880E[C006]              		mov	[bin_date_time+1], cl
  3036 0000154F 8836[C106]              		mov	[bin_date_time+2], dh
  3037 00001553 8816[C206]              		mov	[bin_date_time+3], dl
  3038 00001557 2EC706[DB06]0200        		mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3039 0000155E E84201                  		call	bcd_verify	; verify bcd values in range
  3040 00001561 7277                    		jb	short r_d_ret	;  some	value out of range
  3041 00001563 2EC706[DB06]0300        		mov	word [cs:daycnt2], 3
  3042 0000156A E8E600                  		call	date_verify
  3043 0000156D 726B                    		jb	short r_d_ret
  3044 0000156F 2EC706[DB06]0000        		mov	word [cs:daycnt2], 0
  3045 00001576 E8AA00                  		call	in_bin
  3046 00001579 A0[C006]                		mov	al, [bin_date_time+1]
  3047 0000157C 98                      		cbw
  3048 0000157D 803E[BF06]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3049 00001582 7503                    		jnz	short century_19 ; no
  3050 00001584 83C064                  		add	ax, 100		; add in a century
  3051                                  
  3052                                  century_19:				
  3053 00001587 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3054 0000158A B104                    		mov	cl, 4		; leap year every 4
  3055 0000158C F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3056 0000158E 88E3                    		mov	bl, ah		; save odd years
  3057 00001590 98                      		cbw			; zero ah
  3058 00001591 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3059                                  					; # of days in leap year blocks
  3060 00001594 F7E1                    		mul	cx
  3061 00001596 2EA3[DB06]              		mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3062 0000159A 88D8                    		mov	al, bl		; get odd years	count
  3063 0000159C 98                      		cbw
  3064 0000159D 09C0                    		or	ax, ax
  3065 0000159F 740C                    		jz	short leap_year
  3066 000015A1 B96D01                  		mov	cx, 365		; days in year
  3067 000015A4 F7E1                    		mul	cx
  3068 000015A6 2E0106[DB06]            		add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3069 000015AB EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3070                                  					; possibly account for a leap day
  3071                                  ;-----------------------------------------------------------------------------
  3072                                  
  3073                                  leap_year:				
  3074 000015AD 803E[C106]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3075 000015B2 7605                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3076                                  leap_adjustment:			
  3077 000015B4 2EFF06[DB06]            		inc	word [cs:daycnt2] ; account for leap day
  3078                                  no_leap_adjustment:			
  3079 000015B9 8A0E[C206]              		mov	cl, [bin_date_time+3] ; get days of month
  3080 000015BD 30ED                    		xor	ch, ch
  3081 000015BF 49                      		dec	cx		; because of offset from day 1,	not day	0
  3082 000015C0 2E010E[DB06]            		add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3083 000015C5 8A0E[C106]              		mov	cl, [bin_date_time+2] ; get month
  3084 000015C9 30ED                    		xor	ch, ch
  3085 000015CB 49                      		dec	cx		; january starts at offset 0
  3086 000015CC D1E1                    		shl	cx, 1		; word offset
  3087 000015CE BE[C306]                		mov	si, month_table
  3088 000015D1 01CE                    		add	si, cx
  3089                                  		; 16/10/2022
  3090                                  		; ds must be same with cs here, if so..
  3091                                  		; what for cs: prefixes are used !?)
  3092                                  		; mov	ax, [cs:si]
  3093                                  		; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3094 000015D3 8B04                    		mov	ax, [si]	; mov ax, [cs:si]
  3095                                  					; get #	days in	previous months
  3096 000015D5 2E0106[DB06]            		add	[cs:daycnt2], ax
  3097                                  r_d_ret:				
  3098 000015DA 2E8B36[DB06]            		mov	si, [cs:daycnt2]
  3099 000015DF 5A                      		pop	dx
  3100 000015E0 59                      		pop	cx
  3101 000015E1 5B                      		pop	bx
  3102 000015E2 58                      		pop	ax
  3103 000015E3 C3                      		retn
  3104                                  
  3105                                  ;-----------------------------------------------------------------------------
  3106                                  
  3107                                  r_t_retj:				
  3108 000015E4 31C9                    		xor	cx, cx
  3109 000015E6 31D2                    		xor	dx, dx
  3110 000015E8 EB38                    		jmp	short r_t_ret
  3111                                  
  3112                                  ; =============== S U B	R O U T	I N E ========================================
  3113                                  
  3114                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3115                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3116                                  
  3117                                  read_real_time:	; proc near		
  3118 000015EA B402                    		mov	ah, 2
  3119 000015EC CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3120                                  					; Return: CH = hours in	BCD
  3121                                  					; CL = minutes in BCD
  3122                                  					; DH = seconds in BCD
  3123 000015EE 72F4                    		jb	short r_t_retj
  3124 000015F0 882E[BF06]              		mov	[bin_date_time], ch ; hours
  3125 000015F4 880E[C006]              		mov	[bin_date_time+1], cl ; minutes
  3126 000015F8 8836[C106]              		mov	[bin_date_time+2], dh ; seconds
  3127 000015FC C606[C206]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3128 00001601 E89F00                  		call	bcd_verify
  3129 00001604 72DE                    		jb	short r_t_retj
  3130 00001606 E88500                  		call	time_verify
  3131 00001609 72D9                    		jb	short r_t_retj
  3132 0000160B E81500                  		call	in_bin		; from bcd to bin
  3133 0000160E 8A2E[BF06]              		mov	ch, [bin_date_time]
  3134 00001612 8A0E[C006]              		mov	cl, [bin_date_time+1]
  3135 00001616 8A36[C106]              		mov	dh, [bin_date_time+2]
  3136 0000161A 8A16[C206]              		mov	dl, [bin_date_time+3]
  3137                                  		; 16/10/2022
  3138                                  		; 17/09/2022
  3139                                  		; 31/05/2019
  3140 0000161E FF1E[E206]              		call	far [ttticks] 
  3141                                  		;call	dword ptr ttticks ; note: indirect far call
  3142                                  					; cx:dx	= number of ticks
  3143                                  					; (at 18.2 ticks per sec.)
  3144                                  r_t_ret:				
  3145 00001622 C3                      		retn
  3146                                  
  3147                                  ; =============== S U B	R O U T	I N E =======================================
  3148                                  
  3149                                  ;   in_bin converts bin_date_time values from bcd to bin
  3150                                  
  3151                                  in_bin:		; proc near		
  3152 00001623 A0[BF06]                		mov	al, [bin_date_time] ; century or hours
  3153 00001626 E81F00                  		call	bcd_to_bin
  3154 00001629 A2[BF06]                		mov	[bin_date_time], al
  3155 0000162C A0[C006]                		mov	al, [bin_date_time+1] ; years or minutes
  3156 0000162F E81600                  		call	bcd_to_bin
  3157 00001632 A2[C006]                		mov	[bin_date_time+1], al
  3158 00001635 A0[C106]                		mov	al, [bin_date_time+2] ; months or seconds
  3159 00001638 E80D00                  		call	bcd_to_bin
  3160 0000163B A2[C106]                		mov	[bin_date_time+2], al
  3161 0000163E A0[C206]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3162 00001641 E80400                  		call	bcd_to_bin
  3163 00001644 A2[C206]                		mov	[bin_date_time+3], al
  3164 00001647 C3                      		retn
  3165                                  
  3166                                  ; =============== S U B	R O U T	I N E =======================================
  3167                                  
  3168                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3169                                  ;   a binary representation in al
  3170                                  ;   ah is destroyed
  3171                                  
  3172                                  bcd_to_bin:	; proc near		
  3173 00001648 88C4                    		mov	ah, al
  3174 0000164A 240F                    		and	al, 0Fh
  3175 0000164C B104                    		mov	cl, 4
  3176 0000164E D2EC                    		shr	ah, cl
  3177 00001650 D50A                    		aad
  3178 00001652 C3                      		retn
  3179                                  
  3180                                  ; =============== S U B	R O U T	I N E ========================================
  3181                                  
  3182                                  ;   date_verify loosely checks bcd date values to be in range
  3183                                  ;   in bin_date_time
  3184                                  
  3185                                  date_verify:	; proc near		
  3186 00001653 803E[BF06]20            		cmp	byte [bin_date_time], 20h ; century check
  3187 00001658 7732                    		ja	short date_error
  3188 0000165A 740E                    		jz	short century_20 ; jmp in 21th century
  3189 0000165C 803E[BF06]19            		cmp	byte [bin_date_time], 19h ; century check
  3190                                  		;jb	short date_error
  3191                                  		; 12/12/2022
  3192 00001661 722A                    		jb	short date_err2
  3193 00001663 803E[C006]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3194                                  		;jb	short date_error
  3195                                  		; 12/12/2022
  3196 00001668 7223                    		jb	short date_err2
  3197                                  century_20:				
  3198 0000166A 803E[C006]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3199 0000166F 771B                    		ja	short date_error
  3200 00001671 803E[C106]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3201 00001676 7714                    		ja	short date_error
  3202 00001678 803E[C106]00            		cmp	byte [bin_date_time+2], 0
  3203                                  		;jbe	short date_error
  3204 0000167D 760D                    		jna	short date_error
  3205 0000167F 803E[C206]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3206 00001684 7706                    		ja	short date_error
  3207                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3208                                  		;;jbe	short date_error
  3209                                  		;jna	short date_error
  3210                                  		; 12/12/2022
  3211                                  		; cf=0
  3212                                  		;clc
  3213                                  		; 12/12/2022
  3214 00001686 803E[C206]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3215 0000168B C3                      		retn
  3216                                  ;-----------------------------------------------------------------------------
  3217                                  
  3218                                  date_error:				
  3219 0000168C F9                      		stc
  3220                                  date_err2:
  3221 0000168D C3                      		retn
  3222                                  
  3223                                  ; =============== S U B	R O U T	I N E ========================================
  3224                                  
  3225                                  ; time_verify very loosely checks bcd date values to be in range
  3226                                  ; in bin_date_time
  3227                                  
  3228                                  time_verify:	; proc near		
  3229 0000168E 803E[BF06]24            		cmp	byte [bin_date_time], 24h ; hour check
  3230 00001693 770C                    		ja	short time_error
  3231 00001695 803E[C006]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3232 0000169A 7705                    		ja	short time_error
  3233                                  		; 12/12/2022h
  3234                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3235                                  		;ja	short time_error
  3236                                  		;clc
  3237                                  		;retn
  3238                                  		; 12/12/2022
  3239 0000169C 803E[C106]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3240                                  time_error:
  3241                                  bv_error:	
  3242 000016A1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3243 000016A2 C3                      		retn
  3244                                  
  3245                                  ; ----------------------------------------------------------------------------
  3246                                  
  3247                                  ;time_error:				
  3248                                  		;stc
  3249                                  		;retn
  3250                                  
  3251                                  ; =============== S U B	R O U T	I N E ========================================
  3252                                  
  3253                                  ;   bcd_verify checks values in bin_date_time to be valid
  3254                                  ;   bcd numerals.  carry set if any nibble out of range
  3255                                  
  3256                                  bcd_verify:	; proc near		
  3257 000016A3 B90400                  		mov	cx, 4		; 4 bytes to check
  3258 000016A6 BB[BF06]                		mov	bx, bin_date_time
  3259                                  bv_loop:				
  3260 000016A9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3261 000016AB 88C4                    		mov	ah, al
  3262 000016AD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3263                                  					; is 1's place in range?
  3264 000016B0 3C0A                    		cmp	al, 10
  3265 000016B2 77ED                    		ja	short bv_error	; jmp out of range
  3266 000016B4 D0EC                    		shr	ah, 1
  3267 000016B6 D0EC                    		shr	ah, 1
  3268 000016B8 D0EC                    		shr	ah, 1
  3269 000016BA D0EC                    		shr	ah, 1
  3270 000016BC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3271 000016BF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3272 000016C2 77DD                    		ja	short bv_error	; jmp out of range
  3273 000016C4 43                      		inc	bx		; next byte
  3274 000016C5 49                      		dec	cx
  3275 000016C6 75E1                    		jnz	short bv_loop
  3276 000016C8 F8                      		clc			; set success flag
  3277 000016C9 C3                      		retn
  3278                                  ; ----------------------------------------------------------------------------
  3279                                  
  3280                                  		; 12/12/2022
  3281                                  ;bv_error:				
  3282                                  		;stc			; set error flag
  3283                                  		;retn
  3284                                  
  3285                                  ; ----------------------------------------------------------------------------
  3286                                  
  3287                                  endk09:
  3288                                  
  3289                                  ; ----------------------------------------------------------------------------
  3290                                  
  3291                                  ;------------------------------------------------------------------------
  3292                                  ;									:
  3293                                  ;	System initialization						:
  3294                                  ;									:
  3295                                  ;	The entry conditions are established by the bootstrap		:
  3296                                  ;	loader and are considered unknown. The following jobs		:
  3297                                  ;	will be performed by this module:				:
  3298                                  ;									:
  3299                                  ;	1.	All device initialization is performed			:
  3300                                  ;	2.	A local stack is set up and DS:SI are set		:
  3301                                  ;		to point to an initialization table. Then		:
  3302                                  ;		an inter-segment call is made to the first		:
  3303                                  ;		byte of the dos 					:
  3304                                  ;	3.	Once the dos returns from this call the ds		:
  3305                                  ;		register has been set up to point to the start		:
  3306                                  ;		of free memory. The initialization will then		:
  3307                                  ;		load the command program into this area 		:
  3308                                  ;		beginning at 100 hex and transfer control to		:
  3309                                  ;		this program.						:
  3310                                  ;									:
  3311                                  ;------------------------------------------------------------------------
  3312                                  
  3313                                  ; 01/10/2022
  3314                                  ; 08/01/2018 - Retro DOS v4.0
  3315                                  
  3316                                  ; drvfat must be the first location of freeable space!
  3317                                  
  3318                                  
  3319                                  align 2
  3320                                  		;db 90h
  3321                                  
  3322                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3323                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3324                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3325                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3326                                  	
  3327 000016CA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3328                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3329                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3330                                  ;doscnt:	dw 0			; how many sectors to read
  3331 000016CC 00                      fbigfat:	db 0			; flags	for drive
  3332                                  ;fatloc:	dw 0			; seg addr of fat sector
  3333 000016CD 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3334 000016CF 80                      rom_drv_num:	db 80h			; rom drive number
  3335                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3336                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3337                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3338                                  
  3339                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3340                                  ; call to determine drive parameters.
  3341                                  
  3342 000016D0 02                      num_heads:	db 2			; number of heads returned by rom
  3343 000016D1 09                      sec_trk:	db 9			; sec/trk returned by rom
  3344 000016D2 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3345 000016D3 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3346                                  
  3347                                  ; ----------------------------------------------------------------------------
  3348                                  
  3349 000016D4 0002000140000000        disktable:	dw 512,	256, 64, 0	; warning !!! old values
  3350 000016DC 0008010270000000        		dw 2048, 513, 112, 0
  3351 000016E4 0020020400010000        		dw 8192, 1026, 256, 0
  3352 000016EC A87F030800020000        		dw 32680, 2051,	512, 0	; warning !!! old values
  3353 000016F4 FFFF041000040000        		dw 65535, 4100,	1024, 0	; default disktable under
  3354                                  					; the assumption of total fat size <= 128 kb,
  3355                                  					; and the maximum size of fat entry = 16 bit.
  3356                                  
  3357 000016FC 0000A87F0308000200-     disktable2:	dw 0, 32680, 2051, 512,	0 
  3357 00001705 00                 
  3358                                  					; for compatibility.
  3359 00001706 040000000204000240-     		dw 4, 0, 402h, 200h, 40h ; covers upto 134 mb media.
  3359 0000170F 00                 
  3360                                  					; fbig = 40h
  3361 00001710 080000000308000240-     		dw 8, 0, 803h, 200h, 40h ; upto	268 mb
  3361 00001719 00                 
  3362 0000171A 100000000410000240-     		dw 10h,	0, 1004h, 200h,	40h ; upto 536 mb
  3362 00001723 00                 
  3363 00001724 200000000520000240-     		dw 20h,	0, 2005h, 200h,	40h ; upto 1072	mb
  3363 0000172D 00                 
  3364 0000172E 400000000640000240-     		dw 40h,	0, 4006h, 200h,	40h ; upto 2144	mb
  3364 00001737 00                 
  3365 00001738 800000000780000240-     		dw 80h,	0, 8007h, 200h,	40h ; upto 4288	mb...
  3365 00001741 00                 
  3366                                  					
  3367                                  ; ----------------------------------------------------------------------------
  3368                                  
  3369                                  ;******************************************************
  3370                                  ;variables for mini disk initialization
  3371                                  ;******************************************************
  3372                                  
  3373                                  ; 01/10/2022
  3374                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3375                                  
  3376 00001742 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3377 00001743 00                      hnum:		db 0			; real number of hardfiles
  3378 00001744 [8706]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3379 00001746 [1709]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3380                                  					; of bds table. needed to figure out
  3381                                  					; the dosdatasg address.
  3382 00001748 0000                    mini_hdlim:	dw 0			
  3383 0000174A 0000                    mini_seclim:	dw 0
  3384                                  
  3385                                  ;end of mini disk init variables **********************
  3386                                  
  3387                                  ; ----------------------------------------------------------------------------
  3388                                  			
  3389 0000174C 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3390                                  
  3391                                  ; 13/12/2022
  3392                                  %if 0
  3393                                  
  3394                                  ;align 2
  3395                                  		db  90h	
  3396                                  
  3397                                  ; the following are the recommended bpbs for the media that we know of so far.
  3398                                  
  3399                                  ;struc bpbx
  3400                                  ;   resw 1 ; 512
  3401                                  ;   resb 1
  3402                                  ;   resw 1 ; 1
  3403                                  ;   resb 1 ; 2
  3404                                  ;   resw 1
  3405                                  ;   resw 1
  3406                                  ;   resb 1
  3407                                  ;   resw 1
  3408                                  ;   resw 1
  3409                                  ;   resw 1 ; 2
  3410                                  ;   resw 1
  3411                                  ;   resw 1 ; hidden sector high
  3412                                  ;   resd 1 ; extended total sectors
  3413                                  ;.size:
  3414                                  ;endstruc
  3415                                  
  3416                                  ; 08/01/2019 - Retro DOS v4.0
  3417                                  
  3418                                  ; 20/04/2019
  3419                                  
  3420                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3421                                  
  3422                                  ; 09/12/2022
  3423                                  BPB48T:
  3424                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3425                                  		; 48 tpi diskettes	;
  3426                                  		dw	512		; physical sector size in bytes
  3427                                  		db	2		; sectors/allocation unit
  3428                                  		dw	1		; reserved sectors for dos
  3429                                  		db	2		; number of allocation tables
  3430                                  		dw	112		; number of directory entries
  3431                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3432                                  		db	0FDh		; media descriptor
  3433                                  		dw	2		; number of fat sectors
  3434                                  		dw	9		; sectors per track
  3435                                  		dw	2		; heads
  3436                                  		dw	0		; hidden sector count (low word)
  3437                                  		dw	0		; hidden sector (high)
  3438                                  		dw	0		; number of sectors (low)
  3439                                  		dw	0		; number of sectors (high)					
  3440                                  
  3441                                  		db 90h
  3442                                  ;align 2
  3443                                  BPB96T:
  3444                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3445                                  		; 96 tpi diskettes	;
  3446                                  		dw	512		; physical sector size in bytes
  3447                                  		db	1		; sectors/allocation unit
  3448                                  		dw	1		; reserved sectors for dos
  3449                                  		db	2		; number of allocation tables
  3450                                  		dw	224		; number of directory entries
  3451                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3452                                  		db	0F9h		; media descriptor
  3453                                  		dw	7		; number of fat sectors
  3454                                  		dw	15		; sectors per track
  3455                                  		dw	2		; heads
  3456                                  		dw	0		; hidden sector count (low word)
  3457                                  		dw	0		; hidden sector (high)
  3458                                  		dw	0		; number of sectors (low)
  3459                                  		dw	0		; number of sectors (high)
  3460                                  
  3461                                  		db 90h
  3462                                  ;align 2
  3463                                  BPB35:
  3464                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3465                                  		; 3.5" diskettes - 720 KB ;		
  3466                                  		dw	512		; physical sector size in bytes
  3467                                  		db	2		; sectors/allocation unit
  3468                                  		dw	1		; reserved sectors for dos
  3469                                  		db	2		; number of allocation tables
  3470                                  		dw	112		; number of directory entries
  3471                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3472                                  		db	0F9h		; media descriptor
  3473                                  		dw	3		; number of fat sectors
  3474                                  		dw	9		; sectors per track
  3475                                  		dw	2		; heads
  3476                                  		dw	0		; hidden sector count (low word)
  3477                                  		dw	0		; hidden sector (high)
  3478                                  		dw	0		; number of sectors (low)
  3479                                  		dw	0		; number of sectors (high)
  3480                                  
  3481                                  		db 90h
  3482                                  ;align 2
  3483                                  
  3484                                  ;align 2
  3485                                  ;BPB144:
  3486                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3487                                  ;
  3488                                  ;		dw	512		; physical sector size in bytes
  3489                                  ;		db	1		; sectors/allocation unit
  3490                                  ;		dw	1		; reserved sectors for dos
  3491                                  ;		db	2		; number of allocation tables
  3492                                  ;		dw	224		; number of directory entries
  3493                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3494                                  ;		db	0F0h		; media descriptor
  3495                                  ;		dw	9		; number of fat sectors
  3496                                  ;		dw	18		; sectors per track
  3497                                  ;		dw	2		; heads
  3498                                  ;		dw	0		; hidden sector count (low word)
  3499                                  ;		dw	0		; hidden sector (high)
  3500                                  ;		dw	0		; number of sectors (low)
  3501                                  ;		dw	0		; number of sectors (high)
  3502                                  ;
  3503                                  ;		db 90h
  3504                                  ;align 2
  3505                                  
  3506                                  BPB288:
  3507                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3508                                  		; 3.5" diskettes - 2.88 MB ;	 
  3509                                  		dw	512		; physical sector size in bytes
  3510                                  		db	2		; sectors/allocation unit
  3511                                  		dw	1		; reserved sectors for dos
  3512                                  		db	2		; number of allocation tables
  3513                                  		dw	240		; number of directory entries
  3514                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3515                                  		db	0F0h		; media descriptor
  3516                                  		dw	3		; number of fat sectors
  3517                                  		dw	9		; sectors per track
  3518                                  		dw	2		; heads
  3519                                  		dw	0		; hidden sector count (low word)
  3520                                  		dw	0		; hidden sector (high)
  3521                                  		dw	0		; number of sectors (low)
  3522                                  		dw	0		; number of sectors (high)
  3523                                  
  3524                                  		db 90h			;
  3525                                  ;align 2
  3526                                  
  3527                                  %endif
  3528                                  
  3529                                  ; ----------------------------------------------------------------------------
  3530                                  					; align	2
  3531                                  ; 09/12/2022
  3532                                  %if 0
  3533                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3534                                  		dw bpb96t		; 96tpi	drives
  3535                                  		dw bpb35		; 3.5" drives
  3536                                  		dw bpb35		; unused 8" diskette
  3537                                  		dw bpb35		; unused 8" diskette
  3538                                  		dw bpb35		; used for hard	disk
  3539                                  		dw bpb35		; used for tape	drive
  3540                                  		dw bpb35		; FFOTHER
  3541                                  		dw bpb35		; ERIMO
  3542                                  		dw bpb288		; 2.88MB drive
  3543                                  		;
  3544                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3545                                  %endif
  3546                                  
  3547                                  ; 13/12/2022
  3548                                  %if 0
  3549                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3550                                  		dw BPB96T		; 96tpi	drives
  3551                                  		dw BPB35		; 3.5" drives
  3552                                  		dw BPB35		; unused 8" diskette
  3553                                  		dw BPB35		; unused 8" diskette
  3554                                  		dw BPB35		; used for hard	disk
  3555                                  		dw BPB35		; used for tape	drive
  3556                                  		dw BPB35		; FFOTHER
  3557                                  		dw BPB35		; ERIMO
  3558                                  		dw BPB288		; 2.88MB drive
  3559                                  		;
  3560                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3561                                  
  3562                                  %endif
  3563                                  
  3564                                  ; ----------------------------------------------------------------------------
  3565                                  
  3566                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3567                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3568                                  ;	  will not yet be moved to its final resting place, so we know
  3569                                  ;	  it'll be low.
  3570                                  ;
  3571                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3572                                  ;	  the function you want to call in Bios_Code. This routine will
  3573                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3574                                  ;	  will get executed when the utility function finishes. It will
  3575                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3576                                  ;	  and a retf
  3577                                  
  3578                                  ; 16/10/2022
  3579                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3580                                  ; 09/12/2022
  3581                                  BC_RETF equ bc_retf
  3582                                  
  3583                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3584                                  					; 2C7h:0C8h = 70h:2638h
  3585 00001755 [C800]                  		dw BC_RETF
  3586                                  
  3587                                  ; ----------------------------------------------------------------------------
  3588                                  
  3589                                  call_bios_code:	; proc far			
  3590 00001757 2EFF36[5517]            		push	word [cs:addr_of_bcretf] 
  3591                                  					; set up near return to far return
  3592 0000175C 2EFF36[E006]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3593 00001761 55                      		push	bp		; save offset of utility function
  3594 00001762 CB                      		retf			; far jump to (DOS)BIOS code
  3595                                  
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  		
  3598                                  		; 20/12/2022
  3599                                  ;flp_drvs	db 0			
  3600                                  
  3601                                  ; ----------------------------------------------------------------------------
  3602                                  
  3603                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3604                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3605                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3606                                  
  3607                                  ;-----------------------------------------------------------------------------
  3608                                  ; entry point from boot sector
  3609                                  ;-----------------------------------------------------------------------------
  3610                                  
  3611                                  init:		; 27/12/2018
  3612                                  		; MSDOS 6.0 (MSINIT.ASM)
  3613                                  		;=============================================================
  3614                                  		;
  3615                                  		; entry from boot sector. the register contents are:
  3616                                  		;
  3617                                  		;   dl = int 13 drive number we booted from
  3618                                  		;   ch = media byte
  3619                                  		;   bx = first data sector on disk.
  3620                                  		;   ax = first data sector (high)
  3621                                  		;   di = sectors/fat for the boot media.
  3622                                  
  3623                                  		; 07/04/2018
  3624                                  		;=============================================================
  3625                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3626                                                  ; DL = [bsDriveNumber]
  3627                                  		; DH = [bsMedia]
  3628                                  		; AX = [bsSectors] ; Total sectors
  3629                                  		; DS = 0, SS = 0
  3630                                  		; BP = 7C00h
  3631                                  	
  3632                                  ; 20/12/2022
  3633                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3634                                  %if 0	
  3635                                  		cli
  3636                                  
  3637                                  		push	ax
  3638                                  		xor	ax, ax
  3639                                  		mov	ds, ax
  3640                                  		pop	ax
  3641                                  %endif
  3642                                  
  3643                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3644                                  
  3645                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3646                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3647                                  
  3648                                  ;-----------------------------------------------------------------------------
  3649                                  ; initialization - stage 1
  3650                                  ;-----------------------------------------------------------------------------
  3651                                  ; 02/06/2018 - Retro DOS v3.0
  3652                                  		
  3653                                  		; 21/12/2022
  3654                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3655                                  		;mov	bx, 60h
  3656                                  		;mov	es, bx
  3657                                  		;mov	si, bp
  3658                                  		;sub	di, di
  3659                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3660                                  		;;mov	cl, 35
  3661                                  		;rep	movsw
  3662                                  
  3663 00001763 0E                      		push	cs
  3664 00001764 1F                      		pop	ds
  3665                                  
  3666                                  		; 20/03/2019 - Retro DOS v4.0
  3667                                  		;cli		; turn interrupts off while manupulating stack
  3668                                  		;mov	ss, cx	; set stack segment register
  3669 00001765 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3670                                  		;sti		; turn interrupts on
  3671                                  
  3672                                  		; 27/03/2018
  3673                                  		;mov	cx, KERNEL_SIZE	; words !
  3674                                  
  3675                                  		; 20/03/2019
  3676 00001768 B90080                  		mov	cx, 32768 ; 65536 bytes
  3677                                  
  3678                                  		; 21/12/2022
  3679                                  		; 07/04/2018
  3680 0000176B BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3681                                  		;mov	bl, KERNEL_SEGMENT
  3682 0000176E 8EC3                    		mov	es, bx
  3683 00001770 31FF                    		xor	di, di
  3684 00001772 89FE                    		mov	si, di
  3685                                  		
  3686                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3687                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3688 00001774 F3A5                    		rep	movsw
  3689                                  
  3690                                  		; 20/03/2019 - Retro DOS v4.0
  3691 00001776 53                      		push	bx
  3692 00001777 68[7B17]                		push	init0
  3693 0000177A CB                      		retf
  3694                                  init0:	
  3695                                  		; 20/12/2022
  3696                                  		; (combined kernel file > 64KB)
  3697                                  
  3698                                  		; 20/03/2019
  3699 0000177B B520                    		mov	ch, 20h
  3700 0000177D 8ED9                    		mov	ds, cx ; 2000h
  3701                                  		;mov	cx, 1070h
  3702 0000177F B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3703 00001782 8EC1                    		mov	es, cx
  3704                                  		
  3705                                  		; 21/12/2022
  3706                                  		KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3707                                  
  3708 00001784 B9[AA47]                		mov	cx, KERNEL_SIZE - 32768
  3709                                  		;xor	si, si
  3710                                  		;xor	di, di
  3711 00001787 F3A5                    		rep	movsw
  3712                                  
  3713                                  		; 17/06/2018 
  3714 00001789 8EDB                    		mov	ds, bx
  3715                                  		; 21/03/2019
  3716 0000178B 8EC3                    		mov	es, bx
  3717                                  ;init0:
  3718                                  ;		;push	es
  3719                                  ;		push	bx ; 20/03/2019
  3720                                  ;		push	init1 ; 07/04/2018
  3721                                  ;		retf	; jump to 0070h:init1
  3722                                  ;init:
  3723                                  init1:
  3724                                  		; 20/12/2022
  3725                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3726                                  		; for full MSDOS compatibility.
  3727                                  
  3728 0000178D 8EC1                    		mov	es, cx ; 0
  3729 0000178F 8ED9                    		mov	ds, cx ; 0
  3730                                  
  3731 00001791 B82205                  		mov	ax, SEC9
  3732                                  
  3733                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3734 00001794 B378                    		mov	bl, 1Eh*4
  3735                                  				; INT 1Eh points to diskette parms table
  3736                                  
  3737                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3738                                   		; (do not move the DPT if is not original ROMBIOS table)
  3739                                  
  3740                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3741                                  		;;jnz	short mov_dpt
  3742                                  
  3743                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3744                                  		;je	short dont_mov_dpt
  3745                                  
  3746                                  		;mov	si, [bx] ; [1Eh*4]		
  3747                                  ;mov_dpt:
  3748                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3749 00001796 C537                    		lds	si, [bx]
  3750 00001798 89C7                    		mov	di, ax  ; SEC9
  3751 0000179A B10B                    		mov	cl, 11
  3752                                  		;cld
  3753 0000179C F3A4                    		rep	movsb
  3754                                  
  3755                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3756 0000179E 8ED9                    		mov	ds, cx ; 0
  3757 000017A0 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3758 000017A2 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3759                                  ;dont_mov_dpt:
  3760                                  
  3761                                  ; 20/12/2022 - Retro DOS v4.0
  3762                                  %if 0
  3763                                  		; 27/12/2018 - Retro DOS v4.0
  3764                                  		; 'Starting MS-DOS...' message
  3765                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3766                                  		; (0070h:96A3h)
  3767                                  
  3768                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3769                                  		mov     ah, 0Eh
  3770                                  		;bh = 0
  3771                                          	mov     bl, 7		; "normal" attribute and page
  3772                                  startmsg_nxt_chr:  
  3773                                  		lodsb
  3774                                  		or	al, al
  3775                                          	jz	short startmsg_ok
  3776                                         
  3777                                  		int	10h		; video write
  3778                                          	jmp	short startmsg_nxt_chr
  3779                                  
  3780                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3781                                  
  3782                                  startmsg_ok:
  3783                                  
  3784                                  %endif
  3785                                  
  3786                                  ;-----------------------------------------------------------------------------
  3787                                  ; initialization - stage 2
  3788                                  ;-----------------------------------------------------------------------------
  3789                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3790                                  
  3791                                  
  3792                                  ; 19/03/2018
  3793                                  ; Retro DOS v2.0 (24/02/2018)
  3794                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3795                                  
  3796                                  ;------------------------------------------------------------------------
  3797                                  ;									:
  3798                                  ;	System initialization						:
  3799                                  ;									:
  3800                                  ;	The entry conditions are established by the bootstrap		:
  3801                                  ;	loader and are considered unknown. The following jobs		:
  3802                                  ;	will be performed by this module:				:
  3803                                  ;									:
  3804                                  ;	1.	All device initialization is performed			:
  3805                                  ;	2.	A local stack is set up and DS:SI are set		:
  3806                                  ;		to point to an initialization table. Then		:
  3807                                  ;		an inter-segment call is made to the first		:
  3808                                  ;		byte of the dos 					:
  3809                                  ;	3.	Once the dos returns from this call the ds		:
  3810                                  ;		register has been set up to point to the start		:
  3811                                  ;		of free memory. The initialization will then		:
  3812                                  ;		load the command program into this area 		:
  3813                                  ;		beginning at 100 hex and transfer control to		:
  3814                                  ;		this program.						:
  3815                                  ;									:
  3816                                  ;------------------------------------------------------------------------
  3817                                  		
  3818                                  		; 20/12/2022
  3819                                  		; ----------------------
  3820                                  		; Registers
  3821                                  		; ----------------------
  3822                                  		; DL = [bsDriveNumber]
  3823                                  		; DH = [bsMedia]
  3824                                  		; DS = 0, ES = 0, SS = 0
  3825                                  		; BP = 7C00h
  3826                                  		; SP = 700h
  3827                                  		; ----------------------
  3828                                  		; CX = 0				
  3829                                  
  3830                                  ; 02/10/2022 - 20/12/2022
  3831                                  ; ------------------------------------------------------------------------------
  3832                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3833                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3834                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3835                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3836                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3837                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3838                                  ; ------------------------------------------------------------------------------
  3839                                  
  3840                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3841                                  ;
  3842                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3843                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3844                                  ;;	data sector of the bios.
  3845                                  ;
  3846                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3847                                  ;		mov	[cs:bios_l], bx
  3848                                  
  3849                                  ; with the following information from msload, we don't need the
  3850                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3851                                  ;     limitation of msbio.com file.
  3852                                  
  3853                                  		; 21/12/2022
  3854 000017A5 FA                      		cli
  3855                                  
  3856 000017A6 0E                      		push	cs		; Save a peck of interrupt vectors...
  3857 000017A7 07                      		pop	es
  3858                                  		;push	cx
  3859                                  		;push	di
  3860                                  		; 20/12/2022
  3861 000017A8 B105                    		mov	cl, 5
  3862                                  		;mov	cx, 5		; NUMROMVECTORS
  3863                                  					; no. of rom vectors to	be saved
  3864                                  		;mov	si, offset RomVectors ; point to list of int vectors
  3865 000017AA BE[0001]                		mov	si, RomVectors
  3866                                  next_int_:		
  3867 000017AD 2E                      		cs	; 16/10/2022
  3868 000017AE AC                      		lodsb		
  3869                                  		;lods	byte ptr cs:[si] ; cs lodsb
  3870 000017AF 98                      		cbw			; ax = interrupt number
  3871 000017B0 D1E0                    		shl	ax, 1
  3872 000017B2 D1E0                    		shl	ax, 1		; int no * 4
  3873 000017B4 89C7                    		mov	di, ax		; interrupt vector address
  3874 000017B6 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  3875                                  					; saving address in di
  3876                                  		;lodsw			; movsw
  3877                                  		;stosw
  3878                                  		;lodsw			; movsw
  3879                                  		;stosw			; save the vector
  3880                                  		; 20/12/2022
  3881 000017B8 A5                      		movsw
  3882 000017B9 A5                      		movsw		
  3883                                  
  3884 000017BA 87F7                    		xchg	si, di
  3885 000017BC E2EF                    		loop	next_int_
  3886                                  		
  3887                                  		;pop	di
  3888                                  		;pop	cx
  3889                                  
  3890                                  ; we need to save int13 in two places in case we are running on an at.
  3891                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  3892                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  3893                                  ; rom int13 routine, we must have that rom address also stored away.
  3894                                  
  3895                                  		; 20/12/2022
  3896                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  3897                                  		;mov	[cs:Orig13], ax
  3898                                  		;mov	ax, [cs:Old13+2]
  3899                                  		;mov	[cs:Orig13+2], ax
  3900                                  
  3901                                  		; 16/10/2022
  3902 000017BE C7064C00[7407]          		mov	word [13h*4], block13
  3903                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  3904                                  					; set up int 13	for new	action
  3905 000017C4 8C0E4E00                		mov	[13h*4+2], cs
  3906                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  3907 000017C8 C7065400[4808]          		mov	word [15h*4], Int15
  3908                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  3909                                  					; set up int 15	for new	action
  3910 000017CE 8C0E5600                		mov	[15h*4+2], cs
  3911                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  3912 000017D2 C7066400[F907]          		mov	word [19h*4], int19
  3913                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  3914                                  					; set up int 19	for new	action
  3915 000017D8 8C0E6600                		mov	[19h*4+2], cs
  3916                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  3917                                  
  3918                                  		; 20/12/2022
  3919 000017DC 0E                      		push	cs
  3920 000017DD 1F                      		pop	ds
  3921                                  		
  3922 000017DE A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  3923 000017E1 A3[B400]                		mov	[Orig13], ax
  3924 000017E4 A1[0801]                		mov	ax, [Old13+2]
  3925 000017E7 A3[B600]                		mov	[Orig13+2], ax
  3926                                  					; ;
  3927 000017EA FB                      		sti
  3928 000017EB CD11                    		int	11h		; EQUIPMENT DETERMINATION
  3929                                  					; Return: AX = equipment flag bits
  3930                                  
  3931                                  ; we have to support a system that does not have any diskette
  3932                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  3933                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  3934                                  ; otherwise, the system has only hardfiles.
  3935                                  ;
  3936                                  ; important thing is that still, for compatibility reason, the drive letter
  3937                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  3938                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  3939                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  3940                                  ; drives will get "invalid drive letter ..." message. we are going to
  3941                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  3942                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  3943                                  
  3944                                  ; check the register returned by the equipment determination interrupt
  3945                                  ; we have to handle the case of no diskettes in the system by faking
  3946                                  ; two dummy drives.
  3947                                  ;
  3948                                  ; if the register indicates that we do have floppy drives we don't need
  3949                                  ; to do anything special.
  3950                                  ;
  3951                                  ; if the register indicates that we don't have any floppy drives then
  3952                                  ; what we need to do is set the fakefloppydrv variable, change the
  3953                                  ; register to say that we do have floppy drives and then go to execute
  3954                                  ; the code which starts at notsingle. this is because we can skip the
  3955                                  ; code given below which tries to find if there are one or two drives
  3956                                  ; since we already know about this.
  3957                                  
  3958                                  		; 06/05/2019 - Retro DOS v4.0
  3959 000017ED 88C1                    		mov	cl, al
  3960                                  
  3961                                  		; 12/12/2022
  3962 000017EF A801                    		test	al, 1
  3963                                  		;test	ax, 1		; floppy drives	present	?
  3964 000017F1 751F                    		jnz	short normalfloppydrv ;	yes.
  3965                                  
  3966                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  3967                                  ; whether it is an old ROM BIOS or a new one
  3968                                  ;
  3969                                  ; WARNING !!!
  3970                                  ;
  3971                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  3972                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  3973                                  
  3974                                  		; 20/12/2022
  3975                                  		;push	ax
  3976                                  		;push	bx
  3977                                  		;push	cx
  3978 000017F3 52                      		push	dx
  3979                                  		;push	di
  3980 000017F4 06                      		push	es
  3981 000017F5 B408                    		mov	ah, 8
  3982 000017F7 B200                    		mov	dl, 0
  3983 000017F9 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  3984                                  					; DL = drive number
  3985                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  3986                                  					; DL = number of consecutive drives
  3987                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  3988 000017FB 7202                    		jc	short _gdskp_error
  3989                                  		;;mov	[cs:flp_drvs], dl
  3990                                  		; 20/12/2022
  3991                                  		; ds = cs
  3992                                  		;mov	[flp_drvs], dl
  3993 000017FD 88D1                    		mov	cl, dl
  3994                                  _gdskp_error:	
  3995                                  		; 20/12/2022			
  3996 000017FF 07                      		pop	es
  3997                                  		;pop	di
  3998 00001800 5A                      		pop	dx
  3999                                  		;pop	cx
  4000                                  		;pop	bx
  4001                                  		;pop	ax
  4002                                  		
  4003 00001801 720F                    		jc	short normalfloppydrv
  4004                                  					; if error it is an old ROM BIOS
  4005                                  					; so, lets assume that ROM BIOS lied
  4006                                  		; 20/12/2022
  4007                                  		; ds = cs
  4008                                  		;cmp	byte [flp_drvs], 0
  4009                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4010                                  		;jz	short _set_fake_flpdrv
  4011                                  		;;mov	al, [cs:flp_drvs]
  4012                                  		;mov	al, [flp_drvs]
  4013                                  		;;dec	al		; make it zero based
  4014                                  		;; 18/12/2022
  4015                                  		;dec	ax
  4016                                  		;jmp	short got_num_flp_drvs
  4017                                  		
  4018                                  		; 20/12/2022
  4019 00001803 08C9                    		or	cl, cl ; [flp_drvs]
  4020 00001805 7403                    		jz	short _set_fake_flpdrv		
  4021 00001807 49                      		dec	cx	
  4022 00001808 EB0C                    		jmp	short got_num_flp_drvs
  4023                                  ; ----------------------------------------------------------------------------
  4024                                  
  4025                                  _set_fake_flpdrv:
  4026                                  		;20/12/2022
  4027                                  		; ds = cs
  4028 0000180A FEC1                    		inc	cl	; cl = 1
  4029 0000180C 880E[D316]              		mov	[fakefloppydrv], cl ; 1
  4030                                  		;mov	byte [fakefloppydrv], 1		
  4031                                  		;;mov	byte [cs:fakefloppydrv], 1
  4032                                  					; we don't have any floppy drives.
  4033                                  		; 20/12/2022
  4034                                  		;mov	ax, 1
  4035 00001810 EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4036                                  ; ----------------------------------------------------------------------------
  4037                                  
  4038                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4039                                  		; 20/12/2022
  4040                                  		;rol	al, 1		; there	exist floppy drives.
  4041                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4042 00001812 D0C1                    		rol	cl, 1
  4043 00001814 D0C1                    		rol	cl, 1
  4044                                  got_num_flp_drvs:			
  4045                                  		;;and	ax, 3		; only look at bits 0 &	1
  4046                                  		; 18/12/2022
  4047                                  		;and	al, 3
  4048                                  		; 20/12/2022
  4049 00001816 80E103                  		and	cl, 3
  4050 00001819 7505                    		jnz	short notsingle	; zero means single drive system
  4051                                  		; 20/12/2022
  4052 0000181B 41                      		inc	cx
  4053                                  		;inc	ax		; pretend it's a two drive system
  4054                                  settwodrive:				; set this to two fakedrives
  4055                                  		; 20/12/2022
  4056                                  		; ds = cs
  4057 0000181C FE06[7800]              		inc	byte [single]
  4058                                  		;inc	byte [cs:single] ; remember this
  4059                                  notsingle:	
  4060                                  		; 20/12/2022			
  4061                                  		;inc	ax		; ax has number	of drives, 2-4
  4062                                  		;			; is also 0 indexed boot drive if we
  4063                                  		;			; booted off hard file
  4064                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4065                                  		; 20/12/2022
  4066 00001820 FEC1                    		inc	cl	; cl >= 2
  4067                                  
  4068                                  ; 16/10/2022
  4069                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4070                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4071                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4072                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4073                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4074                                  SEC9	EQU	522h	; address of disk parameters
  4075                                  CHROUT	EQU	29h
  4076                                  LSTDRV	EQU     504h
  4077                                  
  4078                                  ; determine whether we booted from floppy or hard disk...
  4079                                  
  4080                                  		; 20/12/2022
  4081 00001822 88C8                    		mov	al, cl	; 26/05/2019
  4082                                  
  4083 00001824 F6C280                  		test	dl, 80h		; boot from floppy ?
  4084 00001827 7502                    		jnz	short gothrd	; no.
  4085 00001829 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4086                                  gothrd:					
  4087                                  
  4088                                  ; MSDOS 6.0
  4089                                  ;   ax = 0-based drive we booted from
  4090                                  ;   bios_l, bios_h set.
  4091                                  ;   cl = number of floppies including fake one
  4092                                  ;   ch = media byte
  4093                                  
  4094                                  ; Retro DOS 4.0 - 27/12/2018 
  4095                                  ;  (from Retro DOS v2.0 boot sector)
  4096                                  ;   dl = int 13 drive number we booted from
  4097                                  ;   dh = media byte
  4098                                  
  4099                                  		; 20/12/2022
  4100 0000182B 88F5                    		mov	ch, dh		; 01/07/2018
  4101                                  
  4102                                  		; cl = number of floppies
  4103                                  		; ch = media byte
  4104                                  
  4105                                  		; set up local stack
  4106                                  
  4107                                  		; 20/12/2022
  4108                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4109                                  					; bios_l, bios_h set.
  4110                                  					; cl = number of floppies including fake one
  4111                                  					; ch = media byte
  4112                                  		; 20/12/2022
  4113                                  		; es = ds = cs
  4114                                  		; ss = 0
  4115                                  		; sp = 700h
  4116                                  
  4117                                  		; 20/12/2022
  4118                                  		;cli
  4119                                  		;mov	ss, dx		; set stack segment and stack pointer
  4120                                  		;mov	sp, 700h
  4121                                  		;sti
  4122                                  
  4123 0000182D 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4124                                  		
  4125 0000182E 88EC                    		mov	ah, ch		; FAT ID to AH
  4126 00001830 50                      		push	ax ; (**)	; save boot drive number and media byte
  4127                                  		
  4128                                  ; let model_byte, secondary_model_byte be set here!!!
  4129                                  
  4130 00001831 B4C0                    		mov	ah, 0C0h
  4131 00001833 CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4132 00001835 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4133 00001837 80FC00                  		cmp	ah, 0
  4134 0000183A 7510                    		jnz	short no_rom_system_conf
  4135                                  
  4136                                  ;		; 20/12/2022
  4137                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4138                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4139                                  ;
  4140                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4141                                  ;
  4142                                  ;		on return:
  4143                                  ;		CF = 0 if successful
  4144                                  ;		   = 1 if error
  4145                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4146                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4147                                  ;
  4148                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4149                                  ;
  4150                                  ;		Offset Size	     Description
  4151                                  ;
  4152                                  ;		  00   word   length of descriptor (8 minimum)
  4153                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4154                                  ;		  03   byte   secondary model byte
  4155                                  ;		  04   byte   BIOS revision level (zero based)
  4156                                  ;		  05   byte   feature information, see below
  4157                                  ;		  06   dword  reserved
  4158                                  
  4159                                  		; 20/12/2022
  4160                                  		; ds = cs
  4161 0000183C 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4162 00001840 A2[3E06]                		mov	[model_byte], al
  4163                                  		;mov	[cs:model_byte], al
  4164                                  					; get/save model byte
  4165 00001843 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4166 00001847 A2[3F06]                		mov	[secondary_model_byte], al
  4167                                  		;mov	[cs:secondary_model_byte], al
  4168                                  					; get/save secondary model byte
  4169 0000184A EB0C                    		jmp	short turn_timer_on
  4170                                  ;-----------------------------------------------------------------------------
  4171                                  
  4172                                  no_rom_system_conf:			
  4173 0000184C BEFFFF                  		mov	si, 0FFFFh
  4174 0000184F 8EC6                    		mov	es, si
  4175                                  		; 20/12/2022
  4176 00001851 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4177 00001855 A2[3E06]                		mov	[model_byte], al
  4178                                  		;mov	[cs:model_byte], al ; save model byte
  4179                                  turn_timer_on:				
  4180 00001858 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4181 0000185A E620                    		out	20h, al		; Interrupt controller,	8259A.
  4182                                  					; AKPORT
  4183                                  
  4184                                  ; some olivetti m24 machines have an 8530 serial communications
  4185                                  ; chip installed at io address 50h and 52h. if we're running
  4186                                  ; on one of those, we must inhibit the normal aux port initialization
  4187                                  
  4188                                  		; 20/12/2022
  4189                                  		; ds = cs
  4190 0000185C 803E[3E06]00            		cmp	byte [model_byte], 0
  4191                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4192 00001861 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4193                                  					; (except olivetti m24)
  4194 00001863 E466                    		in	al, 66h		; is 8530 installed?
  4195 00001865 A820                    		test	al, 20h
  4196 00001867 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4197 00001869 B00F                    		mov	al, 0Fh		; double check
  4198 0000186B E650                    		out	50h, al
  4199 0000186D E450                    		in	al, 50h
  4200 0000186F A801                    		test	al, 1		; this test was	copied from olivetti
  4201 00001871 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4202                                  
  4203                                  not_olivetti_m24:
  4204 00001873 B003                    		mov	al, 3		; init com4
  4205 00001875 E85D08                  		call	aux_init
  4206 00001878 B002                    		mov	al, 2		; init com3
  4207 0000187A E85808                  		call	aux_init
  4208 0000187D B001                    		mov	al, 1		; init com2
  4209 0000187F E85308                  		call	aux_init
  4210 00001882 30C0                    		xor	al, al		; init com1
  4211 00001884 E84E08                  		call	aux_init
  4212                                  
  4213                                  skip_aux_port_init:			
  4214 00001887 B002                    		mov	al, 2		; init lpt3
  4215 00001889 E84108                  		call	print_init
  4216 0000188C B001                    		mov	al, 1		; init lpt2
  4217 0000188E E83C08                  		call	print_init
  4218 00001891 30C0                    		xor	al, al		; init lpt1
  4219 00001893 E83708                  		call	print_init
  4220                                  
  4221 00001896 31D2                    		xor	dx, dx	; 0
  4222 00001898 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4223 0000189A 8EC2                    		mov	es, dx
  4224 0000189C 31C0                    		xor	ax, ax
  4225                                  		; 16/10/2022
  4226 0000189E BF3405                  		mov	di, INITSPOT	; 0534h
  4227                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4228                                  					; IBM wants 4 zeros here
  4229 000018A1 AB                      		stosw
  4230 000018A2 AB                      		stosw
  4231 000018A3 8CC8                    		mov	ax, cs		; fetch	segment
  4232 000018A5 C7066C00[EE06]          		mov	word [BRKADR], cbreak
  4233                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4234                                  					; break	entry point
  4235 000018AB A36E00                  		mov	[BRKADR+2], ax		
  4236                                  		;mov	ds:6Eh,	ax	; vector for break
  4237 000018AE C706A400[6207]          		mov	word [CHROUT*4], outchr
  4238                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4239 000018B4 A3A600                  		mov	[CHROUT*4+2], ax
  4240                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4241                                  
  4242 000018B7 BF0400                  		mov	di, 4
  4243 000018BA BB[F406]                		mov	bx, intret ; 19/10/2022
  4244                                  		;mov	bx, offset intret ; intret (cs:intret)
  4245                                  					; will initialize rest of interrupts
  4246 000018BD 93                      		xchg	ax, bx
  4247 000018BE AB                      		stosw			; location 4
  4248 000018BF 93                      		xchg	ax, bx		; cs:
  4249 000018C0 AB                      		stosw			; int 1	; location 6
  4250 000018C1 83C704                  		add	di, 4
  4251 000018C4 93                      		xchg	ax, bx
  4252 000018C5 AB                      		stosw			; location 12
  4253 000018C6 93                      		xchg	ax, bx		; cs:
  4254 000018C7 AB                      		stosw			; int 3	; location 14
  4255 000018C8 93                      		xchg	ax, bx
  4256 000018C9 AB                      		stosw			; location 16
  4257 000018CA 93                      		xchg	ax, bx		; cs:
  4258 000018CB AB                      		stosw			; int 4	; location 18
  4259                                  
  4260                                  
  4261                                  ;		; 20/12/2022
  4262                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4263                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4264                                  ;	
  4265                                  ;		50:00	byte	Print screen status byte
  4266                                  ;				 00 = PrtSc not active,
  4267                                  ;				 01 = PrtSc in progress
  4268                                  ;				 FF = error
  4269                                  ;		50:01  3 bytes	Used by BASIC
  4270                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4271                                  ;		50:05  10bytes	POST work area
  4272                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4273                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4274                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4275                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4276                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4277                                  ;		50:20	word	DOS dynamic storage
  4278                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4279                                  ;		50:30	4bytes	MODE command
  4280                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4281                                  
  4282 000018CC 89160005                		mov	[0500h], dx ; 0
  4283                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4284 000018D0 89160405                		mov	[LSTDRV], dx	; [0504h]
  4285                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4286                                  
  4287                                  ; we need to initialize the cs:motorstartup variable from the disk
  4288                                  ; parameter table at sec9. the offsets in this table are defined in
  4289                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4290                                  
  4291 000018D4 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4292                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4293                                  					; [522h+0Ah]
  4294                                  		; 20/12/2022
  4295                                  		; ds = 0
  4296                                  
  4297 000018D7 2EA2[2601]              		mov	[cs:motorstartup], al
  4298 000018DB 2E803E[3E06]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4299 000018E1 720B                    		jb	short no_diddle	; no
  4300 000018E3 C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4301                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4302                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4303 000018E9 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4304                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4305                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4306                                  no_diddle:				
  4307 000018EE CD12                    		int	12h		; MEMORY SIZE -
  4308                                  					; Return: AX = number of contiguous 1K blocks of memory
  4309 000018F0 B106                    		mov	cl, 6
  4310 000018F2 D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4311                                  		
  4312                                  		; 20/12/2022
  4313                                  		; 03/07/2018 - 27/12/2018
  4314                                  		;pop	cx ; (**)
  4315                                  		;mov	[cs:drvfat], cx
  4316                                  		
  4317 000018F4 50                      		push	ax ; (*)	; save real top	of memory
  4318                                  
  4319                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4320                                  
  4321                                  ;M068 - BEGIN
  4322                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4323                                  
  4324                                  		; 20/12/2022
  4325                                  		; ds = 0
  4326                                  
  4327                                  		;push	ds
  4328                                  		;push	bx		; pushes not required but since this
  4329                                  					; happens to be a last minute change
  4330                                  					; & since it is only init code.
  4331                                  		;xor	bx, bx
  4332                                  		;mov	ds, bx
  4333                                  		
  4334                                  		;mov	bx, ds:0BCh	; [2Fh*4]
  4335 000018F5 8B1EBC00                		mov	bx, [2Fh*4]
  4336                                  		;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4337 000018F9 8E1EBE00                		mov	ds, [2Fh*4+2]
  4338 000018FD 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4339                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4340 00001902 750F                    		jnz	short SkipRPL
  4341 00001904 807F054C                		cmp	byte [bx+5], 'L'
  4342                                  		;cmp	byte ptr [bx+5], 'L'
  4343 00001908 7509                    		jnz	short SkipRPL
  4344 0000190A 89C2                    		mov	dx, ax		; get TOM into DX
  4345 0000190C B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4346 0000190F CD2F                    		int	2Fh		; Get new TOM from any RPL
  4347 00001911 89D0                    		mov	ax, dx
  4348                                  SkipRPL:	
  4349                                  		; 20/12/2022		
  4350                                  		;pop	bx
  4351                                  		;pop	ds
  4352                                  
  4353                                  ;M068 - END
  4354                                  		; 20/12/2022
  4355                                  		; 27/12/2018
  4356 00001913 0E                      		push	cs
  4357 00001914 1F                      		pop	ds
  4358                                  
  4359                                  		; 18/03/2019 - Retro DOS v4.0
  4360                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4361                                  		;mov	[cs:fatloc], ax	; location to read fat
  4362                                  
  4363                                  		; 01/07/2018
  4364                                  		; 08/04/2018
  4365                                  		; 28/03/2018
  4366                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4367 00001915 83E840                  		sub	ax, 64
  4368 00001918 A3[CD16]                		mov	[init_bootseg], ax ; 20/12/2022
  4369                                  		;mov	[cs:init_bootseg], ax
  4370                                  
  4371                                  		; 27/12/2018 - Retro DOS v4.0
  4372                                  		;pop	ax ; (*)	; get back real top of memory
  4373 0000191B 5A                      		pop	dx ; (*)
  4374                                  
  4375                                  		; 20/12/2022
  4376                                  		; 27/12/2018
  4377 0000191C 59                      		pop	cx ; (**)
  4378 0000191D 890E[CA16]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4379                                  
  4380                                  		; 20/12/2022
  4381                                  
  4382                                  		;mov	dx, 46Dh	; SYSINIT segment
  4383 00001921 BA3A04                  		mov	dx, SYSINITSEG	; 17/10/2022
  4384 00001924 8EDA                    		mov	ds, dx
  4385                                  
  4386                                  ; set pointer to resident device driver chain
  4387                                  
  4388                                  		; 17/10/2022
  4389 00001926 C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4390                                  		;mov	word [273h], res_dev_list
  4391                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4392                                  					; [SYSINIT+DEVICE_LIST]
  4393 0000192C 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4394                                  		;mov	[275h], cs
  4395                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4396                                  
  4397 00001930 A3[9202]                		mov	[MEMORYSIZE], ax
  4398                                  		;mov	[292h], ax
  4399                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4400                                  
  4401 00001933 FEC1                    		inc	cl
  4402 00001935 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4403                                  		;mov	[296h], cl
  4404                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4405                                  
  4406 00001939 C706[7102]C507          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4407                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4408                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4409                                  					; dos_load_seg
  4410                                  
  4411                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4412                                  ; printer cards. we initialize this value to point to an iret only if
  4413                                  ;
  4414                                  ; 1) the original segment points to storage inside valid ram.
  4415                                  ;
  4416                                  ; 2) the original segment is 0F000:xxxx
  4417                                  
  4418                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4419                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4420                                  		;mov	es, ax
  4421                                  		; 20/12/2022
  4422                                  		;push	ds ; SYSINITSEG
  4423                                  		;pop	es
  4424 0000193F 8EC2                    		mov	es, dx ; SYSINITSEG
  4425 00001941 31C0                    		xor	ax, ax ; 0
  4426 00001943 8ED8                    		mov	ds, ax		; segment 0
  4427                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4428 00001945 A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4429                                  		; 18/10/2022
  4430 00001948 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4431                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  4432 0000194D 7605                    		jbe	short resetintf
  4433 0000194F 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4434 00001952 750A                    		jnz	short keepintf
  4435                                  resetintf:	
  4436 00001954 C7063C00[F406]          		mov	word [0Fh*4], intret			
  4437                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4438 0000195A 8C0E3E00                		mov	word [0Fh*4+2], cs
  4439                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4440                                  keepintf:				
  4441                                  ; end important
  4442                                  
  4443                                  ; 17/10/2022
  4444                                  ; 28/12/2018 - Retro DOS v4.0
  4445                                  
  4446                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4447                                  ;
  4448                                  ; we will check if the system has ibm extended keyboard by
  4449                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4450                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4451                                  ; for the extended keyboard function. use cx as the temporary register.
  4452                                  
  4453                                  		; 20/12/2022
  4454                                  		; ds = 0
  4455                                  		;xor	cx, cx
  4456                                  		;mov	ds, cx
  4457                                  
  4458 0000195E 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4459                                  
  4460                                  		; 20/12/2022
  4461                                  		; 20/03/2019
  4462 00001962 0E                      		push	cs
  4463 00001963 1F                      		pop	ds
  4464                                  
  4465                                  		;test	cl, 00010000b ; 10h
  4466 00001964 F6C110                  		test	cl, 10h		; extended keyboard ?
  4467 00001967 740A                    		jz	short org_key	; no, original keyboard
  4468                                  
  4469                                  		; 20/12/2022
  4470                                  		;  ds = cs
  4471 00001969 C606[E504]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4472 0000196E C606[E604]11            		mov	byte [keysts_func], 11h
  4473                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4474                                  		;mov	byte [cs:keysts_func], 11h
  4475                                  					; change for extended keyboard functions
  4476                                  org_key:
  4477                                  
  4478                                  ; 02/06/2018 - Retro DOS v3.0
  4479                                  
  4480                                  ;**************************************************************
  4481                                  ;	will initialize the number of drives
  4482                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4483                                  ;	the indications are as follows:
  4484                                  ;
  4485                                  ;	bits	7	6	drives
  4486                                  ;		0	0	1
  4487                                  ;		0	1	2
  4488                                  ;		1	0	3
  4489                                  ;		1	1	4
  4490                                  ;**************************************************************
  4491                                  		
  4492                                  		; 20/12/2022
  4493                                  		; ds = cs		
  4494                                  		;push	cs
  4495                                  		;pop	ds
  4496                                  		; 21/12/2022
  4497                                  		;push	cs
  4498                                  		;pop	es
  4499                                  
  4500 00001973 E8A008                  		call	cmos_clock_read	; If cmos clock	exists,
  4501                                  					; then set the system time according to	that.
  4502                                  					; also,	reset the cmos clock rate.
  4503                                  		; 18/10/2022
  4504                                  		;mov	word ptr BData_start, offset harddrv ;
  4505                                  					; set up pointer to hdrive
  4506                                  		; 02/10/2022
  4507 00001976 C706[0000][1609]        		mov	word [hdrv_pat], harddrv 
  4508                                  		
  4509                                  		; 20/12/2022
  4510                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4511 0000197C 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4512 0000197D 30E4                    		xor	ah, ah		; chuck	fat id byte
  4513 0000197F A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4514 00001982 A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4515 00001985 D1E0                    		shl	ax, 1
  4516 00001987 0106[4417]              		add	[last_dskdrv_table], ax
  4517                                  
  4518 0000198B B280                    		mov	dl, 80h
  4519 0000198D B408                    		mov	ah, 8
  4520 0000198F CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4521                                  					; DL = drive number
  4522                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4523                                  					; DL = number of consecutive drives
  4524                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4525 00001991 7204                    		jc	short enddrv
  4526 00001993 8816[4317]              		mov	[hnum], dl	; save number of hard disk drives
  4527                                  enddrv:
  4528                                  		; 21/12/2022
  4529 00001997 0E                      		push	cs
  4530 00001998 07                      		pop	es
  4531                                  
  4532                                  ; scan the list of drives to determine their type. we have three flavors of
  4533                                  ; diskette drives:
  4534                                  ;
  4535                                  ;   48tpi drives    we do nothing special for them
  4536                                  ;   96tpi drives    mark the fact that they have changeline support.
  4537                                  ;   3.5"  drives    mark changeline support and small.
  4538                                  ;
  4539                                  ; the following code uses registers for certain values:
  4540                                  ;
  4541                                  ;   dl - physical drive
  4542                                  ;   ds:di - points to current bds
  4543                                  ;   cx - flag bits for bds
  4544                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4545                                  					
  4546 00001999 30D2                    		xor	dl, dl
  4547                                  
  4548                                  		; 20/12/2022
  4549                                  		; ds = cs
  4550                                  		; 17/06/2018		 
  4551                                  		;push	cs
  4552                                  		;pop	ds
  4553                                  
  4554 0000199B C606[2C01]09            		mov	byte [eot], 9
  4555 000019A0 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4556                                  					; to set aside two bdss	for the	two fake floppy	drives
  4557                                  
  4558                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4559                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4560                                  
  4561                                  ; check to see if we are faking floppy drives. if not we don't
  4562                                  ; do anything special. if we are faking floppy drives we need
  4563                                  ; to set aside two bdss for the two fake floppy drives. we
  4564                                  ; don't need to initalise any fields though. so starting at start_bds
  4565                                  ; use the link field in the bds structure to go to the second bds
  4566                                  ; in the list and initalise it's link field to -1 to set the end of
  4567                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4568                                  ; the bds for harddrives.
  4569                                  
  4570 000019A3 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  4571 000019A8 750B                    		jnz	short loop_drive
  4572 000019AA 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4573                                  					; di <-	first bds link
  4574 000019AC 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4575                                  					; di <-	second bds link
  4576 000019AE C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4577 000019B2 E90F01                  		jmp	dohard		; allocate/initialise bds for harddrives
  4578                                  ;-----------------------------------------------------------------------------
  4579                                  
  4580                                  loop_drive:				
  4581 000019B5 3A16[7500]              		cmp	dl, [drvmax]
  4582 000019B9 7203                    		jb	short got_more
  4583 000019BB E90201                  		jmp	done_drives
  4584                                  ;-----------------------------------------------------------------------------
  4585                                  
  4586                                  got_more:				
  4587 000019BE 31C9                    		xor	cx, cx		; zero all flags
  4588 000019C0 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4589                                  					; get next bds
  4590 000019C2 B600                    		mov	dh, 0 ; ff48tpi
  4591                                  					; set form factor to 48	tpi
  4592 000019C4 C606[D216]28            		mov	byte [num_cyln], 40 ; 40 tracks per	side
  4593                                  		
  4594                                  		; 20/12/2022
  4595                                  		;push	ds ; 11/05/2019	
  4596 000019C9 57                      		push	di
  4597 000019CA 52                      		push	dx
  4598 000019CB 51                      		push	cx
  4599 000019CC 06                      		push	es ; ((*)) ; 20/12/2022	
  4600                                  		
  4601 000019CD B408                    		mov	ah, 8
  4602 000019CF CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4603                                  					; DL = drive number
  4604                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4605                                  					; DL = number of consecutive drives
  4606                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4607 000019D1 7276                    		jc	short noparmsfromrom
  4608                                  
  4609                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4610                                  ; in this case, we are going to put bogus informations to bds table.
  4611                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4612                                  ; they are calculated at the later time. this is just for the diagnostic
  4613                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4614                                  ; this should only happen with drive b.
  4615                                  
  4616 000019D3 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4617 000019D6 7505                    		jnz	short pfr_ok
  4618                                  
  4619                                  		;mov	ch, 39		; rom gave wrong info.
  4620                                  		;mov	cl, 9		; let's default to 360k.
  4621                                  		; 20/12/2022
  4622 000019D8 B90927                  		mov	cx, 2709h
  4623                                  
  4624 000019DB B601                    		mov	dh, 1
  4625                                  pfr_ok:					
  4626 000019DD FEC6                    		inc	dh		; make number of heads 1-based
  4627 000019DF FEC5                    		inc	ch		; make number of cylinders 1-based
  4628 000019E1 8836[D016]              		mov	[num_heads], dh	; save parms returned by rom
  4629 000019E5 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4630 000019E8 880E[D116]              		mov	[sec_trk], cl
  4631 000019EC 882E[D216]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4632                                  
  4633                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4634                                  
  4635 000019F0 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4636                                  		;jbe	short eot_ok
  4637                                  		; 09/12/2022
  4638                                  		;jne	short eotok  ; wrong ! 14/08/2023
  4639                                  		; 14/08/2023
  4640 000019F4 7604                    		jbe	short eotok
  4641 000019F6 880E[2C01]              		mov	[eot], cl
  4642                                  ;eot_ok:					
  4643                                  eotok:
  4644                                  		; 20/12/2022
  4645 000019FA 07                      		pop	es ; ((*)) es = cs = ds		
  4646 000019FB 59                      		pop	cx
  4647 000019FC 5A                      		pop	dx
  4648 000019FD 5F                      		pop	di
  4649                                  		;pop	ds ; 20/12/2022
  4650                                  
  4651                                  ; Check	for presence of	changeline
  4652                                  
  4653 000019FE B415                    		mov	ah, 15h
  4654 00001A00 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4655                                  					; DL = drive ID
  4656                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4657                                  					; CX:DX	= number of sectors on the media
  4658 00001A02 720D                    		jc	short changeline_done
  4659 00001A04 80FC02                  		cmp	ah, 2		; check	for presence of	changeline
  4660 00001A07 7508                    		jnz	short changeline_done
  4661                                  
  4662                                  ; we have a drive with change line support.
  4663                                  
  4664 00001A09 80C902                  		or	cl, 2		; fchangeline
  4665                                  					; signal type
  4666 00001A0C C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4667                                  
  4668                                  ; we now try to set up the form factor for the types of media that we know
  4669                                  ; and can recognise. for the rest, we set the form factor as "other".
  4670                                  
  4671                                  changeline_done:
  4672                                  
  4673                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  4674                                  			
  4675 00001A11 803E[D216]28            		cmp	byte [num_cyln], 40
  4676 00001A16 750B                    		jnz	short try_80
  4677 00001A18 803E[D116]09            		cmp	byte [sec_trk], 9
  4678 00001A1D 7653                    		jbe	short nextdrive
  4679                                  gotother:				
  4680 00001A1F B607                    		mov	dh, 7 ; ffOther ; we have a "strange" medium 
  4681 00001A21 EB4F                    		jmp	short nextdrive
  4682                                  ;-----------------------------------------------------------------------------
  4683                                  
  4684                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4685                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4686                                  
  4687                                  try_80:					
  4688 00001A23 803E[D216]50            		cmp	byte [num_cyln], 80
  4689 00001A28 75F5                    		jnz	short gotother
  4690 00001A2A B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4691 00001A2C 803E[D116]24            		cmp	byte [sec_trk], 36 ; is it	?
  4692 00001A31 743F                    		jz	short nextdrive	; yeah,	go update
  4693                                  
  4694                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4695                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4696                                  		;mov	dh, ff144
  4697                                  		;cmp	byte [sec_trk], 18
  4698                                  		;je	short nextdrive
  4699                                  
  4700 00001A33 803E[D116]0F            		cmp	byte [sec_trk], 15
  4701 00001A38 740B                    		jz	short got96
  4702                                  		
  4703 00001A3A 803E[D116]09            		cmp	byte [sec_trk], 9
  4704 00001A3F 75DE                    		jnz	short gotother
  4705                                  		
  4706 00001A41 B602                    		mov	dh, 2 ; ffSmall
  4707 00001A43 EB2D                    		jmp	short nextdrive
  4708                                  ; ----------------------------------------------------------------------------
  4709                                  
  4710                                  got96:					
  4711 00001A45 B601                    		mov	dh, 1 ; ff96tpi
  4712 00001A47 EB29                    		jmp	short nextdrive
  4713                                  ; ----------------------------------------------------------------------------
  4714                                  
  4715                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4716                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4717                                  
  4718                                  noparmsfromrom:				
  4719                                  		; 20/12/2022
  4720 00001A49 07                      		pop	es ; ((*)) 
  4721 00001A4A 59                      		pop	cx
  4722 00001A4B 5A                      		pop	dx
  4723 00001A4C 5F                      		pop	di
  4724                                  		;pop	ds ; 20/12/2022
  4725                                  		
  4726 00001A4D B415                    		mov	ah, 15h
  4727 00001A4F CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4728                                  					; DL = drive ID
  4729                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4730                                  					; CX:DX	= number of sectors on the media
  4731 00001A51 721F                    		jc	short nextdrive
  4732                                  		
  4733 00001A53 80FC02                  		cmp	ah, 2		; is there changeline?
  4734 00001A56 751A                    		jnz	short nextdrive
  4735                                  
  4736 00001A58 80C902                  		or	cl, 2 ; fchangeline
  4737 00001A5B C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi drives
  4738 00001A60 C606[D216]50            		mov	byte [num_cyln], 80
  4739 00001A65 B601                    		mov	dh, 1 ; ff96tpi 
  4740 00001A67 B00F                    		mov	al, 15
  4741 00001A69 3A06[2C01]              		cmp	al, [eot]
  4742 00001A6D 7603                    		jbe	short nextdrive ; eot_ok2
  4743 00001A6F A2[2C01]                		mov	[eot], al
  4744                                  ; ----------------------------------------------------------------------------
  4745                                  
  4746                                  ;eot_ok2:
  4747                                  nextdrive:				
  4748 00001A72 80C920                  		or	cl, 20h	; fi_own_physical
  4749                                  					; set this true	for all	drives
  4750 00001A75 88D7                    		mov	bh, dl		; save int13 drive number
  4751                                  
  4752                                  ; we need to do special things if we have a single drive system and are setting
  4753                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4754                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4755                                  ; we detect the presence of this situation by examining the flag single for the
  4756                                  ; value 2.
  4757 00001A77 803E[7800]02            		cmp	byte [single], 2
  4758 00001A7C 7505                    		jnz	short not_special
  4759 00001A7E FECF                    		dec	bh		; int13	drive number same for logical drive
  4760 00001A80 80F120                  		xor	cl, 20h	; fi_own_physical
  4761                                  					; reset	ownership flag for logical drive
  4762                                  not_special:
  4763                                  
  4764                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4765                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4766                                  ; form factor is of type "ffother".
  4767                                  				
  4768 00001A83 31C0                    		xor	ax, ax		; fill BDS for drive
  4769 00001A85 A0[D016]                		mov	al, [num_heads]
  4770 00001A88 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4771 00001A8B A0[D116]                		mov	al, [sec_trk]
  4772 00001A8E 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4773 00001A91 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4774 00001A94 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4775 00001A97 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4776 00001A9A 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4777 00001A9D 8A1E[D216]              		mov	bl, [num_cyln]
  4778 00001AA1 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4779 00001AA4 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4780 00001AA9 7511                    		jnz	short no_single
  4781 00001AAB C606[7800]02            		mov	byte [single], 2 ; Don't forget we have
  4782                                  					; single drive system
  4783                                  		; 18/12/2022
  4784 00001AB0 80C910                  		or	cl, 10h
  4785                                  		;or	cx, 10h	; fi_am_mult
  4786                                  					; set that this	is one of several drives
  4787 00001AB3 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4788                                  					; save flags
  4789 00001AB6 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4790                                  					; move to next BDS in list
  4791 00001AB8 FEC2                    		inc	dl		; add a	number
  4792 00001ABA EBB6                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4793                                  ; ----------------------------------------------------------------------------
  4794                                  
  4795                                  no_single:				
  4796                                  		;inc	dl
  4797                                  		; 18/12/2022
  4798 00001ABC 42                      		inc	dx
  4799 00001ABD E9F5FE                  		jmp	loop_drive
  4800                                  ; ----------------------------------------------------------------------------
  4801                                  
  4802                                  done_drives:	
  4803                                  		;mov	word [di+BDS.link], -1			
  4804 00001AC0 C705FFFF                		mov	word [di], -1	; set link to null
  4805                                  
  4806                                  ; set up all the hard drives in	the system
  4807                                  
  4808                                  		; 20/12/2022
  4809                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  4810                                  dohard:					
  4811 00001AC4 8A36[4317]              		mov	dh, [hnum]
  4812 00001AC8 08F6                    		or	dh, dh		; done if no hardfiles
  4813 00001ACA 745B                    		jz	short static_configure
  4814 00001ACC B280                    		mov	dl, 80h
  4815                                  dohard1:				
  4816 00001ACE 52                      		push	dx
  4817 00001ACF 8B3E[4617]              		mov	di, [end_of_bdss]
  4818 00001AD3 8A1E[7500]              		mov	bl, [drvmax]
  4819 00001AD7 B700                    		mov	bh, 0		; first	primary	partition (or active)
  4820 00001AD9 E8C801                  		call	sethard
  4821 00001ADC 7208                    		jb	short hardfile_err
  4822 00001ADE E8EB06                  		call	dmax_check	; error	if already 26 drives
  4823 00001AE1 7303                    		jnb	short hardfile_err
  4824 00001AE3 E8FB06                  		call	xinstall_bds	; insert new bds into linked list
  4825                                  hardfile_err:				
  4826 00001AE6 5A                      		pop	dx
  4827 00001AE7 FEC2                    		inc	dl		; next hard drive
  4828 00001AE9 FECE                    		dec	dh
  4829 00001AEB 75E1                    		jnz	short dohard1
  4830                                  
  4831                                  ; end of physical drive	initialization
  4832                                  
  4833                                  ; *** do not change the position of the following statement.
  4834                                  ; *** domini routine will use [drvmax] value for the start of the logical
  4835                                  ; *** drive number of mini disk(s).
  4836                                  					
  4837 00001AED E8EE05                  		call	domini		; for setting up mini disks, if found
  4838                                  
  4839                                  ; -- begin added section
  4840                                  
  4841 00001AF0 8A36[4317]              		mov	dh, [hnum]	; we already know this is >0
  4842 00001AF4 B280                    		mov	dl, 80h
  4843                                  dohardx1:				
  4844 00001AF6 B701                    		mov	bh, 1		; do all subsequent primary partitions
  4845                                  dohardx2:				
  4846 00001AF8 52                      		push	dx
  4847 00001AF9 53                      		push	bx
  4848 00001AFA 8B3E[4617]              		mov	di, [end_of_bdss]
  4849 00001AFE 8A1E[7500]              		mov	bl, [drvmax]
  4850 00001B02 E89F01                  		call	sethard
  4851 00001B05 720E                    		jb	short dohardx4	; move to next hardfile	if error
  4852 00001B07 E8C206                  		call	dmax_check	; make sure <=26 drives
  4853 00001B0A 7309                    		jnb	short dohardx4	; skip if error
  4854 00001B0C E8D206                  		call	xinstall_bds	; insert new bds into linked list
  4855 00001B0F 5B                      		pop	bx		; get partition	number
  4856 00001B10 5A                      		pop	dx		; restore physical drive counts
  4857 00001B11 FEC7                    		inc	bh
  4858 00001B13 EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  4859                                  ; ----------------------------------------------------------------------------
  4860                                  
  4861                                  dohardx4:				
  4862 00001B15 5B                      		pop	bx		; unjunk partition number from stack
  4863 00001B16 5A                      		pop	dx		; restore physical drive counts
  4864 00001B17 FEC2                    		inc	dl		; next hard drive
  4865 00001B19 FECE                    		dec	dh
  4866 00001B1B 75D9                    		jnz	short dohardx1
  4867                                  
  4868                                  ; -- end changed section
  4869                                  
  4870                                  ;******************************************************************************
  4871                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  4872                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  4873                                  ; than two diskette drives
  4874                                  ;
  4875                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  4876                                  ;		as usual and then rescan the bds chain to adjust the  drive
  4877                                  ;		letters. to do this, scan for disk drives and assign logical
  4878                                  ;		drive number starting from 2 and then rescan diskette drives
  4879                                  ;		and assign next to the last logical drive number of last disk
  4880                                  ;		drive to the 3rd and 4th diskette drives.
  4881                                  ;******************************************************************************
  4882                                  
  4883 00001B1D 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  4884                                  		;jbe	short static_configure ; no - no need for remapping
  4885 00001B22 7603                    		jbe	short no_remap
  4886 00001B24 E8F900                  		call	remap		; remap	bds chain to adjust driver letters
  4887                                  no_remap:
  4888                                  
  4889                                  ; End of drive initialization.
  4890                                  
  4891                                  ; ----------------------------------------------------------------------------
  4892                                  
  4893                                  ;we now decide, based on the configurations available so far, what
  4894                                  ;code or data we need to keep as a stay resident code. the following table
  4895                                  ;shows the configurations under consideration. they are listed in the order
  4896                                  ;of their current position memory.
  4897                                  ;
  4898                                  ;configuration will be done in two ways:
  4899                                  ;
  4900                                  ;first, we are going to set "static configuration". static configuration will
  4901                                  ;consider from basic configuration to endof96tpi configuration. the result
  4902                                  ;of static configuration will be the address the dynamic configuration will
  4903                                  ;use to start with.
  4904                                  ;
  4905                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  4906                                  ;involves possible relocation of code or data. dynamic configuration routine
  4907                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  4908                                  ;code individually. after these operation, [dosdatasg] will be set.
  4909                                  ;this will be the place sysinit routine will relocate msdos module for good.
  4910                                  
  4911                                  ; -- begin changed section
  4912                                  ;
  4913                                  ;   1.	 basic configuration for msbio (endfloppy)
  4914                                  ;   2.   end96tpi	; a system that supports "change line error"
  4915                                  ;   3.	 end of bdss	; end of bdss for hard disks
  4916                                  ;   4.	 endatrom	;some of at rom fix module.
  4917                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  4918                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  4919                                  ;
  4920                                  
  4921                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  4922                                  
  4923                                  static_configure:			
  4924 00001B27 8B3E[4617]              		mov	di, [end_of_bdss]
  4925 00001B2B 81FF[1709]              		cmp	di, bdss	; 19/10/2022
  4926                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  4927 00001B2F 750D                    		jnz	short dynamic_configure	; that's the end, then
  4928                                  		; 18/10/2022
  4929 00001B31 BF[1709]                		mov	di, end96tpi
  4930                                  		;mov	di, offset harddrv ; end96tpi
  4931                                  					; keep everything up to	end96tpi
  4932 00001B34 803E[7700]00            		cmp	byte [fhave96], 0
  4933 00001B39 7503                    		jnz	short dynamic_configure
  4934                                  		
  4935 00001B3B BF[FC08]                		mov	di, endfloppy
  4936                                  dynamic_configure:
  4937                                  		; 20/12/2022
  4938                                  		;push	cs
  4939                                  		;pop	es
  4940                                  		
  4941 00001B3E FC                      		cld			; clear direction
  4942                                  
  4943                                  ; -- end changed section
  4944                                  
  4945                                  		; 20/12/2022
  4946                                  		; ds = cs <> es
  4947                                  		; ss = 0
  4948                                  		; sp = 700h
  4949                                  
  4950 00001B3F 803E[3E06]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  4951 00001B44 7577                    		jnz	short checkcmosclock
  4952 00001B46 803E[4317]00            		cmp	byte [hnum], 0	; No hard file?
  4953 00001B4B 7470                    		jz	short checkcmosclock
  4954 00001B4D 97                      		xchg	ax, di		; save allocation pointer in ax
  4955 00001B4E BE00F0                  		mov	si, 0F000h
  4956 00001B51 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  4957 00001B53 BE[4C17]                		mov	si, bios_date	; "01/10/84"
  4958 00001B56 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  4959 00001B59 B90900                  		mov	cx, 9		; bdate_l
  4960                                  					; Only patch ROM for bios 01/10/84
  4961 00001B5C F3A6                    		repe cmpsb		; check	for date + zero	on end
  4962 00001B5E 97                      		xchg	ax, di		; restore allocation pointer
  4963                                  
  4964                                  ; M015 -- begin changes
  4965                                  
  4966                                  		;jnz	short checkcmosclock
  4967                                  		; 02/10/2022
  4968 00001B5F 7508                    		jnz	short checkcompaqbug
  4969                                  
  4970                                  ; install at rom fix
  4971                                  
  4972                                  		; 19/10/2022
  4973                                  		;mov	cx, offset endatrom
  4974 00001B61 B9[0A14]                		mov	cx, endatrom
  4975                                  		;mov	si, offset ibm_disk_io
  4976 00001B64 BE[DC12]                		mov	si, ibm_disk_io
  4977 00001B67 EB46                    		jmp	short install_int13_patch
  4978                                  ; ----------------------------------------------------------------------------
  4979                                  
  4980                                  ; M065 -- begin changes
  4981                                  ;
  4982                                  ; On certain systems with Western Digital disk controllers, the
  4983                                  ; following detection scheme caused an unpredictable and serious
  4984                                  ; failure. In particular, they've implemented a nonstandard
  4985                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  4986                                  ; what happens to be at es:[bx] and other memory locations indexed
  4987                                  ; off of it.
  4988                                  ;
  4989                                  ; Compaq was unable to tell us exactly which kind of systems have
  4990                                  ; the bug, except that they guarantee that the bug was fixed in
  4991                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  4992                                  ; string, and then look for date codes before 08/04/86 to decide
  4993                                  ; when to install the hook.
  4994                                  
  4995                                  ;checkcmosclock:
  4996                                  ; 02/10/2022				
  4997                                  checkcompaqbug:
  4998                                  		; 20/12/2022
  4999                                  		; es = 0F000h
  5000                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  5001                                  		;mov	es, ax
  5002                                  
  5003                                  		; 19/10/2022
  5004 00001B69 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5005                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5006 00001B70 754B                    		jnz	short not_compaq_patch
  5007 00001B72 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5008                                  		;cmp	word ptr es:0FFECh, 'PM'
  5009 00001B79 7542                    		jnz	short not_compaq_patch
  5010 00001B7B 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5011                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5012 00001B82 7539                    		jnz	short not_compaq_patch
  5013                                  
  5014                                  ; We're running on a COMPAQ. Now look at the date code.
  5015                                  
  5016 00001B84 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5017 00001B88 86E0                    		xchg	ah, al
  5018 00001B8A 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5019                                  		;cmp	ax, '86'        ; 3836h
  5020                                  					; is it	86?
  5021 00001B8D 772E                    		ja	short not_compaq_patch
  5022 00001B8F 7218                    		jb	short do_compaq_patch
  5023 00001B91 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5024 00001B95 86E0                    		xchg	ah, al
  5025 00001B97 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5026                                  		;cmp	ax, '08'        ; 3038h
  5027                                  					; is it	08?
  5028 00001B9A 7721                    		ja	short not_compaq_patch
  5029 00001B9C 720B                    		jb	short do_compaq_patch
  5030 00001B9E 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5031 00001BA2 86E0                    		xchg	ah, al
  5032 00001BA4 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5033                                  		;cmp	ax, '04'        ; 3034h
  5034                                  					; is it	04?
  5035 00001BA7 7314                    		jnb	short not_compaq_patch
  5036                                  
  5037                                  do_compaq_patch:			
  5038 00001BA9 B9[2B14]                		mov	cx, end_compaq_i13hook
  5039 00001BAC BE[0A14]                		mov	si, endatrom
  5040                                  
  5041                                  install_int13_patch:			
  5042 00001BAF 0E                      		push	cs
  5043 00001BB0 07                      		pop	es
  5044                                  		; 18/10/2022
  5045 00001BB1 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5046 00001BB5 8C0E[B600]              		mov	[Orig13+2], cs
  5047 00001BB9 29F1                    		sub	cx, si		; size of rom fix module
  5048 00001BBB F3A4                    		rep movsb		; relocate it
  5049                                  
  5050                                  ; M065 -- end changes
  5051                                  
  5052                                  ; ----------------------------------------------------------------------------
  5053                                  not_compaq_patch:			; M065
  5054                                  		; 17/10/2022
  5055                                  checkcmosclock:	
  5056                                  		; 18/10/2022		
  5057 00001BBD 0E                      		push	cs
  5058 00001BBE 07                      		pop	es
  5059                                  
  5060                                  		; 20/12/2022
  5061                                  		; ds = cs = es
  5062                                  		; ss = 0
  5063                                  		; sp = 700h
  5064                                  
  5065 00001BBF 803E[F304]01            		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5066 00001BC4 7518                    		jnz	short checkk09	; no
  5067                                  
  5068 00001BC6 893E[0605]              		mov	word [daycnttoday], di
  5069                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5070 00001BCA B9D100                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5071 00001BCD BE[2C14]                		mov	si, daycnt_to_day
  5072 00001BD0 F3A4                    		rep movsb
  5073 00001BD2 893E[0205]              		mov	word [bintobcd], di
  5074                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5075                                  					; let original segment stay
  5076 00001BD6 B90B00                  		mov	cx, 11	; endcmosclockset - bin_to_bcd
  5077 00001BD9 BE[FD14]                		mov	si, bin_to_bcd
  5078 00001BDC F3A4                    		rep movsb
  5079                                  checkk09:				
  5080 00001BDE 57                      		push	di ; ? ; save ? ; 20/12/2022
  5081 00001BDF B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5082 00001BE2 B301                    		mov	bl, 1		; wait for 1 clock tick
  5083 00001BE4 268A3D                  		mov	bh, [es:di]
  5084 00001BE7 F9                      		stc			; Assume we will fail
  5085 00001BE8 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5086                                  					; AL = condition type, BH = condition compare or mask value
  5087                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5088                                  					; DX = I/O port	address	if AL bit 4 set
  5089 00001BEA 5F                      		pop	di ; ?
  5090 00001BEB 721B                    		jc	short configdone ; 20/12/2022
  5091                                  
  5092 00001BED C606[7900]01            		mov	byte [fhavek09], 1
  5093                                  					; remember we have a k09 type
  5094 00001BF2 1E                      		push	ds
  5095 00001BF3 31C0                    		xor	ax, ax
  5096 00001BF5 8ED8                    		mov	ds, ax
  5097                                  		
  5098 00001BF7 893EB001                		mov	[6Ch*4], di
  5099                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5100                                  					; new int 6ch handler
  5101                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5102 00001BFB 8C0EB201                		mov	word [6Ch*4+2], cs
  5103 00001BFF 1F                      		pop	ds
  5104                                  		; 20/12/2022
  5105                                  		; ds = cs = es
  5106 00001C00 BE[0815]                		mov	si, int6c
  5107 00001C03 B9C201                  		mov	cx, endk09-int6c ; 459
  5108                                  		;mov	cx, 459		; endk09 - int6c
  5109                                  					; size of k09 routine
  5110 00001C06 F3A4                    		rep movsb		;
  5111                                  					; set up config	stuff for sysinit
  5112                                  ; ----------------------------------------------------------------------------
  5113                                  ; Set up config stuff for SYSINIT
  5114                                  
  5115                                  ; 17/10/2022
  5116                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5117                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5118                                  ; 09/12/2022
  5119                                  SETDRIVE equ SetDrive
  5120                                  GETBP equ GetBp
  5121                                  		
  5122                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5123                                  configdone:				
  5124 00001C08 0E                      		push	cs		; di is	final ending address of	msbio.
  5125 00001C09 1F                      		pop	ds
  5126 00001C0A 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5127                                  		; 10/12/2022
  5128                                  		;shr	di, 1
  5129                                  		;shr	di, 1
  5130                                  		;shr	di, 1
  5131                                  		;shr	di, 1
  5132 00001C0D B104                    		mov	cl, 4
  5133 00001C0F D3EF                    		shr	di, cl		
  5134                                  		; 10/12/2022
  5135                                  		;add	di, 70h		; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5136                                  		; 19/10/2022 - Temporary !
  5137                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5138                                  		; 14/08/2023
  5139 00001C11 83C770                  		add	di, 70h
  5140 00001C14 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5141                                  
  5142                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5143                                  
  5144                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5145                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5146                                  	     
  5147                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5148                                  
  5149                                  ; ----------------------------------------------------------------------------
  5150                                  ; ----------------------------------------------------------------------------
  5151                                  %if 0
  5152                                  		mov	ax, [drvfat]	; get drive and	fat id
  5153                                  		; 22/12/2022
  5154                                  		; Note: SETDRIVES uses AL (drive number) only
  5155                                  		mov	bp, SETDRIVE
  5156                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5157                                  					; at 2C7h:4D7h = 70h:2A47h
  5158                                  		push	cs		; simulate far call
  5159                                  		call	call_bios_code	; get bds for drive
  5160                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5161                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5162                                  		push	cs
  5163                                  		call	call_bios_code
  5164                                  
  5165                                  	; resort to funky old segment definitions for now
  5166                                  
  5167                                  		; 22/12/2022
  5168                                  		;push	es		; copy bds to ds:di
  5169                                  		;pop	ds
  5170                                  
  5171                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5172                                  	;
  5173                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5174                                  	;	  back. Apparently it was what actually setup es: for the following
  5175                                  	; cas----
  5176                                  
  5177                                  		; 22/12/2022
  5178                                  		;xor	di, di
  5179                                  		;mov	al, [es:di]	; get fat id byte
  5180                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5181                                  		;mov	[es:drvfat+1], al
  5182                                  		;mov	ax, [es:drvfat]
  5183                                  		
  5184                                  		; 22/12/2022
  5185                                  		; ds = cs
  5186                                  	;;;	mov	al, [drvfat]
  5187                                  
  5188                                  	; cas -- why do a SECOND setdrive here???
  5189                                  
  5190                                  		; 22/12/2022
  5191                                  		;push	es		; save whatever's in es
  5192                                  		;push	ds		; copy bds to es:di
  5193                                  		;pop	es
  5194                                  		;push	cs		; copy Bios_Data to ds
  5195                                  		;pop	ds
  5196                                  	
  5197                                  	; 22/12/2022
  5198                                  	;;;	mov	bp, SETDRIVE
  5199                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5200                                  	;;;	push	cs		; simulate far call
  5201                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5202                                  	
  5203                                  		; 22/12/2022
  5204                                  		;push	es		; copy bds back to ds:di
  5205                                  		;pop	ds
  5206                                  		;pop	es		; pop whatever was in es
  5207                                  
  5208                                  	; Now we load in the MSDOS.SYS file
  5209                                  
  5210                                  	; 22/12/2022
  5211                                  	; -----
  5212                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5213                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5214                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5215                                  	;				; get size of fat on media
  5216                                  	;	;mov	es:16DEh, bl
  5217                                  	;	mov	[es:fbigfat], bl
  5218                                  	;	mov	cl, [di+8]
  5219                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5220                                  	;	;sub	es:16D8h, ax
  5221                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5222                                  	;				; need a logical sector number that will
  5223                                  	;				; be used by getclus(diskrd procedure)
  5224                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5225                                  	;	;sbb	es:16DAh, ax
  5226                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5227                                  	; -----
  5228                                  		
  5229                                  	; -----	; 22/12/2022
  5230                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5231                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5232                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5233                                  					; get size of fat on media
  5234                                  		mov	[fbigfat], bl
  5235                                  		mov	cl, [es:di+8]
  5236                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5237                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5238                                  					; need a logical sector number that will
  5239                                  					; be used by getclus(diskrd procedure)
  5240                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5241                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5242                                  	; ------
  5243                                  
  5244                                  		xor	ch, ch	 ; cx = sectors/cluster
  5245                                  
  5246                                  	; the boot program has left the directory at 0:500h
  5247                                  
  5248                                  		push	ds
  5249                                  		xor	di, di
  5250                                  		mov	ds, di
  5251                                  		mov	bx, [53Ah]
  5252                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5253                                  					; (First cluster field of 2nd dir entry
  5254                                  					; of root directory in the buffer at 500h)
  5255                                  		pop	ds
  5256                                  loadit:
  5257                                  		mov	ax, SYSINITSEG	; 46Dh
  5258                                  		;mov	ax, 46Dh	; sysinit segment
  5259                                  		mov	es, ax
  5260                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5261                                  		;mov	es, [es:271h]
  5262                                  
  5263                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5264                                  ; ----------------------------------------------------------------------------
  5265                                  
  5266                                  		;test	byte [cs:fbigfat], fbig
  5267                                  		test	byte [cs:fbigfat], 40h ; fbig
  5268                                  		jnz	short eofbig
  5269                                  		cmp	bx, 0FF7h
  5270                                  		jmp	short iseofx
  5271                                  ; ----------------------------------------------------------------------------
  5272                                  
  5273                                  eofbig:
  5274                                  		cmp	bx, 0FFF7h
  5275                                  iseofx:
  5276                                  		jb	short loadit	; keep loading until cluster = eof
  5277                                  
  5278                                  %endif
  5279                                  ; ----------------------------------------------------------------------------
  5280                                  ; ----------------------------------------------------------------------------
  5281                                  
  5282 00001C18 E8F903                  		call	setdrvparms	; 
  5283                                  
  5284                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5285                                  		;jmp	far 46Dh:267h
  5286 00001C1B EA[6702]3A04            		jmp	SYSINITSEG:SYSINITSTART
  5287                                  
  5288                                  ; =============== S U B	R O U T	I N E ========================================
  5289                                  
  5290                                  ; Following are subroutines to support resident device driver initialization
  5291                                  ;
  5292                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5293                                  
  5294                                  ;	M035 -- begin changed section
  5295                                  
  5296                                  ;******************************************************************************
  5297                                  ; module name: remap
  5298                                  ;
  5299                                  ; descriptive name: all the code for himem that could be separated from msbio
  5300                                  ;
  5301                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5302                                  ;	     letters) if more than two diskette drives on the system.
  5303                                  ;
  5304                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5305                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5306                                  ;	       letters. to do this, scan for disk drives and assign logical
  5307                                  ;	       drive number starting from 2 and then rescan diskette drives
  5308                                  ;	       and assign next to the last logical drive number of last disk
  5309                                  ;	       drive to the 3rd and 4th diskette drives.
  5310                                  
  5311                                  ; input:       none
  5312                                  ; exit:	drive letters have been remapped in bds chain
  5313                                  ; exit error:  none
  5314                                  ; called from: msinit
  5315                                  ;
  5316                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5317                                  ;	  found in the system
  5318                                  ;	  this function assumes that there are no more than 26 drives assigned
  5319                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5320                                  ;	  this function assumes that the first entries in the chain are
  5321                                  ;	   floppy drives, and all the rest are hard drives
  5322                                  ;	  will alter the boot drive if necessary to reflect remapping
  5323                                  ;
  5324                                  ;******************************************************************************
  5325                                  
  5326                                  ; 17/10/2022
  5327                                  ; 02/10/2022
  5328                                  
  5329                                  remap:		; proc near		
  5330 00001C20 2E8B3E[1901]            		mov	di, [cs:start_bds] ; get first bds
  5331                                  
  5332                                  ; search for 1st fixed disk physical drive num
  5333                                  
  5334                                  drive_loop:				
  5335 00001C25 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5336                                  					; first	hard disk??
  5337 00001C29 7409                    		jz	short fdrv_found ; yes,	continue
  5338 00001C2B 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5339                                  					; get next bds,	assume segment
  5340 00001C2D 83FFFF                  		cmp	di, -1		; last bds?
  5341 00001C30 75F3                    		jnz	short drive_loop ; loop	if not
  5342 00001C32 EB4F                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5343                                  
  5344                                  ;------------------------------------------------------------------------------
  5345                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5346                                  ;logical drive nums to 3, 4, 5 etc.
  5347                                  ;------------------------------------------------------------------------------
  5348                                  
  5349                                  fdrv_found:				
  5350 00001C34 B002                    		mov	al, 2		; start	with logical drv num=2
  5351                                  fdrv_loop:				
  5352 00001C36 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5353                                  					; found	??
  5354 00001C39 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5355                                  					; ds:di--> next	bds
  5356                                  		;inc	al		; set num for next drive
  5357                                  		; 18/12/2022
  5358 00001C3B 40                      		inc	ax
  5359 00001C3C 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ??
  5360 00001C3F 75F5                    		jnz	short fdrv_loop	; no - assign more disk	drives
  5361                                  
  5362                                  ;------------------------------------------------------------------------------
  5363                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5364                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5365                                  ; any more.
  5366                                  ;------------------------------------------------------------------------------
  5367                                  
  5368 00001C41 2E8B3E[1901]            		mov	di, [cs:start_bds] ; [start_bds]
  5369                                  					; get first bds
  5370 00001C46 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5371                                  					; ds:di-->bds2
  5372 00001C48 2E8A26[2501]            		mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5373 00001C4D 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5374                                  remap_loop1:				
  5375 00001C50 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5376                                  					; set new num to next floppy
  5377 00001C52 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5378 00001C55 FEC0                    		inc	al		; new number for next floppy
  5379 00001C57 FECC                    		dec	ah		; count	down extra floppies
  5380 00001C59 75F5                    		jnz	short remap_loop1
  5381                                  
  5382                                  ; now we've got to adjust the boot drive if we reassigned it
  5383                                  
  5384 00001C5B 2EA0[CA16]              		mov	al, [cs:drvfat]
  5385 00001C5F 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5386 00001C61 7220                    		jb	short rmap_exit
  5387 00001C63 2E2A06[2501]            		sub	al, [cs:dsktnum] ; is it one of the other floppies?
  5388 00001C68 7204                    		jb	short remap_boot_flop ;	brif so
  5389                                  
  5390                                  ; we've got to remap the boot hard drive
  5391                                  ; subtract the number of EXTRA floppies from it
  5392                                  
  5393 00001C6A 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5394 00001C6C EB05                    		jmp	short remap_change_boot_drv
  5395                                  ; ---------------------------------------------------------------------------
  5396                                  
  5397                                  ; we've got to remap the boot floppy.
  5398                                  ; add the number of hard drive partitions to it
  5399                                  
  5400                                  remap_boot_flop:			
  5401 00001C6E 2E0206[7500]            		add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5402                                  remap_change_boot_drv:			
  5403 00001C73 2EA2[CA16]              		mov	[cs:drvfat], al ; alter msdos.sys load drive
  5404 00001C77 FEC0                    		inc	al
  5405 00001C79 1E                      		push	ds
  5406 00001C7A BF3A04                  		mov	di, SYSINITSEG	; 46Dh
  5407                                  		;mov	di, 46Dh	; SYSINIT segment
  5408 00001C7D 8EDF                    		mov	ds, di
  5409 00001C7F A2[9602]                		mov	[DEFAULTDRIVE], al
  5410                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5411                                  					; pass it to sysinit as	well
  5412 00001C82 1F                      		pop	ds
  5413                                  rmap_exit:				
  5414 00001C83 C3                      		retn
  5415                                  
  5416                                  ; =============== S U B	R O U T	I N E =======================================
  5417                                  
  5418                                  ; 17/10/2022
  5419                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5420                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5421                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5422                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5423                                  ;**************************************************
  5424                                  ; getboot - get the boot sector for a hard disk
  5425                                  ;
  5426                                  ; Reads the boot sector from a specified drive into
  5427                                  ; a buffer at the top of memory.
  5428                                  ;
  5429                                  ; dl = int13 drive number to read boot sector for
  5430                                  ;**************************************************
  5431                                  
  5432                                  ; 17/10/2022
  5433                                  bootbias equ 200h
  5434                                  
  5435                                  getboot:	; proc near		
  5436                                  		
  5437                                  		; 08/04/2018
  5438                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5439                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5440                                  		; 02/10/2022 - Retro DOS v4.0
  5441                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5442                                  
  5443 00001C84 2EA1[CD16]              		mov	ax, [cs:init_bootseg] ; 17/10/2022
  5444 00001C88 8EC0                    		mov	es, ax
  5445                                  		; 17/10/2022
  5446 00001C8A BB0002                  		mov	bx, bootbias ; 200h
  5447                                  		;mov	bx, 200h	; bootbias
  5448                                  					; load BX, ES:BX is where sector goes
  5449 00001C8D B80102                  		mov	ax, 201h
  5450 00001C90 30F6                    		xor	dh, dh
  5451 00001C92 B90100                  		mov	cx, 1
  5452 00001C95 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5453                                  					; AL = number of sectors to read, CH = track, CL = sector
  5454                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5455                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5456 00001C97 7209                    		jb	short erret
  5457                                  		; 17/10/2022
  5458 00001C99 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5459                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5460                                  					; Dave Litton magic word?
  5461 00001CA0 7401                    		jz	short norm_ret	; yes
  5462                                  erret:					
  5463 00001CA2 F9                      		stc
  5464                                  norm_ret:				
  5465 00001CA3 C3                      		retn
  5466                                  
  5467                                  ; =============== S U B	R O U T	I N E =======================================
  5468                                  
  5469                                  ; 28/12/2018 - Retro DOS v4.0 
  5470                                  
  5471                                  ;***************************************************************************
  5472                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5473                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5474                                  ;   our own logical sectors start. we also read in our boot sector to
  5475                                  ;   determine version number
  5476                                  ;
  5477                                  ;   inputs:	dl is rom drive number (80...)
  5478                                  ;		bh is partition number (0....) 
  5479                                  ;		ds:di points to bds
  5480                                  ;   outputs:	carry clear -> bpb is filled in
  5481                                  ;		carry set   -> bpb is left uninitialized due to error
  5482                                  ;	trashes (at least) si, cx
  5483                                  ;	MUST PRESERVE ES:!!!!
  5484                                  ;***************************************************************************
  5485                                  
  5486                                  sethard:	; proc near		
  5487                                  		; 14/08/2023
  5488                                  		; ds = cs = BIOSDATA
  5489 00001CA4 57                      		push	di
  5490 00001CA5 53                      		push	bx
  5491                                  		;push	ds  ; ds = cs = BIOSDATA ; 14/08/2023
  5492 00001CA6 06                      		push	es
  5493 00001CA7 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5494 00001CAA 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5495 00001CAD 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5496                                  					; fnon_removable
  5497 00001CB1 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5498                                  					; ffHardFile
  5499 00001CB5 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5500 00001CBA 88FE                    		mov	dh, bh		; partition number
  5501 00001CBC 52                      		push	dx
  5502 00001CBD B408                    		mov	ah, 8
  5503 00001CBF CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5504                                  					; DL = drive number
  5505                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5506                                  					; DL = number of consecutive drives
  5507                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5508 00001CC1 FEC6                    		inc	dh
  5509 00001CC3 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5510 00001CC6 5A                      		pop	dx
  5511 00001CC7 7263                    		jb	short setret	; error	if no hard disk
  5512 00001CC9 80E13F                  		and	cl, 3Fh
  5513 00001CCC 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5514 00001CCF 52                      		push	dx		; save partition number
  5515 00001CD0 E8B1FF                  		call	getboot
  5516 00001CD3 5A                      		pop	dx		; restore partition number
  5517 00001CD4 7256                    		jb	short setret
  5518 00001CD6 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5519                                  
  5520                                  ; The first 'active' partition is 00, the second is 01....
  5521                                  ;   then the remainder of the 'primary' but non-active partitions
  5522                                  
  5523                                  act_part:				
  5524 00001CD9 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5525 00001CDE 7418                    		jz	short no_act	; no
  5526 00001CE0 26803F01                		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5527 00001CE4 740C                    		jz	short got_good_act
  5528 00001CE6 26803F04                		cmp	byte [es:bx], 4
  5529 00001CEA 7406                    		jz	short got_good_act
  5530 00001CEC 26803F06                		cmp	byte [es:bx], 6
  5531 00001CF0 7506                    		jnz	short no_act
  5532                                  got_good_act:				
  5533 00001CF2 08F6                    		or	dh, dh		; is this our target partition #?
  5534 00001CF4 743A                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5535 00001CF6 FECE                    		dec	dh		; count	down
  5536                                  no_act:					
  5537 00001CF8 83C310                  		add	bx, 16
  5538 00001CFB 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5539                                  					; last entry done?
  5540 00001CFF 75D8                    		jnz	short act_part	; no, process next entry
  5541 00001D01 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5542                                  					; restore original value of bx
  5543                                  
  5544                                  ; Now scan the non-active partitions
  5545                                  
  5546                                  get_primary:				
  5547 00001D04 26F647FC80              		test	byte [es:bx-4], 80h
  5548 00001D09 7518                    		jnz	short not_prim	; we've already scanned
  5549                                  					; the ACTIVE ones
  5550 00001D0B 26803F01                		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5551 00001D0F 740C                    		jz	short got_prim
  5552 00001D11 26803F04                		cmp	byte [es:bx], 4
  5553 00001D15 7406                    		jz	short got_prim
  5554 00001D17 26803F06                		cmp	byte [es:bx], 6
  5555 00001D1B 7506                    		jnz	short not_prim
  5556                                  got_prim:				
  5557 00001D1D 08F6                    		or	dh, dh		; is this our target partition?
  5558 00001D1F 740F                    		jz	short set2
  5559 00001D21 FECE                    		dec	dh
  5560                                  not_prim:				
  5561 00001D23 83C310                  		add	bx, 16
  5562 00001D26 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5563 00001D2A 75D8                    		jnz	short get_primary ; loop till we've gone through table
  5564                                  setret:					
  5565 00001D2C F9                      		stc			; error	return
  5566 00001D2D E9A102                  		jmp	ret_hard_err
  5567                                  
  5568                                  ; ---------------------------------------------------------------------------
  5569                                  
  5570                                  ;  until we get the real logical boot record and get the bpb,
  5571                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5572                                  ;  for the convenience of the computation.
  5573                                  ;
  5574                                  ;  at the end of this procedure, if a bpb information is gotten from
  5575                                  ;  the valid boot record, then we are going to use those bpb information
  5576                                  ;  without change.
  5577                                  ;
  5578                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5579                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5580                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5581                                  
  5582                                  set2:					
  5583                                  		; 14/08/2023
  5584                                  		; ds = cs = BIOSDATA segment (0070h)
  5585 00001D30 8816[CF16]              		mov	[rom_drv_num], dl
  5586                                  		;mov	[cs:rom_drv_num], dl
  5587                                  			; save the rom bios drive number we are handling now.
  5588 00001D34 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5589 00001D38 268B5706                		mov	dx, [es:bx+6]
  5590                                  
  5591                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5592                                  ; sectors should be allowed	
  5593                                  
  5594 00001D3C 83E801                  		sub	ax, 1
  5595 00001D3F 83DA00                  		sbb	dx, 0
  5596 00001D42 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5597 00001D46 2613570A                		adc	dx, [es:bx+10]
  5598 00001D4A 7305                    		jnb	short okdrive
  5599 00001D4C 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  5600                                  okdrive:				
  5601 00001D51 268B4704                		mov	ax, [es:bx+4]
  5602 00001D55 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5603                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5604 00001D58 268B4706                		mov	ax, [es:bx+6]
  5605 00001D5C 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5606 00001D5F 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5607 00001D63 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5608 00001D67 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5609 00001D6A 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5610                                  					; bpb->maxsec =	p->partitionlength
  5611 00001D6D 83FA00                  		cmp	dx, 0
  5612 00001D70 7705                    		ja	short okdrive_1
  5613 00001D72 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5614 00001D75 72B5                    		jb	short setret	; return -1;
  5615                                  okdrive_1:				
  5616 00001D77 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5617 00001D7A 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5618 00001D7D 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5619                                  					; usually equal	to the # of sec/trk.
  5620 00001D7F 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5621 00001D82 50                      		push	ax
  5622 00001D83 89D0                    		mov	ax, dx
  5623 00001D85 31D2                    		xor	dx, dx
  5624 00001D87 F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5625                                  					; (track)temp_h:ax + (sector)dx
  5626                                  		; 17/10/2022
  5627                                  		;mov	[cs:temp_h], ax
  5628                                  		; 14/08/2023 (ds=cs)
  5629 00001D89 A3[2905]                		mov	[temp_h], ax
  5630 00001D8C 58                      		pop	ax
  5631 00001D8D F7F3                    		div	bx
  5632 00001D8F 88D1                    		mov	cl, dl
  5633 00001D91 FEC1                    		inc	cl
  5634 00001D93 31DB                    		xor	bx, bx
  5635 00001D95 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5636 00001D98 50                      		push	ax
  5637 00001D99 31D2                    		xor	dx, dx
  5638                                  		;mov	ax, [cs:temp_h]
  5639 00001D9B A1[2905]                		mov	ax, [temp_h] ; 14/08/2023
  5640 00001D9E F7F3                    		div	bx
  5641                                  		;mov	[cs:temp_h], ax
  5642 00001DA0 A3[2905]                		mov	[temp_h], ax ; 14/08/2023
  5643 00001DA3 58                      		pop	ax
  5644 00001DA4 F7F3                    		div	bx		; dl is head, ax is cylinder
  5645                                  		; 14/08/2023 (ds=cs)
  5646 00001DA6 833E[2905]00            		cmp	word [temp_h], 0
  5647                                  		;cmp	word [cs:temp_h], 0
  5648 00001DAB 775F                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5649 00001DAD 3D0004                  		cmp	ax, 1024
  5650 00001DB0 775A                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5651                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5652                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5653                                  			; ('ja' must be 'jnb')
  5654                                  okdrive_2:
  5655                                   		; 28/07/2019
  5656                                  ; dl is head.
  5657                                  ; ax is cylinder
  5658                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5659                                  
  5660                                  ;*** for mini disks ***
  5661                                  
  5662 00001DB2 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5663                                  					; check	for mini disk
  5664 00001DB6 7503                    		jnz	short oknotmini	; not mini disk.
  5665 00001DB8 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5666                                  					; set the physical track number
  5667                                  oknotmini:
  5668                                  ;*** end of added logic for mini disk
  5669                                  				
  5670 00001DBB D0CC                    		ror	ah, 1		; move high two	bits of	cyl to high
  5671 00001DBD D0CC                    		ror	ah, 1		; two bits of upper byte
  5672 00001DBF 80E4C0                  		and	ah, 0C0h	; turn off remainder of	bits
  5673 00001DC2 08E1                    		or	cl, ah		; move two bits	to correct spot
  5674 00001DC4 88C5                    		mov	ch, al		; ch is	cylinder (low 8	bits)
  5675                                  					; cl is	sector + 2 high	bits of	cylinder
  5676 00001DC6 88D6                    		mov	dh, dl		; dh is	head
  5677                                  		
  5678                                  		; 14/08/2023 (ds=cs)
  5679 00001DC8 8A16[CF16]              		mov	dl, [rom_drv_num]
  5680                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  5681                                  
  5682                                  
  5683                                  ; cl is sector + 2 high bits of cylinder
  5684                                  ; ch is low 8 bits of cylinder
  5685                                  ; dh is head
  5686                                  ; dl is drive
  5687                                  
  5688                                  ; for convenience, we are going to read the logical boot sector
  5689                                  ; into cs:disksector area.
  5690                                  
  5691                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5692                                  ; is to be read in is cs:disksector.
  5693                                  
  5694 00001DCC 0E                      		push	cs
  5695 00001DCD 07                      		pop	es
  5696 00001DCE BB[4E01]                		mov	bx, disksector	; for convenience,
  5697                                  					; we are going to read the logical boot	sector
  5698                                  					; into cs:disksector area.
  5699 00001DD1 B80102                  		mov	ax, 201h
  5700 00001DD4 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5701                                  					; AL = number of sectors to read, CH = track, CL = sector
  5702                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5703                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5704                                  
  5705                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  5706                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  5707                                  ; media if we recognize the version number.
  5708                                  
  5709                                  		; 14/08/2023
  5710                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  5711                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  5712 00001DD6 53                      		push	bx
  5713 00001DD7 50                      		push	ax
  5714                                  		; 14/08/2023
  5715                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  5716 00001DD8 803FE9                  		cmp	byte [bx], 0E9h
  5717                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  5718 00001DDB 740B                    		jz	short check_1_ok ; yes
  5719 00001DDD 803FEB                  		cmp	byte [bx], 0EBh
  5720                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  5721 00001DE0 7525                    		jnz	short invalid_boot_record ; no
  5722 00001DE2 807F0290                		cmp	byte [bx+2], 90h
  5723                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  5724 00001DE6 751F                    		jnz	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  5725                                  check_1_ok:	
  5726                                  		; 14/08/2023			
  5727 00001DE8 BB[5901]                		mov	bx, disksector+11 ; disksector+EXT_BOOT.BPB
  5728                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  5729                                  					; point	to the bpb in the boot record
  5730                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  5731 00001DEB 8A470A                  		mov	al, [bx+10] ; 14/08/2023 
  5732                                  					; get the mediadescriptor byte
  5733 00001DEE 24F0                    		and	al, 0F0h	; mask off low nibble
  5734 00001DF0 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  5735 00001DF2 7513                    		jnz	short invalid_boot_record ; no,	invalid	boot record
  5736                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  5737 00001DF4 813F0002                		cmp	word [bx], 512 ; 14/08/2023
  5738 00001DF8 750D                    		jnz	short invalid_boot_record ; invalidate non 512 byte sectors
  5739                                  
  5740                                  check2_ok:				; yes, mediadescriptor ok.
  5741 00001DFA 8A4702                  		mov	al, [bx+2] ; 14/08/2023
  5742                                  		;mov	al, [cs:bx+2]	; now make sure that
  5743                                  					; the sectorspercluster	is
  5744                                  					; a power of 2
  5745                                  					;
  5746                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  5747                                  					; get the sectorspercluster
  5748 00001DFD 08C0                    		or	al, al		; is it	zero?
  5749 00001DFF 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  5750                                  
  5751                                  ck_power_of_two:			
  5752 00001E01 D0E8                    		shr	al, 1		; shift	until first bit	emerges
  5753 00001E03 73FC                    		jnb	short ck_power_of_two
  5754 00001E05 740B                    		jz	short valid_boot_record
  5755                                  
  5756                                  invalid_boot_record:			
  5757 00001E07 58                      		pop	ax
  5758 00001E08 5B                      		pop	bx
  5759 00001E09 E90F01                  		jmp	unknown		; jump to invalid boot record
  5760                                  					; unformatted or illegal media.
  5761                                  	; 14/08/2023	
  5762                                  ; ---------------------------------------------------------------------------
  5763                                  setret_brdg:				
  5764 00001E0C E91DFF                  		jmp	setret
  5765                                  ; ---------------------------------------------------------------------------
  5766                                  
  5767                                  unknown3_0_j:				
  5768 00001E0F E90D01                  		jmp	unknown3_0	; legally formatted media,
  5769                                  					; although, content might be bad.
  5770                                  ; ---------------------------------------------------------------------------
  5771                                  
  5772                                  valid_boot_record:			
  5773 00001E12 58                      		pop	ax
  5774 00001E13 5B                      		pop	bx
  5775                                  
  5776                                  ; Signature found. Now check version.
  5777                                  
  5778                                  		; 14/08/2023
  5779 00001E14 817F08322E              		cmp	word [bx+8], '2.'
  5780                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  5781                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  5782 00001E19 7506                    		jnz	short try5
  5783 00001E1B 807F0A30                		cmp	byte [bx+10], '0'
  5784                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  5785                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  5786                                  		; 14/08/2023
  5787                                  		;jnz	short try5
  5788                                  		;jmp	short copybpb
  5789 00001E1F 7425                    		jz	short copybpb
  5790                                  
  5791                                  	; 14/08/2023
  5792                                  ; ---------------------------------------------------------------------------
  5793                                  ;
  5794                                  ;setret_brdg:				
  5795                                  ;		jmp	setret
  5796                                  ; ---------------------------------------------------------------------------
  5797                                  ;
  5798                                  ;unknown3_0_j:				
  5799                                  ;		jmp	unknown3_0	; legally formatted media,
  5800                                  ;					; although, content might be bad.
  5801                                  ; ---------------------------------------------------------------------------
  5802                                  
  5803                                  try5:					
  5804 00001E21 E8B101                  		call	cover_fdisk_bug
  5805                                  
  5806                                  ; see if it is an os2 signature
  5807                                  
  5808                                  		; 14/08/2023
  5809                                  		; ds = cs = BIOSDATA segment
  5810 00001E24 817F08302E              		cmp	word [bx+8], '0.'
  5811                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  5812                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  5813 00001E29 750C                    		jnz	short no_os2
  5814 00001E2B 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  5815                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  5816 00001E2E 2C31                    		sub	al, '1'
  5817                                  		;sub	al, 31h		; '1'
  5818 00001E30 24FE                    		and	al, 0FEh
  5819 00001E32 7412                    		jz	short copybpb	; accept either	'1' or '2'
  5820 00001E34 E9E400                  		jmp	unknown
  5821                                  ; ---------------------------------------------------------------------------
  5822                                  
  5823                                  ; no os2 signature, this is to check for real dos versions
  5824                                  
  5825                                  no_os2:					
  5826                                  		; 14/08/2023
  5827                                  		; ds = cs = BIOSDATA
  5828 00001E37 817F08332E              		cmp	word [bx+8], '3.'			
  5829                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  5830                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  5831 00001E3C 72D1                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  5832                                  					; do not trust it, but still legal.
  5833 00001E3E 7506                    		jnz	short copybpb	; honor	os2 boot record
  5834                                  					; or dos 4.0 version
  5835 00001E40 807F0A31                		cmp	byte [bx+10], '1' ; 14/08/2023
  5836                                  		;cmp	byte [cs:bx+10], '1'
  5837                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  5838 00001E44 72C9                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  5839                                  copybpb:
  5840                                  
  5841                                  ; 03/10/2022
  5842                                  
  5843                                  ; we have a valid boot sector. use the bpb in it to build the
  5844                                  ; bpb in bios. it is assumed that only
  5845                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  5846                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  5847                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  5848                                  ; need to be set (all other values in already). fbigfat is also set.
  5849                                  
  5850                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  5851                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  5852                                  ; and system id according to the boot record.
  5853                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  5854                                  
  5855                                  		; 10/12/2022
  5856                                  		; (number of FATs optimization)
  5857 00001E46 BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  5858                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  5859                                  		;mov	cl, [cs:si+05h]
  5860                                  		; 14/08/2023
  5861                                  		; ds = cs = BIOSDATA segment (0070h)
  5862 00001E49 8A4C05                  		mov	cl, [si+05h] ; number of FATs
  5863                                  
  5864 00001E4C 807C1B29                		cmp	byte [si+1Bh], 29h ; 14/08/2023
  5865                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  5866                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  5867                                  					; [disksector+EXT_BOOT.SIG]
  5868                                  					; EXT_BOOT_SIGNATURE
  5869 00001E50 7542                    		jnz	short copybpb_fat ; conventional fat system
  5870                                  
  5871                                  		; 03/10/2022
  5872                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  5873                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  5874                                  		;	     number of FATs must be 2 ; =*?=
  5875                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  5876                                  		;
  5877                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  5878                                  
  5879                                  		; 10/12/2022
  5880                                  		;cmp	byte [cs:disksector+10h], 0
  5881                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  5882                                  		;jnz	short copybpb_fat ; a fat system.
  5883 00001E52 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  5884 00001E54 753E                    		jnz	short copybpb_fat ; a fat system.
  5885                                  
  5886                                  ; non fat based	media.
  5887                                  
  5888 00001E56 57                      		push	di
  5889                                  		; 14/08/2023
  5890                                  		;push	ds  ; ds = cs = BIOSDATA segment
  5891 00001E57 1E                      		push	ds
  5892 00001E58 07                      		pop	es
  5893                                  		; 14/08/2023
  5894                                  		; ds = cs
  5895                                  		;push	cs
  5896                                  		;pop	ds
  5897                                  
  5898                                  		; 10/12/2022
  5899                                  		; (number of FATs optimization)
  5900                                  		; SI = disksector+11
  5901                                  		; 17/10/2022
  5902                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5903                                  		;mov	si, disksector+11
  5904 00001E59 83C706                  		add	di, 6		; add di,BDS.BPB
  5905                                  
  5906                                  ; just for completeness, we'll make sure that total_sectors and
  5907                                  ; big_total_sectors aren't both zero. I've seen examples of
  5908                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  5909                                  ; got that way. If it occurs, then use the values from the
  5910                                  ; partition table.
  5911                                  
  5912                                  		; 18/12/2022
  5913 00001E5C 29C9                    		sub	cx, cx 
  5914                                  
  5915                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  5916                                  		;jnz	short already_nonz 
  5917                                  		;			; how about big_total?
  5918                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  5919                                  		;jnz	short already_nonz ; we're okay if any are != 0
  5920                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5921                                  		;jnz	short already_nonz
  5922                                  
  5923                                  		; 14/08/2023
  5924                                  		; ds = cs = BIOSDATA segment (0070h)
  5925                                  
  5926                                  		; 18/12/2022
  5927                                  		;cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  5928                                  		; 14/08/2023
  5929 00001E5E 394C08                  		cmp	[si+8], cx ; 0
  5930 00001E61 751C                    		jnz	short already_nonz
  5931                                  					     	; how about big_total?
  5932                                  		;cmp	[cs:si+15h], cx ; 0 	; [cs:si+EBPB.BIGTOTALSECTORS]
  5933                                  		; 14/08/2023
  5934 00001E63 394C15                  		cmp	[si+15h], cx ; 0
  5935 00001E66 7517                    		jnz	short already_nonz	; we're okay if any are != 0
  5936                                  		;cmp	[cs:si+17h], cx ; 0  	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5937 00001E68 394C17                  		cmp	[si+17h], cx ; 0
  5938 00001E6B 7512                    		jnz	short already_nonz
  5939                                  
  5940                                  ; now let's copy the values from the partition table (now in the BDS)
  5941                                  ; into the BPB in the boot sector buffer, before they get copied back.
  5942                                  
  5943 00001E6D 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  5944                                  		; 14/08/2023
  5945                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  5946 00001E70 894408                  		mov	[si+8], ax
  5947 00001E73 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  5948                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  5949 00001E76 894415                  		mov	[si+15h], ax
  5950 00001E79 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  5951                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5952 00001E7C 894417                  		mov	[si+17h], ax
  5953                                  
  5954                                  already_nonz:	
  5955                                  		; 18/12/2022
  5956                                  		; cx = 0
  5957 00001E7F B119                    		mov	cl, 25		
  5958                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  5959 00001E81 F3A4                    		rep movsb
  5960 00001E83 1F                      		pop	ds
  5961 00001E84 5F                      		pop	di
  5962 00001E85 06                      		push	es
  5963 00001E86 1E                      		push	ds
  5964 00001E87 07                      		pop	es
  5965 00001E88 0E                      		push	cs
  5966 00001E89 1F                      		pop	ds
  5967                                  		; 14/08/2023
  5968 00001E8A BD[3507]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  5969                                  		; 18/12/2022
  5970                                  		;mov	bp, mov_media_ids
  5971                                  		;;mov	bp, 751h	; mov_media_ids
  5972                                  					; at 2C7h:751h = 70h:2CC1h
  5973                                  					; set volume id, systemid, serial.
  5974 00001E8D 0E                      		push	cs		; simulate far call
  5975 00001E8E E8C6F8                  		call	call_bios_code
  5976                                  		; 14/08/2023
  5977                                  		; ds = cs = es
  5978                                  		;push	es
  5979                                  		;pop	ds
  5980                                  		;pop	es
  5981 00001E91 E93C01                  		jmp	goodret
  5982                                  ; ---------------------------------------------------------------------------
  5983                                  
  5984                                  ; ****** cas ---
  5985                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  5986                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  5987                                  ; happens with some frequency -- perhaps through some OS/2 setup
  5988                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  5989                                  ; from the boot sector into the DPB anyway, we've just been using
  5990                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  5991                                  ; we'll go ahead and copy it into the DPB, except in the case
  5992                                  ; that it equals zero, in which case we just use the values in
  5993                                  ; the DPB from the partition table.
  5994                                  
  5995                                  ; 17/10/2022
  5996                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  5997                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  5998                                  ; 09/12/2022
  5999                                  MOVMEDIAIDS equ mov_media_ids
  6000                                  CLEARIDS equ clear_ids
  6001                                  
  6002                                  copybpb_fat:
  6003                                  		; 10/12/2022
  6004                                  		; (number of FATs optimization)
  6005                                  		; SI = disksector+11				
  6006                                  		; 17/10/2022
  6007                                  		;mov	si, disksector+11
  6008                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6009                                  					; cs:si	-> bpb in boot
  6010 00001E94 31D2                    		xor	dx, dx
  6011                                  		; 14/08/2023
  6012                                  		; ds = cs = BIOSDATA segment (0070h)
  6013 00001E96 8B4408                  		mov	ax, [si+8]
  6014                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6015                                  					; get totsec from boot sec
  6016 00001E99 09C0                    		or	ax, ax
  6017 00001E9B 7514                    		jnz	short copy_totsec ; if non zero, use that
  6018 00001E9D 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  6019                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  6020                                  					; get the big version
  6021                                  					; (32 bit total	sectors)
  6022 00001EA0 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  6023                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6024                                  		; 10/12/2022
  6025                                  		; (number of FATs optimization)
  6026                                  		; CL = number of FATs (2 or 1) 
  6027 00001EA3 89D3                    		mov	bx, dx		; see if it is a big zero
  6028 00001EA5 09C3                    		or	bx, ax
  6029 00001EA7 7508                    		jnz	short copy_totsec
  6030                                  			; screw it. it was bogus.
  6031 00001EA9 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6032 00001EAC 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6033 00001EAF EB06                    		jmp	short fat_big_small
  6034                                  
  6035                                  		;mov	cx, dx
  6036                                  		;or	cx, ax		; see if it is a big zero
  6037                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  6038                                  copy_totsec:				
  6039 00001EB1 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  6040                                  					; make DPB match boot sec
  6041 00001EB4 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  6042                                  
  6043                                  		; 10/12/2022
  6044                                  ;totsec_already_set:			
  6045                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6046                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6047                                  
  6048                                  ; determine fat entry size.
  6049                                  
  6050                                  fat_big_small:
  6051                                  
  6052                                  ;at this moment dx;ax = total sector number
  6053                                  
  6054                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  6055                                  ;from the BPB on the disk
  6056                                  				
  6057                                  		; 14/08/2023
  6058                                  		; ds = cs = BIOSDATA segment (0070h)
  6059                                  				
  6060 00001EB7 8B5C03                  		mov	bx, [si+3]
  6061                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  6062                                  					; get #reserved_sectors	from BPB
  6063 00001EBA 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  6064                                  					; update BDS field
  6065 00001EBD 29D8                    		sub	ax, bx
  6066 00001EBF 83DA00                  		sbb	dx, 0		; update the count
  6067                                  		; 14/08/2023
  6068 00001EC2 8B5C0B                  		mov	bx, [si+0Bh]
  6069                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  6070                                  					; bx = sectors/fat
  6071 00001EC5 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  6072                                  					; set in bds bpb
  6073                                  		; 10/12/2022
  6074                                  		; (number of FATs optimization)
  6075                                  		; CL = number of FATs (2 or 1) 
  6076                                  		;dec	cl ; *
  6077                                  		; 18/12/2022
  6078 00001EC8 49                      		dec	cx ; *
  6079 00001EC9 D3E3                    		shl	bx, cl
  6080                                  		;shl	bx, 1	; =*?=	; always 2 fats
  6081                                  		
  6082 00001ECB 29D8                    		sub	ax, bx		; sub #	fat sectors
  6083 00001ECD 83DA00                  		sbb	dx, 0
  6084 00001ED0 8B5C06                  		mov	bx, [si+6] ; 14/08/2023
  6085                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  6086                                  					; # root entries
  6087 00001ED3 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6088                                  					; set in bds bpb
  6089 00001ED6 B104                    		mov	cl, 4
  6090 00001ED8 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6091 00001EDA 29D8                    		sub	ax, bx		; sub #	dir sectors
  6092 00001EDC 83DA00                  		sbb	dx, 0		;
  6093                                  					; dx:ax	now contains the
  6094                                  					; # of data sectors
  6095 00001EDF 31C9                    		xor	cx, cx ; *
  6096 00001EE1 8A4C02                  		mov	cl, [si+2] ; 14/08/2023
  6097                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6098                                  					; sectors per cluster
  6099 00001EE4 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6100                                  					; set in bios bpb
  6101 00001EE7 50                      		push	ax
  6102 00001EE8 89D0                    		mov	ax, dx
  6103 00001EEA 31D2                    		xor	dx, dx
  6104 00001EEC F7F1                    		div	cx		; cx = sectors per cluster
  6105                                  		; 14/08/2023 (ds=cs)
  6106 00001EEE A3[2905]                		mov	[temp_h], ax
  6107                                  		;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6108                                  					; # clusters.
  6109 00001EF1 58                      		pop	ax
  6110 00001EF2 F7F1                    		div	cx
  6111                                  		;cmp	word [cs:temp_h], 0
  6112 00001EF4 833E[2905]00            		cmp	word [temp_h], 0 ; 14/08/2023
  6113 00001EF9 7718                    		ja	short toobig_ret ; too big cluster number
  6114 00001EFB 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6115                                  					; is this 16-bit fat?
  6116 00001EFE 7205                    		jb	short copymediaid ; no,	small fat
  6117                                  		; 17/10/2022
  6118 00001F00 800E[CC16]40            		or	byte [fbigfat], 40h
  6119                                  		;or	ds:fbigfat, 40h	; fbig
  6120                                  					; 16 bit fat
  6121                                  copymediaid:				
  6122 00001F05 06                      		push	es
  6123 00001F06 1E                      		push	ds
  6124 00001F07 07                      		pop	es
  6125                                  		; 14/08/2023
  6126                                  		; ds = cs = BIOSDATA
  6127                                  		;push	cs
  6128                                  		;pop	ds
  6129                                  		; 17/10/2022
  6130 00001F08 BD[3507]                		mov	bp, MOVMEDIAIDS
  6131                                  		;mov	bp, 751h	; mov_media_ids
  6132                                  					; at 2C7h:751h = 70h:2CC1h
  6133                                  					; copy filesys_id, volume label
  6134 00001F0B 0E                      		push	cs		; simulate far call
  6135 00001F0C E848F8                  		call	call_bios_code
  6136                                  		; 14/08/2023
  6137                                  		;push	es
  6138                                  		;pop	ds
  6139 00001F0F 07                      		pop	es
  6140 00001F10 E99F00                  		jmp	massage_bpb	; now final check for bpb info
  6141                                  					; and return.
  6142                                  ; ---------------------------------------------------------------------------
  6143                                  
  6144                                  toobig_ret:				
  6145                                  		; 14/08/2023 (ds=cs=BIOSDATA)
  6146 00001F13 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  6147                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  6148                                  					; too big (32 bit clust #) for FAT16
  6149 00001F18 E9B500                  		jmp	goodret		; still	drive letter is	assigned
  6150                                  					; but useless. to big for
  6151                                  					; current pc dos fat file system
  6152                                  ; ---------------------------------------------------------------------------
  6153                                  
  6154                                  unknown:	
  6155                                  		; 12/12/2022
  6156 00001F1B 804D2402                		or	byte [di+24h], 02h			
  6157                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6158                                  					; unformatted_media
  6159                                  					; Set unformatted media	flag.
  6160                                  
  6161                                  ; the boot signature may not be	recognizable,
  6162                                  ; but we should	try and	read it	anyway.
  6163                                  
  6164                                  unknown3_0:				
  6165 00001F1F 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6166                                  					; [di+BDS.totalsecs32+2]
  6167 00001F22 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6168 00001F25 BE[FC16]                		mov	si, disktable2
  6169                                  
  6170                                  scan:					
  6171                                  		;cmp	dx, [cs:si]	; total sectors hw
  6172                                  		; 14/08/2023 (ds=cs)
  6173 00001F28 3B14                    		cmp	dx, [si] 
  6174 00001F2A 720C                    		jb	short gotparm
  6175 00001F2C 7705                    		ja	short scan_next
  6176                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  6177 00001F2E 3B4402                  		cmp	ax, [si+2]
  6178 00001F31 7605                    		jbe	short gotparm
  6179                                  
  6180                                  scan_next:				
  6181 00001F33 83C60A                  		add	si, 10		; 5*2
  6182 00001F36 EBF0                    		jmp	short scan	; covers upto 512 mb media
  6183                                  ; ---------------------------------------------------------------------------
  6184                                  
  6185                                  gotparm:				
  6186 00001F38 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6187                                  		;or	ds:fbigfat, cl
  6188                                  		; 17/10/2022
  6189 00001F3B 080E[CC16]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  6190                                  		; 14/08/2023
  6191                                  		; ds = cs = BIOSDATA
  6192 00001F3F 8B4C04                  		mov	cx, [si+4]
  6193                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6194                                  					; cl = log base 2 of ch
  6195 00001F42 8B5406                  		mov	dx, [si+6]
  6196                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  6197                                  
  6198                                  ; now calculate size of fat table
  6199                                  
  6200 00001F45 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6201                                  					; save number of (root)	dir entries
  6202 00001F48 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6203 00001F4B 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6204 00001F4E 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6205                                  					; save sectors per cluster
  6206                                  
  6207                                  		; 14/08/2023
  6208 00001F51 8A1E[CC16]              		mov	bl, [fbigfat]
  6209 00001F55 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6210 00001F58 F6C340                  		test	bl, 40h
  6211                                  
  6212                                  		; 17/10/2022
  6213 00001F5B F606[CC16]40            		test	byte [fbigfat], 40h
  6214                                  		;test	ds:fbigfat, 40h	; fbig
  6215                                  					; if (fbigfat)
  6216 00001F60 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6217                                  
  6218                                  ; we don't need to change "small fat" logic since it is gauranteed
  6219                                  ; that double word total sector will not use 12 bit fat (unless
  6220                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6221                                  ; so in this case we assume dx = 0 !!
  6222                                  
  6223 00001F62 31DB                    		xor	bx, bx		; (12 bit fat)
  6224 00001F64 88EB                    		mov	bl, ch
  6225 00001F66 4B                      		dec	bx
  6226 00001F67 01C3                    		add	bx, ax		; dx=0
  6227 00001F69 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6228 00001F6B 43                      		inc	bx		; BDS.secperclus
  6229 00001F6C 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6230 00001F6F 89DE                    		mov	si, bx
  6231 00001F71 D1EB                    		shr	bx, 1
  6232 00001F73 01F3                    		add	bx, si
  6233 00001F75 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6234 00001F79 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6235 00001F7B 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6236                                  					; save number of fat sectors
  6237 00001F7E EB32                    		jmp	short massage_bpb
  6238                                  ; ---------------------------------------------------------------------------
  6239                                  
  6240                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6241                                  
  6242                                  dobig:					
  6243 00001F80 B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6244 00001F82 52                      		push	dx		; save total sectors (high)
  6245 00001F83 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6246 00001F86 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6247 00001F88 29D0                    		sub	ax, dx
  6248 00001F8A 5A                      		pop	dx
  6249 00001F8B 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6250 00001F8E 83E801                  		sub	ax, 1
  6251 00001F91 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6252                                  					; total	secs - reserved	secs - root dir	secs
  6253 00001F94 B302                    		mov	bl, 2
  6254 00001F96 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6255                                  					; bx = 256 * BDS.secperclus + 2
  6256                                  
  6257                                  ; I don't understand why to add bx here!!!
  6258                                  
  6259                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6260                                  		; 27/09/2022
  6261                                  		; (Microsoft FAT32 File	System Specification,
  6262                                  		; December 2000, Page 21)
  6263                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6264                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6265                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6266                                  		; (If FATType == FAT16,	BPB_FATSz16 = LOWORD(FATSz))
  6267                                  		
  6268                                  					; dx:ax = TmpVal1, bx = TmpVal2
  6269 00001F99 01D8                    		add	ax, bx		; 
  6270 00001F9B 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  6271 00001F9E 83E801                  		sub	ax, 1		
  6272 00001FA1 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  6273                                  
  6274                                  ; assuming dx in the table will never be bigger than bx.
  6275                                  
  6276 00001FA4 F7F3                    		div	bx		; BDS.fatsecs =
  6277                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6278 00001FA6 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6279                                  					; number of fat	sectors
  6280                                  
  6281                                  ; now, set the default filesys_id, volume label, serial number
  6282                                  
  6283                                  		; 14/08/2023
  6284                                  		; [di+1Fh] = [fbigfat]
  6285                                  		;
  6286                                  		;;mov	bl, ds:fbigfat
  6287                                  		;; 17/10/2022
  6288                                  		;mov	bl, [fbigfat]
  6289                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6290                                  
  6291                                  		; 14/08/2023
  6292                                  		;push	ds ; ds = cs = BIOSDATA
  6293 00001FA9 1E                      		push	ds
  6294 00001FAA 07                      		pop	es
  6295                                  		; 14/08/2023 
  6296                                  		; ds = cs = BIOSDATA
  6297                                  		;push	cs
  6298                                  		;pop	ds
  6299                                  		; 17/10/2022
  6300 00001FAB BD[CC05]                		mov	bp, CLEARIDS
  6301                                  		;mov	bp, 5D9h	; clear_ids
  6302                                  					; at 2C7h:5D9h = 70h:2B49h
  6303                                  					; at BIOSCODE:06ABh
  6304                                  					;	in PCDOS 7.1 IBMBIO.COM
  6305 00001FAE 0E                      		push	cs
  6306 00001FAF E8A5F7                  		call	call_bios_code
  6307                                  
  6308                                  		; 14/08/2023
  6309                                  		;pop	ds ; ds = cs = BIOSDATA
  6310                                  
  6311                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6312                                  ; set according to the partition information. we are going to
  6313                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6314                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6315                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6316                                  ; we don't do this for the bpb information from the boot record. we
  6317                                  ; are not going to change the bpb information from the boot record.
  6318                                  
  6319                                  massage_bpb:
  6320                                  		; 14/08/2023
  6321                                  		; [di+1Fh] = [fbigfat]
  6322                                  		;
  6323                                  		;; 12/12/2022
  6324                                  		;mov	bl, [fbigfat]
  6325                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6326                                  		;			; set size of fat on media
  6327                                  		;
  6328 00001FB2 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6329 00001FB5 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6330 00001FB8 83FA00                  		cmp	dx, 0		; double word total sectors?
  6331                                  		;ja	short goodret	; don't have to change it.
  6332                                  		; 12/12/2022
  6333 00001FBB 7714                    		ja	short short goodret2
  6334                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6335                                  		;ja	short goodret	; don't have to change it.
  6336                                  		; 12/12/2022
  6337 00001FBD 395519                  		cmp	[di+19h], dx ; 0
  6338 00001FC0 770F                    		ja	short goodret2
  6339 00001FC2 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6340                                  		;jb	short goodret
  6341                                  		; 12/12/2022
  6342 00001FC5 7209                    		jc	short goodret
  6343 00001FC7 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6344 00001FCA 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6345                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6346                                  		; 12/12/2022
  6347 00001FCD 89551B                  		mov	[di+1Bh], dx ; 0 
  6348                                  goodret:				
  6349                                  		;;mov	bl, ds:fbigfat
  6350                                  		; 12/12/2022
  6351                                  		;; 17/10/2022
  6352                                  		;mov	bl, [fbigfat]
  6353                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6354                                  		;			; set size of fat on media
  6355 00001FD0 F8                      		clc
  6356                                  ret_hard_err:
  6357                                  		; 12/12/2022
  6358                                  goodret2:					
  6359 00001FD1 07                      		pop	es
  6360                                  		;pop	ds	; ds = cs = BIOSDATA ; 14/08/2023
  6361 00001FD2 5B                      		pop	bx
  6362 00001FD3 5F                      		pop	di
  6363 00001FD4 C3                      		retn
  6364                                  
  6365                                  ; =============== S U B	R O U T	I N E =======================================
  6366                                  
  6367                                  ; 15/10/2022
  6368                                  
  6369                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6370                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6371                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6372                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6373                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6374                                  
  6375                                  		; 17/10/2022
  6376                                  cover_fdisk_bug:	
  6377                                  		; 14/08/2023		; ds = cs
  6378 00001FD5 50                      		push	ax
  6379 00001FD6 52                      		push	dx
  6380 00001FD7 56                      		push	si
  6381                                  		; 14/08/2023
  6382 00001FD8 803E[7401]29            		cmp	byte [disksector+26h], 29h
  6383                                  		;cmp	byte [cs:disksector+26h], 29h
  6384                                  					; [disksector+EXT_BOOT.SIG],
  6385                                  					; EXT_BOOT_SIGNATURE
  6386 00001FDD 742B                    		jz	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6387 00001FDF 817F073130              		cmp	word [bx+7], 3031h
  6388                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6389 00001FE4 7506                    		jnz	short cfb_chk_totalsecs ; 14/08/2023
  6390 00001FE6 807F0A30                		cmp	byte [bx+10], '0'
  6391                                  		;cmp	byte [cs:bx+10], '0'
  6392 00001FEA 751E                    		jnz	short cfb_retit
  6393                                  cfb_chk_totalsecs:
  6394                                  		; 17/10/2022		
  6395 00001FEC BE[5901]                		mov	si, disksector+11 ; 14Eh+0Bh
  6396                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6397                                  		; 14/08/2023
  6398 00001FEF 837C0800                		cmp	word [si+8], 0
  6399                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6400                                  					; just to make sure.
  6401 00001FF3 7415                    		jz	short cfb_retit
  6402                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6403                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6404                                  		; 14/08/2023
  6405 00001FF5 8B4408                  		mov	ax, [si+8]
  6406 00001FF8 034411                  		add	ax, [si+11h]
  6407                                  
  6408 00001FFB 730D                    		jnb	short cfb_retit
  6409 00001FFD 750B                    		jnz	short cfb_retit
  6410                                  					; if carry set and ax=0
  6411 00001FFF FF4C08                  		dec	word [si+8]
  6412                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
  6413                                  					; then decrease	BPB_TOTALSECTORS by 1
  6414 00002002 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6415 00002006 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6416                                  cfb_retit:				
  6417 0000200A 5E                      		pop	si
  6418 0000200B 5A                      		pop	dx
  6419 0000200C 58                      		pop	ax
  6420 0000200D C3                      		retn
  6421                                  
  6422                                  ; ---------------------------------------------------------------------------
  6423                                  
  6424 0000200E 0200                    word2:		dw 2
  6425 00002010 0300                    word3:		dw 3
  6426 00002012 0002                    word512:	dw 512
  6427                                  
  6428                                  ; =============== S U B	R O U T	I N E =======================================
  6429                                  
  6430                                  ; 15/10/2022
  6431                                  
  6432                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6433                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6434                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6435                                  ; as the bpb on the drive.
  6436                                  ;
  6437                                  ; no attempt is made to preserve registers since we are going to jump to
  6438                                  ; sysinit straight after this routine.
  6439                                  
  6440                                  setdrvparms:
  6441 00002014 31DB                    		xor	bx, bx
  6442                                  		; 18/10/2022
  6443 00002016 C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6444                                  _next_bds:				
  6445 0000201A 06                      		push	es
  6446 0000201B 57                      		push	di
  6447 0000201C 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6448 00002020 80FB05                  		cmp	bl, 5		; ffHardFile
  6449 00002023 753E                    		jnz	short nothardff
  6450 00002025 31D2                    		xor	dx, dx
  6451 00002027 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6452 0000202B 09C0                    		or	ax, ax
  6453 0000202D 7508                    		jnz	short get_ccyl
  6454 0000202F 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6455 00002033 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6456                                  
  6457                                  get_ccyl:				
  6458 00002037 52                      		push	dx
  6459 00002038 50                      		push	ax
  6460 00002039 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6461 0000203D 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6462                                  					; assume sectors per cyl. < 64k.
  6463 00002041 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6464 00002043 58                      		pop	ax
  6465 00002044 5A                      		pop	dx		; dx:ax	= total	sectors
  6466 00002045 50                      		push	ax
  6467 00002046 89D0                    		mov	ax, dx
  6468 00002048 31D2                    		xor	dx, dx
  6469 0000204A F7F1                    		div	cx
  6470 0000204C 2EA3[2905]              		mov	[cs:temp_h], ax	; ax be	0 here.
  6471 00002050 58                      		pop	ax
  6472 00002051 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6473 00002053 09D2                    		or	dx, dx
  6474 00002055 7401                    		jz	short no_cyl_rnd ; came out even
  6475 00002057 40                      		inc	ax		; round	up
  6476                                  
  6477                                  no_cyl_rnd:				
  6478 00002058 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6479 0000205C 06                      		push	es
  6480 0000205D 1F                      		pop	ds
  6481 0000205E 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6482                                  					; ds:si	-> bpb for hard	file
  6483 00002061 EB55                    		jmp	short set_recbpb
  6484                                  ; ---------------------------------------------------------------------------
  6485                                  
  6486                                  nothardff:				
  6487 00002063 0E                      		push	cs
  6488 00002064 1F                      		pop	ds
  6489                                  
  6490                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6491                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6492                                  
  6493                                  		; 10/12/2022
  6494                                  		; ds = cs
  6495                                  		; 17/10/2022 (ds=cs)
  6496 00002065 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  6497                                  		;cmp	byte [cs:fakefloppydrv], 1
  6498 0000206A 7454                    		jz	short go_to_next_bds
  6499 0000206C 80FB07                  		cmp	bl, 7		; ffother
  6500                                  					; special case "other" type of medium
  6501 0000206F 753D                    		jnz	short not_process_other
  6502                                  process_other:
  6503 00002071 31D2                    		xor	dx, dx
  6504 00002073 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6505 00002076 F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6506 00002079 F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6507 0000207C 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6508                                  					; have the total number of sectors
  6509 0000207F 48                      		dec	ax
  6510 00002080 B201                    		mov	dl, 1
  6511                                  _again:					
  6512 00002082 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6513 00002085 7206                    		jb	short _@@
  6514 00002087 D1E8                    		shr	ax, 1
  6515 00002089 D0E2                    		shl	dl, 1
  6516 0000208B EBF5                    		jmp	short _again
  6517                                  ; ---------------------------------------------------------------------------
  6518                                  
  6519                                  _@@:					
  6520 0000208D 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  6521 00002090 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  6522 00002092 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6523                                  __@@:					
  6524 00002097 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6525                                  
  6526                                  ; logic to get the sectors/fat area.
  6527                                  ; fat entry is assumed to be 1.5 bytes!!!
  6528                                  
  6529                                  		; 10/12/2022
  6530                                  		; ds = cs
  6531                                  		; 17/10/2022 (ds=cs)
  6532 0000209A F726[1020]              		mul	word [word3]
  6533 0000209E F736[0E20]              		div	word [word2]
  6534 000020A2 31D2                    		xor	dx, dx
  6535 000020A4 F736[1220]              		div	word [word512]
  6536                                  		;
  6537                                  		; 10/12/2022
  6538                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6539                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6540                                  		;xor	dx, dx
  6541                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6542                                  		;
  6543 000020A8 40                      		inc	ax		; + 1
  6544                                  no_round_up:
  6545 000020A9 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6546 000020AC EB12                    		jmp	short go_to_next_bds
  6547                                  ; ---------------------------------------------------------------------------
  6548                                  
  6549                                  not_process_other:			
  6550 000020AE D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  6551                                  		;mov	si, bpbtable
  6552                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6553                                  		; 09/12/2022
  6554                                  		;mov	si, BPBTABLE
  6555                                  		;mov	si, [bx+si]	; get address of bpb
  6556                                  		; 10/12/2022
  6557                                  		;mov	si, [BPBTABLE+bx]
  6558                                  		; 13/12/2022
  6559                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  6560                                  		; 14/08/2023
  6561                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  6562                                  							; correct offset
  6563 000020B0 8BB7[7673]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  6564                                  		
  6565                                  		; 28/08/2023
  6566 000020B4 81C6A03C                		add	si, SYSINIT_OFFSET
  6567                                  set_recbpb:				
  6568 000020B8 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6569                                  					; es:di	-> recbpb
  6570 000020BB B91900                  		mov	cx, 25		; bpbx.size
  6571 000020BE F3A4                    		rep movsb		; move (size bpbx) bytes	
  6572                                  go_to_next_bds:				
  6573 000020C0 5F                      		pop	di
  6574 000020C1 07                      		pop	es		; restore pointer to bds
  6575 000020C2 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6576 000020C5 83FFFF                  		cmp	di, 0FFFFh	; -1
  6577 000020C8 740A                    		jz	short got_end_of_bds_chain
  6578 000020CA E94DFF                  		jmp	_next_bds
  6579                                  ; ---------------------------------------------------------------------------
  6580                                  
  6581                                  		; 18/12/2022
  6582                                  ;got_end_of_bds_chain:			
  6583                                  		;retn
  6584                                  
  6585                                  ; =============== S U B	R O U T	I N E =======================================
  6586                                  
  6587                                  ; 15/10/2022
  6588                                  ; 30/12/2018 - Retro DOS v4.0
  6589                                  
  6590                                  ; al = device number
  6591                                  
  6592                                  print_init:	
  6593 000020CD 98                      		cbw
  6594 000020CE 89C2                    		mov	dx, ax
  6595 000020D0 B401                    		mov	ah, 1
  6596 000020D2 CD17                    		int	17h		; PRINTER - INITIALIZE
  6597                                  					; DX = printer port (0-3)
  6598                                  					; Return: AH = status
  6599                                  got_end_of_bds_chain:	; 18/12/2022
  6600 000020D4 C3                      		retn
  6601                                  
  6602                                  ; =============== S U B	R O U T	I N E =======================================
  6603                                  
  6604                                  ; al = device number
  6605                                  
  6606                                  aux_init:
  6607 000020D5 98                      		cbw
  6608 000020D6 89C2                    		mov	dx, ax
  6609                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  6610                                  					; 2400,n,1,8 (msequ.inc)
  6611                                  		;mov	ah, 0
  6612                                  		; 10/12/2022
  6613 000020D8 B8A300                  		mov	ax, 00A3h
  6614 000020DB CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  6615                                  					; 	AL = initializing parameters,
  6616                                  					;	DX = port number (0-3)
  6617                                  					; Return: AH = RS-232 status code bits,
  6618                                  					;	  AL = modem status bits
  6619 000020DD C3                      		retn
  6620                                  
  6621                                  ; =============== S U B	R O U T	I N E =======================================
  6622                                  
  6623                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6624                                  ; 30/12/2018 - Retro DOS v4.0
  6625                                  ; 03/06/2018 - Retro DOS v3.0
  6626                                  ; (19/03/2018 - Retro DOS v2.0)
  6627                                  
  6628                                  ; domini **********************************************************************
  6629                                  ;
  6630                                  ;mini disk initialization routine. called right after dohard
  6631                                  ;modified for >2 hardfile support
  6632                                  ;
  6633                                  ; **cs=ds=es=datagrp
  6634                                  ;
  6635                                  ; **domini will search for every extended partition in the system, and
  6636                                  ;   initialize it.
  6637                                  ;
  6638                                  ; **bdsm stands for bds table for mini disk and located right after the label
  6639                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  6640                                  ;   address of bdsm table.
  6641                                  ;
  6642                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  6643                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  6644                                  ;   right now, they are called as ismini, hidden_trks respectively.
  6645                                  ;
  6646                                  ; **domini will use the same routine in sethard routine after label set2 to
  6647                                  ;   save coding.
  6648                                  ;
  6649                                  ; **drvmax determined in dohard routine will be used for the next
  6650                                  ;   available logical mini disk drive number.
  6651                                  ;
  6652                                  ; input: drvmax, dskdrvs
  6653                                  ;
  6654                                  ; output: minidisk installed. bdsm table established and installed to bds.
  6655                                  ;	  end_of_bdsm - ending offset address of bdsm.
  6656                                  ;
  6657                                  ; called modules:
  6658                                  ;		  getboot
  6659                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  6660                                  ;
  6661                                  ;		  setmini (new, it will use set2 routine)
  6662                                  ;
  6663                                  ; variables used: end_of_bdsm
  6664                                  ;		  rom_minidisk_num
  6665                                  ;		  mini_hdlim, mini_seclim
  6666                                  ;		  BDS_STRUC, start_bds
  6667                                  ;
  6668                                  ;******************************************************************************
  6669                                  
  6670                                  		; 19/10/2022
  6671                                  domini:	
  6672 000020DE 8A36[4317]              		mov	dh, [hnum]	; get number of hardfiles
  6673                                  		; 10/12/2022
  6674 000020E2 20F6                    		and	dh, dh
  6675                                  		;cmp	dh, 0
  6676 000020E4 7431                    		jz	short dominiret	; no hard file?	then exit.
  6677 000020E6 B280                    		mov	dl, 80h		; start	with hardfile 80h
  6678                                  domini_loop:				
  6679 000020E8 52                      		push	dx
  6680 000020E9 8816[4217]              		mov	[rom_minidisk_num], dl
  6681 000020ED B408                    		mov	ah, 8
  6682 000020EF CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6683                                  					; DL = drive number
  6684                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6685                                  					; DL = number of consecutive drives
  6686                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6687 000020F1 FEC6                    		inc	dh
  6688 000020F3 31C0                    		xor	ax, ax
  6689 000020F5 88F0                    		mov	al, dh
  6690 000020F7 A3[4817]                		mov	[mini_hdlim], ax ; # of heads
  6691 000020FA 80E13F                  		and	cl, 3Fh
  6692 000020FD 88C8                    		mov	al, cl
  6693 000020FF A3[4A17]                		mov	[mini_seclim], ax ; # of sectors/track
  6694 00002102 06                      		push	es
  6695 00002103 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6696 00002107 E87AFB                  		call	getboot		; read master boot record into
  6697                                  					; initbootsegment:bootbias
  6698 0000210A 7203                    		jb	short domininext
  6699 0000210C E80900                  		call	find_mini_partition
  6700                                  domininext:				
  6701 0000210F 07                      		pop	es
  6702 00002110 5A                      		pop	dx
  6703 00002111 FEC2                    		inc	dl		; next hard file
  6704 00002113 FECE                    		dec	dh
  6705 00002115 75D1                    		jnz	short domini_loop
  6706                                  dominiret:				
  6707 00002117 C3                      		retn
  6708                                  
  6709                                  ; =============== S U B	R O U T	I N E =======================================
  6710                                  
  6711                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6712                                  ; 30/12/2018 - Retro DOS v4.0
  6713                                  
  6714                                  ;find_mini_partition tries to find every extended partition on a disk.
  6715                                  ;at entry:	di -> bdsm entry
  6716                                  ;		es:bx -> 07c0:bootbias - master boot record
  6717                                  ;		rom_minidisk_num - rom drive number
  6718                                  ;		drvmax - logical drive number
  6719                                  ;		mini_hdlim, mini_seclim
  6720                                  ;
  6721                                  ;called routine: setmini which uses set2 (in sethard routine)
  6722                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  6723                                  
  6724                                  
  6725                                  find_mini_partition:	
  6726 00002118 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  6727                                  fmpnext:				
  6728 0000211C 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  6729 00002120 740A                    		jz	short fmpgot
  6730 00002122 83C310                  		add	bx, 16
  6731 00002125 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6732 00002129 75F1                    		jnz	short fmpnext
  6733                                  		;jmp	short fmpnextfound ; extended partition	not found
  6734                                  		; 18/12/2022
  6735                                  fmpnextfound:
  6736 0000212B C3                      		retn
  6737                                  
  6738                                  ;		; 30/07/2019 - Retro DOS v3.2
  6739                                  ;		jb	short fmpnext
  6740                                  ;fmpret:
  6741                                  ;		retn	; 29/05/2019
  6742                                  
  6743                                  ; ---------------------------------------------------------------------------
  6744                                  
  6745                                  		; 19/10/2022
  6746                                  fmpgot:					; found my partition.				
  6747 0000212C E89D00                  		call	dmax_check	; check	for drvmax already 26
  6748 0000212F 73FA                    		jnb	short fmpnextfound ; done if too many
  6749 00002131 8B3E[4617]              		mov	di, [end_of_bdss] ; get next free	bds
  6750 00002135 C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  6751                                  		; 10/12/2022
  6752 0000213A 804D2301                		or	byte [di+23h], 1
  6753                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  6754                                  					; fNon_Removable
  6755 0000213E C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  6756                                  					; ffHardFile
  6757 00002142 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  6758 00002147 A1[4817]                		mov	ax, [mini_hdlim]
  6759 0000214A 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  6760 0000214D A1[4A17]                		mov	ax, [mini_seclim]
  6761 00002150 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  6762 00002153 A0[4217]                		mov	al, [rom_minidisk_num]
  6763 00002156 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  6764                                  					; set physical number
  6765 00002159 A0[7500]                		mov	al, [drvmax]
  6766 0000215C 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  6767                                  					; set logical number
  6768 0000215F 26837F0A00              		cmp	word [es:bx+10], 0
  6769 00002164 7707                    		ja	short fmpgot_cont
  6770 00002166 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  6771                                  					; only lower word is meaningful.
  6772 0000216B 72BE                    		jb	short fmpnextfound
  6773                                  					; should be bigger than 64 sectors at least
  6774                                  fmpgot_cont:				
  6775 0000216D 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  6776 00002170 268A7702                		mov	dh, [es:bx+2]	; cylinder
  6777 00002174 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  6778 00002177 D0C6                    		rol	dh, 1
  6779 00002179 D0C6                    		rol	dh, 1
  6780 0000217B 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  6781 0000217F 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  6782                                  					; set hidden trks
  6783 00002182 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  6784 00002186 268A7701                		mov	dh, [es:bx+1]	; head
  6785 0000218A 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6786 0000218E BB0002                  		mov	bx, 200h	; bootbias
  6787 00002191 B80102                  		mov	ax, 201h
  6788 00002194 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6789                                  					; AL = number of sectors to read, CH = track, CL = sector
  6790                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6791                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6792 00002196 7293                    		jb	short fmpnextfound
  6793 00002198 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  6794                                  
  6795                                  		; 14/08/2023
  6796                                  		;push	es
  6797 0000219B E80800                  		call	setmini		; install a mini disk.
  6798                                  					; bx value saved.
  6799                                  		;pop	es  ; 14/08/2023
  6800 0000219E 7203                    		jb	short fmpnextchain
  6801 000021A0 E83E00                  		call	xinstall_bds	; -- install the bdsm into table
  6802                                  fmpnextchain:				
  6803 000021A3 E976FF                  		jmp	fmpnext		; let's find out
  6804                                  					; if we	have any chained partition
  6805                                  ; ---------------------------------------------------------------------------
  6806                                  
  6807                                  		; 18/12/2022
  6808                                  ;fmpnextfound:				
  6809                                  		;retn
  6810                                  
  6811                                  ; =============== S U B	R O U T	I N E =======================================
  6812                                  
  6813                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6814                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6815                                  
  6816                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  6817                                  	
  6818 000021A6 57                      		push	di
  6819 000021A7 53                      		push	bx
  6820                                  		; 14/08/2023
  6821                                  		; ds = cs = BIOSDATA segment
  6822                                  		;push	ds
  6823 000021A8 06                      		push	es
  6824                                  setmini_1:				
  6825 000021A9 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  6826 000021AD 741A                    		jz	short setmini_2
  6827 000021AF 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  6828 000021B3 7414                    		jz	short setmini_2
  6829 000021B5 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG	partition
  6830 000021B9 740E                    		jz	short setmini_2
  6831 000021BB 83C310                  		add	bx, 16
  6832 000021BE 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6833 000021C2 75E5                    		jnz	short setmini_1
  6834 000021C4 F9                      		stc
  6835 000021C5 07                      		pop	es
  6836                                  		; 14/08/2023
  6837                                  		;pop	ds
  6838 000021C6 5B                      		pop	bx
  6839 000021C7 5F                      		pop	di
  6840 000021C8 C3                      		retn
  6841                                  
  6842                                  ; ---------------------------------------------------------------------------
  6843                                  setmini_2:				
  6844 000021C9 E964FB                  		jmp	set2		; branch into middle of sethard
  6845                                  
  6846                                  ; =============== S U B	R O U T	I N E =======================================
  6847                                  
  6848                                  ; 15/10/2022
  6849                                  ; 28/12/2018 - Retro DOS v4.0
  6850                                  ;
  6851                                  ; dmax_check --- call this when we want to install a new drive.
  6852                                  ;		it checks for drvmax < 26 to see if there is
  6853                                  ;		a drive letter left.
  6854                                  ;
  6855                                  ;	drvmax < 26 : carry SET!
  6856                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  6857                                  ;			trash ax
  6858                                  
  6859                                  dmax_check:	
  6860 000021CC 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  6861 000021D1 720D                    		jb	short dmax_ok	; return with carry if okay
  6862 000021D3 06                      		push	es
  6863                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  6864 000021D4 B83A04                  		mov	ax, SYSINITSEG	; 17/10/2022	
  6865 000021D7 8EC0                    		mov	es, ax
  6866                                  		; 18/10/2022
  6867 000021D9 26C606[FF03]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  6868                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  6869                                  					; set message flag
  6870                                  					; [SYSINIT+toomanydrivesflag]
  6871 000021DF 07                      		pop	es
  6872                                  
  6873                                  		;;push	es
  6874                                  		;;mov	ax,SYSINIT_SEG
  6875                                  		;;mov	es,ax
  6876                                  		;;mov	byte [es:toomanydrivesflag],1
  6877                                  					; set message flag
  6878                                  		;;pop	es
  6879                                  		;
  6880                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  6881                                  dmax_ok:				
  6882 000021E0 C3                      		retn
  6883                                  
  6884                                  ; =============== S U B	R O U T	I N E =======================================
  6885                                  
  6886                                  ; 18/10/2022
  6887                                  ; 15/10/2022
  6888                                  ; 28/12/2018 - Retro DOS v4.0						
  6889                                  ;								 
  6890                                  ;	link next bds (at ds:di) into the chain. assume that the
  6891                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  6892                                  ;	  dskdrv_table, and end_of_bdss.	
  6893                                  
  6894                                  xinstall_bds:		
  6895 000021E1 56                      		push	si
  6896 000021E2 53                      		push	bx
  6897 000021E3 8B36[1901]              		mov	si, [start_bds]	; get first bds
  6898                                  xinstall_bds_1:				
  6899 000021E7 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  6900 000021EA 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  6901                                  		;mov	si, [si+BDS.link]
  6902 000021EC 8B34                    		mov	si, [si]	; chain	through	list
  6903 000021EE EBF7                    		jmp	short xinstall_bds_1
  6904                                  ; ---------------------------------------------------------------------------
  6905                                  
  6906                                  xinstall_bds_2:				
  6907                                  		;mov	[si+BDS.link], di
  6908 000021F0 893C                    		mov	[si], di
  6909                                  		;mov	[si+BDS.link+2], ds
  6910 000021F2 8C5C02                  		mov	[si+2], ds
  6911                                  		;mov	word [di+BDS.link], -1
  6912 000021F5 C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  6913                                  		;mov	[di+BDS.link+2], ds
  6914 000021F9 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  6915                                  		; 20/03/2019 - Retro DOS v4.0
  6916                                  		;lea	bx, [di+BDS.BPB]
  6917 000021FC 8D5D06                  		lea	bx, [di+6]
  6918 000021FF 8B36[4417]              		mov	si, [last_dskdrv_table]
  6919 00002203 891C                    		mov	[si], bx
  6920 00002205 8306[4417]02            		add	word [last_dskdrv_table], 2
  6921 0000220A FE06[7500]              		inc	byte [drvmax]
  6922 0000220E 8306[4617]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  6923 00002213 5B                      		pop	bx
  6924 00002214 5E                      		pop	si
  6925 00002215 C3                      		retn
  6926                                  
  6927                                  ; =============== S U B	R O U T	I N E =======================================
  6928                                  
  6929                                  ; 17/10/2022
  6930                                  ; 15/10/2022
  6931                                  ; 28/12/2018 - Retro DOS v4.0
  6932                                  ; 03/06/2018 - Retro DOS v3.0
  6933                                  
  6934                                  cmos_clock_read:	
  6935 00002216 50                      		push	ax
  6936 00002217 51                      		push	cx
  6937 00002218 52                      		push	dx
  6938 00002219 55                      		push	bp
  6939 0000221A 31ED                    		xor	bp, bp
  6940                                  loop_clock:				
  6941 0000221C 31C9                    		xor	cx, cx
  6942 0000221E 31D2                    		xor	dx, dx
  6943 00002220 B402                    		mov	ah, 2
  6944 00002222 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  6945                                  					; Return: CH = hours in	BCD
  6946                                  					; CL = minutes in BCD
  6947                                  					; DH = seconds in BCD
  6948 00002224 83F900                  		cmp	cx, 0
  6949 00002227 7512                    		jnz	short clock_present
  6950 00002229 83FA00                  		cmp	dx, 0
  6951 0000222C 750D                    		jnz	short clock_present
  6952 0000222E 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  6953 00002231 741C                    		jz	short no_readdate ; was	at zero	setting.
  6954 00002233 45                      		inc	bp		; only perform delay once.
  6955 00002234 B90040                  		mov	cx, 4000h	; 16384
  6956                                  delay:					
  6957 00002237 E2FE                    		loop	delay
  6958 00002239 EBE1                    		jmp	short loop_clock
  6959                                  ; ---------------------------------------------------------------------------
  6960                                  
  6961                                  clock_present:				
  6962 0000223B 2EC606[F304]01          		mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  6963 00002241 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  6964                                  					; possibly destroyed by	cp dos and
  6965                                  					; post routine did not restore that.
  6966 00002244 56                      		push	si
  6967 00002245 E8E1F2                  		call	read_real_date	; read real-time clock for date
  6968 00002248 FA                      		cli
  6969                                  		;mov	ds:daycnt, si	; set system date
  6970 00002249 8936[F004]              		mov	[daycnt], si
  6971 0000224D FB                      		sti
  6972 0000224E 5E                      		pop	si
  6973                                  
  6974                                  no_readdate:				
  6975 0000224F 5D                      		pop	bp
  6976 00002250 5A                      		pop	dx
  6977 00002251 59                      		pop	cx
  6978 00002252 58                      		pop	ax
  6979 00002253 C3                      		retn
  6980                                  
  6981                                  ; ---------------------------------------------------------------------------
  6982                                  
  6983                                  ; the following code is written by jack gulley in engineering group.
  6984                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  6985                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  6986                                  ; the cmos clock rate are still slow which slow down disk operations
  6987                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  6988                                  ; to fix this problem at the request of cp dos.
  6989                                  ;
  6990                                  ; the program is modified to be run on msinit. equates are defined
  6991                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  6992                                  ;
  6993                                  ;  the following code cmosck is used to insure that the cmos has not
  6994                                  ;	had its rate controls left in an invalid state on older at's.
  6995                                  ;
  6996                                  ;	it checks for an at model byte "fc" with a submodel type of
  6997                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  6998                                  ;	bits in case post has not done it. this initilization routine
  6999                                  ;	is only needed once when dos loads. it should be run as soon
  7000                                  ;	as possible to prevent slow diskette access.
  7001                                  ;
  7002                                  ;	this code exposes one to dos clearing cmos setup done by a
  7003                                  ;	resident program that hides and re-boots the system.
  7004                                  
  7005                                  cmosck:					; check and reset rtc rate bits	
  7006                                  
  7007                                  ;model byte and submodel byte were already determined in msinit.
  7008                                  
  7009                                  	; 16/06/2018 - Retro DOS v3.0
  7010                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  7011                                  			
  7012 00002254 50                      		push	ax
  7013 00002255 2E803E[3E06]FC          		cmp	byte [cs:model_byte], 0FCh
  7014 0000225B 7525                    		jnz	short cmosck9	; Exit if not an AT model
  7015 0000225D 2E803E[3F06]06          		cmp	byte [cs:secondary_model_byte], 6
  7016                                  					; Is it 06 for the industral AT ?
  7017 00002263 7408                    		jz	short cmosck4	; Go reset CMOS	periodic rate if 06
  7018 00002265 2E803E[3F06]04          		cmp	byte [cs:secondary_model_byte], 4
  7019                                  					; Is it 00, 01, 02, or 03 ?
  7020 0000226B 7315                    		jnb	short cmosck9	; EXIT if problem fixed by POST  
  7021                                  					; Also,Secondary_model_byte = 0 
  7022                                  					;   when AH=0C0h, int 15h failed.
  7023                                  					;	RESET THE CMOS PERIODIC RATE 
  7024                                  					;  Model=FC submodel=00,01,02,03 or 06 
  7025                                  cmosck4:				
  7026 0000226D B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  7027                                  					; NMI disabled on return
  7028 0000226F B426                    		mov	ah, 26h		; 00100110b
  7029                                  					; Set divider &	rate selection
  7030 00002271 E83000                  		call	cmos_write
  7031 00002274 B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  7032                                  					; NMI disabled on return
  7033 00002276 E80B00                  		call	cmos_read
  7034 00002279 2407                    		and	al, 7		; 00000111b
  7035                                  					; clear	SET,PIE,AIE,UIE,SQWE
  7036 0000227B 88C4                    		mov	ah, al
  7037 0000227D B00B                    		mov	al, 0Bh		; cmos_reg_b
  7038                                  					; NMI enabled on return
  7039 0000227F E82200                  		call	cmos_write
  7040                                  cmosck9:				
  7041 00002282 58                      		pop	ax
  7042 00002283 C3                      		retn
  7043                                  
  7044                                  ; =============== S U B	R O U T	I N E =======================================
  7045                                  
  7046                                  ;--- CMOS_READ -----------------------------------------------------------------
  7047                                  ;		read byte from cmos system clock configuration table	       :
  7048                                  ;									       :
  7049                                  ; input: (al)=	cmos table address to be read				       :
  7050                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7051                                  ;		bits 6-0 = address of table location to read		       :
  7052                                  ;									       :
  7053                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  7054                                  ;		on then nmi left disabled.  during the cmos read both nmi and  :
  7055                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7056                                  ;		the cmos address register is pointed to a default value and    :
  7057                                  ;		the interrupt flag restored to the entry state on return.      :
  7058                                  ;		only the (al) register and the nmi state is changed.	       :
  7059                                  ;-------------------------------------------------------------------------------
  7060                                  
  7061                                  cmos_read:				; read location (al) into (al)	
  7062 00002284 9C                      		pushf
  7063 00002285 FA                      		cli
  7064 00002286 53                      		push	bx
  7065 00002287 50                      		push	ax		; AL = cmos table address to be	read
  7066 00002288 0C80                    		or	al, 80h
  7067 0000228A E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7068                                  					; RTC Seconds
  7069 0000228C 90                      		nop			; (undocumented	delay needed)
  7070 0000228D E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7071 0000228F 89C3                    		mov	bx, ax
  7072 00002291 58                      		pop	ax
  7073 00002292 2480                    		and	al, 80h
  7074 00002294 0C0F                    		or	al, 0Fh
  7075 00002296 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7076                                  					; RTC Seconds
  7077 00002298 90                      		nop
  7078 00002299 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7079 0000229B 89D8                    		mov	ax, bx
  7080 0000229D 5B                      		pop	bx
  7081 0000229E 0E                      		push	cs		; *place code segment in stack and
  7082 0000229F E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  7083 000022A2 C3                      		retn			; return with flags restored
  7084                                  
  7085                                  ; ---------------------------------------------------------------------------
  7086                                  
  7087                                  cmos_popf:				
  7088 000022A3 CF                      		iret			; popf for level b- parts
  7089                                  					; return far and restore flags
  7090                                  
  7091                                  ; =============== S U B	R O U T	I N E =======================================
  7092                                  
  7093                                  ;--- cmos_write ----------------------------------------------------------------
  7094                                  ;		write byte to cmos system clock configuration table	       :
  7095                                  ;									       :
  7096                                  ; input: (al)=	cmos table address to be written to			       :
  7097                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7098                                  ;		bits 6-0 = address of table location to write		       :
  7099                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  7100                                  ;									       :
  7101                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  7102                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  7103                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7104                                  ;		the cmos address register is pointed to a default value and    :
  7105                                  ;		the interrupt flag restored to the entry state on return.      :
  7106                                  ;		only the cmos location and the nmi state is changed.	       :
  7107                                  ;-------------------------------------------------------------------------------
  7108                                  
  7109                                  cmos_write:				; write (ah) to location (al)	
  7110 000022A4 9C                      		pushf			; write (ah) to location (al)
  7111 000022A5 50                      		push	ax		; save work register values
  7112 000022A6 FA                      		cli
  7113 000022A7 50                      		push	ax		; save user nmi	state
  7114 000022A8 0C80                    		or	al, 80h		; disable nmi for us
  7115 000022AA E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7116                                  					; RTC Seconds
  7117 000022AC 90                      		nop
  7118 000022AD 88E0                    		mov	al, ah
  7119 000022AF E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  7120 000022B1 58                      		pop	ax		; get user nmi
  7121 000022B2 2480                    		and	al, 80h
  7122 000022B4 0C0F                    		or	al, 0Fh
  7123 000022B6 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7124                                  					; RTC Seconds
  7125 000022B8 90                      		nop
  7126 000022B9 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7127 000022BB 58                      		pop	ax		; restore work registers
  7128 000022BC 0E                      		push	cs		; *place code segment in stack and
  7129 000022BD E8E3FF                  		call	cmos_popf	; *handle popf for b- level 80286
  7130 000022C0 C3                      		retn
  7131                                  
  7132                                  ; 21/12/2022
  7133                                  ; ---------------------------------------------------------------------------
  7134                                  ; ---------------------------------------------------------------------------
  7135                                  %if 0
  7136                                  
  7137                                  ; ---------------------------------------------------------------------------
  7138                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  7139                                  ; ---------------------------------------------------------------------------
  7140                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  7141                                  ; ---------------------------------------------------------------------------
  7142                                  
  7143                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7144                                  ;
  7145                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  7146                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  7147                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  7148                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7149                                  
  7150                                  ; =============== S U B	R O U T	I N E =======================================
  7151                                  
  7152                                  ; GetClus, read in a cluster at a specified address
  7153                                  ;
  7154                                  ;  bx = cluster to read
  7155                                  ;  cx = sectors per cluster
  7156                                  ;  es:di = load location
  7157                                  
  7158                                  ; 17/10/2022
  7159                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7160                                  ; 09/12/2022
  7161                                  DISKRD equ diskrd
  7162                                  
  7163                                  		; 17/10/2022
  7164                                  getclus:				
  7165                                  		push	cx
  7166                                  		push	di
  7167                                  		mov	[cs:doscnt], cx
  7168                                  		mov	ax, bx
  7169                                  		dec	ax
  7170                                  		dec	ax
  7171                                  		mul	cx		; convert to logical sector
  7172                                  					; dx:ax	= matching logical sector number
  7173                                  					;	  starting from the data sector
  7174                                  		add	ax, [cs:bios_l]
  7175                                  		adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7176                                  unpack:					
  7177                                  		push	ds
  7178                                  		push	ax
  7179                                  		push	bx
  7180                                  		mov	si, [cs:fatloc]
  7181                                  		mov	ds, si
  7182                                  		mov	si, bx		; next cluster
  7183                                  		test	byte [cs:fbigfat], 40h	; fbig
  7184                                  					; 16 bit fat?
  7185                                  		jnz	short unpack16	; yes
  7186                                  		shr	si, 1		; 12 bit fat. si=si/2
  7187                                  					; si = clus + clus/2
  7188                                  		add	si, bx		;
  7189                                  					; (si =	byte offset of the cluster in the FAT)
  7190                                  		push	dx
  7191                                  		xor	dx, dx
  7192                                  		call	get_fat_sector
  7193                                  		pop	dx
  7194                                  		mov	ax, [bx]	; save it into ax
  7195                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7196                                  		; 25/06/2023
  7197                                  		;mov	al, [bx]	; splitted fat
  7198                                  		mov	[cs:temp_cluster], al
  7199                                  		inc	si		; (next	byte)
  7200                                  		push	dx
  7201                                  		xor	dx, dx
  7202                                  		call	get_fat_sector
  7203                                  		pop	dx
  7204                                  		;mov	al, ds:0
  7205                                  		mov	al, [0] ; 19/10/2022
  7206                                  		mov	[cs:temp_cluster+1], al
  7207                                  		mov	ax, [cs:temp_cluster]
  7208                                  even_odd:				
  7209                                  		pop	bx		; restore old fat entry	value
  7210                                  		push	bx		; save it right	away.
  7211                                  		shr	bx, 1		; was it even or odd?
  7212                                  		jnb	short havclus	; it was even.
  7213                                  		shr	ax, 1		; odd. massage fat value and keep
  7214                                  					; the highest 12 bits.
  7215                                  		shr	ax, 1
  7216                                  		shr	ax, 1
  7217                                  		shr	ax, 1
  7218                                  havclus:				
  7219                                  		mov	bx, ax		; now bx = new fat entry.
  7220                                  		and	bx, 0FFFh	; keep low 12 bits.
  7221                                  		jmp	short unpackx
  7222                                  ; ---------------------------------------------------------------------------
  7223                                  
  7224                                  unpack16:				
  7225                                  		push	dx
  7226                                  		xor	dx, dx
  7227                                  		shl	si, 1		; extend to 32 bit offset
  7228                                  		adc	dx, 0
  7229                                  		call	get_fat_sector
  7230                                  		pop	dx
  7231                                  		mov	bx, [bx]	;
  7232                                  					; bx = new fat entry.
  7233                                  unpackx:				
  7234                                  		pop	si		; restore old bx value into si
  7235                                  		pop	ax		; restore logical sector (low)
  7236                                  		pop	ds
  7237                                  		sub	si, bx
  7238                                  		cmp	si, -1		; one apart?
  7239                                  		jnz	short getcl2
  7240                                  		add	[cs:doscnt], cx
  7241                                  		jmp	short unpack
  7242                                  ; ---------------------------------------------------------------------------
  7243                                  
  7244                                  getcl2:					
  7245                                  		push	bx
  7246                                  		push	dx		; sector to read (high)
  7247                                  		push	ax		; sector to read (low)
  7248                                  		mov	ax, [cs:drvfat]	; get drive and	fat spec
  7249                                  		mov	cx, [cs:doscnt]
  7250                                  		pop	dx		; sector to read for diskrd (low)
  7251                                  		pop	word [cs:start_sec_h]
  7252                                  					; sector to read for diskrd (high)
  7253                                  		push	ds
  7254                                  		push	cs
  7255                                  		pop	ds
  7256                                  		push	cs		; simulate far call
  7257                                  		; 17/10/2022
  7258                                  		mov	bp, DISKRD	; 8E5h
  7259                                  		;mov	bp, 8E5h	; offset diskrd
  7260                                  					; 2C7h:8E5h = 70h:2E55h
  7261                                  		call	call_bios_code	; read the clusters
  7262                                  		pop	ds
  7263                                  		pop	bx
  7264                                  		pop	di
  7265                                  		mov	ax, [cs:doscnt]	; get number of	sectors	read
  7266                                  		xchg	ah, al		; multiply by 256
  7267                                  		shl	ax, 1		; times	2 equal	512
  7268                                  		add	di, ax		; update load location
  7269                                  		pop	cx		; restore sectors/cluster
  7270                                  		retn
  7271                                  
  7272                                  ; =============== S U B	R O U T	I N E =======================================
  7273                                  
  7274                                  
  7275                                  ;function: find and read the corresponding fat sector into ds:0
  7276                                  ;
  7277                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7278                                  ;     ds - fatloc segment
  7279                                  ;     cs:drvfat - logical drive number, fat id
  7280                                  ;     cs:md_sectorsize
  7281                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7282                                  ;
  7283                                  ;out). corresponding fat sector read in.
  7284                                  ;      bx = offset value from fatlog segment.
  7285                                  ;      other registera saved.
  7286                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7287                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7288                                  ;      should save this byte, and read the next fat sector to get the rest
  7289                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7290                                  
  7291                                  		; 17/10/2022
  7292                                  get_fat_sector:	
  7293                                  		push	ax
  7294                                  		push	cx
  7295                                  		push	di
  7296                                  		push	si
  7297                                  		push	es
  7298                                  		push	ds
  7299                                  		mov	ax, si
  7300                                  		mov	cx, [cs:md_sectorsize] ; 512
  7301                                  		div	cx		; ax = sector number, dx = offset
  7302                                  		nop
  7303                                  
  7304                                  		; Get rid of the assumption that
  7305                                  		; there	is only	one reserved sector
  7306                                  
  7307                                  		push	es
  7308                                  		push	ds
  7309                                  		push	di
  7310                                  		push	ax
  7311                                  		push	cs
  7312                                  		pop	ds
  7313                                  
  7314                                  		mov	ax, [cs:drvfat]	; get drive # and FAT id
  7315                                  		mov	bp, SETDRIVE
  7316                                  		;mov	bp, 4D7h	; setdrive
  7317                                  					; at 2C7h:4D7h = 70h:2A47h
  7318                                  		push	cs		; simulate far call
  7319                                  		call	call_bios_code	; get bds for drive
  7320                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7321                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7322                                  					; add #reserved_sectors
  7323                                  		pop	di
  7324                                  		pop	ds
  7325                                  		pop	es
  7326                                  		cmp	ax, [cs:last_fat_sec_num]
  7327                                  		jz	short gfs_split_chk ; don't need to read it again.
  7328                                  		mov	[cs:last_fat_sec_num], ax 
  7329                                  					; sector number
  7330                                  					; (in the partition, without hidden sectors)
  7331                                  		push	dx
  7332                                  		mov	word [cs:start_sec_h], 0 
  7333                                  					; prepare to read the fat sector
  7334                                  					; start_sec_h is always	0 for fat sector.
  7335                                  		mov	dx, ax
  7336                                  		mov	cx, 1		; 1 sector read
  7337                                  		mov	ax, [cs:drvfat]
  7338                                  		push	ds
  7339                                  		pop	es
  7340                                  		xor	di, di		; es:di	-> fatloc segment:0
  7341                                  		push	ds
  7342                                  		push	cs
  7343                                  		pop	ds
  7344                                  		push	cs		; simulate far call
  7345                                  		mov	bp, DISKRD	; 8E5h
  7346                                  		;mov	bp, 8E5h	; offset diskrd
  7347                                  					; 2C7h:8E5h = 70h:2E55h
  7348                                  		call	call_bios_code
  7349                                  		pop	ds
  7350                                  		pop	dx
  7351                                  		mov	cx, [cs:md_sectorsize] ; 512
  7352                                  
  7353                                  gfs_split_chk:				
  7354                                  		dec	cx		; 511
  7355                                  		cmp	dx, cx		; if offset points to the
  7356                                  					; last byte of this sector,
  7357                                  					; then splitted	entry.
  7358                                  		mov	bx, dx		; set bx to dx
  7359                                  		pop	ds
  7360                                  		pop	es
  7361                                  		pop	si
  7362                                  		pop	di
  7363                                  		pop	cx
  7364                                  		pop	ax
  7365                                  		retn
  7366                                  
  7367                                  ; 15/10/2022
  7368                                  ;Bios_Data_Init	ends
  7369                                  
  7370                                  %endif
  7371                                  ; ---------------------------------------------------------------------------
  7372                                  ; ---------------------------------------------------------------------------
  7373                                  
  7374                                  		; 09/12/2022
  7375                                  		;db 0
  7376                                  
  7377                                  numbertodiv	equ ($-BData_start)
  7378                                  numbertomod	equ (numbertodiv % 16)
  7379                                  
  7380                                  %if numbertomod>0 & numbertomod<16
  7381 000022C1 00<rep Fh>              		times (16-numbertomod) db 0
  7382                                  %endif
  7383                                  
  7384                                  ;align 16
  7385                                  
  7386                                  ; 09/12/2022
  7387                                  IOSYSCODESEGOFF	equ $ - BData_start
  7388                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7389                                  
  7390                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7391                                  ; ---------------------------------------------------------------------------
  7392                                  		;db 4 dup(0)
  7393                                  ; 09/12/2022		
  7394                                  ;		times 4 db 0	; 19/10/2022
  7395                                  ; ---------------------------------------------------------------------------
  7396                                  
  7397                                  ;============================================================================
  7398                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7399                                  ;============================================================================
  7400                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7401                                  
  7402                                  section .BIOSCODE vstart=0  
  7403                                  
  7404                                  BCode_start:	 ; 09/12/2022
  7405                                   
  7406                                  ; 02/10/2022
  7407                                  
  7408                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7409                                  ;----------------------------------------------------------------------------
  7410                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7411                                  ;----------------------------------------------------------------------------
  7412                                  
  7413                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7414 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7415 00000030 7000                    BiosDataWord:	dw 70h
  7416                                  
  7417                                  ; 15/10/2022
  7418                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7419                                  ; 09/12/2022
  7420                                  BIOSDATAWORD	equ BiosDataWord
  7421                                  
  7422                                  ; ---------------------------------------------------------------------------
  7423                                  
  7424                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7425                                  
  7426                                  ;************************************************************************
  7427                                  ;*									*
  7428                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7429                                  ;*	  trashes di, cx, es						*
  7430                                  ;*									*
  7431                                  ;*	cas -- should be made disposable!				*
  7432                                  ;*									*
  7433                                  ;************************************************************************
  7434                                  
  7435                                  _seg_reinit:
  7436 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7437                                  					; at 2C7h:30h or 70h:25A0h
  7438                                  		;mov	di, (offset cdev+2)
  7439 00000037 BF[E006]                		mov	di, cdev+2	; 19/10/2022
  7440 0000003A B90400                  		mov	cx, 4		; (end_BC_entries - cdev)/4
  7441                                  
  7442                                  _seg_reinit_1:				
  7443 0000003D AB                      		stosw			; modify Bios_Code entry points
  7444 0000003E 47                      		inc	di
  7445 0000003F 47                      		inc	di
  7446 00000040 E2FB                    		loop	_seg_reinit_1
  7447 00000042 CB                      		retf
  7448                                  
  7449                                  ; ---------------------------------------------------------------------------
  7450                                  
  7451                                  ; 15/10/2022
  7452                                  
  7453                                  ;************************************************************************
  7454                                  ;*									*
  7455                                  ;*	chardev_entry - main device driver dispatch routine		*
  7456                                  ;*	   called with a dummy parameter block on the stack		*
  7457                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  7458                                  ;*									*
  7459                                  ;*	will eventually take care of doing the transitions in		*
  7460                                  ;*	   out of Bios_Code						*
  7461                                  ;*									*
  7462                                  ;************************************************************************
  7463                                  
  7464                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  7465 00000043 56                      		push	si
  7466 00000044 50                      		push	ax
  7467 00000045 51                      		push	cx
  7468 00000046 52                      		push	dx
  7469 00000047 57                      		push	di
  7470 00000048 55                      		push	bp
  7471 00000049 1E                      		push	ds
  7472 0000004A 06                      		push	es
  7473 0000004B 53                      		push	bx
  7474 0000004C 89E5                    		mov	bp, sp
  7475 0000004E 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  7476                                  		;;mov	ds, word [cs:0030h]
  7477                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7478 00000051 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7479 00000056 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  7480 00000059 A2[2100]                		mov	[auxnum], al
  7481 0000005C 8826[E704]              		mov	[printdev], ah
  7482 00000060 8B34                    		mov	si, [si]	; point	to the device dispatch table
  7483 00000062 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  7484 00000066 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  7485 0000006A 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  7486 0000006E 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  7487 00000072 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  7488                                  		; 17/10/2022
  7489 00000076 81FE[9604]              		cmp	si, DSKTBL
  7490                                  		;cmp	si, 4A2h	; dsktbl
  7491                                  					; at 2C7h:4A2h = 70h:2A12h
  7492 0000007A 7517                    		jnz	short no_sector32_mapping
  7493                                  
  7494                                  ; Special case for 32-bit start sector number:
  7495                                  ;   if (si==dsktbl) /* if this is a disk device call */
  7496                                  ;      set high 16 bits of secnum to 0
  7497                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  7498                                  ;
  7499                                  ; pass high word of sector number in start_sec_h, low word in dx
  7500                                  ;
  7501                                  ; note: start_l and start_h are the offsets within the io_request packet
  7502                                  ;	  which contain the low and hi words of the 32 bit start sector if
  7503                                  ;	  it has been used.
  7504                                  ;
  7505                                  ; note: remember not to destroy the registers which have been set up before
  7506                                  
  7507                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  7508 0000007C C706[2B05]0000          		mov	word [start_sec_h], 0
  7509 00000082 83FAFF                  		cmp	dx, 0FFFFh
  7510 00000085 750C                    		jnz	short no_sector32_mapping
  7511 00000087 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  7512                                  					; 32 bits dsk req
  7513                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  7514 0000008B 8916[2B05]              		mov	[start_sec_h], dx
  7515 0000008F 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  7516                                  					; dx = packet.start_l
  7517                                  no_sector32_mapping:			
  7518 00000093 97                      		xchg	ax, di
  7519 00000094 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  7520 00000098 2E3A04                  		cmp	al, cs:[si]
  7521 0000009B 732C                    		jnb	short command_error
  7522 0000009D 98                      		cbw			; note that al <= 15 means ok
  7523 0000009E D1E0                    		shl	ax, 1
  7524 000000A0 01C6                    		add	si, ax
  7525 000000A2 97                      		xchg	ax, di
  7526 000000A3 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  7527 000000A7 FC                      		cld
  7528                                  		; 17/10/2022
  7529 000000A8 2EFF5401                		call	near [cs:si+1]
  7530                                  		;call	word ptr cs:si+1
  7531 000000AC 7202                    		jb	short already_got_ah_status
  7532 000000AE B401                    		mov	ah, 1
  7533                                  already_got_ah_status:
  7534                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  7535                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7536                                  					; cas note: shouldn't be needed!
  7537 000000B0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7538                                  		;lds	bx, ds:ptrsav
  7539 000000B5 C51E[1200]              		lds	bx, [ptrsav]
  7540 000000B9 894703                  		mov	[bx+3],	ax	; [bx+status]
  7541                                  					; mark operation complete
  7542 000000BC 5B                      		pop	bx
  7543 000000BD 07                      		pop	es
  7544 000000BE 1F                      		pop	ds
  7545 000000BF 5D                      		pop	bp
  7546 000000C0 5F                      		pop	di
  7547 000000C1 5A                      		pop	dx
  7548 000000C2 59                      		pop	cx
  7549 000000C3 58                      		pop	ax
  7550 000000C4 5E                      		pop	si
  7551 000000C5 83C402                  		add	sp, 2		; get rid of fake return address
  7552                                  	
  7553                                  		; fall through into bc_retf
  7554                                  ; ---------------------------------------------------------------------------	
  7555                                  bc_retf:
  7556 000000C8 CB                      		retf
  7557                                  ; ---------------------------------------------------------------------------
  7558                                  
  7559                                  command_error:				
  7560 000000C9 E80900                  		call	bc_cmderr
  7561 000000CC EBE2                    		jmp	short already_got_ah_status
  7562                                  ; 15/10/2022
  7563                                  ; 01/05/2019
  7564                                  
  7565                                  ;----------------------------------------------------------------------------
  7566                                  ; The following piece of hack is for supporting CP/M compatibility
  7567                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  7568                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  7569                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  7570                                  ; high.
  7571                                  ;----------------------------------------------------------------------------
  7572                                  
  7573                                  		;db 7 dup(0)
  7574                                  
  7575                                  		; 15/10/2022
  7576                                  
  7577 000000CE 0000                    		dw 0		; pad to bring offset to 0D0h
  7578                                  
  7579 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  7580                                  				;  which is the CP/M call 5 entry point
  7581                                  		
  7582                                  
  7583                                  ; ---------------------------------------------------------------------------
  7584                                  
  7585                                  ;	exit - all routines return through this path
  7586                                  
  7587                                  bc_cmderr:				
  7588 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  7589                                  					; unknown command error
  7590                                  
  7591                                  ; =============== S U B	R O U T	I N E =======================================
  7592                                  
  7593                                  ;	now zero the count field by subtracting its current value,
  7594                                  ;	  which is still in cx, from itself.
  7595                                  
  7596                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  7597                                  ;	  in order to return the number actually complete
  7598                                  
  7599                                  bc_err_cnt:	
  7600                                  		;les	bx, ds:ptrsav
  7601                                  		; 19/10/2022
  7602 000000D7 C41E[1200]              		les	bx, [ptrsav]
  7603 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  7604                                  					; # of successful i/o's
  7605 000000DF B481                    		mov	ah, 81h		; mark error return
  7606 000000E1 F9                      		stc			; indicate abnormal end
  7607 000000E2 C3                      		retn
  7608                                  
  7609                                  ; 15/10/2022
  7610                                  
  7611                                  ;Bios_Code ends
  7612                                  
  7613                                  ;----------------------------------------------------------------------------
  7614                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  7615                                  ;----------------------------------------------------------------------------
  7616                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7617                                  ; 10/01/2019 - Retro DOS v4.0
  7618                                  
  7619                                  ; 30/04/2019
  7620                                  
  7621                                  ;title	mschar - character and clock devices
  7622                                  
  7623                                  ;MODE_CTRLBRK	equ	0FFh
  7624                                  
  7625                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  7626                                  
  7627                                  ;************************************************************************
  7628                                  ;*									*
  7629                                  ;*	device driver dispatch tables					*
  7630                                  ;*									*
  7631                                  ;*	each table starts with a byte which lists the number of		*
  7632                                  ;*	legal functions, followed by that number of words. Each		*
  7633                                  ;*	word represents an offset of a routine in Bios_Code which	*
  7634                                  ;*	handles the function. The functions are terminated with		*
  7635                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  7636                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  7637                                  ;*	returned as abnormal completion status. Notice that ds		*
  7638                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  7639                                  ;*									*
  7640                                  ;************************************************************************
  7641                                  
  7642                                  		; 13/12/2022
  7643                                  		;db 0
  7644                                  
  7645                                  		; 13/12/202
  7646 000000E3 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  7647                                  					; 2C7h:0E4h = 70h:2654h
  7648 000000E4 [F901]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7649                                  					; 00 init
  7650 000000E6 [F901]                  		dw bc_exvec  ; 1FBh	; 01
  7651 000000E8 [F901]                  		dw bc_exvec  ; 1FBh	; 02
  7652 000000EA [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  7653                                  					; 03
  7654 000000EC [5B01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  7655                                  					; 04
  7656 000000EE [9E01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  7657                                  					; 05
  7658 000000F0 [F901]                  		dw bc_exvec  ; 1FBh	; 06
  7659 000000F2 [0702]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  7660                                  					; 07
  7661 000000F4 [FB01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  7662                                  					; 08
  7663 000000F6 [FB01]                  		dw con_writ  ; 1FDh	; 09
  7664 000000F8 [F901]                  		dw bc_exvec  ; 1FBh	; 0A
  7665                                  con_table_end:
  7666 000000FA 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  7667                                  					; 2C7h:0FBh = 70h:266Bh
  7668 000000FB [F901]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  7669 000000FD [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7670 000000FF [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7671 00000101 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  7672 00000103 [1802]                  		dw prn_input  ;	21Ah	; prn_input
  7673                                  					; 04 indicate zero chars read
  7674 00000105 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7675                                  					; 05 read non-destructive
  7676 00000107 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7677 00000109 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7678 0000010B [1D02]                  		dw prn_writ   ;	21Fh	; prn_writ
  7679 0000010D [1D02]                  		dw prn_writ   ; 21Fh	; 09
  7680 0000010F [4E02]                  		dw prn_stat   ; 251h	; prn_stat
  7681 00000111 [F901]                  		dw bc_exvec   ; 1FBh	; 0B
  7682 00000113 [F901]                  		dw bc_exvec   ; 1FBh	; 0C
  7683 00000115 [F901]                  		dw bc_exvec   ; 1FBh	; 0D
  7684 00000117 [F901]                  		dw bc_exvec   ; 1FBh	; 0E
  7685 00000119 [F901]                  		dw bc_exvec   ; 1FBh	; 0F
  7686 0000011B [8802]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  7687 0000011D [F901]                  		dw bc_exvec   ; 1FBh	; 11
  7688 0000011F [F901]                  		dw bc_exvec   ; 1FBh	; 12
  7689 00000121 [B602]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  7690 00000123 [F901]                  		dw bc_exvec   ; 1FBh	; 14
  7691 00000125 [F901]                  		dw bc_exvec   ; 1FBh	; 15
  7692 00000127 [F901]                  		dw bc_exvec   ; 1FBh	; 16
  7693 00000129 [F901]                  		dw bc_exvec   ; 1FBh	; 17
  7694 0000012B [F901]                  		dw bc_exvec   ; 1FBh	; 18
  7695 0000012D [EB02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  7696                                  prn_table_end:
  7697 0000012F 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  7698                                  					; 2C7h:130h = 70h:26A0h
  7699 00000130 [F901]                  		dw bc_exvec   ; 1FBh	; 00 - init
  7700 00000132 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7701 00000134 [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7702 00000136 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7703 00000138 [0603]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  7704 0000013A [2D03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  7705 0000013C [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7706 0000013E [6303]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  7707 00000140 [6A03]                  		dw aux_writ   ;	374h	; aux_writ
  7708 00000142 [6A03]                  		dw aux_writ   ;	374h	; 09
  7709 00000144 [4D03]                  		dw aux_wrst   ;	355h	; aux_wrst
  7710                                  aux_table_end:
  7711 00000146 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  7712                                  					; 2C7h:147h = 70h:26B7h
  7713 00000147 [F901]                  		dw bc_exvec   ; 1FBh	; 00
  7714 00000149 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7715 0000014B [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7716 0000014D [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7717 0000014F [2904]                  		dw tim_read   ;	435h	; tim_read
  7718 00000151 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7719 00000153 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7720 00000155 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7721 00000157 [D003]                  		dw tim_writ   ; 3DBh	; tim_writ
  7722 00000159 [D003]                  		dw tim_writ   ; 3DBh	; 09
  7723                                  tim_table_end:
  7724                                  
  7725                                  ; ---------------------------------------------------------------------------
  7726                                  
  7727                                  ;************************************************************************
  7728                                  ;*									*
  7729                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  7730                                  ;*									*
  7731                                  ;************************************************************************
  7732                                  
  7733                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  7734                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  7735 0000015B E306                    		jcxz	con_exit	; 19/10/2022
  7736                                  con_loop:				
  7737 0000015D E80500                  		call	chrin		; get char in al
  7738 00000160 AA                      		stosb			; store	char at	es:di
  7739 00000161 E2FA                    		loop	con_loop
  7740                                  con_exit:				
  7741 00000163 F8                      		clc
  7742 00000164 C3                      		retn
  7743                                  
  7744                                  ; =============== S U B	R O U T	I N E =======================================
  7745                                  
  7746                                  ;************************************************************************
  7747                                  ;*									*
  7748                                  ;*	chrin - input single char from keyboard into al			*
  7749                                  ;*									*
  7750                                  ;*	  we are going to issue extended keyboard function, if		*
  7751                                  ;*	  supported. the returning value of the extended keystroke	*
  7752                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  7753                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  7754                                  ;*	  this creates a conflict when the user entered real		*
  7755                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  7756                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  7757                                  ;*	  in the following manner:					*
  7758                                  ;*									*
  7759                                  ;*	      ah = 16h							*
  7760                                  ;*	      int 16h							*
  7761                                  ;*	      if al == 0, then extended code (in ah)			*
  7762                                  ;*	      else if al == 0E0h, then					*
  7763                                  ;*	      if ah <> 0, then extended code (in ah)			*
  7764                                  ;*		else greek_alpha character.				*
  7765                                  ;*									*
  7766                                  ;*	also, for compatibility reason, if an extended code is		*
  7767                                  ;*	  detected, then we are going to change the value in al		*
  7768                                  ;*	  from 0E0h to 00h.						*
  7769                                  ;*									*
  7770                                  ;************************************************************************
  7771                                  
  7772                                  		; 19/10/2022
  7773                                  chrin:		
  7774 00000165 8A26[E504]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  7775 00000169 30C0                    		xor	al, al
  7776 0000016B 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  7777 0000016F 08C0                    		or	al, al
  7778 00000171 752A                    		jnz	short keyret
  7779 00000173 CD16                    		int	16h		; KEYBOARD -
  7780 00000175 09C0                    		or	ax, ax
  7781 00000177 74EC                    		jz	short chrin
  7782 00000179 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7783 0000017C 7504                    		jnz	short alt_ext_chk
  7784 0000017E B010                    		mov	al, 10h
  7785 00000180 EB1B                    		jmp	short keyret
  7786                                  ; ---------------------------------------------------------------------------
  7787                                  
  7788                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  7789                                  ;    if character read was 0E0h then
  7790                                  ;      if extended byte was zero (i.e. ah == 0) then
  7791                                  ;	 goto keyret
  7792                                  ;      else
  7793                                  ;	 set al to zero
  7794                                  ;	 goto alt_save
  7795                                  ;      endif
  7796                                  ;    endif
  7797                                  ;  endif
  7798                                  
  7799                                  alt_ext_chk:
  7800 00000182 803E[E504]00            		cmp	byte [keyrd_func], 0
  7801 00000187 740C                    		jz	short not_ext
  7802 00000189 3CE0                    		cmp	al, 0E0h
  7803 0000018B 7508                    		jnz	short not_ext
  7804 0000018D 08E4                    		or	ah, ah
  7805 0000018F 740C                    		jz	short keyret
  7806 00000191 30C0                    		xor	al, al
  7807 00000193 EB04                    		jmp	short alt_save
  7808                                  ; ---------------------------------------------------------------------------
  7809                                  
  7810                                  not_ext:				
  7811 00000195 08C0                    		or	al, al		; special case?
  7812 00000197 7504                    		jnz	short keyret
  7813                                  alt_save:				
  7814 00000199 8826[0C00]              		mov	[altah], ah	; store	special	key
  7815                                  keyret:					
  7816 0000019D C3                      		retn
  7817                                  
  7818                                  ; ---------------------------------------------------------------------------
  7819                                  
  7820                                  ;************************************************************************
  7821                                  ;*									*
  7822                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  7823                                  ;*									*
  7824                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  7825                                  ;*	in the status word of the request packet, and there is no	*
  7826                                  ;*	character in the input buffer, the driver issues a system	*
  7827                                  ;*	wait request to the rom. on return from the rom, it returns	*
  7828                                  ;*	a 'char-not-found' to the dos.					*
  7829                                  ;*									*
  7830                                  ;************************************************************************
  7831                                  
  7832                                  		; 19/10/2022
  7833                                  con_rdnd:				
  7834 0000019E A0[0C00]                		mov	al, [altah]
  7835 000001A1 08C0                    		or	al, al
  7836 000001A3 754C                    		jnz	short rdexit
  7837 000001A5 8A26[E604]              		mov	ah, [keysts_func]
  7838 000001A9 CD16                    		int	16h		; KEYBOARD -
  7839 000001AB 751D                    		jnz	short gotchr
  7840 000001AD 803E[7900]00            		cmp	byte [fhavek09], 0
  7841 000001B2 7412                    		jz	short z_bus_exit
  7842 000001B4 C41E[1200]              		les	bx, [ptrsav]
  7843                                  		; 12/12/2022
  7844 000001B8 26F6470404              		test	byte [es:bx+4], 04h
  7845                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  7846 000001BD 7407                    		jz	short z_bus_exit
  7847 000001BF B80041                  		mov	ax, 4100h
  7848 000001C2 30DB                    		xor	bl, bl
  7849 000001C4 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  7850                                  					; AL = condition type, BH = condition compare or mask value
  7851                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  7852                                  					; DX = I/O port	address	if AL bit 4 set
  7853                                  z_bus_exit:				
  7854 000001C6 F9                      		stc			; 2C7h:1C8h = 70h:2738h
  7855 000001C7 B403                    		mov	ah, 3		; indicate busy	status
  7856 000001C9 C3                      		retn
  7857                                  ; ---------------------------------------------------------------------------
  7858                                  
  7859                                  gotchr:					
  7860 000001CA 09C0                    		or	ax, ax
  7861 000001CC 7508                    		jnz	short notbrk	; check	for null after break
  7862 000001CE 8A26[E504]              		mov	ah, [keyrd_func] ; issue keyboard read function
  7863 000001D2 CD16                    		int	16h		; KEYBOARD -
  7864 000001D4 EBC8                    		jmp	short con_rdnd	; get a	real status
  7865                                  ; ---------------------------------------------------------------------------
  7866                                  
  7867                                  notbrk:					
  7868 000001D6 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7869 000001D9 7504                    		jnz	short rd_ext_chk
  7870 000001DB B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  7871 000001DD EB12                    		jmp	short rdexit
  7872                                  ; ---------------------------------------------------------------------------
  7873                                  
  7874                                  rd_ext_chk:				
  7875 000001DF 803E[E504]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  7876 000001E4 740B                    		jz	short rdexit
  7877 000001E6 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  7878 000001E8 7507                    		jnz	short rdexit
  7879 000001EA 80FC00                  		cmp	ah, 0		; scan code exist?
  7880 000001ED 7402                    		jz	short rdexit	; yes. greek alpha char.
  7881 000001EF B000                    		mov	al, 0		; no. extended key stroke.
  7882                                  					; change it for	compatibility
  7883                                  rdexit:					
  7884 000001F1 C41E[1200]              		les	bx, [ptrsav]
  7885 000001F5 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  7886                                  					; return keyboard character here
  7887                                  bc_exvec:				
  7888 000001F9 F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7889                                  					; indicate normal termination
  7890 000001FA C3                      		retn
  7891                                  ; ---------------------------------------------------------------------------
  7892                                  
  7893                                  ;************************************************************************
  7894                                  ;*									*
  7895                                  ;*	con_write - console write routine				*
  7896                                  ;*									*
  7897                                  ;*	entry:	es:di -> buffer						*
  7898                                  ;*		cx    =  count						*
  7899                                  ;*									*
  7900                                  ;************************************************************************
  7901                                  
  7902                                  con_writ:
  7903                                  		;jcxz	short bc_exvec
  7904 000001FB E3FC                    		jcxz	bc_exvec	; 19/10/2022
  7905                                  		; 12/12/2022
  7906                                  		;jcxz	cc_ret
  7907                                  con_lp:					
  7908 000001FD 268A05                  		mov	al, [es:di]
  7909 00000200 47                      		inc	di
  7910 00000201 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  7911                                  					; AL = character to display
  7912 00000203 E2F8                    		loop	con_lp
  7913                                  cc_ret:					
  7914 00000205 F8                      		clc
  7915 00000206 C3                      		retn
  7916                                  
  7917                                  ; =============== S U B	R O U T	I N E =======================================
  7918                                  
  7919                                  ;************************************************************************
  7920                                  ;*									*
  7921                                  ;*	con_flush - flush out keyboard queue				*
  7922                                  ;*									*
  7923                                  ;************************************************************************
  7924                                  
  7925                                  con_flush:
  7926 00000207 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  7927                                  flloop:					; while	(charavail()) charread();	
  7928 0000020C B401                    		mov	ah, 1
  7929 0000020E CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  7930                                  					; Return: ZF clear if character	in buffer
  7931                                  					; AH = scan code, AL = character
  7932                                  					; ZF set if no character in buffer
  7933 00000210 74F3                    		jz	short cc_ret
  7934 00000212 30E4                    		xor	ah, ah
  7935 00000214 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  7936                                  					; Return: AH = scan code, AL = character
  7937 00000216 EBF4                    		jmp	short flloop
  7938                                  
  7939                                  ; ---------------------------------------------------------------------------
  7940                                  
  7941                                  ; 15/10/2022
  7942                                  
  7943                                  ;************************************************************************
  7944                                  ;*									*
  7945                                  ;*	some equates for rom bios printer i/o				*
  7946                                  ;*									*
  7947                                  ;************************************************************************
  7948                                  
  7949                                  ; ibm rom status bits (i don't trust them, neither should you)
  7950                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  7951                                  ; whole slew of bits, only one of which is correct.
  7952                                  
  7953                                  ;notbusystatus	equ 10000000b		; not busy
  7954                                  ;nopaperstatus	equ 00100000b		; no more paper
  7955                                  ;prnselected	equ 00010000b		; printer selected
  7956                                  ;ioerrstatus	equ 00001000b		; some kinda error
  7957                                  ;timeoutstatus	equ 00000001b		; time out.
  7958                                  ;
  7959                                  ;noprinter	equ 00110000b		; no printer attached
  7960                                  
  7961                                  ; 18/03/2019 - Retro DOS v4.0
  7962                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  7963                                  
  7964                                  ; ---------------------------------------------------------------------------
  7965                                  
  7966                                  ;************************************************************************
  7967                                  ;*									*
  7968                                  ;*	prn_input - return with no error but zero chars read		*
  7969                                  ;*									*
  7970                                  ;*	enter with cx = number of characters requested			*
  7971                                  ;*									*
  7972                                  ;************************************************************************
  7973                                  
  7974                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  7975 00000218 E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  7976                                  					; (sub reqpkt.count,cx)
  7977                                  		; 12/12/2022
  7978                                  prn_done:
  7979 0000021B F8                      		clc			; but return with carry	reset for no error
  7980 0000021C C3                      		retn
  7981                                  ; ---------------------------------------------------------------------------
  7982                                  
  7983                                  ;************************************************************************
  7984                                  ;*									*
  7985                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  7986                                  ;*									*
  7987                                  ;*	auxnum has printer number					*
  7988                                  ;*									*
  7989                                  ;************************************************************************
  7990                                  
  7991                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  7992                                  		;jcxz	short prn_done	; no chars to output
  7993 0000021D E3FC                    		jcxz	prn_done	; 19/10/2022
  7994                                  prn_loop:				
  7995 0000021F BB0200                  		mov	bx, 2		; retry	count
  7996                                  prn_out:				
  7997 00000222 E83600                  		call	prnstat		; get status
  7998 00000225 751D                    		jnz	short TestPrnError
  7999 00000227 268A05                  		mov	al, [es:di]	; get character	to print
  8000 0000022A 30E4                    		xor	ah, ah
  8001 0000022C E82E00                  		call	prnop		; print	to printer
  8002 0000022F 7419                    		jz	short prn_con	; no error - continue
  8003 00000231 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  8004 00000234 7509                    		jnz	short _prnwf
  8005 00000236 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  8006 00000238 C606[0C00]00            		mov	byte [altah], 0
  8007 0000023D EB08                    		jmp	short pmessg
  8008                                  ; ---------------------------------------------------------------------------
  8009                                  
  8010                                  _prnwf:					
  8011 0000023F F6C401                  		test	ah, 1		; timeoutstatus
  8012 00000242 7406                    		jz	short prn_con
  8013                                  TestPrnError:				
  8014 00000244 4B                      		dec	bx		; retry	until count is exhausted.
  8015 00000245 75DB                    		jnz	short prn_out
  8016                                  pmessg:					
  8017 00000247 E98DFE                  		jmp	bc_err_cnt
  8018                                  ; ---------------------------------------------------------------------------
  8019                                  
  8020                                  prn_con:				
  8021 0000024A 47                      		inc	di		; point	to next	char and continue
  8022 0000024B E2D2                    		loop	prn_loop
  8023                                  ;prn_done:				
  8024                                  		; 12/12/2022
  8025                                  prn_done2:
  8026                                  		;clc
  8027                                  		; cf=0
  8028 0000024D C3                      		retn
  8029                                  ; ---------------------------------------------------------------------------
  8030                                  
  8031                                  ;************************************************************************
  8032                                  ;*									*
  8033                                  ;*	prn_stat - device driver entry to return printer status		*
  8034                                  ;*									*
  8035                                  ;************************************************************************
  8036                                  
  8037                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  8038 0000024E E80A00                  		call	prnstat		; device in dx
  8039 00000251 75F4                    		jnz	short pmessg
  8040 00000253 F6C480                  		test	ah, 80h		; notbusystatus
  8041                                  		;jnz	short prn_done
  8042                                  		; 12/12/2022
  8043 00000256 75F5                    		jnz	short prn_done2 ; cf=0
  8044 00000258 E96BFF                  		jmp	z_bus_exit
  8045                                  ; ---------------------------------------------------------------------------
  8046                                  
  8047                                  ;************************************************************************
  8048                                  ;*									*
  8049                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  8050                                  ;*		 printer status. Return meaningful error code		*
  8051                                  ;*									*
  8052                                  ;************************************************************************
  8053                                  
  8054                                  prnstat:				
  8055 0000025B B402                    		mov	ah, 2		; set command for get status
  8056                                  					; PRINTER - GET	STATUS
  8057                                  					; DX = printer port (0-3)
  8058                                  					; Return: AH = status
  8059                                  
  8060                                  ; =============== S U B	R O U T	I N E =======================================
  8061                                  
  8062                                  ;************************************************************************
  8063                                  ;*									*
  8064                                  ;*	prnop - call ROM BIOS printer function in ah			*
  8065                                  ;*		return zero true if no error				*
  8066                                  ;*		return zero false if error, al = error code		*
  8067                                  ;*									*
  8068                                  ;************************************************************************
  8069                                  
  8070                                  prnop:	
  8071 0000025D 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  8072 00000261 CD17                    		int	17h
  8073                                  
  8074                                  	; This check was added to see if this is a case of no
  8075                                  	; printer being installed. This tests checks to be sure
  8076                                  	; the error is noprinter (30h)
  8077                                  
  8078 00000263 50                      		push	ax
  8079 00000264 80E430                  		and	ah, 30h
  8080 00000267 80FC30                  		cmp	ah, 30h		; noprinter
  8081 0000026A 58                      		pop	ax
  8082 0000026B 7506                    		jnz	short NextTest
  8083 0000026D 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  8084 00000270 80CC08                  		or	ah, 8		; ioerrstatus
  8085                                  
  8086                                  ; examine the status bits to see if an error occurred. unfortunately, several
  8087                                  ; of the bits are set so we have to pick and choose. we must be extremely
  8088                                  ; careful about breaking basic.
  8089                                  
  8090                                  NextTest:				
  8091 00000273 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  8092                                  					; i/o error?
  8093 00000276 740A                    		jz	short checknotready ; no, try not ready
  8094                                  
  8095                                  ; at this point, we know we have an error. the converse is not true
  8096                                  
  8097 00000278 B009                    		mov	al, 9		; error_I24_out_of_paper
  8098                                  					; first, assume	out of paper
  8099 0000027A F6C420                  		test	ah, 20h		; out of paper set?
  8100 0000027D 7502                    		jnz	short ret1	; yes, error is	set
  8101 0000027F FEC0                    		inc	al		; return al=10 (i/o error)
  8102                                  ret1:					
  8103 00000281 C3                      		retn
  8104                                  ; ---------------------------------------------------------------------------
  8105                                  
  8106                                  checknotready:				
  8107 00000282 B002                    		mov	al, 2		; assume not-ready
  8108 00000284 F6C401                  		test	ah, 1
  8109 00000287 C3                      		retn
  8110                                  
  8111                                  ; ---------------------------------------------------------------------------
  8112                                  
  8113                                  ;************************************************************************
  8114                                  ;*									*
  8115                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  8116                                  ;*		     this entry point should never block waiting for	*
  8117                                  ;*		     device to come ready.				*
  8118                                  ;*									*
  8119                                  ;*	inputs:	cx = count, es:di -> buffer				*
  8120                                  ;*	outputs: set the number of bytes transferred in the		*
  8121                                  ;*		 device driver request packet				*
  8122                                  ;*									*
  8123                                  ;************************************************************************
  8124                                  
  8125                                  		; 19/10/2022
  8126                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  8127 00000288 89FE                    		mov	si, di		; everything is	set for	lodsb
  8128                                  prn_tilbloop:				
  8129 0000028A 51                      		push	cx
  8130 0000028B 53                      		push	bx
  8131 0000028C 30FF                    		xor	bh, bh
  8132 0000028E 8A1E[E704]              		mov	bl, [printdev]
  8133 00000292 D1E3                    		shl	bx, 1
  8134                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  8135 00000294 8B8F[E804]              		mov	cx, [wait_count+bx]
  8136 00000298 5B                      		pop	bx
  8137                                  prn_getstat:				
  8138 00000299 E8BFFF                  		call	prnstat		; get status
  8139 0000029C 7514                    		jnz	short prn_bperr	; error
  8140 0000029E F6C480                  		test	ah, 80h		; ready	yet?
  8141 000002A1 E1F6                    		loope	prn_getstat	; no, go for more
  8142 000002A3 59                      		pop	cx		; get original count
  8143 000002A4 740D                    		jz	short prn_berr	; still	not ready => done
  8144 000002A6 26                      		es
  8145 000002A7 AC                      		lodsb
  8146                                  		;lods	byte ptr es:[si] ; es
  8147                                  					; lodsb
  8148 000002A8 30E4                    		xor	ah, ah
  8149 000002AA E8B0FF                  		call	prnop
  8150 000002AD 7504                    		jnz	short prn_berr	; error
  8151 000002AF E2D9                    		loop	prn_tilbloop
  8152                                  		; 12/12/2022
  8153                                  		; cf=0 (prnop)
  8154                                  		;clc			; normal no-error return
  8155 000002B1 C3                      		retn			;   from device driver
  8156                                  
  8157                                  ; ---------------------------------------------------------------------------
  8158                                  
  8159                                  prn_bperr:				
  8160 000002B2 59                      		pop	cx		; restore transfer count from stack
  8161                                  prn_berr:				
  8162 000002B3 E921FE                  		jmp	bc_err_cnt
  8163                                  ; ---------------------------------------------------------------------------
  8164                                  
  8165                                  ; 15/10/2022
  8166                                  
  8167                                  ;************************************************************************
  8168                                  ;*									*
  8169                                  ;*	prn_genioctl - get/set printer retry count			*
  8170                                  ;*									*
  8171                                  ;************************************************************************
  8172                                  
  8173                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8174                                  ; 11/01/2019
  8175                                  
  8176                                  ;********************************;*
  8177                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8178                                  ;********************************;*
  8179                                  
  8180                                  ;;RAWIO SUB-FUNCTIONS
  8181                                  ;;get_retry_count equ 65h
  8182                                  ;;set_retry_count equ 45h
  8183                                  
  8184                                  ;;struc A_RETRYCOUNT
  8185                                  ;;.rc_count: resw 1
  8186                                  ;;endstruc
  8187                                  
  8188                                  ;ioc_pc equ 5
  8189                                  
  8190                                  ; ---------------------------------------------------------------------------
  8191                                  
  8192                                  		; 19/10/2022
  8193                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8194 000002B6 C43E[1200]              		les	di, [ptrsav]
  8195 000002BA 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8196                                  					; ioc_pc
  8197 000002BF 7403                    		jz	short prnfunc_ok
  8198                                  
  8199                                  prnfuncerr:				
  8200 000002C1 E911FE                  		jmp	bc_cmderr
  8201                                  ; ---------------------------------------------------------------------------
  8202                                  
  8203                                  prnfunc_ok:				
  8204 000002C4 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8205 000002C8 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8206 000002CC 30FF                    		xor	bh, bh
  8207                                  		;mov	bl, ds:printdev	; get index into retry counts
  8208 000002CE 8A1E[E704]              		mov	bl, [printdev]
  8209 000002D2 D1E3                    		shl	bx, 1
  8210                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8211 000002D4 8B8F[E804]              		mov	cx, [wait_count+bx]
  8212 000002D8 3C65                    		cmp	al, 65h		; get_retry_count
  8213 000002DA 7407                    		jz	short prngetcount
  8214 000002DC 3C45                    		cmp	al, 45h		; set_retry_count
  8215 000002DE 75E1                    		jnz	short prnfuncerr
  8216 000002E0 268B0D                  		mov	cx, [es:di]
  8217                                  prngetcount:				
  8218                                  		;mov	ds:wait_count[bx], cx
  8219 000002E3 898F[E804]              		mov	[wait_count+bx], cx
  8220 000002E7 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8221                                  					; return current retry count
  8222                                  		; 12/12/2022
  8223                                  		; cf=0
  8224                                  		;clc
  8225 000002EA C3                      		retn
  8226                                  ; ---------------------------------------------------------------------------
  8227                                  
  8228                                  ;************************************************************************
  8229                                  ;*									*
  8230                                  ;*  prn_ioctl_query							*
  8231                                  ;*									*
  8232                                  ;*  Added for 5.00							*
  8233                                  ;************************************************************************
  8234                                  
  8235                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8236 000002EB C43E[1200]              		les	di, [ptrsav]
  8237 000002EF 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8238                                  					; ioc_pc
  8239 000002F4 750D                    		jnz	short prn_query_err
  8240 000002F6 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8241 000002FA 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8242 000002FC 7404                    		jz	short IOCtlSupported
  8243 000002FE 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8244 00000300 7501                    		jnz	short prn_query_err
  8245                                  IOCtlSupported:	
  8246                                  		; 12/12/2022
  8247                                  		; cf=0		
  8248                                  		;clc
  8249 00000302 C3                      		retn
  8250                                  ; ---------------------------------------------------------------------------
  8251                                  
  8252                                  prn_query_err:
  8253                                  		; 12/12/2022				
  8254                                  		;stc
  8255 00000303 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8256                                  ; ---------------------------------------------------------------------------
  8257                                  
  8258                                  ;************************************************************************
  8259                                  ;*									*
  8260                                  ;*	aux port driver code -- "aux" == "com1"				*
  8261                                  ;*									*
  8262                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8263                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8264                                  ;*									*
  8265                                  ;************************************************************************
  8266                                  
  8267                                  ;	values in ah, requesting function of int 14h in rom bios
  8268                                  
  8269                                  ;auxfunc_send	 equ	1	;transmit
  8270                                  ;auxfunc_receive equ	2	;read
  8271                                  ;auxfunc_status	 equ	3	;request status
  8272                                  
  8273                                  ;	error flags, reported by int 14h, reported in ah:
  8274                                  
  8275                                  ;flag_data_ready equ	01h	;data ready
  8276                                  ;flag_overrun	 equ	02h	;overrun error
  8277                                  ;flag_parity	 equ	04h	;parity error
  8278                                  ;flag_frame	 equ	08h	;framing error
  8279                                  ;flag_break	 equ	10h	;break detect
  8280                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8281                                  ;flag_timeout	 equ	80h	;timeout
  8282                                  
  8283                                  ;	these flags reported in al:
  8284                                  
  8285                                  ;flag_cts	 equ	10h	;clear to send
  8286                                  ;flag_dsr	 equ	20h	;data set ready
  8287                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8288                                  
  8289                                  ; ---------------------------------------------------------------------------
  8290                                  
  8291                                  ;************************************************************************
  8292                                  ;*									*
  8293                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8294                                  ;*		   at es:di						*
  8295                                  ;*									*
  8296                                  ;************************************************************************
  8297                                  
  8298                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8299                                  		;jcxz	short exvec2
  8300 00000306 E311                    		jcxz	exvec2		; 19/10/2022
  8301 00000308 E87700                  		call	getbx		; put address of auxbuf	in bx
  8302 0000030B 30C0                    		xor	al, al
  8303 0000030D 8607                    		xchg	al, [bx]
  8304 0000030F 08C0                    		or	al, al
  8305 00000311 7503                    		jnz	short aux2
  8306                                  aux1:					
  8307 00000313 E80500                  		call	auxin		; get character	from port
  8308                                  					; won't return if error
  8309                                  aux2:					
  8310 00000316 AA                      		stosb
  8311 00000317 E2FA                    		loop	aux1		; if more characters, go around	again
  8312                                  exvec2:					
  8313 00000319 F8                      		clc			; all done, successful exit
  8314                                  auxin_retn:	; 18/12/2022
  8315 0000031A C3                      		retn
  8316                                  ; ---------------------------------------------------------------------------
  8317                                  
  8318                                  ;************************************************************************
  8319                                  ;*									*
  8320                                  ;*	auxin - call rom bios to read character from aux port		*
  8321                                  ;*		if error occurs, map the error and return one		*
  8322                                  ;*		level up to device driver exit code, setting		*
  8323                                  ;*		the number of bytes transferred appropriately		*
  8324                                  ;*									*
  8325                                  ;************************************************************************
  8326                                  
  8327                                  auxin:					
  8328 0000031B B402                    		mov	ah, 2		; auxfunc_receive
  8329 0000031D E83C00                  		call	auxop
  8330 00000320 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8331                                  		;jnz	short arbad	; skip if any error bits set
  8332                                  		;retn
  8333                                  		; 25/06/2023 (BugFix)
  8334 00000323 74F5                    		jz	short auxin_retn
  8335                                  ; ---------------------------------------------------------------------------
  8336                                  
  8337                                  arbad:					
  8338 00000325 58                      		pop	ax		; remove return	address	(near call)
  8339 00000326 30C0                    		xor	al, al
  8340 00000328 0CB0                    		or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8341 0000032A E9AAFD                  		jmp	bc_err_cnt
  8342                                  
  8343                                  ; ---------------------------------------------------------------------------
  8344                                  
  8345                                  ;************************************************************************
  8346                                  ;*									*
  8347                                  ;*	aux_rdnd - non-destructive aux port read			*
  8348                                  ;*									*
  8349                                  ;************************************************************************
  8350                                  
  8351                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8352 0000032D E85200                  		call	getbx
  8353 00000330 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8354 00000332 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8355 00000334 7511                    		jnz	short auxdrx	; then return character
  8356 00000336 E82100                  		call	auxstat		; if not, get status of	aux device
  8357 00000339 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8358 0000033C 740C                    		jz	short auxbus	; then device is busy (not ready)
  8359 0000033E A820                    		test	al, 20h		; flag_dsr - test data set ready
  8360 00000340 7408                    		jz	short auxbus	; then device is busy (not ready)
  8361 00000342 E8D6FF                  		call	auxin		; else aux is ready, get character
  8362 00000345 8807                    		mov	[bx], al
  8363                                  auxdrx:					
  8364 00000347 E9A7FE                  		jmp	rdexit		; return busy status
  8365                                  ; ---------------------------------------------------------------------------
  8366                                  
  8367                                  auxbus:					
  8368 0000034A E979FE                  		jmp	z_bus_exit
  8369                                  ; ---------------------------------------------------------------------------
  8370                                  
  8371                                  ;************************************************************************
  8372                                  ;*									*
  8373                                  ;*	aux_wrst - return aux port write status				*
  8374                                  ;*									*
  8375                                  ;************************************************************************
  8376                                  
  8377                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8378 0000034D E80A00                  		call	auxstat		; get status of	aux in ax
  8379 00000350 A820                    		test	al, 20h		; test data set	ready
  8380 00000352 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8381 00000354 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8382 00000357 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8383                                  		; 12/12/2022
  8384                                  		; cf=0	; (test instruction resets cf)
  8385                                  		;clc
  8386 00000359 C3                      		retn
  8387                                  ; ---------------------------------------------------------------------------
  8388                                  
  8389                                  ;************************************************************************
  8390                                  ;*									*
  8391                                  ;*	auxstat - call rom bios to determine aux port status		*
  8392                                  ;*									*
  8393                                  ;*	exit:	ax = status						*
  8394                                  ;*		dx = [auxnum]						*
  8395                                  ;*									*
  8396                                  ;************************************************************************
  8397                                  
  8398                                  auxstat:				
  8399 0000035A B403                    		mov	ah, 3		; auxfunc_status
  8400                                  
  8401                                  		; fall into auxop
  8402                                  
  8403                                  ; =============== S U B	R O U T	I N E =======================================
  8404                                  
  8405                                  ;************************************************************************
  8406                                  ;*									*
  8407                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8408                                  ;*									*
  8409                                  ;*	entry:	ah = int 14h function number				*
  8410                                  ;*	exit:	ax = results						*
  8411                                  ;*		dx = [auxnum]						*
  8412                                  ;*									*
  8413                                  ;************************************************************************
  8414                                  
  8415                                  auxop:		; proc near		
  8416 0000035C 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8417                                  					; 0=init, 1=send, 2=receive, 3=status
  8418                                  					; get port number
  8419 00000360 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8420                                  					; DX = port number (0-3)
  8421                                  					; Return: AX = port status code
  8422 00000362 C3                      		retn
  8423                                  
  8424                                  ; ---------------------------------------------------------------------------
  8425                                  
  8426                                  ;************************************************************************
  8427                                  ;*									*
  8428                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8429                                  ;*		   auxbuf [auxnum] to zero				*
  8430                                  ;*									*
  8431                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8432                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8433                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8434                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8435                                  ;*									*
  8436                                  ;************************************************************************
  8437                                  
  8438                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8439 00000363 E81C00                  		call	getbx		; flush	aux input buffer
  8440 00000366 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8441                                  					; zero out buffer
  8442                                  		;clc			; all done, successful return
  8443                                  		; 12/12/2022
  8444                                  		; cf=0 ('add' instruction in 'getbx')
  8445 00000369 C3                      		retn
  8446                                  ; ---------------------------------------------------------------------------
  8447                                  
  8448                                  ;************************************************************************
  8449                                  ;*									*
  8450                                  ;*	aux_writ - write to aux device					*
  8451                                  ;*									*
  8452                                  ;************************************************************************
  8453                                  
  8454                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  8455                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  8456 0000036A E3AD                    		jcxz	exvec2		; 19/10/2022
  8457                                  aux_loop:				
  8458 0000036C 268A05                  		mov	al, [es:di]	; get character	to be written
  8459                                  					; move di pointer to next character
  8460 0000036F 47                      		inc	di
  8461 00000370 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  8462 00000372 E8E7FF                  		call	auxop		; send character over aux port
  8463 00000375 F6C480                  		test	ah, 80h		; check	for error
  8464 00000378 7405                    		jz	short awok	; then no error
  8465 0000037A B00A                    		mov	al, 10		; else indicate	write fault
  8466 0000037C E958FD                  		jmp	bc_err_cnt	; call error routines
  8467                                  ; ---------------------------------------------------------------------------
  8468                                  
  8469                                  awok:					
  8470 0000037F E2EB                    		loop	aux_loop	; if cx	is non-zero,
  8471                                  					; still	more character to print
  8472                                  		;clc			; all done, successful return
  8473                                  		; 12/12/2022
  8474                                  		; cf=0 (test instruction above)	
  8475 00000381 C3                      		retn
  8476                                  
  8477                                  ; =============== S U B	R O U T	I N E =======================================
  8478                                  
  8479                                  ;************************************************************************
  8480                                  ;*									*
  8481                                  ;*	getbx - return bx -> single byte input buffer for		*
  8482                                  ;*		selected aux port ([auxnum])				*
  8483                                  ;*									*
  8484                                  ;************************************************************************
  8485                                  
  8486                                  getbx:	
  8487 00000382 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  8488                                  					; for selected aux port	([auxnum])
  8489                                  		;add	bx, offset auxbuf
  8490 00000386 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  8491                                  		; 12/12/2022
  8492                                  		; cf=0 (if [uaxnum] is valid number) 
  8493 0000038A C3                      		retn
  8494                                  
  8495                                  ; ---------------------------------------------------------------------------
  8496                                  
  8497                                  ; 15/10/2022
  8498                                  
  8499                                  ;----------------------------------------------------------------
  8500                                  ;								:
  8501                                  ;		    clock device driver 			:
  8502                                  ;								:
  8503                                  ;								:
  8504                                  ;   this file contains the clock device driver. 		:
  8505                                  ;								:
  8506                                  ;   the routines in this files are:				:
  8507                                  ;								:
  8508                                  ;	routine 		function			:
  8509                                  ;	------- 		--------			:
  8510                                  ;	tim_writ		set the current time		:
  8511                                  ;	tim_read		read the current time		:
  8512                                  ;	time_to_ticks		convert time to corresponding	:
  8513                                  ;				  number of clock ticks 	:
  8514                                  ;								:
  8515                                  ; the clock ticks at the rate of:				:
  8516                                  ;								:
  8517                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  8518                                  ; see each routine for information on the use.			:
  8519                                  ;								:
  8520                                  ;----------------------------------------------------------------
  8521                                  
  8522                                  ; convert time to ticks
  8523                                  ; input : time in cx and dx
  8524                                  ; ticks returned in cx:dx
  8525                                  
  8526                                  ;19/07/2019
  8527                                  ;09/03/2019
  8528                                  
  8529                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  8530                                  
  8531                                  ; first convert from hour,min,sec,hund. to
  8532                                  ; total number of 100th of seconds
  8533                                  
  8534 0000038B B03C                    		mov	al, 60
  8535 0000038D F6E5                    		mul	ch		; hours	to minutes
  8536 0000038F B500                    		mov	ch, 0
  8537 00000391 01C8                    		add	ax, cx		; total	minutes
  8538 00000393 B97017                  		mov	cx, 6000	; 60*100
  8539 00000396 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  8540 00000398 F7E1                    		mul	cx		; convert to 1/100 sec
  8541 0000039A 89C1                    		mov	cx, ax
  8542 0000039C B064                    		mov	al, 100
  8543 0000039E F6E7                    		mul	bh		; convert seconds to 1/100 sec
  8544 000003A0 01C1                    		add	cx, ax		; combine seconds with hours and min
  8545 000003A2 83D200                  		adc	dx, 0		; ripple carry
  8546 000003A5 B700                    		mov	bh, 0
  8547 000003A7 01D9                    		add	cx, bx		; combine 1/100	sec
  8548 000003A9 83D200                  		adc	dx, 0
  8549                                  
  8550                                  	; dx:cx is time in 1/100 sec
  8551                                  
  8552 000003AC 92                      		xchg	ax, dx
  8553 000003AD 91                      		xchg	ax, cx		; now time is in cx:ax
  8554 000003AE BB0BE9                  		mov	bx, 59659
  8555 000003B1 F7E3                    		mul	bx		; multiply low half
  8556 000003B3 87D1                    		xchg	dx, cx
  8557 000003B5 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  8558 000003B6 F7E3                    		mul	bx		; multiply high	half
  8559 000003B8 01C8                    		add	ax, cx		; combine overlapping products
  8560 000003BA 83D200                  		adc	dx, 0
  8561 000003BD 92                      		xchg	ax, dx		; ax:dx=time*59659
  8562 000003BE BB0500                  		mov	bx, 5
  8563 000003C1 F6F3                    		div	bl		; divide high half by 5
  8564 000003C3 88C1                    		mov	cl, al
  8565 000003C5 B500                    		mov	ch, 0
  8566 000003C7 88E0                    		mov	al, ah		; remainder of divide-by-5
  8567 000003C9 98                      		cbw
  8568 000003CA 92                      		xchg	ax, dx		; use it to extend low half
  8569 000003CB F7F3                    		div	bx		; divide low half by 5
  8570 000003CD 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  8571 000003CF CB                      		retf			; far return
  8572                                  
  8573                                  ; ---------------------------------------------------------------------------
  8574                                  
  8575                                  ; 17/10/2022
  8576                                  ; 15/10/2022
  8577                                  
  8578                                  ;--------------------------------------------------------------------
  8579                                  ;
  8580                                  ; tim_writ sets the current time
  8581                                  ;
  8582                                  ; on entry es:[di] has the current time:
  8583                                  ;
  8584                                  ;	number of days since 1-1-80	(word)
  8585                                  ;	minutes (0-59)			(byte)
  8586                                  ;	hours (0-23)			(byte)
  8587                                  ;	hundredths of seconds (0-99)	(byte)
  8588                                  ;	seconds (0-59)			(byte)
  8589                                  ;
  8590                                  ; each number has been checked for the correct range.
  8591                                  ;
  8592                                  ;	NOTE: Any changes in this routine probably require corresponding
  8593                                  ;	changes in the version that is built with the power manager driver.
  8594                                  ;	See ptime.asm.
  8595                                  ;
  8596                                  ;--------------------------------------------------------------------
  8597                                  
  8598                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  8599 000003D0 268B05                  		mov	ax, [es:di]
  8600 000003D3 50                      		push	ax		; daycnt. we need to set this at the very
  8601                                  					; end to avoid tick windows.
  8602 000003D4 803E[F304]00            		cmp	byte [havecmosclock], 0
  8603                                  		;cmp	ds:havecmosclock, 0
  8604 000003D9 7426                    		jz	short no_cmos_1
  8605 000003DB 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  8606                                  					; get binary hours
  8607                                  					; convert to bcd
  8608 000003DF FF1E[0205]              		call	far [bintobcd]
  8609                                  		;call	ds:bintobcd	; call far [bintobcd]
  8610 000003E3 88C5                    		mov	ch, al		; ch = bcd hours
  8611 000003E5 268A4502                		mov	al, [es:di+2]	; get binary minutes
  8612 000003E9 FF1E[0205]              		call	far [bintobcd]
  8613                                  		;call	ds:bintobcd	; convert to bcd
  8614 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  8615 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  8616 000003F3 FF1E[0205]              		call	far [bintobcd]
  8617                                  		;call	ds:bintobcd
  8618 000003F7 88C6                    		mov	dh, al		; dh = bcd seconds
  8619 000003F9 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  8620 000003FB FA                      		cli
  8621 000003FC B403                    		mov	ah, 3
  8622 000003FE CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8623                                  					; CH = hours in	BCD, CL	= minutes in BCD
  8624                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  8625                                  					; Return: CMOS clock set
  8626 00000400 FB                      		sti
  8627                                  no_cmos_1:				
  8628 00000401 268B4D02                		mov	cx, [es:di+2]
  8629 00000405 268B5504                		mov	dx, [es:di+4]
  8630                                  		; 17/10/2022
  8631 00000409 FF1E[E206]              		call	far [ttticks]
  8632                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  8633                                  					; convert time to ticks
  8634                                  					; cx:dx	now has	time in	ticks
  8635 0000040D FA                      		cli			; turn off timer
  8636 0000040E B401                    		mov	ah, 1
  8637 00000410 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  8638                                  					; CX:DX	= clock	count
  8639                                  					; Return: time of day set
  8640                                  		;pop	ds:daycnt
  8641 00000412 8F06[F004]              		pop	word [daycnt]
  8642 00000416 FB                      		sti
  8643                                  		;cmp	ds:havecmosclock, 0
  8644 00000417 803E[F304]00            		cmp	byte [havecmosclock], 0
  8645 0000041C 740A                    		jz	short no_cmos_2
  8646 0000041E FF1E[0605]              		call	far [daycnttoday]
  8647                                  		;call	ds:daycnttoday	; call far [daycnttoday]
  8648                                  					; convert to bcd format
  8649 00000422 FA                      		cli
  8650 00000423 B405                    		mov	ah, 5
  8651 00000425 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8652                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  8653                                  					; CH = century (19h or 20h)
  8654                                  					; Return: CMOS clock set
  8655 00000427 FB                      		sti
  8656                                  no_cmos_2:
  8657                                  		; 12/12/2022
  8658                                  		; cf=0				
  8659                                  		;clc
  8660 00000428 C3                      		retn
  8661                                  
  8662                                  ; ---------------------------------------------------------------------------
  8663                                  
  8664                                  ; 15/10/2022
  8665                                  
  8666                                  ;----------------------------------------------------------------------------
  8667                                  ; gettime reads date and time
  8668                                  ; and returns the following information:
  8669                                  ;
  8670                                  ;	es:[di]  =count of days since 1-1-80
  8671                                  ;	es:[di+2]=hours
  8672                                  ;	es:[di+3]=minutes
  8673                                  ;	es:[di+4]=seconds
  8674                                  ;	es:[di+5]=hundredths of seconds
  8675                                  ;
  8676                                  ;	NOTE:  Any changes in this routine probably require corresponding
  8677                                  ;	changes in the version that is built with the power manager driver.
  8678                                  ;	See ptime.asm.
  8679                                  ;----------------------------------------------------------------------------
  8680                                  
  8681                                  tim_read:				; 2C7h:435h = 70h:29A5h
  8682 00000429 E84E00                  		call	GetTickCnt
  8683 0000042C 8B36[F004]              		mov	si, [daycnt]
  8684                                  
  8685                                  ; we now need to convert the time in tick to the time in 100th of
  8686                                  ; seconds. the relation between tick and seconds is:
  8687                                  ;
  8688                                  ;		 65,536 seconds
  8689                                  ;	       ----------------
  8690                                  ;		1,193,180 tick
  8691                                  ;
  8692                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  8693                                  ;
  8694                                  ;	ticks from clock  * 65,536 * 100
  8695                                  ;      --------------------------------- = time in 100th of seconds
  8696                                  ;		1,193,180
  8697                                  ;
  8698                                  ; fortunately this formula simplifies to:
  8699                                  ;
  8700                                  ;	ticks from clock * 5 * 65,536
  8701                                  ;      --------------------------------- = time in 100th of seconds
  8702                                  ;		59,659
  8703                                  ;
  8704                                  ; the calculation is done by first multipling tick by 5. next we divide by
  8705                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  8706                                  ; my 16 bits to the left.
  8707                                  ;
  8708                                  ; start with ticks in cx:dx
  8709                                  ; multiply by 5
  8710                                  
  8711 00000430 89C8                    		mov	ax, cx
  8712 00000432 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  8713                                  					; multiply by 5
  8714 00000434 D1E2                    		shl	dx, 1
  8715 00000436 D1D1                    		rcl	cx, 1		; times	2
  8716 00000438 D1E2                    		shl	dx, 1
  8717 0000043A D1D1                    		rcl	cx, 1		; times	4
  8718 0000043C 01DA                    		add	dx, bx
  8719 0000043E 11C8                    		adc	ax, cx		; times	5
  8720 00000440 92                      		xchg	ax, dx
  8721                                  
  8722                                  ; now have ticks * 5 in	dx:ax
  8723                                  ; we now need to multiply by 65536 and divide by 59659 d.
  8724                                  
  8725 00000441 B90BE9                  		mov	cx, 59659	; get divisor
  8726 00000444 F7F1                    		div	cx		; dx now has remainder
  8727                                  					; ax has high word of final quotient
  8728 00000446 89C3                    		mov	bx, ax		; put high word	in safe	place
  8729 00000448 31C0                    		xor	ax, ax		; this is the multiply by 65536
  8730 0000044A F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  8731                                  
  8732                                  ; rounding based on the	remainder may be added here
  8733                                  ; the result in	bx:ax is time in 1/100 second.
  8734                                  
  8735 0000044C 89DA                    		mov	dx, bx		
  8736 0000044E B9C800                  		mov	cx, 200		;extract 1/100's
  8737                                  
  8738                                  ; division by 200 is necessary to ensure no overflow--max result
  8739                                  ; is number of seconds in a day/2 = 43200.
  8740                                  
  8741 00000451 F7F1                    		div	cx
  8742 00000453 80FA64                  		cmp	dl, 100		; remainder over 100?
  8743 00000456 7203                    		jb	short noadj
  8744 00000458 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  8745                                  noadj:					
  8746 0000045B F5                      		cmc			; if we	subtracted 100,	carry is now set
  8747 0000045C 88D3                    		mov	bl, dl		; save 1/100's
  8748                                  
  8749                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  8750                                  ; by two, shifting a one in if the remainder had exceeded 100.
  8751                                  
  8752 0000045E D1D0                    		rcl	ax, 1		
  8753 00000460 B200                    		mov	dl, 0
  8754 00000462 D1D2                    		rcl	dx, 1
  8755 00000464 B93C00                  		mov	cx, 60		; divide out seconds
  8756 00000467 F7F1                    		div	cx
  8757 00000469 88D7                    		mov	bh, dl		; save the seconds
  8758 0000046B F6F1                    		div	cl		; break	into hours and minutes
  8759 0000046D 86C4                    		xchg	al, ah
  8760                                  
  8761                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  8762                                  
  8763 0000046F 50                      		push	ax
  8764 00000470 89F0                    		mov	ax, si		; daycnt
  8765 00000472 AB                      		stosw
  8766 00000473 58                      		pop	ax
  8767 00000474 AB                      		stosw
  8768 00000475 89D8                    		mov	ax, bx
  8769 00000477 AB                      		stosw
  8770 00000478 F8                      		clc
  8771 00000479 C3                      		retn
  8772                                  
  8773                                  ; =============== S U B	R O U T	I N E =======================================
  8774                                  
  8775                                  ; 15/10/2022
  8776                                  
  8777                                  ;----------------------------------------------------------------------------
  8778                                  ;
  8779                                  ; procedure : GetTickCnt
  8780                                  ;
  8781                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  8782                                  ;		of rollover [except when power management driver is in use]. 
  8783                                  ;		Uses the following logic for updating Daycnt
  8784                                  ;
  8785                                  ;		if ( rollover ) {
  8786                                  ;			if ( t_switch )
  8787                                  ;				daycnt++ ;
  8788                                  ;			else
  8789                                  ;				daycnt += rollover ;
  8790                                  ;		}
  8791                                  ;
  8792                                  ; USES : AX
  8793                                  ;
  8794                                  ; RETURNS : CX:DX - tick count
  8795                                  ; MODIFIES : daycnt
  8796                                  ;
  8797                                  ;----------------------------------------------------------------------------
  8798                                  
  8799                                  		; 17/10/2022
  8800                                  GetTickCnt:	
  8801 0000047A 30E4                    		xor	ah, ah
  8802 0000047C CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  8803                                  					; Return: CX:DX	= clock	count
  8804                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  8805                                  					; midnight
  8806                                  					; Otherwise, AL	> 0
  8807 0000047E 803E[F204]00            		cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  8808 00000483 7507                    		jnz	short inc_case	; old method assumes  that Int 1Ah returns rollover flag
  8809 00000485 30E4                    		xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  8810                                  					; and not flag
  8811 00000487 0106[F004]              		add	[daycnt], ax
  8812 0000048B C3                      		retn
  8813                                  ; ---------------------------------------------------------------------------
  8814                                  
  8815                                  inc_case:				
  8816 0000048C 08C0                    		or	al, al
  8817 0000048E 7404                    		jz	short no_rollover
  8818 00000490 FF06[F004]              		inc	word [daycnt]
  8819                                  no_rollover:				
  8820 00000494 C3                      		retn
  8821                                  
  8822                                  ;----------------------------------------------------------------------------
  8823                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  8824                                  ;----------------------------------------------------------------------------
  8825                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  8826                                  ; 09/03/2019 - Retro DOS v4.0
  8827                                  
  8828                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  8829                                  ; 26/05/2018 - Retro DOS v3.0
  8830                                  ; 23/03/2018 - Retro DOS v2.0
  8831                                  
  8832                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  8833                                  
  8834                                  ;struc BPB_TYPE
  8835                                  ;.SECSIZE:	resw 1
  8836                                  ;.SECALL:	resb 1
  8837                                  ;.RESNUM:	resw 1
  8838                                  ;.FATNUM:	resb 1
  8839                                  ;.DIRNUM:	resw 1
  8840                                  ;.SECNUM:	resw 1
  8841                                  ;.FATID:	resb 1
  8842                                  ;.FATSIZE:	resw 1
  8843                                  ;.SLIM:		resw 1
  8844                                  ;.HLIM:		resw 1
  8845                                  ;.HIDDEN:	resw 1
  8846                                  ;.size:
  8847                                  ;endstruc
  8848                                  
  8849                                  ;-----------------------------------------------------------------
  8850                                  ;	disk interface routines
  8851                                  ;-----------------------------------------------------------------
  8852                                  
  8853                                  ; device attribute bits:
  8854                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  8855                                  
  8856                                  ;MAXERR		equ	5
  8857                                  ;MAX_HD_FMT_ERR	equ	2
  8858                                  
  8859                                  ;LSTDRV	equ 504h
  8860                                  
  8861                                  ; some floppies do not have changeline. as a result, media-check would
  8862                                  ; normally return i-don't-know, the dos would continually reread the fat and
  8863                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  8864                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  8865                                  ; the time of the last successful disk operation and compare it with the current
  8866                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  8867                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  8868                                  ; since we cannot trust the timer to be always available, we record the number 
  8869                                  ; of media checks that have occurred when no apparent time has elapsed. while
  8870                                  ; this number is < a given threshold, we say no change. when it exceeds that
  8871                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  8872                                  ; the time of last successful access, if we see that time has passed too,
  8873                                  ; we reset the counter.
  8874                                  
  8875                                  accessmax	equ	5
  8876                                  
  8877                                  ; due to various bogosities, we need to continually adjust what the head
  8878                                  ; settle time is.  the following algorithm is used:
  8879                                  ;
  8880                                  ;   get the current head settle value.
  8881                                  ;   if it is 0, then
  8882                                  ;	set slow = 15
  8883                                  ;   else
  8884                                  ;	set slow = value
  8885                                  ;   ...
  8886                                  ;*********************************************
  8887                                  ;************ old algorithm ******************
  8888                                  ;*   if we are seeking and writing then
  8889                                  ;*	 use slow
  8890                                  ;*   else
  8891                                  ;*	 use fast
  8892                                  ;*********************************************
  8893                                  ;*********** ibm's requested logic ***********
  8894                                  ;   if we are seeking and writing and not on an at then
  8895                                  ;	use slow
  8896                                  ;   else
  8897                                  ;	use fast
  8898                                  ;   ...
  8899                                  ;   restore current head settle value
  8900                                  ;
  8901                                  ;
  8902                                  ;---------------------------------------
  8903                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  8904                                  					; it on after handling config.sys file as a
  8905                                  					; default value, if multrk_flag = multrk_off1.
  8906                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  8907                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  8908                                  
  8909                                  ; close data segment, open Bios_Code segment
  8910                                  
  8911                                  ; 15/10/2022
  8912                                  
  8913                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  8914                                  
  8915                                  ;-----------------------------------------------------------------
  8916                                  ;	command jump table
  8917                                  ;-----------------------------------------------------------------
  8918                                  
  8919 00000495 00                      		db 0
  8920                                  
  8921                                  ; 11/12/2022
  8922                                  %if 0
  8923                                  
  8924                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  8925                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  8926                                  		dw 1742h		; dsk_init
  8927                                  		dw 4EBh			; media_chk
  8928                                  		dw 592h			; get_bpb
  8929                                  		dw 0D5h			; bc_cmderr
  8930                                  		dw 857h			; dsk_read
  8931                                  		dw 83Dh			; x_bus_exit
  8932                                  		dw 558h			; ret_carry_clear
  8933                                  		dw 558h			; ret_carry_clear
  8934                                  		dw 849h			; dsk_writ
  8935                                  		dw 841h			; dsk_writv
  8936                                  		dw 558h			; ret_carry_clear
  8937                                  		dw 558h			; ret_carry_clear
  8938                                  		dw 0D5h			; bc_cmderr
  8939                                  		dw 80Ah			; dsk_open
  8940                                  		dw 81Ah			; dsk_close
  8941                                  		dw 831h			; dsk_rem
  8942                                  		dw 558h			; ret_carry_clear
  8943                                  		dw 558h			; ret_carry_clear
  8944                                  		dw 558h			; ret_carry_clear
  8945                                  		dw 0C6Bh		; do_generic_ioctl
  8946                                  		dw 558h			; ret_carry_clear
  8947                                  		dw 558h			; ret_carry_clear
  8948                                  		dw 558h			; ret_carry_clear
  8949                                  		dw 1124h		; ioctl_getown
  8950                                  		dw 1142h		; ioctl_setown
  8951                                  		dw 129Ah		; ioctl_support_query
  8952                                  
  8953                                  ;dtbl_siz equ $-dsktbl
  8954                                  
  8955                                  %endif
  8956                                  		; 11/12/2022
  8957 00000496 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  8958 00000497 [C216]                  		dw dsk_init
  8959 00000499 [DF04]                  		dw media_chk
  8960 0000049B [8505]                  		dw get_bpb
  8961 0000049D [D500]                  		dw bc_cmderr
  8962 0000049F [3408]                  		dw dsk_read
  8963 000004A1 [1A08]                  		dw x_bus_exit
  8964 000004A3 [4B05]                  		dw ret_carry_clear
  8965 000004A5 [4B05]                  		dw ret_carry_clear
  8966 000004A7 [2608]                  		dw dsk_writ
  8967 000004A9 [1E08]                  		dw dsk_writv
  8968 000004AB [4B05]                  		dw ret_carry_clear
  8969 000004AD [4B05]                  		dw ret_carry_clear
  8970 000004AF [D500]                  		dw bc_cmderr
  8971 000004B1 [EA07]                  		dw dsk_open
  8972 000004B3 [F907]                  		dw dsk_close
  8973 000004B5 [0F08]                  		dw dsk_rem
  8974 000004B7 [4B05]                  		dw ret_carry_clear
  8975 000004B9 [4B05]                  		dw ret_carry_clear
  8976 000004BB [4B05]                  		dw ret_carry_clear
  8977 000004BD [410C]                  		dw do_generic_ioctl
  8978 000004BF [4B05]                  		dw ret_carry_clear
  8979 000004C1 [4B05]                  		dw ret_carry_clear
  8980 000004C3 [4B05]                  		dw ret_carry_clear
  8981 000004C5 [D810]                  		dw ioctl_getown
  8982 000004C7 [F510]                  		dw ioctl_setown
  8983 000004C9 [4312]                  		dw ioctl_support_query
  8984                                  
  8985                                  dtbl_siz equ $-dsktbl
  8986                                  
  8987                                  ; =============== S U B	R O U T	I N E =======================================
  8988                                  
  8989                                  ; ---------------------------------------------------------------------------
  8990                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  8991                                  ; the one that belongs to the drive specified. carry is set if none exists
  8992                                  ; for the drive. Pointer is returned in es:[di]
  8993                                  ;
  8994                                  ;  AL contains the logical drive number.
  8995                                  ; ---------------------------------------------------------------------------
  8996                                  
  8997                                  SetDrive:	
  8998                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  8999 000004CB C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  9000                                  X_Scan_Loop:				
  9001 000004CF 26384505                		cmp	[es:di+5], al	
  9002 000004D3 7409                    		jz	short X_SetDrv
  9003 000004D5 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  9004 000004D8 83FFFF                  		cmp	di, 0FFFFh
  9005 000004DB 75F2                    		jnz	short X_Scan_Loop
  9006 000004DD F9                      		stc
  9007                                  X_SetDrv:				
  9008 000004DE C3                      		retn
  9009                                  
  9010                                  ; ---------------------------------------------------------------------------
  9011                                  
  9012                                  ; 15/10/2022
  9013                                  
  9014                                  ; ---------------------------------------------------------------------
  9015                                  ; if id is f9, have a 96tpi disk else
  9016                                  ; if bit 2 is 0 then media is not removable and could not have changed
  9017                                  ;  otherwise if within 2 secs of last disk operation media could not
  9018                                  ;    have changed, otherwise dont know if media has changed
  9019                                  ; ---------------------------------------------------------------------
  9020                                  
  9021                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  9022 000004DF E8E9FF                  		call	SetDrive
  9023 000004E2 BE0100                  		mov	si, 1
  9024 000004E5 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  9025                                  					; fchanged_by_format
  9026 000004EA 7416                    		jz	short WeAreNotFakingIt
  9027                                  		; 12/12/2022
  9028 000004EC 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  9029                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  9030                                  					; ~fchanged_by_format ;	reset flag
  9031 000004F1 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9032                                  					; Ensure that we ask the rom if media has changed
  9033 000004F6 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9034                                  					; fnon_removable
  9035 000004FB 740C                    		jz	short wehaveafloppy
  9036 000004FD BEFFFF                  		mov	si, 0FFFFh	; Indicate media changed
  9037 00000500 EB2C                    		jmp	short Media_Done ; Media_Done
  9038                                  ; ---------------------------------------------------------------------------
  9039                                  
  9040                                  WeAreNotFakingIt:
  9041                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  9042 00000502 26F6452301              		test	byte [es:di+23h], 1
  9043 00000507 7525                    		jnz	short Media_Done
  9044                                  wehaveafloppy:				
  9045 00000509 31F6                    		xor	si, si		; Presume "I don't know"
  9046                                  
  9047                                  		; If we have a floppy with changeline support, we ask the ROM
  9048                                  		; to determine if media has changed. We do not perform the
  9049                                  		; 2 second check for these drives.
  9050                                  
  9051 0000050B 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  9052 00000510 740A                    		jz	short mChk_NoChangeLine	; Brif not
  9053 00000512 E87812                  		call	mediacheck	;  Call	into removable routine
  9054 00000515 7236                    		jb	short err_exitj
  9055 00000517 E8C813                  		call	haschange
  9056 0000051A 7512                    		jnz	short Media_Done
  9057                                  mChk_NoChangeLine:
  9058                                  		; If we come here, we have a floppy with no changeline support
  9059                                  			
  9060 0000051C BE0100                  		mov	si, 1		; Presume no change
  9061 0000051F A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  9062 00000522 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  9063                                  					; Is drive of last access the same?
  9064 00000526 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  9065 00000528 E82800                  		call	Check_Time_Of_Access
  9066 0000052B EB01                    		jmp	short Media_Done
  9067                                  ; ---------------------------------------------------------------------------
  9068                                  
  9069                                  Media_Unk:				
  9070 0000052D 4E                      		dec	si		; ; Return "I don't know"
  9071                                  
  9072                                  		; SI now contains the correct value for media change.
  9073                                  		; Clean up the left overs
  9074                                  Media_Done:	
  9075                                  		; 19/10/2022			
  9076 0000052E 06                      		push	es
  9077 0000052F C41E[1200]              		les	bx, [ptrsav]
  9078 00000533 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  9079 00000537 07                      		pop	es
  9080 00000538 09F6                    		or	si, si
  9081 0000053A 790F                    		jns	short ret_carry_clear ;	volidok
  9082 0000053C 803E[7700]00            		cmp	byte [fhave96], 0
  9083 00000541 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  9084 00000543 E82E13                  		call	media_set_vid
  9085                                  mChk1_NoChangeLine:			
  9086 00000546 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9087                                  					; Make sure we ask rom for media check
  9088                                  ret_carry_clear:			
  9089 0000054B F8                      		clc			; volidok
  9090 0000054C C3                      		retn
  9091                                  ; ---------------------------------------------------------------------------
  9092                                  
  9093                                  err_exitj:				
  9094 0000054D E87C06                  		call	maperror	; guaranteed to	set carry
  9095                                  ret81:					
  9096 00000550 B481                    		mov	ah, 81h		; return error status
  9097 00000552 C3                      		retn			; return with carry set
  9098                                  
  9099                                  ; =============== S U B	R O U T	I N E =======================================
  9100                                  
  9101                                  ; ---------------------------------------------------------------------------
  9102                                  ; perform a check on the time passed since the last access for this physical
  9103                                  ; drive.
  9104                                  ; we are accessing the same drive. if the time of last successful access was
  9105                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  9106                                  ; returns in si:
  9107                                  ;	0 - if time of last access was >= 2 seconds
  9108                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  9109                                  ; registers affected ax,cx,dx, flags.
  9110                                  ;
  9111                                  ;	assume es:di -> bds, ds->Bios_Data
  9112                                  ; ---------------------------------------------------------------------------
  9113                                  
  9114                                  		; 19/10/2022
  9115                                  Check_Time_Of_Access:
  9116 00000553 BE0100                  		mov	si, 1		; presume no change.
  9117 00000556 E821FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  9118 00000559 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  9119                                  					; get stored time
  9120 0000055D 29C2                    		sub	dx, ax
  9121 0000055F 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  9122 00000563 19C1                    		sbb	cx, ax
  9123 00000565 751A                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  9124 00000567 09D2                    		or	dx, dx		; time must pass
  9125 00000569 7511                    		jnz	short timepassed ; yes, examine max value
  9126 0000056B FE06[1D01]              		inc	byte [accesscount]
  9127 0000056F 803E[1D01]05            		cmp	byte [accesscount], 5 
  9128                                  					; if count is less than threshold, ok
  9129 00000574 720C                    		jb	short timecheck_ret
  9130 00000576 FE0E[1D01]              		dec	byte [accesscount] ; don't let the count wrap
  9131 0000057A EB05                    		jmp	short timecheck_unk ; "i don't know" if media changed
  9132                                  ; ---------------------------------------------------------------------------
  9133                                  
  9134                                  timepassed:				
  9135 0000057C 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  9136                                  					; min elapsed time? (2 seconds)
  9137 0000057F 7601                    		jbe	short timecheck_ret ; yes, presume no change
  9138                                  
  9139                                  		; everything indicates that we do not know what has happened.
  9140                                  timecheck_unk:				
  9141 00000581 4E                      		dec	si		; presume i don't know
  9142                                  timecheck_ret:				
  9143 00000582 C3                      		retn
  9144                                  
  9145                                  ; ---------------------------------------------------------------------------
  9146                                  ; 15/10/2022
  9147                                  Err_Exitj2:
  9148 00000583 EBC8                    		jmp	short err_exitj
  9149                                  
  9150                                  ; ---------------------------------------------------------------------------
  9151                                  
  9152                                  ; 15/10/2022
  9153                                  
  9154                                  ; ==========================================================================
  9155                                  ; Build a valid bpb for the disk in the drive.
  9156                                  ; ==========================================================================
  9157                                  
  9158                                  		; 19/10/2022
  9159                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9160 00000585 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9161 00000588 E840FF                  		call	SetDrive	; get the correct bds for the drive
  9162 0000058B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9163                                  					; fnon_removable
  9164 00000590 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9165                                  
  9166                                  		; let's set the default value for volid,vol_serial,
  9167                                  		; filesys_id in bds table
  9168                                  
  9169 00000592 E83700                  		call	clear_ids
  9170                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9171 00000595 C606[0A05]01            		mov	byte [set_id_flag], 1
  9172 0000059A E85A00                  		call	GetBp		; build	a bpb if necessary
  9173 0000059D 72B1                    		jb	short ret81
  9174                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9175 0000059F 803E[0A05]02            		cmp	byte [set_id_flag], 2
  9176                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9177 000005A4 C606[0A05]00            		mov	byte [set_id_flag], 0
  9178 000005A9 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9179                                  					; otherwise, conventional boot record
  9180                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9181 000005AB 803E[7700]00            		cmp	byte [fhave96], 0
  9182 000005B0 7403                    		jz	short already_gotbpb ; brif not
  9183 000005B2 E83313                  		call	set_volume_id
  9184                                  already_gotbpb:				
  9185 000005B5 83C706                  		add	di, 6		; BDS.BPB
  9186                                  					; return the bpb from the current bds
  9187                                  
  9188                                  ;		 fall into setptrsav, es:di -> result
  9189                                  
  9190                                  ; ---------------------------------------------------------------------------
  9191                                  
  9192                                  ; 15/10/2022
  9193                                  
  9194                                  ; ==========================================================================
  9195                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9196                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9197                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9198                                  ;It fails, for instance, when we install an external drive using driver.sys
  9199                                  ;because then the BDS segment is no longer Bios_Data. 
  9200                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9201                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9202                                  ;restored before returning to the caller.
  9203                                  ; ==========================================================================
  9204                                  
  9205                                  		; 19/10/2022
  9206                                  SetPtrSav:	; return point for dsk_init				
  9207 000005B8 8CC1                    		mov	cx, es		; save es
  9208                                  		;les	bx, ds:ptrsav
  9209 000005BA C41E[1200]              		les	bx, [ptrsav]
  9210 000005BE 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9211 000005C2 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9212 000005C6 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9213 000005CA F8                      		clc
  9214 000005CB C3                      		retn
  9215                                  
  9216                                  ; =============== S U B	R O U T	I N E =======================================
  9217                                  
  9218                                  ; 15/10/2022
  9219                                  
  9220                                  ; -----------------------------------------------------
  9221                                  ; clear ids in bds table. only applied for floppies.
  9222                                  ;input:  es:di -> bds table
  9223                                  ;	assumes ds: -> Bios_Data
  9224                                  ;output: volid set to "NO NAME    "
  9225                                  ;	 vol_serial set to 0.
  9226                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9227                                  ;	   depending on the flag fatsize in bds.
  9228                                  ;
  9229                                  ;	trashes si, cx
  9230                                  ; -----------------------------------------------------
  9231                                  
  9232                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9233                                  ;size_of_EXT_SYSTEM_ID equ 8
  9234                                  
  9235                                  clear_ids:		
  9236 000005CC 57                      		push	di
  9237 000005CD 31C9                    		xor	cx, cx		; no serial number
  9238 000005CF 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9239 000005D3 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9240                                  
  9241                                  		; BUGBUG - there's a lot in common here and with
  9242                                  		; mov_media_ids.. see if we can save some space by
  9243                                  		; merging them... jgl
  9244                                  
  9245                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9246                                  		; 10/12/2022
  9247 000005D7 B10B                    		mov	cl, 11 ; cx = 11		
  9248                                  
  9249                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9250 000005D9 BE[1D05]                		mov	si, vol_no_name	; 19/10/2022
  9251 000005DC 83C74B                  		add	di, 75		; BDS.volid
  9252 000005DF F3A4                    		rep movsb
  9253                                  		;test	byte [es:di+BDS.fatsiz], fbig
  9254 000005E1 26F6451F40              		test	byte [es:di+1Fh], 40h
  9255                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9256 000005E6 BE[1405]                		mov	si, fat_16_id	; 19/10/2022
  9257 000005E9 7503                    		jnz	short ci_bigfat
  9258                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9259 000005EB BE[0B05]                		mov	si, fat_12_id	 ; 19/10/2022
  9260                                  ci_bigfat:				
  9261                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9262                                  		; 10/12/2022
  9263 000005EE B108                    		mov	cl, 8 ; cx = 8 
  9264 000005F0 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9265                                  					; filesys_id field
  9266 000005F3 F3A4                    		rep movsb
  9267 000005F5 5F                      		pop	di		; restore bds pointer
  9268 000005F6 C3                      		retn
  9269                                  
  9270                                  ; =============== S U B	R O U T	I N E =======================================
  9271                                  
  9272                                  ; 15/10/2022
  9273                                  
  9274                                  ; ---------------------------------------------------------------------------
  9275                                  ;	getbp - return bpb from the drive specified by the bds.
  9276                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9277                                  ;	    note that we never come here for fixed disks.
  9278                                  ;	    for all other cases,
  9279                                  ;	      - it reads boot sector to pull out the bpb
  9280                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9281                                  ;		to get the fat id byte to build the bpb from there.
  9282                                  ;
  9283                                  ;   inputs:	es:di point to correct bds.
  9284                                  ;
  9285                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9286                                  ;		carry set, and al=7 if invalid disk.
  9287                                  ;		carry set and error code in al if other error.
  9288                                  ;		if failed to recognize the boot record, then will set the
  9289                                  ;		set_id_flag to 0.
  9290                                  ;		this routine will only work for a floppy diskette.
  9291                                  ;		     for a fixed disk, it will just return.
  9292                                  ;
  9293                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9294                                  ;	  segment definitions. It should be migrated towards.
  9295                                  ;	   now es:di has the bds, ds: has Bios_Data
  9296                                  ; ---------------------------------------------------------------------------
  9297                                  
  9298                                  GetBp:		; if returning fake bpb then return bpb as is.
  9299                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
  9300 000005F7 26F6452305              		test	byte [es:di+23h], 5
  9301 000005FC 7403                    		jz	short getbp1	; getbp1
  9302 000005FE E99A00                  		jmp	getret_exit
  9303                                  ; ---------------------------------------------------------------------------
  9304                                  
  9305                                  getbp1:					
  9306 00000601 51                      		push	cx
  9307 00000602 52                      		push	dx
  9308 00000603 53                      		push	bx
  9309                                  
  9310                                  		; attempt to read in boot sector and determine bpb.
  9311                                  		; we assume that the 2.x and greater dos disks all
  9312                                  		; have a valid boot sector.
  9313                                  
  9314 00000604 E8A900                  		call	readbootsec
  9315 00000607 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9316 00000609 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9317 0000060B 7508                    		jnz	short dofatbpb
  9318 0000060D E8EE00                  		call	movbpb		; move bpb into	registers
  9319 00000610 EB57                    		jmp	short Has1
  9320                                  ; ---------------------------------------------------------------------------
  9321                                  
  9322                                  getbp_err_ret_brdg:			
  9323 00000612 E98700                  		jmp	getbp_err_ret
  9324                                  ; ---------------------------------------------------------------------------
  9325                                  
  9326                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9327                                  		; and fill in bpb from there.
  9328                                  dofatbpb:				
  9329 00000615 E85201                  		call	readfat		; puts media descriptor	byte in	ah
  9330 00000618 72F8                    		jb	short getbp_err_ret_brdg
  9331                                  		;cmp	ds:fhave96, 0	;  changeline support available?
  9332 0000061A 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9333 0000061F 7403                    		jz	short bpb_nochangeline ; brif not
  9334 00000621 E86512                  		call	hidensity	; may not return! May add sp, 2	and
  9335                                  					; jump to has1!!!!!! or	has720K
  9336                                  bpb_nochangeline:		; test for a valid 3.5" medium			
  9337 00000624 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9338                                  					; ffSmall
  9339 00000629 7515                    		jnz	short is_floppy
  9340 0000062B 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9341 0000062E 7576                    		jnz	short got_unknown_medium
  9342                                  Has720K:				
  9343                                  		;mov	bx, offset sm92 ; pointer to correct bpb
  9344 00000630 BB[DE04]                		mov	bx, sm92	; 19/10/2022
  9345                                  
  9346                                  		; es points to segment of bds. the following should be modified
  9347                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9348                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9349                                  
  9350                                  		; 10/12/2022
  9351                                  		;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9352                                  		; 21/12/2022
  9353 00000633 8A07                    		mov	al, [bx]
  9354 00000635 8B4F03                  		mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9355 00000638 8B5705                  		mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9356 0000063B 8B5F01                  		mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9357                                  		; 19/10/2022 - Temporary !
  9358                                  		;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9359                                  		;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9360                                  		;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9361                                  		;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]	
  9362                                  
  9363 0000063E EB29                    		jmp	short Has1
  9364                                  ; ---------------------------------------------------------------------------
  9365                                  
  9366                                  is_floppy:			; must be a 5.25" floppy if we come here
  9367 00000640 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9368 00000643 7261                    		jb	short got_unknown_medium
  9369 00000645 B001                    		mov	al, 1		; set number of	fat sectors
  9370 00000647 BB0840                  		mov	bx, 16392	; 64*256+8
  9371                                  					; set dir entries and sector max
  9372 0000064A B94001                  		mov	cx, 320		; 40*8
  9373                                  					; set size of drive
  9374 0000064D BA0101                  		mov	dx, 257		; 01*256+1
  9375                                  					; set head limit and sec/all unit
  9376 00000650 F6C402                  		test	ah, 2		; test for 8 or	9 sector
  9377 00000653 7507                    		jnz	short has8	; nz = has 8 sectors
  9378 00000655 FEC0                    		inc	al		; inc number of	fat sectors
  9379 00000657 FEC3                    		inc	bl		; inc sector max
  9380                                  		;add	cx, 40		; increase size	(to 360)
  9381                                  		; 18/12/2022
  9382 00000659 80C128                  		add	cl, 40
  9383                                  has8:					
  9384 0000065C F6C401                  		test	ah, 1		; test for 1 or	2 heads
  9385 0000065F 7408                    		jz	short Has1	; jz = 1 head
  9386 00000661 01C9                    		add	cx, cx		; double size of disk
  9387 00000663 B770                    		mov	bh, 112		; increase number of directory entries
  9388 00000665 FEC6                    		inc	dh		; inc sec/all unit
  9389 00000667 FEC2                    		inc	dl		; inc head limit
  9390                                  Has1:					
  9391                                  		; 02/09/2023 (PCDOS 7.1, IBMBIO.COM - BIOSCODE:0754h)
  9392 00000669 1E                      		push	ds
  9393 0000066A 06                      		push	es
  9394 0000066B 1F                      		pop	ds		
  9395                                  				
  9396                                  		;mov	[es:di+8], dh	; [es:di+BDS.secperclus]
  9397                                  		;mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
  9398                                  		;mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
  9399                                  		;mov	[es:di+10h], ah	; [es:di+BDS.media]
  9400                                  		;mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
  9401                                  		;mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
  9402                                  		;mov	[es:di+15h], dl	; [es:di+BDS.heads]
  9403                                  
  9404 0000066C 887508                  		mov	[di+8], dh	; [di+BDS.secperclus]
  9405 0000066F 30F6                    		xor	dh, dh
  9406 00000671 895515                  		mov	[di+15h], dx	; [di+BDS.heads]
  9407 00000674 88FA                    		mov	dl, bh
  9408 00000676 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  9409 00000679 894D0E                  		mov	[di+0Eh], cx	; [di+BDS.totalsecs16]
  9410 0000067C 894D1B                  		mov	[di+1Bh], cx	; [di+BDS.totalsecs32]
  9411 0000067F 886510                  		mov	[di+10h], ah	; [di+BDS.media]
  9412 00000682 88C2                    		mov	dl, al
  9413 00000684 895511                  		mov	[di+11h], dx	; [di+BDS.fatsecs]
  9414 00000687 88DA                    		mov	dl, bl
  9415 00000689 895513                  		mov	[di+13h], dx	; [di+BDS.secpertrack]
  9416                                  
  9417                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
  9418                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
  9419                                  		; to 0 since this code is for floppies
  9420                                  
  9421                                  		; 18/12/2022
  9422                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
  9423                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
  9424                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
  9425                                  		; 18/12/2022
  9426 0000068C 29C9                    		sub	cx, cx ; 0
  9427                                  		;mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
  9428                                  		;mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
  9429                                  		;mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
  9430                                  		
  9431                                  		; 02/09/2023
  9432 0000068E 894D19                  		mov	[di+19h], cx ; 0 ; [di+BDS.hiddensecs+2]
  9433 00000691 894D17                  		mov	[di+17h], cx ; 0 ; [di+BDS.hiddensecs]
  9434 00000694 894D1D                  		mov	[di+1Dh], cx ; 0 ; [di+BDS.totalsecs32+2]
  9435                                  		
  9436 00000697 1F                      		pop	ds ; 02/09/2023
  9437                                  getret:					
  9438 00000698 5B                      		pop	bx
  9439 00000699 5A                      		pop	dx
  9440 0000069A 59                      		pop	cx
  9441                                  getret_exit:				
  9442 0000069B C3                      		retn
  9443                                  ; ---------------------------------------------------------------------------
  9444                                  
  9445                                  getbp_err_ret:	; before doing anything else, set set_id_flag	to 0.			
  9446                                  		;mov	ds:set_id_flag,	0
  9447                                  		; 19/10/2022
  9448 0000069C C606[0A05]00            		mov	byte [set_id_flag], 0
  9449 000006A1 E82805                  		call	maperror
  9450 000006A4 EBF2                    		jmp	short getret
  9451                                  ; ---------------------------------------------------------------------------
  9452                                  
  9453                                  		; we have a 3.5" diskette for	which we cannot	build a	bpb.
  9454                                  		; we do	not assume any type of bpb for this medium.
  9455                                  
  9456                                  got_unknown_medium:			
  9457                                  		;mov	ds:set_id_flag,	0 
  9458 000006A6 C606[0A05]00            		mov	byte [set_id_flag], 0
  9459 000006AB B007                    		mov	al, 7
  9460 000006AD F9                      		stc
  9461 000006AE EBE8                    		jmp	short getret
  9462                                  
  9463                                  ; =============== S U B	R O U T	I N E =======================================
  9464                                  
  9465                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
  9466                                  
  9467                                  ; ----------------------------------------------------------------
  9468                                  ; read in the boot sector. set carry if error in reading sector.
  9469                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
  9470                                  ;
  9471                                  ;	assumes es:di -> bds, ds-> Bios_Data
  9472                                  ; ----------------------------------------------------------------
  9473                                  
  9474                                  ; 10/03/2019 - Retro DOS v4.0
  9475                                  
  9476                                  readbootsec:	
  9477 000006B0 B600                    		mov	dh, 0		; head 0
  9478 000006B2 B90100                  		mov	cx, 1		; cylinder 0, sector 1
  9479 000006B5 E8BF00                  		call	read_sector
  9480 000006B8 7243                    		jb	short err_ret
  9481 000006BA 31DB                    		xor	bx, bx		; assume valid boot sector
  9482                                  
  9483                                  		; put a sanity check for the boot sector in here to detect
  9484                                  		; boot sectors that do not have valid bpbs. we examine the
  9485                                  		; first two bytes - they must contain a long jump (69h) or a
  9486                                  		; short jump (EBh) followed by a nop (90h), or a short jump
  9487                                  		; (E9h). if this test is passed, we further check by examining
  9488                                  		; the signature at the end of the boot sector for the word
  9489                                  		; AA55h. if the signature is not present, we examine the media
  9490                                  		; descriptor byte to see if it is valid. for dos 3.3, this
  9491                                  		; logic is modified a little bit. we are not going to check
  9492                                  		; signature. instead we are going to sanity check the media
  9493                                  		; byte in bpb regardless of the validity of signature. this is
  9494                                  		; to save the already developed commercial products that have
  9495                                  		; good jump instruction and signature but with the false bpb
  9496                                  		; informations
  9497                                  
  9498                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
  9499                                  
  9500                                  		; 02/09/2023
  9501                                  		; 19/10/2022
  9502                                  		;cmp	byte [disksector], 69h ; is it a direct jump?
  9503                                  		;jz	short check_bpb_mediabyte ; don't need to find a nop
  9504                                  		;cmp	byte [disksector], 0E9h ; dos 2.0 jump?
  9505                                  		;jz	short check_bpb_mediabyte ; no need for	nop
  9506                                  		;cmp	byte [disksector], 0EBh ; how about a short jump?
  9507                                  		;jnz	short invalidbootsec
  9508                                  		;cmp	byte [disksector+2], 90h ; is next one a nop?
  9509                                  		;jnz	short invalidbootsec
  9510                                  
  9511                                  		; 02/09/2023 (PCDOS 7.1)
  9512 000006BC A0[4E01]                		mov	al, [disksector]
  9513 000006BF 3C69                    		cmp	al, 69h		; is it a direct jump?
  9514 000006C1 740F                    		je	short check_bpb_mediabyte
  9515                                  					; don't need to find a nop
  9516 000006C3 3CE9                    		cmp	al, 0E9h	; dos 2.0 jump?
  9517 000006C5 740B                    		je	short check_bpb_mediabyte
  9518                                  					; no need for nop
  9519 000006C7 3CEB                    		cmp	al, 0EBh	; how about a short jump?
  9520 000006C9 7530                    		jne	short invalidbootsec
  9521 000006CB 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
  9522 000006D0 7529                    		jne	short invalidbootsec
  9523                                  
  9524                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9525                                  ;
  9526                                  ;; 10/03/2019
  9527                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
  9528                                  ;;
  9529                                  ;; Don't have to perform the following signature check since
  9530                                  ;; we need to check the media byte even with the good signatured diskette.
  9531                                  ;;
  9532                                  ;;check_signature:
  9533                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
  9534                                  ;;							 ; disk or 1.x media.
  9535                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
  9536                                  ;;					       ; may need some special handling
  9537                                  
  9538                                  ; check for non-ibm disks which do not have the signature AA55h at the
  9539                                  ; end of the boot sector, but still have a valid boot sector. this is done
  9540                                  ; by examining the media descriptor in the boot sector.
  9541                                  
  9542                                  		; 19/10/2022
  9543                                  check_bpb_mediabyte:
  9544 000006D2 A0[6301]                		mov	al, [disksector+15h]
  9545                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9546 000006D5 50                      		push	ax ; 02/09/2023
  9547 000006D6 24F0                    		and	al, 0F0h
  9548 000006D8 3CF0                    		cmp	al, 0F0h	; allow	for strange media
  9549 000006DA 58                      		pop	ax ; 02/09/2023
  9550 000006DB 751E                    		jnz	short invalidbootsec
  9551                                  
  9552                                  ; there were some (apparently a lot of them) diskettes that had been formatted
  9553                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
  9554                                  ; sectors. these are specifically diskettes that were formatted in drives
  9555                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
  9556                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
  9557                                  ; in dos. in order to support them, we have to introduce a "hack" that will
  9558                                  ; help our build bpb routine to recognise these specific cases, and to
  9559                                  ; set up out copy of the bpb accordingly.
  9560                                  ; we do this by checking to see if the boot sector is off a diskette that
  9561                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
  9562                                  ; sec/clus field to 1. if not, we carry on as normal.
  9563                                  
  9564                                  checksinglesided:
  9565                                  		;mov	al, [disksector+15h]
  9566                                  		; 02/09/2023
  9567                                  		; al = [disksector+15h]
  9568 000006DD 3CF0                    		cmp	al, 0F0h
  9569 000006DF 741B                    		jz	short gooddsk
  9570 000006E1 A801                    		test	al, 1
  9571 000006E3 7517                    		jnz	short gooddsk
  9572 000006E5 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
  9573 000006EB 7507                    		jnz	short mustbeearlier
  9574 000006ED 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
  9575 000006F2 7308                    		jnb	short gooddsk
  9576                                  
  9577                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
  9578                                  
  9579                                  mustbeearlier:				
  9580 000006F4 C606[5B01]01            		mov	byte [disksector+0Dh], 1
  9581                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9582 000006F9 EB01                    		jmp	short gooddsk
  9583                                  ; ---------------------------------------------------------------------------
  9584                                  
  9585                                  invalidbootsec:				
  9586 000006FB 43                      		inc	bx		; indicate that boot sector invalid
  9587                                  		; 10/12/2022
  9588                                  movbpb_ret:
  9589                                  gooddsk:				
  9590 000006FC F8                      		clc
  9591                                  err_ret:
  9592 000006FD C3                      		retn
  9593                                  ; ---------------------------------------------------------------------------
  9594                                  
  9595                                  		; 10/12/2022
  9596                                  ;err_ret:				
  9597                                  		;retn
  9598                                  
  9599                                  ; =============== S U B	R O U T	I N E =======================================
  9600                                  
  9601                                  ; 15/10/2022
  9602                                  ; ---------------------------------------------------------------------------
  9603                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
  9604                                  ; getbp routine at has1
  9605                                  ;
  9606                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
  9607                                  ; serial number, volume label, file system id in bds according to
  9608                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
  9609                                  ; to signal that volume label is set already from the extended boot record
  9610                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
  9611                                  ; the volume label in the root directory.)
  9612                                  ; ---------------------------------------------------------------------------
  9613                                  
  9614                                  ; 10/03/2019 - Retro DOS v4.0
  9615                                  
  9616                                  		; 19/10/2022
  9617                                  movbpb:	
  9618 000006FE 8A36[5B01]              		mov	dh, [disksector+0Dh]
  9619                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9620                                  					; sectors per unit
  9621 00000702 8A3E[5F01]              		mov	bh, [disksector+11h]
  9622                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
  9623                                  					; number of directory entries
  9624 00000706 8B0E[6101]              		mov	cx, [disksector+13h]
  9625                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
  9626                                  					; size of drive
  9627 0000070A 8A26[6301]              		mov	ah, [disksector+15h]
  9628                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9629                                  					; media	descriptor
  9630 0000070E A0[6401]                		mov	al, [disksector+16h];
  9631                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
  9632                                  					; number of fat	sectors
  9633 00000711 8A1E[6601]              		mov	bl, [disksector+18h]
  9634                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
  9635                                  					; sectors per track
  9636 00000715 8A16[6801]              		mov	dl, [disksector+1Ah]
  9637                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
  9638                                  					; number of heads
  9639 00000719 803E[0A05]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
  9640 0000071E 75DC                    		jnz	short movbpb_ret
  9641 00000720 E81200                  		call	mov_media_ids
  9642 00000723 7205                    		jb	short movbpb_conv ; conventional boot record?
  9643 00000725 C606[0A05]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
  9644                                  movbpb_conv:				
  9645 0000072A 803E[7700]01            		cmp	byte [fhave96], 1
  9646 0000072F 75CB                    		jnz	short movbpb_ret
  9647 00000731 E8A811                  		call	resetchanged	; reset	flags in bds to	not fchanged.
  9648                                  		; 10/12/2022
  9649                                  		; cf = 0
  9650                                  ;movbpb_ret:				
  9651                                  		;clc
  9652 00000734 C3                      		retn
  9653                                  
  9654                                  ; =============== S U B	R O U T	I N E =======================================
  9655                                  
  9656                                  ;copy the boot_serial number, volume id, and filesystem id from the
  9657                                  ;***extended boot record*** in ds:disksector to the bds table pointed
  9658                                  ;by es:di.
  9659                                  
  9660                                  ;in.) es:di -> bds
  9661                                  ;     ds:disksector = valid extended boot record.
  9662                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
  9663                                  ;      the boot record information.
  9664                                  ;     carry flag set if not an extended bpb.
  9665                                  ;     all registers saved except the flag.
  9666                                  
  9667                                  		; 19/10/2022
  9668                                  mov_media_ids:		
  9669 00000735 803E[7401]29            		cmp	byte [disksector+26h], 29h
  9670                                  					; [disksector+EXT_BOOT.SIG],
  9671                                  					; EXT_BOOT_SIGNATURE
  9672 0000073A 752C                    		jnz	short mmi_not_ext
  9673 0000073C 51                      		push	cx
  9674 0000073D 8B0E[7501]              		mov	cx, [disksector+27h]
  9675                                  					; [disksector+EXT_BOOT.SERIAL]
  9676 00000741 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9677 00000745 8B0E[7701]              		mov	cx, [disksector+29h]
  9678                                  					; [disksector+EXT_BOOT.SERIAL+2]
  9679 00000749 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9680 0000074D 57                      		push	di
  9681 0000074E 56                      		push	si
  9682 0000074F B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9683 00000752 BE[7901]                		mov	si, disksector+2Bh
  9684                                  		;mov	si, (offset disksector+2Bh) ;
  9685                                  					; disksector+EXT_BOOT.VOL_LABEL
  9686 00000755 83C74B                  		add	di, 75		; BDS.volid
  9687 00000758 F3A4                    		rep movsb
  9688                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9689                                  		; 10/12/2022
  9690 0000075A B108                    		mov	cl, 8 ; cx = 8
  9691 0000075C BE[8401]                		mov	si, disksector+36h
  9692                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
  9693 0000075F 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9694 00000762 F3A4                    		rep movsb
  9695 00000764 5E                      		pop	si
  9696 00000765 5F                      		pop	di
  9697 00000766 59                      		pop	cx
  9698                                  		; 10/12/2022
  9699                                  		; cf = 0
  9700                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
  9701                                  				; (20/09/2022)
  9702 00000767 C3                      		retn
  9703                                  ; ---------------------------------------------------------------------------
  9704                                  
  9705                                  mmi_not_ext:				
  9706 00000768 F9                      		stc
  9707 00000769 C3                      		retn
  9708                                  
  9709                                  ; =============== S U B	R O U T	I N E =======================================
  9710                                  
  9711                                  ; 15/10/2022
  9712                                  ; --------------------------------------------------------------
  9713                                  ; read in the fat sector and get the media byte from it.
  9714                                  ; input : es:di -> bds
  9715                                  ; output:
  9716                                  ;	  carry set if an error occurs, ax contains error code.
  9717                                  ;	  otherwise, ah contains media byte on exit
  9718                                  ; --------------------------------------------------------------
  9719                                  
  9720                                  readfat:	
  9721                                  		;mov	dh, 0
  9722                                  		; 10/12/2022
  9723 0000076A 30F6                    		xor	dh, dh
  9724 0000076C B90200                  		mov	cx, 2		; head 0
  9725                                  					; cylinder 0, sector 2
  9726 0000076F E80500                  		call	read_sector
  9727 00000772 7202                    		jb	short bad_fat_ret
  9728 00000774 8A27                    		mov	ah, [bx]	; media	byte
  9729                                  bad_fat_ret:				
  9730 00000776 C3                      		retn
  9731                                  
  9732                                  ; =============== S U B	R O U T	I N E =======================================
  9733                                  
  9734                                  ; 15/10/2022
  9735                                  
  9736                                  ; ---------------------------------------------------------------------------
  9737                                  ; read a single sector into the temp buffer.
  9738                                  ; perform three retries in case of error.
  9739                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
  9740                                  ;		cx has sector and cylinder
  9741                                  ;		dh has head
  9742                                  ;		es:di has bds
  9743                                  ;		ds has Bios_Data
  9744                                  ;
  9745                                  ;   outputs:	carry clear
  9746                                  ;		    Bios_Data:bx point to sector
  9747                                  ;		       (note: some callers assume location of buffer)
  9748                                  ;
  9749                                  ;		carry set
  9750                                  ;		    ax has rom error code
  9751                                  ;
  9752                                  ; register bp is preserved.
  9753                                  ; ---------------------------------------------------------------------------
  9754                                  
  9755                                  ; 10/03/2019 - Retro DOS v4.0
  9756                                  
  9757                                  		; 19/10/2022
  9758                                  read_sector:	
  9759 00000777 55                      		push	bp
  9760 00000778 BD0300                  		mov	bp, 3		; make 3 attempts
  9761 0000077B 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
  9762 0000077F BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
  9763                                  rd_ret:					
  9764 00000782 06                      		push	es
  9765 00000783 1E                      		push	ds
  9766 00000784 07                      		pop	es
  9767 00000785 B80102                  		mov	ax, 201h
  9768 00000788 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9769                                  					; AL = number of sectors to read, CH = track, CL = sector
  9770                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9771                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9772 0000078A 07                      		pop	es
  9773 0000078B 734A                    		jnb	short okret2
  9774                                  rd_rty:					
  9775 0000078D E87404                  		call	again		; reset	disk, decrement	bp, preserve ax
  9776 00000790 7442                    		jz	short err_rd_ret
  9777 00000792 26F6452301              		test	byte [es:di+23h], 1
  9778                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
  9779                                  					; fnon_removable
  9780 00000797 75E9                    		jnz	short rd_ret
  9781 00000799 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9782 0000079E 7510                    		jnz	short rd_skip1_dpt
  9783 000007A0 50                      		push	ax
  9784 000007A1 1E                      		push	ds		; for retry, set the head settle time to 0Fh
  9785 000007A2 C536[2D01]              		lds	si, [dpt]
  9786                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9787                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
  9788                                  		;			; NORMSETTLE
  9789                                  		; 12/12/2022
  9790 000007A6 B00F                    		mov	al, 15
  9791 000007A8 864409                  		xchg	al, [si+9]
  9792                                  		; 
  9793 000007AB 1F                      		pop	ds
  9794 000007AC A2[2A01]                		mov	[save_head_sttl], al
  9795 000007AF 58                      		pop	ax
  9796                                  rd_skip1_dpt:				
  9797 000007B0 06                      		push	es
  9798 000007B1 1E                      		push	ds
  9799 000007B2 07                      		pop	es
  9800 000007B3 B80102                  		mov	ax, 201h
  9801 000007B6 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9802                                  					; AL = number of sectors to read, CH = track, CL = sector
  9803                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9804                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9805 000007B8 07                      		pop	es
  9806 000007B9 9C                      		pushf
  9807 000007BA 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9808 000007BF 750E                    		jnz	short rd_skip2_dpt
  9809 000007C1 50                      		push	ax
  9810 000007C2 A0[2A01]                		mov	al, [save_head_sttl]
  9811 000007C5 1E                      		push	ds
  9812 000007C6 C536[2D01]              		lds	si, [dpt]
  9813 000007CA 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9814 000007CD 1F                      		pop	ds
  9815 000007CE 58                      		pop	ax
  9816                                  rd_skip2_dpt:				
  9817 000007CF 9D                      		popf
  9818 000007D0 7305                    		jnb	short okret2
  9819 000007D2 EBB9                    		jmp	short rd_rty
  9820                                  ; ---------------------------------------------------------------------------
  9821                                  
  9822                                  err_rd_ret:				
  9823 000007D4 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
  9824                                  					; return error
  9825 000007D6 F9                      		stc
  9826                                  
  9827                                  ; update information pertaining to last drive accessed, time of access, last
  9828                                  ; track accessed in that drive.
  9829                                  
  9830                                  okret2:					
  9831 000007D7 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
  9832 000007DB 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
  9833 000007DF 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
  9834                                  					; save last track accessed on this drive
  9835                                  					; preserve flags in case error occurred
  9836 000007E3 9C                      		pushf
  9837 000007E4 E8FD03                  		call	set_tim
  9838 000007E7 9D                      		popf			; restore flags
  9839 000007E8 5D                      		pop	bp
  9840 000007E9 C3                      		retn
  9841                                  
  9842                                  ;----------------------------------------------------------------------------
  9843                                  ;	disk open/close routines
  9844                                  ;----------------------------------------------------------------------------
  9845                                  
  9846                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
  9847 000007EA 803E[7700]00            		cmp	byte [fhave96], 0
  9848 000007EF 7407                    		jz	short dsk_open_exit ; done if no changeline support
  9849 000007F1 E8D7FC                  		call	SetDrive	; get bds for drive
  9850 000007F4 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
  9851                                  dsk_open_exit:	
  9852                                  		; 10/12/2022
  9853                                  		; cf = 0			
  9854                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9855                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9856 000007F8 C3                      		retn
  9857                                  ; ---------------------------------------------------------------------------
  9858                                  
  9859                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
  9860 000007F9 803E[7700]00            		cmp	byte [fhave96], 0
  9861 000007FE 740E                    		jz	short exitjx	; done if no changeline	support
  9862 00000800 E8C8FC                  		call	SetDrive	; get bds for drive
  9863 00000803 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
  9864 00000808 7404                    		jz	short exitjx	; watch	out for	wrap
  9865 0000080A 26FF4D20                		dec	word [es:di+20h]
  9866                                  exitjx:					
  9867                                  		; 10/12/2022
  9868                                  		; cf = 0
  9869                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9870                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9871 0000080E C3                      		retn
  9872                                  
  9873                                  ;----------------------------------------------------------------------------
  9874                                  ;		disk removable routine
  9875                                  ;----------------------------------------------------------------------------
  9876                                  
  9877                                  		; al is	unit #
  9878                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
  9879 0000080F E8B9FC                  		call	SetDrive	; get bds for this drive
  9880                                  		;test	byte [es:di+BDS.flags], fnon_removable
  9881 00000812 26F6452301              		test	byte [es:di+23h], 1
  9882                                  		;jnz	short x_bus_exit ; non_rem
  9883 00000817 7501                    		jnz	short non_rem	; 15/10/2022
  9884                                  		; 10/12/2022
  9885                                  		; cf = 0
  9886                                  		;clc			; CF is already ZERO here
  9887                                  					; 15/10/2022
  9888 00000819 C3                      		retn
  9889                                  ; ---------------------------------------------------------------------------
  9890                                  
  9891                                  non_rem:
  9892                                  x_bus_exit:				
  9893 0000081A B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
  9894                                  					; return busy status
  9895 0000081C F9                      		stc
  9896                                  dsk_ret:				
  9897 0000081D C3                      		retn
  9898                                  
  9899                                  ;----------------------------------------------------------------------------
  9900                                  ;		disk i/o routines
  9901                                  ;----------------------------------------------------------------------------
  9902                                  
  9903                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
  9904                                  		;mov	word [wrtverify], 103h
  9905                                  		; 19/10/2022
  9906 0000081E C706[2001]0301          		mov	word [rflag], 103h
  9907                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
  9908 00000824 EB06                    		jmp	short dsk_cl
  9909                                  ; ---------------------------------------------------------------------------
  9910                                  
  9911                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
  9912                                  		;mov	word [wrtverify], 3
  9913                                  		; 19/10/2022
  9914 00000826 C706[2001]0300          		mov	word [rflag], 3
  9915                                  		;mov	word ptr ds:rflag, 3 ; romwrite
  9916                                  
  9917                                  dsk_cl:					
  9918 0000082C E89800                  		call	diskio		; romwrite
  9919                                  ; ---------------------------------------------------------------------------
  9920                                  
  9921                                  dsk_io:					
  9922 0000082F 73EC                    		jnb	short dsk_ret
  9923 00000831 E9A3F8                  		jmp	bc_err_cnt
  9924                                  ; ---------------------------------------------------------------------------
  9925                                  
  9926                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
  9927 00000834 E88B00                  		call	diskrd
  9928 00000837 EBF6                    		jmp	short dsk_io
  9929                                  
  9930                                  ; =============== S U B	R O U T	I N E =======================================
  9931                                  
  9932                                  ; 15/10/2022
  9933                                  ; 10/03/2019 - Retro DOS v4.0
  9934                                  
  9935                                  ;-----------------------------------------------------------
  9936                                  ; miscellaneous odd jump routines. 
  9937                                  ; moved out of mainline for speed.
  9938                                  
  9939                                  ; if we have a system where we have virtual drives, we need 
  9940                                  ; to prompt the user to place the correct disk in the drive.
  9941                                  ;
  9942                                  ;	assume es:di -> bds, ds:->Bios_Data
  9943                                  ;-----------------------------------------------------------
  9944                                  
  9945                                  		; 19/10/2022
  9946                                  checksingle:		
  9947 00000839 50                      		push	ax
  9948 0000083A 53                      		push	bx
  9949 0000083B 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
  9950                                  
  9951                                  ; if hard drive, cannot change disk.
  9952                                  ; if current owner of physical drive, no need to change diskette.
  9953                                  
  9954 0000083F F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
  9955 00000842 7573                    		jnz	short singleret
  9956 00000844 F6C310                  		test	bl, 10h		; fi_am_mult
  9957                                  					; is there a drive sharing this	physical drive?
  9958 00000847 746E                    		jz	short singleret
  9959                                  
  9960                                  
  9961                                  ; look for the previous owner of this physical drive
  9962                                  ; and reset its ownership flag.
  9963                                  
  9964 00000849 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
  9965                                  					; get physical drive number
  9966 0000084D 06                      		push	es		; preserve pointer to current bds
  9967 0000084E 57                      		push	di
  9968 0000084F C43E[1901]              		les	di, [start_bds] ; get first bds
  9969                                  scan_list:				
  9970 00000853 26384504                		cmp	[es:di+4], al
  9971 00000857 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
  9972 00000859 B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
  9973 0000085B 26845D23                		test	[es:di+23h], bl
  9974 0000085F 744B                    		jz	short scan_skip	; he doesn't own it either. continue
  9975 00000861 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
  9976 00000865 5F                      		pop	di		; restore pointer to current bds
  9977 00000866 07                      		pop	es
  9978 00000867 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
  9979                                  
  9980                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
  9981                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
  9982                                  ; in this case.
  9983 0000086B 803E[7A00]01            		cmp	byte [fsetowner], 1
  9984 00000870 7517                    		jnz	short not_fsetowner
  9985                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
  9986 00000872 26807D0400              		cmp	byte [es:di+4], 0
  9987 00000877 753E                    		jnz	short singleret
  9988 00000879 268A4505                		mov	al, [es:di+5]
  9989                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
  9990                                  					; get the DOS drive letter
  9991 0000087D 06                      		push	es
  9992 0000087E 8E06[1A00]              		mov	es, [zeroseg]
  9993 00000882 26A20405                		mov	[es:LSTDRV], al
  9994                                  		;mov	es:504h, al	; [es:LSTDRV]
  9995                                  					; set up sdsb
  9996 00000886 07                      		pop	es		; restore bds pointer
  9997 00000887 EB2E                    		jmp	short singleret
  9998                                  ; ---------------------------------------------------------------------------
  9999                                  
 10000                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 10001                                  ; we now check to see if we are in a single drive system and the application
 10002                                  ; has "cleverly" diddled the sdsb
 10003                                  
 10004                                  not_fsetowner:				
 10005 00000889 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 10006 0000088E 7517                    		jnz	short ignore_sdsb
 10007 00000890 50                      		push	ax
 10008 00000891 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 10009 00000895 88C4                    		mov	ah, al
 10010 00000897 06                      		push	es
 10011 00000898 8E06[1A00]              		mov	es, [zeroseg]
 10012 0000089C 2686060405              		xchg	al, [es:LSTDRV]
 10013                                  		;xchg	al, es:504h	; [es:LSTDRV]
 10014                                  					; then swap(curr_drv,req_drv)
 10015 000008A1 07                      		pop	es
 10016 000008A2 38C4                    		cmp	ah, al		; else
 10017 000008A4 58                      		pop	ax		; swap(curr_drv,req_drv)
 10018 000008A5 7410                    		jz	short singleret	; issue	swap_dsk_msg
 10019                                  ignore_sdsb:				
 10020 000008A7 E85C0E                  		call	swpdsk
 10021 000008AA EB0B                    		jmp	short singleret
 10022                                  ; ---------------------------------------------------------------------------
 10023                                  
 10024                                  scan_skip:	
 10025 000008AC 26C43D                  		les	di, [es:di]			
 10026                                  		;les	di, es:[di]	; [es:di+BDS.link]
 10027                                  					; go to	next bds
 10028 000008AF 83FFFF                  		cmp	di, 0FFFFh	; end of list?
 10029 000008B2 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
 10030 000008B4 F9                      		stc
 10031 000008B5 5F                      		pop	di		; restore current bds
 10032 000008B6 07                      		pop	es
 10033                                  
 10034                                  singleret:				
 10035 000008B7 5B                      		pop	bx
 10036 000008B8 58                      		pop	ax
 10037 000008B9 C3                      		retn
 10038                                  
 10039                                  ; ---------------------------------------------------------------------------
 10040                                  
 10041                                  baddrive:				
 10042 000008BA B008                    		mov	al, 8		; sector not found
 10043 000008BC EB02                    		jmp	short baddrive_ret
 10044                                  ; ---------------------------------------------------------------------------
 10045                                  
 10046                                  unformatteddrive:				
 10047 000008BE B007                    		mov	al, 7		; unknown media
 10048                                  baddrive_ret:				
 10049 000008C0 F9                      		stc
 10050                                  ; ---------------------------------------------------------------------------
 10051                                  
 10052                                  ioret:		
 10053 000008C1 C3                      		retn
 10054                                  
 10055                                  ; ---------------------------------------------------------------------------
 10056                                  
 10057                                  ; 15/10/52022
 10058                                  
 10059                                  ; ---------------------------------------------------------------------------
 10060                                  ;	disk i/o handler
 10061                                  ;
 10062                                  ;	al = drive number (0-6)
 10063                                  ;	ah = media descriptor
 10064                                  ;	cx = sector count
 10065                                  ;	dx = first sector (low)
 10066                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 10067                                  ;	ds = cs
 10068                                  ;	es:di = transfer address
 10069                                  ;	[rflag]=operation (2=read, 3=write)
 10070                                  ;	[verify]=1 for verify after write
 10071                                  ;
 10072                                  ;	if successful carry flag = 0
 10073                                  ;	  else cf=1 and al contains error code
 10074                                  ; ---------------------------------------------------------------------------
 10075                                  
 10076                                  diskrd:	
 10077                                  		;mov	ds:rflag, 2	; romread
 10078                                  		; 19/10/2022
 10079 000008C2 C606[2001]02            		mov	byte [rflag], 2 ; romread
 10080                                  
 10081                                  ; =============== S U B	R O U T	I N E =======================================
 10082                                  
 10083                                  		; 19/10/2022
 10084                                  diskio:
 10085 000008C7 89FB                    		mov	bx, di		; es:bx	= transfer address
 10086 000008C9 8C06[3705]              		mov	[xfer_seg], es	; save transfer	segment
 10087 000008CD E8FBFB                  		call	SetDrive
 10088 000008D0 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 10089 000008D4 A2[1F01]                		mov	[medbyt], al
 10090                                  		;jcxz	short ioret
 10091 000008D7 E3E8                    		jcxz	ioret
 10092                                  
 10093                                  ; see if the media is formatted or not by checking the flags field in
 10094                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 10095                                  ; go to the error exit at label unformatteddrive.
 10096                                  
 10097 000008D9 26F6452402              		test	byte [es:di+24h], 2
 10098                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 10099                                  					; unformatted_media
 10100 000008DE 75DE                    		jnz	short unformatteddrive
 10101 000008E0 890E[2201]              		mov	[seccnt], cx	; save sector count
 10102 000008E4 8926[3501]              		mov	[spsav], sp	; save sp
 10103                                  
 10104                                  ; ensure that we are trying to access valid sectors on the drive
 10105                                  
 10106 000008E8 89D0                    		mov	ax, dx
 10107 000008EA 31F6                    		xor	si, si
 10108 000008EC 01CA                    		add	dx, cx
 10109                                  		;adc	si, 0
 10110                                  		; 02/09/2023 (PCDOS 7.1)
 10111 000008EE D1D6                    		rcl	si, 1
 10112 000008F0 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 10113                                  					; > 32 bit sector ?
 10114 000008F5 740C                    		jz	short sanity32
 10115                                  		;cmp	si, 0
 10116                                  		; 02/09/2023
 10117 000008F7 09F6                    		or	si, si
 10118 000008F9 75BF                    		jnz	short baddrive
 10119 000008FB 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 10120 000008FF 77B9                    		ja	short baddrive
 10121 00000901 EB12                    		jmp	short sanityok
 10122                                  ; ---------------------------------------------------------------------------
 10123                                  
 10124                                  sanity32:				
 10125 00000903 0336[2B05]              		add	si, [start_sec_h]
 10126 00000907 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 10127 0000090B 7208                    		jb	short sanityok
 10128 0000090D 77AB                    		ja	short baddrive
 10129 0000090F 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 10130 00000913 77A5                    		ja	short baddrive
 10131                                  
 10132                                  sanityok:				
 10133 00000915 8B16[2B05]              		mov	dx, [start_sec_h]
 10134 00000919 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 10135 0000091D 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 10136                                  
 10137                                  ; now dx;ax have the physical first sector.
 10138                                  ; since the following procedures is going to destroy ax, let's
 10139                                  ; save it temporarily to saved_word.
 10140                                  
 10141 00000921 A3[2D05]                		mov	[saved_word], ax ; save the sector number (low)
 10142                                  
 10143                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 10144                                  ; will do it because we will skip the set up stuff with hard disks.
 10145                                  
 10146 00000924 06                      		push	es
 10147                                  		;mov	es, [zeroseg]
 10148                                  		; 02/09/2023
 10149 00000925 31F6                    		xor	si, si ; 0
 10150 00000927 8EC6                    		mov	es, si
 10151 00000929 26C4367800              		les	si, [es:DSKADR]
 10152                                  		;les	si, es:78h	; [es:DSKADR]
 10153                                  					; current disk parm table
 10154 0000092E 8936[2D01]              		mov	[dpt], si
 10155 00000932 8C06[2F01]              		mov	[dpt+2], es
 10156 00000936 07                      		pop	es
 10157 00000937 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10158                                  					; fnon_removable
 10159 0000093C 7510                    		jnz	short skip_setup
 10160 0000093E E8F8FE                  		call	checksingle
 10161                                  
 10162                                  ; check to see if we have previously noted a change line. the routine
 10163                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 10164                                  ; the proper error code.
 10165                                  
 10166 00000941 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 10167 00000946 7403                    		jz	short diskio_nochangeline ; brif not
 10168 00000948 E8890E                  		call	checklatchio	; will do a sneaky pop stack return
 10169                                  					; if a disk error occurs
 10170                                  diskio_nochangeline:			
 10171 0000094B E84700                  		call	iosetup		; set up tables	and variables for i/o
 10172                                  
 10173                                  ; now the settle values are correct for the following code
 10174                                  
 10175                                  skip_setup:
 10176                                  
 10177                                  ; 32 bit sector calculation.
 10178                                  ; dx:[saved_word] = starting sector number.
 10179                                  				
 10180 0000094E 89D0                    		mov	ax, dx
 10181 00000950 31D2                    		xor	dx, dx
 10182                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10183                                  					 ; divide by sec per track
 10184                                  		; 02/09/2023
 10185 00000952 268B4D13                		mov	cx, [es:di+13h]
 10186 00000956 F7F1                    		div	cx
 10187 00000958 A3[2905]                		mov	[temp_h], ax
 10188 0000095B A1[2D05]                		mov	ax, [saved_word]
 10189 0000095E F7F1                    		div	cx ; 02/09/2023
 10190                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10191                                  					; now, [temp_h]:ax = track #, dx = sector
 10192                                  		;inc	dl		; sector number	is 1 based.
 10193                                  		; 18/12/2022
 10194 00000960 42                      		inc	dx
 10195 00000961 8816[3101]              		mov	[cursec], dl	; save current sector
 10196 00000965 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 10197                                  					; get number of	heads
 10198 00000969 50                      		push	ax
 10199 0000096A 31D2                    		xor	dx, dx
 10200 0000096C A1[2905]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 10201 0000096F F7F1                    		div	cx
 10202 00000971 A3[2905]                		mov	[temp_h], ax
 10203 00000974 58                      		pop	ax
 10204 00000975 F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10205 00000977 833E[2905]00            		cmp	word [temp_h], 0
 10206 0000097C 7714                    		ja	short baddrive_brdg
 10207 0000097E 3D0004                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 10208 00000981 770F                    		ja	short baddrive_brdg
 10209 00000983 8816[3201]              		mov	[curhd], dl	; save current head
 10210 00000987 A3[3301]                		mov	[curtrk], ax	; save current track
 10211                                  
 10212                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10213                                  ; violations here. not true. we perform the operation as if everything is
 10214                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10215                                  
 10216 0000098A A1[2201]                		mov	ax, [seccnt]
 10217 0000098D E88400                  		call	block		; (cas - call/ret)
 10218                                  		;call	done
 10219                                  		;retn
 10220                                  		; 18/12/2022
 10221 00000990 EB4B                    		jmp	done
 10222                                  
 10223                                  ; ---------------------------------------------------------------------------
 10224                                  
 10225                                  baddrive_brdg:				
 10226 00000992 E925FF                  		jmp	baddrive
 10227                                  
 10228                                  ; =============== S U B	R O U T	I N E =======================================
 10229                                  
 10230                                  ;--------------------------------------------------------------
 10231                                  ; set the drive-last-accessed flag for diskette only. 
 10232                                  ; we know that the hard disk will not be removed.
 10233                                  ; es:di -> current bds.
 10234                                  ; ds -> Bios_Data
 10235                                  ; ax,cx,si are destroyed.
 10236                                  ;--------------------------------------------------------------
 10237                                  
 10238                                  		; 19/10/2022
 10239                                  iosetup:	
 10240 00000995 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10241 00000999 A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10242                                  
 10243                                  ; determine proper head settle values
 10244                                  
 10245 0000099C 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10246 000009A1 7539                    		jnz	short skip_dpt_setting
 10247 000009A3 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10248 000009A6 1E                      		push	ds
 10249 000009A7 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10250 000009AB 884404                  		mov	[si+4],	al
 10251 000009AE 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10252 000009B1 8A6404                  		mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10253 000009B4 1F                      		pop	ds
 10254 000009B5 A2[2601]                		mov	[motorstartup], al
 10255 000009B8 8826[2B01]              		mov	[save_eot], ah
 10256                                  
 10257                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10258                                  ; motor start time to 4. this checking for every i/o is going to affect
 10259                                  ; performance across the board, but is necessary!!
 10260                                  
 10261 000009BC 1E                      		push	ds
 10262 000009BD C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10263 000009C1 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10264                                  					; ffSmall
 10265 000009C6 7505                    		jnz	short motor_start_ok
 10266 000009C8 B004                    		mov	al, 4
 10267 000009CA 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10268                                  motor_start_ok:
 10269                                  
 10270                                  ; ds:si now points to disk parameter table.
 10271                                  ; get current settle and set fast settle
 10272                                  				
 10273                                  		;xor	al, al
 10274                                  		;inc	al		; ibm wants fast settle	to be 1
 10275                                  		; 18/12/2022
 10276 000009CD 31C0                    		xor	ax, ax
 10277 000009CF 40                      		inc	ax
 10278 000009D0 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10279                                  					; get settle and set up	for fast
 10280 000009D3 1F                      		pop	ds
 10281 000009D4 A2[2701]                		mov	[settlecurrent], al
 10282 000009D7 B00F                    		mov	al, 15		; NORMSETTLE
 10283                                  					; someone has diddled the settle
 10284 000009D9 A2[2801]                		mov	[settleslow], al
 10285                                  skip_dpt_setting:			
 10286 000009DC C3                      		retn
 10287                                  
 10288                                  ; =============== S U B	R O U T	I N E =======================================
 10289                                  
 10290                                  ;--------------------------------------------------------------
 10291                                  ; set time of last access, and reset default values in the dpt.
 10292                                  ;
 10293                                  ;	  note: trashes (at least) si
 10294                                  ;--------------------------------------------------------------
 10295                                  
 10296                                  		; 19/10/2022
 10297                                  done:
 10298 000009DD 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10299                                  					; fnon_removable
 10300 000009E2 752F                    		jnz	short ddbx	; do not set for non-removable media
 10301 000009E4 E8FD01                  		call	set_tim
 10302                                  ;diddleback:
 10303                                  ; 09/12/2022
 10304                                  diddle_back:				
 10305 000009E7 9C                      		pushf
 10306 000009E8 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10307 000009ED 7523                    		jnz	short nodiddleback
 10308 000009EF 50                      		push	ax
 10309 000009F0 06                      		push	es
 10310 000009F1 C436[2D01]              		les	si, [dpt]
 10311 000009F5 A0[2B01]                		mov	al, [save_eot]
 10312 000009F8 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10313 000009FC A0[2701]                		mov	al, [settlecurrent]
 10314 000009FF 8A26[2601]              		mov	ah, [motorstartup]
 10315 00000A03 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10316 00000A07 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10317 00000A0C 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10318 00000A10 07                      		pop	es
 10319 00000A11 58                      		pop	ax
 10320                                  nodiddleback:				
 10321 00000A12 9D                      		popf
 10322                                  ddbx:					
 10323 00000A13 C3                      		retn
 10324                                  
 10325                                  ; =============== S U B	R O U T	I N E =======================================
 10326                                  
 10327                                  ;--------------------------------------------------------------
 10328                                  ;read the number of sectors specified in ax, 
 10329                                  ;handling track boundaries
 10330                                  ;es:di -> bds for this drive
 10331                                  ;--------------------------------------------------------------
 10332                                  
 10333                                  		 ; 19/10/2022
 10334                                  block:	
 10335 00000A14 09C0                    		or	ax, ax
 10336 00000A16 74FB                    		jz	short ddbx
 10337 00000A18 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10338                                  					; fnon_removable
 10339 00000A1D 740D                    		jz	short block_floppy ;
 10340                                  
 10341                                  ; check	to see if multi	track operation	is allowed. if not
 10342                                  ; we have to go	to the block_floppy below to break up the operation.
 10343                                  
 10344 00000A1F F606[2F05]80            		test	byte [multrk_flag], 80h
 10345                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 10346 00000A24 7406                    		jz	short block_floppy
 10347 00000A26 E82900                  		call	Disk
 10348 00000A29 31C0                    		xor	ax, ax
 10349 00000A2B C3                      		retn
 10350                                  ; ---------------------------------------------------------------------------
 10351                                  
 10352                                  block_floppy:
 10353                                  
 10354                                  ; read at most 1 track worth. perform minimization at sector / track
 10355                                  				
 10356 00000A2C 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 10357 00000A30 FEC1                    		inc	cl
 10358 00000A32 2A0E[3101]              		sub	cl, [cursec]
 10359 00000A36 30ED                    		xor	ch, ch
 10360 00000A38 39C8                    		cmp	ax, cx
 10361 00000A3A 7302                    		jnb	short gotmin
 10362 00000A3C 89C1                    		mov	cx, ax
 10363                                  
 10364                                  gotmin:
 10365                                  
 10366                                  ; ax is the requested number of sectors to read
 10367                                  ; cx is the number that we can do on this track
 10368                                  					
 10369 00000A3E 50                      		push	ax
 10370 00000A3F 51                      		push	cx
 10371 00000A40 89C8                    		mov	ax, cx
 10372 00000A42 E80D00                  		call	Disk
 10373 00000A45 59                      		pop	cx
 10374 00000A46 58                      		pop	ax
 10375                                  
 10376                                  ; cx is the number of sectors just transferred
 10377                                  
 10378 00000A47 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 10379 00000A49 D0E1                    		shl	cl, 1
 10380 00000A4B 00CF                    		add	bh, cl		; adjust transfer address
 10381 00000A4D EBC5                    		jmp	short block
 10382                                  dskerr_brdg:				
 10383 00000A4F E9EC00                  		jmp	dskerr
 10384                                  
 10385                                  ; =============== S U B	R O U T	I N E =======================================
 10386                                  
 10387                                  ; 15/10/2022
 10388                                  
 10389                                  ;--------------------------------------------------------------
 10390                                  ;perform disk i/o with retries
 10391                                  ; al = number of sectors (1-8, all on one track)
 10392                                  ; es:di point to drive parameters
 10393                                  ; xfer_seg:bx = transfer address 
 10394                                  ;		(must not cross a 64k physical boundary)
 10395                                  ; [rflag] = 2 if read, 3 if write
 10396                                  ; [verify] = 0 for normal, 1 for verify after write
 10397                                  ;--------------------------------------------------------------
 10398                                  
 10399                                  		 ; 19/10/2022
 10400                                  Disk:
 10401                                  
 10402                                  ; Check for hard disk format and
 10403                                  ; if TRUE then set max error count to 2
 10404                                  
 10405 00000A52 BD0500                  		mov	bp, 5		; MAXERR
 10406                                  					; set up retry count
 10407 00000A55 26F6452301              		test	byte [es:di+23h], 1	;
 10408                                  					; [es:di+BDS.flags], fnon_removable
 10409 00000A5A 7408                    		jz	short GetRdWrInd
 10410 00000A5C 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 10411 00000A5F 7403                    		jz	short GetRdWrInd
 10412 00000A61 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 10413                                  GetRdWrInd:				
 10414 00000A64 892E[3205]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 10415 00000A68 892E[3405]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 10416 00000A6C 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 10417                                  ;retry:
 10418                                  ; 09/12/2022
 10419                                  _retry:					
 10420 00000A70 50                      		push	ax
 10421 00000A71 8B16[3301]              		mov	dx, [curtrk]
 10422 00000A75 26F6452301              		test	byte [es:di+23h], 1
 10423 00000A7A 740B                    		jz	short disk_not_mini
 10424 00000A7C 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 10425                                  					; is this a mini disk? ((logical dos partition))
 10426 00000A81 7504                    		jnz	short disk_not_mini ; no. continue to next.
 10427 00000A83 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 10428                                  					; add hidden trks.
 10429                                  disk_not_mini:				
 10430 00000A87 D0CE                    		ror	dh, 1
 10431 00000A89 D0CE                    		ror	dh, 1
 10432 00000A8B 0A36[3101]              		or	dh, [cursec]
 10433 00000A8F 89D1                    		mov	cx, dx
 10434 00000A91 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 10435 00000A93 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 10436 00000A97 268A5504                		mov	dl, [es:di+4]	; physical drive number
 10437                                  					; [es:di+BDS.drivenum]
 10438 00000A9B 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 10439 00000AA0 7413                    		jz	short do_fast	; hard files use fast speed
 10440                                  
 10441                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 10442                                  ; this helps when we have just done a reset disk operation and the head has
 10443                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 10444                                  
 10445 00000AA2 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 10446 00000AA7 740A                    		jz	short do_writej
 10447 00000AA9 80FC02                  		cmp	ah, 2		; romread
 10448 00000AAC 7407                    		jz	short do_fast
 10449 00000AAE 80FC04                  		cmp	ah, 4		; romverify
 10450 00000AB1 7402                    		jz	short do_fast
 10451                                  do_writej:	
 10452                                  
 10453                                  ; reads always fast, unless we have just done a disk reset operation
 10454                                  			
 10455 00000AB3 EB56                    		jmp	short do_write	; reads	always fast
 10456                                  ; ---------------------------------------------------------------------------
 10457                                  
 10458                                  do_fast:				
 10459 00000AB5 E8FC00                  		call	fastspeed	; change settle	mode
 10460                                  
 10461                                  testerr:				
 10462 00000AB8 7295                    		jb	short dskerr_brdg
 10463                                  
 10464                                  ; set drive and track of last access
 10465                                  
 10466 00000ABA 8816[7600]              		mov	[step_drv], dl
 10467 00000ABE 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10468                                  no_set:
 10469                                  		;cmp	word [wrtverify], 103h
 10470 00000AC2 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 10471 00000AC8 7452                    		jz	short doverify
 10472                                  noverify:				
 10473 00000ACA 58                      		pop	ax
 10474                                  
 10475                                  ; check the flags word in the bds to see if the drive is non removable
 10476                                  ; if not we needn't do anything special
 10477                                  ; if it is a hard disk then check to see if multi-track operation
 10478                                  ; is specified. if specified we don't have to calculate for the next
 10479                                  ; track since we are already done. so we can go to the exit of this routine.
 10480                                  
 10481 00000ACB 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10482                                  					; fnon_removable
 10483 00000AD0 7407                    		jz	short its_removable
 10484 00000AD2 F606[2F05]80            		test	byte [multrk_flag], 80h ; multrk_on
 10485 00000AD7 7530                    		jnz	short disk_ret
 10486                                  its_removable:				
 10487 00000AD9 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 10488 00000ADC 30E4                    		xor	ah, ah
 10489 00000ADE 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 10490 00000AE2 00C1                    		add	cl, al
 10491 00000AE4 880E[3101]              		mov	[cursec], cl
 10492 00000AE8 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 10493                                  					; see if sector/track limit reached
 10494 00000AEC 761B                    		jbe	short disk_ret
 10495 00000AEE C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 10496 00000AF3 8A36[3201]              		mov	dh, [curhd]
 10497 00000AF7 FEC6                    		inc	dh
 10498 00000AF9 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 10499 00000AFD 7206                    		jb	short noxor
 10500 00000AFF 30F6                    		xor	dh, dh
 10501 00000B01 FF06[3301]              		inc	word [curtrk]
 10502                                  noxor:					
 10503 00000B05 8836[3201]              		mov	[curhd], dh
 10504                                  disk_ret:				
 10505 00000B09 F8                      		clc
 10506 00000B0A C3                      		retn
 10507                                  ; ---------------------------------------------------------------------------
 10508                                  
 10509                                  ; 15/10/2022
 10510                                  
 10511                                  ;--------------------------------------------------------------
 10512                                  ; the request is for write. determine if we are talking about
 10513                                  ; the same track and drive. if so, use the fast speed.
 10514                                  ;--------------------------------------------------------------
 10515                                  
 10516                                  do_write:				
 10517 00000B0B 3A16[7600]              		cmp	dl, [step_drv]
 10518 00000B0F 7506                    		jnz	short do_norm	; we have changed drives
 10519 00000B11 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 10520 00000B15 749E                    		jz	short do_fast	; we are still on the same track
 10521                                  
 10522                                  do_norm:				
 10523 00000B17 E87500                  		call	normspeed
 10524 00000B1A EB9C                    		jmp	short testerr
 10525                                  ; ---------------------------------------------------------------------------
 10526                                  
 10527                                  ;--------------------------------------------------------------
 10528                                  ; we have a verify request also. get state info and go verify
 10529                                  ;--------------------------------------------------------------
 10530                                  
 10531                                  doverify:				
 10532 00000B1C 58                      		pop	ax
 10533 00000B1D 50                      		push	ax
 10534 00000B1E B404                    		mov	ah, 4
 10535 00000B20 E89100                  		call	fastspeed
 10536 00000B23 73A5                    		jnb	short noverify
 10537                                  
 10538                                  ; check the error returned in ah to see if it is a soft ecc error.
 10539                                  ; if it is not we needn't do anything special. if it is a soft
 10540                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 10541                                  ; this retry count becomes 0 then we just ignore the error and go to
 10542                                  ; no_verify but if we can still try then we call the routine to reset
 10543                                  ; the disk and go to dskerr1 to retry the operation.
 10544                                  
 10545 00000B25 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 10546 00000B28 750B                    		jnz	short not_softecc_err
 10547 00000B2A FF0E[3405]              		dec	word [soft_ecc_cnt]
 10548 00000B2E 749A                    		jz	short noverify	; no more retry
 10549 00000B30 E83705                  		call	ResetDisk	; reset	disk
 10550 00000B33 EB3E                    		jmp	short dskerr1	; retry
 10551                                  ; ---------------------------------------------------------------------------
 10552                                  
 10553                                  not_softecc_err:			; other error.			
 10554 00000B35 E83205                  		call	ResetDisk
 10555 00000B38 FF0E[3205]              		dec	word [vretry_cnt]
 10556 00000B3C EB1C                    		jmp	short dskerr0
 10557                                  ; ---------------------------------------------------------------------------
 10558                                  
 10559                                  ;--------------------------------------------------------------
 10560                                  ; need to special case the change-line error ah=06h.
 10561                                  ; if we get this, we need to return it.
 10562                                  ;--------------------------------------------------------------
 10563                                  
 10564                                  dskerr:					
 10565 00000B3E 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 10566 00000B43 7403                    		jz	short dskerr_nochangeline ; brif not
 10567 00000B45 E8FE0C                  		call	checkio
 10568                                  dskerr_nochangeline:			
 10569 00000B48 803E[3605]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 10570 00000B4D 7508                    		jnz	short dochkagain ; no more retry.
 10571 00000B4F BD0100                  		mov	bp, 1
 10572 00000B52 C606[3605]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 10573                                  dochkagain:				
 10574 00000B57 E8AA00                  		call	again
 10575                                  dskerr0:				
 10576 00000B5A 7420                    		jz	short harderr
 10577 00000B5C 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10578                                  					; fnon_removable
 10579 00000B61 7505                    		jnz	short skip_timeout_chk
 10580 00000B63 80FC80                  		cmp	ah, 80h		; timeout?
 10581 00000B66 7414                    		jz	short harderr
 10582                                  skip_timeout_chk:			
 10583 00000B68 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 10584 00000B6B 740A                    		jz	short write_fault_err ;	then, don't retry.
 10585 00000B6D C706[3405]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 10586                                  					; set soft_ecc_cnt back	to maxerr
 10587                                  dskerr1:				
 10588 00000B73 58                      		pop	ax		; restore sector count
 10589                                  		;jmp	retry
 10590                                  		; 09/12/2022
 10591 00000B74 E9F9FE                  		jmp	_retry
 10592                                  ; ---------------------------------------------------------------------------
 10593                                  
 10594                                  write_fault_err:			
 10595 00000B77 BD0100                  		mov	bp, 1		; just retry only once
 10596                                  					; for write fault error.
 10597 00000B7A EBF7                    		jmp	short dskerr1
 10598                                  
 10599                                  		; fall into harderr
 10600                                  ; ---------------------------------------------------------------------------
 10601                                  
 10602                                  ; entry point for routines that call maperror themselves
 10603                                  
 10604                                  harderr:				
 10605 00000B7C E84D00                  		call	maperror
 10606                                  harderr2:				
 10607 00000B7F C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 10608                                  					; force a media check through rom
 10609 00000B84 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 10610 00000B88 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 10611                                  
 10612                                  ; since we are performing a non-local goto, restore the disk parameters
 10613                                  
 10614                                  		;jmp	diddleback
 10615                                  		; 09/12/2022
 10616 00000B8C E958FE                  		jmp	diddle_back
 10617                                  
 10618                                  ; =============== S U B	R O U T	I N E =======================================
 10619                                  
 10620                                  ; change settle value from settlecurrent to whatever is appropriate
 10621                                  ; note that this routine is never called for a fixed disk.
 10622                                  
 10623                                  		; 19/10/2022
 10624                                  normspeed:
 10625 00000B8F 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10626 00000B94 751E                    		jnz	short fastspeed
 10627 00000B96 06                      		push	es
 10628 00000B97 50                      		push	ax
 10629 00000B98 A0[2801]                		mov	al, [settleslow]
 10630 00000B9B C436[2D01]              		les	si, [dpt]	; current disk parm table
 10631 00000B9F 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10632 00000BA3 58                      		pop	ax
 10633 00000BA4 07                      		pop	es
 10634 00000BA5 E80C00                  		call	fastspeed
 10635 00000BA8 06                      		push	es
 10636 00000BA9 C436[2D01]              		les	si, [dpt]
 10637 00000BAD 26C6440901              		mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10638                                  					; 1 is fast settle value
 10639 00000BB2 07                      		pop	es
 10640 00000BB3 C3                      		retn
 10641                                  
 10642                                  ; =============== S U B	R O U T	I N E =======================================
 10643                                  
 10644                                  ; if the drive has been marked as too big (i.e. starting sector of the
 10645                                  ; partition is > 16 bits, then always return drive not ready.
 10646                                  
 10647                                  fastspeed:		
 10648 00000BB4 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 10649                                  					; ftoobig
 10650 00000BB9 750D                    		jnz	short notready
 10651 00000BBB 06                      		push	es
 10652 00000BBC 8E06[3705]              		mov	es, [xfer_seg]
 10653 00000BC0 CD13                    		int	13h		; DISK -
 10654 00000BC2 8C06[3705]              		mov	[xfer_seg], es
 10655 00000BC6 07                      		pop	es
 10656 00000BC7 C3                      		retn
 10657                                  ; ---------------------------------------------------------------------------
 10658                                  
 10659                                  notready:				
 10660 00000BC8 F9                      		stc
 10661 00000BC9 B480                    		mov	ah, 80h
 10662 00000BCB C3                      		retn
 10663                                  
 10664                                  ; =============== S U B	R O U T	I N E =======================================
 10665                                  
 10666                                  ; map error returned by rom in ah into corresponding code to be returned to
 10667                                  ; dos in al. trashes di. guaranteed to set carry.
 10668                                  
 10669                                  maperror:	
 10670 00000BCC 51                      		push	cx
 10671 00000BCD 06                      		push	es
 10672 00000BCE 1E                      		push	ds		; set es=Bios_Data
 10673 00000BCF 07                      		pop	es
 10674 00000BD0 88E0                    		mov	al, ah		; put error code in al
 10675 00000BD2 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 10676 00000BD5 B90900                  		mov	cx, 9		; numerr (= errout-errin)
 10677                                  					; number of possible error conditions
 10678 00000BD8 BF[3C01]                		mov	di, errin	; point to error conditions
 10679 00000BDB F2AE                    		repne scasb
 10680                                  		; 10/12/2022
 10681 00000BDD 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 10682                                  					; get translation
 10683                                  		; 19/10/2022 - Temporary ! 
 10684                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 10685 00000BE0 07                      		pop	es
 10686 00000BE1 59                      		pop	cx
 10687 00000BE2 F9                      		stc			; flag error condition
 10688 00000BE3 C3                      		retn
 10689                                  
 10690                                  ; =============== S U B	R O U T	I N E =======================================
 10691                                  
 10692                                  ; set the time of last access for this drive.
 10693                                  ; this is done only for removable media. es:di -> bds
 10694                                  
 10695                                  set_tim:		
 10696 00000BE4 50                      		push	ax
 10697 00000BE5 E892F8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 10698                                  
 10699                                  ; we have the new time. if we see that the time has passed,
 10700                                  ; then we reset the threshold counter...
 10701                                  
 10702 00000BE8 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 10703 00000BEC 7506                    		jnz	short setaccess
 10704 00000BEE 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 10705                                  		;jz	short done_set
 10706                                  		; 12/12/2022
 10707 00000BF2 740E                    		je	short done_set2
 10708                                  setaccess:				
 10709 00000BF4 C606[1D01]00            		mov	byte [accesscount], 0
 10710 00000BF9 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 10711 00000BFD 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 10712                                  done_set:				
 10713 00000C01 F8                      		clc
 10714                                  done_set2:		; 12/12/2022
 10715 00000C02 58                      		pop	ax
 10716 00000C03 C3                      		retn
 10717                                  
 10718                                  ; =============== S U B	R O U T	I N E =======================================
 10719                                  
 10720                                  ; this routine is called if an error occurs while formatting or verifying.
 10721                                  ; it resets the drive,and decrements the retry count.
 10722                                  ; on entry - ds:di - points to bds for the drive
 10723                                  ;	     bp    - contains retry count
 10724                                  ; on exit    flags indicate result of decrementing retry count
 10725                                  
 10726                                  again:	
 10727 00000C04 E86304                  		call	ResetDisk
 10728 00000C07 80FC06                  		cmp	ah, 6
 10729 00000C0A 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 10730                                  					; do not decrement retry count.
 10731 00000C0C 4D                      		dec	bp		; decrement retry count
 10732 00000C0D C3                      		retn
 10733                                  ; ---------------------------------------------------------------------------
 10734                                  
 10735                                  dont_dec_retry_count:			
 10736 00000C0E 08E4                    		or	ah, ah
 10737 00000C10 C3                      		retn
 10738                                  
 10739                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 10740                                  
 10741                                  ;----------------------------------------------------------------------------
 10742                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 10743                                  ;----------------------------------------------------------------------------
 10744                                  ; 11/03/2019 - Retro DOS v4.0
 10745                                  
 10746                                  ; 18/03/2019
 10747                                  
 10748                                  ; ==========================================================================
 10749                                  ;
 10750                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 10751                                  ;
 10752                                  ;      This function is intended to give the user to control the
 10753                                  ;      bds table flags of unformatted_media bit.
 10754                                  ;      GetAccessFlag will show the status -
 10755                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 10756                                  ;						1 disk i/o allowed
 10757                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 10758                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 10759                                  ;						1 disallow disk i/o
 10760                                  ; ==========================================================================
 10761                                  
 10762                                  		; generic ioctl dispatch tables
 10763                                  
 10764                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 10765                                  
 10766                                  ; ---------------------------------------------------------------------------
 10767 00000C11 00                      		db 0
 10768                                  
 10769                                  ; 09/12/2022 
 10770                                  %if 0
 10771                                  
 10772                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 10773                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 10774                                  		dw 0EE8h	; 61h	; ReadTrack
 10775                                  		dw 0E86h	; 62h	; VerifyTrack
 10776                                  		dw 0CA3h	 	; Cmd_Error_Proc
 10777                                  		dw 0CA3h		; Cmd_Error_Proc
 10778                                  		dw 0CA3h		; Cmd_Error_Proc
 10779                                  		dw 119Ah	; 66h	; GetMediaId
 10780                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 10781                                  		dw 12C1h	; 68h	; SenseMediaType
 10782                                  
 10783                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 10784                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 10785                                  		dw 0EEFh	; 41h	; WriteTrack
 10786                                  		dw 0DC1h	; 42h	; FormatTrack
 10787                                  		dw 0CA3h		; Cmd_Error_Proc
 10788                                  		dw 0CA3h		; Cmd_Error_Proc
 10789                                  		dw 0CA3h		; Cmd_Error_Proc
 10790                                  		dw 11D2h	; 46h	; SetMediaId
 10791                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 10792                                  
 10793                                  %endif
 10794                                  
 10795                                  		; 09/12/2022
 10796 00000C12 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 10797 00000C13 [7D0C]                  		dw GetDeviceParameters	; 60h
 10798 00000C15 [BF0E]                  		dw ReadTrack		; 61h
 10799 00000C17 [5F0E]                  		dw VerifyTrack		; 62h
 10800 00000C19 [790C]                  		dw Cmd_Error_Proc
 10801 00000C1B [790C]                  		dw Cmd_Error_Proc
 10802 00000C1D [790C]                  		dw Cmd_Error_Proc
 10803 00000C1F [4911]                  		dw GetMediaId		; 66h
 10804 00000C21 [1512]                  		dw GetAccessFlag	; 67h ; unpublished function
 10805 00000C23 [6712]                  		dw SenseMediaType	; 68h
 10806                                  
 10807 00000C25 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 10808 00000C26 [C80C]                  		dw SetDeviceParameters	; 40h
 10809 00000C28 [C60E]                  		dw WriteTrack		; 41h
 10810 00000C2A [9B0D]                  		dw FormatTrack		; 42h
 10811 00000C2C [790C]                  		dw Cmd_Error_Proc
 10812 00000C2E [790C]                  		dw Cmd_Error_Proc
 10813 00000C30 [790C]                  		dw Cmd_Error_Proc
 10814 00000C32 [7F11]                  		dw SetMediaId		; 46h
 10815 00000C34 [2B12]                  		dw SetAccessFlag	; 47h ; unpublished function
 10816                                  
 10817                                  ; ==========================================================================
 10818                                  ; IOC_DC_Table
 10819                                  ;
 10820                                  ; This table contains all of the valid generic IOCtl Minor codes for
 10821                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 10822                                  ; Added for 5.00
 10823                                  ; ==========================================================================
 10824                                  
 10825 00000C36 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 10826 00000C37 40                      		db 40h			; SET_DEVICE_PARAMETERS
 10827 00000C38 61                      		db 61h			; READ_TRACK
 10828 00000C39 41                      		db 41h			; WRITE_TRACK
 10829 00000C3A 62                      		db 62h			; VERIFY_TRACK
 10830 00000C3B 42                      		db 42h			; FORMAT_TRACK
 10831 00000C3C 66                      		db 66h			; GET_MEDIA_ID
 10832 00000C3D 46                      		db 46h			; SET_MEDIA_ID
 10833 00000C3E 67                      		db 67h			; GET_ACCESS_FLAG
 10834 00000C3F 47                      		db 47h			; SET_ACCESS_FLAG
 10835 00000C40 68                      		db 68h			; SENSE_MEDIA_TYPE
 10836                                  
 10837                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 10838                                  
 10839                                  ; ---------------------------------------------------------------------------
 10840                                  
 10841                                  ; 16/10/2022
 10842                                  
 10843                                  ; ==========================================================================
 10844                                  ; Do_Generic_IOCtl: perform generic ioctl request
 10845                                  ;
 10846                                  ;    input: AL contains logical drive
 10847                                  ;
 10848                                  ;	functions are dispatched through a call. On return, carry indicates
 10849                                  ;	error code in al. Note::bES:b& ds undefined on return from
 10850                                  ;	subfunctions.
 10851                                  ;
 10852                                  ; ==========================================================================
 10853                                  
 10854                                  ; 11/03/2019
 10855                                  		; 19/10/2022
 10856                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 10857 00000C41 E887F8                  		call	SetDrive	; ES:DI	Points to bds for drive
 10858 00000C44 06                      		push	es
 10859 00000C45 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 10860 00000C49 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 10861                                  					; RAWIO
 10862 00000C4E 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 10863 00000C52 07                      		pop	es
 10864 00000C53 7525                    		jnz	short IoctlFuncErr
 10865                                  
 10866                                  		; cas note: Could do the above two blocks in reverse order.
 10867                                  		; Would have to preserve al for SetDrive
 10868                                  
 10869                                  		; 10/12/2022
 10870 00000C55 BE[120C]                		mov	si, IoReadJumpTable
 10871                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 10872                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 10873 00000C58 A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 10874 00000C5A 7503                    		jnz	short NotGenericWrite ; function is a read.
 10875                                  		; 10/12/2022
 10876 00000C5C BE[250C]                		mov	si, IoWriteJumpTable
 10877                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 10878                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 10879                                  NotGenericWrite:			
 10880 00000C5F 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 10881 00000C61 2C40                    		sub	al, 40h		; offset for base function
 10882 00000C63 2E3A04                  		cmp	al, [cs:si]
 10883 00000C66 7712                    		ja	short IoctlFuncErr
 10884 00000C68 98                      		cbw
 10885 00000C69 D1E0                    		shl	ax, 1
 10886 00000C6B 46                      		inc	si
 10887 00000C6C 01C6                    		add	si, ax
 10888 00000C6E 2EFF14                  		call	near [cs:si]
 10889                                  		;call	word ptr cs:[si]
 10890 00000C71 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10891                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10892                                  					; 2C7h:30h = 70h:25A0h
 10893 00000C76 B481                    		mov	ah, 81h		; Return this status in	case of	carry
 10894 00000C78 C3                      		retn			; Pass carry flag through to exit code
 10895                                  ; ---------------------------------------------------------------------------
 10896                                  
 10897                                  		; Cmd_Error_Proc is called as a procedure and also use
 10898                                  		; as a fall through from above
 10899                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 10900 00000C79 5A                      		pop	dx
 10901                                  
 10902                                  IoctlFuncErr:				
 10903 00000C7A E958F4                  		jmp	bc_cmderr
 10904                                  ; ---------------------------------------------------------------------------
 10905                                  
 10906                                  ; 16/10/2022
 10907                                  
 10908                                  ; ==========================================================================
 10909                                  ;**	GetDeviceParameters:
 10910                                  ;
 10911                                  ;	GetDeviceParameters implements the generic ioctl function:
 10912                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 10913                                  ;
 10914                                  ;	ENTRY	(ES:di) = BDS for drive
 10915                                  ;		PtrSav = long pointer to request header
 10916                                  ;	EXIT	??? BUGBUG
 10917                                  ;	USES	??? BUGBUG
 10918                                  ; ==========================================================================
 10919                                  
 10920                                  		; 19/10/2022
 10921                                  GetDeviceParameters:
 10922                                  		; Copy info from bds to the device parameters packet
 10923                                  
 10924 00000C7D C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10925 00000C81 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10926                                  					; (DS:BX) = return buffer
 10927 00000C84 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 10928 00000C88 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10929 00000C8B 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 10930 00000C8F 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 10931                                  					; Mask off other bits
 10932 00000C92 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10933 00000C95 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 10934 00000C99 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10935 00000C9C 30C0                    		xor	al, al		; Set media type to default
 10936 00000C9E 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 10937                                  					
 10938                                  		; copy recommended bpb
 10939 00000CA1 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 10940 00000CA4 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10941                                  					; BUILD_DEVICE_BPB
 10942 00000CA7 7412                    		jz	short UseBpbPresent
 10943 00000CA9 1E                      		push	ds		; Save request packet segment
 10944 00000CAA 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10945                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10946                                  					; 2C7h:30h = 70h:25A0h
 10947                                  					; Point back to Bios_Data
 10948 00000CAF E887FB                  		call	checksingle
 10949 00000CB2 E842F9                  		call	GetBp		; Build	the bpb	from scratch
 10950 00000CB5 1F                      		pop	ds		; Restore request packet segment
 10951 00000CB6 720F                    		jb	short GetParmRet
 10952 00000CB8 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 10953                                  					; Use this subfield of bds instead
 10954                                  UseBpbPresent:				
 10955 00000CBB 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 10956                                  					; This is where	the result goes
 10957 00000CBE B91900                  		mov	cx, 25		; A_BPB.size - 6
 10958                                  					; For now use 'small' bpb
 10959 00000CC1 1E                      		push	ds		; reverse segments for copy
 10960 00000CC2 06                      		push	es
 10961 00000CC3 1F                      		pop	ds
 10962 00000CC4 07                      		pop	es
 10963 00000CC5 F3A4                    		rep movsb
 10964                                  		
 10965                                  		; 12/12/2022
 10966                                  		; cf=0 (test instruction -above- resets cf) 	
 10967                                  		;clc
 10968                                  GetParmRet:				
 10969 00000CC7 C3                      		retn
 10970                                  ; ---------------------------------------------------------------------------
 10971                                  
 10972                                  ; 17/10/2022
 10973                                  ; 16/10/2022
 10974                                  
 10975                                  ; ==========================================================================
 10976                                  ; SetDeviceParameters:
 10977                                  ;
 10978                                  ; input: ES:di points to bds for drive
 10979                                  ; ==========================================================================
 10980                                  
 10981                                  		; 19/10/2022
 10982                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 10983 00000CC8 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10984 00000CCC C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10985 00000CCF 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 10986                                  					; fchanged_by_format|fchanged
 10987 00000CD5 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10988                                  					; ONLY_SET_TRACKLAYOUT
 10989 00000CD8 7579                    		jnz	short setTrackTable
 10990 00000CDA 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10991 00000CDD 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 10992 00000CE1 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10993 00000CE4 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 10994 00000CE8 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10995 00000CEB 1E                      		push	ds
 10996                                  		; 17/10/2022
 10997 00000CEC 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10998                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10999                                  					; 2C7h:30h = 70h:25A0h
 11000                                  		;cmp	byte [fhave96], 0
 11001 00000CF1 803E[7700]00            		cmp	byte [fhave96], 0
 11002 00000CF6 1F                      		pop	ds
 11003 00000CF7 7502                    		jnz	short HaveChange ; we have changeline support
 11004                                  		; 10/12/2022
 11005 00000CF9 24FD                    		and	al, 0FDh
 11006                                  		;and	ax, 0FFFDh	; ~fchangeline
 11007                                  
 11008                                  		; Ignore all bits except non_removable and changeline
 11009                                  HaveChange:				
 11010 00000CFB 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 11011 00000CFE 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 11012 00000D02 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 11013 00000D06 09C8                    		or	ax, cx
 11014 00000D08 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 11015 00000D0C 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11016                                  					; Set media type
 11017 00000D0F 1E                      		push	ds
 11018 00000D10 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11019                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11020 00000D15 A2[3706]                		mov	[mediatype], al
 11021                                  		;mov	ds:mediatype, al
 11022 00000D18 1F                      		pop	ds
 11023                                  
 11024                                  		; The media changed (maybe) so we will have to do a set dasd
 11025                                  		; the next time we format a track
 11026                                  
 11027                                  		; 10/12/2022
 11028 00000D19 26804D2380              		or	byte [es:di+35], 80h
 11029                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 11030                                  					; set_dasd_true
 11031 00000D1E 57                      		push	di		; Save bds pointer
 11032                                  
 11033                                  		; Figure out what we are supposed to do with the bpb
 11034                                  		; were we asked to install a fake bpb?
 11035                                  
 11036 00000D1F F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11037                                  					; INSTALL_FAKE_BPB
 11038 00000D22 7514                    		jnz	short InstallFakeBpb
 11039                                  
 11040                                  		; were we returning a fake bpb when asked to build a bpb?
 11041                                  
 11042                                  		; 10/12/2022
 11043 00000D24 26F6452304              		test	byte [es:di+35], 4
 11044                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 11045                                  					; return_fake_bpb
 11046 00000D29 7405                    		jz	short InstallRecommendedBpb
 11047                                  
 11048                                  		; we were returning a fake bpb but we can stop now
 11049                                  
 11050                                  		; 10/12/2022
 11051 00000D2B 26806523FB              		and	byte [es:di+35], 0FBh
 11052                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 11053                                  					; ~return_fake_bpb
 11054                                  InstallRecommendedBpb:			
 11055 00000D30 B91F00                  		mov	cx, 31		; A_BPB.size
 11056 00000D33 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 11057 00000D36 EB0B                    		jmp	short CopyTheBpb
 11058                                  ; ---------------------------------------------------------------------------
 11059                                  
 11060                                  InstallFakeBpb:
 11061                                  		; 10/12/2022
 11062 00000D38 26804D2304              		or	byte [es:di+35], 4				
 11063                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 11064                                  					; return_fake_bpb
 11065 00000D3D B91900                  		mov	cx, 25		; A_BPB.size - 6
 11066                                  					; move 'smaller' bpb
 11067 00000D40 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 11068                                  
 11069                                  CopyTheBpb:				
 11070 00000D43 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11071 00000D46 F3A4                    		rep movsb
 11072 00000D48 1E                      		push	ds		; Save packet segment
 11073                                  		; 17/10/2022
 11074 00000D49 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11075                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11076                                  					; Setup	for ds -> Bios_Data
 11077 00000D4E E8CA03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 11078 00000D51 1F                      		pop	ds		; Restore packet segment
 11079 00000D52 5F                      		pop	di		; Restore bds pointer
 11080                                  setTrackTable:				
 11081 00000D53 8B4F26                  		mov	cx, [bx+38]
 11082 00000D56 1E                      		push	ds
 11083 00000D57 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11084 00000D5C 890E[3905]              		mov	[sectorspertrack], cx
 11085 00000D60 1F                      		pop	ds
 11086                                  		; 10/12/2022
 11087 00000D61 26806523F7              		and	byte [es:di+35], 0F7h
 11088                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 11089                                  					; ~good_tracklayout
 11090 00000D66 F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11091                                  					; TRACKLAYOUT_IS_GOOD
 11092 00000D69 7405                    		jz	short UglyTrackLayOut
 11093                                  		; 10/12/2022
 11094 00000D6B 26804D2308              		or	byte [es:di+35], 8
 11095                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 11096                                  					; good_tracklayout
 11097                                  UglyTrackLayOut:			
 11098 00000D70 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 11099 00000D73 7722                    		ja	short TooManyPerTrack
 11100                                  		;jcxz	short SectorInfoSaved
 11101 00000D75 E31E                    		jcxz	SectorInfoSaved	; 19/10/2022
 11102 00000D77 BF[3B05]                		mov	di, tracktable
 11103 00000D7A 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 11104                                  		; 17/10/2022
 11105 00000D7D 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11106                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11107                                  					; Trash	our bds	pointer
 11108                                  StoreSectorInfo:
 11109 00000D82 47                      		inc	di
 11110 00000D83 47                      		inc	di		; Skip over cylinder and head
 11111 00000D84 AD                      		lodsw			; Get sector id
 11112 00000D85 AA                      		stosb			; Copy it
 11113 00000D86 AD                      		lodsw			; Get sector size
 11114                                  		
 11115                                  		; 02/09/2023 (PCDOS 7.1)
 11116                                  		;call	SectSizeToSectIndex
 11117 00000D87 80FC03                  		cmp	ah, 3 ; 02/09/2023
 11118                                  		;cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11119                                  					; examine upper	byte only
 11120 00000D8A 7704                    		ja	short OneK
 11121 00000D8C 88E0                    		mov	al, ah		; value	in AH is the index!
 11122 00000D8E EB02                    		jmp	short sdp_s
 11123                                  OneK:
 11124 00000D90 B003                    		mov	al, 3
 11125                                  sdp_s:
 11126 00000D92 AA                      		stosb			; Store	sector SIZE index
 11127 00000D93 E2ED                    		loop	StoreSectorInfo
 11128                                  SectorInfoSaved:
 11129 00000D95 F8                      		clc
 11130 00000D96 C3                      		retn
 11131                                  ; ---------------------------------------------------------------------------
 11132                                  
 11133                                  TooManyPerTrack:			
 11134 00000D97 B00C                    		mov	al, 0Ch
 11135 00000D99 F9                      		stc
 11136 00000D9A C3                      		retn
 11137                                  ; ---------------------------------------------------------------------------
 11138                                  
 11139                                  ; 16/10/2022
 11140                                  
 11141                                  ; ==========================================================================
 11142                                  ; FormatTrack:
 11143                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 11144                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 11145                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 11146                                  ;
 11147                                  ; input: ES:di points to bds for drive
 11148                                  ;
 11149                                  ; output:
 11150                                  ;	for status call:
 11151                                  ;	specialfunction byte set to:
 11152                                  ;		0 - rom support + legal combination
 11153                                  ;		1 - no rom support
 11154                                  ;		2 - illegal combination
 11155                                  ;		3 - no media present
 11156                                  ;	carry cleared.
 11157                                  ;
 11158                                  ;	for format track:
 11159                                  ;		carry set if error
 11160                                  ;
 11161                                  ; ==========================================================================
 11162                                  
 11163                                  ; 16/03/2019
 11164                                  
 11165                                  		; 19/10/2022
 11166                                  FormatTrack:
 11167 00000D9B C51E[1200]              		lds	bx, [ptrsav]
 11168 00000D9F C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 11169 00000DA2 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11170                                  					; STATUS_FOR_FORMAT
 11171 00000DA5 740E                    		jz	short DoFormatTrack
 11172 00000DA7 1E                      		push	ds
 11173                                  		; 17/10/2022
 11174 00000DA8 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11175                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11176 00000DAD E82602                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11177 00000DB0 1F                      		pop	ds
 11178 00000DB1 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11179 00000DB3 F8                      		clc
 11180 00000DB4 C3                      		retn
 11181                                  ; ---------------------------------------------------------------------------
 11182                                  
 11183                                  DoFormatTrack:				
 11184 00000DB5 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 11185                                  					; DEV_HARDDISK
 11186 00000DBA 7508                    		jnz	short DoFormatDiskette
 11187                                  		; 17/10/2022
 11188 00000DBC 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11189                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11190                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 11191 00000DC1 E99B00                  		jmp	VerifyTrack
 11192                                  ; ---------------------------------------------------------------------------
 11193                                  
 11194                                  DoFormatDiskette:			
 11195 00000DC4 8B4F01                  		mov	cx, [bx+1]
 11196 00000DC7 8B5703                  		mov	dx, [bx+3]
 11197 00000DCA F60702                  		test	byte [bx], 2
 11198                                  		; 17/10/2022
 11199 00000DCD 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11200                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11201                                  					; Setup	ds-> Bios_Data for verify
 11202 00000DD2 7403                    		jz	short DoFormatDiskette_1
 11203 00000DD4 E9E300                  		jmp	VerifyTrack_Err
 11204                                  ; ---------------------------------------------------------------------------
 11205                                  
 11206                                  DoFormatDiskette_1:			
 11207 00000DD7 E8FC01                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11208 00000DDA 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 11209 00000DDC 7406                    		jz	short NeedToSetDasd ; Old rom
 11210 00000DDE 3C03                    		cmp	al, 3		; Time out error?
 11211 00000DE0 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 11212                                  					; about	the illegal combination)
 11213 00000DE2 EB66                    		jmp	short FormatFailed
 11214                                  ; ---------------------------------------------------------------------------
 11215                                  
 11216                                  NeedToSetDasd:				
 11217 00000DE4 52                      		push	dx
 11218 00000DE5 E89001                  		call	SetDasd		; INT 13h, AH=17h
 11219 00000DE8 5A                      		pop	dx
 11220                                  NoSetDasd:				
 11221 00000DE9 E84DFA                  		call	checksingle	; Do any needed	diskette swapping
 11222 00000DEC 89D0                    		mov	ax, dx		; Get track from packet
 11223 00000DEE A3[3901]                		mov	[trknum], ax
 11224 00000DF1 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11225 00000DF5 88CC                    		mov	ah, cl
 11226 00000DF7 BB[3B05]                		mov	bx, tracktable
 11227 00000DFA 8B0E[3905]              		mov	cx, [sectorspertrack]
 11228                                  
 11229                                  StoreCylinderHead:			
 11230 00000DFE 8907                    		mov	[bx], ax	; Store	into TrackTable
 11231 00000E00 83C304                  		add	bx, 4		; Skip to next sector field
 11232 00000E03 E2F9                    		loop	StoreCylinderHead
 11233                                  		;mov	cx, 5		; MAXERR - Set up retry	count
 11234                                  		; 02/09/2023
 11235 00000E05 B105                    		mov	cl, 5
 11236                                  FormatRetry:				
 11237 00000E07 51                      		push	cx
 11238 00000E08 BB[3B05]                		mov	bx, tracktable
 11239 00000E0B A0[3905]                		mov	al, [sectorspertrack]
 11240 00000E0E B405                    		mov	ah, 5		; romformat
 11241 00000E10 8C1E[3705]              		mov	[xfer_seg], ds
 11242 00000E14 E86902                  		call	ToRom
 11243 00000E17 59                      		pop	cx
 11244 00000E18 7216                    		jb	short FormatError
 11245 00000E1A 51                      		push	cx		; Now verify the sectors just formatted.
 11246                                  					; NOTE:	because	of bug in some BIOSes we have to
 11247                                  					;	set ES:BX to 00:00
 11248 00000E1B 53                      		push	bx
 11249 00000E1C 31DB                    		xor	bx, bx
 11250 00000E1E 891E[3705]              		mov	[xfer_seg], bx
 11251 00000E22 A0[3905]                		mov	al, [sectorspertrack]
 11252 00000E25 B404                    		mov	ah, 4		; romverify
 11253 00000E27 B101                    		mov	cl, 1
 11254 00000E29 E85402                  		call	ToRom
 11255 00000E2C 5B                      		pop	bx
 11256 00000E2D 59                      		pop	cx
 11257 00000E2E 7329                    		jnb	short FormatOk
 11258                                  FormatError:				
 11259 00000E30 E83702                  		call	ResetDisk
 11260 00000E33 C606[3906]01            		mov	byte [had_format_error], 1
 11261 00000E38 50                      		push	ax
 11262 00000E39 51                      		push	cx
 11263 00000E3A 52                      		push	dx
 11264 00000E3B E89801                  		call	SetMediaForFormat
 11265 00000E3E 3C01                    		cmp	al, 1
 11266 00000E40 7503                    		jnz	short WhileErr
 11267 00000E42 E83301                  		call	SetDasd
 11268                                  WhileErr:				
 11269 00000E45 5A                      		pop	dx
 11270 00000E46 59                      		pop	cx
 11271 00000E47 58                      		pop	ax
 11272 00000E48 E2BD                    		loop	FormatRetry
 11273                                  FormatFailed:				
 11274 00000E4A C606[3906]01            		mov	byte [had_format_error], 1
 11275                                  					; Set the format error flag
 11276 00000E4F 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11277 00000E52 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11278 00000E54 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11279                                  DoMapIt:				
 11280 00000E56 E973FD                  		jmp	maperror
 11281                                  ; ---------------------------------------------------------------------------
 11282                                  
 11283                                  FormatOk:				
 11284 00000E59 C606[3906]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11285 00000E5E C3                      		retn
 11286                                  ; ---------------------------------------------------------------------------
 11287                                  
 11288                                  ; 16/10/2022
 11289                                  
 11290                                  ; ==========================================================================
 11291                                  ;
 11292                                  ; VerifyTrack:
 11293                                  ;
 11294                                  ; input: ES:di points to bds for drive
 11295                                  ; ==========================================================================
 11296                                  
 11297                                  VerifyTrack:				
 11298 00000E5F 1E                      		push	ds
 11299 00000E60 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11300 00000E64 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11301                                  
 11302                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11303                                  
 11304 00000E67 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11305 00000E6A 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11306 00000E6D 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11307 00000E70 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11308                                  					; Get option flag word
 11309 00000E72 1F                      		pop	ds
 11310 00000E73 C606[2001]04            		mov	byte [rflag], 4	; romverify
 11311 00000E78 890E[3301]              		mov	[curtrk], cx
 11312 00000E7C A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 11313 00000E7F 8B0E[3905]              		mov	cx, [sectorspertrack]
 11314                                  
 11315                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 11316                                  		; specified if not we should go to the normal track verification
 11317                                  		; routine. If fast format has been specified we should get the
 11318                                  		; number of tracks to be verified and check it to see if it is
 11319                                  		; > 255. If it is then it is an error and we should go to
 11320                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 11321                                  		; sectors per track to get the total number of sectors to be
 11322                                  		; verified. This should also be less than equal to 255
 11323                                  		; otherwise we go to same error exit. If everything is okay
 11324                                  		; we initalise cx to the total sectors. use ax as a temporary
 11325                                  		; register.
 11326                                  
 11327                                  					; Special function requested?	
 11328 00000E83 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 11329 00000E86 7421                    		jz	short NormVerifyTrack
 11330 00000E88 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 11331 00000E8A 08E4                    		or	ah, ah
 11332 00000E8C 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 11333 00000E8E F6E1                    		mul	cl
 11334 00000E90 08E4                    		or	ah, ah
 11335 00000E92 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 11336 00000E94 89C1                    		mov	cx, ax
 11337                                  		; 10/12/2022
 11338 00000E96 26F6452301              		test	byte [es:di+35], 1
 11339                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11340                                  					; fnon_removable
 11341 00000E9B 740C                    		jz	short NormVerifyTrack
 11342                                  					; Multitrack operation = on?
 11343                                  		; 10/12/2022
 11344                                  		; 19/10/2022
 11345 00000E9D F606[2F05]80            		test	byte [multrk_flag], 80h
 11346                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11347                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 11348 00000EA2 7405                    		jz	short NormVerifyTrack
 11349 00000EA4 C606[3605]01            		mov	byte [multitrk_format_flag], 1
 11350                                  NormVerifyTrack:			
 11351 00000EA9 31C0                    		xor	ax, ax		; 1st sector
 11352 00000EAB 31DB                    		xor	bx, bx
 11353 00000EAD 891E[3705]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 11354 00000EB1 E83F00                  		call	TrackIo
 11355 00000EB4 C606[3605]00            		mov	byte [multitrk_format_flag], 0
 11356 00000EB9 C3                      		retn
 11357                                  ; ---------------------------------------------------------------------------
 11358                                  
 11359                                  VerifyTrack_Err:			
 11360 00000EBA B401                    		mov	ah, 1
 11361 00000EBC E90DFD                  		jmp	maperror
 11362                                  ; ---------------------------------------------------------------------------
 11363                                  
 11364                                  ; 16/10/2022
 11365                                  
 11366                                  ; ==========================================================================
 11367                                  ;
 11368                                  ; ReadTrack:
 11369                                  ;
 11370                                  ; input: ES:di points to bds for drive
 11371                                  ;
 11372                                  ; ==========================================================================
 11373                                  
 11374                                  ReadTrack:				
 11375 00000EBF C606[2001]02            		mov	byte [rflag], 2	; romread
 11376 00000EC4 EB05                    		jmp	short ReadWriteTrack
 11377                                  ; ---------------------------------------------------------------------------
 11378                                  
 11379                                  WriteTrack:
 11380                                  
 11381                                  ; ==========================================================================
 11382                                  ;
 11383                                  ; WriteTrack:
 11384                                  ;
 11385                                  ; input: ES:di points to bds for drive
 11386                                  ;
 11387                                  ; ==========================================================================
 11388                                  				
 11389 00000EC6 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11390                                  
 11391                                  		; Fall into ReadWriteTrack
 11392                                  
 11393                                  ; ==========================================================================
 11394                                  ;
 11395                                  ; readWriteTrack:
 11396                                  ;
 11397                                  ; input:
 11398                                  ;    ES:di points to bds for drive
 11399                                  ;    rFlag - 2 for read,3 for write
 11400                                  ;
 11401                                  ; ==========================================================================
 11402                                  
 11403                                  ReadWriteTrack:	
 11404                                  		; save bds pointer segment so we can use it to access
 11405                                  		; our packet. Notice that this is not the standard register
 11406                                  		; assignment for accessing packets
 11407                                  		
 11408                                  		; 19/10/2022	
 11409 00000ECB 06                      		push	es
 11410 00000ECC C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 11411 00000ED0 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11412 00000ED4 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 11413 00000ED8 A3[3301]                		mov	[curtrk], ax
 11414 00000EDB 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 11415 00000EDF A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 11416 00000EE2 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 11417 00000EE6 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 11418 00000EEA 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 11419                                  					; Get transfer address
 11420                                  
 11421                                  		; we just trashed our packet address, but we no longer care
 11422                                  
 11423 00000EEE 8C06[3705]              		mov	[xfer_seg], es	; Pass transfer	segment
 11424 00000EF2 07                      		pop	es
 11425                                  
 11426                                  		; Fall into TrackIo
 11427                                  
 11428                                  ; =============== S U B	R O U T	I N E =======================================
 11429                                  
 11430                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11431                                  
 11432                                  ; ==========================================================================
 11433                                  ;
 11434                                  ; TrackIo:
 11435                                  ;    performs track read/write/verify
 11436                                  ;
 11437                                  ;   input:
 11438                                  ;      rFlag	- 2 = read
 11439                                  ;		  3 = write
 11440                                  ;		  4 = verify
 11441                                  ;      AX	- Index into track table of first sector to io
 11442                                  ;      CX	- Number of sectors to io
 11443                                  ;      Xfer_Seg:BX - Transfer address
 11444                                  ;      ES:DI	- Pointer to bds
 11445                                  ;      CurTrk	- Current cylinder
 11446                                  ;      CurHd	- Current head
 11447                                  ;
 11448                                  ; ==========================================================================
 11449                                  
 11450                                  ; 16/03/2019 - Retro DOS v4.0
 11451                                  		
 11452                                  		; 19/10/2022
 11453                                  TrackIo:	
 11454                                  					; Procedure `disk' will pop stack to
 11455 00000EF3 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 11456 00000EF7 E83FF9                  		call	checksingle	; Ensure correct disk is in drv
 11457 00000EFA 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11458                                  					; See if we have already set	disk
 11459 00000EFF 7407                    		jz	short Dptalreadyset ; base table
 11460 00000F01 50                      		push	ax		; set up tables	and variables for i/o
 11461 00000F02 51                      		push	cx
 11462 00000F03 E88FFA                  		call	iosetup
 11463 00000F06 59                      		pop	cx
 11464 00000F07 58                      		pop	ax
 11465                                  Dptalreadyset:				; Point si at the table entry of the			
 11466 00000F08 BE[3B05]                		mov	si, tracktable	; first sector to be io'd
 11467 00000F0B D1E0                    		shl	ax, 1
 11468 00000F0D D1E0                    		shl	ax, 1
 11469 00000F0F 01C6                    		add	si, ax
 11470                                  
 11471                                  		; WE WANT:
 11472                                  		; CX to	be the number of times we have to loop
 11473                                  		; DX to	be the number of sectors we read on each iteration
 11474                                  		
 11475 00000F11 BA0100                  		mov	dx, 1
 11476                                  		; 12/12/2022
 11477 00000F14 26F6452308              		test	byte [es:di+23h], 8
 11478                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 11479                                  					; good_tracklayout
 11480 00000F19 7402                    		jz	short ionextsector
 11481                                  		
 11482 00000F1B 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 11483                                  ionextsector:				
 11484 00000F1D 51                      		push	cx
 11485 00000F1E 52                      		push	dx
 11486 00000F1F 46                      		inc	si
 11487 00000F20 46                      		inc	si		; Skip over the	cylinder and head in
 11488                                  					; the track table
 11489 00000F21 AC                      		lodsb			; Get sector ID	from track table
 11490 00000F22 A2[3101]                		mov	[cursec], al
 11491                                  
 11492                                  		; assumptions for a fixed disk multi-track disk	i/o
 11493                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 11494                                  		;     only CL is valid.
 11495                                  		; 2). Sector size should be set	to 512 bytes.
 11496                                  		; 3). Good track layout
 11497                                  		
 11498                                  		; 12/12/2022
 11499 00000F25 26F6452301              		test	byte [es:di+23h], 1
 11500                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11501                                  					; fnon_removable ; Fixed disk?
 11502 00000F2A 7414                    		jz	short IoRemovable ; No
 11503                                  		; 12/12/2022
 11504 00000F2C F606[2F05]80            		test	byte [multrk_flag], 80h
 11505                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11506                                  						; Allow multi-track operation?
 11507 00000F31 740D                    		jz	short IoRemovable ; No,don't do that.
 11508 00000F33 8916[2201]              		mov	[seccnt], dx
 11509 00000F37 89D0                    		mov	ax, dx
 11510 00000F39 E816FB                  		call	Disk
 11511 00000F3C 5A                      		pop	dx
 11512 00000F3D 59                      		pop	cx
 11513 00000F3E F8                      		clc
 11514 00000F3F C3                      		retn
 11515                                  ; ---------------------------------------------------------------------------
 11516                                  
 11517                                  IoRemovable:				
 11518 00000F40 AC                      		lodsb			; Get sector size index	from track
 11519                                  					; table	and save it
 11520 00000F41 50                      		push	ax
 11521 00000F42 56                      		push	si
 11522 00000F43 1E                      		push	ds		; Save Bios_Data
 11523 00000F44 50                      		push	ax
 11524 00000F45 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 11525                                  					; Fetch	EOT while ds-> Bios_Data
 11526 00000F49 C536[2D01]              		lds	si, [dpt]
 11527 00000F4D 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 11528 00000F50 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 11529 00000F53 58                      		pop	ax
 11530 00000F54 1F                      		pop	ds
 11531 00000F55 88D0                    		mov	al, dl
 11532 00000F57 A3[2201]                		mov	[seccnt], ax
 11533 00000F5A E8F5FA                  		call	Disk
 11534 00000F5D 5E                      		pop	si		; Advance buffer pointer by adding
 11535                                  					; sector size
 11536 00000F5E 58                      		pop	ax
 11537                                  
 11538                                  		; 02/09/2023 (PCDOS 7.1)
 11539                                  		;call	SectorSizeIndexToSectorSize
 11540 00000F5F 88C1                    		mov	cl, al
 11541 00000F61 B88000                  		mov	ax, 128
 11542 00000F64 D3E0                    		shl	ax, cl
 11543                                  
 11544 00000F66 01C3                    		add	bx, ax
 11545 00000F68 5A                      		pop	dx
 11546 00000F69 59                      		pop	cx
 11547 00000F6A E2B1                    		loop	ionextsector
 11548 00000F6C 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11549                                  		;jz	short NoNeedDone
 11550                                  		; 12/12/2022
 11551 00000F71 7404                    		je	short NoNeedDone2
 11552 00000F73 E867FA                  		call	done		; set time of last access, and reset
 11553                                  					; entries in Dpt.
 11554                                  NoNeedDone:
 11555 00000F76 F8                      		clc
 11556                                  NoNeedDone2:
 11557 00000F77 C3                      		retn
 11558                                  
 11559                                  ; =============== S U B	R O U T	I N E =======================================
 11560                                  
 11561                                  ; ---------------------------------------------------------------------------
 11562                                  ;
 11563                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 11564                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 11565                                  ; are permissible.
 11566                                  ;
 11567                                  ; On Input   AX contains sector size in bytes
 11568                                  ; On Output  AL Contains index
 11569                                  ; All other registers preserved
 11570                                  ;
 11571                                  ; ---------------------------------------------------------------------------
 11572                                  
 11573                                  ; 02/09/2023
 11574                                  ;SectSizeToSectIndex:
 11575                                  ;		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11576                                  ;					; examine upper	byte only
 11577                                  ;		ja	short OneK
 11578                                  ;		mov	al, ah		; value	in AH is the index!
 11579                                  ;		retn
 11580                                  
 11581                                  ; ---------------------------------------------------------------------------
 11582                                  ;
 11583                                  ;OneK:
 11584                                  ;		mov	al, 3
 11585                                  ;		retn
 11586                                  
 11587                                  ; =============== S U B	R O U T	I N E =======================================
 11588                                  
 11589                                  ; 02/09/2023
 11590                                  ;SectorSizeIndexToSectorSize:
 11591                                  ;		mov	cl, al
 11592                                  ;		mov	ax, 128
 11593                                  ;		shl	ax, cl
 11594                                  ;		retn
 11595                                  
 11596                                  ; =============== S U B	R O U T	I N E =======================================
 11597                                  
 11598                                  ; 16/10/2022
 11599                                  
 11600                                  ; ---------------------------------------------------------------------------
 11601                                  ;
 11602                                  ; SetDASD
 11603                                  ;
 11604                                  ; Set up the rom for formatting.
 11605                                  ; we have to tell the rom bios what type of disk is in the drive.
 11606                                  ;
 11607                                  ; On Input   - ES:di - Points to bds
 11608                                  ;
 11609                                  ; ---------------------------------------------------------------------------
 11610                                  
 11611                                  		; 19/10/2022
 11612                                  SetDasd:	
 11613 00000F78 803E[3906]01            		cmp	byte [had_format_error], 1 ;
 11614                                  					; See if we've previously set dasd type
 11615 00000F7D 740C                    		jz	short DoSetDasd
 11616                                  		; 10/12/2022
 11617 00000F7F 26F6452380              		test	byte [es:di+23h], 80h
 11618                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 11619                                  					; set_dasd_true
 11620 00000F84 7447                    		jz	short DasdHasBeenSet
 11621                                  		; 10/12/2022
 11622 00000F86 268065237F              		and	byte [es:di+23h], 7Fh
 11623                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 11624                                  					; ~set_dasd_true
 11625                                  DoSetDasd:
 11626 00000F8B C606[3906]00            		mov	byte [had_format_error], 0 ; Reset it
 11627 00000F90 C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 11628 00000F95 B004                    		mov	al, 4
 11629                                  		; 02/09/2023
 11630 00000F97 268A6522                		mov	ah, [es:di+22h] ; [es:di+BDS.formfactor]
 11631 00000F9B 80FC02                  		cmp	ah, 2
 11632                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11633                                  					; DEV_3INCH720KB
 11634 00000F9E 7415                    		jz	short DoSet
 11635 00000FA0 80FC01                  		cmp	ah, 1
 11636                                  		;cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 11637                                  					; DEV_5INCH96TPI
 11638                                  		;jz	short GotBig
 11639 00000FA3 B001                    		mov	al, 1
 11640                                  		;jmp	short DoSet
 11641                                  		; 02/09/2023
 11642 00000FA5 750E                    		jnz	short DoSet
 11643                                  
 11644                                  ; ---------------------------------------------------------------------------
 11645                                  
 11646                                  GotBig:
 11647                                  		;mov	al, 2		; 160/320k in a	1.2 meg	drive
 11648                                  		; 02/09/2023
 11649 00000FA7 40                      		inc	ax  ; mov al, 2
 11650 00000FA8 803E[3706]00            		cmp	byte [mediatype], 0
 11651 00000FAD 7506                    		jnz	short DoSet
 11652                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 11653                                  		; 10/12/2022
 11654                                  		;inc	al  ; al = 3
 11655                                  		; 18/12/2022
 11656 00000FAF 40                      		inc	ax  ; al = 3
 11657 00000FB0 C606[3B01]54            		mov	byte [gap_patch], 54h
 11658                                  DoSet:
 11659 00000FB5 1E                      		push	ds
 11660 00000FB6 56                      		push	si
 11661                                  
 11662                                  		;mov	ds, [zeroseg]	; Point	to interrupt vectors
 11663                                  		; 02/09/2023
 11664 00000FB7 31F6                    		xor	si, si
 11665 00000FB9 8EDE                    		mov	ds, si	; 0
 11666                                  
 11667 00000FBB C5367800                		lds	si, [DSKADR]
 11668                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 11669                                  		;;lds	si, ds:78h
 11670                                  
 11671 00000FBF C644090F                		mov	byte [si+9], 0Fh ;
 11672                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 11673 00000FC3 5E                      		pop	si
 11674 00000FC4 1F                      		pop	ds
 11675 00000FC5 B417                    		mov	ah, 17h
 11676 00000FC7 268A5504                		mov	dl, [es:di+4]
 11677 00000FCB CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 11678                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 11679                                  DasdHasBeenSet:
 11680 00000FCD 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 11681 00000FD1 8826[3701]              		mov	[formt_eot], ah
 11682 00000FD5 C3                      		retn
 11683                                  
 11684                                  ; =============== S U B	R O U T	I N E =======================================
 11685                                  
 11686                                  ; 16/10/2022
 11687                                  
 11688                                  ; ---------------------------------------------------------------------------
 11689                                  ;
 11690                                  ; Set Media Type for Format
 11691                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 11692                                  ; BPB area in the BDS can be handled by the rom.
 11693                                  ; On Input, ES:DI -> current BDS.
 11694                                  ; The status of the operation is returned in AL
 11695                                  ;
 11696                                  ;	- 0 - if the support is available,and the combination is valid.
 11697                                  ;	- 1 - no rom support
 11698                                  ;	- 2 - illegal combination
 11699                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 11700                                  ;
 11701                                  ; Flags also may be altered. All other registers preserved.
 11702                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 11703                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 11704                                  ; to the one returned. the original pointer to the disk base table is stored
 11705                                  ; in TempDpt, until it is restored.
 11706                                  ;
 11707                                  ; ---------------------------------------------------------------------------
 11708                                  
 11709                                  		; 19/10/2022
 11710                                  SetMediaForFormat:	
 11711 00000FD6 51                      		push	cx
 11712 00000FD7 52                      		push	dx
 11713                                  
 11714                                  		; If we have a format error, then do not change Dpt, TempDpt.
 11715                                  		; but we need to call int 13h, ah=18h again.
 11716                                  
 11717 00000FD8 803E[3906]01            		cmp	byte [had_format_error], 1
 11718 00000FDD 7425                    		jz	short SkipSaveDskAdr
 11719 00000FDF 30C0                    		xor	al, al		; If already done return 0
 11720 00000FE1 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11721 00000FE6 7502                    		jnz	short DoSetMediaForFormat
 11722 00000FE8 EB7D                    		jmp	SetMediaRet	; Media	already	set
 11723                                  ; ---------------------------------------------------------------------------
 11724                                  
 11725                                  DoSetMediaForFormat:
 11726 00000FEA 06                      		push	es
 11727 00000FEB 56                      		push	si
 11728                                  		
 11729                                  		; 02/09/2023
 11730                                  		;mov	es, [zeroseg]	; Point to interrupt vectors
 11731 00000FEC 31F6                    		xor	si, si ; 0
 11732 00000FEE 8EC6                    		mov	es, si
 11733                                  
 11734 00000FF0 26C4367800              		les	si, [es:DSKADR]
 11735                                  		;les	si, es:78h	; [es:DSKADR]
 11736                                  					; Get pointer to disk base table
 11737 00000FF5 8936[2D01]              		mov	[dpt], si
 11738 00000FF9 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11739                                  
 11740                                  		; Initialize the head settle time to 0Fh. See the offsets
 11741                                  		; given in dskprm.inc.
 11742                                  
 11743 00000FFD 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11744 00001002 5E                      		pop	si
 11745 00001003 07                      		pop	es
 11746                                  SkipSaveDskAdr:				
 11747 00001004 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 11748 00001008 49                      		dec	cx
 11749 00001009 80E503                  		and	ch, 3
 11750 0000100C D0CD                    		ror	ch, 1
 11751 0000100E D0CD                    		ror	ch, 1
 11752 00001010 86E9                    		xchg	ch, cl
 11753 00001012 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 11754 00001016 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 11755 0000101A 06                      		push	es
 11756 0000101B 1E                      		push	ds
 11757 0000101C 56                      		push	si
 11758 0000101D 57                      		push	di
 11759 0000101E B418                    		mov	ah, 18h
 11760 00001020 CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 11761                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 11762 00001022 7231                    		jb	short FormaStatErr
 11763 00001024 803E[3906]01            		cmp	byte [had_format_error], 1
 11764 00001029 7423                    		jz	short skip_disk_base_setting
 11765 0000102B 06                      		push	es		; Save segment returned	by the rom
 11766                                  
 11767                                  		; 02/09/2023
 11768                                  		;mov	es, [zeroseg]	; Point	to interrupt vector segment
 11769 0000102C 31F6                    		xor	si, si
 11770 0000102E 8EC6                    		mov	es, si ; 0
 11771 00001030 06                      		push	es ; * ; 02/09/2023
 11772                                  
 11773 00001031 26C4367800              		les	si, [es:DSKADR]
 11774                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 11775                                  					; Get current disk base	table
 11776 00001036 8936[3A06]              		mov	[tempdpt], si
 11777 0000103A 8C06[3C06]              		mov	[tempdpt+2], es ; Save it
 11778                                  
 11779                                  		; 02/09/2023
 11780                                  		;;mov	es, [zeroseg]
 11781                                  		;xor	si, si ; 0
 11782                                  		;mov	es, si
 11783 0000103E 07                      		pop	es ; * ; 02/09/2023
 11784                                  
 11785                                  		;mov	es:78h,	di
 11786 0000103F 26893E7800              		mov	[es:DSKADR], di
 11787                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 11788 00001044 268F067A00              		pop	word [es:DSKADR+2]
 11789 00001049 C606[3806]01            		mov	byte [media_set_for_format], 1
 11790                                  skip_disk_base_setting:			
 11791 0000104E 30C0                    		xor	al, al		; Legal	combination + rom support code
 11792                                  		;mov	ds:had_format_error, al	; Reset	the flag
 11793 00001050 A2[3906]                		mov	[had_format_error], al
 11794 00001053 EB0E                    		jmp	short PopStatRet
 11795                                  ; ---------------------------------------------------------------------------
 11796                                  
 11797                                  FormaStatErr:
 11798                                  		; 10/12/2022
 11799 00001055 B003                    		mov	al, 3
 11800                                  				
 11801 00001057 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 11802                                  					; Illegal combination =	0Ch
 11803 0000105A 7406                    		jz	short FormatStatIllegalComb
 11804 0000105C 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 11805 0000105F 7402                    		jz	short FormatStatTimeOut
 11806                                  		; 10/12/2022
 11807                                  		;dec	al
 11808                                  		; 18/12/2022
 11809 00001061 48                      		dec	ax
 11810                                  		; al = 2
 11811                                  		;mov	al, 1		; Function not supported.
 11812                                  		;jmp	short PopStatRet
 11813                                  ; ---------------------------------------------------------------------------
 11814                                  
 11815                                  FormatStatIllegalComb:
 11816                                  		; 10/12/2022
 11817                                  		;dec	al	; 3 -> 2 or 2 -> 1
 11818                                  		; 18/12/2022
 11819 00001062 48                      		dec	ax
 11820                                  		; al = 2				
 11821                                  		;mov	al, 2		; Function supported, but
 11822                                  					; Illegal sect/trk,trk combination.
 11823                                  		; 10/12/2022
 11824                                  		;jmp	short PopStatRet
 11825                                  ; ---------------------------------------------------------------------------
 11826                                  
 11827                                  FormatStatTimeOut:			
 11828                                  		; 10/12/2022
 11829                                  		; al = 3
 11830                                  		;mov	al, 3		; Function supported, but
 11831                                  					; Media	not present.
 11832                                  PopStatRet:				
 11833 00001063 5F                      		pop	di
 11834 00001064 5E                      		pop	si
 11835 00001065 1F                      		pop	ds
 11836 00001066 07                      		pop	es
 11837                                  SetMediaRet:				
 11838 00001067 5A                      		pop	dx
 11839 00001068 59                      		pop	cx
 11840 00001069 C3                      		retn
 11841                                  
 11842                                  ; =============== S U B	R O U T	I N E =======================================
 11843                                  
 11844                                  ; 16/10/2022
 11845                                  
 11846                                  ; ---------------------------------------------------------------------------
 11847                                  ;
 11848                                  ; RESET THE DRIVE
 11849                                  ;
 11850                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 11851                                  ; slow head settle time for the next operation. this is because the reset
 11852                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 11853                                  ; time around - there is a problem with 3.5" drives in that the head does
 11854                                  ; not settle down in time,even for read operations!!
 11855                                  ;
 11856                                  ; ---------------------------------------------------------------------------
 11857                                  
 11858                                  ResetDisk:
 11859 0000106A 50                      		push	ax
 11860                                  
 11861                                  		; 02/09/2023
 11862 0000106B B80100                  		mov	ax, 1 ; PCDOS 7.1
 11863 0000106E 3806[3806]              		cmp	[media_set_for_format], al ; 1
 11864                                  		;cmp	byte [media_set_for_format], 1
 11865                                  					; Reset while formatting?
 11866 00001072 7503                    		jnz	short ResetDisk_cont
 11867                                  					; Then verify operation in "fmt & vrfy"
 11868                                  		;mov	byte [had_format_error], 1 ; Might have failed.
 11869 00001074 A2[3906]                		mov	[had_format_error], al ; 1
 11870                                  ResetDisk_cont:
 11871                                  		; 02/09/2023 (ah=0)
 11872                                  		;xor	ah, ah		; So signals that we had a format error
 11873 00001077 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 11874                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 11875 00001079 C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 11876                                  					; Zap up the speed
 11877 0000107E 58                      		pop	ax
 11878 0000107F C3                      		retn
 11879                                  
 11880                                  ; =============== S U B	R O U T	I N E =======================================
 11881                                  
 11882                                  ; 16/10/2022
 11883                                  
 11884                                  ; ---------------------------------------------------------------------------
 11885                                  ;
 11886                                  ; This routine sets up the drive parameter table with the values needed for
 11887                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 11888                                  ;
 11889                                  ; on entry  -	ES:DI - points to bds for the drive
 11890                                  ;		Xfer_Seg:BX - points to trkbuf
 11891                                  ;		AL    - number of sectors
 11892                                  ;		AH    - int 13 function code
 11893                                  ;		CL    - sector number for verify
 11894                                  ;		DS    - Bios_Data
 11895                                  ;
 11896                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 11897                                  ;		AX and flags are the results of the int 13
 11898                                  ;
 11899                                  ; ---------------------------------------------------------------------------
 11900                                  
 11901                                  		; 19/10/2022
 11902                                  ToRom:	
 11903 00001080 53                      		push	bx
 11904 00001081 56                      		push	si
 11905                                  
 11906                                  		; Compaq bug fix - check whether we are using new ROM
 11907                                  		; functionality to set up format, not merely if it exists.
 11908                                  		; This was formerly a check against [new_rom]
 11909                                  
 11910 00001082 F606[3806]01            		test	byte [media_set_for_format], 1
 11911 00001087 7536                    		jnz	short GotValidDpt
 11912 00001089 50                      		push	ax
 11913 0000108A 06                      		push	es		; Save bds segment
 11914 0000108B 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11915                                  					; ffSmall ; is it a 3.5" drive?
 11916 00001090 9C                      		pushf			; (Save	the cmp	result)
 11917 00001091 8E06[1A00]              		mov	es, [zeroseg]
 11918                                  		;les	si, es:78h	; Get pointer to disk base table
 11919 00001095 26C4367800              		les	si, [es:DSKADR]
 11920                                  		;mov	word ptr ds:dpt, si
 11921                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 11922 0000109A 8936[2D01]              		mov	[dpt], si
 11923 0000109E 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11924                                  		
 11925 000010A2 A0[3701]                		mov	al, [formt_eot]
 11926 000010A5 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 11927 000010A9 A0[3B01]                		mov	al, [gap_patch]
 11928 000010AC 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 11929                                  					; Important for	format
 11930 000010B0 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11931                                  					; Assume we are	doing a	seek operation
 11932                                  					; Setup	motor start correctly for 3.5" drives
 11933 000010B5 9D                      		popf			; Get result of	earlier	cmp
 11934 000010B6 7505                    		jnz	short MotorStrtOK
 11935 000010B8 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 11936                                  MotorStrtOK:				
 11937 000010BD 07                      		pop	es		; Restore bds segment
 11938 000010BE 58                      		pop	ax
 11939                                  GotValidDpt:				
 11940 000010BF 8B16[3901]              		mov	dx, [trknum]	; Set track number
 11941 000010C3 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 11942 000010C5 268A5504                		mov	dl, [es:di+4]	; Set drive number
 11943 000010C9 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 11944 000010CD 06                      		push	es		; Save bds segment
 11945 000010CE 8E06[3705]              		mov	es, [xfer_seg]
 11946 000010D2 CD13                    		int	13h		; DISK -
 11947 000010D4 07                      		pop	es		; Restore bds segment
 11948 000010D5 5E                      		pop	si
 11949 000010D6 5B                      		pop	bx
 11950 000010D7 C3                      		retn
 11951                                  
 11952                                  ; ---------------------------------------------------------------------------
 11953                                  
 11954                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11955                                  
 11956                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 11957                                  
 11958                                  ; ==========================================================================
 11959                                  ;
 11960                                  ; get the owner of the physical drive represented by the logical drive in al.
 11961                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 11962                                  ; if this is not the case, the system may hang, just following the linked list.
 11963                                  ;
 11964                                  ; ==========================================================================
 11965                                  
 11966                                  		; 19/10/2022
 11967                                  ioctl_getown:
 11968 000010D8 E8F0F3                  		call	SetDrive
 11969 000010DB 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 11970                                  					; Get physical drive number
 11971 000010DF C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 11972                                  ownloop:				
 11973 000010E3 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 11974 000010E7 7507                    		jnz	short getnextBDS
 11975                                  		; 10/12/2022
 11976 000010E9 26F6452320              		test	byte [es:di+23h], 20h
 11977                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 11978                                  					; fi_own_physical
 11979 000010EE 7514                    		jnz	short exitown
 11980                                  getnextBDS:				
 11981 000010F0 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 11982 000010F3 EBEE                    		jmp	short ownloop
 11983                                  ; ---------------------------------------------------------------------------
 11984                                  
 11985                                  ; ==========================================================================
 11986                                  ;
 11987                                  ; set the ownership of the physical drive represented by the logical drive
 11988                                  ; in al to al.
 11989                                  ;
 11990                                  ; ==========================================================================
 11991                                  
 11992                                  		; 19/10/2022
 11993                                  ioctl_setown:
 11994 000010F5 E8D3F3                  		call	SetDrive
 11995 000010F8 C606[7A00]01            		mov	byte [fsetowner], 1
 11996                                  					; set flag for CheckSingle to look at.
 11997 000010FD E839F7                  		call	checksingle
 11998                                  		; 02/09/2023
 11999 00001100 FE0E[7A00]              		dec	byte [fsetowner] ; 0
 12000                                  		;mov	byte [fsetowner], 0
 12001                                  					; set ownership	of drive reset flag
 12002                                  		; Fall into ExitOwn
 12003                                  
 12004                                  ; ==========================================================================
 12005                                  ;
 12006                                  ; if there is only one logical drive assigned to this physical drive, return
 12007                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 12008                                  ;
 12009                                  ; ==========================================================================
 12010                                  
 12011                                  exitown:				
 12012 00001104 30C9                    		xor	cl, cl
 12013                                  		; 12/12/2022
 12014 00001106 26F6452310              		test	byte [es:di+23h], 10h
 12015                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 12016                                  					; fi_am_mult
 12017 0000110B 7406                    		jz	short exitnomult
 12018 0000110D 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 12019                                  					; Get logical drive number
 12020                                  					; Get it 1-based
 12021 00001111 FEC1                    		inc	cl
 12022                                  exitnomult:				
 12023 00001113 C51E[1200]              		lds	bx, [ptrsav]
 12024 00001117 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 12025                                  					; Exit normal termination
 12026                                  		; 12/12/2022
 12027                                  		; cf=0
 12028                                  		;clc
 12029 0000111A C3                      		retn
 12030                                  
 12031                                  ; =============== S U B	R O U T	I N E =======================================
 12032                                  
 12033                                  ; 16/10/2022
 12034                                  
 12035                                  ; ---------------------------------------------------------------------------
 12036                                  ;
 12037                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 12038                                  ; only if the first byte of TempDpt is not -1.
 12039                                  ; all registers (including flags) are preserved.
 12040                                  ;
 12041                                  ; ---------------------------------------------------------------------------
 12042                                  
 12043                                  		; 19/10/2022
 12044                                  RestoreOldDpt:
 12045                                  		; if we have already restored the disk base table earlier,
 12046                                  		; do not do it again.
 12047                                  	
 12048 0000111B 50                      		push	ax
 12049 0000111C 30C0                    		xor	al, al
 12050 0000111E A2[3906]                		mov	[had_format_error], al	; Reset flag and 
 12051 00001121 8606[3806]              		xchg	al, [media_set_for_format] ; get current flag setting
 12052 00001125 08C0                    		or	al, al
 12053 00001127 741E                    		jz	short DontRestore
 12054 00001129 56                      		push	si
 12055 0000112A 1E                      		push	ds
 12056 0000112B 06                      		push	es
 12057 0000112C C536[3A06]              		lds	si, [tempdpt]
 12058                                  
 12059                                  		; 17/10/2022
 12060 00001130 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 12061                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12062 00001135 268E06[1A00]            		mov	es, [es:zeroseg]
 12063                                  		;mov	es, es:zeroseg	; CAS -- bleeeech!
 12064                                  
 12065                                  		;mov	es:78h,	si	; [es:DSKADR]
 12066 0000113A 2689367800              		mov	[es:DSKADR], si
 12067                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 12068 0000113F 268C1E7A00              		mov	[es:DSKADR+2], ds
 12069 00001144 07                      		pop	es
 12070 00001145 1F                      		pop	ds
 12071 00001146 5E                      		pop	si
 12072                                  DontRestore:				
 12073 00001147 58                      		pop	ax
 12074                                  		; 12/12/2022
 12075                                  		; cf=0
 12076                                  		;clc			;  Clear carry
 12077 00001148 C3                      		retn
 12078                                  
 12079                                  ; ---------------------------------------------------------------------------
 12080                                  
 12081                                  ; 16/10/2022
 12082                                  
 12083                                  ; ==========================================================================
 12084                                  ;	get media id
 12085                                  ; ==========================================================================
 12086                                  ;
 12087                                  ; FUNCTION: get the volume label,the system id and the serial number from
 12088                                  ;	    the media that has the extended boot record.
 12089                                  ;	    for the conventional media,this routine will return "unknown
 12090                                  ;	    media type" error to dos.
 12091                                  ;
 12092                                  ; INPUT :   ES:di -> bds table for this drive.
 12093                                  ;
 12094                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 12095                                  ;	    if carry set,then al contains the device driver error number
 12096                                  ;	    that will be returned to dos.
 12097                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 12098                                  ;
 12099                                  ; SUBROUTINES TO BE CALLED:
 12100                                  ;	BootIo:NEAR
 12101                                  ;
 12102                                  ; LOGIC:
 12103                                  ;	to recognize the extended boot record,this logic will actually
 12104                                  ;	access the boot sector even if it is a hard disk.
 12105                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 12106                                  ;	field of bpb and the extended boot signature.
 12107                                  ;
 12108                                  ; {
 12109                                  ;	get logical drive number from bds table;
 12110                                  ;	rFlag = read operation;
 12111                                  ;	BootIo;		 /*get the media boot record into the buffer
 12112                                  ;	if (no error) then
 12113                                  ;	     if (extended boot record) then
 12114                                  ;		{ set volume label,volume serial number and system id
 12115                                  ;		  of the request packet to those of the boot record;
 12116                                  ;		};
 12117                                  ;	     else		  /*not an extended bpb */
 12118                                  ;		{ set register al to "unknown media.." error code;
 12119                                  ;		  set carry bit;
 12120                                  ;		};
 12121                                  ;	else
 12122                                  ;	     ret;	/*already error code is set in the register al
 12123                                  ;
 12124                                  ; ==========================================================================
 12125                                  
 12126                                  ;size_of_EXT_BOOT_SERIAL equ 4
 12127                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 12128                                  ;;size_of_EXT_SYSTEM_ID equ 8
 12129                                  
 12130                                  		; 19/10/2022
 12131                                  GetMediaId:
 12132 00001149 E89F00                  		call	ChangeLineChk
 12133 0000114C 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 12134 00001150 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 12135 00001155 E87B00                  		call	BootIo		; Read boot sector into	DiskSector
 12136 00001158 7224                    		jb	short IOCtl_If1
 12137                                  					; Valid? (0F0h-0FFh?)
 12138 0000115A 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12139                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12140 0000115F 721A                    		jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 12141                                  		; 10/12/2022
 12142 00001161 BE[7401]                		mov	si, disksector+26h
 12143 00001164 803C29                  		cmp	byte [si], 29h
 12144                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12145                                  					; EXT_BOOT_SIGNATURE
 12146 00001167 7512                    		jnz	short IOCtl_If2	; not extended boot record
 12147 00001169 C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 12148 0000116D 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12149                                  		; 10/12/2022
 12150 00001171 46                      		inc	si
 12151                                  		; si = disksector+27h 
 12152                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12153 00001172 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12154 00001175 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12155                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 12156                                  					; +size_of_EXT_SYSTEM_ID
 12157 00001178 F3A4                    		rep movsb		; Move from Bios_Data into request packet
 12158                                  	
 12159                                  		; 10/12/2022
 12160                                  		; cf = 0
 12161                                  		;clc
 12162                                  
 12163 0000117A C3                      		retn
 12164                                  ; ---------------------------------------------------------------------------
 12165                                  
 12166                                  IOCtl_If2:				
 12167 0000117B B007                    		mov	al, 7		; error_unknown_media
 12168 0000117D F9                      		stc
 12169                                  IOCtl_If1:				
 12170 0000117E C3                      		retn
 12171                                  ; ---------------------------------------------------------------------------
 12172                                  
 12173                                  ; 16/10/2022
 12174                                  
 12175                                  ; ==========================================================================
 12176                                  ;  set media id
 12177                                  ; ==========================================================================
 12178                                  
 12179                                  ; function: set the volume label, the system id and the serial number of
 12180                                  ;	    the media that has the extended boot record.
 12181                                  ;	    for the conventional media, this routine will return "unknown
 12182                                  ;	    media.." error to dos.
 12183                                  ;	    this routine will also set the corresponding informations in
 12184                                  ;	    the bds table.
 12185                                  ;
 12186                                  ; input :   ES:di -> bds table for this drive.
 12187                                  ;
 12188                                  ; output:   the extended boot record in the media will be set according to
 12189                                  ;	    the request packet.
 12190                                  ;	    if carry set, then al contains the device driver error number
 12191                                  ;	    that will be returned to dos.
 12192                                  ;
 12193                                  ; subroutines to be called:
 12194                                  ;	BootIo:NEAR
 12195                                  ;
 12196                                  ; logic:
 12197                                  ;
 12198                                  ; {
 12199                                  ;	get drive_number from bds;
 12200                                  ;	rFlag = "read operation";
 12201                                  ;	BootIo;
 12202                                  ;	if (no error) then
 12203                                  ;	     if (extended boot record) then
 12204                                  ;		{ set volume label,volume serial number and system id
 12205                                  ;		  of the boot record to those of the request packet;
 12206                                  ;		  rFlag = "write operation";
 12207                                  ;		  get drive number from bds;
 12208                                  ;		  BootIo;	  /*write it back*/
 12209                                  ;		};
 12210                                  ;	     else		  /*not an extended bpb */
 12211                                  ;		{ set register al to "unknown media.." error code;
 12212                                  ;		  set carry bit;
 12213                                  ;		  ret;	 /*return back to caller */
 12214                                  ;		};
 12215                                  ;	else
 12216                                  ;	     ret;		 /*already error code is set */
 12217                                  ;
 12218                                  ; ==========================================================================
 12219                                  
 12220                                  		; 19/10/2022
 12221                                  SetMediaId:
 12222 0000117F E86900                  		call	ChangeLineChk
 12223 00001182 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 12224                                  					; Logical drive	number
 12225 00001186 88C2                    		mov	dl, al
 12226 00001188 C606[2001]02            		mov	byte [rflag], 2	; romread
 12227 0000118D 52                      		push	dx
 12228 0000118E E84200                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 12229 00001191 5A                      		pop	dx
 12230 00001192 723E                    		jb	short IOCtl_If6
 12231                                  					; Valid? (0F0h-0FFh?)
 12232 00001194 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12233                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12234 00001199 7234                    		jb	short IOCtl_If7	; Brif not
 12235 0000119B 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12236                                  					; EXT_BOOT_SIGNATURE
 12237 000011A0 752D                    		jnz	short IOCtl_If7	; not extended boot record
 12238 000011A2 06                      		push	es		; Save BDS pointer
 12239 000011A3 57                      		push	di
 12240 000011A4 1E                      		push	ds		; Point	ES To boot record
 12241 000011A5 07                      		pop	es
 12242 000011A6 BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12243 000011A9 C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 12244 000011AD C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 12245 000011B0 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12246 000011B3 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12247                                  					; +size_of_EXT_BOOT_VOL_LABEL
 12248                                  					; +size_of_EXT_SYSTEM_ID
 12249 000011B6 F3A4                    		rep movsb
 12250 000011B8 06                      		push	es		; point	ds back	to Bios_Data
 12251 000011B9 1F                      		pop	ds
 12252 000011BA 5F                      		pop	di		; restore bds pointer
 12253 000011BB 07                      		pop	es
 12254 000011BC E876F5                  		call	mov_media_ids	; update the bds media id info.
 12255 000011BF 88D0                    		mov	al, dl
 12256 000011C1 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12257 000011C6 E80A00                  		call	BootIo		; write	it back.
 12258 000011C9 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 12259                                  					; make sure chk_media check the driver
 12260                                  					; return with error code from BootIo
 12261 000011CE C3                      		retn
 12262                                  ; ---------------------------------------------------------------------------
 12263                                  
 12264                                  IOCtl_If7:				
 12265 000011CF B007                    		mov	al, 7		; error_unknown_media
 12266 000011D1 F9                      		stc
 12267                                  IOCtl_If6:				
 12268 000011D2 C3                      		retn
 12269                                  
 12270                                  ; =============== S U B	R O U T	I N E =======================================
 12271                                  
 12272                                  ; 16/10/2022
 12273                                  
 12274                                  ; ---------------------------------------------------------------------------
 12275                                  ;	BootIo
 12276                                  ; ---------------------------------------------------------------------------
 12277                                  ;
 12278                                  ; function: read/write the boot record into boot sector.
 12279                                  ;
 12280                                  ; input :
 12281                                  ;	    al=logical drive number
 12282                                  ;	    rFlag = operation (read/write)
 12283                                  ;
 12284                                  ; output:   for read operation,the boot record of the drive specified in bds
 12285                                  ;	    be read into the DiskSector buffer.
 12286                                  ;	    for write operation,the DiskSector buffer image will be written
 12287                                  ;	    to the drive specified in bds.
 12288                                  ;	    if carry set,then al contains the device driver error number
 12289                                  ;	    that will be returned to dos.
 12290                                  ;	    AX,CX,DX register destroyed.
 12291                                  ;	    if carry set,then al will contain the error code from DiskIO.
 12292                                  ;
 12293                                  ; subroutines to be called:
 12294                                  ;	DiskIO:NEAR
 12295                                  ;
 12296                                  ; logic:
 12297                                  ;
 12298                                  ; {
 12299                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 12300                                  ;	sectorcount = 1;	 /*read 1 sector only */
 12301                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 12302                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 12303                                  ; }
 12304                                  ; ==========================================================================
 12305                                  
 12306                                  		; 19/10/2022
 12307                                  BootIo:	
 12308 000011D3 06                      		push	es
 12309 000011D4 57                      		push	di
 12310 000011D5 53                      		push	bx
 12311 000011D6 1E                      		push	ds
 12312 000011D7 07                      		pop	es		; Point ES: to Bios_Data
 12313                                  
 12314                                  		; Call DiskIO to read/write the boot sec. The parameters which
 12315                                  		; need to be initialized for this subroutine out here are
 12316                                  		; - Transfer address to Bios_Data:DiskSector
 12317                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 12318                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 12319                                  		; - Number of sectors <-- 1
 12320                                  
 12321 000011D8 BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 12322 000011DB 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 12323 000011DD 8916[2B05]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 12324 000011E1 B90100                  		mov	cx, 1
 12325 000011E4 E8E0F6                  		call	diskio
 12326 000011E7 5B                      		pop	bx
 12327 000011E8 5F                      		pop	di
 12328 000011E9 07                      		pop	es
 12329 000011EA C3                      		retn
 12330                                  
 12331                                  ; =============== S U B	R O U T	I N E =======================================
 12332                                  
 12333                                  ; 16/10/2022
 12334                                  
 12335                                  ; ---------------------------------------------------------------------------
 12336                                  ;	ChangeLineChk
 12337                                  ; ---------------------------------------------------------------------------
 12338                                  ;
 12339                                  ; when the user calls get/set media id call before dos establishes the media
 12340                                  ; by calling "media_chk",the change line activity of the drive is going to be
 12341                                  ; lost.	this routine will check the change line activity and will save the
 12342                                  ; history in the flags.
 12343                                  ;
 12344                                  ; FUNCTION: check the change line error activity
 12345                                  ;
 12346                                  ; INPUT :  ES:di -> bds table.
 12347                                  ;
 12348                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 12349                                  ;
 12350                                  ; SUBROUTINES TO BE CALLED:
 12351                                  ;	Set_Changed_DL
 12352                                  ;
 12353                                  ; ---------------------------------------------------------------------------
 12354                                  
 12355                                  ChangeLineChk:	
 12356 000011EB 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12357 000011EF 08D2                    		or	dl, dl		; Fixed	disk?
 12358 000011F1 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 12359                                  		; 12/12/2022
 12360 000011F3 26F6452304              		test	byte [es:di+23h], 4
 12361                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 12362                                  					; return_fake_bpb
 12363 000011F8 751A                    		jnz	short ChangeLnChkRet
 12364 000011FA 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 12365 000011FF 7513                    		jnz	short ChangeLnChkRet
 12366 00001201 E8DE06                  		call	haschange	; This drive support change line?
 12367 00001204 740E                    		jz	short ChangeLnChkRet ; Do nothing
 12368                                  
 12369                                  		; Execute the rom disk interrupt to check changeline activity.
 12370                                  
 12371 00001206 B416                    		mov	ah, 16h
 12372 00001208 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 12373                                  					; DL = drive to	check
 12374                                  					; Return: AH = disk change status
 12375 0000120A 7308                    		jnb	short ChangeLnChkRet
 12376 0000120C 53                      		push	bx
 12377 0000120D BB4000                  		mov	bx, 40h		; fchanged
 12378                                  					; Update flag in BDS for this
 12379                                  					; physical drive
 12380 00001210 E8A806                  		call	set_changed_dl
 12381 00001213 5B                      		pop	bx
 12382                                  ChangeLnChkRet:				
 12383 00001214 C3                      		retn
 12384                                  
 12385                                  ; ---------------------------------------------------------------------------
 12386                                  
 12387                                  ; 16/10/2022
 12388                                  
 12389                                  ; ==========================================================================
 12390                                  ;	GetAccessFlag
 12391                                  ; ==========================================================================
 12392                                  ;
 12393                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 12394                                  ;
 12395                                  ; INPUT :
 12396                                  ;	    ES:di -> bds table
 12397                                  ;
 12398                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 12399                                  ;						 = 1 if disk i/o allowed.
 12400                                  ; ==========================================================================
 12401                                  
 12402                                  		; 19/10/2022
 12403                                  GetAccessFlag:				
 12404 00001215 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 12405 00001219 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12406                                  		;mov	al, 0		; Assume result	is unformatted
 12407                                  		; 10/12/2022
 12408 0000121C 28C0                    		sub	al, al
 12409                                  		; 10/12/2022
 12410 0000121E 26F6452402              		test	byte [es:di+36], 02h
 12411                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 12412                                  					; unformatted_media
 12413 00001223 7502                    		jnz	short GafDone	; Done if unformatted
 12414 00001225 FEC0                    		inc	al		; Return true for formatted
 12415                                  
 12416                                  GafDone:				
 12417 00001227 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12418 0000122A C3                      		retn
 12419                                  ; ---------------------------------------------------------------------------
 12420                                  
 12421                                  ; 16/10/2022
 12422                                  
 12423                                  ; ==========================================================================
 12424                                  ;	SetAccessFlag
 12425                                  ; ==========================================================================
 12426                                  ;
 12427                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 12428                                  ;
 12429                                  ; input :
 12430                                  ;	    ES:di -> bds table
 12431                                  ;
 12432                                  ; output:   unformtted_media bit modified according to the user request
 12433                                  ; ==========================================================================
 12434                                  
 12435                                  		; 19/10/2022
 12436                                  SetAccessFlag:				
 12437 0000122B C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 12438 0000122F C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12439                                  		; 10/12/2022
 12440 00001232 26806524FD              		and	byte [es:di+36], 0FDh
 12441                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 12442                                  					; ~unformatted_media
 12443 00001237 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12444 0000123B 7505                    		jnz	short saf_Done
 12445                                  		; 10/12/2022
 12446 0000123D 26804D2402              		or	byte [es:di+36], 02h
 12447                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 12448                                  					; unformatted_media
 12449                                  saf_Done:				
 12450 00001242 C3                      		retn
 12451                                  ; ---------------------------------------------------------------------------
 12452                                  
 12453                                  ; 16/10/2022
 12454                                  
 12455                                  ; ==========================================================================
 12456                                  ; Ioctl_Support_Query
 12457                                  ; ==========================================================================
 12458                                  ;
 12459                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 12460                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 12461                                  ; device attributes specifies if this function is supported.
 12462                                  ;
 12463                                  ; ==========================================================================
 12464                                  
 12465                                  		; 19/10/2022
 12466                                  ioctl_support_query:
 12467 00001243 06                      		push	es
 12468 00001244 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 12469 00001248 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 12470                                  					; AL ==	Major, AH == Minor
 12471 0000124C 3C08                    		cmp	al, 8		; IOC_DC
 12472                                  					; See if major code is 8
 12473 0000124E 7513                    		jnz	short nosupport
 12474 00001250 0E                      		push	cs
 12475 00001251 07                      		pop	es
 12476 00001252 B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 12477                                  		; 10/12/2022
 12478 00001255 BF[360C]                		mov	di, IOC_DC_Table
 12479                                  		;mov	di, 0C60h	; IOC_DC_Table
 12480                                  					; at 2C7h:0C60h	= 70h:31D0h
 12481 00001258 86C4                    		xchg	al, ah		; Put minor code in AL
 12482 0000125A F2AE                    		repne scasb		; Scan for minor code in AL
 12483 0000125C 7505                    		jnz	short nosupport	; it was not found
 12484 0000125E B80001                  		mov	ax, 100h
 12485                                  		; 10/12/2022
 12486                                  		; (jump to ioctlsupexit is not required)
 12487                                  		;jmp	short $+2	; ioctlsupexit
 12488                                  					; Signal ioctl is supported
 12489                                  		;;jmp	short ioctlsupexit
 12490                                  ; ---------------------------------------------------------------------------
 12491                                  ioctlsupexit:				
 12492 00001261 07                      		pop	es
 12493                                  		; 10/12/2022
 12494                                  		; cf = 0
 12495                                  		;clc
 12496 00001262 C3                      		retn
 12497                                  ; ---------------------------------------------------------------------------
 12498                                  nosupport:				
 12499 00001263 07                      		pop	es
 12500 00001264 E96EEE                  		jmp	bc_cmderr
 12501                                  ; ---------------------------------------------------------------------------
 12502                                  
 12503                                  ; 16/10/2022
 12504                                  
 12505                                  ; ==========================================================================
 12506                                  ;	GetMediaSenseStatus
 12507                                  ; ==========================================================================
 12508                                  ;
 12509                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 12510                                  ;	    diskette drive and whether the media is the default type
 12511                                  ;	    for that drive. (default type means the max size for that
 12512                                  ;	    drive)
 12513                                  ;
 12514                                  ; INPUT :   ES:DI -> BDS table
 12515                                  ; OUTPUT:   If carry clear
 12516                                  ;	    DS:BX -> Updated IOCtlPacket
 12517                                  ;
 12518                                  ;			 Special Function at offset 0:
 12519                                  ;				0	- Media detected is not default type
 12520                                  ;				1	- Media detected is default type
 12521                                  ;
 12522                                  ;			 Device Type at offset 1:
 12523                                  ;				2       - 720K 3.5" 80 tracks
 12524                                  ;				7	- 1.44M 3.5" 80 tracks
 12525                                  ;				9	- 2.88M 3.5" 80 tracks
 12526                                  ;
 12527                                  ; Error Codes returned in AX if carry set:
 12528                                  ;
 12529                                  ; 8102 - Drive not ready	- No disk is in the drive.
 12530                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 12531                                  ;				  the media is really unkown, any error
 12532                                  ;				  other than "media not present"
 12533                                  ; 
 12534                                  ; ==========================================================================
 12535                                  
 12536                                  		; 19/10/2022
 12537                                  SenseMediaType:				
 12538 00001267 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 12539 0000126B C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12540                                  		; 10/10/2022
 12541                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 12542 0000126E 31D2                    		xor	dx, dx
 12543 00001270 8917                    		mov	[bx], dx ; 0
 12544                                  		;
 12545 00001272 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12546                                  					; Get int 13h drive number from	BDS
 12547                                  		; 10/12/2022
 12548                                  		;xor	dh, dh		; DX = physical	drive number
 12549 00001276 B420                    		mov	ah, 20h		; Get Media Type function
 12550                                  					; If no	carry media type in AL
 12551 00001278 CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 12552 0000127A 7216                    		jb	short MediaSenseEr ; error code	in AH
 12553 0000127C FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 12554                                  DetermineMediaType:			
 12555 0000127E FEC8                    		dec	al
 12556 00001280 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 12557 00001282 740A                    		jz	short GotMediaType
 12558 00001284 0404                    		add	al, 4
 12559 00001286 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 12560 00001288 7404                    		jz	short GotMediaType
 12561 0000128A 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 12562 0000128C 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 12563                                  GotMediaType:				
 12564 0000128E 884701                  		mov	[bx+1],	al	; Save the return value
 12565                                  		; 10/12/2022
 12566                                  		; cf = 0
 12567                                  		;clc			; Signal success
 12568 00001291 C3                      		retn
 12569                                  ; ---------------------------------------------------------------------------
 12570                                  
 12571                                  MediaSenseEr:				
 12572 00001292 80FC32                  		cmp	ah, 32h		; See if not default media error
 12573 00001295 74E7                    		jz	short DetermineMediaType ; Not really an error
 12574 00001297 B002                    		mov	al, 2		; Now assume drive not ready
 12575 00001299 80FC31                  		cmp	ah, 31h		; See if media was present
 12576 0000129C 7402                    		jz	short SenseErrExit ; Return drive not ready
 12577                                  UnknownMediaType:			
 12578 0000129E B007                    		mov	al, 7		; Just don't know the media type
 12579                                  SenseErrExit:				
 12580 000012A0 B481                    		mov	ah, 81h		; Signal error return
 12581 000012A2 F9                      		stc
 12582 000012A3 C3                      		retn
 12583                                  
 12584                                  ; ---------------------------------------------------------------------------
 12585                                  		; 10/12/2022
 12586                                  		;db    0
 12587                                  ; ---------------------------------------------------------------------------
 12588                                  
 12589                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12590                                  
 12591                                  ;-----------------------------------------------------------------------------
 12592                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 12593                                  ;-----------------------------------------------------------------------------
 12594                                  ; 16/03/2019 - Retro DOS v4.0
 12595                                  
 12596                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 12597                                  ;	after booting. this allows testing and implementation of custom int_13
 12598                                  ;	handlers, without giving up ms-dos error recovery
 12599                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 12600                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 12601                                  ;	exit:	orig13	== address of new int_13 handler
 12602                                  ;		ds:dx	== old orig13 value
 12603                                  ;		es:bx	== old old13  value
 12604                                  ;
 12605                                  ; int 2f handler for external block drivers to communicate with the internal
 12606                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 12607                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 12608                                  ; dsk_entry, the entry point for all disk requests.
 12609                                  ;
 12610                                  ; on exit from this driver, we will return to the external driver
 12611                                  ; that issued this int 2f, and can then remove the flags from the stack.
 12612                                  ; this scheme allows us to have a small external device driver, and makes
 12613                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 12614                                  ; since we only need to make changes in one place (most of the time).
 12615                                  ;
 12616                                  ;   ax=800h - check for installed handler - reserved
 12617                                  ;   ax=801h - install the bds into the linked list
 12618                                  ;   ax=802h - dos request
 12619                                  ;   ax=803h - return bds table starting pointer in ds:di
 12620                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 12621                                  ;	    problem. bds table is going to be used to get head/sector
 12622                                  ;	    informations without calling generic ioctl get device parm call.)
 12623                                  
 12624                                  ;BIOSSEGMENT equ 70h
 12625                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 12626                                  
 12627                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 12628                                  
 12629                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 12630 000012A4 80FC13                  		cmp	ah, 13h
 12631 000012A7 7413                    		jz	short int2f_replace_int13
 12632 000012A9 80FC08                  		cmp	ah, 8
 12633 000012AC 7431                    		jz	short mine
 12634                                  
 12635                                  ; Check for WIN386 startup and return the BIOS instance data
 12636                                  
 12637 000012AE 80FC16                  		cmp	ah, 16h		; MultWin386
 12638 000012B1 746C                    		jz	short win386call
 12639 000012B3 80FC4A                  		cmp	ah, 4Ah		; multMULT
 12640 000012B6 7503                    		jnz	short i2f_handler_iret
 12641 000012B8 E99700                  		jmp	handle_multmult
 12642                                  ; ---------------------------------------------------------------------------
 12643                                  
 12644                                  i2f_handler_iret:			
 12645 000012BB CF                      		iret
 12646                                  ; ---------------------------------------------------------------------------
 12647                                  
 12648                                  int2f_replace_int13:			
 12649 000012BC 50                      		push	ax	; free up a register for caller's ds
 12650 000012BD 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 12651                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 12652                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 12653                                  					; = [02C7h:0030h] = [0070h:25A0h]
 12654 000012BF 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 12655                                  		; 19/10/2022
 12656                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 12657                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 12658                                  		;push	word ptr ds:Old13	; return them to caller
 12659                                  		;push	word ptr ds:Old13+2
 12660                                  		
 12661                                  		; 02/09/2023 (PCDOS 7.1)
 12662                                  		;push	word [Orig13]
 12663 000012C4 FF36[B600]              		push	word [Orig13+2]
 12664                                  		;push	word [Old13]
 12665 000012C8 FF36[0801]              		push	word [Old13+2]
 12666                                  
 12667                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 12668                                  		;mov	word ptr ds:Orig13+2, ax
 12669                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 12670                                  		;mov	word ptr ds:Old13+2, es
 12671                                  		
 12672                                  		;mov	[Orig13], dx
 12673                                  		; 02/09/2023
 12674 000012CC 8716[B400]              		xchg	dx, [Orig13]
 12675 000012D0 A3[B600]                		mov	[Orig13+2], ax
 12676                                  		;mov	[Old13], bx
 12677                                  		; 02/09/2023
 12678 000012D3 871E[0601]              		xchg	bx, [Old13]
 12679 000012D7 8C06[0801]              		mov	[Old13+2], es
 12680                                  
 12681 000012DB 07                      		pop	es			; es:bx := old old13 vector
 12682                                  		; 02/09/2023
 12683                                  		;pop	bx
 12684 000012DC 1F                      		pop	ds			; ds:dx := old orig13 vector
 12685                                  		;pop	dx ; 02/09/2023
 12686 000012DD 58                      		pop	ax
 12687                                  i2f_iret:
 12688 000012DE CF                      		iret
 12689                                  ; ---------------------------------------------------------------------------
 12690                                  
 12691                                  mine:					
 12692 000012DF 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 12693 000012E1 73FB                    		jnb	short i2f_iret
 12694 000012E3 08C0                    		or	al, al			; a get installed state request?
 12695 000012E5 7503                    		jnz	short disp_func
 12696 000012E7 B0FF                    		mov	al, 0FFh
 12697                                  		;jmp	short i2f_iret
 12698                                  		; 02/09/2023
 12699 000012E9 CF                      		iret
 12700                                  ; ---------------------------------------------------------------------------
 12701                                  
 12702                                  disp_func:				
 12703 000012EA 3C01                    		cmp	al, 1			; request for installing bds?
 12704 000012EC 7418                    		jz	short do_subfun_01
 12705 000012EE 3C03                    		cmp	al, 3			; get bds vector?
 12706 000012F0 7423                    		jz	short do_get_bds_vector
 12707                                  
 12708                                  ; set up pointer to request packet
 12709                                  
 12710 000012F2 1E                      		push	ds
 12711 000012F3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 12712                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12713                                  					; = [0070h:25A0h] = [02C7h:0030h]
 12714                                  		; 19/10/2022
 12715                                  		;mov	word ptr ds:ptrsav, bx
 12716                                  		;mov	word ptr ds:ptrsav+2, es
 12717 000012F8 891E[1200]              		mov	[ptrsav], bx
 12718 000012FC 8C06[1400]              		mov	[ptrsav+2], es
 12719 00001300 1F                      		pop	ds
 12720                                  		;jmp	far ptr	i2f_dskentry
 12721                                  		; 17/10/2022
 12722                                  		;jmp	far DOSBIOSSEG:dsk_entry		
 12723 00001301 EA[9608]7000            		jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 12724                                  					; NOTE: jump to a FAR function, not an
 12725                                  					;  IRET type function. Callers of
 12726                                  					;  this int2f subfunction will have
 12727                                  					;  to be careful to do a popf
 12728                                  
 12729                                  ; ---------------------------------------------------------------------------
 12730                                  
 12731                                  do_subfun_01:
 12732 00001306 06                      		push	es
 12733 00001307 1E                      		push	ds
 12734 00001308 1E                      		push	ds
 12735 00001309 07                      		pop	es
 12736                                  		; 17/10/2022
 12737 0000130A 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 12738                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12739                                  					; point	ds: -> Bios_Data
 12740 0000130F E8BC03                  		call	install_bds
 12741 00001312 1F                      		pop	ds
 12742 00001313 07                      		pop	es
 12743                                  		;jmp	short i2f_iret
 12744                                  		; 02/09/2023
 12745 00001314 CF                      		iret
 12746                                  ; ---------------------------------------------------------------------------
 12747                                  
 12748                                  do_get_bds_vector:
 12749                                  		; 17/10/2022
 12750 00001315 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 12751                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12752 0000131A C53E[1901]              		lds	di, [start_bds]
 12753                                  		;lds	di, ds:start_bds
 12754                                  ;ii2f_iret:	; 10/12/2022
 12755                                  		;jmp	short i2f_iret
 12756                                  		; 02/09/2023
 12757 0000131E CF                      		iret
 12758                                  ; ---------------------------------------------------------------------------
 12759                                  
 12760                                  ; 17/10/2022
 12761                                  ; 16/10/2022
 12762                                  
 12763                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 12764                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 12765                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 12766                                  
 12767                                  win386call:				
 12768 0000131F 1E                      		push	ds
 12769 00001320 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12770                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12771                                  					; at 2C7h:30h =	70h:25A0h
 12772 00001325 3C05                    		cmp	al, 5		; Win386_Init
 12773                                  					; is it	win386 initializing?
 12774 00001327 7410                    		jz	short Win386Init
 12775 00001329 3C06                    		cmp	al, 6		; Win386_Exit
 12776                                  					; is it	win386 exiting?
 12777 0000132B 7523                    		jnz	short win_iret	; if not, continue int2f chain
 12778                                  		; 12/12/2022
 12779 0000132D F6C201                  		test	dl, 1
 12780                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 12781 00001330 751E                    		jnz	short win_iret	; if not win386, then continue
 12782                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 12783 00001332 8026[CE08]00            		and	byte [IsWin386], 0 
 12784 00001337 EB17                    		jmp	short win_iret
 12785                                  ; ---------------------------------------------------------------------------
 12786                                  
 12787                                  Win386Init:	
 12788                                  		; 12/12/2022
 12789 00001339 F6C201                  		test	dl, 1			
 12790                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 12791 0000133C 7512                    		jnz	short win_iret	; if not win386, then continue
 12792                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 12793 0000133E 800E[CE08]01            		or	byte [IsWin386], 1
 12794                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 12795                                  		;mov	word ptr ds:SI_Next+2, es
 12796 00001343 891E[9C08]              		mov	[SI_Next], bx
 12797 00001347 8C06[9E08]              		mov	[SI_Next+2], es
 12798                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 12799 0000134B BB[9A08]                		mov	bx, Win386_SI	; 19/10/2022
 12800 0000134E 1E                      		push	ds
 12801 0000134F 07                      		pop	es
 12802                                  win_iret:				
 12803 00001350 1F                      		pop	ds
 12804                                  ii2f_iret:	; 10/12/2022
 12805                                  		;jmp	short i2f_iret	; return back up the chain
 12806                                  		; 02/09/2023
 12807 00001351 CF                      		iret
 12808                                  ; ---------------------------------------------------------------------------
 12809                                  
 12810                                  handle_multmult:			
 12811 00001352 3C01                    		cmp	al, 1
 12812 00001354 7514                    		jnz	short try_2
 12813 00001356 1E                      		push	ds
 12814 00001357 E84500                  		call	HMAPtr		; get offset of free HMA
 12815                                  		; 10/12/2022
 12816                                  		;xor	bx, bx
 12817                                  		;dec	bx
 12818 0000135A BBFFFF                  		mov	bx, 0FFFFh
 12819 0000135D 8EC3                    		mov	es, bx		; seg of HMA
 12820 0000135F 89FB                    		mov	bx, di
 12821 00001361 F7D3                    		not	bx
 12822 00001363 09DB                    		or	bx, bx
 12823 00001365 7401                    		jz	short try_1
 12824 00001367 43                      		inc	bx
 12825                                  try_1:
 12826 00001368 1F                      		pop	ds
 12827                                  		;jmp	short ii2f_iret
 12828                                  		; 02/09/2023
 12829 00001369 CF                      		iret
 12830                                  ; ---------------------------------------------------------------------------
 12831                                  
 12832                                  try_2:					
 12833 0000136A 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 12834 0000136C 7530                    		jnz	short try_3
 12835 0000136E 1E                      		push	ds
 12836                                  		; 10/12/2022
 12837                                  		;xor	di, di
 12838                                  		;dec	di
 12839 0000136F BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 12840 00001372 8EC7                    		mov	es, di
 12841 00001374 E82800                  		call	HMAPtr		; get offset of free HMA
 12842 00001377 83FFFF                  		cmp	di, 0FFFFh
 12843 0000137A 7421                    		jz	short InsuffHMA
 12844 0000137C F7DF                    		neg	di		; free space in HMA
 12845 0000137E 39FB                    		cmp	bx, di
 12846 00001380 7605                    		jbe	short try_4
 12847                                  		; 10/12/2022
 12848                                  		;sub	di, di
 12849                                  		;dec	di
 12850 00001382 BFFFFF                  		mov	di, 0FFFFh
 12851                                  		;jmp	short InsuffHMA
 12852                                  		; 02/09/2023
 12853 00001385 1F                      		pop	ds
 12854 00001386 CF                      		iret
 12855                                  ; ---------------------------------------------------------------------------
 12856                                  
 12857                                  try_4:					
 12858                                  		;mov	di, ds:FreeHMAPtr
 12859 00001387 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12860 0000138B 83C30F                  		add	bx, 15
 12861                                  		;and	bx, 0FFF0h
 12862                                  		; 10/12/2022
 12863 0000138E 80E3F0                  		and	bl, 0F0h
 12864                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 12865 00001391 011E[F508]              		add	[FreeHMAPtr], bx
 12866 00001395 7506                    		jnz	short InsuffHMA
 12867 00001397 C706[F508]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 12868                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 12869                                  					; no more HMA if we have wrapped
 12870                                  InsuffHMA:
 12871 0000139D 1F                      		pop	ds
 12872                                  		; 10/12/2022
 12873                                  try_3:		
 12874                                  		;jmp	short ii2f_iret
 12875                                  		; 02/09/2023
 12876 0000139E CF                      		iret
 12877                                  ; ---------------------------------------------------------------------------
 12878                                  
 12879                                  		; 10/12/2022
 12880                                  ;try_3:					
 12881                                  		;jmp	ii2f_iret
 12882                                  
 12883                                  ; =============== S U B	R O U T	I N E =======================================
 12884                                  
 12885                                  ; 16/10/2022
 12886                                  
 12887                                  ;--------------------------------------------------------------------------
 12888                                  ;
 12889                                  ; procedure : HMAPtr
 12890                                  ;
 12891                                  ;		Gets the offset of the free HMA area ( with respect to
 12892                                  ;							seg ffff )
 12893                                  ;		If DOS has not moved high, tries to move DOS high.
 12894                                  ;		In the course of doing this, it will allocate all the HMA
 12895                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 12896                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 12897                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 12898                                  ;
 12899                                  ;	RETURNS : offset of free HMA in DI
 12900                                  ;		  BIOS_DATA, seg in DS
 12901                                  ;
 12902                                  ;--------------------------------------------------------------------------
 12903                                  
 12904                                  		; 17/10/2022
 12905                                  HMAPtr:
 12906 0000139F 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12907                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12908 000013A4 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12909                                  		;mov	di, ds:FreeHMAPtr
 12910 000013A8 83FFFF                  		cmp	di, 0FFFFh
 12911 000013AB 750F                    		jnz	short HMAPtr_retn
 12912 000013AD 803E[FB08]00            		cmp	byte [SysinitPresent], 0
 12913                                  		;cmp	ds:SysinitPresent, 0
 12914 000013B2 7408                    		jz	short HMAPtr_retn
 12915 000013B4 FF1E[F708]              		call	far [MoveDOSIntoHMA]
 12916                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 12917 000013B8 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12918                                  		;mov	di, ds:FreeHMAPtr
 12919                                  HMAPtr_retn:				
 12920 000013BC C3                      		retn
 12921                                  
 12922                                  ; =============== S U B	R O U T	I N E =======================================
 12923                                  
 12924                                  ; 16/10/2022
 12925                                  
 12926                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 12927                                  ; but go ahead and update direction flag, si, & di
 12928                                  
 12929                                  move_sector:
 12930                                  
 12931                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 12932                                  ; any segment to be a fault. Theoretically, this could be handled
 12933                                  ; by the fault handler and the behavior of an 8086 could be emulated
 12934                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 12935                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 12936                                  ; also handles the fault incorrectly in their ROM BIOS for real
 12937                                  ; mode. Their fault handler was only designed to deal with one
 12938                                  ; special case which occurred in a magazine benchmark, but didn't
 12939                                  ; handle the general case worth beans.
 12940                                  ;
 12941                                  ; Simply changing this code to do a byte loop would work okay but
 12942                                  ; would involve a general case performance hit. Therefore, we'll
 12943                                  ; check for either source or destination offsets being within one
 12944                                  ; sector of the end of their segments and only in that case fall
 12945                                  ; back to a byte move.
 12946                                  
 12947 000013BD FC                      		cld
 12948 000013BE 51                      		push	cx
 12949 000013BF B90001                  		mov	cx, 256
 12950 000013C2 81FE00FE                		cmp	si, 0FE00h
 12951 000013C6 770A                    		ja	short movsec_bytes
 12952 000013C8 81FF00FE                		cmp	di, 0FE00h
 12953 000013CC 7704                    		ja	short movsec_bytes
 12954 000013CE F3A5                    		rep movsw
 12955 000013D0 59                      		pop	cx
 12956 000013D1 C3                      		retn
 12957                                  ; ---------------------------------------------------------------------------
 12958                                  
 12959                                  movsec_bytes:				
 12960 000013D2 D1E1                    		shl	cx, 1
 12961 000013D4 F3A4                    		rep movsb
 12962 000013D6 59                      		pop	cx
 12963 000013D7 C3                      		retn
 12964                                  
 12965                                  ; =============== S U B	R O U T	I N E =======================================
 12966                                  
 12967                                  ; 16/10/2022
 12968                                  
 12969                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 12970                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 12971                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 12972                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 12973                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 12974                                  ; but we break down a request when we get an ecc or dma error into several
 12975                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 12976                                  ; number of sectors on a track on the medium, and the request would fail.
 12977                                  ;
 12978                                  ; input conditions:
 12979                                  ;	all registers set up for an int 13 request.
 12980                                  ;
 12981                                  ; output:
 12982                                  ;	dh - contains starting head number for request
 12983                                  ;	cx - contains starting sector and cylinder numbers
 12984                                  ;	(the above may or may not have been changed, and are 0-based)
 12985                                  ;	all other registers preserved.
 12986                                  
 12987                                  check_wrap:	
 12988 000013D8 50                      		push	ax
 12989 000013D9 53                      		push	bx
 12990 000013DA 06                      		push	es
 12991 000013DB 57                      		push	di
 12992 000013DC E86C00                  		call	find_bds	; get pointer to bds for drive in dl
 12993 000013DF 725E                    		jb	short no_wrap	; finished if DOS doesn't use it
 12994                                  		; 12/12/2022
 12995 000013E1 26F6452301              		test	byte [es:di+23h], 1
 12996                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 12997 000013E6 7457                    		jz	short no_wrap	; no wrapping for removable media
 12998 000013E8 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 12999 000013EC 89C8                    		mov	ax, cx
 13000 000013EE 83E03F                  		and	ax, 3Fh		; extract sector number
 13001 000013F1 39D8                    		cmp	ax, bx		; are we going to wrap?
 13002 000013F3 764A                    		jbe	short no_wrap
 13003 000013F5 F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 13004                                  
 13005                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 13006                                  ; last sector on that track.
 13007                                  
 13008 000013F7 08E4                    		or	ah, ah
 13009 000013F9 7503                    		jnz	short not_on_bound
 13010                                  		; 18/12/2022
 13011 000013FB 48                      		dec	ax ; *
 13012 000013FC 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 13013                                  					; if on	boundary
 13014                                  		;dec	al ; *		; also decrement # of head wraps
 13015                                  not_on_bound:				
 13016 000013FE 80E1C0                  		and	cl, 0C0h	; zero out sector #
 13017 00001401 08E1                    		or	cl, ah		; or in	new sector #
 13018 00001403 30E4                    		xor	ah, ah		; ax = # of head wraps
 13019 00001405 40                      		inc	ax
 13020 00001406 00F0                    		add	al, dh		; add in starting head #
 13021 00001408 80D400                  		adc	ah, 0		; catch	any carry
 13022                                  		; 02/09/2023
 13023 0000140B 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13024 0000140F 39D8                    		cmp	ax, bx
 13025                                  		;cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 13026                                  					; are we going to wrap around a	head?
 13027 00001411 7632                    		jbe	short no_wrap_head ; do	not lose new head number!!
 13028 00001413 52                      		push	dx		; preserve drive number and head number
 13029 00001414 31D2                    		xor	dx, dx
 13030                                  		;mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13031 00001416 F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 13032                                  
 13033                                  ; careful here! if new head # is 0, then we are on the last head.
 13034                                  
 13035 00001418 09D2                    		or	dx, dx
 13036 0000141A 7507                    		jnz	short no_head_bound
 13037 0000141C 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 13038                                  
 13039                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 13040                                  
 13041 0000141E 09C0                    		or	ax, ax
 13042 00001420 7401                    		jz	short no_head_bound
 13043 00001422 48                      		dec	ax		; reduce number	of cylinder wraps
 13044                                  no_head_bound:				
 13045 00001423 88D7                    		mov	bh, dl		; bh has new head number
 13046 00001425 5A                      		pop	dx		; restore drive number and head number
 13047 00001426 FECF                    		dec	bh		; get it 0-based
 13048 00001428 88FE                    		mov	dh, bh		; set up new head number in dh
 13049 0000142A 88CF                    		mov	bh, cl
 13050 0000142C 80E73F                  		and	bh, 3Fh		; preserve sector number
 13051 0000142F B306                    		mov	bl, 6
 13052 00001431 86CB                    		xchg	cl, bl
 13053 00001433 D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 13054 00001435 00C5                    		add	ch, al		; add in cylinder wrap
 13055 00001437 10E3                    		adc	bl, ah		; add in high byte
 13056 00001439 D2E3                    		shl	bl, cl		; move up to ms	end
 13057 0000143B 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 13058 0000143D 08F9                    		or	cl, bh		; or in	sector number
 13059                                  no_wrap:				
 13060 0000143F F8                      		clc
 13061 00001440 5F                      		pop	di
 13062 00001441 07                      		pop	es
 13063 00001442 5B                      		pop	bx
 13064 00001443 58                      		pop	ax
 13065 00001444 C3                      		retn
 13066                                  ; ---------------------------------------------------------------------------
 13067                                  
 13068                                  no_wrap_head:				
 13069 00001445 88C6                    		mov	dh, al		; do not lose new head number
 13070 00001447 FECE                    		dec	dh		; get it 0-based
 13071 00001449 EBF4                    		jmp	short no_wrap
 13072                                  
 13073                                  ; =============== S U B	R O U T	I N E =======================================
 13074                                  
 13075                                  ; 16/10/2022
 13076                                  
 13077                                  ; this is a special version of the bds lookup code which is
 13078                                  ; based on physical drives rather than the usual logical drives
 13079                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 13080                                  ; otherwise carry is clear
 13081                                  ;
 13082                                  ; guaranteed to trash no registers except es:di
 13083                                  
 13084                                  		; 19/10/2022
 13085                                  find_bds:	
 13086 0000144B C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 13087                                  fbds_1:					
 13088 0000144F 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 13089 00001453 7409                    		jz	short fdbs_2
 13090 00001455 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 13091                                  					; go to next bds
 13092 00001458 83FFFF                  		cmp	di, 0FFFFh
 13093 0000145B 75F2                    		jnz	short fbds_1
 13094 0000145D F9                      		stc
 13095                                  fdbs_2:					
 13096 0000145E C3                      		retn
 13097                                  
 13098                                  ; =============== S U B	R O U T	I N E =======================================
 13099                                  
 13100                                  ; 16/10/2022
 13101                                  		; 17/10/2022
 13102                                  doint:
 13103                                  		; 10/12/2022
 13104 0000145F 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13105                                  					; get physical drive number
 13106                                  		; 19/10/2022 - Temporary !
 13107                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 13108                                  		
 13109 00001462 30E4                    		xor	ah, ah
 13110 00001464 08C0                    		or	al, al
 13111 00001466 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 13112                                  		; 10/12/2022
 13113 00001468 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13114                                  					; get request code
 13115                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 13116 0000146B FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13117                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 13118 0000146E 9D                      		popf
 13119                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 13120                                  		; 17/10/2022
 13121 0000146F 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13122                                  		;;call	call_orig13	; call far 70h:797h
 13123                                  					; call far KERNEL_SEGMENT:call_orig13
 13124 00001474 9C                      		pushf
 13125                                  		; 10/12/2022
 13126 00001475 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13127                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 13128                                  dointdone:				
 13129 00001478 C3                      		retn
 13130                                  
 13131                                  ;----------------------------------------------------------------------------
 13132                                  
 13133                                  ; 16/10/2022
 13134                                  
 13135                                  ; this is the true int 13 handler. we parse the request to see if there is
 13136                                  ; a dma violation. if so, depending on the function, we:
 13137                                  ;   read/write break the request into three pieces and move the middle one
 13138                                  ;	       into our internal buffer.
 13139                                  ;
 13140                                  ;   format     copy the format table into the buffer
 13141                                  ;   verify     point the transfer address into the buffer
 13142                                  ;
 13143                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 13144                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 13145                                  ; the offending sector into the buffer below and do the i/o from there.
 13146                                  
 13147                                  ;struc INT13FRAME
 13148                                  ;.oldbp: resw
 13149                                  ;.oldax: resw 
 13150                                  ;.oldbx: resw
 13151                                  ;.oldcx: resw
 13152                                  ;.olddx: resw
 13153                                  ;.oldds: resw	; now we save caller's ds, too
 13154                                  ;.olddd: resd
 13155                                  ;.oldf:	resw
 13156                                  ;end struc
 13157                                  
 13158                                  ;----------------------------------------------------------------------------
 13159                                  
 13160                                  ;   entry conditions:
 13161                                  ;	ah = function
 13162                                  ;	al = number of sectors
 13163                                  ;	es:bx = dma address
 13164                                  ;	cx = packed track and sector
 13165                                  ;	dx = head and drive
 13166                                  ;   output conditions:
 13167                                  ;	no dma violation.
 13168                                  
 13169                                  ;	use extreme caution when working with this code. In general,
 13170                                  ;	  all registers are hot at all times.
 13171                                  ;
 13172                                  ;	question:  does this code handle cases where dma errors
 13173                                  ;	  occur during ecc retries, and where ecc errors occur during
 13174                                  ;	  dma breakdowns???? Hmmmmm.
 13175                                  
 13176                                  ;----------------------------------------------------------------------------
 13177                                  
 13178                                  ; ---------------------------------------------------------------------------
 13179                                  
 13180 00001479 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 13181                                  
 13182                                  ; 17/10/2022
 13183                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 13184                                  ; 09/12/2022
 13185                                  DTYPEARRAY equ dtype_array
 13186                                  
 13187                                  ; ---------------------------------------------------------------------------
 13188                                  
 13189                                  ; stick some special stuff out of mainline
 13190                                  
 13191                                  ; we know we're doing a format command. if we have changeline
 13192                                  ; support, then flag some special changed stuff and set changed
 13193                                  ; by format bit for all logical drives using this physical drive
 13194                                  
 13195                                  format_special_stuff:			
 13196 0000147D 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 13197 00001482 7459                    		jz	short format_special_stuff_done ; brif not
 13198 00001484 53                      		push	bx
 13199 00001485 BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 13200 00001488 E83004                  		call	set_changed_dl	; indicate that media changed by format
 13201 0000148B 5B                      		pop	bx
 13202 0000148C EB4F                    		jmp	short format_special_stuff_done
 13203                                  ; ---------------------------------------------------------------------------
 13204                                  
 13205                                  ; 16/10/2022
 13206                                  
 13207                                  ; we know we've got ec35's on the system. Now see if we're doing
 13208                                  ; a floppy. If so, create a mask and see if this particular
 13209                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 13210                                  
 13211                                  		; 19/10/2022
 13212                                  ec35_special_stuff:			
 13213 0000148E 84D2                    		test	dl, dl		; floppy or hard disk?
 13214 00001490 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 13215 00001492 50                      		push	ax		; see if this PARTICULAR drive is ec35
 13216 00001493 51                      		push	cx
 13217 00001494 88D1                    		mov	cl, dl		; turn drive number into bit map
 13218 00001496 B001                    		mov	al, 1		; assume drive 0
 13219 00001498 D2E0                    		shl	al, cl		; shift	over correct number of times
 13220 0000149A 8406[3105]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 13221 0000149E 59                      		pop	cx
 13222 0000149F 58                      		pop	ax
 13223 000014A0 7442                    		jz	short ec35_special_stuff_done
 13224                                  					; done if this floppy is not an	ec35
 13225 000014A2 53                      		push	bx		; free up a far	pointer	(es:bx)
 13226 000014A3 06                      		push	es
 13227                                  		; 17/10/2022
 13228 000014A4 2EC41E[7914]            		les	bx, [cs:DTYPEARRAY]
 13229                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 13230                                  					; 0070h:3A65h =	2C7h:14F5h
 13231 000014A9 00D3                    		add	bl, dl
 13232 000014AB 80D700                  		adc	bh, 0		; find entry for this drive
 13233 000014AE 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 13234                                  					; (360k	disk in	360k drive,
 13235                                  					; no double-stepping, 250 kbs transfer rate)
 13236 000014B2 07                      		pop	es
 13237 000014B3 5B                      		pop	bx
 13238 000014B4 EB2E                    		jmp	short ec35_special_stuff_done
 13239                                  ; ---------------------------------------------------------------------------
 13240                                  
 13241                                  ; 16/10/2022
 13242                                  
 13243                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 13244                                  ; this function does not reset the common buses after the execution.
 13245                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 13246                                  ; will issue ah=1 (read status) call to reset the buses.
 13247                                  
 13248                                  ps2_special_stuff:			
 13249 000014B6 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 13250                                  					; read driver parm ?
 13251 000014BB 7407                    		jz	short ps2_30_problem
 13252 000014BD 803E[1E00]15            		cmp	byte [prevoper], 15h
 13253                                  					; apparently function 15h fails, too
 13254 000014C2 752D                    		jnz	short ps2_special_stuff_done
 13255                                  ps2_30_problem:				
 13256 000014C4 50                      		push	ax
 13257 000014C5 B401                    		mov	ah, 1
 13258                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 13259                                  		; 17/10/2022
 13260 000014C7 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13261                                  		;call	call_orig13	; call far 70:797h
 13262                                  					; call far KERNEL_SEGMENT:call_orig13
 13263 000014CC 58                      		pop	ax
 13264 000014CD EB22                    		jmp	short ps2_special_stuff_done
 13265                                  ; ---------------------------------------------------------------------------
 13266                                  
 13267                                  ; 17/10/2022
 13268                                  ; 16/10/2022
 13269                                  
 13270                                  ; here is the actual int13 handler
 13271                                  
 13272                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 13273                                  
 13274                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 13275                                  ; vectoring up here from Bios_Data
 13276                                  
 13277                                  		; 19/10/2022
 13278 000014CF 1E                      		push	ds		; save caller's ds register first thing
 13279                                  		;;mov	ds, word [cs:0030h]
 13280                                  					; and set up our own ds -> Bios_Data
 13281 000014D0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13282                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13283                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13284                                  
 13285                                  ; let the operation proceed. if there is a dma violation, then we do things
 13286                                  
 13287 000014D5 A3[1E00]                		mov	[prevoper], ax	; save request
 13288 000014D8 80FC05                  		cmp	ah, 5		; romformat
 13289 000014DB 74A0                    		jz	short format_special_stuff
 13290                                  					; go do special stuff for format
 13291                                   format_special_stuff_done:		
 13292 000014DD 803E[3105]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 13293 000014E2 75AA                    		jnz	short ec35_special_stuff
 13294                                  					; go handle it out of line if so
 13295                                  ec35_special_stuff_done:
 13296                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h		
 13297 000014E4 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13298                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13299                                  		
 13300 000014E9 9C                      		pushf			; save result flags
 13301                                  		
 13302 000014EA 803E[3E06]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 13303                                  					; mdl_ps2_30
 13304 000014EF 74C5                    		jz	short ps2_special_stuff
 13305                                  					; exit mainline to address special
 13306                                  ps2_special_stuff_done:			; ps2/30 problem if so		
 13307 000014F1 9D                      		popf
 13308 000014F2 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 13309                                  ret_from_i13:				
 13310 000014F4 1F                      		pop	ds
 13311 000014F5 CA0200                  		retf	2		; restore ds &	iret w/flags
 13312                                  ; ---------------------------------------------------------------------------
 13313                                  
 13314                                  ; most of our code exits through here. If carry isn't set, then
 13315                                  ; just do a simple exit. Else doublecheck that we aren't getting
 13316                                  ; a changeline error.
 13317                                  
 13318                                  i13ret_ck_chglinerr:			
 13319 000014F8 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 13320                                  i13_ret_error:				
 13321 000014FA 80FC06                  		cmp	ah, 6		; did i	see a change event?
 13322 000014FD 7513                    		jnz	short int13b	; skip if wrong	error
 13323 000014FF 08D2                    		or	dl, dl		; is this for the hard disk?
 13324 00001501 780F                    		js	short int13b	; yes, ignore
 13325 00001503 803E[7700]00            		cmp	byte [fhave96], 0
 13326 00001508 7408                    		jz	short int13b	; just in case ROM returned this
 13327                                  					; error	even though it told us it
 13328                                  					; never	would
 13329 0000150A 53                      		push	bx
 13330 0000150B BB4000                  		mov	bx, 40h		; fchanged
 13331 0000150E E8AA03                  		call	set_changed_dl
 13332 00001511 5B                      		pop	bx
 13333                                  int13b:					
 13334 00001512 F9                      		stc			; now return the error
 13335 00001513 EBDF                    		jmp	short ret_from_i13
 13336                                  ; ---------------------------------------------------------------------------
 13337                                  
 13338                                  ; some kind of error occurred. see if it is dma violation
 13339                                  
 13340                                  goterr13:				
 13341 00001515 80FC09                  		cmp	ah, 9		; dma error?
 13342 00001518 747C                    		jz	short gotdmaerr
 13343                                  goterr13_xxxx:				
 13344 0000151A 80FC11                  		cmp	ah, 11h		; ecc error?
 13345 0000151D 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 13346 0000151F 803E[3806]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 13347 00001524 74D4                    		jz	short i13_ret_error
 13348                                  
 13349 00001526 803E[1F00]02            		cmp	byte [prevoper+1], 2
 13350                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 13351                                  					; (2 = romread)
 13352                                  					; ECC correction only applies to reads
 13353 0000152B 75CD                    		jnz	short i13_ret_error
 13354                                  
 13355 0000152D 30E4                    		xor	ah, ah
 13356                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 13357                                  		; 17/10/2022
 13358 0000152F 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13359                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13360                                  					; call far 70:797h
 13361 00001534 A1[1E00]                		mov	ax, [prevoper]
 13362 00001537 30E4                    		xor	ah, ah		; return code =	no error
 13363 00001539 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 13364 0000153B 74B7                    		jz	short ret_from_i13 ; return with carry clear
 13365 0000153D 53                      		push	bx
 13366 0000153E 51                      		push	cx
 13367 0000153F 52                      		push	dx
 13368 00001540 A2[2000]                		mov	[number_of_sec], al
 13369                                  loop_ecc:				
 13370 00001543 B80102                  		mov	ax, 201h	; read one sector
 13371                                  
 13372                                  ; we do reads one sector at a time. this ensures that we will eventually
 13373                                  ; finish the request since ecc errors on one sector do read in that sector.
 13374                                  ;
 13375                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 13376                                  ; that attempt to read more sectors than are available on a particular
 13377                                  ; track.
 13378                                  ;
 13379                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 13380                                  ; this request.
 13381                                  ;
 13382                                  ; at this point, all registers are set up for the call to orig13, except
 13383                                  ; that there may be a starting sector number that is bigger than the number
 13384                                  ; of sectors on a track.
 13385                                  ;
 13386 00001546 E88FFE                  		call	check_wrap	; get correct parameters for int 13
 13387                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 13388                                  		; 17/10/2022
 13389 00001549 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13390                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13391 0000154E 730C                    		jnb	short ok11_op
 13392 00001550 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 13393 00001553 741B                    		jz	short handle_dma_during_ecc
 13394 00001555 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 13395 00001558 7510                    		jnz	short ok11_exit_err
 13396                                  		; 10/12/2022
 13397                                  		; xor ax ax -> ah = 0
 13398                                  		;mov	ah, 0		; ecc error. reset the system again.
 13399 0000155A 31C0                    		xor	ax, ax		; clear	the error code so that if this
 13400                                  					; was the last sector, no error	code
 13401                                  					; will be returned for the corrected
 13402                                  					; read.	(clear carry too.)
 13403                                  ok11_op:				
 13404 0000155C FE0E[2000]              		dec	byte [number_of_sec]
 13405 00001560 7409                    		jz	short ok11_exit	; all done?
 13406 00001562 FEC1                    		inc	cl		; advance sector number
 13407                                  					; add 200h to address
 13408 00001564 FEC7                    		inc	bh
 13409 00001566 FEC7                    		inc	bh
 13410 00001568 EBD9                    		jmp	short loop_ecc
 13411                                  ; ---------------------------------------------------------------------------
 13412                                  
 13413                                  ; locate error returns centrally
 13414                                  
 13415                                  ok11_exit_err:				
 13416 0000156A F9                      		stc			; set carry bit again.
 13417                                  ok11_exit:				
 13418 0000156B 5A                      		pop	dx
 13419 0000156C 59                      		pop	cx
 13420 0000156D 5B                      		pop	bx
 13421 0000156E EB88                    		jmp	short i13ret_ck_chglinerr
 13422                                  ; ---------------------------------------------------------------------------
 13423                                  
 13424                                  ; do the single sector read again, this time into our temporary
 13425                                  ; buffer, which is guaranteed not to have a DMA error, then
 13426                                  ; move the data to its proper location and proceed
 13427                                  
 13428                                  handle_dma_during_ecc:			
 13429 00001570 06                      		push	es
 13430 00001571 53                      		push	bx
 13431 00001572 BB[4E01]                		mov	bx, disksector
 13432 00001575 1E                      		push	ds
 13433 00001576 07                      		pop	es		; point es:bx to buffer
 13434 00001577 B80102                  		mov	ax, 201h	; read one sector
 13435                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 13436                                  		; 17/10/2022
 13437 0000157A 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13438                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13439 0000157F 5B                      		pop	bx
 13440 00001580 07                      		pop	es
 13441 00001581 7305                    		jnb	short handle_dma_during_ecc_noerr
 13442 00001583 80FC11                  		cmp	ah, 11h
 13443 00001586 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 13444                                  
 13445                                  ; now we're kosher. Copy the data to where it belongs and resume
 13446                                  ; the ECC looping code.
 13447                                  
 13448                                  handle_dma_during_ecc_noerr:		
 13449 00001588 56                      		push	si
 13450 00001589 57                      		push	di
 13451 0000158A 89DF                    		mov	di, bx
 13452 0000158C BE[4E01]                		mov	si, disksector
 13453 0000158F E82BFE                  		call	move_sector
 13454 00001592 5F                      		pop	di
 13455 00001593 5E                      		pop	si
 13456 00001594 EBC6                    		jmp	short ok11_op
 13457                                  ; ---------------------------------------------------------------------------
 13458                                  
 13459                                  ; we truly have a dma violation. restore register ax and retry the
 13460                                  ; operation as best we can.
 13461                                  
 13462                                  gotdmaerr:				
 13463 00001596 A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 13464 00001599 FB                      		sti
 13465 0000159A 80FC02                  		cmp	ah, 2		; romread
 13466 0000159D 723B                    		jb	short i13_done_dmaerr
 13467                                  					; just pass dma error thru for
 13468                                  					; functions we don't handle
 13469 0000159F 80FC04                  		cmp	ah, 4		; romverify
 13470 000015A2 743C                    		jz	short intverify
 13471 000015A4 80FC05                  		cmp	ah, 5		; romformat
 13472 000015A7 7448                    		jz	short intformat
 13473 000015A9 772F                    		ja	short i13_done_dmaerr
 13474                                  
 13475                                  ; we are doing a read/write call. check for dma problems
 13476                                  
 13477                                  ;	******** set up stack frame here!!! ********
 13478                                  
 13479 000015AB 52                      		push	dx
 13480 000015AC 51                      		push	cx
 13481 000015AD 53                      		push	bx
 13482 000015AE 50                      		push	ax
 13483 000015AF 55                      		push	bp
 13484 000015B0 89E5                    		mov	bp, sp
 13485 000015B2 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 13486 000015B4 D1E2                    		shl	dx, 1
 13487 000015B6 D1E2                    		shl	dx, 1
 13488 000015B8 D1E2                    		shl	dx, 1
 13489 000015BA D1E2                    		shl	dx, 1		; segment converted to absolute	address
 13490 000015BC 01DA                    		add	dx, bx		; combine with offset
 13491 000015BE 81C2FF01                		add	dx, 511		; simulate a transfer
 13492                                  
 13493                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 13494                                  ; we skip the first transfer and perform the remaining buffering and transfer
 13495                                  
 13496 000015C2 7303                    		jnb	short no_skip_first
 13497 000015C4 E98300                  		jmp	bufferx		; restore dh=head & do buffer
 13498                                  ; ---------------------------------------------------------------------------
 13499                                  
 13500                                  no_skip_first:				
 13501 000015C7 D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 13502 000015C9 B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 13503 000015CB 28F4                    		sub	ah, dh
 13504                                  
 13505                                  ; ah is now the number of sectors that we can successfully write in this
 13506                                  ; segment. if this number is above or equal to the requested number, then we
 13507                                  ; continue the operation as normal. otherwise, we break it into pieces.
 13508                                  ;
 13509                                  ; wait a sec. this is goofy. the whole reason we got here in the
 13510                                  ; first place is because we got a dma error. so it's impossible
 13511                                  ; for the whole block to fit, unless the dma error was returned
 13512                                  ; in error.
 13513                                  
 13514 000015CD 38C4                    		cmp	ah, al		; can we fit it	in?
 13515 000015CF 7236                    		jb	short doblock	; no, perform blocking.
 13516                                  
 13517                                  ; yes, the request fits. let it happen.
 13518                                  
 13519 000015D1 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13520                                  					; set up head number
 13521 000015D4 E888FE                  		call	doint
 13522 000015D7 E9D900                  		jmp	bad13		; and return from this place
 13523                                  ; ---------------------------------------------------------------------------
 13524                                  
 13525                                  i13_done_dmaerr:			
 13526 000015DA B409                    		mov	ah, 9		; pass dma error thru to caller
 13527 000015DC F9                      		stc
 13528 000015DD E914FF                  		jmp	ret_from_i13	; return with error,
 13529                                  					; we know it's not a changeline error
 13530                                  ; ---------------------------------------------------------------------------
 13531                                  
 13532                                  ; verify the given sectors. place the buffer pointer into our space.
 13533                                  
 13534                                  intverify:				
 13535 000015E0 06                      		push	es		; save caller's dma address
 13536 000015E1 53                      		push	bx
 13537 000015E2 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 13538 000015E3 07                      		pop	es
 13539                                  dosimple:				
 13540 000015E4 BB[4E01]                		mov	bx, disksector
 13541                                  					; do the i/o from Bios_Data:disksector
 13542                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 13543                                  		; 17/10/2022
 13544 000015E7 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13545                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13546 000015EC 5B                      		pop	bx
 13547 000015ED 07                      		pop	es
 13548 000015EE E907FF                  		jmp	i13ret_ck_chglinerr
 13549                                  ; ---------------------------------------------------------------------------
 13550                                  
 13551                                  ; format operation. copy the parameter table into Bios_Data:disksector
 13552                                  
 13553                                  intformat:				
 13554 000015F1 06                      		push	es
 13555 000015F2 53                      		push	bx
 13556 000015F3 56                      		push	si
 13557 000015F4 57                      		push	di
 13558 000015F5 1E                      		push	ds
 13559                                  
 13560                                  ; point ds to the caller's dma buffer, es to Bios_Data
 13561                                  ; in other words, swap (ds, es)
 13562                                  
 13563 000015F6 06                      		push	es
 13564 000015F7 1E                      		push	ds
 13565 000015F8 07                      		pop	es
 13566 000015F9 1F                      		pop	ds
 13567 000015FA 89DE                    		mov	si, bx
 13568 000015FC BF[4E01]                		mov	di, disksector
 13569 000015FF E8BBFD                  		call	move_sector	; user's data into Bios_Data:disksector
 13570 00001602 1F                      		pop	ds
 13571 00001603 5F                      		pop	di
 13572 00001604 5E                      		pop	si		; do the i/o from
 13573 00001605 EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 13574                                  ; ---------------------------------------------------------------------------
 13575                                  
 13576                                  ; we can't fit the request into the entire block. perform the operation on
 13577                                  ; the first block.
 13578                                  ;
 13579                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 13580                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 13581                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 13582                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 13583                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 13584                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 13585                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 13586                                  ; doblock will handle the first block of requested sectors within the
 13587                                  ; boundary of this safe value.
 13588                                  
 13589                                  doblock:
 13590                                  
 13591                                  ; try to get the # of sectors/track from bds via rom drive number.
 13592                                  ; for any mini disks installed, here we have to pray that they have the
 13593                                  ; same # of sector/track as the main dos partition disk drive.
 13594                                  				
 13595 00001607 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 13596                                  					; get head #, drive #
 13597 0000160A 51                      		push	cx
 13598 0000160B 06                      		push	es
 13599 0000160C 57                      		push	di		; ah - # of sectors before dma boundary
 13600                                  					; al - requested # of sectors for i/o.
 13601 0000160D E83BFE                  		call	find_bds
 13602 00001610 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13603                                  		; 12/12/2022
 13604 00001614 26F6452301              		test	byte [es:di+23h], 1
 13605                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13606 00001619 5F                      		pop	di
 13607 0000161A 07                      		pop	es
 13608 0000161B 88E0                    		mov	al, ah		; set al=ah for	floppies
 13609 0000161D 7404                    		jz	short doblockflop ; they are track by track operation
 13610 0000161F B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 13611 00001621 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 13612                                  doblockflop:				
 13613 00001623 59                      		pop	cx
 13614                                  doblockcontinue:			
 13615 00001624 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 13616 00001626 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 13617 00001628 50                      		push	ax
 13618 00001629 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 13619 0000162B EB03                    		jmp	short doblockdoint
 13620                                  ; ---------------------------------------------------------------------------
 13621                                  
 13622                                  doblocklast:				
 13623 0000162D 88C4                    		mov	ah, al
 13624 0000162F 50                      		push	ax
 13625                                  doblockdoint:				; let ah = al =	# of sectors for this shot	
 13626 00001630 E82CFE                  		call	doint
 13627 00001633 727E                    		jb	short bad13	; something happened, bye!
 13628 00001635 58                      		pop	ax
 13629 00001636 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 13630                                  					; decrement by the successful operation
 13631 00001639 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 13632 0000163B 00E7                    		add	bh, ah		; advance dma addres
 13633 0000163D 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 13634 0000163F 38C4                    		cmp	ah, al		; check	the previous value
 13635 00001641 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 13636                                  					; then we are done already.
 13637 00001643 28E0                    		sub	al, ah		; otherwise,
 13638                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 13639 00001645 E890FD                  		call	check_wrap	; get new cx, dh for the next operation.
 13640 00001648 EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 13641                                  ; ---------------------------------------------------------------------------
 13642                                  
 13643                                  bufferx:				
 13644 0000164A 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13645                                  					; set up head number
 13646                                  buffer:					
 13647 0000164D 53                      		push	bx
 13648 0000164E 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13649 00001651 80FC03                  		cmp	ah, 3		; romwrite
 13650 00001654 7525                    		jnz	short doread	;
 13651                                  					
 13652                                  ; copy the offending sector into local buffer
 13653                                  
 13654 00001656 06                      		push	es
 13655 00001657 1E                      		push	ds
 13656 00001658 56                      		push	si
 13657 00001659 57                      		push	di
 13658 0000165A 1E                      		push	ds		; exchange segment registers
 13659 0000165B 06                      		push	es
 13660 0000165C 1F                      		pop	ds
 13661 0000165D 07                      		pop	es
 13662 0000165E BF[4E01]                		mov	di, disksector	; where to move
 13663 00001661 57                      		push	di		; save it
 13664 00001662 89DE                    		mov	si, bx		; source
 13665 00001664 E856FD                  		call	move_sector	; move sector into local buffer
 13666 00001667 5B                      		pop	bx		; new transfer address
 13667                                  					; (es:bx = Bios_Data:diskbuffer)
 13668 00001668 5F                      		pop	di		; restore caller's di & si
 13669 00001669 5E                      		pop	si
 13670 0000166A 1F                      		pop	ds		; restore Bios_Data
 13671                                  
 13672                                  ; see if we are wrapping around a track or head
 13673                                  
 13674 0000166B B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 13675                                  					; get drive number
 13676 0000166D 8A5608                  		mov	dl, [bp+8]
 13677 00001670 E865FD                  		call	check_wrap	; sets up registers if wrap-around
 13678                                  					;
 13679                                  					; ah is	function
 13680                                  					; al is	1 for single sector transfer
 13681                                  					; es:bx	is local transfer addres
 13682                                  					; cx is	track/sector number
 13683                                  					; dx is	head/drive number
 13684                                  					; si,di	unchanged
 13685 00001673 E8E9FD                  		call	doint
 13686 00001676 07                      		pop	es		; restore caller's dma segment
 13687 00001677 723A                    		jb	short bad13	; go clean up
 13688 00001679 EB22                    		jmp	short dotail
 13689                                  ; ---------------------------------------------------------------------------
 13690                                  
 13691                                  ; reading a sector. do int first, then move things around
 13692                                  
 13693                                  doread:					
 13694 0000167B 06                      		push	es
 13695 0000167C 53                      		push	bx
 13696 0000167D 1E                      		push	ds		; es = Bios_Code
 13697 0000167E 07                      		pop	es
 13698 0000167F BB[4E01]                		mov	bx, disksector
 13699 00001682 B001                    		mov	al, 1
 13700 00001684 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13701                                  					; get drive number
 13702 00001687 E84EFD                  		call	check_wrap	;
 13703                                  					; ah = function
 13704                                  					; al = 1 for single sector
 13705                                  					; es:bx	points to local	buffer
 13706                                  					; cx, dx are track/sector, head/drive
 13707 0000168A E8D2FD                  		call	doint
 13708 0000168D 5B                      		pop	bx
 13709 0000168E 07                      		pop	es
 13710 0000168F 7222                    		jb	short bad13
 13711 00001691 56                      		push	si
 13712 00001692 57                      		push	di
 13713 00001693 89DF                    		mov	di, bx
 13714 00001695 BE[4E01]                		mov	si, disksector
 13715 00001698 E822FD                  		call	move_sector
 13716 0000169B 5F                      		pop	di
 13717 0000169C 5E                      		pop	si
 13718                                  
 13719                                  ; note the fact that we've done 1 more sector
 13720                                  
 13721                                  dotail:					
 13722 0000169D 5B                      		pop	bx		; retrieve new dma area
 13723 0000169E 80C702                  		add	bh, 2		; advance over sector
 13724 000016A1 41                      		inc	cx
 13725 000016A2 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 13726 000016A5 F8                      		clc
 13727 000016A6 FEC8                    		dec	al
 13728 000016A8 7409                    		jz	short bad13	; no more i/o
 13729                                  
 13730                                  ; see if we wrap around a track or head boundary with starting sector
 13731                                  ; we already have the correct head number to pass to check_wrap
 13732                                  
 13733 000016AA 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13734 000016AD E828FD                  		call	check_wrap
 13735 000016B0 E8ACFD                  		call	doint
 13736                                  
 13737                                  ; we are done. ax has the final code; we throw away what we got before
 13738                                  
 13739                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 13740                                  ;	   or we've finished. If carry is set now, our only
 13741                                  ;	   hope for salvation is that it was a read operation
 13742                                  ;	   and the error code is ECC error. In that case, we'll
 13743                                  ;	   just pop the registers and go do the old ECC thing.
 13744                                  ;	   When the DMA error that got us here in the first
 13745                                  ;	   place occurs, it'll handle it.
 13746                                  
 13747                                  bad13:					
 13748 000016B3 89EC                    		mov	sp, bp
 13749 000016B5 5D                      		pop	bp
 13750 000016B6 5B                      		pop	bx
 13751 000016B7 5B                      		pop	bx
 13752 000016B8 59                      		pop	cx
 13753 000016B9 5A                      		pop	dx
 13754 000016BA 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 13755 000016BC E935FE                  		jmp	ret_from_i13	; non-error exit
 13756                                  ; ---------------------------------------------------------------------------
 13757                                  
 13758                                  xgoterr13_xxxx:				
 13759 000016BF E958FE                  		jmp	goterr13_xxxx
 13760                                  
 13761                                  ; ---------------------------------------------------------------------------
 13762                                  		; 10/12/2022
 13763                                  		;db 	0
 13764                                  ; ---------------------------------------------------------------------------
 13765                                  
 13766                                  ;Bios_Code ends
 13767                                  
 13768                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13769                                  
 13770                                  ;-----------------------------------------------------------------------------
 13771                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 13772                                  ;-----------------------------------------------------------------------------
 13773                                  ; 17/03/2019 - Retro DOS v4.0
 13774                                  
 13775                                  		; 19/10/2022
 13776                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 13777 000016C2 8A26[7500]              		mov	ah, [drvmax]
 13778 000016C6 BF[8706]                		mov	di, dskdrvs
 13779 000016C9 1E                      		push	ds		; pass result in es:di
 13780 000016CA 07                      		pop	es
 13781 000016CB E9EAEE                  		jmp	SetPtrSav
 13782                                  
 13783                                  ; =============== S U B	R O U T	I N E =======================================
 13784                                  
 13785                                  ;---------------------------------------------------------------------------
 13786                                  ; install_bds installs a bds at location es:di into the current linked list of
 13787                                  ; bds maintained by this device driver. it places the bds at the end of the
 13788                                  ; list. Trashes (at least) ax, bx, di, si
 13789                                  ;---------------------------------------------------------------------------
 13790                                  
 13791                                  install_bds:		
 13792 000016CE 1E                      		push	ds		; save Bios_Data segment
 13793 000016CF BE[1901]                		mov	si, start_bds	; beginning of chain
 13794                                  
 13795                                  		; ds:si now points to link to first bds
 13796                                  		; assume bds list is non-empty
 13797                                  loop_next_bds:				
 13798 000016D2 C534                    		lds	si, [si]	; [si+BDS.link]
 13799                                  					; fetch	next bds
 13800 000016D4 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 13801 000016D8 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 13802                                  					; drive	with new one?
 13803 000016DB 7518                    		jnz	short next_bds
 13804 000016DD B310                    		mov	bl, 10h		; fi_am_mult
 13805 000016DF 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13806                                  					; set both of them to i_am_mult	if so
 13807 000016E3 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 13808 000016E6 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 13809                                  					; we don't own it
 13810 000016EB 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 13811                                  					; determine if changeline available
 13812 000016EE 80E302                  		and	bl, 2		; fchangeline
 13813 000016F1 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13814                                  next_bds:				
 13815                                  		; 02/09/2023 (PCDOS 7.1)
 13816 000016F5 B8FFFF                  		mov	ax, 0FFFFh	; -1
 13817 000016F8 3904                    		cmp	[si], ax	; [si+BDS.link],-1
 13818                                  		;cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 13819                                  					; are we at end	of list?
 13820 000016FA 75D6                    		jnz	short loop_next_bds
 13821 000016FC 8C4402                  		mov	[si+2], es	; [si+BDS.link+2],es
 13822                                  					; install bds
 13823 000016FF 893C                    		mov	[si], di
 13824 00001701 268905                  		mov	[es:di], ax	; [es:di+BDS.link],-1
 13825                                  		;mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 13826                                  					; set next pointer to null
 13827 00001704 1F                      		pop	ds
 13828                                  
 13829                                  ; 16/10/2022 (MSDOS 6.0 Code)
 13830                                  ;
 13831                                  ; **** If the new drive has a higher EOT value, we must alter the
 13832                                  ;      'eot' variable appropriately.
 13833                                  ;
 13834                                  ;		; 01/06/2019
 13835                                  ;		;mov	al,[es:di+52]
 13836                                  ;		mov	al,[es:di+BDS.rsecpertrack]
 13837                                  ;
 13838                                  ;		cmp	al,[eot]
 13839                                  ;		jbe	short _eot_ok
 13840                                  ;		mov	[eot],al
 13841                                  
 13842 00001705 C3                      		retn
 13843                                  
 13844                                  ; ---------------------------------------------------------------------------
 13845                                  
 13846                                  ; 17/10/2022
 13847                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 13848                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 13849                                  ; 09/12/2022
 13850                                  DRVLET equ drvlet
 13851                                  SNGMSG equ sngmsg
 13852                                  
 13853                                  ; 16/10/2022
 13854                                  
 13855                                  ;---------------------------------------------------------------------------
 13856                                  ;  ask to swap the disk in drive a:
 13857                                  ;	es:di -> bds
 13858                                  ;	ds -> Bios_Data
 13859                                  ;---------------------------------------------------------------------------
 13860                                  
 13861                                  		; 19/10/2022
 13862 00001706 F606[CE08]01            swpdsk:		test	byte [IsWin386], 1			
 13863                                  		;test	ds:IsWin386, 1	; Is win386 present?
 13864 0000170B 7405                    		jz	short no_win386	; no, skip SetFocus
 13865                                  		
 13866                                  		; set focus to the correct VM
 13867                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 13868                                  		; 17/10/2022
 13869 0000170D 9A[CF08]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 13870                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 13871                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 13872                                  no_win386:				
 13873 00001712 51                      		push	cx
 13874 00001713 52                      		push	dx
 13875 00001714 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 13876                                  					; get the drive	letter
 13877                                  
 13878                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 13879                                  ;           then existing dsk is drive A & vice versa
 13880                                  
 13881 00001718 88D6                    		mov	dh, dl
 13882 0000171A 80F601                  		xor	dh, 1
 13883 0000171D 29C9                    		sub	cx, cx		; nobody has handled swap disk
 13884 0000171F B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 13885                                  					; broad	cast code for swap disk
 13886                                  					; Broadcast it
 13887 00001722 CD2F                    		int	2Fh	
 13888 00001724 41                      		inc	cx		; cx == -1 ?
 13889 00001725 741E                    		jz	short swpdsk9	; somebody has handled it
 13890                                  
 13891                                  ; using a different drive in a one drive system so request the user change disks
 13892                                  
 13893 00001727 80C241                  		add	dl, 'A'
 13894                                  		; 17/10/2022
 13895 0000172A 2E8816[6417]            		mov	[cs:DRVLET], dl
 13896                                  		; 16/10/2022
 13897                                  		;;mov	byte [cs:drvlet], dl
 13898                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 13899                                  					; 0070h:3D54h =	2C7h:17E4h
 13900 0000172F BE[4817]                		mov	si, SNGMSG
 13901                                  		;mov	si, 17C8h	; sngmsg
 13902                                  					; 0070h:3D38h =	2C7h:17C8h
 13903 00001732 53                      		push	bx
 13904 00001733 2E                      		cs
 13905 00001734 AC                      		lodsb			; get the next character of the message
 13906                                  		;lods	byte ptr cs:[si]
 13907                                  wrmsg_loop:				
 13908 00001735 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 13909                                  					; AL = character to display
 13910 00001737 2E                      		cs
 13911 00001738 AC                      		lodsb
 13912                                  		;lods	byte ptr cs:[si] ; cs lodsb
 13913                                  					; get the next character of the	message
 13914 00001739 08C0                    		or	al, al
 13915 0000173B 75F8                    		jnz	short wrmsg_loop
 13916 0000173D E8C7EA                  		call	con_flush	; flush out keyboard queue
 13917                                  					; call rom-bios
 13918 00001740 30E4                    		xor	ah, ah
 13919 00001742 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 13920                                  					; Return: AH = scan code, AL = character
 13921 00001744 5B                      		pop	bx
 13922                                  swpdsk9:				
 13923 00001745 5A                      		pop	dx
 13924 00001746 59                      		pop	cx
 13925 00001747 C3                      		retn
 13926                                  
 13927                                  ; ---------------------------------------------------------------------------
 13928                                  
 13929                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13930                                  
 13931                                  ;--------------------------------------------------------
 13932                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 13933                                  ;--------------------------------------------------------
 13934                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 13935                                  ;--------------------------------------------------------
 13936                                  ; 17/03/2019 - Retro DOS v4.0
 13937                                  
 13938                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 13939 00001748 0D0A                    sngmsg:		db 0Dh,0Ah
 13940 0000174A 496E73657274206469-     		db 'Insert diskette for drive '
 13940 00001753 736B6574746520666F-
 13940 0000175C 7220647269766520   
 13941                                  
 13942                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 13943 00001764 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 13943 0000176D 65737320616E79206B-
 13943 00001776 6579207768656E2072-
 13943 0000177F 656164790D0A       
 13944 00001785 0A00                    		db 0Ah,0
 13945                                  
 13946                                  ; =============== S U B	R O U T	I N E =======================================
 13947                                  
 13948                                  ;---------------------------------------------------------------------------
 13949                                  ; input : es:di points to current bds for drive.
 13950                                  ; return : zero set if no open files
 13951                                  ;	   zero reset if open files
 13952                                  ;---------------------------------------------------------------------------
 13953                                  
 13954                                  chkopcnt:		
 13955 00001787 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 13956 0000178C C3                      		retn
 13957                                  
 13958                                  ; =============== S U B	R O U T	I N E =======================================
 13959                                  
 13960                                  ;---------------------------------------------------------------------------
 13961                                  ; at media check time, we need to really get down and check what the change is.
 13962                                  ; this is guaranteed to be expensive.
 13963                                  ;
 13964                                  ;	es:di -> bds, ds -> Bios_Data
 13965                                  ;---------------------------------------------------------------------------
 13966                                  
 13967                                  mediacheck:	
 13968 0000178D E8A9F0                  		call	checksingle	; make sure correct disk is in place
 13969 00001790 31F6                    		xor	si, si
 13970 00001792 E84D01                  		call	haschange
 13971 00001795 742F                    		jz	short mediaret
 13972 00001797 E83C01                  		call	checkromchange
 13973 0000179A 752B                    		jnz	short mediadovolid
 13974 0000179C 50                      		push	ax
 13975 0000179D 52                      		push	dx
 13976 0000179E 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13977                                  					; set logical drive number
 13978 000017A2 B416                    		mov	ah, 16h
 13979 000017A4 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 13980                                  					; DL = drive to	check
 13981                                  					; Return: AH = disk change status
 13982 000017A6 5A                      		pop	dx
 13983 000017A7 58                      		pop	ax
 13984 000017A8 721D                    		jb	short mediadovolid
 13985 000017AA BE0100                  		mov	si, 1		; signal no change
 13986                                  
 13987                                  ; there are some drives with changeline that "lose" the changeline indication
 13988                                  ; if a different drive is accessed after the current one. in order to avoid
 13989                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 13990                                  ; is not active and we are accessing a different drive from the last one.
 13991                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 13992                                  ; status.
 13993                                  		; 19/10/2022
 13994 000017AD 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 13995 000017B1 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 13996                                  					; (If the last drive accessed is not current drive
 13997                                  					; media	change status may be incorrect.	So,
 13998                                  					; "I don't now" will be returned even if it is indicated
 13999                                  					; as media is not changed.)
 14000 000017B5 740F                    		jz	short mediaret	; (same	drive,
 14001                                  					; media	changeline indication is reliable)
 14002                                  
 14003                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 14004                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 14005                                  ; "not changed" here since the 2 second test said no change.)
 14006                                  
 14007 000017B7 50                      		push	ax
 14008 000017B8 51                      		push	cx
 14009 000017B9 52                      		push	dx
 14010 000017BA E896ED                  		call	Check_Time_Of_Access
 14011 000017BD 5A                      		pop	dx
 14012 000017BE 59                      		pop	cx
 14013 000017BF 58                      		pop	ax
 14014 000017C0 09F6                    		or	si, si
 14015 000017C2 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 14016                                  					; (volume id will be checked)
 14017 000017C4 31F6                    		xor	si, si		; return "i don't know"
 14018                                  mediaret:				
 14019 000017C6 C3                      		retn
 14020                                  ; ---------------------------------------------------------------------------
 14021                                  
 14022                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 14023                                  ; because this may be different since we only set medbyt when doing a read
 14024                                  ; or write.
 14025                                  
 14026                                  mediadovolid:				
 14027 000017C7 E82DEE                  		call	GetBp		; build	a new bpb in current bds
 14028 000017CA 72FA                    		jb	short mediaret
 14029 000017CC E82D00                  		call	check_vid
 14030 000017CF 73F5                    		jnb	short mediaret
 14031 000017D1 E9F8F3                  		jmp	maperror	; fix up al for	return to dos
 14032                                  ; ---------------------------------------------------------------------------
 14033                                  
 14034                                  ; simple, quick check of latched change. if no indication, then return
 14035                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 14036                                  ; return and set al = 15 (for invalid media change) which will be returned to
 14037                                  ; dos.
 14038                                  ;
 14039                                  ; for dos 3.3, this will work only for the drive that has changeline.
 14040                                  
 14041                                  ;	call with es:di -> bds, ds -> Bios_Data
 14042                                  ;	***** warning:  this routine will return one level up on the stack
 14043                                  ;			if an error occurs!
 14044                                  
 14045                                  checklatchio:	
 14046                                  
 14047                                  ; if returning fake bpb then assume the disk has not changed
 14048                                  			
 14049 000017D4 E8B0FF                  		call	chkopcnt
 14050 000017D7 741B                    		jz	short checkret	; done if zero
 14051                                  
 14052                                  ; check for past rom indications. if no rom change indicated, then return ok.
 14053                                  
 14054 000017D9 E8FA00                  		call	checkromchange
 14055 000017DC 7416                    		jz	short checkret
 14056                                  
 14057                                  ; we now see that a change line has been seen in the past. let's do the
 14058                                  ; expensive verification.
 14059                                  
 14060 000017DE E816EE                  		call	GetBp		; build	bpb in current bds
 14061 000017E1 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 14062 000017E3 E81600                  		call	check_vid
 14063 000017E6 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 14064 000017E8 09F6                    		or	si, si		; is changed for sure?
 14065 000017EA 7908                    		jns	short checkret
 14066 000017EC E87B00                  		call	returnvid
 14067                                  checklatchret:				
 14068 000017EF E8DAF3                  		call	maperror	; fix up al for	return to dos
 14069                                  ret_no_error_map:			
 14070 000017F2 F9                      		stc
 14071 000017F3 5E                      		pop	si		; pop off return address
 14072                                  checkret:				
 14073 000017F4 C3                      		retn
 14074                                  ; ---------------------------------------------------------------------------
 14075                                  
 14076                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 14077                                  ; only if there was a disk error. return that error code in ax.
 14078                                  ;
 14079                                  ;	called with es:di -> bds, ds -> Bios_Data
 14080                                  
 14081                                  checkfatvid:				
 14082 000017F5 E8BD01                  		call	fat_check	; check	the fat	and the	vid
 14083 000017F8 09F6                    		or	si, si
 14084 000017FA 7827                    		js	short changed_drv ;
 14085                                  
 14086                                  ; the fat was the same. fall into check_vid and check volume id.
 14087                                  
 14088                                  		; fall into check_vid
 14089                                  
 14090                                  ; =============== S U B	R O U T	I N E =======================================
 14091                                  
 14092                                  ; now with the extended boot record, the logic should be enhanced.
 14093                                  ;
 14094                                  ; if it is the extended boot record, then we check the volume serial
 14095                                  ; number instead of volume id. if it is different, then set si to -1.
 14096                                  ;
 14097                                  ; if it is same, then si= 1 (no change).
 14098                                  ;
 14099                                  ; if it is not the extended boot record, then just follows the old
 14100                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 14101                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 14102                                  ; should have already covered by extended boot structure checking.
 14103                                  ; so, we will return "i don't know" by setting si to 0.
 14104                                  ;
 14105                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 14106                                  ; (this will be gauranteed by a successful getbp call right before this
 14107                                  ; routine.)
 14108                                  ;
 14109                                  ;	called with es:di -> bds, ds -> bds
 14110                                  
 14111                                  		; 19/10/2022
 14112                                  check_vid:
 14113                                  
 14114                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 14115                                  ; boot signature. if it is set then go to do the extended
 14116                                  ; id check otherwise continue with code below
 14117                                  
 14118 000017FC 803E[7401]29            		cmp	byte [disksector+26h], 29h
 14119                                  					; [disksector+EXT_BOOT.SIG],
 14120                                  					; EXT_BOOT_SIGNATURE
 14121 00001801 7427                    		jz	short do_ext_check_id
 14122 00001803 E8DC00                  		call	haschange
 14123 00001806 74EC                    		jz	short checkret
 14124 00001808 31F6                    		xor	si, si
 14125 0000180A 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 14126                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 14127 0000180F 7411                    		jz	short checkfatret ; don't read vol id
 14128                                  					; if not fat system
 14129 00001811 E8EE00                  		call	read_volume_id
 14130 00001814 720C                    		jb	short checkfatret
 14131 00001816 E89201                  		call	check_volume_id
 14132 00001819 BEFFFF                  		mov	si, 0FFFFh	; -1
 14133                                  					; definitely changed
 14134 0000181C 7505                    		jnz	short changed_drv
 14135                                  
 14136 0000181E 46                      		inc	si		; not changed
 14137                                  vid_no_changed:				
 14138 0000181F E8BA00                  		call	resetchanged
 14139                                  		; 12/12/2022
 14140                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 14141                                  		;clc
 14142                                  checkfatret:				
 14143 00001822 C3                      		retn
 14144                                  ; ---------------------------------------------------------------------------
 14145                                  
 14146                                  		; 12/12/2022
 14147                                  changed_drv:
 14148 00001823 F8                      		clc			; cas -- return	no error
 14149 00001824 C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 14150                                  					; ensure that we ask rom for media
 14151 00001829 C3                      		retn			; check	next time round
 14152                                  ; ---------------------------------------------------------------------------
 14153                                  
 14154                                  ; extended id check
 14155                                  
 14156                                  ; 16/10/2022
 14157                                  
 14158                                  ; the code to check extended id is basically a check to see if the
 14159                                  ; volume serial number is still the same. the volume serial number
 14160                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 14161                                  ; ds:di points to the bds of the drive under consideration.
 14162                                  ; the bds has fields containing the high and low words 
 14163                                  ; of the volume serial number of the media in the drive.
 14164                                  ; compare these fields to the fields mentioned above. if these fields
 14165                                  ; do not match the media has changed and so we should jump to the code
 14166                                  ; starting at ext_changed else return "i don't know" status
 14167                                  ; in the register used for the changeline status and continue executing
 14168                                  ; the code given below. for temporary storage use the register which
 14169                                  ; has been saved and restored around this block.
 14170                                  ;
 14171                                  ; bds fields in inc\msbds.inc
 14172                                  
 14173                                  		; 19/10/2022
 14174                                  do_ext_check_id:
 14175 0000182A 50                      		push	ax
 14176                                  		;mov	ax, word ptr ds:disksector+27h
 14177                                  					; [DiskSector+EXT_BOOT.SERIAL]
 14178 0000182B A1[7501]                		mov	ax, [disksector+27h]
 14179                                  		; 02/09/2023
 14180 0000182E 31F6                    		xor	si, si ; 0
 14181 00001830 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 14182 00001834 750C                    		jnz	short ext_changed
 14183 00001836 A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 14184 00001839 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 14185 0000183D 7503                    		jnz	short ext_changed
 14186                                  		;xor	si, si		; 0
 14187                                  					; don't know
 14188 0000183F 58                      		pop	ax
 14189 00001840 EBDD                    		jmp	short vid_no_changed
 14190                                  					; reset the flag
 14191                                  ; ---------------------------------------------------------------------------
 14192                                  
 14193                                  ext_changed:
 14194 00001842 58                      		pop	ax
 14195                                  		; 02/09/2023
 14196 00001843 4E                      		dec	si ; mov si, 0FFFFh ; -1
 14197                                  		;mov	si, 0FFFFh	; -1
 14198                                  					; disk changed!
 14199                                  		; 12/12/2022
 14200                                  		; ('changed_drv' clears cf)
 14201                                  		;clc
 14202 00001844 EBDD                    		jmp	short changed_drv
 14203                                  
 14204                                  ; ---------------------------------------------------------------------------
 14205                                  
 14206                                  ; at i/o time, we detected the error. now we need to determine whether the
 14207                                  ; media was truly changed or not. we return normally if media change unknown.
 14208                                  ; and we pop off the call and jmp to harderr if we see an error.
 14209                                  ;
 14210                                  ; es:di -> bds
 14211                                  
 14212                                  checkio:				
 14213 00001846 80FC06                  		cmp	ah, 6
 14214 00001849 75D7                    		jnz	short checkfatret
 14215 0000184B E839FF                  		call	chkopcnt
 14216 0000184E 74D2                    		jz	short checkfatret
 14217 00001850 E8A4ED                  		call	GetBp
 14218 00001853 7212                    		jb	short no_error_map
 14219 00001855 E89DFF                  		call	checkfatvid
 14220 00001858 7209                    		jb	short checkioret ; disk	error trying to	read in.
 14221 0000185A 09F6                    		or	si, si		; is changed for sure?
 14222 0000185C 7802                    		js	short checkioerr ; yes changed
 14223 0000185E 45                      		inc	bp		; allow	a retry
 14224 0000185F C3                      		retn
 14225                                  ; ---------------------------------------------------------------------------
 14226                                  
 14227                                  checkioerr:				
 14228 00001860 E80700                  		call	returnvid
 14229                                  
 14230                                  checkioret:				
 14231 00001863 F9                      		stc			; make sure carry gets passed through
 14232 00001864 E915F3                  		jmp	harderr
 14233                                  ; ---------------------------------------------------------------------------
 14234                                  
 14235                                  no_error_map:				
 14236 00001867 E915F3                  		jmp	harderr2
 14237                                  
 14238                                  ; =============== S U B	R O U T	I N E =======================================
 14239                                  
 14240                                  ; return vid sets up the vid for a return to dos.
 14241                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 14242                                  ;  **** trashes si! ****
 14243                                  
 14244                                  returnvid:		
 14245 0000186A BE1600                  		mov	si, 22		; extra
 14246                                  					; offset into pointer to return	value
 14247 0000186D E80700                  		call	vid_into_packet
 14248 00001870 B406                    		mov	ah, 6
 14249 00001872 F9                      		stc
 14250 00001873 C3                      		retn
 14251                                  
 14252                                  ; ---------------------------------------------------------------------------
 14253                                  
 14254                                  ; moves the pointer to the volid for the drive into the original request packet
 14255                                  ; no attempt is made to preserve registers.
 14256                                  ;
 14257                                  ; assumes es:di -> bds
 14258                                  ; **trashes si**
 14259                                  
 14260                                  media_set_vid:				
 14261 00001874 BE0F00                  		mov	si, 15		; trans+1
 14262                                  					; return the value here	in packet
 14263                                  
 14264                                  		; fall into vid_into_packet
 14265                                  
 14266                                  ; =============== S U B	R O U T	I N E =======================================
 14267                                  
 14268                                  ; return pointer to vid in bds at es:di in packet[si]
 14269                                  
 14270                                  		; 19/10/2022
 14271                                  vid_into_packet:
 14272 00001877 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 14273 00001878 C51E[1200]              		lds	bx, [ptrsav]
 14274 0000187C 83C74B                  		add	di, 75		; BDS.volid
 14275 0000187F 8938                    		mov	[bx+si], di
 14276 00001881 83EF4B                  		sub	di, 75		; BDS.volid
 14277 00001884 8C4002                  		mov	[bx+si+2], es
 14278 00001887 1F                      		pop	ds
 14279                                  dofloppy:	; 18/12/2022
 14280 00001888 C3                      		retn
 14281                                  
 14282                                  ; ---------------------------------------------------------------------------
 14283                                  
 14284                                  ;----------------------------------------------------------------------------
 14285                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 14286                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 14287                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 14288                                  ;   of getbp. for 3.5" media, we just return.
 14289                                  ;
 14290                                  ;   inputs:	es:di point to correct bds for this drive
 14291                                  ;		ah has media byte
 14292                                  ;
 14293                                  ;   outputs:	carry clear
 14294                                  ;		    no registers modified
 14295                                  ;		carry set
 14296                                  ;		    al = sectors/fat
 14297                                  ;		    bh = number of root directory entries
 14298                                  ;		    bl = sectors per track
 14299                                  ;		    cx = number of sectors
 14300                                  ;		    dh = sectors per allocation unit
 14301                                  ;		    dl = number of heads
 14302                                  ;
 14303                                  ;----------------------------------------------------------------------------
 14304                                  
 14305                                  hidensity:
 14306                                  
 14307                                  ; check for correct drive
 14308                                  		
 14309                                  		; 12/12/2022
 14310 00001889 26F6452302              		test	byte [es:di+23h], 2		
 14311                                  		;test	word [es:di+23h], 2 ; is it special?	
 14312                                  					; [es:di+BDS.flags], fchangeline
 14313 0000188E 74F8                    		jz	short dofloppy	; no, do normal floppy test
 14314                                  
 14315                                  ; we have a media byte that is pretty complex. examine drive information
 14316                                  ; table to see what kind it is.
 14317                                  
 14318 00001890 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 14319 00001895 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 14320                                  					; yes, use fatid...
 14321                                  ; 96 tpi drive?
 14322 00001897 80FCF9                  		cmp	ah, 0F9h
 14323 0000189A 75EC                    		jnz	short dofloppy
 14324                                  
 14325                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 14326                                  ;------ a 720K diskette
 14327                                  
 14328                                  		; 02/09/2023 (PCDOS 7.1)
 14329 0000189C 268A4522                		mov	al, [es:di+22h]	; [es:di+BDS.formfactor]
 14330 000018A0 3C07                    		cmp	al, 7
 14331                                  		;cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 14332                                  					; ffOther
 14333 000018A2 7413                    		jz	short Is720K
 14334 000018A4 3C09                    		cmp	al, 9
 14335                                  		;cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 14336                                  					; ff288
 14337 000018A6 740F                    		jz	short Is720K
 14338 000018A8 B007                    		mov	al, 7		; seven	sectors	/ fat
 14339 000018AA BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 14340                                  					; 224 root dir entries
 14341                                  					; & 0Fh sector max
 14342 000018AD B96009                  		mov	cx, 2400	; 80*15*2
 14343                                  					; 80 tracks, 15 sectors/track,
 14344                                  					; 2 sides
 14345                                  		; 02/09/2023
 14346 000018B0 5A                      		pop	dx		; pop off return address
 14347 000018B1 BA0201                  		mov	dx, 258		; 1*256+2
 14348                                  					; sectors/allocation unit
 14349                                  					; & head max
 14350                                  		;add	sp, 2		; pop off return address
 14351 000018B4 E9B2ED                  		jmp	Has1		; return to tail of getbp
 14352                                  ; ---------------------------------------------------------------------------
 14353                                  
 14354                                  Is720K:
 14355                                  		; 02/09/2023
 14356 000018B7 5B                      		pop	bx		; pop off return address
 14357                                  		;add	sp, 2		; pop off return address
 14358 000018B8 E975ED                  		jmp	Has720K		; return to 720K code
 14359                                  ; ---------------------------------------------------------------------------
 14360                                  
 14361                                  		; 18/12/2022
 14362                                  ;dofloppy:				
 14363                                  		;retn
 14364                                  
 14365                                  ; =============== S U B	R O U T	I N E =======================================
 14366                                  
 14367                                  ; 16/10/2022
 14368                                  
 14369                                  ;---------------------------------------------------------------------------
 14370                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 14371                                  ;		   essentially used to indicate changeline, or format.
 14372                                  ;
 14373                                  ;   inputs:	dl contains physical drive number
 14374                                  ;		bx contains bits to set in the flag field in the bdss
 14375                                  ;   outputs:	none
 14376                                  ;   registers modified: flags
 14377                                  ;
 14378                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 14379                                  ;
 14380                                  ; in the virtual drive system we *must* flag the other drives as being changed
 14381                                  ;---------------------------------------------------------------------------
 14382                                  
 14383                                  set_changed_dl:	
 14384 000018BB 06                      		push	es
 14385 000018BC 57                      		push	di
 14386                                  		;les	di, ds:start_bds
 14387                                  		; 19/10/2022
 14388 000018BD C43E[1901]              		les	di, [start_bds]
 14389                                  
 14390                                  ; note: we assume that the list is non-empty
 14391                                  
 14392                                  scan_bds:				
 14393 000018C1 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 14394 000018C5 7504                    		jnz	short get_next_bds
 14395                                  
 14396                                  ; someone may complain, but this *always* must be done when a disk change is
 14397                                  ; noted. there are *no* other compromising circumstances.
 14398                                  
 14399 000018C7 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 14400                                  					; signal change	on other drive
 14401                                  get_next_bds:				
 14402 000018CB 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 14403                                  					; go to	next bds
 14404 000018CE 83FFFF                  		cmp	di, 0FFFFh
 14405 000018D1 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 14406 000018D3 5F                      		pop	di
 14407 000018D4 07                      		pop	es
 14408 000018D5 C3                      		retn
 14409                                  
 14410                                  ; =============== S U B	R O U T	I N E =======================================
 14411                                  
 14412                                  ;---------------------------------------------------------------------------
 14413                                  ; checkromchange - see if external program has diddled rom change line.
 14414                                  ;
 14415                                  ;   inputs:	es:di points to current bds.
 14416                                  ;   outputs:	zero set - no change
 14417                                  ;		zero reset - change
 14418                                  ;   registers modified: none
 14419                                  ;---------------------------------------------------------------------------
 14420                                  
 14421                                  checkromchange:	
 14422                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 14423                                  		; 10/12/2022
 14424 000018D6 26F6452340              		test	byte [es:di+23h], 40h
 14425                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 14426                                  					; fchanged
 14427 000018DB C3                      		retn
 14428                                  
 14429                                  ; =============== S U B	R O U T	I N E =======================================
 14430                                  
 14431                                  ;---------------------------------------------------------------------------
 14432                                  ; resetchanged - restore value of change line
 14433                                  ;
 14434                                  ;   inputs:	es:di points to current bds
 14435                                  ;   outputs:	none
 14436                                  ;   registers modified: none
 14437                                  ;---------------------------------------------------------------------------
 14438                                  
 14439                                  resetchanged:	
 14440                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 14441                                  		; 10/12/2022
 14442 000018DC 26806523BF              		and	byte [es:di+23h], 0BFh
 14443                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 14444                                  					; ~fchanged
 14445 000018E1 C3                      		retn
 14446                                  
 14447                                  ; =============== S U B	R O U T	I N E =======================================
 14448                                  
 14449                                  ;---------------------------------------------------------------------------
 14450                                  ; haschange - see if drive can supply change line
 14451                                  ;
 14452                                  ;   inputs:	es:di points to current bds
 14453                                  ;   outputs:	zero set - no change line available
 14454                                  ;		zero reset - change line available
 14455                                  ;   registers modified: none
 14456                                  ;---------------------------------------------------------------------------
 14457                                  
 14458                                  haschange:
 14459                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 14460                                  		; 10/12/2022
 14461 000018E2 26F6452302              		test	byte [es:di+23h], 2		
 14462                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 14463                                  					; fchangeline
 14464 000018E7 C3                      		retn
 14465                                  
 14466                                  ; ---------------------------------------------------------------------------
 14467                                  
 14468                                  ; 16/10/2022
 14469                                  
 14470                                  ;-------------------------------------------------------------------------
 14471                                  ; set_volume_id      -	main routine, calls other routines.
 14472                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 14473                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 14474                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 14475                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 14476                                  ;-------------------------------------------------------------------------
 14477                                  
 14478                                  ; set_volume_id
 14479                                  ;   if drive has changeline support, read in and set the volume_id
 14480                                  ; and the last fat_id byte. if no change line support then do nothing.
 14481                                  ;
 14482                                  ;   on entry:
 14483                                  ;	es:di points to the bds for this disk.
 14484                                  ;	ah contains media byte
 14485                                  ;
 14486                                  ;   on exit:
 14487                                  ;	carry clear:
 14488                                  ;	   successful call
 14489                                  ;	carry set
 14490                                  ;	   error and ax has error code
 14491                                  
 14492                                  set_volume_id:				
 14493 000018E8 52                      		push	dx		; save registers
 14494 000018E9 50                      		push	ax
 14495 000018EA E8F5FF                  		call	haschange	; does drive have changeline support?
 14496 000018ED 740B                    		jz	short setvret	; no, get out
 14497 000018EF E81000                  		call	read_volume_id
 14498 000018F2 7209                    		jb	short seterr
 14499 000018F4 E8A800                  		call	transfer_volume_id ; copy the volume id	to special drive
 14500 000018F7 E8E2FF                  		call	resetchanged	; restore value	of change line
 14501                                  setvret:				
 14502                                  		; 10/12/2022
 14503                                  		; cf = 0
 14504                                  		;clc			; no error, clear carry flag
 14505 000018FA 58                      		pop	ax		; restore registers
 14506 000018FB 5A                      		pop	dx
 14507 000018FC C3                      		retn
 14508                                  ; ---------------------------------------------------------------------------
 14509                                  
 14510                                  seterr:					
 14511 000018FD 5A                      		pop	dx		; pop stack but don't overwrite ax
 14512 000018FE 5A                      		pop	dx		; restore dx
 14513 000018FF C3                      		retn
 14514                                  ; ---------------------------------------------------------------------------
 14515 00001900 0000                    root_sec:	dw 0			; root sector #
 14516                                  
 14517                                  ; 16/10/2022
 14518                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 14519                                  ; 09/12/2022
 14520                                  ROOTSEC equ root_sec
 14521                                  
 14522                                  ; =============== S U B	R O U T	I N E =======================================
 14523                                  
 14524                                  ; 16/10/2022
 14525                                  
 14526                                  ; read_volume_id read the volume id and tells if it has been changed.
 14527                                  ;
 14528                                  ;   on entry:
 14529                                  ;	es:di points to current bds for drive.
 14530                                  ;
 14531                                  ;   on exit:
 14532                                  ;	carry clear
 14533                                  ;	    si = 1  no change
 14534                                  ;	    si = 0  ?
 14535                                  ;	    si = -1 change
 14536                                  ;
 14537                                  ;	carry set:
 14538                                  ;	    error and ax has error code.
 14539                                  
 14540                                  read_volume_id:
 14541 00001902 52                      		push	dx		; preserve registers
 14542 00001903 51                      		push	cx
 14543 00001904 53                      		push	bx
 14544 00001905 50                      		push	ax
 14545 00001906 06                      		push	es		; stack the bds last
 14546 00001907 57                      		push	di
 14547 00001908 1E                      		push	ds		; point es to Bios_Data
 14548 00001909 07                      		pop	es
 14549 0000190A BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14550 0000190D BE[FE08]                		mov	si, nul_vid	; "NO NAME	 "
 14551 00001910 B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 14552 00001913 F3A4                    		rep movsb
 14553 00001915 5F                      		pop	di
 14554 00001916 07                      		pop	es
 14555 00001917 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 14556                                  					; # of fats
 14557 0000191B 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 14558                                  					; sectors / fat
 14559 0000191F F6E1                    		mul	cl		; size taken by	fats
 14560 00001921 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 14561                                  					; add on reserved sectors
 14562                                  					;
 14563                                  					; ax is	now sector # (0	based)
 14564                                  		; 17/10/2022
 14565 00001925 2EA3[0019]              		mov	[cs:ROOTSEC], ax
 14566                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 14567                                  					; 0070h:3EFFh =	2C7h:198Fh
 14568 00001929 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 14569                                  					; # root dir entries
 14570 0000192D B104                    		mov	cl, 4		; 16 entries/sector
 14571 0000192F D3E8                    		shr	ax, cl		; divide by 16
 14572                                  		;mov	cx, ax		; cx is	# of sectors to	scan
 14573                                  		; 02/09/2023 (PCDOS 7.1, one byte opcode)
 14574 00001931 91                      		xchg	ax, cx		; cx is	# of sectors to	scan
 14575                                  next_sec:				
 14576 00001932 51                      		push	cx		; save outer loop counter
 14577 00001933 2EA1[0019]              		mov	ax, [cs:ROOTSEC]
 14578                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 14579                                  					; get sector #
 14580 00001937 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 14581                                  					; sectors / track
 14582 0000193B 31D2                    		xor	dx, dx
 14583 0000193D F7F1                    		div	cx
 14584                                  
 14585                                  ; set up registers for call to read_sector
 14586                                  
 14587 0000193F 42                      		inc	dx		; dx= sectors into track
 14588                                  					; ax= track count from 0
 14589 00001940 88D1                    		mov	cl, dl		; sector to read
 14590 00001942 31D2                    		xor	dx, dx
 14591 00001944 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 14592                                  					; # heads on this disc
 14593 00001948 88D6                    		mov	dh, dl		; head number
 14594 0000194A 88C5                    		mov	ch, al		; track	#
 14595 0000194C E828EE                  		call	read_sector	; get first sector of the root directory,
 14596                                  					; ds:bx	-> directory sector
 14597 0000194F 723F                    		jb	short readviderr
 14598 00001951 B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 14599 00001954 B008                    		mov	al, 8		; volume label bit
 14600                                  fvid_loop:				
 14601                                  		; 02/09/2023 (PCDOS 7.1)
 14602 00001956 382F                    		cmp	[bx], ch ; 0
 14603                                  		;cmp	byte [bx], 0 ; end of dir?
 14604 00001958 7433                    		jz	short no_vid	; yes, no vol id
 14605 0000195A 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 14606 0000195D 7405                    		jz	short ent_loop	; yes, skip
 14607 0000195F 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 14608 00001962 750F                    		jnz	short found_vid	; jmp yes
 14609                                  ent_loop:				
 14610 00001964 83C320                  		add	bx, 32		; add length of	directory entry
 14611 00001967 E2ED                    		loop	fvid_loop
 14612 00001969 59                      		pop	cx		; outer loop
 14613 0000196A 2EFF06[0019]            		inc	word [cs:ROOTSEC]
 14614                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 14615                                  					; next sector
 14616 0000196F E2C1                    		loop	next_sec	; continue
 14617                                  notfound:
 14618                                  		; 02/09/2023
 14619                                  		;xor	si, si
 14620 00001971 EB13                    		jmp	short fvid_ret
 14621                                  ; ---------------------------------------------------------------------------
 14622                                  
 14623                                  found_vid:
 14624                                  		; 02/09/2023
 14625                                  		; cf = 0  ('test' instruction clears cf)				
 14626 00001973 59                      		pop	cx		; clean stack of outer loop counter
 14627 00001974 89DE                    		mov	si, bx		; point	to volume_id
 14628 00001976 06                      		push	es		; preserve current bds
 14629 00001977 57                      		push	di
 14630 00001978 1E                      		push	ds
 14631 00001979 07                      		pop	es		; point es to Bios_Data
 14632 0000197A BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14633 0000197D B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 14634                                  					; length of string minus nul
 14635 00001980 F3A4                    		rep movsb		; mov volume label to tmp_vid
 14636                                  		;xor	al, al
 14637                                  		; 02/09/2023
 14638 00001982 91                      		xchg	ax, cx		; ax = 0
 14639 00001983 AA                      		stosb			; null terminate
 14640                                  		;;xor	si, si
 14641                                  		; 02/09/2023
 14642                                  		;xchg	ax, si		; si = 0
 14643 00001984 5F                      		pop	di		; restore current bds
 14644 00001985 07                      		pop	es
 14645                                  fvid_ret:
 14646                                  		; 02/09/2023
 14647 00001986 31F6                    		xor	si, si ; 0
 14648                                  				
 14649 00001988 58                      		pop	ax
 14650                                  		; 10/12/2022
 14651                                  		; cf = 0
 14652                                  		;clc
 14653                                  rvidret:				
 14654 00001989 5B                      		pop	bx		; restore registers
 14655 0000198A 59                      		pop	cx
 14656 0000198B 5A                      		pop	dx
 14657 0000198C C3                      		retn
 14658                                  ; ---------------------------------------------------------------------------
 14659                                  
 14660                                  no_vid:
 14661 0000198D 59                      		pop	cx		; clean stack of outer loop counter
 14662                                  		;jmp	short notfound	; not found
 14663                                  		; 02/09/2023
 14664 0000198E EBF6                    		jmp	short fvid_ret
 14665                                  ; ---------------------------------------------------------------------------
 14666                                  
 14667                                  readviderr:				
 14668 00001990 5E                      		pop	si		; trash the outer loop counter
 14669 00001991 5E                      		pop	si		; caller's ax, return error code instead 
 14670 00001992 EBF5                    		jmp	short rvidret
 14671                                  
 14672                                  ; ---------------------------------------------------------------------------
 14673                                  		; 02/09/2023 - Retro DOS v4.2 (IO.SYS optimization)
 14674                                  		; PCDOS 7.1 - IBMBIO.COM - BIOSCODE:1DCFh 
 14675                                  preset_volid_addr:
 14676 00001994 BE[0A09]                		mov	si, tmp_vid	; "NO NAME    "
 14677                                  		;
 14678                                  		; PCDOS 7.1
 14679                                  		;add	di, 125		; BDS.volid
 14680                                  		;mov	cx, 11		; VOLID_SIZ (12 for MSDOS 5.0-6.22 versions)
 14681                                  		; MSDOS 6.21 (MSDOS 5.0 & 6.?)
 14682 00001997 83C74B                  		add	di, 75		; BDS.volid
 14683 0000199A B90C00                  		mov	cx, 12		; VOLID_SIZ
 14684                                  		;
 14685 0000199D FC                      		cld
 14686 0000199E C3                      		retn
 14687                                  
 14688                                  ; =============== S U B	R O U T	I N E =======================================
 14689                                  
 14690                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 14691                                  ;
 14692                                  ; inputs:	es:di has current bds
 14693                                  ; outputs:	bds for drive has volume id from tmp
 14694                                  
 14695                                  transfer_volume_id:
 14696 0000199F 57                      		push	di		; copy the volume id from tmp to special drive
 14697 000019A0 56                      		push	si
 14698 000019A1 51                      		push	cx
 14699                                  		
 14700                                  		;mov	si, tmp_vid	; "NO NAME	 "
 14701                                  		;;add	di, BDS.volid
 14702                                  		;add	di, 75		; BDS.volid
 14703                                  		;;mov	cx, VOLID_SIZ
 14704                                  		;mov	cx, 12		; VOLID_SIZ
 14705                                  		;cld
 14706                                  		; 02/09/2023 (PCDOS 7.1)
 14707 000019A2 E8EFFF                  		call	preset_volid_addr
 14708                                  
 14709 000019A5 F3A4                    		rep movsb
 14710 000019A7 59                      		pop	cx
 14711 000019A8 5E                      		pop	si
 14712 000019A9 5F                      		pop	di
 14713 000019AA C3                      		retn
 14714                                  
 14715                                  ; =============== S U B	R O U T	I N E =======================================
 14716                                  
 14717                                  ;  check_volume_id - compare volume id in tmp area with
 14718                                  ;		     one expected for drive
 14719                                  ;
 14720                                  ;   inputs:	es:di has current bds for drive
 14721                                  ;   outputs:	zero true means it matched
 14722                                  
 14723                                  check_volume_id:
 14724 000019AB 57                      		push	di
 14725 000019AC 51                      		push	cx
 14726                                  		
 14727                                  		;mov	si, tmp_vid	; "NO NAME	 "
 14728                                  		;;add	di, BDS.volid
 14729                                  		;add	di, 75		; BDS.volid
 14730                                  		;;mov	cx, VOLID_SIZ
 14731                                  		;mov	cx, 12		; VOLID_SIZ
 14732                                  		;cld
 14733                                  		; 02/09/2023 (PCDOS 7.1)
 14734 000019AD E8E4FF                  		call	preset_volid_addr
 14735                                  
 14736 000019B0 F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 14737 000019B2 59                      		pop	cx
 14738 000019B3 5F                      		pop	di
 14739 000019B4 C3                      		retn
 14740                                  
 14741                                  ; =============== S U B	R O U T	I N E =======================================
 14742                                  
 14743                                  ;   fat_check - see of the fatid has changed in the specified drive.
 14744                                  ;	      - uses the fat id obtained from the boot sector.
 14745                                  ;
 14746                                  ;   inputs:	medbyt is expected fat id
 14747                                  ;		es:di points to current bds
 14748                                  ;
 14749                                  ;   output:	si = -1 if fat id different,
 14750                                  ;		si = 0 otherwise
 14751                                  ;
 14752                                  ;   no other registers changed.
 14753                                  
 14754                                  fat_check:		
 14755 000019B5 50                      		push	ax
 14756 000019B6 31F6                    		xor	si, si		; say fat id's are same.
 14757 000019B8 A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 14758 000019BB 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 14759                                  					; compare it with the bds medbyte
 14760 000019BF 7401                    		jz	short okret1	; carry	clear
 14761 000019C1 4E                      		dec	si
 14762                                  okret1:					
 14763 000019C2 58                      		pop	ax
 14764 000019C3 C3                      		retn
 14765                                  
 14766                                  ; ---------------------------------------------------------------------------
 14767                                  
 14768                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 14769                                  		;times 7 db 0
 14770                                  
 14771                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 14772                                  
 14773                                  		; 09/12/2022
 14774                                  		;times 4 db 0	; 17/10/2022
 14775                                  		;db 4 dup(0)	; times 4 db 0
 14776                                  
 14777                                  ; ---------------------------------------------------------------------------
 14778                                  
 14779                                  		; 09/12/2022
 14780                                  		;db 0
 14781                                  
 14782                                  number2div	equ ($-BCode_start)
 14783                                  number2mod	equ (number2div % 16)
 14784                                  
 14785                                  %if number2mod>0 & number2mod<16
 14786 000019C4 00<rep Ch>              		times (16-number2mod) db 0
 14787                                  %endif
 14788                                  
 14789                                  ;align 16
 14790                                  
 14791                                  ; 09/12/2022
 14792                                  BCODE_END	equ $ - BCode_start
 14793                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 14794                                  ; 13/12/2022
 14795                                  SYSINITOFFSET	equ BCODE_END
 14796                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 14797                                  
 14798                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 14799                                  
 14800                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14801                                  ; 01/05/2019 - Retro DOS v4.0 
 14802                                  ; ============================================================================
 14803                                  ; end of BIOSCODE
 14804                                  
 14805                                  ; ----------------------------------------------------------------------------
 14806                                  ; %include sysinit5.s	; 09/12/2022
 14807                                  ; ----------------------------------------------------------------------------
 14808                                  
 14809                                  ;=============================================================================
 14810                                  ; (IO.SYS) SYSINIT SEGMENT 
 14811                                  ;=============================================================================
 14812                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14813                                  
 14814                                  section .SYSINIT vstart=0
 14815                                  
 14816                                  ; ****************************************************************************
 14817                                  ; SYSINIT.BIN (MSDOS 5.0 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 14818                                  ; ----------------------------------------------------------------------------
 14819                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 31/12/2022))
 14820                                  ; ----------------------------------------------------------------------------
 14821                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 14822                                  ; ----------------------------------------------------------------------------
 14823                                  ; Assembler: NASM version 2.15
 14824                                  ; ----------------------------------------------------------------------------
 14825                                  ;	   ((nasm sysinit5.s -l sysinit5.lst -o SYSINIT5.BIN -Z error.txt)) 	
 14826                                  ; ----------------------------------------------------------------------------
 14827                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 14828                                  ; ----------------------------------------------------------------------------
 14829                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 14830                                  ; source code by Microsoft, 1991 
 14831                                  ; ----------------------------------------------------------------------------
 14832                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 14833                                  ; by Microsoft, 12/10/1983
 14834                                  ; ****************************************************************************
 14835                                  ; main file: 'retrodos4.s'
 14836                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 14837                                  
 14838                                  ; 21/10/2022
 14839                                  ; ----------------------------------------------------------------------------
 14840                                  ; This source code (version) is based on SYSINIT source code of disassembled
 14841                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 14842                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 14843                                  ; ----------------------------------------------------------------------------
 14844                                  ; Binary file splitter & joiner: FFSJ v3.3
 14845                                  
 14846                                  ;--------------------------------------------------------------
 14847                                  ; SYSINIT.TXT (27/01/1983)
 14848                                  ;--------------------------------------------------------------
 14849                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 14850                                  ;over  the  system  initialization  after  the  OEM  bios   has
 14851                                  ;performed any  initialization  it  needs  to  do.   Control is
 14852                                  ;transfered with a long jump to the external  variable  SYSINIT
 14853                                  ;
 14854                                  ;
 14855                                  ;   The OEM  has  the  following  variables declared external:
 14856                                  ;
 14857                                  ;   CURRENT_DOS_LOCATION    WORD
 14858                                  ;
 14859                                  ;This word  contains  the  segment  number of the DOS before it
 14860                                  ;is relocated.  The OEM bios must set this value.
 14861                                  ;
 14862                                  ;   FINAL_DOS_LOCATION      WORD
 14863                                  ;
 14864                                  ;This word contains the segment number of the DOS after SYSINIT
 14865                                  ;moves it.  The OEM bios must set this value.
 14866                                  ;
 14867                                  ;   DEVICE_LIST             DWORD
 14868                                  ;
 14869                                  ;This  double  word  pointer  points  to  the  linked  list  of
 14870                                  ;character and block device drivers.  The  OEM  must  set  this
 14871                                  ;value.
 14872                                  ;
 14873                                  ;   MEMORY_SIZE             WORD
 14874                                  ;
 14875                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 14876                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 14877                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 14878                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 14879                                  ;and read it back until it gets a mismatch.
 14880                                  ;
 14881                                  ;   DEFAULT_DRIVE           BYTE
 14882                                  ;
 14883                                  ;This is  the initial default drive when the system first comes
 14884                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 14885                                  ;it then drive a is assumed.
 14886                                  ;
 14887                                  ;   BUFFERS                 BYTE
 14888                                  ;
 14889                                  ;This is  the  default  number of buffers for the system.  This
 14890                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14891                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 14892                                  ;
 14893                                  ;   FILES                   BYTE
 14894                                  ;
 14895                                  ;This is  the  default  number  of  files for the system.  This
 14896                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14897                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 14898                                  ;
 14899                                  ;   SYSINIT                 FAR
 14900                                  ;
 14901                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 14902                                  ;this label at the end of its INIT code.
 14903                                  ;
 14904                                  ;   The OEM  has  the  following  variables declared public:
 14905                                  ;
 14906                                  ;   RE_INIT                 FAR
 14907                                  ;
 14908                                  ;This is an entry point which allows the BIOS to do some INIT
 14909                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 14910                                  ;PRESERVED.  On entry DS points to the first available memory
 14911                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 14912                                  ;prefix which represents  the  "program"  currently  running.
 14913                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 14914                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 14915                                  ;that  no  memory  is  allocated to it, it is running in free
 14916                                  ;memory.
 14917                                  ;NOTES:
 14918                                  ;     At the time this routine is called SYSINIT occupies the
 14919                                  ;highest 10K of memory ("highest" is determined by the  value
 14920                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 14921                                  ;     Since this is called AFTER DOS is initialized, you can
 14922                                  ;make system calls.  This also implies that the code for this
 14923                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 14924                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 14925                                  ;     If you don't want  anything done just set this to point
 14926                                  ;at a FAR RET instruction.
 14927                                  
 14928                                  ; ----------------------------------------------------------------------
 14929                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 14930                                  ; ----------------------------------------------------------------------
 14931                                  
 14932                                  ;include version.inc
 14933                                  ; ----------------------------------------------------------------------
 14934                                  
 14935                                  ;FALSE   EQU     0
 14936                                  ;TRUE    EQU     0FFFFh
 14937                                  
 14938                                  ;IBMVER	    EQU     TRUE
 14939                                  ;IBMCOPYRIGHT EQU   FALSE
 14940                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 14941                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 14942                                  ;MSVER      EQU     FALSE
 14943                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 14944                                  ;KANJI      EQU     FALSE
 14945                                  
 14946                                  ;(MSDOS 6.0, versiona.inc, 1991)
 14947                                  ; ----------------------------------------------------------------------
 14948                                  ;MAJOR_VERSION  EQU	6
 14949                                  ;;MINOR_VERSION	EQU	0	;6.00
 14950                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 14951                                  
 14952                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 14953                                  ; ----------------------------------------------------------------------
 14954                                  MAJOR_VERSION   EQU	5
 14955                                  MINOR_VERSION   EQU	0
 14956                                  
 14957                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 14958                                  
 14959                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 14960                                  				; currently 0.
 14961                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 14962                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 14963                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 14964                                  
 14965                                  ;      if1
 14966                                  ;      %OUT  ... for DOS Version 5.00 ...
 14967                                  ;      endif
 14968                                  
 14969                                         ;******************************
 14970                                         ;Each assembler program should:
 14971                                         ;  mov ah,030h                   ;DOS Get Version function
 14972                                         ;  int 021h                      ;Version ret. in AX,minor version first
 14973                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 14974                                         ;  jne error_handler             ; EXACT version match.
 14975                                         ;******************************
 14976                                  
 14977                                  ; ----------------------------------------------------------------------
 14978                                  ; device definitions
 14979                                  
 14980                                  ;Attribute bit masks
 14981                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 14982                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 14983                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 14984                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 14985                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 14986                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 14987                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 14988                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 14989                                  
 14990                                  ; The device table list has the form:
 14991                                  struc	SYSDEV
 14992 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 14993 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 14994 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 14995 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 14996 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 14997                                  .size:
 14998                                  endstruc
 14999                                  
 15000                                  ;Static Reguest Header
 15001                                  struc	SRHEAD
 15002 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 15003 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 15004 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 15005 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 15006 00000005 ????????????????                	resb 8		;Reserved for queue links
 15007                                  .size:
 15008                                  endstruc
 15009                                  
 15010                                  ;Status word masks
 15011                                  STERR   EQU     8000H           ;Bit 15 - Error
 15012                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 15013                                  STDON   EQU     0100H           ;Bit 8 - Done
 15014                                  STECODE EQU     00FFH           ;Error code
 15015                                  WRECODE EQU     0
 15016                                  
 15017                                  ;Function codes
 15018                                  DEVINIT EQU     0               ;Initialization
 15019                                  DINITHL EQU     26              ;Size of init header
 15020                                  DEVMDCH EQU     1               ;Media check
 15021                                  DMEDHL  EQU     15              ;Size of media check header
 15022                                  DEVBPB  EQU     2               ;Get BPB
 15023                                  DEVRDIOCTL EQU  3               ;IOCTL read
 15024                                  DBPBHL  EQU     22              ;Size of Get BPB header
 15025                                  DEVRD   EQU     4               ;Read
 15026                                  DRDWRHL EQU     22              ;Size of RD/WR header
 15027                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 15028                                  DRDNDHL EQU     14              ;Size of non destructive read header
 15029                                  DEVIST  EQU     6               ;Input status
 15030                                  DSTATHL EQU     13              ;Size of status header
 15031                                  DEVIFL  EQU     7               ;Input flush
 15032                                  DFLSHL  EQU     15              ;Size of flush header
 15033                                  DEVWRT  EQU     8               ;Write
 15034                                  DEVWRTV EQU     9               ;Write with verify
 15035                                  DEVOST  EQU     10              ;Output status
 15036                                  DEVOFL  EQU     11              ;Output flush
 15037                                  DEVWRIOCTL EQU  12              ;IOCTL write
 15038                                  
 15039                                  ; ----------------------------------------------------------------------
 15040                                  struc	SYS_FCB
 15041 00000000 ??                      .fcb_drive:	resb 1
 15042 00000001 ????????????????        .fcb_name:	resb 8
 15043 00000009 ??????                  .fcb_ext:	resb 3
 15044 0000000C ????                    .fcb_EXTENT:	resw 1
 15045 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 15046 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 15047                                                          ; word
 15048 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 15049 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 15050 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 15051 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 15052                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 15053                                                          ; If file, bit 6=0 if dirty
 15054                                                          ; If I/O device, bit 6=0 if EOF (input)
 15055                                                          ;               Bit 5=1 if Raw mode
 15056                                                          ;               Bit 0=1 if console input device
 15057                                                          ;               Bit 1=1 if console output device
 15058                                                          ;               Bit 2=1 if null device
 15059                                                          ;               Bit 3=1 if clock device
 15060 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 15061 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 15062 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 15063 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 15064 00000020 ??                      .fcb_NR:	resb 1	; Next record
 15065 00000021 ????????                .fcb_RR:	resb 4	; Random record
 15066                                  .size:
 15067                                  endstruc
 15068                                  
 15069                                  ; ----------------------------------------------------------------------
 15070                                  ; Field definition for I/O buffer information
 15071                                  
 15072                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 15073                                  
 15074                                  struc buffinfo
 15075 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 15076 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 15077 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 15078                                  			; SFT table index (bit 7 = 1)
 15079                                  			; = FFh if buffer free
 15080 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 15081                                  			;	= 0 if Local device buffer
 15082                                  			; Bit 6 = 1 if buffer dirty
 15083                                  			; Bit 5 = Reserved
 15084                                  			; Bit 4 = Search bit (bit 7 = 1)
 15085                                  			; Bit 3 = 1 if buffer is DATA
 15086                                  			; Bit 2 = 1 if buffer is DIR
 15087                                  			; Bit 1 = 1 if buffer is FAT
 15088                                  			; Bit 0 = Reserved
 15089 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 15090                                  ; The next two items are often refed as a word (bit 7 = 0)
 15091 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 15092 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 15093 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 15094 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 15095 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 15096                                  .size:
 15097                                  endstruc
 15098                                  
 15099                                  %define buf_offset	dword [buf_sector]
 15100                                  			;For bit 7 = 1, this is the byte
 15101                                  			;offset of the start of the buffer in
 15102                                  			;the file pointed to by buf_ID.  Thus
 15103                                  			;the buffer starts at location
 15104                                  			;buf_offset in the file and contains
 15105                                  			;buf_fill bytes.
 15106                                  
 15107                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 15108                                  
 15109                                  
 15110                                  buf_Free	equ	0FFh		; buf_id of free buffer
 15111                                  
 15112                                  ;Flag byte masks
 15113                                  buf_isnet	EQU	10000000B
 15114                                  buf_dirty	EQU	01000000B
 15115                                  ;***
 15116                                  buf_visit	EQU	00100000B
 15117                                  ;***
 15118                                  buf_snbuf	EQU	00010000B
 15119                                  
 15120                                  buf_isDATA	EQU	00001000B
 15121                                  buf_isDIR	EQU	00000100B
 15122                                  buf_isFAT	EQU	00000010B
 15123                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 15124                                  
 15125                                  buf_NetID	EQU	bufinsiz
 15126                                  
 15127                                  ; ----------------------------------------------------------------------
 15128                                  
 15129                                  ; ----------------------------------------------------------------------
 15130                                  ;**	DPB - Drive Parameter Block
 15131                                  
 15132                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 15133                                  
 15134                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 15135                                  ;	possibly inaccurate deductions from code study... - jgl
 15136                                  ;
 15137                                  ;	The DPB is DOS's main structure for describing block devices.
 15138                                  ;	It contains info about the "Drive" intermingled with info about
 15139                                  ;	the FAT file system which is presumably on the drive.  I don't know
 15140                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 15141                                  ;
 15142                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 15143                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 15144                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 15145                                  
 15146                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 15147                                  
 15148                                  ; 12/05/2019 - Retro DOS v4.0
 15149                                  
 15150                                  struc	DPB
 15151 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 15152 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 15153 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 15154 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 15155 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 15156 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 15157 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 15158 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 15159 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 15160 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 15161                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 15162 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 15163 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 15164 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 15165 00000017 ??                      .MEDIA:		resb 1		; Media byte
 15166 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 15167                                  				; check the first time this DPB is used
 15168 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 15169 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 15170 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 15171                                  .size:
 15172                                  endstruc
 15173                                  
 15174                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 15175                                  
 15176                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 15177                                  
 15178                                  ; ----------------------------------------------------------------------
 15179                                  ; 26/03/2018
 15180                                  
 15181                                  ; IOCTL SUB-FUNCTIONS
 15182                                  IOCTL_GET_DEVICE_INFO	EQU	0
 15183                                  IOCTL_SET_DEVICE_INFO	EQU	1
 15184                                  IOCTL_READ_HANDLE	EQU	2
 15185                                  IOCTL_WRITE_HANDLE	EQU	3
 15186                                  IOCTL_READ_DRIVE	EQU	4
 15187                                  IOCTL_WRITE_DRIVE	EQU	5
 15188                                  IOCTL_GET_INPUT_STATUS	EQU	6
 15189                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 15190                                  IOCTL_CHANGEABLE?	EQU	8
 15191                                  IOCTL_SHARING_RETRY	EQU	11
 15192                                  GENERIC_IOCTL_HANDLE	EQU	12
 15193                                  GENERIC_IOCTL		EQU	13
 15194                                  
 15195                                  ; GENERIC IOCTL SUB-FUNCTIONS
 15196                                  RAWIO			EQU	8
 15197                                  
 15198                                  ; RAWIO SUB-FUNCTIONS
 15199                                  GET_DEVICE_PARAMETERS	EQU	60H
 15200                                  SET_DEVICE_PARAMETERS	EQU	40H
 15201                                  READ_TRACK		EQU	61H
 15202                                  WRITE_TRACK		EQU	41H
 15203                                  VERIFY_TRACK		EQU	62H
 15204                                  FORMAT_TRACK		EQU	42H
 15205                                  
 15206                                  ; DEVICETYPE VALUES
 15207                                  MAX_SECTORS_IN_TRACK	EQU	63
 15208                                  DEV_5INCH		EQU	0
 15209                                  DEV_5INCH96TPI		EQU	1
 15210                                  DEV_3INCH720KB		EQU	2
 15211                                  DEV_8INCHSS		EQU	3
 15212                                  DEV_8INCHDS		EQU	4
 15213                                  DEV_HARDDISK		EQU	5
 15214                                  DEV_OTHER		EQU	7
 15215                                  ;DEV_3INCH1440KB	EQU	7
 15216                                  DEV_3INCH2880KB		EQU	9
 15217                                  ; Retro DOS v2.0 - 26/03/2018
 15218                                  ;;DEV_TAPE		EQU	6
 15219                                  ;;DEV_ERIMO		EQU	8
 15220                                  ;DEV_3INCH2880KB	EQU	9
 15221                                  DEV_3INCH1440KB		EQU	10
 15222                                  
 15223                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 15224                                  					; CURRENTLY SUPPORT.
 15225                                  MAX_DEV_TYPE		EQU	10
 15226                                  
 15227                                  struc A_SECTORTABLE
 15228 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 15229 00000002 ????                    .ST_SECTORSIZE:		resw	1
 15230                                  .size:
 15231                                  endstruc
 15232                                  
 15233                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 15234                                  
 15235                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 15236                                  ;
 15237                                  ;	The BPB contains information about the disk structure.  It dates
 15238                                  ;	back to the earliest FAT systems and so FAT information is
 15239                                  ;	intermingled with physical driver information.
 15240                                  ;
 15241                                  ;	A boot sector contains a BPB for its device; for other disks
 15242                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 15243                                  ;	information in the DPB.
 15244                                  ;
 15245                                  ;	The BDS structure contains a BPB within it.
 15246                                  
 15247                                  struc A_BPB
 15248 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 15249 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 15250 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 15251 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 15252 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 15253 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 15254 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 15255 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 15256 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 15257 0000000F ????                    .BPB_HEADS:		resw	1
 15258 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 15259 00000013 ????                    			resw	1
 15260 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 15261 00000017 ????                    			resw	1
 15262 00000019 ????????????            			resb	6	; NOTE:  many times these
 15263                                  ;					; 	 6 bytes are omitted
 15264                                  ;					;	 when BPB manipulations
 15265                                  ;					;	 are performed!
 15266                                  .size:
 15267                                  endstruc
 15268                                  
 15269                                  struc A_DEVICEPARAMETERS
 15270 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 15271 00000001 ??                      .DP_DEVICETYPE:		resb	1
 15272 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 15273 00000004 ????                    .DP_CYLINDERS:		resw	1
 15274 00000006 ??                      .DP_MEDIATYPE:		resb	1
 15275 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 15276 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 15277 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 15278                                  endstruc
 15279                                  
 15280                                  ; ----------------------------------------------------------------------
 15281                                  ; structure, equates for devmark for mem command.
 15282                                  
 15283                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 15284                                  
 15285                                  struc devmark
 15286 00000000 ??                       .id:	    resb 1
 15287 00000001 ????                     .seg:	    resw 1
 15288 00000003 ????                     .size:	    resw 1
 15289 00000005 ??????                   .dum:	    resb 3
 15290 00000008 ????????????????         .filename: resb 8
 15291                                  endstruc
 15292                                  
 15293                                  devmark_stk	equ	'S'
 15294                                  devmark_device	equ	'D'
 15295                                  devmark_ifs	equ	'I'
 15296                                  devmark_buf	equ	'B'
 15297                                  devmark_cds	equ	'L' ; lastdrive
 15298                                  devmark_files	equ	'F'
 15299                                  devmark_fcbs	equ	'X'
 15300                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 15301                                  devmark_ems_stub equ	'E'
 15302                                  
 15303                                  setbrkdone	equ	00000001b
 15304                                  for_devmark	equ	00000010b
 15305                                  not_for_devmark equ	11111101b
 15306                                  
 15307                                  ; ----------------------------------------------------------------------
 15308                                  ; Memory arena structure
 15309                                  
 15310                                  ; 24/03/2019 - Retro DOS v4.0 
 15311                                  ; (MSDOS 6.0, ARENA.INC)
 15312                                  
 15313                                  ;** Arena Header
 15314                                  
 15315                                  struc ARENA
 15316 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 15317 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 15318 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 15319 00000005 ??????                  .RESERVED	resb 3		; reserved
 15320 00000008 ????????????????        .NAME:		resb 8		; owner file name
 15321                                  endstruc
 15322                                  
 15323                                  ; 12/04/2019
 15324                                  
 15325                                  arena_owner_system	EQU 0	; free block indication
 15326                                  
 15327                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 15328                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 15329                                  
 15330                                  ; ----------------------------------------------------------------------
 15331                                  ; Process data block (otherwise known as program header)
 15332                                  
 15333                                  ; 23/03/2019 - Retro DOS v4.0
 15334                                  
 15335                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 15336                                  
 15337                                  FILPERPROC	EQU     20
 15338                                  
 15339                                  struc PDB	; Process_data_block
 15340 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 15341 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 15342 00000004 ??                                      resb 1
 15343 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 15344 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 15345 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 15346 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 15347 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 15348 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 15349 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 15350 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 15351 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 15352 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 15353 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 15354 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 15355 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 15356 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 15357 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 15358 00000042 <res Eh>                .PAD1:		resb 14		; 	
 15359 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 15360 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 15361 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 15362 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 15363 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 15364 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 15365                                  ;.size:
 15366                                  endstruc
 15367                                  
 15368                                  ; ----------------------------------------------------------------------
 15369                                  ; <system call definitions>
 15370                                  
 15371                                  ; 23/03/2019 - Retro DOS v4.0
 15372                                  
 15373                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 15374                                  
 15375                                  ABORT                           EQU 0   ;  0      0
 15376                                  STD_CON_INPUT                   EQU 1   ;  1      1
 15377                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 15378                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 15379                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 15380                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 15381                                  RAW_CON_IO                      EQU 6   ;  6      6
 15382                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 15383                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 15384                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 15385                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 15386                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 15387                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 15388                                  DISK_RESET                      EQU 13  ; 13      D
 15389                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 15390                                  FCB_OPEN                        EQU 15  ; 15      F
 15391                                  FCB_CLOSE                       EQU 16  ; 16     10
 15392                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 15393                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 15394                                  FCB_DELETE                      EQU 19  ; 19     13
 15395                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 15396                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 15397                                  FCB_CREATE                      EQU 22  ; 22     16
 15398                                  FCB_RENAME                      EQU 23  ; 23     17
 15399                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 15400                                  SET_DMA                         EQU 26  ; 26     1A
 15401                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 15402                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 15403                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 15404                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 15405                                  GET_FCB_POSITION                EQU 36  ; 36     24
 15406                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 15407                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 15408                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 15409                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 15410                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 15411                                  GET_DATE                        EQU 42  ; 42     2A
 15412                                  SET_DATE                        EQU 43  ; 43     2B
 15413                                  GET_TIME                        EQU 44  ; 44     2C
 15414                                  SET_TIME                        EQU 45  ; 45     2D
 15415                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 15416                                  ; Extended functionality group
 15417                                  GET_DMA                         EQU 47  ; 47     2F
 15418                                  GET_VERSION                     EQU 48  ; 48     30
 15419                                  KEEP_PROCESS                    EQU 49  ; 49     31
 15420                                  GET_DPB                         EQU 50  ; 50     32
 15421                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 15422                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 15423                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 15424                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 15425                                  CHAR_OPER                       EQU 55  ; 55     37
 15426                                  INTERNATIONAL                   EQU 56  ; 56     38
 15427                                  ;   Directory Group
 15428                                  MKDIR                           EQU 57  ; 57     39
 15429                                  RMDIR                           EQU 58  ; 58     3A
 15430                                  CHDIR                           EQU 59  ; 59     3B
 15431                                  ;   File Group
 15432                                  CREAT                           EQU 60  ; 60     3C
 15433                                  OPEN                            EQU 61  ; 61     3D
 15434                                  CLOSE                           EQU 62  ; 62     3E
 15435                                  READ                            EQU 63  ; 63     3F
 15436                                  WRITE                           EQU 64  ; 64     40
 15437                                  UNLINK                          EQU 65  ; 65     41
 15438                                  LSEEK                           EQU 66  ; 66     42
 15439                                  CHMOD                           EQU 67  ; 67     43
 15440                                  IOCTL                           EQU 68  ; 68     44
 15441                                  XDUP                            EQU 69  ; 69     45
 15442                                  XDUP2                           EQU 70  ; 70     46
 15443                                  CURRENT_DIR                     EQU 71  ; 71     47
 15444                                  ;    Memory Group
 15445                                  ALLOC                           EQU 72  ; 72     48
 15446                                  DEALLOC                         EQU 73  ; 73     49
 15447                                  SETBLOCK                        EQU 74  ; 74     4A
 15448                                  ;    Process Group
 15449                                  EXEC                            EQU 75  ; 75     4B
 15450                                  EXIT                            EQU 76  ; 76     4C
 15451                                  WAITPROCESS			EQU 77  ; 77     4D
 15452                                  FIND_FIRST                      EQU 78  ; 78     4E
 15453                                  ;   Special Group
 15454                                  FIND_NEXT                       EQU 79  ; 79     4F
 15455                                  ; SPECIAL SYSTEM GROUP
 15456                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 15457                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 15458                                  GET_IN_VARS                     EQU 82  ; 82     52
 15459                                  SETDPB                          EQU 83  ; 83     53
 15460                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 15461                                  DUP_PDB                         EQU 85  ; 85     55
 15462                                  RENAME                          EQU 86  ; 86     56
 15463                                  FILE_TIMES                      EQU 87  ; 87     57
 15464                                  ;
 15465                                  ALLOCOPER			EQU 88	; 88     58	
 15466                                  ; Network extention system calls
 15467                                  GetExtendedError		EQU 89	; 89	 59
 15468                                  CreateTempFile			EQU 90	; 90	 5A
 15469                                  CreateNewFile			EQU 91	; 91	 5B
 15470                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 15471                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 15472                                  					;	    CloseByName, CloseUser,
 15473                                  					;	    CloseUserProcess,
 15474                                  					;	    GetOpenFileList
 15475                                  UserOper			EQU 94	; 94	 5E Get and Set
 15476                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 15477                                  xNameTrans			EQU 96	; 96	 60
 15478                                  PathParse			EQU 97	; 97	 61
 15479                                  GetCurrentPSP			EQU 98	; 98	 62
 15480                                  Hongeul 			EQU 99	; 99	 63
 15481                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 15482                                  Set_Printer_Flag		EQU 100 ; 100	 64
 15483                                  GetExtCntry			EQU 101 ; 101	 65
 15484                                  GetSetCdPg			EQU 102 ; 102	 66
 15485                                  ExtHandle			EQU 103 ; 103	 67
 15486                                  Commit				EQU 104 ; 104	 68
 15487                                  GetSetMediaID			EQU 105 ; 105	 69
 15488                                  IFS_IOCTL			EQU 107 ; 107	 6B
 15489                                  ExtOpen 			EQU 108 ; 108	 6C
 15490                                  ;
 15491                                  ;ifdef ROMEXEC
 15492                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 15493                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 15494                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 15495                                  ;endif
 15496                                  ;
 15497                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 15498                                  OEM_C1				EQU 249 ; 249	 F9
 15499                                  OEM_C2				EQU 250 ; 250	 FA
 15500                                  OEM_C3				EQU 251 ; 251	 FB
 15501                                  OEM_C4				EQU 252 ; 252	 FC
 15502                                  OEM_C5				EQU 253 ; 253	 FD
 15503                                  OEM_C6				EQU 254 ; 254	 FE
 15504                                  OEM_C7				EQU 255 ; 255	 FF
 15505                                  
 15506                                  ; ----------------------------------------------------------------------
 15507                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 15508                                  ; ----------------------------------------------------------------------
 15509                                  
 15510                                  ;;	IF	STACKSW
 15511                                  
 15512                                  ;;
 15513                                  ;; Internal Stack Parameters
 15514                                  ;EntrySize		equ	8
 15515                                  ;
 15516                                  ;MinCount		equ	8
 15517                                  ;DefaultCount		equ	9
 15518                                  ;MaxCount		equ	64
 15519                                  ;
 15520                                  ;MinSize 		equ	32
 15521                                  ;DefaultSize		equ	128
 15522                                  ;MaxSize 		equ	512
 15523                                  
 15524                                  ;;	ENDIF
 15525                                  
 15526                                  ; ----------------------------------------------------------------------
 15527                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 15528                                  ; ----------------------------------------------------------------------
 15529                                  					  ;;Rev 3.30 Modification
 15530                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 15531                                  									  
 15532                                  ;*******************************					  
 15533                                  ;System Service call ( Int 15h )					  
 15534                                  ;*******************************					  
 15535                                  ;Function AH = 0C0h, Return system configuration			  
 15536                                  ;For PC and PCJR on return:						  
 15537                                  ;	(AH)	= 80h							  
 15538                                  ;	(CY)	= 1							  
 15539                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 15540                                  ;	(AH)	= 86h							  
 15541                                  ;	(CY)	= 1							  
 15542                                  ;For all others:							  
 15543                                  ;	(AH)	= 0							  
 15544                                  ;	(CY)	= 0							  
 15545                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 15546                                  ; System descriptor :							  
 15547                                  ;	DW	xxxx		length of descriptor in bytes,		  
 15548                                  ;				minimum length = 8			  
 15549                                  ;	DB	xx		model byte				  
 15550                                  ;				0FFh	= PC				  
 15551                                  ;				0FEh	= PC/XT, Portable		  
 15552                                  ;				0FDh	= PC/JR 			  
 15553                                  ;				0FCh	= PC/AT				  
 15554                                  ;				0F9h	= Convertable			  
 15555                                  ;				0F8h	= Model 80			  
 15556                                  ;				0E0 thru 0EFh = reserved		  
 15557                                  ;									  
 15558                                  ;	DB	xx		secondary model byte			  
 15559                                  ;				000h	= PC1				  
 15560                                  ;				000h	= PC/XT, Portable		  
 15561                                  ;				000h	= PC/JR 			  
 15562                                  ;				000h	= PC/AT 			  
 15563                                  ;				001h	= PC/AT Model 339		  
 15564                                  ;				003h	= PC/RT				  
 15565                                  ;				000h	= Convertable			  
 15566                                  ;									  
 15567                                  ;	DB	xx		bios revision level			  
 15568                                  ;				00 for first release, subsequent release  
 15569                                  ;				of code with same model byte and	  
 15570                                  ;				secondary model byte require revison level
 15571                                  ;				to increase by one.			  
 15572                                  ;									  
 15573                                  ;	DB	xx		feature information byte 1		  
 15574                                  ;				X0000000 = 1, bios use DMA channel 3	  
 15575                                  ;					 = 0, DMA channel 3 not used	  
 15576                                  ;									  
 15577                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 15578                                  ;					 = 0, 2nd Interrupt chip not present
 15579                                  ;									  
 15580                                  ;				00X00000 = 1, Real Time Clock present	  
 15581                                  ;					 = 0, Real Time Clock not present 
 15582                                  ;									  
 15583                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 15584                                  ;						called in keyboard interrupt
 15585                                  ;						(Int 09h).		  
 15586                                  ;					 = 0, Keyboard escape sequence not
 15587                                  ;						called. 		  
 15588                                  ;				0000XXXX reserved			  
 15589                                  ;									  
 15590                                  ;	DB	xx		feature information byte 2 - reserved	  
 15591                                  ;									  
 15592                                  ;	DB	xx		feature information byte 2 - reserved	  
 15593                                  ;									  
 15594                                  ;	DB	xx		feature information byte 2 - reserved	  
 15595                                  ;									  
 15596                                  ;	DB	xx		feature information byte 2 - reserved	  
 15597                                  ;									  
 15598                                  
 15599                                  ; 22/03/2019									  
 15600                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 15601 00000000 ????                    .bios_sd_leng:		resw 1				  
 15602 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 15603                                  .bios_sd_scnd_modelbyte: 
 15604 00000003 ??                      			resb 1					  
 15605 00000004 ??                      			resb 1					  
 15606 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 15607 00000006 ????????                			resb 4					  
 15608                                  endstruc					  
 15609                                  									  
 15610                                  ;FeatureByte1	bit map equates 					  
 15611                                  DMAchannel3		equ 10000000b					  
 15612                                  ScndIntController	equ 01000000b					  
 15613                                  RealTimeClock		equ 00100000b					  
 15614                                  KeyEscapeSeq		equ 00010000b					  
 15615                                  					;;End of Modification
 15616                                  
 15617                                  ; ----------------------------------------------------------------------
 15618                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 15619                                  ; ----------------------------------------------------------------------
 15620                                  ; 22/03/2019 - Retro DOS v4.0
 15621                                  
 15622                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 15623                                  
 15624                                  struc SysInitVars
 15625                                  ; MSDOS 3.3
 15626 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 15627 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 15628 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 15629 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 15630 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 15631 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 15632 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 15633 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 15634 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 15635 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 15636 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 15637 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 15638                                  ; MSDOS 6.0
 15639 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 15640 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 15641 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 15642 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 15643                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 15644 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 15645 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 15646 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 15647 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 15648 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 15649 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 15650 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 15651                                  .size:
 15652                                  endstruc
 15653                                  
 15654                                  ;This is added for more information exchage between DOS, BIOS.
 15655                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 15656                                  
 15657                                  ; 22/03/2019
 15658                                  struc SysInitVars_Ext
 15659 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 15660 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 15661                                  endstruc
 15662                                  
 15663                                  ; 09/06/2018
 15664                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 15665                                  SYSI_DPB    equ	0
 15666                                  SYSI_SFT    equ 4
 15667                                  SYSI_CLOCK  equ 8
 15668                                  SYSI_CON    equ 12
 15669                                  SYSI_MAXSEC equ 16
 15670                                  SYSI_BUF    equ 18 		
 15671                                  SYSI_CDS    equ 22
 15672                                  SYSI_FCB    equ 26
 15673                                  SYSI_KEEP   equ 30
 15674                                  SYSI_NUMIO  equ	32
 15675                                  SYSI_NCDS   equ	33
 15676                                  SYSI_DEV    equ 34
 15677                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 15678                                  SYSI_ATTR	  equ 38
 15679                                  SYSI_STRAT	  equ 40
 15680                                  SYSI_INTER	  equ 42
 15681                                  SYSI_NAME	  equ 44
 15682                                  SYSI_SPLICE	  equ 52
 15683                                  SYSI_IBMDOS_SIZE  equ 53
 15684                                  SYSI_IFS_DOSCALL@ equ 55
 15685                                  SYSI_IFS	  equ 59
 15686                                  SYSI_BUFFERS	  equ 63
 15687                                  SYSI_BOOT_DRIVE   equ 67
 15688                                  SYSI_DWMOVE	  equ 68
 15689                                  SYSI_EXT_MEM	  equ 69
 15690                                  
 15691                                  ;The SYSI_BUF of SysInitVars points to the following structure
 15692                                  
 15693                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 15694                                  
 15695                                  struc BUFFINF 	; BUFFINFO
 15696 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 15697 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 15698 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 15699 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 15700                                  
 15701 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 15702                                  				; are in HMA
 15703 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 15704                                  				;  used to read/write on disks
 15705 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 15706 00000015 ????                    .UU_EMS_NPA640:		resw 1
 15707 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 15708 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 15709 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 15710 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 15711 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 15712 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 15713 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 15714                                  .size:
 15715                                  endstruc
 15716                                  
 15717                                  ; ----------------------------------------------------------------------
 15718                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 15719                                  ; ----------------------------------------------------------------------
 15720                                  ; 22/03/2019 - Retro DOS v4.0
 15721                                  
 15722                                  ;**	CDS - Current Directory Structure
 15723                                  ;
 15724                                  ; CDS items are used bu the internal routines to store cluster numbers and
 15725                                  ; network identifiers for each logical name.  The ID field is used dually,
 15726                                  ; both as net ID and for a cluster number for local devices. In the case
 15727                                  ; of local devices, the cluster number will be -1 if there is a potential
 15728                                  ; of the disk being changed or if the path must be recracked.
 15729                                  ;
 15730                                  ;	Some pathnames have special preambles, such as
 15731                                  ;
 15732                                  ;		\\machine\sharename\...
 15733                                  ;	For these pathnames we can't allow ".." processing to back us
 15734                                  ;	up into the special front part of the name.  The CURDIR_END field
 15735                                  ;	holds the address of the seperator character which marks
 15736                                  ;	the split between the special preamble and the regular
 15737                                  ;	path list; ".." processing isn't allowed to back us up past
 15738                                  ;	(i.e., before) CURDIR_END
 15739                                  ;	For the root, it points at the leading /. For net
 15740                                  ;	assignments it points at the end (nul) of the initial assignment:
 15741                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 15742                                  ;	  ^		 ^		     ^
 15743                                  
 15744                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 15745                                  TEMPLEN 	EQU	DIRSTRLEN*2
 15746                                  
 15747                                  struc 		curdir_list
 15748                                  ; MSDOS 3.3
 15749 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 15750 00000043 ????                    .cdir_flags	resw	1		; various flags
 15751 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 15752 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 15753 0000004D ????                    .cdir_usr_word	resw	1
 15754 0000004F ????                    .cdir_end	resw	1		; end of assignment
 15755                                  ; MSDOS 6.0
 15756 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 15757 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 15758 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 15759                                  .size:
 15760                                  endstruc
 15761                                  
 15762                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 15763                                  						; ASM87 which doesn't allow
 15764                                  						; Size directive as a macro
 15765                                  						; argument
 15766                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 15767                                  
 15768                                  ;**	Flag values for CURDIR_FLAGS
 15769                                  
 15770                                  ;Flag word masks
 15771                                  curdir_isnet	EQU	1000000000000000B
 15772                                  curdir_isifs	EQU	1000000000000000B
 15773                                  curdir_inuse	EQU	0100000000000000B
 15774                                  curdir_splice	EQU	0010000000000000B
 15775                                  curdir_local	EQU	0001000000000000B
 15776                                  
 15777                                  ; ----------------------------------------------------------------------
 15778                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 15779                                  ; ----------------------------------------------------------------------
 15780                                  ; 25/03/2019 - Retro DOS v4.0
 15781                                  
 15782                                  ; system file table
 15783                                  
 15784                                  ;**	System File Table SuperStructure
 15785                                  ;
 15786                                  ;	The system file table entries are allocated in contiguous groups.
 15787                                  ;	There may be more than one such groups; the SF "superstructure"
 15788                                  ;	tracks the groups.
 15789                                  
 15790                                  struc	SF
 15791 00000000 ????????                .SFLink:	resd	1
 15792 00000004 ????                    .SFCount:	resw	1		; number of entries
 15793 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 15794                                  .size:
 15795                                  endstruc
 15796                                  
 15797                                  ;**	System file table entry
 15798                                  ;
 15799                                  ;	These are the structures which are at SFTABLE in the SF structure.
 15800                                  
 15801                                  struc	SF_ENTRY
 15802 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 15803                                  					;   if FCB then ref count
 15804 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 15805 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 15806 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 15807                                  					; Bit 15 = 1 if remote file
 15808                                  					;	 = 0 if local file or device
 15809                                  					; Bit 14 = 1 if date/time is not to be
 15810                                  					;   set from clock at CLOSE.  Set by
 15811                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 15812                                  					;   other reseters of the dirty bit
 15813                                  					;   (WRITE)
 15814                                  					; Bit 13 = Pipe bit (reserved)
 15815                                  					;
 15816                                  					; Bits 0-7 (old FCB_devid bits)
 15817                                  					; If remote file or local file, bit
 15818                                  					; 6=0 if dirty Device ID number, bits
 15819                                  					; 0-5 if local file.
 15820                                  					; bit 7=0 for local file, bit 7
 15821                                  					;      =1 for local I/O device
 15822                                  					; If local I/O device, bit 6=0 if EOF (input)
 15823                                  					;		Bit 5=1 if Raw mode
 15824                                  					;		Bit 0=1 if console input device
 15825                                  					;		Bit 1=1 if console output device
 15826                                  					;		Bit 2=1 if null device
 15827                                  					;		Bit 3=1 if clock device
 15828 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 15829                                  					; to device header if local device,
 15830                                  					; points to net device header if
 15831                                  					; remote
 15832 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 15833                                  ;.sf_lstclus:	resw	1 ; *	
 15834 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 15835 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 15836 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 15837 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 15838                                  ;
 15839                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 15840                                  ; ID
 15841                                  ;
 15842 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 15843 0000001B ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
 15844 0000001D ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 15845                                  ;
 15846                                  ; End of 7 bytes of file-system specific info.
 15847                                  ;
 15848 0000001E <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 15849                                  					; directory entry.  This is used by
 15850                                  					; close to detect file deleted and
 15851                                  					; disk changed errors.
 15852                                  ; SHARING INFO
 15853 00000029 ????????                .sf_chain:	resd	1		; link to next SF
 15854 0000002D ????                    .sf_UID:	resw	1
 15855 0000002F ????                    .sf_PID:	resw	1
 15856 00000031 ????                    .sf_MFT:	resw	1
 15857 00000033 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 15858 00000035 ????????                .sf_IFS_HDR:	resd 	1 ; **
 15859                                  .size:
 15860                                  endstruc
 15861                                  
 15862                                  ; ----------------------------------------------------------------------
 15863                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 15864                                  ; ----------------------------------------------------------------------
 15865                                  ; 11/06/2018 - Retro DOS v3.0
 15866                                  
 15867                                  ;Equates for COUNTRY INFORMATION.
 15868                                  SetCountryInfo		EQU	1	;country info
 15869                                  SetUcase		EQU	2	;uppercase table
 15870                                  SetLcase		EQU	3	;lowercase table (Reserved)
 15871                                  SetUcaseFile		EQU	4	;uppercase file spec table
 15872                                  SetFileList		EQU	5	;valid file character list
 15873                                  SetCollate		EQU	6	;collating sequence
 15874                                  SetDBCS 		EQU	7	;double byte character set
 15875                                  SetALL			EQU	-1	;all the entries
 15876                                  
 15877                                  ;DOS country and code page information table structure.
 15878                                  ;Internally, IBMDOS gives a pointer to this table.
 15879                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 15880                                  ;this structure.
 15881                                  
 15882                                  struc country_cdpg_info ; DOS_country_cdpg_info
 15883 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 15884 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 15885 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 15886 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 15887 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 15888 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 15889                                  
 15890 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 15891 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 15892                                  
 15893 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 15894 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 15895                                  
 15896 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 15897 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 15898                                  
 15899 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 15900 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 15901 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 15902 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 15903 00000067 ????                    .ccDFormat:		resw	1	;date format
 15904 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 15905                                  					;5 byte of (currency symbol+0)
 15906 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 15907 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 15908 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 15909 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 15910 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 15911 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 15912 00000078 ??                      .ccTFormat:		resb	1	;time format
 15913 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 15914 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 15915 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 15916                                  .size:
 15917                                  endstruc
 15918                                  
 15919                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 15920                                  
 15921                                  ; ======================================================================
 15922                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 15923                                  ; ======================================================================
 15924                                  ; 21/03/2019 - Retro DOS v4.0
 15925                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15926                                  
 15927                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 15928                                  ; 21/10/2022
 15929                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 15930                                  ; 22/10/2022
 15931                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 15932                                  ; 09/12/2022
 15933                                  DOSBIOCODESEG equ IOSYSCODESEG
 15934                                  
 15935                                  ; Note: These offset addresses must be chanqed when the code 
 15936                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 15937                                  
 15938                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 15939                                  
 15940                                  ; 09/12/2022
 15941                                  %if 0
 15942                                  
 15943                                  ; 13/05/2019
 15944                                  
 15945                                  ;IsWin386         equ 08CFh
 15946                                  ;V86_Crit_SetFocus equ 08D0h
 15947                                  ; 21/10/2022
 15948                                  IsWin386          equ 08D0h
 15949                                  V86_Crit_SetFocus equ 08D1h 
 15950                                  
 15951                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 15952                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15953                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 15954                                  
 15955                                  ;SysinitPresent	  equ 08FCh
 15956                                  ; 21/10/2022
 15957                                  SysinitPresent	  equ 08FDh
 15958                                  
 15959                                  inHMA		  equ 000Dh
 15960                                  xms		  equ 000Eh
 15961                                  ;FreeHMAPtr	  equ 08F6h
 15962                                  ;multrk_flag	  equ 0533h
 15963                                  ;ec35_flag	  equ 0535h
 15964                                  ;EOT		  equ 012Eh
 15965                                  ; 21/10/2022
 15966                                  FreeHMAPtr	  equ 08F7h
 15967                                  multrk_flag	  equ 052Fh
 15968                                  ec35_flag	  equ 0531h
 15969                                  EOT		  equ 012Ch
 15970                                  
 15971                                  ;NextStack	  equ 08BFh
 15972                                  ;IT_StackLoc	  equ 08C5h
 15973                                  ;IT_StackSize	  equ 08C9h
 15974                                  ; 21/10/2022
 15975                                  NextStack	  equ 08C0h
 15976                                  IT_StackLoc	  equ 08C6h
 15977                                  IT_StackSize	  equ 08CAh
 15978                                  
 15979                                  ;MoveDOSIntoHMA	  equ 08F8h
 15980                                  ; 21/10/2022
 15981                                  MoveDOSIntoHMA	  equ 08F9h
 15982                                  
 15983                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 15984                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 15985                                  ; 21/10/2022
 15986                                  INT19SEM equ 0640h ; (iosys5.txt)
 15987                                  I19_LST  equ 0641h ; (iosys5.txt)
 15988                                  
 15989                                  %endif
 15990                                  
 15991                                  ; 09/12/2022
 15992                                  seg_reinit equ _seg_reinit
 15993                                  ec35_flag  equ ec35flag		
 15994                                  INT19SEM   equ int19sem
 15995                                  I19_LST    equ i19_lst
 15996                                  
 15997                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 15998                                  INT19OLD08 equ I19_LST+6
 15999                                  INT19OLD09 equ I19_LST+11
 16000                                  INT19OLD0A equ I19_LST+16
 16001                                  INT19OLD0B equ I19_LST+21
 16002                                  INT19OLD0C equ I19_LST+26
 16003                                  INT19OLD0D equ I19_LST+31
 16004                                  INT19OLD0E equ I19_LST+36
 16005                                  INT19OLD70 equ I19_LST+41
 16006                                  INT19OLD72 equ I19_LST+46
 16007                                  INT19OLD73 equ I19_LST+51
 16008                                  INT19OLD74 equ I19_LST+56
 16009                                  INT19OLD76 equ I19_LST+61
 16010                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 16011                                  
 16012                                  ; 09/12/2022
 16013                                  %if 0
 16014                                  
 16015                                  ;keyrd_func	equ 04E9h
 16016                                  ;keysts_func	equ 04EAh
 16017                                  ;t_switch	equ 04F6h
 16018                                  ; 21/10/2022
 16019                                  keyrd_func	equ 04E5h
 16020                                  keysts_func	equ 04E6h
 16021                                  t_switch	equ 04F2h
 16022                                  
 16023                                  ; 22/10/2022
 16024                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 16025                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 16026                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 16027                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 16028                                  
 16029                                  %endif
 16030                                  
 16031                                  ; 09/12/2022
 16032                                  BCODESTART	equ BIOSDATAWORD
 16033                                  RE_INIT		equ re_init
 16034                                  
 16035                                  ; ----------------------------------------------------------------------
 16036                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 16037                                  ; ----------------------------------------------------------------------
 16038                                  ; 15/04/2019 - Retro DOS v4.0
 16039                                  
 16040                                  CONFIG_BEGIN        equ  '['
 16041                                  CONFIG_BREAK        equ  'C'
 16042                                  CONFIG_BUFFERS      equ  'B'
 16043                                  CONFIG_COMMENT      equ  'Y'
 16044                                  CONFIG_COUNTRY      equ  'Q'
 16045                                  CONFIG_DEVICE       equ  'D'
 16046                                  CONFIG_DEVICEHIGH   equ  'U'
 16047                                  CONFIG_DOS          equ  'H'
 16048                                  CONFIG_DRIVPARM     equ  'P'
 16049                                  CONFIG_FCBS         equ  'X'
 16050                                  CONFIG_FILES        equ  'F'
 16051                                  CONFIG_INCLUDE      equ  'J'
 16052                                  CONFIG_INSTALL      equ  'I'
 16053                                  CONFIG_INSTALLHIGH  equ  'W'
 16054                                  CONFIG_LASTDRIVE    equ  'L'
 16055                                  CONFIG_MENUCOLOR    equ  'R'
 16056                                  CONFIG_MENUDEFAULT  equ  'A'
 16057                                  CONFIG_MENUITEM     equ  'E'
 16058                                  CONFIG_MULTITRACK   equ  'M'
 16059                                  CONFIG_NUMLOCK      equ  'N'
 16060                                  CONFIG_REM          equ  '0'
 16061                                  CONFIG_SEMICOLON    equ  ';'
 16062                                  CONFIG_SET          equ  'V'
 16063                                  CONFIG_SHELL        equ  'S'
 16064                                  CONFIG_STACKS       equ  'K'
 16065                                  CONFIG_SUBMENU      equ  'O'
 16066                                  CONFIG_SWITCHES     equ  '1'
 16067                                  
 16068                                  CONFIG_UNKNOWN      equ  'Z'
 16069                                  
 16070                                  CONFIG_OPTION_QUERY equ 80h
 16071                                  
 16072                                  ; ----------------------------------------------------------------------
 16073                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 16074                                  ; ----------------------------------------------------------------------
 16075                                  ; 21/03/2019 - Retro DOS v4.0
 16076                                  
 16077                                  true	equ	0FFFFh
 16078                                  false	equ	0
 16079                                  cr	equ	13
 16080                                  lf	equ	10
 16081                                  tab	equ	9
 16082                                  
 16083                                  multMULT	   equ	4Ah
 16084                                  multMULTGETHMAPTR  equ	1
 16085                                  multMULTALLOCHMA   equ	2
 16086                                  
 16087                                  ;NOEXEC    equ	FALSE
 16088                                  
 16089                                  stacksw    equ	true	;include switchable hardware stacks
 16090                                  mycds_size equ	88	;size of curdir_list. if it is not
 16091                                  			;the same, then will generate compile error.
 16092                                  
 16093                                  entrysize   equ     8
 16094                                  
 16095                                  mincount    equ     8
 16096                                  defaultcount equ    9
 16097                                  maxcount    equ     64
 16098                                  
 16099                                  minsize     equ     32
 16100                                  defaultsize equ     128
 16101                                  maxsize     equ     512
 16102                                  
 16103                                  ;%define allocbyte  byte [es:bp+0]
 16104                                  ;%define intlevel   byte [es:bp+1]
 16105                                  ;%define savedsp    word [es:bp+2]
 16106                                  ;%define savedss    word [es:bp+4]
 16107                                  ;%define newsp	    word [es:bp+6]
 16108                                  
 16109                                  allocbyte   equ     0
 16110                                  intlevel    equ     1
 16111                                  savedsp     equ     2
 16112                                  savedss     equ     4
 16113                                  newsp       equ     6
 16114                                  
 16115                                  free	    equ     0
 16116                                  allocated   equ     1
 16117                                  overflowed  equ     2
 16118                                  clobbered   equ     3
 16119                                  
 16120                                  ;---------------------------------------
 16121                                  ; external variable defined in ibmbio module for multi-track
 16122                                  
 16123                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 16124                                  			  ; it on after handling config.sys file as a
 16125                                  			  ; default value,if multrk_flag = multrk_off1.
 16126                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 16127                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 16128                                  
 16129                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 16130                                  
 16131                                  SYSINIT$:
 16132                                  	;IF	STACKSW 
 16133                                  	; include MSSTACK.INC	;Main stack program and data definitions
 16134                                  	; include STKMES.INC	;Fatal stack error message
 16135                                  	;   public Endstackcode
 16136                                  ;Endstackcode	label byte
 16137                                  	;ENDIF
 16138                                  
 16139                                  ; 05/07/2018
 16140                                  ; ----------------------------------------------------------------------
 16141                                  ; 04/06/2018 - Retro DOS v3.0
 16142                                  
 16143                                  ; ----------------------------------------------------------------------
 16144                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 16145                                  ; ----------------------------------------------------------------------
 16146                                  
 16147                                  ;	MSStack.inc
 16148                                  ;
 16149                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 16150                                  ;	should follow the standard Interrupt Sharing Scheme which has
 16151                                  ;	a standard header structure.
 16152                                  ;	Fyi, the following shows the relations between
 16153                                  ;	the interrupt vector and interrupt level.
 16154                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 16155                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 16156                                  ;	MSSTACK module modifies the following interrupt vectors
 16157                                  ;	to meet the standard Interrupt Sharing standard;
 16158                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 16159                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 16160                                  ;	should be initialized to indicat whether this interrupt handler is
 16161                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 16162                                  ;	program header is initialized in STKINIT.INC module.
 16163                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 16164                                  ;
 16165                                  
 16166                                  ;  User specifies the number of stack elements - default = 9
 16167                                  ;						 minimum = 8
 16168                                  ;						 maximum = 64
 16169                                  ;
 16170                                  ;  Intercepts Asynchronous Hardware Interrupts only
 16171                                  ;
 16172                                  ;  Picks a stack from pool of stacks and switches to it
 16173                                  ;
 16174                                  ;  Calls the previously saved interrupt vector after pushing flags
 16175                                  ;
 16176                                  ;  On return, returns the stack to the stack pool
 16177                                  ;
 16178                                  
 16179                                  ; This is a modification of STACKS:
 16180                                  ; 1. To fix a bug which was causing the program to take up too much space.
 16181                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 16182                                  ;    . Clobbers the stack that got too big instead of innocent stack
 16183                                  ;    . Allows system to work if the only stack that got too big was the most
 16184                                  ;      deeply nested one
 16185                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 16186                                  ; 4. Does not intercept any interupts on a PCjr.
 16187                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 16188                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 16189                                  
 16190                                  		;EVEN
 16191                                  ;align 2
 16192                                  		; 21/10/2022
 16193                                  
 16194 00000000 0000                    		dw	0	; spare field but leave these in order
 16195 00000002 0000                    stackcount:	dw	0
 16196 00000004 0000                    stackat: 	dw	0
 16197 00000006 0000                    stacksize:	dw	0
 16198 00000008 0000                    stacks:		dw	0
 16199 0000000A 0000                    		dw	0
 16200                                  
 16201 0000000C [0800]                  firstentry:	dw	stacks
 16202 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16203 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16204                                  
 16205                                  ;***********************************************************************
 16206                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 16207                                  
 16208                                  ; ----------------------------------------------------------------------
 16209                                  
 16210 00000012 00000000                old02:	dd	0
 16211                                  
 16212                                  int02:
 16213                                  
 16214                                  ; *********************************************************************
 16215                                  ;
 16216                                  ; this is special support for the pc convertible / nmi handler
 16217                                  ;
 16218                                  ;	on the pc convertible, there is a situation where an nmi can be 
 16219                                  ;	caused by using the "out" instructions to certain ports. when this
 16220                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 16221                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 16222                                  ;	includes other type of interrupts (hardware and software), and
 16223                                  ;	also includes other type of nmi's. when any nmi has occured,
 16224                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 16225                                  ;	the software takes specific steps to allow further interrupting.
 16226                                  ;
 16227                                  ;	for pc convertible, the situation where the nmi is generated by the
 16228                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 16229                                  ;	otherwords, it is actually a "restartable exception". in this
 16230                                  ;	case, the software handler must be able to get to the stack in
 16231                                  ;	order to figure out what instruction caused the problem, where
 16232                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 16233                                  ;	we will not switch stacks in this situation. this situation is
 16234                                  ;	detected by interrogating port 62h, and checking for a bit value
 16235                                  ;	of 80h. if set, *****do not switch stacks*****.
 16236                                  ;
 16237                                  ; *********************************************************************
 16238                                  
 16239 00000016 50                      	push	ax
 16240 00000017 06                      	push	es
 16241 00000018 B800F0                  	mov	ax,0F000h
 16242 0000001B 8EC0                    	mov	es,ax
 16243                                  	; 02/11/2022
 16244 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 16245 00000023 07                      	pop	es
 16246 00000024 750C                    	jne	short normal02
 16247                                  
 16248 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 16249                                  				; 0-3: values of DIP switches
 16250                                  				; 5: 1=Timer 2 channel out
 16251                                  				; 6: 1=I/O channel check
 16252                                  				; 7: 1=RAM parity check error occurred.
 16253 00000028 A880                    	test	al,80h
 16254 0000002A 7406                    	jz	short normal02
 16255                                  special02:
 16256 0000002C 58                      	pop	ax
 16257 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 16258                                  normal02:
 16259 00000032 58                      	pop	ax
 16260 00000033 E81101                  	call	do_int_stacks
 16261 00000036 [1200]                  	dw	old02
 16262                                  
 16263                                  ; ----------------------------------------------------------------------
 16264                                  
 16265 00000038 00000000                old08:	dd	0
 16266                                  
 16267                                  int08:
 16268 0000003C E80801                  	call	do_int_stacks
 16269 0000003F [3800]                  	dw	old08
 16270                                  
 16271                                  ; ----------------------------------------------------------------------
 16272                                  
 16273 00000041 00000000                old09:	dd	0
 16274                                  
 16275                                  int09:
 16276                                  
 16277                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 16278                                  ; as its first instruction for compatibility reasons
 16279                                  
 16280 00000045 EB02                    	jmp	short keyboard_lbl
 16281 00000047 90                      	nop
 16282 00000048 00                      	db	0
 16283                                  
 16284                                  keyboard_lbl:
 16285 00000049 E8FB00                  	call	do_int_stacks
 16286 0000004C [4100]                  	dw	old09
 16287                                  
 16288                                  ; ----------------------------------------------------------------------
 16289                                  
 16290 0000004E 00000000                old70:	dd	0
 16291                                  
 16292                                  int70:
 16293 00000052 E8F200                  	call	do_int_stacks
 16294 00000055 [4E00]                  	dw	old70
 16295                                  
 16296                                  ; ----------------------------------------------------------------------
 16297                                  
 16298                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 16299                                  ;public	int&a
 16300                                  ;public	old&a
 16301                                  ;public	firstflag&a
 16302                                  ;int&a	proc	far
 16303                                  ;	jmp	short entry_int&a&_stk
 16304                                  ;old&a	dd	  0		;forward pointer
 16305                                  ;	dw	  424bh 	;compatible signature for int. sharing
 16306                                  ;firstflag&a db   0		;the firstly hooked.
 16307                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 16308                                  ;	db	7 dup (0)	;reserved for future.
 16309                                  ;entry_int&a&_stk:
 16310                                  ;	call	do_int_stacks
 16311                                  ;	dw	old&a
 16312                                  ;intret_&a:
 16313                                  ;	iret
 16314                                  ;int&a	endp
 16315                                  ;	endm
 16316                                  
 16317                                  ; ----------------------------------------------------------------------
 16318                                  
 16319                                  int0A:
 16320 00000057 EB10                    	jmp	short entry_int0A_stk
 16321 00000059 00000000                old0A:	dd	0	
 16322 0000005D 4B42                    	dw	424Bh
 16323                                  firstflag0A:
 16324 0000005F 00                      	db	0
 16325 00000060 EB0C                    	jmp	short intret_0A
 16326 00000062 00<rep 7h>              	times	7 db 0
 16327                                  
 16328                                  entry_int0A_stk:
 16329 00000069 E8DB00                  	call	do_int_stacks
 16330 0000006C [5900]                  	dw	old0A
 16331                                  intret_0A:
 16332 0000006E CF                      	iret
 16333                                  
 16334                                  ; ----------------------------------------------------------------------
 16335                                  
 16336                                  int0B:
 16337 0000006F EB10                    	jmp	short entry_int0B_stk
 16338 00000071 00000000                old0B:	dd	0	
 16339 00000075 4B42                    	dw	424Bh
 16340                                  firstflag0B:
 16341 00000077 00                      	db	0
 16342 00000078 EB0C                    	jmp	short intret_0B
 16343 0000007A 00<rep 7h>              	times	7 db 0
 16344                                  
 16345                                  entry_int0B_stk:
 16346 00000081 E8C300                  	call	do_int_stacks
 16347 00000084 [7100]                  	dw	old0B
 16348                                  intret_0B:
 16349 00000086 CF                      	iret
 16350                                  
 16351                                  ; ----------------------------------------------------------------------
 16352                                  
 16353                                  int0C:
 16354 00000087 EB10                    	jmp	short entry_int0C_stk
 16355 00000089 00000000                old0C:	dd	0	
 16356 0000008D 4B42                    	dw	424Bh
 16357                                  firstflag0C:
 16358 0000008F 00                      	db	0
 16359 00000090 EB0C                    	jmp	short intret_0C
 16360 00000092 00<rep 7h>              	times	7 db 0
 16361                                  
 16362                                  entry_int0C_stk:
 16363 00000099 E8AB00                  	call	do_int_stacks
 16364 0000009C [8900]                  	dw	old0C
 16365                                  intret_0C:
 16366 0000009E CF                      	iret
 16367                                  
 16368                                  ; ----------------------------------------------------------------------
 16369                                  
 16370                                  int0D:
 16371 0000009F EB10                    	jmp	short entry_int0D_stk
 16372 000000A1 00000000                old0D:	dd	0	
 16373 000000A5 4B42                    	dw	424Bh
 16374                                  firstflag0D:
 16375 000000A7 00                      	db	0
 16376 000000A8 EB0C                    	jmp	short intret_0D
 16377 000000AA 00<rep 7h>              	times	7 db 0
 16378                                  
 16379                                  entry_int0D_stk:
 16380 000000B1 E89300                  	call	do_int_stacks
 16381 000000B4 [A100]                  	dw	old0D
 16382                                  intret_0D:
 16383 000000B6 CF                      	iret
 16384                                  
 16385                                  ; ----------------------------------------------------------------------
 16386                                  
 16387                                  int0E:
 16388 000000B7 EB10                    	jmp	short entry_int0E_stk
 16389 000000B9 00000000                old0E:	dd	0	
 16390 000000BD 4B42                    	dw	424Bh
 16391                                  firstflag0E:
 16392 000000BF 00                      	db	0
 16393 000000C0 EB0C                    	jmp	short intret_0E
 16394 000000C2 00<rep 7h>              	times	7 db 0
 16395                                  
 16396                                  entry_int0E_stk:
 16397 000000C9 E87B00                  	call	do_int_stacks
 16398 000000CC [B900]                  	dw	old0E
 16399                                  intret_0E:
 16400 000000CE CF                      	iret
 16401                                  
 16402                                  ; ----------------------------------------------------------------------
 16403                                  
 16404                                  int72:
 16405 000000CF EB10                    	jmp	short entry_int72_stk
 16406 000000D1 00000000                old72:	dd	0	
 16407 000000D5 4B42                    	dw	424Bh
 16408                                  firstflag72:
 16409 000000D7 00                      	db	0
 16410 000000D8 EB0C                    	jmp	short intret_72
 16411 000000DA 00<rep 7h>              	times	7 db 0
 16412                                  
 16413                                  entry_int72_stk:
 16414 000000E1 E86300                  	call	do_int_stacks
 16415 000000E4 [D100]                  	dw	old72
 16416                                  intret_72:
 16417 000000E6 CF                      	iret
 16418                                  
 16419                                  ; ----------------------------------------------------------------------
 16420                                  
 16421                                  int73:
 16422 000000E7 EB10                    	jmp	short entry_int73_stk
 16423 000000E9 00000000                old73:	dd	0	
 16424 000000ED 4B42                    	dw	424Bh
 16425                                  firstflag73:
 16426 000000EF 00                      	db	0
 16427 000000F0 EB0C                    	jmp	short intret_73
 16428 000000F2 00<rep 7h>              	times	7 db 0
 16429                                  
 16430                                  entry_int73_stk:
 16431 000000F9 E84B00                  	call	do_int_stacks
 16432 000000FC [E900]                  	dw	old73
 16433                                  intret_73:
 16434 000000FE CF                      	iret
 16435                                  
 16436                                  ; ----------------------------------------------------------------------
 16437                                  
 16438                                  int74:
 16439 000000FF EB10                    	jmp	short entry_int74_stk
 16440 00000101 00000000                old74:	dd	0	
 16441 00000105 4B42                    	dw	424Bh
 16442                                  firstflag74:
 16443 00000107 00                      	db	0
 16444 00000108 EB0C                    	jmp	short intret_74
 16445 0000010A 00<rep 7h>              	times	7 db 0
 16446                                  
 16447                                  entry_int74_stk:
 16448 00000111 E83300                  	call	do_int_stacks
 16449 00000114 [0101]                  	dw	old74
 16450                                  intret_74:
 16451 00000116 CF                      	iret
 16452                                  
 16453                                  ; ----------------------------------------------------------------------
 16454                                  
 16455                                  int76:
 16456 00000117 EB10                    	jmp	short entry_int76_stk
 16457 00000119 00000000                old76:	dd	0	
 16458 0000011D 4B42                    	dw	424Bh
 16459                                  firstflag76:
 16460 0000011F 00                      	db	0
 16461 00000120 EB0C                    	jmp	short intret_76
 16462 00000122 00<rep 7h>              	times	7 db 0
 16463                                  
 16464                                  entry_int76_stk:
 16465 00000129 E81B00                  	call	do_int_stacks
 16466 0000012C [1901]                  	dw	old76
 16467                                  intret_76:
 16468 0000012E CF                      	iret
 16469                                  
 16470                                  ; ----------------------------------------------------------------------
 16471                                  
 16472                                  int77:
 16473 0000012F EB10                    	jmp	short entry_int77_stk
 16474 00000131 00000000                old77:	dd	0	
 16475 00000135 4B42                    	dw	424Bh
 16476                                  firstflag77:
 16477 00000137 00                      	db	0
 16478 00000138 EB0C                    	jmp	short intret_77
 16479 0000013A 00<rep 7h>              	times	7 db 0
 16480                                  
 16481                                  entry_int77_stk:
 16482 00000141 E80300                  	call	do_int_stacks
 16483 00000144 [3101]                  	dw	old77
 16484                                  intret_77:
 16485 00000146 CF                      	iret
 16486                                  
 16487                                  ; ----------------------------------------------------------------------
 16488                                  
 16489                                  ;********************************************************************
 16490                                  ;common routines
 16491                                  ;********************************************************************
 16492                                  
 16493                                  ; do interrupt stack switching. the fake return address holds
 16494                                  ; a pointer to the far-pointer of the actual interrupt
 16495                                  ; service routine
 16496                                  
 16497                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 16498                                  ; 21/03/2019 - Retro DOS v4.0
 16499                                  
 16500                                  ;allocbyte   equ 0
 16501                                  ;intlevel    equ 1
 16502                                  ;savedsp     equ 2
 16503                                  ;savedss     equ 4
 16504                                  ;newsp       equ 6
 16505                                  
 16506                                  do_int_stacks:
 16507 00000147 50                      	push	ax
 16508 00000148 55                      	push	bp
 16509 00000149 06                      	push	es
 16510 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 16511 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 16512 00000154 B001                    	mov	al,allocated ; 1
 16513                                  	; 21/10/2022
 16514                                  	;xchg	[es:bp+allocbyte],al 
 16515                                  	; 11/12/2022
 16516 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 16517 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 16518 0000015C 754F                    	jne	short notfree02
 16519                                  
 16520 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 16521                                  
 16522                                  found02:
 16523 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 16524 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 16525                                  
 16526 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 16527                                  
 16528 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 16529                                  	; 21/10/2022
 16530                                  	;mov	bp,[es:bp+6]
 16531                                  	; 11/12/2022
 16532                                  	;cmp	[es:bp+0],ax	
 16533 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 16534 00000176 7542                    	jne	short foundbad02
 16535                                  
 16536                                  	;mov	ax,es			; point ss,sp to the new stack
 16537                                  	;mov	es,bp
 16538                                  	;mov	bp,sp
 16539                                  	;mov	bp,[bp+6]
 16540                                  	;mov	ss,ax
 16541                                  	;mov	sp,es
 16542                                  	;mov	es,ax
 16543                                  	;mov	bp,[cs:bp]
 16544                                  
 16545                                  	; 21/10/2022 (MSDOS 5.0 code SYSINIT code)
 16546 00000178 55                      	push    bp
 16547 00000179 89E5                    	mov     bp,sp
 16548 0000017B 8B4608                  	mov     ax,[bp+8]
 16549 0000017E 5D                      	pop     bp
 16550 0000017F 06                      	push    es
 16551 00000180 17                      	pop     ss
 16552 00000181 89EC                    	mov     sp,bp
 16553 00000183 89C5                    	mov     bp,ax
 16554                                  	; 11/12/2022
 16555                                  	;mov	bp,[cs:bp+0]	
 16556 00000185 2E8B6E00                	mov	bp,[cs:bp]	
 16557                                  
 16558 00000189 9C                      	pushf				; go execute the real interrupt handler
 16559                                  	; 11/12/2022
 16560 0000018A 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 16561                                  	; 21/10/2022
 16562                                  	;call	far [cs:bp+0]
 16563                                  
 16564 0000018E 89E5                    	mov	bp,sp			; retrieve the table offset for us
 16565                                  	; 11/12/2022
 16566 00000190 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 16567                                  	; 21/10/2022
 16568                                  	;mov	bp,[es:bp+0]
 16569 00000194 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 16570 00000198 268B6602                	mov	sp,[es:bp+savedsp]
 16571                                  
 16572                                  	; 11/12/2022
 16573                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 16574                                  	; 21/10/2022
 16575 0000019C 26C6460000              	mov	byte [es:bp],free ; 0
 16576 000001A1 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 16577                                  
 16578 000001A6 07                      	pop	es
 16579 000001A7 5D                      	pop	bp			; saved on entry
 16580 000001A8 58                      	pop	ax			; saved on entry
 16581 000001A9 83C402                  	add	sp,2
 16582 000001AC CF                      	iret				; done with this interrupt
 16583                                  
 16584                                  notfree02:
 16585 000001AD 3C01                    	cmp	al,allocated		; error flag
 16586 000001AF 7404                    	je	short findnext02	;  no, continue
 16587                                  	; 11/12/2022
 16588                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 16589                                  	; 21/10/2022
 16590 000001B1 26864600                	xchg	[es:bp],al
 16591                                  
 16592                                  findnext02:
 16593 000001B5 E81200                  	call	longpath
 16594 000001B8 EBAA                    	jmp	short found02
 16595                                  
 16596                                  foundbad02:
 16597 000001BA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16598 000001BF 72F4                    	jc	short findnext02
 16599 000001C1 89C5                    	mov	bp,ax			; flag this entry
 16600                                  	; 11/12/2022
 16601                                  	;mov	byte [es:bp+allocbyte],clobbered
 16602                                  	; 21/10/2022
 16603 000001C3 26C6460003              	mov	byte [es:bp],clobbered ; 3
 16604 000001C8 EBEB                    	jmp	short findnext02	; keep looking
 16605                                  
 16606                                  ; ----------------------------------------------------------------------
 16607                                  
 16608                                  ; Common routines
 16609                                  
 16610                                  longpath:
 16611                                  	; 21/03/2019
 16612 000001CA 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 16613                                  lploopp:
 16614                                  	; 11/12/2022
 16615                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 16616                                  	; 21/10/2022
 16617 000001CF 26807E0000              	cmp	byte [es:bp],free
 16618 000001D4 7512                    	jne	short inuse		;  no, try next one
 16619                                  
 16620 000001D6 B001                    	mov	al,allocated
 16621                                  	; 11/12/2022
 16622                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 16623                                  	; 21/10/2022
 16624 000001D8 26864600                	xchg	[es:bp],al
 16625 000001DC 3C00                    	cmp	al,free 		; is it still free?
 16626 000001DE 7414                    	je	short found		;  yes, go use it
 16627                                  
 16628 000001E0 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 16629 000001E2 7404                    	je	short inuse		;  no, check the next one
 16630                                  
 16631                                  	; 11/12/2022
 16632                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 16633                                  	; 21/10/2022
 16634 000001E4 26884600                	mov	[es:bp],al
 16635                                  inuse:
 16636 000001E8 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16637 000001ED 7406                    	je	short fatal
 16638 000001EF 83ED08                  	sub	bp,entrysize
 16639 000001F2 EBDB                    	jmp	short lploopp
 16640                                  found:
 16641 000001F4 C3                      	retn
 16642                                  fatal:
 16643 000001F5 1E                      	push	ds
 16644 000001F6 B800F0                  	mov	ax,0F000h		;look at the model byte
 16645 000001F9 8ED8                    	mov	ds,ax
 16646 000001FB 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 16647 00000200 1F                      	pop	ds
 16648 00000201 7504                    	jne	short skip_nmis
 16649                                  
 16650 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
 16651 00000205 E672                    	out	72h,al
 16652                                  
 16653                                  skip_nmis:
 16654 00000207 FA                      	cli				; disable and mask
 16655 00000208 B0FF                    	mov	al,0FFh			;   all other ints
 16656 0000020A E621                    	out	021h,al
 16657 0000020C E6A1                    	out	0A1h,al
 16658                                  
 16659 0000020E 8CCE                    	mov	si,cs
 16660 00000210 8EDE                    	mov	ds,si
 16661 00000212 BE[3902]                	mov	si,fatal_msg
 16662                                  ;SR;
 16663                                  ;   We set all foci to this VM to issue the stack failure message
 16664                                  ;
 16665 00000215 50                      	push	ax
 16666 00000216 1E                      	push	ds
 16667                                  	;;mov	ax,Bios_Data ; 0070h
 16668                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16669                                  	; 21/10/2022
 16670 00000217 B87000                  	mov	ax,DOSBIODATASEG
 16671 0000021A 8ED8                    	mov	ds,ax
 16672                                  
 16673                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 16674 0000021C F606[CE08]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 16675 00000221 1F                      	pop	ds
 16676 00000222 58                      	pop	ax
 16677 00000223 7405                    	jz	short fatal_loop	; win386 not present, continue
 16678                                  
 16679                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 16680                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 16681                                  	; 21/10/2022
 16682 00000225 9A[CF08]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 16683                                  ;
 16684                                  ;SR; We do not bother about the returned status of this call. 
 16685                                  ;
 16686                                  fatal_loop:
 16687 0000022A AC                      	lodsb
 16688 0000022B 3C24                    	cmp	al,'$'
 16689 0000022D 7408                    	je	short fatal_done
 16690                                  
 16691 0000022F B307                    	mov	bl,7
 16692 00000231 B40E                    	mov	ah,14
 16693 00000233 CD10                    	int	10h			; whoops, this enables ints
 16694 00000235 EBF3                    	jmp	short fatal_loop
 16695                                  
 16696                                  fatal_done:
 16697 00000237 EBFE                    	jmp	short fatal_done
 16698                                  
 16699                                  
 16700                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 16701                                  ; ----------------------------------------------------------------------
 16702                                  ;	include msbio.cl5		; fatal stack error message
 16703                                  
 16704                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 16705                                  
 16706                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 16707                                  ; ----------------------------------------------------------------------
 16708                                  ; 04/06/2018 - Retro DOS v3.0
 16709                                  
 16710                                  fatal_msg:
 16711 00000239 0D0A                    	db	0Dh,0Ah
 16712 0000023B 070D0A                  	db	7,0Dh,0Ah
 16713 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 16713 00000247 737461636B206F7665-
 16713 00000250 72666C6F770D0A     
 16714 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 16714 00000260 6C7465640D0A24     
 16715                                  
 16716                                  endstackcode:
 16717                                  
 16718                                  ; ----------------------------------------------------------------------
 16719                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 16720                                  ; ----------------------------------------------------------------------
 16721                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 16722                                  
 16723                                  ; 22/03/2019 - Retro DOS v4.0
 16724                                  
 16725                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 16726                                  
 16727                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 16728                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 16729                                  
 16730                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16731                                  ; ----------------------------------------------------------------------
 16732                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 16733                                  
 16734                                  SYSINIT:	
 16735 00000267 E91C02                          JMP	GOINIT
 16736                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 16737                                  
 16738                                  ; ----------------------------------------------------------------------
 16739                                  
 16740                                  struc DDHighInfo
 16741 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 16742 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 16743 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 16744                                  endstruc
 16745                                  
 16746                                  ; 22/03/2019 - Retro DOS v4.0
 16747                                  
 16748 0000026A 00                      runhigh: db	0
 16749                                  
 16750                                  ; 02/11/2022
 16751                                  ;align 4
 16752                                  
 16753                                  DOSINFO: 
 16754 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 16755                                  ;MSDOS:
 16756                                  dos_temp_location: ; dword ; MSDOS 6.0
 16757                                  dosinit:		; MSDOS 6.0
 16758 0000026F 0000                    	dw	0
 16759                                  
 16760                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16761                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 16762                                  ;	dw	0
 16763                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 16764                                  
 16765                                  CURRENT_DOS_LOCATION:
 16766 00000271 0000                    	dw	0
 16767                                  
 16768                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 16769                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 16770                                  
 16771                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16772                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 16773                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16774                                  
 16775                                  DEVICE_LIST:
 16776 00000273 00000000                	dd	0
 16777                                  
 16778                                  ; 04/06/2018 - Retro DOS v3.0
 16779                                  ; 28/03/2018
 16780                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 16781                                  ;
 16782                                  sysi_country:	
 16783 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 16784                                  
 16785                                  ; MSDOS 6.0
 16786 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 16787                                  
 16788 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 16789 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 16790                                  
 16791 00000283 0000                    def_php:	dw	0
 16792                                  
 16793                                  ; M022--
 16794                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 16795                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 16796                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 16797                                  ;  the new home.
 16798                                  
 16799                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 16800                                  ; 21/10/2022
 16801                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 16802                                  
 16803                                  ; 22/10/2022
 16804                                  seg_reinit_ptr:	; label dword
 16805 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 16806                                  temp_bcode_seg:
 16807                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 16808                                  		; 22/10/2022
 16809 00000287 9D02                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 16810                                  
 16811                                  fake_floppy_drv:
 16812 00000289 00                      		db	0	; set to 1 if this machine
 16813                                  				; does not have any floppies!!!
 16814                                  
 16815                                  ; Internal Stack Parameters
 16816                                  
 16817 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 16818 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 16819 0000028E 00000000                stack_addr:	dd	0	
 16820                                  
 16821                                  ; 05/06/2018 - Retro DOS v3.0
 16822                                  
 16823                                  ; various default values
 16824                                  
 16825 00000292 0100                    MEMORY_SIZE:	dw	1
 16826                                  
 16827                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 16828                                  
 16829 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 16830 00000296 00                      DEFAULT_DRIVE:	db	0	;initialized by ibminit.
 16831 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 16832 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 16833 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 16834                                  
 16835 0000029D 08                      FILES:	db	8	; enough files for pipe
 16836 0000029E 04                      FCBS:	db	4	; performance for recycling
 16837 0000029F 00                      KEEP:	db	0	; keep original set
 16838 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 16839                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 16840                                  ;CONFBOT: dw	0
 16841                                  ;ALLOCLIM: dw	0
 16842                                  CONFBOT: ; 02/11/2022
 16843 000002A1 0000                    top_of_cdss: dw 0
 16844                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 16845 000002A3 0000                    ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 16846                                  
 16847 000002A5 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 16848                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SAYSINIT compatibility)
 16849                                  ; (SYSINIT:02A9h)
 16850                                  command_line:
 16851 000002A9 0200                    	db	2,0
 16852 000002AB 50                      	db	'P'
 16853 000002AC 00                      	db	0
 16854 000002AD 00<rep 7Ch>             	times	124 db 0 ; db 124 dup(0)	
 16855                                  ; (SYSINIT:0329h)
 16856 00000329 00                      ZERO:	db	0
 16857 0000032A 00                      sepchr:	db	0
 16858 0000032B 0000                    linecount: dw	0			; line count in config.sys
 16859 0000032D 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 16860 00000335 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 16861                                  
 16862 00000337 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 16863 00000338 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 16864                                  
 16865 00000339 0000                    buf_prev_off:	dw	0
 16866                                  
 16867                                          ;IF      NOT NOEXEC
 16868                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 16869                                          ;ENDIF
 16870                                  
 16871                                  ; 01/05/2018
 16872                                  COMEXE:
 16873 0000033B 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 16874 0000033D [A902]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 16875 0000033F 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16876 00000341 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 16877 00000343 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16878 00000345 [2903]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 16879 00000347 0000                    		dw	0
 16880                                  
 16881                                  ; variables for install= command.
 16882                                  
 16883 00000349 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 16884                                  					;  indicating the pass number
 16885                                  					; 0 - do scan for DOS=HIGH/LOW
 16886                                  					; 1 - load device drivers
 16887                                  					; 2 - was to load IFS
 16888                                  					;      now it is unused
 16889                                  					; 3 - do install=
 16890                                  					; >3 - nop
 16891 0000034A 0000                    install_flag:	dw	0
 16892                                  
 16893                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 16894                                  has_installed	equ	00000010b	; sysinit_base installed.
 16895                                  
 16896 0000034C 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 16897 0000034E 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 16898 00000352 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 16899 00000356 0000                    checksum:	dw	0		; used by sum_up
 16900                                  
 16901 00000358 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 16902 0000036C 00                      ldexec_line:	db	0		;# of parm characters
 16903 0000036D 20                      ldexec_start:	db	' '
 16904 0000036E 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 16905                                  
 16906                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 16907                                  
 16908                                  instexe:
 16909 000003BE 0000                    iexec.environ:	dw	0		; seg addr of environment
 16910 000003C0 [6C03]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 16911 000003C2 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16912 000003C4 [5803]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 16913 000003C6 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16914 000003C8 [5803]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 16915 000003CA 0000                    		dw	0
 16916                                  
 16917                                  ; variables for comment=
 16918                                  
 16919 000003CC 00                      com_level:	db	0		; level of " " in command line
 16920 000003CD 00                      cmmt:		db	0		; length of comment string token
 16921 000003CE 00                      cmmt1:		db	0		; token
 16922 000003CF 00                      cmmt2:		db	0		; token
 16923 000003D0 00                      cmd_indicator:	db	0
 16924 000003D1 00                      donotshownum:	db	0
 16925                                  
 16926 000003D2 0000                    count:		dw	0
 16927 000003D4 0000                    org_count:	dw	0
 16928 000003D6 0000                    chrptr:		dw	0
 16929 000003D8 0000                    cntryfilehandle: dw	0
 16930 000003DA 0000                    old_area:	dw	0
 16931 000003DC 0000                    impossible_owner_size: dw 0		; paragraph
 16932                                  
 16933                                  bucketptr: ; label dword
 16934                                  bufptr:	   ; label dword		; leave this stuff in order!
 16935 000003DE 0000                    memlo:	dw	0
 16936                                  prmblk:	   ; label word
 16937 000003E0 0000                    memhi:	dw	0
 16938 000003E2 0000                    ldoff:	dw	0
 16939 000003E4 0000                    area:	dw	0
 16940                                  
 16941                                  ; Following is the request packet used to call INIT routines for 
 16942                                  ; all device drivers. Some fields may be accessed individually in
 16943                                  ; the code, and hence have individual labels, but they should not
 16944                                  ; be separated.
 16945                                  
 16946 000003E6 18                      packet:	db	24			; was 22
 16947 000003E7 00                      	db	0
 16948 000003E8 00                      	db	0			; initialize code
 16949 000003E9 0000                    	dw	0
 16950 000003EB 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 16951                                  
 16952 000003F3 00                      unitcount:	db	0
 16953 000003F4 00000000                break_addr:	dd	0
 16954 000003F8 00000000                bpb_addr:	dd	0
 16955                                  drivenumber:	; 22/10/2022
 16956 000003FC 00                      devdrivenum:	db	0 
 16957 000003FD 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 16958                                  
 16959                                  ; end of request packet
 16960                                  
 16961                                  ;drivenumber:	db	0  ; 22/03/2019
 16962                                  
 16963                                  toomanydrivesflag:
 16964 000003FF 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 16965                                  align 2
 16966                                  
 16967                                  BCodeSeg:	; 21/10/2022
 16968 00000400 9D02                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 16969                                  	;dw	Bios_Code ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 16970                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 16971                                  
 16972                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16973                                  ;; 19/04/2019
 16974                                  ;_timer_lw_:
 16975                                  ;	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 16976                                  	
 16977                                  ;SR;
 16978                                  ; This is the communication block between the DOS and the BIOS. It starts at
 16979                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 16980                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 16981                                  ;is passed to DOS as part of the DOSINIT call.
 16982                                  ;
 16983                                  
 16984                                  BiosComBlock:
 16985                                  	;dd	Bios_Data:SysinitPresent 
 16986                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 16987 00000402 [FB08]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 16988                                  	;dw	KERNEL_SEGMENT ; 0070h
 16989                                  	; 21/10/2022
 16990 00000404 7000                    	dw	DOSBIODATASEG ; 0070h
 16991                                  
 16992                                  ;align 2
 16993                                  
 16994                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 16995                                  tempstack:	
 16996 00000406 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 16997                                  
 16998                                  ; ----------------------------------------------------------------------------
 16999                                  
 17000                                  	; 22/10/2022 - Retro DOS v4.0
 17001                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 17002                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 17003                                  	; 12/12/2022
 17004                                  	; 22/03/2019 - Retro DOS v4.0
 17005                                  	; 06/07/2018
 17006                                  	; 04/06/2018 - Retro DOS v3.0
 17007                                  ; before doing anything else, let's set the model byte
 17008 00000486 B4C0                    	mov	ah,0C0h 		; get system configuration
 17009 00000488 CD15                    	int	15h			; *
 17010 0000048A 7217                    	jc	short no_rom_config
 17011                                  
 17012 0000048C 80FC00                  	cmp	ah,0			; double check
 17013 0000048F 7512                    	jne	short no_rom_config
 17014 00000491 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 17015 00000495 2EA2[3703]              	mov	[cs:sys_model_byte],al 
 17016 00000499 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 17017 0000049D 2EA2[3803]              	mov	[cs:sys_scnd_model_byte],al
 17018                                  	;jmp	short SYSIN
 17019                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17020 000004A1 EB2D                    	jmp	short move_myself
 17021                                  
 17022                                  no_rom_config:				; Old ROM
 17023 000004A3 B800F0                  	mov	ax,0F000h
 17024 000004A6 8ED8                    	mov	ds,ax
 17025 000004A8 A0FEFF                  	mov	al,[0FFFEh]
 17026 000004AB 2EA2[3703]              	mov	[cs:sys_model_byte],al	; set the model byte.
 17027                                  
 17028                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 17029                                  ; execute the equipment determination interrupt and then
 17030                                  ; check the returned value to see if we have any floppy drives
 17031                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 17032                                  ; see the at tech ref bios listings for help on the equipment
 17033                                  ; flag interrupt (11h)	
 17034                                  
 17035                                  	; 22/10/2022
 17036                                  check_for_fake_floppy:			; entry point for rom_config above
 17037 000004AF CD11                    	int	11h			; check equipment flag
 17038                                  
 17039                                  	; 12/12/2022
 17040 000004B1 A801                    	test	al,1		
 17041                                  	;test	ax,1			; have any floppies?
 17042 000004B3 751B                    	jnz	short move_myself	; yes,normal system
 17043                                  
 17044                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 17045                                  ; whether it is an old ROM BIOS or a new one
 17046                                  ;
 17047                                  ; WARNING !!!
 17048                                  ;
 17049                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 17050                                  ; here will require an equivalent modification in MSINIT.ASM also
 17051                                  
 17052 000004B5 06                      	push	es
 17053                                  
 17054 000004B6 30C9                    	xor	cl,cl	
 17055 000004B8 B408                    	mov	ah,8			; get disk parameters
 17056 000004BA B200                    	mov	dl,0			; of drive 0
 17057 000004BC CD13                    	int	13h
 17058                                  
 17059 000004BE 07                      	pop	es
 17060                                  
 17061 000004BF 720F                    	jc	short move_myself	; if error lets assume that the
 17062                                  					;  ROM BIOS lied
 17063 000004C1 80F900                  	cmp	cl,0			; double check (max sec no cannot be 0)
 17064 000004C4 740A                    	je	short move_myself
 17065                                  
 17066 000004C6 08D2                    	or	dl,dl			; number of flp drvs == 0?
 17067 000004C8 7506                    	jnz	short move_myself
 17068                                  
 17069 000004CA 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 17070                                  
 17071                                  move_myself:
 17072 000004D0 FC                      	cld				; set up move
 17073 000004D1 31F6                    	xor	si,si
 17074 000004D3 89F7                    	mov	di,si
 17075                                  
 17076                                  	; 12/12/2022
 17077 000004D5 0E                      	push	cs
 17078 000004D6 1F                      	pop	ds
 17079                                  
 17080                                  	;mov	cx,[cs:MEMORY_SIZE]
 17081 000004D7 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 17082                                  
 17083                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 17084                                  ;;;	if	msver
 17085                                  ;	cmp	cx,1		; 1 means do scan
 17086                                  ;	jnz	short noscan
 17087                                  ;	mov	cx,2048		; start scanning at 32k boundary
 17088                                  ;	xor	bx,bx
 17089                                  ;
 17090                                  ;memscan:inc	cx
 17091                                  ;	jz	setend
 17092                                  ;	mov	ds,cx
 17093                                  ;	mov	al,[bx]
 17094                                  ;	not	al
 17095                                  ;	mov	[bx],al
 17096                                  ;	cmp	al,[bx]
 17097                                  ;	not	al
 17098                                  ;	mov	[bx],al
 17099                                  ;	jz	short memscan
 17100                                  ;setend:
 17101                                  ;	mov	cs:[memory_size],cx
 17102                                  ;;;	endif
 17103                                  
 17104                                  ;noscan: 				; cx is mem size in para
 17105                                  ;;
 17106                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 17107                                  ;;		  before we try to run.
 17108                                  ;;	       b) in any case, we should check for sufficient memory and give
 17109                                  ;;		  an appropriate error diagnostic if there isn't enough
 17110                                  ;
 17111                                  ;	push	cs
 17112                                  ;	pop	ds
 17113                                  ;
 17114                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 17115                                  ;;	  that way it would be easier to slide them down home in a minimal
 17116                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 17117                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 17118                                  ;;	  temporary home and the final one.  the problem with doing that
 17119                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 17120                                  ;
 17121                                  ;	dec	cx			; one para for an arena at end of mem
 17122                                  ;					; in case of UMBs
 17123                                  
 17124                                  	; 22/10/2022
 17125                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 17126                                  
 17127                                  	; 12/12/2022
 17128                                  	;push	cs
 17129                                  	;pop	ds
 17130                                  
 17131 000004DB 49                      	dec	cx
 17132                                  
 17133                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 17134                                  
 17135 000004DC 31DB                    	xor	bx,bx
 17136 000004DE 8EC3                    	mov	es,bx
 17137 000004E0 268B1EBC00              	mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 17138 000004E5 268E06BE00              	mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 17139 000004EA 26817F035250            	cmp	word [es:bx+3],'RP'
 17140 000004F0 751B                    	jne	short NoRPL
 17141 000004F2 26807F054C              	cmp	byte [es:bx+5],'L'
 17142 000004F7 7514                    	jne	short NoRPL
 17143                                  
 17144 000004F9 89CA                    	mov	dx,cx			; get TOM into DX
 17145 000004FB 52                      	push	dx
 17146 000004FC B8064A                  	mov	ax,4A06h
 17147                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 17148 000004FF CD2F                    	int	2Fh			; Get new TOM from any RPL
 17149 00000501 58                      	pop	ax
 17150 00000502 89D1                    	mov	cx,dx
 17151 00000504 39C2                    	cmp	dx,ax
 17152 00000506 7405                    	je	short NoRPL
 17153                                  	
 17154                                  	; 11/12/2022
 17155                                  	; ds = cs
 17156 00000508 8916[9402]              	mov	[RPLMemTop],dx
 17157                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17158                                  	;mov	[cs:RPLMemTop],dx
 17159                                  	
 17160 0000050C 49                      	dec	cx
 17161                                  NoRPL:
 17162 0000050D B8[B038]                	mov	ax,SI_end		; need this much room for sysinit
 17163                                  					; (SI_end == sysinit code size)
 17164 00000510 E8BA06                  	call	off_to_para
 17165 00000513 29C1                    	sub	cx,ax
 17166                                  
 17167                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 17168                                  ; code above sysinit in memory
 17169                                  ;
 17170 00000515 81E9000A                	sub	cx,DOSSIZE/16		; leave this much room for DOS
 17171                                  
 17172 00000519 B8D019                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 17173 0000051C E8AE06                  	call	off_to_para		; leave this much room for BIOS code
 17174 0000051F 29C1                    	sub	cx,ax
 17175 00000521 8EC1                    	mov	es,cx			; offset where sysinit will be located
 17176                                  
 17177 00000523 B9[B038]                	mov	cx,SI_end		; (sysinit code size)
 17178 00000526 D1E9                    	shr	cx,1			; divide by 2 to get words
 17179 00000528 F3A5                    	rep	movsw			; relocate sysinit
 17180                                  
 17181 0000052A 06                      	push	es			; push relocated segment
 17182 0000052B B8[3005]                	mov	ax,SYSIN
 17183 0000052E 50                      	push	ax			; push relocated entry point
 17184                                  
 17185 0000052F CB                      	retf				; far jump to relocated sysinit
 17186                                  
 17187                                  ; ----------------------------------------------------------------------------
 17188                                  
 17189                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 17190                                  
 17191                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17192                                  	; (SYSINIT:0533h)
 17193                                  SYSIN:
 17194                                  	; Retro DOS 4.0 - 22/03/2019
 17195                                  	; Retro DOS 2.0 - 25/02/2018
 17196                                  
 17197                                  	; 23/04/2019
 17198                                  	;;mov	ax,Bios_Data
 17199                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17200                                  	; 21/10/2022
 17201 00000530 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17202 00000533 8ED8                    	mov	ds,ax
 17203 00000535 8C0E[F908]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 17204 00000539 C606[FB08]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 17205                                  
 17206                                  ; first move the MSDOS.SYS image up to a harmless place 
 17207                                  ; on top of our new sysinitseg
 17208                                  
 17209                                  	; 22/10/2022
 17210 0000053E B8[B038]                	mov	ax,SI_end		; how big is sysinitseg?
 17211 00000541 E88906                  	call	off_to_para
 17212 00000544 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 17213 00000546 01C8                    	add	ax,cx
 17214 00000548 8EC0                    	mov	es,ax
 17215                                  	
 17216 0000054A 31F6                    	xor	si,si
 17217 0000054C 89F7                    	mov	di,si
 17218                                  
 17219 0000054E 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 17220                                  
 17221                                  	;mov	ax,cs	
 17222                                  	;mov	ds,ax
 17223                                  
 17224                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 17225                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 17226                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 17227                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 17228                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 17229                                  
 17230                                  	; 22/10/2022
 17231 00000553 B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 17232 00000556 F3A5                    	rep     movsw
 17233 00000558 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 17234                                  
 17235                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 17236                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 17237                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 17238                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 17239                                  
 17240                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 17241                                  	;mov	ax,cs
 17242                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17243                                  	;mov	ds,ax
 17244                                  
 17245                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17246                                  
 17247                                  ;	; 24/04/2019 
 17248                                  ;;ifndef ROMDOS
 17249                                  ;	mov	ax,[es:3] 		; get offset of dos
 17250                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 17251                                  ;	mov	[dosinit],ax		; that's the entry point offset
 17252                                  ;	call	off_to_para		; subtract this much from segment
 17253                                  ;	; 23/04/2019
 17254                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 17255                                  ;	sub	[FINAL_DOS_LOCATION],ax
 17256                                  ;;else
 17257                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 17258                                  ;;
 17259                                  ;;endif ; ROMDOS
 17260                                  
 17261                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17262                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 17263                                  
 17264                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 17265                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 17266                                  
 17267                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17268                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17269 0000055D A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 17270                                  
 17271 00000560 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17272                                  	; 02/11/2022
 17273 00000564 E86606                  	call	off_to_para		; subtract this much from segment
 17274 00000567 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 17275                                  
 17276                                  	; Current DOSCODE start address = dword [dosinit]
 17277                                  
 17278                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 17279                                  ;; until it is determined whether it will be running in HIMEM or not.
 17280                                  
 17281                                  ;ifndef ROMDOS
 17282                                  
 17283                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 17284                                  
 17285                                  	; 22/10/2022
 17286 0000056C 8CC0                    	mov	ax,es
 17287 0000056E 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 17288 00000571 8EC0                    	mov	es,ax
 17289 00000573 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 17290 00000578 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 17291                                  
 17292                                  	;mov	si,BCODE_START ; mov si,30h
 17293                                  	; 09/12/2022
 17294 0000057A BE[3000]                	mov	si,BCODESTART
 17295                                  	; 02/11/2022
 17296 0000057D 89F7                    	mov	di,si
 17297 0000057F B9D019                  	mov	cx,BCODE_END   ; mov cx,1A60h
 17298 00000582 29F1                    	sub	cx,si
 17299 00000584 D1E9                    	shr	cx,1
 17300 00000586 F3A5                    	rep	movsw			; move Bios_Code into place
 17301                                  
 17302 00000588 8CC0                    	mov	ax,es			; tell it what segment it's in
 17303 0000058A 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 17304                                  
 17305                                  ;endif	; not ROMDOS
 17306                                  
 17307                                  ; now call dosinit while it's in its temporary home
 17308                                  
 17309                                  	;mov	ax,cs
 17310                                  	;mov	ds,ax	 
 17311                                  
 17312                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 17313                                  
 17314                                  	; 22/10/2022
 17315                                  
 17316 0000058F 2EC43E[0204]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 17317                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 17318 00000594 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 17319                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 17320                                  
 17321 00000599 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 17322                                  
 17323 0000059E FA                      	cli
 17324 0000059F 8CC8                    	mov	ax,cs
 17325 000005A1 8ED0                    	mov	ss,ax
 17326                                  
 17327                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 17328                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 17329                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 17330                                  ;SYSINIT:0532h:
 17331                                  
 17332                                  ; 22/10/2022
 17333                                  ; ----------------------------------------------------------------------------
 17334                                  ;SYSINIT:05A6h:
 17335                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 17336                                  
 17337                                  	;mov	sp, 05A6h
 17338 000005A3 BCA205                  	mov     sp,locstack		; set stack
 17339                                  
 17340 000005A6 FB                      	sti
 17341                                  
 17342                                  ;align 2
 17343                                  	; 30/03/2018
 17344                                  ;LOCSTACK:
 17345                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 17346                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 17347                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 17348                                  
 17349                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17350                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 17351                                  
 17352                                  ; This call to DOSINIT will relocate the DOS data from its present location
 17353                                  ; at the top of memory, to its final location in low memory just above the
 17354                                  ; BIOS data. It will then build important DOS data structures in low 
 17355                                  ; memory following the DOS data. It returns (among many other things) the
 17356                                  ; new starting address of free memory.
 17357                                  
 17358 000005A7 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 17359                                  			 ; es:di -> sysinitvars_ext
 17360                                  
 17361 000005AC 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 17362                                  	
 17363                                  	; 11/12/2022
 17364                                  	; 22/03/2019
 17365 000005B1 0E                      	push	cs
 17366 000005B2 1F                      	pop	ds
 17367                                  	; 22/10/2022
 17368 000005B3 A3[8102]                	mov	[hi_doscod_size],ax
 17369 000005B6 890E[7F02]              	mov	[lo_doscod_size],cx
 17370 000005BA 8916[7B02]              	mov	[dos_segreinit],dx
 17371                                  	
 17372                                  	; 11/12/2022
 17373                                  	; ds = cs
 17374                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 17375                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 17376                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 17377                                  
 17378                                  	; 05/06/2018 - Retro DOS v3.0
 17379                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 17380                                  
 17381                                  	; 11/12/2022
 17382                                  	; ds = cs
 17383                                  	; 22/10/2022
 17384                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 17385 000005BE 268B05                  	mov	ax,[es:di] ; 22/03/2019
 17386                                  	;mov	[cs:DOSINFO],ax
 17387 000005C1 A3[6B02]                	mov	[DOSINFO],ax
 17388                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 17389 000005C4 268B4502                	mov	ax,[es:di+2]
 17390                                  	;mov	[cs:DOSINFO+2],ax
 17391 000005C8 A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 17392                                  
 17393                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 17394 000005CB 268B4504                	mov	ax,[es:di+4]
 17395                                  	;mov	[cs:sysi_country],ax
 17396 000005CF A3[7702]                	mov	[sysi_country],ax
 17397                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 17398 000005D2 268B4506                	mov	ax,[es:di+6]
 17399                                  	;mov	[cs:sysi_country+2],ax
 17400 000005D6 A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 17401                                  
 17402                                  	; 20/04/2019
 17403                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 17404                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 17405                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 17406                                  	; 22/10/2022
 17407                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 17408                                  	;;;mov	[dos_segreinit+2],es
 17409                                  	;;mov	[dos_segreinit+2],ax
 17410                                  	;mov	[cs:dos_segreinit+2],ax
 17411                                  	; 11/12/2022
 17412                                  	; ds = cs
 17413 000005D9 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17414 000005DD 8C06[7D02]              	mov	[dos_segreinit+2],es
 17415                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17416                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 17417                                  	;mov	[cs:dos_segreinit+2],es
 17418                                  
 17419                                  ; ----------------------------------------------------------------------------
 17420                                  
 17421                                  ;SYSINIT:0577h:
 17422                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 17423                                  ;SYSINIT:05D1h:	; NoRPLArena 
 17424                                  
 17425                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17426                                  ;------ Cover up RPL code with an arena
 17427                                  ;SYSINIT:05EBh:
 17428                                  	; 11/12/2022
 17429                                  	; ds = cs
 17430 000005E1 31DB                    	xor	bx,bx
 17431 000005E3 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 17432                                  	;cmp	word [RPLMemTop],0
 17433                                  	;;cmp	word [cs:RPLMemTop],0
 17434 000005E7 7450                    	je	short NoRPLArena
 17435                                  
 17436                                  ;------ alloc all memory
 17437                                  
 17438                                  	; 11/12/2022
 17439                                  	;mov	bx,0FFFFh
 17440 000005E9 4B                      	dec	bx
 17441                                  	; bx = 0FFFFh
 17442 000005EA B448                    	mov	ah,48h
 17443 000005EC CD21                    	int	21h
 17444                                  			; DOS - 2+ - ALLOCATE MEMORY
 17445                                  			; BX = number of 16-byte paragraphs desired
 17446 000005EE B448                    	mov	ah,48h
 17447 000005F0 CD21                    	int	21h
 17448                                  
 17449 000005F2 8EC0                    	mov	es,ax			; get it into ES and save it
 17450 000005F4 06                      	push	es
 17451                                  
 17452                                  ;------ resize upto RPL mem
 17453                                  
 17454                                  	; 11/12/2022
 17455                                  	; ds = cs
 17456                                  	;sub	ax,[cs:RPLMemTop]
 17457 000005F5 2B06[9402]              	sub	ax,[RPLMemTop]
 17458 000005F9 F7D8                    	neg	ax
 17459 000005FB 48                      	dec	ax
 17460 000005FC 89C3                    	mov	bx,ax
 17461 000005FE B44A                    	mov	ah,4Ah
 17462 00000600 CD21                    	int	21h
 17463                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17464                                  			; ES = segment address of block to change
 17465                                  			; BX = new size in paragraphs
 17466                                  
 17467                                  ;------ allocate the free (RPL MEM)
 17468                                  
 17469 00000602 BBFFFF                  	mov	bx,0FFFFh
 17470 00000605 B448                    	mov	ah,48h
 17471 00000607 CD21                    	int	21h
 17472 00000609 B448                    	mov	ah,48h
 17473 0000060B CD21                    	int	21h
 17474                                  
 17475                                  ;----- mark that it belongs to RPL
 17476                                  
 17477 0000060D 48                      	dec	ax
 17478 0000060E 8EC0                    	mov	es,ax
 17479                                  	;mov	word [es:arena_owner],8
 17480 00000610 26C70601000800          	mov	word [es:1],8
 17481                                  	;mov	word [es:arena_name],'RP'
 17482 00000617 26C70608005250          	mov	word [es:8],'RP'
 17483                                  	;mov	word [es:arena_name+2],'L'
 17484 0000061E 26C7060A004C00          	mov	word [es:10],'L'
 17485                                  	;mov	word [es:arena_name+4],0
 17486 00000625 26C7060C000000          	mov	word [es:12],0
 17487                                  	;mov	word [es:arena_name+6],0
 17488 0000062C 26C7060E000000          	mov	word [es:14],0	
 17489                                  
 17490 00000633 07                              pop     es                      ; get back ptr to first block
 17491 00000634 B449                            mov     ah,49h	; Dealloc	; and free it
 17492 00000636 CD21                    	int	21h		
 17493                                  					; DOS - 2+ - FREE MEMORY
 17494                                  					; ES = segment address of area to be freed
 17495                                  	; 11/12/2022
 17496 00000638 F8                      	clc
 17497                                  
 17498                                  ; ----------------------------------------------------------------------------
 17499                                  
 17500                                  NoRPLArena:
 17501                                  	; 11/12/2022
 17502                                  	; ds = cs
 17503                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 17504 00000639 C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 17505                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17506                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 17507                                  
 17508                                  	; 11/12/2022
 17509                                  	;clc				; get the extended memory size
 17510                                  
 17511                                  ;	execute the get extended memory size subfunction in the bios int 15h
 17512                                  ;	if the function reports an error do nothing else store the extended
 17513                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 17514                                  ;	currently pointed to by es:di. use the offsets specified in the
 17515                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 17516                                  
 17517 0000063D B488                    	mov	ah,88h
 17518 0000063F CD15                    	int	15h			; check extended memory size
 17519 00000641 720B                    	jc	short no_ext_memory
 17520                                  			; Get Extended Memory Size
 17521                                  			; Return: CF clear on success
 17522                                  			; AX = size of memory above 1M in K	
 17523                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 17524                                  	; 22/10/2022
 17525 00000643 26894545                	mov	[es:di+45h],ax ; save extended memory size
 17526 00000647 09C0                    	or	ax,ax
 17527 00000649 7403                    	jz	short no_ext_memory
 17528 0000064B E8F504                  	call	ClrVDISKHeader
 17529                                  no_ext_memory:
 17530                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 17531 0000064E 268B4510                	mov	ax,[es:di+10h]
 17532                                  	;add	ax,bufinsiz
 17533 00000652 83C014                  	add	ax,20			; size of buffer header
 17534                                  	; 11/12/2022
 17535                                  	; ds = cs
 17536 00000655 A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 17537                                  	;mov	[cs:singlebuffersize],ax	
 17538                                  	; 11/12/2022
 17539 00000658 A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 17540                                  	;mov	al,[cs:DEFAULT_DRIVE]
 17541                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 17542 0000065B 26884543                	mov	[es:di+43h],al
 17543                                  
 17544                                  ; determine if 386 system...
 17545                                  
 17546                                  	;get_cpu_type			; macro to determine cpu type
 17547                                  
 17548                                  get_cpu_type:
 17549                                  	; 11/12/2022
 17550 0000065F 9C                      	pushf
 17551                                  	;push	bx
 17552                                  	;xor	bx,bx
 17553                                  	; 11/12/2022
 17554                                  	;xor	cx,cx
 17555                                  	;
 17556 00000660 31C0                    	xor	ax,ax
 17557                                  	; ax = 0
 17558 00000662 50                      	push    ax
 17559 00000663 9D                      	popf
 17560 00000664 9C                      	pushf
 17561 00000665 58                      	pop	ax
 17562 00000666 2500F0                  	and	ax,0F000h
 17563                                  	;cmp	ax,0F000h
 17564 00000669 80FCF0                  	cmp	ah,0F0h 
 17565 0000066C 7410                    	je	short cpu_8086
 17566                                  	;mov	ax,0F000h
 17567 0000066E B4F0                    	mov	ah,0F0h
 17568                                  	; ax = 0F000h
 17569 00000670 50                      	push	ax
 17570 00000671 9D                      	popf
 17571 00000672 9C                      	pushf
 17572 00000673 58                      	pop	ax
 17573                                  	;and	ax,0F000h
 17574 00000674 80E4F0                  	and	ah,0F0h
 17575 00000677 7405                    	jz	short cpu_286
 17576                                  cpu_386:
 17577                                  	; 11/12/2022
 17578                                  	;;inc	bx
 17579                                  	;inc	cx
 17580                                  	; 11/12/2022
 17581                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 17582 00000679 26C6454401              	mov	byte [es:di+44h],1
 17583                                  cpu_286:
 17584                                  	;;;inc	bx
 17585                                  	;;inc	cx
 17586                                  cpu_8086:
 17587                                  	; 11/12/2022
 17588                                  	;;mov	ax,bx	
 17589                                  	;pop	bx
 17590 0000067E 9D                      	popf
 17591                                  
 17592                                  	;...
 17593                                  
 17594                                  	; 11/12/2022
 17595                                  	;or	cl,cl
 17596                                  	;jz	short not_386_system
 17597                                  	; 11/12/202
 17598                                  	;cmp	cl,2
 17599                                  	;;cmp	ax,2			; is it a 386?
 17600                                  	;jne	short not_386_system	; no: don't mess with flag
 17601                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 17602                                  	; 11/12/2022
 17603                                  	; 22/10/2022
 17604                                  	;mov	byte [es:di+44h],1
 17605                                  not_386_system:
 17606                                  	;mov	al,[es:di+SYSI_NUMIO]
 17607 0000067F 268A4520                	mov	al,[es:di+20h]
 17608                                  	; 11/12/2022
 17609                                  	; ds = cs
 17610 00000683 A2[FC03]                	mov	[drivenumber],al	; save start of installable block drvs
 17611                                  	;mov	[cs:drivenumber],al
 17612                                  
 17613 00000686 8CC8                    	mov	ax,cs
 17614 00000688 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 17615                                  	; 11/12/2022
 17616                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 17617                                  	;;mov	cx,[cs:singlebuffersize]
 17618                                  	;shr	cx,1			
 17619                                  	;shr	cx,1			; divide size by 16...
 17620                                  	;shr	cx,1
 17621                                  	;shr	cx,1			; ...to get paragraphs...
 17622                                  	;inc	cx			; ... and round up
 17623                                  	; 11/12/2022
 17624 0000068B 8B1E[9B02]              	mov	bx,[singlebuffersize]
 17625 0000068F B104                    	mov	cl,4
 17626 00000691 D3EB                    	shr	bx,cl
 17627 00000693 43                      	inc	bx
 17628                                  
 17629                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 17630                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 17631                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 17632                                  ;	  it is probably safe to assume that the sector size always will be.
 17633                                  ;
 17634                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 17635                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 17636                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 17637                                  ;	  other code from ever causing a problem???
 17638                                  
 17639                                  	; 11/12/2022
 17640 00000694 29D8                    	sub	ax,bx
 17641                                  	;sub	ax,cx
 17642 00000696 A3[A102]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 17643                                  	; 22/10/2022
 17644                                  	;mov	[cs:top_of_cdss],ax
 17645                                  
 17646                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 17647                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 17648                                  ;	for allocating memory for MagicDrv.
 17649                                  
 17650 00000699 06                      	push	es			; preserve pointer to dosinfo
 17651 0000069A 57                      	push	di
 17652                                  
 17653                                  	; 22/10/2022
 17654                                  ;	mov	cx,ax			; save pointer for buffer
 17655                                  ;
 17656                                  ;;	now allocate space for 26 CDSs
 17657                                  ;
 17658                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 17659                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 17660                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 17661                                  
 17662                                  ; setup and initialize the temporary buffer at cx
 17663                                  
 17664                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 17665 0000069B 26C47D12                	les	di,[es:di+12h]
 17666                                  	; 11/12/2022
 17667 0000069F 31DB                    	xor	bx,bx
 17668                                  	;xor	ax,ax
 17669                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 17670                                  	;mov	word [es:di+4],0
 17671 000006A1 26895D04                	mov	[es:di+4],bx ; 0
 17672                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 17673                                  	;mov	word [es:di],0
 17674 000006A5 26891D                  	mov	[es:di],bx ; 0
 17675                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss]
 17676                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss]
 17677 000006A8 26894502                	mov	[es:di+2],ax
 17678                                  
 17679                                  	;mov	es,cx
 17680 000006AC 8EC0                    	mov	es,ax	; [top_of_cdss] = [CONFBOT]
 17681                                  
 17682                                  	; 11/12/2022
 17683                                  	;xor	ax,ax
 17684                                  	;mov	di,ax			; es:di -> single buffer
 17685 000006AE 89DF                    	mov	di,bx
 17686                                  	; di = 0
 17687                                  
 17688                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 17689                                  	; 11/12/2022
 17690                                  	;mov	[es:di],ax ; 0
 17691 000006B0 26891D                  	mov	[es:di],bx ; 0
 17692                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 17693                                  	; 11/12/2022
 17694                                  	;mov	[es:di+2],ax ; 0
 17695 000006B3 26895D02                	mov	[es:di+2],bx ; 0 
 17696                                  
 17697                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 17698                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 17699                                  
 17700                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 17701 000006B7 26C74504FF00            	mov	word [es:di+4],00FFh
 17702                                  ;SYSINIT:06E6h
 17703                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 17704                                  	;mov	word [es:di+6],0
 17705                                  	; 11/12/2022
 17706                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 17707 000006BD 26895D06                	mov	[es:di+6],bx ; 0
 17708                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 17709                                  	;mov	word [es:di+8],0
 17710                                  	; 11/12/2022
 17711                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 17712 000006C1 26895D08                	mov	[es:di+8],bx ; 0
 17713                                  
 17714 000006C5 5F                      	pop	di			; restore pointer to DOSINFO data
 17715 000006C6 07                      	pop	es
 17716                                  
 17717                                  	; 11/12/2022
 17718                                  	; ds = cs
 17719                                  	; 22/10/2022
 17720                                  	;push	cs
 17721                                  	;pop	ds
 17722                                  
 17723 000006C7 E80C05                  	call	TempCDS 		; set up cdss so re_init and sysinit
 17724                                  					;  can make disk system calls
 17725                                  					; tempcds trashes ds
 17726                                  	; 10/05/2019
 17727 000006CA 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 17728                                  
 17729                                  	;if not ibmjapver
 17730                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 17731                                  	;endif
 17732                                  
 17733                                  	; 22/10/2022
 17734                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 17735                                  	;call	far ptr 70h:89Bh
 17736 000006CF 9A[9908]7000            	call	DOSBIODATASEG:RE_INIT
 17737                                  
 17738 000006D4 FB                      	sti				; ints ok
 17739 000006D5 FC                      	cld				; make sure
 17740                                  
 17741                                  ; 23/03/2019
 17742                                  
 17743                                  ;SYSINIT:069Ch
 17744                                  
 17745                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 17746                                  ; of the way by putting it just below sysinit at end of memory.
 17747                                  
 17748 000006D6 8CCB                    	mov	bx,cs
 17749 000006D8 83EB10                  	sub	bx,10h
 17750 000006DB 8EC3                    	mov	es,bx
 17751 000006DD 31F6                    	xor	si,si
 17752 000006DF 89F7                    	mov	di,si
 17753 000006E1 B98000                  	mov	cx,128
 17754 000006E4 F3A5                    	rep	movsw
 17755                                  
 17756                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 17757                                  	; 22/10/2022
 17758 000006E6 268C063600              	mov	[es:36h],es
 17759                                  
 17760                                   	; Set Process Data Block - Program Segment Prefix address
 17761                                  	; BX = PDB/PSP segment
 17762 000006EB B450                            mov	ah,50h ; SET_CURRENT_PDB
 17763 000006ED CD21                    	int	21h			; tell DOS we moved it
 17764                                  			; DOS - 2+ internal - SET PSP SEGMENT
 17765                                  			; BX = segment address of new PSP
 17766                                  	; 22/10/2022
 17767                                  	; 27/03/2019
 17768 000006EF 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 17769                                  
 17770 000006F0 0E                      	push	cs	
 17771 000006F1 1F                      	pop	ds
 17772                                  
 17773                                  	; set up temp. critical error handler
 17774 000006F2 BA[6C33]                	mov	dx,int24		; set up int 24 handler
 17775                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 17776                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 17777 000006F5 B82425                  	mov	ax,2524h
 17778 000006F8 CD21                    	int	21h
 17779                                  
 17780 000006FA 803E[FF03]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 17781 000006FF 7405                            je      short no_err		   ;  N: continue            M029
 17782 00000701 BA[6A38]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 17783                                          ; 22/10/2022
 17784                                  	;call	print 			   ;		             M029
 17785                                  	; 12/12/2022
 17786 00000704 EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 17787                                  no_err:
 17788                                  	; 12/05/2019
 17789                                  	;----------------------------------------------
 17790                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 17791                                  	; 22/10/2022 - Retro DOS v4.0
 17792                                  	; 12/12/2022
 17793 00000706 BA[7033]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 17794                                  p_dosinit_msg:
 17795 00000709 E83B2C                  	call	print			; Print message
 17796                                  	;----------------------------------------------
 17797                                  	
 17798                                  	; 11/12/2022
 17799                                  	; 22/10/2022
 17800                                  	; 23/03/2019 - Retro DOS v4.0
 17801                                  	;pop	ds			; start of free memory
 17802                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 17803                                  	
 17804                                  	; 11/12/2022
 17805                                  	; 27/03/2019
 17806 0000070C 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 17807 00000710 1F                      	pop	ds ; */
 17808                                  
 17809 00000711 08D2                    	or	dl,dl
 17810                                  	;jz	short nodrvset		; bios didn't say
 17811 00000713 7405                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 17812                                  	;dec	dl			; A = 0
 17813                                  	; 18/12/2022
 17814 00000715 4A                      	dec	dx
 17815 00000716 B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 17816 00000718 CD21                    	int	21h			; select the disk
 17817                                  			; DOS - SELECT DISK
 17818                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 17819                                  			; Return: AL = number of logical drives
 17820                                  nodrvset:
 17821                                  	;ifdef	dblspace_hooks
 17822                                  	;	....
 17823                                  	;	....
 17824                                  	;endif	
 17825                                  
 17826                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 17827                                  
 17828                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 17829                                  ; ----------------------------------------------------------------------------
 17830                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17831                                  
 17832                                  ProcessConfig:
 17833                                  	;; ds = cs ; 27/03/2019
 17834                                  	; 11/12/2022
 17835                                  	; ds <> cs	
 17836                                  
 17837                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 17838                                  
 17839 0000071A E8C417                  	call	doconf			; do pre-scan for dos=high/low
 17840                                  
 17841                                  	; 11/12/2022
 17842                                  	; 27/03/2019
 17843                                  	; ds = cs (at return from doconf)
 17844                                  
 17845                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 17846                                  ; It will either be relocated to low memory, above the DOS data structures,
 17847                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 17848                                  ; code entry points will be located in low memory. Dos_segreinit is used
 17849                                  ; to tell the DOS data where the code has been placed, and to install the
 17850                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 17851                                  ; must first initialize it in its present location and load the installable
 17852                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 17853                                  ; relocate the DOS code into HiMem.
 17854                                  ;
 17855                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 17856                                  ; to install the low memory stub (this must be done before allowing any
 17857                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 17858                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 17859                                  ; been patched.
 17860                                  
 17861                                  	; 22/10/2022 - Retro DOS v4.0
 17862                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 17863                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 17864                                  	; 11/12/2022
 17865 0000071D 803E[6A02]00            	cmp	byte [runhigh],0
 17866 00000722 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 17867                                  
 17868                                  ;------ user chose to load high
 17869                                  
 17870                                  	; 22/10/2022
 17871                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 17872                                  	; 11/12/2022
 17873                                  	; ds = cs
 17874 00000724 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17875                                  
 17876                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17877                                  	; 27/03/2019
 17878                                  	;;mov	es,[FINAL_DOS_LOCATION]
 17879                                  
 17880 00000728 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 17881                                  	; 11/12/2022
 17882                                  	; ds = cs
 17883                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 17884 0000072A FF1E[7B02]              	call	far [dos_segreinit]
 17885                                  
 17886 0000072E EB10                    	jmp	short do_multi_pass
 17887                                  
 17888                                  ;------ User chose to load dos low
 17889                                  
 17890                                  dont_install_stub:
 17891                                  	; 22/10/2022
 17892 00000730 31DB                    	xor	bx,bx			; M012
 17893                                  					; don't use int 21 call to alloc mem
 17894 00000732 E8D601                  	call	MovDOSLo		; move it !
 17895                                  
 17896 00000735 B80100                  	mov	ax,1			; dont install stub
 17897                                  	; 11/12/2022
 17898                                  	; ds = cs
 17899 00000738 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17900                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 17901                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17902                                  	; 27/03/2019
 17903                                  ;do_multi_pass:
 17904                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 17905                                  
 17906                                  	; 11/12/2022
 17907                                  	; ds =cs
 17908                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 17909 0000073C FF1E[7B02]              	call	far [dos_segreinit]
 17910                                  do_multi_pass:
 17911 00000740 E81201                  	call	AllocFreeMem		; allocate all the free mem
 17912                                  					; & update [memhi] & [area]
 17913                                  					; start of free memory.
 17914                                  	;ifdef	dblspace_hooks
 17915                                  	;mov	bx,0			; magic backdoor to place int hooks
 17916                                  	;call	cs:MagicBackdoor
 17917                                  	;endif
 17918                                  
 17919                                  ; Now, process config.sys some more.  
 17920                                  ; Load the device drivers and install programs
 17921                                  
 17922                                  	; 22/10/2022
 17923                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 17924                                  	; 11/12/2022
 17925                                  	; ds = cs
 17926 00000743 FE06[4903]              	inc	byte [multi_pass_id]
 17927 00000747 E82A18                  	call	multi_pass		; load device drivers
 17928 0000074A E8EB24                  	call	ShrinkUMB
 17929 0000074D E81125                  	call	UnlinkUMB		; unlink all UMBs	;M002
 17930                                  	; 02/11/2022
 17931                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 17932                                  	; 11/12/2022
 17933                                  	; ds = cs
 17934 00000750 FE06[4903]              	inc	byte [multi_pass_id]
 17935 00000754 E81D18                  	call	multi_pass		; was load ifs (now does nothing)
 17936                                  
 17937                                  	;ifdef	dblspace_hooks
 17938                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 17939                                  	;endif
 17940                                  
 17941                                  	; ds = cs
 17942                                  	
 17943 00000757 E81405                  	call	endfile			; setup fcbs, files, buffers etc
 17944                                  
 17945                                  	;ifdef	dblspace_hooks
 17946                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 17947                                  	;endif
 17948                                  
 17949                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 17950                                  ;to device drivers. This has been moved up to this point to avoid problems 
 17951                                  ;with overlays called from installed programs
 17952                                  
 17953                                  	; 11/12/2022
 17954                                  	; ds = cs
 17955                                  
 17956                                  	;;mov	ax,Bios_Data ; 0070h
 17957                                  	;mov	ax,KERNEL_SEGMENT
 17958                                  	; 21/10/2022
 17959 0000075A B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17960 0000075D 8EC0                    	mov	es,ax			; point ES to bios data
 17961                                  
 17962 0000075F 26C606[FB08]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 17963                                  
 17964                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17965                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 17966                                  	;test	byte [cs:install_flag],1
 17967                                  	; 11/12/2022
 17968                                  	; ds = cs
 17969 00000765 F606[4A03]01            	test	byte [install_flag],1
 17970                                  	;test	byte [cs:install_flag],have_install_cmd
 17971                                  					; are there install commands?
 17972 0000076A 7407                    	jz	short dolast		; no, no need for further processing
 17973                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 17974                                  	; 11/12/2022
 17975                                  	; ds =cs
 17976 0000076C FE06[4903]              	inc	byte [multi_pass_id]
 17977 00000770 E80118                  	call	multi_pass		; execute install= commands
 17978                                  
 17979                                  dolast:
 17980                                  	
 17981                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 17982                                  ;  free the confbot area used for config.sys and sysinit itself.
 17983                                  
 17984                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 17985                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 17986                                  ; anything, but just set up the ROM area for suballocation (or print
 17987                                  ; a message if HiMem is not available).
 17988                                  ;
 17989                                  ; There is also this little hack for CPM style DOS calls that needs to
 17990                                  ; be done when A20 is set...
 17991                                  
 17992                                  	; 11/12/2022
 17993                                  	; ds = cs
 17994                                  
 17995                                  	; 22/10/2022
 17996                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 17997                                  	; 11/12/2022
 17998 00000773 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 17999 00000778 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 18000 0000077A E83D01                  	call	LoadDOSHiOrLo
 18001                                  _@@_:
 18002                                  	;cmp	byte [cs:runhigh],0	; are we running low
 18003                                  	; 11/12/2022
 18004                                  	; ds = cs
 18005 0000077D 803E[6A02]00            	cmp	byte [runhigh],0
 18006                                  	;je	short _@@@
 18007 00000782 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 18008 00000784 E83004                  	call	CPMHack			; make ffff:d0 same as 0:c0
 18009                                  _@@@:
 18010                                  
 18011                                  ; We are now done with CONFIG.SYS processing
 18012                                  
 18013                                  ConfigDone:
 18014                                  	; 12/12/2022
 18015                                  	; 22/10/2022
 18016                                  	;mov	byte [cs:donotshownum],1 
 18017                                  					; done with config.sys.
 18018                                  					; do not show line number message.
 18019                                  	;mov	es,[cs:area]
 18020                                  	; 12/12/2022
 18021                                  	; ds = cs
 18022                                  	; 27/03/2019
 18023 00000787 C606[D103]01            	mov	byte [donotshownum],1
 18024 0000078C 8E06[E403]              	mov	es,[area]
 18025                                  
 18026 00000790 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 18027 00000792 CD21                    	int	21h
 18028                                  			; DOS - 2+ - FREE MEMORY
 18029                                  			; ES = segment address of area to be freed
 18030                                  
 18031                                  	; 22/10/2022
 18032                                  	;test	word [cs:install_flag],2
 18033                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 18034                                  	;test	byte [cs:install_flag],has_installed
 18035                                  	; 11/12/2022
 18036                                  	; ds = cs
 18037 00000794 F606[4A03]02            	test	byte [install_flag],2 ; has_installed
 18038                                  	;test	byte [install_flag],has_installed
 18039 00000799 741F                    	jz	short skip_free_sysinitbase ; no.
 18040                                  
 18041                                  ; set block from the old_area with impossible_owner_size.
 18042                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 18043                                  ; handle install= command.
 18044                                  
 18045                                  	; 12/12/2022
 18046                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18047                                  	;push	bx
 18048                                  	
 18049                                  	; 22/10/2022
 18050                                  	;mov	es,[cs:old_area]
 18051                                  	;mov	bx,[cs:impossible_owner_size]
 18052                                  	; 12/12/2022
 18053                                  	; ds = cs
 18054 0000079B 8E06[DA03]              	mov	es,[old_area]
 18055 0000079F 8B1E[DC03]              	mov	bx,[impossible_owner_size]
 18056                                  	
 18057 000007A3 B44A                    	mov	ah,4Ah ; SETBLOCK
 18058 000007A5 CD21                    	int	21h
 18059                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 18060                                  			; ES = segment address of block to change
 18061                                  			; BX = new size in paragraphs
 18062 000007A7 8CC0                    	mov	ax,es
 18063 000007A9 48                      	dec	ax
 18064 000007AA 8EC0                    	mov	es,ax			; point to arena
 18065                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 18066 000007AC 26C70601000800          	mov	word [es:1],8
 18067                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 18068 000007B3 26C70608005344          	mov	word [es:8],'SD'
 18069                                  	
 18070                                  	; 12/12/2022
 18071                                  	;pop	bx
 18072                                          ;pop     es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18073                                  
 18074                                  skip_free_sysinitbase:
 18075                                  	; 22/10/2022
 18076                                  	;cmp	byte [cs:runhigh],0
 18077                                  	; 12/12/2022
 18078                                  	; ds = cs
 18079 000007BA 803E[6A02]00            	cmp	byte [runhigh],0	
 18080 000007BF 7403                    	je	short _@@@@
 18081                                  
 18082 000007C1 E8D502                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 18083                                  
 18084                                  ; ----------------------------------------------------------------------------
 18085                                  
 18086                                  _@@@@:
 18087                                  	; 12/12/2022
 18088                                  	; ds = cs
 18089                                  	; 22/10/2022
 18090                                  	; 27/03/2019
 18091                                  	;push	cs
 18092                                  	;pop	ds			; point DS to sysinitseg
 18093                                  
 18094                                  ; set up the parameters for command
 18095                                  
 18096                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 18097                                  ;;ifdef  MULTI_CONFIG
 18098                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 18099                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 18100                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 18101                                  ;	; !!!
 18102                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 18103                                  ;       ; !!!
 18104                                  ;	call    disable_autoexec        ; no, we should disable it
 18105                                  ;process_autoexec:
 18106                                  ;;endif	; !!!
 18107                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 18108                                  ;	; !!!
 18109                                  
 18110                                  	; 22/10/2022 
 18111                                  	;mov     cl,[command_line]
 18112                                          ;mov     ch,0
 18113                                          ;inc     cx
 18114                                          ;mov     si,command_line	
 18115                                  	;add     si,cx
 18116                                          ;mov     byte [si],cr	; cr-terminate command line
 18117                                  
 18118                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 18119                                  	; (SYSINIT:0809h)
 18120                                  	
 18121                                  	;mov	si,(offset command_line+1)
 18122 000007C4 BE[AA02]                	mov	si,command_line+1
 18123 000007C7 1E                      	push    ds
 18124 000007C8 07                      	pop     es
 18125 000007C9 89F7                    	mov     di,si
 18126 000007CB B1FF                    	mov     cl,0FFh ; -1
 18127                                  _@_loop:
 18128 000007CD FEC1                    	inc     cl ; +1
 18129 000007CF AC                      	lodsb
 18130 000007D0 AA                      	stosb
 18131 000007D1 08C0                    	or      al,al
 18132 000007D3 75F8                    	jnz     short _@_loop
 18133 000007D5 4F                      	dec     di
 18134 000007D6 B00D                    	mov     al,0Dh
 18135 000007D8 AA                      	stosb			; cr-terminate command line
 18136 000007D9 880E[A902]              	mov     [command_line],cl ; command line length (except CR)
 18137                                  
 18138                                  ; ----------------------------------------------------------------------------
 18139                                  
 18140                                  ;   Once we get to this point, the above code, which is below "retry"
 18141                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 18142                                  ;   which follow....)
 18143                                  
 18144                                  retry:
 18145 000007DD BA[1D34]                	mov	dx,commnd	; now pointing to file description
 18146                                  
 18147                                  ; we are going to open the command interpreter and size it as is done in
 18148                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 18149                                  ; there is not enough room for the command interpreter,exec will probably
 18150                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 18151                                  ; here to catch it. this code is not perfect (for instance .exe command
 18152                                  ; interpreters are possible) because it does its sizing based on the
 18153                                  ; assumption that the file being loaded is a .com file. it is close enough to
 18154                                  ; correctness to be usable.
 18155                                  
 18156                                  ; first, find out where the command interpreter is going to go.
 18157                                  
 18158 000007E0 52                      	push	dx		; save pointer to name
 18159 000007E1 BBFFFF                  	mov	bx,0FFFFh
 18160 000007E4 B448                    	mov	ah,48h	; ALLOC
 18161 000007E6 CD21                            int     21h             ; get biggest piece
 18162 000007E8 B448                    	mov	ah,48h	; ALLOC
 18163 000007EA CD21                    	int	21h		; second time gets it
 18164 000007EC 7243                    	jc	short memerrjx	; oooops
 18165                                  
 18166 000007EE 8EC0                    	mov	es,ax
 18167 000007F0 B449                    	mov	ah,49h	; DEALLOC
 18168 000007F2 CD21                    	int	21h		; give it right back
 18169 000007F4 89DD                    	mov	bp,bx
 18170                                  
 18171                                  ; es:0 points to block,and bp is the size of the block in para.
 18172                                  
 18173                                  ; we will now adjust the size in bp down by the size of sysinit.
 18174                                  ; we need to do this because exec might get upset if some of the exec
 18175                                  ; data in sysinit is overlayed during the exec.
 18176                                  
 18177                                  	; 22/10/2022
 18178                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 18179 000007F6 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 18180 000007FA 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 18181                                  
 18182                                  ; Note that the "config_wrkseg" environment data is a segment in
 18183                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 18184                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 18185                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 18186                                  ; we need to make sure that there's no way Exec will stomp on that data
 18187                                  ; before it can copy it, and one way to do that is to make the available
 18188                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 18189                                  ; from the "memory_size" segment value (which is typically A000h) instead
 18190                                  ; of the current sysinit CS....
 18191                                  ;
 18192                                  ; The reason I use the term "paranoid" is because this code should have
 18193                                  ; slid the data required by Exec up to the very top of memory, because as
 18194                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 18195                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 18196                                  ; consumes). Now it's just a little worse (65K or more, depending on
 18197                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 18198                                  ; is determined by the size of CONFIG.SYS.... -JTP
 18199                                  
 18200                                  	; 22/10/2022
 18201                                  	;mov	cx,[config_envlen]
 18202                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 18203                                          ;mov	ax,[config_wrkseg]
 18204                                  ;no_env:
 18205                                  	; 22/10/2022
 18206                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 18207 000007FC 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 18208 000007FE 83C311                  	add	bx,11h		; add the sysinit php
 18209 00000801 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 18210 00000803 722C                    	jc	short memerrjx	; if there isn't even this much memory, give up
 18211                                  
 18212                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 18213 00000805 B8003D                          mov	ax,3D00h
 18214 00000808 F9                      	stc                     ; in case of int 24
 18215 00000809 CD21                    	int	21h
 18216 0000080B 7240                    	jc	short comerr	; ooops
 18217                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 18218                                  			; DS:DX -> ASCIZ filename
 18219                                  			; AL = access mode
 18220                                  			; 0 - read
 18221                                  	; 22/10/2022
 18222                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 18223 0000080D 89C3                            mov     bx,ax           ; handle in bx
 18224                                  
 18225                                  ;   If the standard command interpreter is being used, verify it is correct
 18226                                  
 18227                                  	; 22/10/2022
 18228                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 18229                                  	;jne	short skip_validation ; yes
 18230                                  	;mov	dx,retry-4
 18231                                  	;mov	cx,4		;
 18232                                  	;mov	ah,READ		;
 18233                                  	;int	21h		;
 18234                                  	;cmp	byte [retry-4],0E9h
 18235                                  	;jne	short comerr
 18236                                  	;; 20/04/2019 - Retro DOS v4.0
 18237                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 18238                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 18239                                  	;jne	short comerr	;
 18240                                  
 18241                                  ;skip_validation:
 18242                                  	; 22/10/2022
 18243                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 18244 0000080F 31C9                    	xor	cx,cx
 18245 00000811 31D2                    	xor	dx,dx
 18246                                  	;mov	ax,(LSEEK<<8)|2
 18247 00000813 B80242                  	mov	ax,4202h
 18248 00000816 F9                      	stc			;in case of int 24
 18249 00000817 CD21                    	int	21h		; get file size in dx:ax
 18250 00000819 7232                    	jc	short comerr
 18251                                  				; convert size in dx:ax to para in ax
 18252 0000081B 83C00F                  	add	ax,15		; round up size for conversion to para
 18253 0000081E 83D200                  	adc	dx,0
 18254 00000821 E8A903                  	call	off_to_para
 18255 00000824 B10C                    	mov	cl,12
 18256 00000826 D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 18257 00000828 09D0                    	or	ax,dx		; ax is now # of para for file
 18258 0000082A 83C010                  	add	ax,10h		; 100h byte php
 18259 0000082D 39E8                    	cmp	ax,bp		; will command fit in available mem?
 18260 0000082F 7203                    	jb	short okld	; jump if yes.
 18261                                  
 18262                                  	; 22/10/2022
 18263                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 18264                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 18265                                  	; 02/11/2022
 18266                                  	;jmp	mem_err
 18267                                  	; 11/12/2022
 18268                                  	; ds = cs
 18269 00000831 E99728                  	jmp	mem_err2
 18270                                  
 18271                                  ;memerrjx:
 18272                                  ;	mov	dx,badmem
 18273                                  ;	call	print
 18274                                  ;       jmp     short continue
 18275                                  
 18276                                  okld:
 18277 00000834 B43E                    	mov	ah,3Eh ; CLOSE
 18278 00000836 CD21                    	int	21h		; close file
 18279                                  
 18280                                  	; 22/10/2022
 18281 00000838 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 18282                                  
 18283                                  	; 24/03/2019
 18284                                  
 18285 00000839 0E                      	push	cs		; point es to sysinitseg
 18286 0000083A 07                      	pop	es
 18287 0000083B BB[3B03]                        mov     bx,COMEXE	; point to exec block
 18288                                  	; 22/10/2022
 18289                                  	;pop	dx              ; recover pointer to name
 18290                                  
 18291                                  ;;ifdef	MULTI_CONFIG
 18292                                  
 18293                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 18294                                  ;   there will be data if there were any valid SET commands and/or if a menu
 18295                                  ;   selection was made (in which case the CONFIG environment variable will be
 18296                                  ;   set to that selection).
 18297                                  
 18298                                  	; 23/10/2022
 18299                                  	;mov	cx,[config_envlen]
 18300                                  	;jcxz	no_envdata
 18301                                          ;mov	cx,[config_wrkseg]
 18302                                  ;no_envdata:
 18303                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 18304                                  	;mov	[bx],cx
 18305                                  
 18306                                  ;;endif	;MULTI_CONFIG
 18307                                  
 18308                                  	; 23/10/2022
 18309                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 18310                                  
 18311                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 18312 0000083E 8C4F04                  	mov	[bx+4],cs
 18313                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 18314 00000841 8C4F08                  	mov	[bx+8],cs
 18315                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 18316 00000844 8C4F0C                  	mov	[bx+12],cs
 18317                                  
 18318                                  ;mov	ax,(EXEC<<8) + 0
 18319                                  	; 23/10/2022
 18320                                  	;xor	ax,ax
 18321                                  	;mov	ah,4Bh
 18322                                  	; 14/08/2023
 18323                                  	;mov	ax,4B00h
 18324 00000847 B8004B                  	mov	ax,(EXEC<<8)       
 18325                                  
 18326 0000084A F9                      	stc                     ; in case of int 24
 18327 0000084B CD21                            int     21h             ; go start up command
 18328                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 18329                                  			; DS:DX -> ASCIZ filename
 18330                                  			; ES:BX -> parameter block
 18331                                  			; AL = subfunc: load & execute program
 18332                                  	;push	cs
 18333                                  	;pop	ds
 18334                                  
 18335                                  	; 23/10/2022
 18336                                  	;push	dx		; push to balance fall-through pop
 18337                                  
 18338                                  ; note fall through if exec returns (an error)
 18339                                  comerr:
 18340                                  	; 23/10/2022
 18341                                  ;;ifdef	MULTI_CONFIG
 18342                                  	;cmp	byte [commnd4],0
 18343                                  	;je	short comerr2	; all defaults exhausted, print err msg
 18344                                  	;cmp	byte [newcmd],0
 18345                                  	;je	short continue	; don't print err msg for defaults just yet
 18346                                  ;comerr2:
 18347                                  ;;endif
 18348 0000084D BA[6D37]                        mov     dx,badcom	; want to print command error
 18349 00000850 E8C82A                  	call	badfil
 18350                                  continue:
 18351                                  	; 23/10/2022
 18352                                  	;pop	dx
 18353                                  
 18354                                  ;;ifndef MULTI_CONFIG
 18355                                  	;jmp	stall
 18356                                  	; 24/10/2022
 18357                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 18358 00000853 EBFE                    	jmp	short stall
 18359                                  ;;else
 18360                                  	; 23/10/2022
 18361                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 18362                                  	;int	21h             ;
 18363                                  	;add	al,'A'          ;
 18364                                  	;mov	dl,al           ; DL == default drive letter
 18365                                  	;mov	si,commnd2
 18366                                  	;cmp	byte [newcmd],0 ; if a SHELL= was given
 18367                                  	;jne	short do_def2	; then try the 2nd alternate;
 18368                                  	;mov	byte [si],0	; otherwise, the default SHELL= was tried,
 18369                                  	;jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 18370                                  ;do_def2:			
 18371                                  	;cmp	byte [si],0	; has 2nd alternate been tried?
 18372                                          ;jne	short do_alt    ; no
 18373                                  ;do_def3:
 18374                                  	;mov	si,commnd3
 18375                                  	;cmp	byte [si],0	; has 3rd alternate been tried?
 18376                                  	;jne	short do_alt	; no
 18377                                  	;mov	si,commnd4
 18378                                  	;cmp	byte [si],0	; has 4th alternate been tried?
 18379                                  	;jne	short do_alt	; no
 18380                                  	;push	dx              ;
 18381                                  	;mov	dx,badcomprmpt
 18382                                  	;call	print		;
 18383                                  	;pop	dx              ; recover default drive letter in DL
 18384                                  ;request_input:			;
 18385                                  	;mov	ah,STD_CON_OUTPUT
 18386                                  	;int	21h             ;
 18387                                  	;push	dx              ;
 18388                                  	;mov	dl,'>'          ;
 18389                                  	;int	21h             ;
 18390                                  	;mov	bl,[tmplate+1]	;
 18391                                  	;mov	bh,0            ;
 18392                                  	;mov	byte [commnd+bx],0Dh
 18393                                  	;mov	dx,tmplate
 18394                                  	;mov	ah,STD_CON_STRING_INPUT
 18395                                  	;int	21h             ; read a line of input
 18396                                  	;mov	dx,crlfm	;
 18397                                  	;call	print           ;
 18398                                  	;pop	dx              ;
 18399                                  	;mov	bl,[tmplate+1]	;
 18400                                  	;or	bl,bl           ; was anything typed?
 18401                                  	;jz	short request_input ;
 18402                                  	;mov	byte [newcmd],1 ; disable validation for user-specified binaries
 18403                                  	;mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 18404                                  	;mov	word [command_line],0D00h
 18405                                  	;jmp	short do_exec   ;
 18406                                  ;do_alt:
 18407                                  	;push	ds
 18408                                  	;pop	es
 18409                                  	;mov	byte [newcmd],0 ; force validation for alternate binaries
 18410                                  	;mov	di,commnd	;
 18411                                  ;do_alt1:
 18412                                  	;lodsb			; copy the alternate, zapping it as we go,
 18413                                  	;mov	byte [si-1],0	; so that we know it's been tried
 18414                                  	;stosb 			;
 18415                                  	;or	al,al		;
 18416                                  	;jnz	short do_alt1	;
 18417                                  	;mov	di,command_line
 18418                                  	;cmp	byte [si+2],':'
 18419                                  	;jne	short do_alt2	;
 18420                                  	;mov	[si+1],dl	; stuff default drive into alt. command line
 18421                                  ;do_alt2:			;
 18422                                  	;lodsb			;
 18423                                  	;stosb			;
 18424                                  	;or	al,al           ;
 18425                                  	;jnz	short do_alt2   ;
 18426                                  	;mov	byte [di-1],cr
 18427                                  
 18428                                  ;;   Last but not least, see if we need to call disable_autoexec
 18429                                  
 18430                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 18431                                  	;;cmp	[command_line-1],0
 18432                                          ;;jne	short do_exec   ;
 18433                                          ;;mov	[command_line-1],'/'
 18434                                  	;;call	disable_autoexec ;
 18435                                  
 18436                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 18437                                  	;mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 18438                                  	;call	disable_autoexec
 18439                                  	;call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 18440                                  ;do_exec:
 18441                                  	;jmp     retry		;
 18442                                  
 18443                                  ;;endif	;MULTI_CONFIG
 18444                                  
 18445                                  ; 24/03/2019 - Retro DOS v4.0
 18446                                  
 18447                                  ; ----------------------------------------------------------------------
 18448                                  ; procedure : AllocFreeMem
 18449                                  ;
 18450                                  ; Allocate Max memory from DOS to find out where to load DOS.
 18451                                  ; DOS is at temporary location when this call is being made
 18452                                  ;
 18453                                  ; Inputs : None
 18454                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 18455                                  ;	   [area] & [memhi] set to the para value of the start of the
 18456                                  ;	   free memory.
 18457                                  ;
 18458                                  ; Uses   : AX, BX
 18459                                  ;
 18460                                  ; ----------------------------------------------------------------------
 18461                                  
 18462                                  	; 23/10/2022
 18463                                  AllocFreeMem:
 18464 00000855 BBFFFF                  	mov	bx,0FFFFh
 18465 00000858 B448                    	mov	ah,48h ; ALLOC
 18466 0000085A CD21                    	int	21h			; first time fails
 18467 0000085C B448                    	mov	ah,48h ; ALLOC
 18468 0000085E CD21                    	int	21h			; second time gets it
 18469                                  	; 11/12/2022
 18470                                  	; ds = cs
 18471                                  	;mov	[cs:area],ax
 18472                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 18473 00000860 A3[E403]                	mov	[area],ax
 18474 00000863 A3[E003]                	mov	[memhi],ax		; memhi:memlo now points to			
 18475 00000866 C3                      	retn				; start of free memory
 18476                                  				
 18477                                  	; include msbio.cl6
 18478                                  ; ----------------------------------------------------------------------
 18479                                  DOSLOMSG:
 18480 00000867 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 18480 00000870 7661696C61626C653A-
 18480 00000879 204C6F6164696E6720-
 18480 00000882 444F53206C6F770D0A-
 18480 0000088B 24                 
 18481                                  FEmsg:
 18482 0000088C 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 18482 00000895 6F723A2043616E6E6F-
 18482 0000089E 7420616C6C6F636174-
 18482 000008A7 65204D656D6F727920-
 18482 000008B0 666F7220444F530D0A-
 18482 000008B9 24                 
 18483                                  
 18484                                  ; ----------------------------------------------------------------------
 18485                                  ;
 18486                                  ; procedure : LoadDOSHiOrLo
 18487                                  ;
 18488                                  ;		Tries to move DOS into HMA. If it fails then loads
 18489                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 18490                                  ;		moved; this just tries to allocate the HMA, and prints
 18491                                  ;		a message if this is not possible.
 18492                                  ;
 18493                                  ; ----------------------------------------------------------------------
 18494                                  
 18495                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18496                                  LoadDOSHiOrLo:
 18497                                  	; 27/03/2019 - Retro DOS v4.0
 18498                                  	; ds = cs
 18499 000008BA E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 18500                                  	;jc	short LdngLo		; If that don't work...
 18501                                  	;retn
 18502                                  	; 18/12/2022
 18503 000008BD 731C                    	jnc	short LoadDosHi_ok
 18504                                  LdngLo:
 18505                                  	; 23/10/2022
 18506                                  	;push	cs
 18507                                  	;pop	ds
 18508                                  	; 11/12/2022
 18509                                  	; ds = cs
 18510 000008BF B409                    	mov	ah,9
 18511 000008C1 BA[6708]                	mov	dx,DOSLOMSG		; inform user that we are
 18512 000008C4 CD21                    	int	21h			; loading low
 18513                                  
 18514                                  ;ifndef ROMDOS
 18515                                  	; actually move the dos, and reinitialize it.
 18516                                  
 18517 000008C6 BB0100                  	mov	bx,1				; M012
 18518                                  						;  use int 21 alloc for mem
 18519 000008C9 E83F00                  	call	MovDOSLo
 18520                                  	; 11/12/2022
 18521                                  	; ds = cs
 18522                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 18523                                  	; 23/10/2022
 18524 000008CC 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18525                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 18526                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 18527 000008D0 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 18528                                  	; 11/12/2022
 18529                                  	; ds = cs
 18530                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 18531 000008D2 FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 18532                                  	
 18533                                  ;endif ; ROMDOS
 18534                                  	; 23/10/2022
 18535                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 18536                                  	; 11/12/2022
 18537                                  	; ds = cs
 18538 000008D6 C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 18539                                  LoadDosHi_ok:	; 18/12/2022
 18540 000008DB C3                      	retn
 18541                                  
 18542                                  ; ----------------------------------------------------------------------
 18543                                  ;
 18544                                  ; procedure : TryToMovDOSHi
 18545                                  ;
 18546                                  ;		This tries to move DOS into HMA.
 18547                                  ;		Returns CY if it failed.
 18548                                  ;		If it succeeds returns with carry cleared.
 18549                                  ;
 18550                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 18551                                  ;		the A20 switching code in the low mem stub to be installed.
 18552                                  ; 
 18553                                  ; ----------------------------------------------------------------------
 18554                                  
 18555                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18556                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 18557                                  TryToMovDOSHi:
 18558                                  	; 11/12/2022
 18559                                  	; 27/03/2019 - Retro DOS v4.0
 18560                                  	; ds = cs
 18561 000008DC E81300                  	call	MovDOSHi
 18562 000008DF 7210                    	jc	short ttldhx
 18563                                  
 18564                                  ;ifndef ROMDOS
 18565                                  	; 23/10/2022
 18566                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 18567                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 18568                                  	; 11/12/2022
 18569                                  	; ds = cs
 18570 000008E1 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18571                                  ;else
 18572                                  ;	..
 18573                                  ;endif ; ROMDOS
 18574                                  
 18575                                  	; 11/12/2022
 18576                                  	; ds = cs
 18577 000008E5 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 18578                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18579 000008E7 FF1E[7B02]              	call	far [dos_segreinit]
 18580                                  	;mov	byte [cs:runhigh],1
 18581 000008EB C606[6A02]01            	mov	byte [runhigh],1
 18582 000008F0 F8                      	clc
 18583                                  ttldhx:
 18584 000008F1 C3                      	retn
 18585                                  
 18586                                  ; ----------------------------------------------------------------------
 18587                                  ;
 18588                                  ; procedure : MovDOSHi
 18589                                  ;
 18590                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 18591                                  ;		For ROMDOS, the code is not actually moved, but the
 18592                                  ;		HMA is allocated and prepared for sub-allocation.
 18593                                  ;
 18594                                  ;		Returns : CY if it failed
 18595                                  ;
 18596                                  ; ----------------------------------------------------------------------
 18597                                  
 18598                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18599                                  MovDOSHi:
 18600                                  	; 14/05/2019
 18601                                  	; 27/03/2019 - Retro DOS v4.0
 18602                                  	; ds = cs
 18603 000008F2 E8D800                  	call	AllocHMA
 18604 000008F5 7213                    	jc	short mdhx			; did we get HMA?
 18605 000008F7 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 18606 000008FA 8EC0                    	mov	es,ax
 18607                                  
 18608                                  ;ifndef ROMDOS
 18609                                  	; actually move the BIOS and DOS
 18610                                  
 18611                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18612                                  	; 24/03/2019
 18613                                  	
 18614                                  	; 23/10/2022
 18615 000008FC E83400                  	call	MovBIOS				; First move BIOS into HMA
 18616                                  
 18617                                  	; ES:DI points to free HMA after BIOS
 18618                                  	
 18619                                  	; 14/05/2019
 18620                                  	; 24/03/2019 - Retro DOS v4.0
 18621                                  	;xor	di,di
 18622                                  	
 18623                                  	; 23/10/2022
 18624                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 18625                                  	; 11/12/2022
 18626                                  	; ds = cs
 18627 000008FF 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 18628 00000903 E81100                  	call	MovDOS				; and move it
 18629                                  
 18630                                  	; ES:DI points to free HMA after DOS
 18631                                  ;else
 18632                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 18633                                  ;
 18634                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 18635                                  ;
 18636                                  ;endif ; ROMDOS
 18637                                  
 18638 00000906 E86202                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 18639 00000909 F8                      	clc
 18640                                  mdhx:
 18641 0000090A C3                      	retn
 18642                                  
 18643                                  ; ----------------------------------------------------------------------
 18644                                  ;
 18645                                  ; procedure : MovDOSLo
 18646                                  ;
 18647                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 18648                                  ;
 18649                                  ; ----------------------------------------------------------------------
 18650                                  
 18651                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18652                                  
 18653                                  ;ifndef ROMDOS
 18654                                  
 18655                                  MovDOSLo:
 18656                                  	; 14/05/2019
 18657                                  	; 27/03/2019 - Retro DOS v4.0
 18658                                  	; ds = cs
 18659 0000090B E84800                  	call	AllocMemForDOS			; incestuosly!!!
 18660                                  	
 18661                                  	; 23/10/2022
 18662                                  	; 14/05/2019
 18663                                  	;inc	ax  ; skip MCB
 18664                                  	
 18665 0000090E 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 18666                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18667                                  	; 24/03/2019
 18668                                  	
 18669                                  	; 23/10/2022
 18670 00000910 E82000                  	call	MovBIOS
 18671                                  
 18672                                  ;------ ES:DI points memory immediately after BIOS
 18673                                  
 18674                                  	; 14/05/2019
 18675                                  	; NOTE: 
 18676                                  	;     Order of (RETRO) DOS kernel sections at memory:
 18677                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 18678                                  
 18679                                  	; 24/03/2019 - Retro DOS v4.0
 18680                                  	;xor	di,di	
 18681                                  
 18682                                  	; 23/10/2022
 18683                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 18684                                  	; 11/12/2022
 18685                                  	; ds = cs
 18686 00000913 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 18687                                  	;call	MovDOS
 18688                                  	;retn
 18689                                  	; 11/12/2022
 18690                                  	;jmp	short MovDOS
 18691                                  
 18692                                  ;endif ; ROMDOS
 18693                                  
 18694                                  ; 11/12/2022
 18695                                  
 18696                                  ; ----------------------------------------------------------------------
 18697                                  ;
 18698                                  ; procedure : MovDOS
 18699                                  ;
 18700                                  ;		Moves DOS code into requested area
 18701                                  ;
 18702                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18703                                  ;	     CX    - size of DOS code to be moved
 18704                                  ;
 18705                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18706                                  ;
 18707                                  ; ----------------------------------------------------------------------
 18708                                  
 18709                                  	; 11/12/2022
 18710                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18711                                  
 18712                                  ;ifndef ROMDOS
 18713                                  
 18714                                  MovDOS:
 18715                                  	; 14/05/2019
 18716                                  	; 27/03/2019 - Retro DOS v4.0
 18717                                  
 18718                                  	; 11/12/2022
 18719                                  	; ds = cs
 18720                                  
 18721                                  	; 23/10/2022
 18722                                  	;push	ds ; *//
 18723                                  	
 18724 00000917 06                      	push	es
 18725 00000918 57                      	push	di
 18726                                  
 18727                                  	; 11/12/2022
 18728 00000919 1E                      	push	ds ; *// ; 11/12/202
 18729                                  
 18730                                  	; 29/04/2019
 18731 0000091A C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 18732                                  	; 23/10/2022
 18733                                  	;lds	si,[cs:dosinit]
 18734                                  	;;mov	ax,si
 18735                                  
 18736 0000091E F3A4                    	rep	movsb
 18737                                  
 18738 00000920 1F                      	pop	ds ; *// ; 11/12/2022
 18739                                  
 18740 00000921 5B                      	pop	bx				; get back offset into which
 18741                                  						;  DOS was moved
 18742                                  
 18743 00000922 2EA1[6F02]              	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18744                                  						;  wants to run
 18745 00000926 29D8                    	sub	ax,bx
 18746 00000928 E8A202                  	call	off_to_para
 18747 0000092B 5B                      	pop	bx				; get the segment at which
 18748                                  						;  we moved DOS into
 18749 0000092C 29C3                    	sub	bx,ax				; Adjust segment
 18750                                  	
 18751                                  	; 11/12/2022
 18752                                  	; 23/10/2022
 18753                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18754                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18755                                  	; 11/12/2022
 18756 0000092E 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 18757                                  		
 18758                                  	; 27/03/2019
 18759                                  	;pop	ds ; *//
 18760                                  	; ds = cs
 18761                                  	;mov	[FINAL_DOS_LOCATION],bx
 18762                                  
 18763 00000932 C3                      	retn
 18764                                  
 18765                                  ;endif ;ROMDOS
 18766                                  
 18767                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18768                                  ; 24/03/2019
 18769                                  ; ----------------------------------------------------------------------
 18770                                  ;
 18771                                  ; procedure : MovBIOS
 18772                                  ;
 18773                                  ;		Moves BIOS code into requested segment
 18774                                  ;
 18775                                  ;	In : ES - segment to which BIOS is to be moved
 18776                                  ;		  ( it moves always into offset BCode_Start)
 18777                                  ;
 18778                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 18779                                  ;
 18780                                  ; ----------------------------------------------------------------------
 18781                                  
 18782                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18783                                  
 18784                                  ;ifndef ROMDOS
 18785                                  
 18786                                  MovBIOS: ; proc	near
 18787                                  	; 11/12/2022
 18788 00000933 1E                      	push	ds ; ds = cs	
 18789                                  	;
 18790                                  	; 23/10/2022
 18791 00000934 2E8E1E[8702]            	mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 18792                                  	;mov	si,BCODE_START ; mov si,30h
 18793                                  	; 09/12/2022
 18794 00000939 BE[3000]                	mov	si,BCODESTART
 18795 0000093C 89F7                    	mov	di,si
 18796 0000093E B9D019                  	mov	cx,BCODE_END ; mov cx,1A60h
 18797 00000941 29F1                    	sub	cx,si				; size of BIOS
 18798 00000943 D1E9                    	shr	cx,1				; Both the labels are para
 18799                                  						;  aligned
 18800 00000945 F3A5                    	rep	movsw
 18801                                  	
 18802                                  	; 11/12/2022
 18803 00000947 1F                      	pop	ds ; ds = cs
 18804                                  	;
 18805 00000948 06                      	push	es
 18806 00000949 57                      	push	di				; save end of BIOS
 18807 0000094A 8CC0                    	mov	ax,es
 18808                                  	;
 18809                                  	; 11/12/2022
 18810                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 18811                                  	;;call	dword ptr cs:_seg_reinit_ptr
 18812                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 18813                                  	; ds = cs
 18814 0000094C A3[0004]                	mov	[BCodeSeg],ax
 18815 0000094F FF1E[8502]              	call	far [seg_reinit_ptr]
 18816                                  	;
 18817 00000953 5F                      	pop	di
 18818 00000954 07                      	pop	es				; get back end of BIOS
 18819 00000955 C3                      	retn
 18820                                  
 18821                                  ;MovBIOS endp
 18822                                  
 18823                                  ;endif ; ROMDOS
 18824                                  
 18825                                  ; 11/12/2022
 18826                                  %if 0
 18827                                  
 18828                                  ; 24/03/2019
 18829                                  
 18830                                  ; ----------------------------------------------------------------------
 18831                                  ;
 18832                                  ; procedure : MovDOS
 18833                                  ;
 18834                                  ;		Moves DOS code into requested area
 18835                                  ;
 18836                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18837                                  ;	     CX    - size of DOS code to be moved
 18838                                  ;
 18839                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18840                                  ;
 18841                                  ; ----------------------------------------------------------------------
 18842                                  
 18843                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18844                                  
 18845                                  ;ifndef ROMDOS
 18846                                  
 18847                                  MovDOS:
 18848                                  	; 14/05/2019
 18849                                  	; 27/03/2019 - Retro DOS v4.0
 18850                                  
 18851                                  	; 11/12/2022
 18852                                  	; ds = cs
 18853                                  
 18854                                  	; 23/10/2022
 18855                                  	;push	ds ; *//
 18856                                  	
 18857                                  	push	es
 18858                                  	push	di
 18859                                  
 18860                                  	; 11/12/2022
 18861                                  	push	ds ; *// ; 11/12/202
 18862                                  
 18863                                  	; 29/04/2019
 18864                                  	lds	si,[dosinit] ; 11/12/2022
 18865                                  	; 23/10/2022
 18866                                  	;lds	si,[cs:dosinit]
 18867                                  	;;mov	ax,si
 18868                                  
 18869                                  	rep	movsb
 18870                                  
 18871                                  	pop	ds ; *// ; 11/12/2022
 18872                                  
 18873                                  	pop	bx				; get back offset into which
 18874                                  						;  DOS was moved
 18875                                  
 18876                                  	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18877                                  						;  wants to run
 18878                                  	sub	ax,bx
 18879                                  	call	off_to_para
 18880                                  	pop	bx				; get the segment at which
 18881                                  						;  we moved DOS into
 18882                                  	sub	bx,ax				; Adjust segment
 18883                                  	
 18884                                  	; 11/12/2022
 18885                                  	; 23/10/2022
 18886                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18887                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18888                                  	; 11/12/2022
 18889                                  	mov	[CURRENT_DOS_LOCATION],bx
 18890                                  		
 18891                                  	; 27/03/2019
 18892                                  	;pop	ds ; *//
 18893                                  	; ds = cs
 18894                                  	;mov	[FINAL_DOS_LOCATION],bx
 18895                                  
 18896                                  	retn
 18897                                  
 18898                                  ;endif ;ROMDOS
 18899                                  
 18900                                  %endif
 18901                                  
 18902                                  ; ----------------------------------------------------------------------
 18903                                  ;
 18904                                  ; procedure : AllocMemForDOS
 18905                                  ;
 18906                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 18907                                  ;
 18908                                  ;	Out : AX - seg of allocated memoryblock
 18909                                  ;
 18910                                  ; ----------------------------------------------------------------------
 18911                                  
 18912                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18913                                  
 18914                                  ;ifndef ROMDOS
 18915                                  
 18916                                  AllocMemForDOS:
 18917                                  	; 11/12/2022
 18918                                  	; 14/05/2019
 18919                                  	; 27/03/2019 - Retro DOS v4.0
 18920                                  	; ds = cs
 18921                                  	;mov	ax,BCode_end
 18922                                  	;sub	ax,BCode_start		; BIOS code size
 18923                                  	; 23/10/2022
 18924 00000956 B8D019                  	mov	ax,BCODE_END ; 1A60h
 18925                                  	;sub	ax,BCODE_START ; 30h
 18926                                  	; 09/12/2022
 18927 00000959 2D[3000]                	sub	ax,BCODESTART 
 18928                                  	; 24/03/2019 - Retro DOS v4.0 
 18929                                  	; 02/11/2022
 18930                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 18931                                  	; 11/12/2022
 18932                                  	; ds = cs
 18933 0000095C 0306[7F02]              	add	ax,[lo_doscod_size]
 18934 00000960 83C00F                  	add	ax,15
 18935 00000963 E86702                  	call	off_to_para			; convert to para
 18936                                  	; 23/10/2022
 18937                                  	; 14/05/2019
 18938                                  	;inc	ax ; + 1 paragraph for MCB
 18939 00000966 09DB                    	or	bx,bx				; M012
 18940 00000968 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 18941 0000096A 741A                    	jz	short update_arena		; M012
 18942 0000096C B448                    	mov	ah,48h				; request DOS
 18943 0000096E CD21                    	int	21h
 18944 00000970 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 18945                                   	; 23/10/2022
 18946                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 18947 00000972 83E803                  	sub	ax,3				; Take care ORG 30h of
 18948                                  						;  BIOS code
 18949 00000975 8EC0                    	mov	es,ax
 18950                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 18951                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 18952                                  	; 14/05/2019
 18953                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 18954                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 18955                                  	; 23/10/2022
 18956 00000977 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 18957 0000097E 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 18958                                  
 18959 00000985 C3                      	retn
 18960                                  
 18961                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 18962                                  ;	  using DOS itself causes an arena to be generated.
 18963                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 18964                                  ;	  assume that the device drivers are loaded into
 18965                                  ;	  the first arena. For this reason, MagicDrv's
 18966                                  ;	  main device driver header arena is manually
 18967                                  ;	  truncated from the arena chain, and the space
 18968                                  ;	  for DOS is allocated using the following
 18969                                  ;	  simple code, which also assumes that the
 18970                                  ;	  first arena is the free one where DOS's low
 18971                                  ;	  stub will go.
 18972                                  ;
 18973                                  ; M012 : BEGIN
 18974                                  
 18975                                  	; 23/10/2022
 18976                                  update_arena:
 18977 00000986 1E                      	push	ds ; ds = cs
 18978 00000987 57                      	push	di
 18979 00000988 51                      	push	cx
 18980 00000989 52                      	push	dx
 18981                                  	; 23/10/2022
 18982                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 18983                                  	; 11/12/2022
 18984                                  	; ds = cs 
 18985 0000098A C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 18986 0000098E 4F                      	dec	di
 18987 0000098F 4F                      	dec	di				; Arena head is immediately
 18988                                  						;  before sysvar
 18989 00000990 8E05                    	mov	es,[di]				; es = arena head
 18990                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 18991 00000992 268B0E0300              	mov	cx,[es:3]
 18992 00000997 39D9                    	cmp	cx,bx				; is it sufficient ?
 18993 00000999 7227                    	jb	short FatalErr			; no, fatal error
 18994                                  
 18995                                  	;mov	dl,[es:ARENA.SIGNATURE]
 18996 0000099B 268A160000              	mov	dl,[es:0]
 18997 000009A0 8CC0                    	mov	ax,es
 18998 000009A2 01D8                    	add	ax,bx				; ax = new arena head
 18999 000009A4 8905                    	mov	[di],ax				; store it in DOS data area
 19000 000009A6 8ED8                    	mov	ds,ax
 19001                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 19002 000009A8 88160000                	mov	[0],dl
 19003                                  	;mov	word [ARENA.OWNER],0		; free
 19004 000009AC C70601000000            	mov	word [1],0
 19005 000009B2 29D9                    	sub	cx,bx				; size of the new block
 19006                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 19007 000009B4 890E0300                	mov	[3],cx
 19008 000009B8 8CC0                    	mov	ax,es				; return seg to the caller
 19009                                  	; 23/10/2022
 19010                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 19011 000009BA 83E803                  	sub	ax,3				;  BIOS code
 19012 000009BD 5A                      	pop	dx
 19013 000009BE 59                      	pop	cx
 19014 000009BF 5F                      	pop	di
 19015 000009C0 1F                      	pop	ds ; ds = cs
 19016 000009C1 C3                      	retn
 19017                                  ;
 19018                                  ; M012 : END
 19019                                  ;
 19020                                  FatalErr:
 19021 000009C2 0E                      	push	cs
 19022 000009C3 1F                      	pop	ds
 19023 000009C4 BA[8C08]                	mov	dx,FEmsg
 19024 000009C7 B409                    	mov	ah,9
 19025 000009C9 CD21                    	int	21h 		; DOS - PRINT STRING
 19026                                  				; DS:DX -> string terminated by "$"
 19027                                          ;jmp	stall
 19028                                  	; 23/10/2022
 19029 000009CB FA                      	cli
 19030 000009CC F4                      	hlt
 19031                                  
 19032                                  ;endif ;ROMDOS
 19033                                  
 19034                                  ; 25/03/2019 - Retro DOS v4.0
 19035                                  
 19036                                  ; ----------------------------------------------------------------------
 19037                                  ;
 19038                                  ; procedure : AllocHMA
 19039                                  ;
 19040                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 19041                                  ;	  up there. If it gets any sort of error, it will return with
 19042                                  ;	  carry set so that we can resort to running low.
 19043                                  ;
 19044                                  ;	It also returns ES: -> 0ffffh if it returns success
 19045                                  ;
 19046                                  ; ----------------------------------------------------------------------
 19047                                  
 19048                                  AllocHMA:
 19049                                  ;	cas note:  The pre-286 check is no longer needed here since the
 19050                                  ;		   presence of XMS is sufficient. However, this code hasn't
 19051                                  ;		   been deleted because it can be recycled for skipping the
 19052                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 19053                                  ;		   in the case of a pre-286.
 19054                                  
 19055                                  ;;	see if we're running on a pre-286. If not, force low.
 19056                                  ;
 19057                                  ;	xor	ax,ax
 19058                                  ;	pushf			; save flags (like int)
 19059                                  ;	push	ax
 19060                                  ;	popf
 19061                                  ;	pushf
 19062                                  ;	pop	ax
 19063                                  ;	popf			; restore original flags (like int)
 19064                                  ;	and	ax,0F000h
 19065                                  ;	cmp	ax,0F000h	; 8088/8086?
 19066                                  ;	jz	short grab_hma_error
 19067                                  
 19068                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19069                                  	; (SYSINIT:0A26h)
 19070                                  
 19071 000009CD 1E                      	push	ds
 19072                                  	;;mov	ax,Bios_Data
 19073                                  	;mov	ax,KERNEL_SEGMENT
 19074                                  	; 21/10/2022
 19075 000009CE B87000                  	mov	ax,DOSBIODATASEG
 19076 000009D1 8ED8                    	mov	ds,ax
 19077                                  
 19078 000009D3 E84A00                  	call	IsXMSLoaded
 19079 000009D6 7545                    	jnz	short grabhma_error
 19080                                  
 19081 000009D8 B81043                  	mov	ax,4310h
 19082 000009DB CD2F                    	int	2Fh		; get the vector into es:bx
 19083                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 19084                                  		; Return: ES:BX -> driver entry point
 19085                                  
 19086 000009DD 891E[0E00]              	mov	[xms],bx
 19087                                  	;mov	[0Eh], bx
 19088 000009E1 8C06[1000]              	mov	[xms+2],es
 19089                                  	;mov	[10h],es
 19090                                  
 19091 000009E5 B401                    	mov	ah,1		; request HMA
 19092 000009E7 BAFFFF                  	mov	dx,0FFFFh
 19093                                  	;call	dword ptr ds:0Eh
 19094 000009EA FF1E[0E00]              	call	far [xms]
 19095 000009EE 48                      	dec	ax
 19096 000009EF 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 19097                                  
 19098                                  ;------ Himem may be lying because it has allocated mem for int 15
 19099                                  
 19100 000009F1 B488                    	mov	ah,88h
 19101 000009F3 CD15                    	int	15h
 19102                                  		; Get Extended Memory Size
 19103                                  		; Return: CF clear on success
 19104                                  		; AX = size of memory above 1M in K
 19105 000009F5 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 19106                                  	;jb	short grabhma_error
 19107                                  	; 11/12/2022
 19108 000009F8 7224                    	jb	short grabhma_err ; cf=1
 19109                                  allocHMA_1:
 19110 000009FA B405                    	mov	ah,5		; localenableA20
 19111                                  	;call	dword ptr ds:0Eh
 19112 000009FC FF1E[0E00]              	call	far [xms]
 19113 00000A00 48                      	dec	ax
 19114 00000A01 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 19115                                  
 19116 00000A03 E88901                  	call	IsVDiskInstalled
 19117 00000A06 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 19118                                  
 19119 00000A08 B8FFFF                  	mov	ax,0FFFFh
 19120 00000A0B 8EC0                    	mov	es,ax
 19121 00000A0D 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 19122 00000A14 26813E10003412          	cmp	word [es:10h],1234h
 19123                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 19124                                  	; 11/12/2022
 19125 00000A1B 7401                    	je	short allocHMA_ok	
 19126                                  
 19127                                  ; 11/12/2022
 19128                                  ;	; 11/12/2022
 19129                                  ;	; cf=0
 19130                                  ;	;clc
 19131                                  ;	pop	ds
 19132                                  ;	retn
 19133                                  
 19134                                  grabhma_error:
 19135 00000A1D F9                      	stc
 19136                                  	; 11/12/022
 19137                                  grabhma_err:	; cf=1
 19138                                  allocHMA_ok:	; cf=0
 19139 00000A1E 1F                      	pop	ds
 19140 00000A1F C3                      	retn
 19141                                  
 19142                                  ; ----------------------------------------------------------------------
 19143                                  ;
 19144                                  ; procedure : IsXMSLoaded
 19145                                  ;
 19146                                  ;             Checks whether a XMS driver is loaded
 19147                                  ;
 19148                                  ; Returns : Z flag set if XMS driver loaded
 19149                                  ;           Z flag reset if no XMS drivers are present
 19150                                  ;
 19151                                  ; ----------------------------------------------------------------------
 19152                                  
 19153                                  IsXMSLoaded:
 19154 00000A20 B80043                  	mov	ax,4300h
 19155 00000A23 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 19156                                  				; Return: AL = 80h XMS driver installed
 19157                                  				; AL <> 80h no driver
 19158 00000A25 3C80                    	cmp	al,80h		; XMS installed?
 19159 00000A27 C3                      	retn
 19160                                  
 19161                                  ; ----------------------------------------------------------------------
 19162                                  ; procedure : FTryToMovDOSHi
 19163                                  ;
 19164                                  ;		Called from HMA suballoc calls
 19165                                  ;	
 19166                                  ; ----------------------------------------------------------------------
 19167                                  
 19168                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19169                                  	; (SYSINIT:0A84h)
 19170                                  
 19171                                  FTryToMovDOSHi:	; proc	far
 19172                                  
 19173 00000A28 50                      	push	ax
 19174 00000A29 53                      	push	bx
 19175 00000A2A 51                      	push	cx
 19176 00000A2B 52                      	push	dx
 19177 00000A2C 56                      	push	si
 19178 00000A2D 57                      	push	di
 19179 00000A2E 1E                      	push	ds
 19180 00000A2F 06                      	push	es
 19181                                  
 19182                                  	; 23/10/2022
 19183                                  	; 27/03/2019 - Retro DOS v4.0
 19184                                  	; 11/12/2022
 19185 00000A30 0E                      	push	cs
 19186 00000A31 1F                      	pop	ds
 19187                                  
 19188                                  	;cmp	byte [cs:runhigh],0FFh
 19189                                  	; 11/12/2022
 19190 00000A32 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 19191 00000A37 7503                    	jne	short _ftymdh_1
 19192                                  
 19193                                  	; ds = cs
 19194 00000A39 E8A0FE                  	call	TryToMovDOSHi
 19195                                  _ftymdh_1:
 19196 00000A3C 07                      	pop	es
 19197 00000A3D 1F                      	pop	ds
 19198 00000A3E 5F                      	pop	di
 19199 00000A3F 5E                      	pop	si
 19200 00000A40 5A                      	pop	dx
 19201 00000A41 59                      	pop	cx
 19202 00000A42 5B                      	pop	bx
 19203 00000A43 58                      	pop	ax
 19204                                  
 19205 00000A44 CB                      	retf
 19206                                  
 19207                                  ; ----------------------------------------------------------------------
 19208                                  ;
 19209                                  ; following piece of code will be moved into a para boundary. And the para
 19210                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 19211                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 19212                                  ; to determine free extended memory.
 19213                                  ;
 19214                                  ; For more details read "power programming" column by Ray Duncan in the
 19215                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 19216                                  ;
 19217                                  ; ----------------------------------------------------------------------
 19218                                  
 19219                                  StartVDHead:
 19220                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 19221                                  
 19222 00000A45 00000000                	dd	0		; link to next device driver
 19223 00000A49 0080                    	dw	8000h		; device attribute
 19224 00000A4B 0000                    	dw	0		; strategy routine offset
 19225 00000A4D 0000                    	dw	0		; interrupt routine offset
 19226 00000A4F 01                      	db	1		; number of units
 19227                                  	;db	7 dup(0) 
 19228 00000A50 00<rep 7h>              	times	7 db 0 		; reserved area
 19229                                  VDiskSig1:
 19230 00000A57 564449534B              	db	'VDISK'
 19231                                  
 19232                                  VLEN1	equ	($-VDiskSig1)
 19233                                  
 19234 00000A5C 202056332E33            	db	'  V3.3'	; vdisk label
 19235                                  	;db	15 dup (0)	; pad
 19236 00000A62 00<rep Fh>              	times	15 db 0
 19237 00000A71 0000                    	dw	0		; bits 0-15 of free HMA
 19238 00000A73 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 19239                                  VDInt19:
 19240 00000A74 EA                      	db	0EAh		; jmp to old vector
 19241                                  OldVDInt19:
 19242 00000A75 00000000                	dd	0		; Saved int 19 vector
 19243                                  
 19244                                  EndVDHead: ; label byte
 19245                                  
 19246                                  VDiskHMAHead:	
 19247 00000A79 000000                  	db	0,0,0		; non-bootable disk
 19248                                  VDiskSig2:
 19249 00000A7C 564449534B              	db	'VDISK'
 19250                                  
 19251                                  VLEN2	equ	($-VDiskSig2)
 19252                                  
 19253 00000A81 332E33                  	db	'3.3'		; OEM - signature
 19254 00000A84 8000                    	dw	128		; number of bytes/sector
 19255 00000A86 01                      	db	1		; sectors/cluster
 19256 00000A87 0100                    	dw	1		; reserved sectors
 19257 00000A89 01                      	db	1		; number of FAT copies
 19258 00000A8A 4000                    	dw	64		; number of root dir entries
 19259 00000A8C 0002                    	dw	512		; number of sectors
 19260 00000A8E FE                      	db	0FEh		; media descriptor
 19261 00000A8F 0600                    	dw	6		; number of sectors/FAT
 19262 00000A91 0800                    	dw	8		; sectors per track
 19263 00000A93 0100                    	dw	1		; number of heads
 19264 00000A95 0000                    	dw	0		; number of hidden sectors
 19265 00000A97 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 19266                                  
 19267                                  EndVDiskHMAHead: ; label byte
 19268                                  
 19269                                  ; ----------------------------------------------------------------------
 19270                                  ;
 19271                                  ; procedure : InstVDiskHeader
 19272                                  ;
 19273                                  ;             Installs the VDISK header to reserve the 64k of HMA
 19274                                  ;	      It puts a 32 byte header at 10000:0 and
 19275                                  ;	      another header at (seg of int19):0
 19276                                  ;
 19277                                  ; Inputs : None
 19278                                  ;
 19279                                  ; Outputs : None
 19280                                  ;
 19281                                  ; USES : DS,SI,AX,CX,DX
 19282                                  ;
 19283                                  ; ----------------------------------------------------------------------
 19284                                  
 19285                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19286                                  
 19287                                  InstVDiskHeader:
 19288 00000A99 31C0                    	xor	ax,ax
 19289 00000A9B 8ED8                    	mov	ds,ax			; seg of int vect table
 19290                                  
 19291                                  ;-------------- save old int 19 vector
 19292                                  
 19293                                  	; 23/10/2022
 19294 00000A9D A16400                  	mov	ax,[19h*4]
 19295                                  	;mov	[OldVDInt19],ax
 19296 00000AA0 2EA3[750A]              	mov	[cs:OldVDInt19],ax
 19297 00000AA4 A16600                  	mov	ax,[19h*4+2]
 19298                                  	;mov	[OldVDInt19+2],ax
 19299 00000AA7 2EA3[770A]              	mov	[cs:OldVDInt19+2],ax
 19300                                  
 19301                                  ;-------------- calculate seg of new int 19 handler
 19302                                  
 19303 00000AAB B448                    	mov	ah,48h			; allocate memory
 19304                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 19305                                  	; 23/10/2022
 19306 00000AAD BB0400                  	mov	bx,4
 19307 00000AB0 CD21                    	int	21h
 19308                                  
 19309                                  ;	if carry, fatal hanging error!!!!!
 19310                                  
 19311 00000AB2 48                      	dec	ax			; point to arena
 19312 00000AB3 8EC0                    	mov	es,ax
 19313                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 19314 00000AB5 26C70601000800          	mov	word [es:1],8
 19315                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 19316 00000ABC 26C70608005343          	mov	word [es:8],'SC'
 19317 00000AC3 40                      	inc	ax
 19318 00000AC4 8EC0                    	mov	es,ax			; get back to allocated memory
 19319                                  
 19320                                  ;-------------- install new int 19 vector
 19321                                  
 19322 00000AC6 FA                      	cli				; no reboots at this time
 19323                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 19324 00000AC7 C70664002F00            	mov	word [19h*4],47
 19325 00000ACD A36600                  	mov	[19h*4+2],ax
 19326                                  
 19327                                  ;-------------- move the code into proper place
 19328                                  
 19329                                  	;mov	cx,(EndVDHead-StartVDHead)
 19330 00000AD0 B93400                  	mov	cx,52
 19331 00000AD3 BE[450A]                	mov	si,StartVDHead
 19332 00000AD6 31FF                    	xor	di,di
 19333 00000AD8 0E                      	push	cs
 19334 00000AD9 1F                      	pop	ds
 19335 00000ADA FC                      	cld
 19336 00000ADB F3A4                    	rep	movsb
 19337 00000ADD FB                      	sti				; BUGBUG is sti OK now?
 19338                                  
 19339                                  ;-------------- mov the HMA VDisk head into HMA
 19340                                  
 19341                                  	; 23/10/2022
 19342 00000ADE 57                      	push	di
 19343 00000ADF 06                      	push	es
 19344                                  
 19345 00000AE0 B8FFFF                  	mov	ax,0FFFFh
 19346 00000AE3 8EC0                    	mov	es,ax
 19347 00000AE5 BF1000                  	mov	di,10h
 19348                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 19349 00000AE8 B92000                  	mov	cx,32
 19350 00000AEB BE[790A]                	mov	si,VDiskHMAHead
 19351 00000AEE F3A4                    	rep	movsb			; ds already set to cs
 19352                                  
 19353 00000AF0 5F                      	pop	di
 19354 00000AF1 07                      	pop	es
 19355                                  
 19356 00000AF2 C3                      	retn
 19357                                  
 19358                                  ; ----------------------------------------------------------------------
 19359                                  ; procedure : ClrVDISKHeader
 19360                                  ;
 19361                                  ;		Clears the first 32 bytes at 1MB boundary
 19362                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 19363                                  ;		left by previous DOS=HIGH session
 19364                                  ;
 19365                                  ; ----------------------------------------------------------------------
 19366                                  
 19367                                  struc desc
 19368 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 19369 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 19370 00000004 ??                       .hi_byte:	resb 	1		; address
 19371 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 19372 00000006 ????                     .reserved:	resw	1		;
 19373                                   .size:
 19374                                  endstruc
 19375                                  
 19376                                  		; 23/10/2022
 19377                                  bmove:		;label byte
 19378                                  
 19379                                  dummy:		;times desc.size db 0	; desc	<>
 19380 00000AF3 00<rep 8h>              		times 8 db 0		 
 19381                                  gdt:		;times desc.size db 0	; desc	<>
 19382 00000AFB 00<rep 8h>              		times 8 db 0
 19383 00000B03 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 19384 00000B05 0000                    		dw	0
 19385 00000B07 00                      		db	0
 19386 00000B08 93                      		db	93h
 19387 00000B09 0000                    		dw	0
 19388 00000B0B FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 19389 00000B0D 0000                    		dw	0
 19390 00000B0F 10                      		db	10h
 19391 00000B10 93                      		db	93h
 19392 00000B11 0000                    		dw	0
 19393                                  
 19394                                  rombios_code:	;times desc.size db 0	; desc	<>
 19395 00000B13 00<rep 8h>              		times 8 db 0
 19396                                  temp_stack:	;times desc.size db 0	; desc	<>
 19397 00000B1B 00<rep 8h>              		times 8 db 0
 19398                                  
 19399 00000B23 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 19400                                  
 19401                                  
 19402                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIt1.ASM)
 19403                                  
 19404                                  ClrVDISKHeader:	; proc	near
 19405                                  
 19406                                  ;;-----------------------------------------------------------	      ;I070
 19407                                  ;; The following workaround get around a problem with the	      ;I070
 19408                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 19409                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 19410                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 19411                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 19412                                  ;; move crashes the system. We can do this because these	      ;I070
 19413                                  ;; systems clear all of memory on a cold boot.			      ;I070
 19414                                  ;								      ;I070
 19415                                  ;               in      al,64h         ; Test for password servr mode ;I070
 19416                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 19417                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 19418                                  ;                                      ; Check for Tortugas...	      ;I070
 19419                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 19420                                  ;               je      short ClrVDISKno                              ;I070
 19421                                  ;                                      ; Check for mod 30-286	      ;I070
 19422                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 19423                                  ;               jne     short ClrVDISKok			      ;I070
 19424                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 19425                                  ;								      ;I070
 19426                                  ;ClrVDISKok:							      ;I070
 19427                                  ;-----------------------------------------------------------	      ;I070
 19428                                  
 19429                                  	; 12/12/2022
 19430                                  	; ds = cs
 19431                                  
 19432 00000B43 06                      	push	es
 19433 00000B44 8CC8                    	mov	ax,cs
 19434 00000B46 89C2                    	mov	dx,ax
 19435 00000B48 B10C                    	mov	cl,12
 19436 00000B4A D3EA                    	shr	dx,cl
 19437 00000B4C B104                    	mov	cl,4
 19438 00000B4E D3E0                    	shl	ax,cl
 19439 00000B50 05[230B]                	add	ax,ClrdVDISKHead
 19440 00000B53 80D200                  	adc	dl,0
 19441                                  
 19442                                  	;; 23/10/2022
 19443                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 19444                                  	;mov	[cs:src_desc+2],ax
 19445                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 19446                                  	;mov	[cs:src_desc+4],dl
 19447                                  	; 12/12/2022
 19448                                  	;mov	[src_desc+desc.lo_word],ax
 19449 00000B56 A3[050B]                	mov	[src_desc+2],ax
 19450                                  	;mov	[src_desc+desc.hi_byte],dl
 19451 00000B59 8816[070B]              	mov	[src_desc+4],dl
 19452                                  
 19453 00000B5D B91000                  	mov	cx,16	; 16 words
 19454 00000B60 0E                      	push	cs
 19455 00000B61 07                      	pop	es
 19456 00000B62 BE[F30A]                	mov	si,bmove
 19457 00000B65 B487                    	mov	ah,87h
 19458 00000B67 CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 19459                                  			; CX = number of words to move 
 19460                                  			; ES:SI -> global descriptor table
 19461                                  			; Return: CF set on error, AH = status
 19462 00000B69 07                      	pop	es
 19463 00000B6A C3                      	retn
 19464                                  
 19465                                  ; ----------------------------------------------------------------------
 19466                                  ;
 19467                                  ; procedure : SaveFreeHMAPtr
 19468                                  ;
 19469                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 19470                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 19471                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 19472                                  ;		the offset.
 19473                                  ;
 19474                                  ; Inputs : ES:DI - pointer to free HMA
 19475                                  ; Output : FreeHMAPtr in BIOS data segment updated
 19476                                  ;
 19477                                  ; ----------------------------------------------------------------------
 19478                                  
 19479                                  SaveFreeHMAPtr:
 19480 00000B6B 8CC3                    	mov	bx,es
 19481 00000B6D B8FFFF                  	mov	ax,0FFFFh		; HMA segment
 19482 00000B70 29D8                    	sub	ax,bx
 19483 00000B72 83C70F                  	add	di,15			; para round
 19484 00000B75 83E7F0                  	and	di,0FFF0h
 19485 00000B78 B104                    	mov	cl,4
 19486 00000B7A D3E0                    	shl	ax,cl
 19487 00000B7C 29C7                    	sub	di,ax
 19488 00000B7E 1E                      	push	ds
 19489                                  	;;mov	ax,Bios_Data ; 0070h
 19490                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19491                                  	; 21/10/2022
 19492 00000B7F B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19493 00000B82 8ED8                    	mov	ds,ax
 19494 00000B84 893E[F508]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 19495 00000B88 C606[0D00]FF            	mov	byte [inHMA],0FFh  ; (ds:0Dh)
 19496 00000B8D 1F                      	pop	ds
 19497 00000B8E C3                      	retn
 19498                                  
 19499                                  ; ----------------------------------------------------------------------
 19500                                  ;
 19501                                  ; procedure : IsVDiskInstalled
 19502                                  ;
 19503                                  ;		Checks for the presence of VDISK header at 1MB boundary
 19504                                  ;		& INT 19 vector
 19505                                  ;
 19506                                  ; Inputs  : A20 flag should be ON
 19507                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 19508                                  ;
 19509                                  ; ----------------------------------------------------------------------
 19510                                  
 19511                                  IsVDiskInstalled:
 19512 00000B8F 31C0                    	xor	ax,ax
 19513 00000B91 8ED8                    	mov	ds,ax
 19514 00000B93 8E1E4E00                	mov	ds,[19*4+2]
 19515                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 19516                                  	; 23/10/2022
 19517 00000B97 BE1200                  	mov	si,18
 19518                                  	;mov	cx,VLEN1 ; 5
 19519 00000B9A B90500                  	mov	cx,5
 19520 00000B9D 0E                      	push	cs
 19521 00000B9E 07                      	pop	es
 19522 00000B9F BF[570A]                	mov	di,VDiskSig1
 19523 00000BA2 F3A6                    	rep	cmpsb
 19524 00000BA4 7410                    	je	short ivdins_retn
 19525 00000BA6 B8FFFF                  	mov	ax,0FFFFh
 19526 00000BA9 8ED8                    	mov	ds,ax
 19527                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 19528 00000BAB BE1300                  	mov	si,13h
 19529 00000BAE BF[7C0A]                	mov	di,VDiskSig2
 19530                                  	;mov	cx,VLEN2  ; 5
 19531 00000BB1 B90500                  	mov	cx,5
 19532 00000BB4 F3A6                    	rep	cmpsb
 19533                                  ivdins_retn: 
 19534 00000BB6 C3                      	retn			; returns the Zero flag
 19535                                  
 19536                                  ; ----------------------------------------------------------------------
 19537                                  ;
 19538                                  ; procedure : CPMHack
 19539                                  ;
 19540                                  ;		Copies the code from 0:c0 into ffff:0d0h
 19541                                  ;		for CPM compatibility
 19542                                  ;
 19543                                  ; ----------------------------------------------------------------------
 19544                                  
 19545                                  	; 11/12/2022
 19546                                  CPMHack:
 19547 00000BB7 1E                      	push	ds
 19548 00000BB8 B9FFFF                  	mov	cx,0FFFFh
 19549 00000BBB 8EC1                    	mov	es,cx		; ES = FFFF
 19550                                  	;xor	cx,cx
 19551                                  	; 11/12/2022
 19552 00000BBD 41                      	inc	cx  ; cx = 0
 19553 00000BBE 8ED9                    	mov	ds,cx		; DS = 0
 19554 00000BC0 BEC000                  	mov	si,0C0h
 19555 00000BC3 BFD000                  	mov	di,0D0h
 19556                                  	;mov	cx,5
 19557 00000BC6 B105                    	mov	cl,5
 19558 00000BC8 FC                      	cld
 19559 00000BC9 F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 19560 00000BCB 1F                      	pop	ds
 19561 00000BCC C3                      	retn
 19562                                  
 19563                                  ; ----------------------------------------------------------------------
 19564                                  ;
 19565                                  ; procedure : off_to_para
 19566                                  ;
 19567                                  ; ----------------------------------------------------------------------
 19568                                  off_to_para:
 19569 00000BCD D1E8                    	shr	ax,1
 19570 00000BCF D1E8                    	shr	ax,1
 19571 00000BD1 D1E8                    	shr	ax,1
 19572 00000BD3 D1E8                    	shr	ax,1
 19573 00000BD5 C3                      	retn
 19574                                  
 19575                                  ; ----------------------------------------------------------------------
 19576                                  ;**	TempCDS - Create (Temporary?) CDS
 19577                                  ;
 19578                                  ;	ENTRY	?? BUGBUG
 19579                                  ;		(DS) = SysInitSeg
 19580                                  ;	EXIT	?? BUGBUG
 19581                                  ;	USES	?? BUGBUG
 19582                                  ; ----------------------------------------------------------------------
 19583                                  
 19584                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19585                                  TempCDS:
 19586 00000BD6 C43E[6B02]              	les	di,[DOSINFO]
 19587 00000BDA 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 19588                                  	;mov	cl,[es:di+20h]
 19589 00000BDE 30ED                    	xor	ch,ch			; (cx) = # of block devices
 19590                                  
 19591 00000BE0 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 19592                                  	;mov	[es:di+21h],cl	
 19593                                  
 19594 00000BE4 88C8                    	mov	al,cl
 19595 00000BE6 B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 19596                                  	;mov	ah,88
 19597 00000BE8 F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 19598 00000BEA E8D304                  	call	ParaRound		; (ax) = paragraph size for CDSs
 19599 00000BED 8B36[A102]              	mov	si,[top_of_cdss] ; mov si,[CONFBOT]
 19600                                  
 19601                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 19602                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 19603                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 19604                                  ;		   variable which has the top of free memory for
 19605                                  ;		   device driver loads, etc.
 19606                                  
 19607 00000BF1 29C6                    	sub	si,ax
 19608                                  
 19609                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 19610                                  ;		that automatically updates alloclim every time we
 19611                                  ;		set up some new CDSs. Instead, I've added code
 19612                                  ;		which pre-allocates space for 26 CDSs. This
 19613                                  ;	        way we've got room for worst case CDSs before
 19614                                  ;		we place MagicDrv.sys
 19615                                  ;
 19616                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 19617                                  
 19618                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19619                                  	; (SYSINIT:0C52h)
 19620 00000BF3 8936[A302]              	mov	[ALLOCLIM],si
 19621                                  
 19622 00000BF7 26897518                	mov	[es:di+SYSI_CDS+2],si
 19623                                  	;mov	[es:di+18h],si
 19624 00000BFB 89F0                    	mov	ax,si
 19625 00000BFD 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 19626                                  	;mov	[word es:di+16h],0
 19627                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 19628 00000C03 26C535                  	lds	si,[es:di]
 19629 00000C06 8EC0                    	mov	es,ax
 19630 00000C08 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 19631                                  
 19632                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 19633                                  ;	info from the corresponding DPB.
 19634                                  ;
 19635                                  ;	(cx) = count of CDSs left to process
 19636                                  ;	(es:di) = address of next CDS
 19637                                  
 19638                                  fooset:
 19639                                  	; 23/10/2022
 19640 00000C0A 2EA1[A502]              	mov	ax,[cs:DirStrng] ; "A:"
 19641 00000C0E AB                      	stosw				; setup the root as the curdir
 19642                                  
 19643                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 19644                                  
 19645                                  ;	(ds:si) = address of DPB
 19646                                  ;		 (si) = -1 if no drive
 19647                                  
 19648 00000C0F 2EA1[A702]              	mov	ax,[cs:DirStrng+2] ; "\",0
 19649 00000C13 AB                      	stosw
 19650 00000C14 2EFE06[A502]            	inc	byte [cs:DirStrng]
 19651 00000C19 31C0                    	xor	ax,ax
 19652 00000C1B 51                      	push	cx
 19653                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 19654 00000C1C B93F00                  	mov	cx,63	; 23/10/2022
 19655 00000C1F F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 19656                                  
 19657                                  ;	should handle the system that does not have any floppies.
 19658                                  ;	in this case,we are going to pretended there are two dummy floppies
 19659                                  ;	in the system. still they have dpb and cds,but we are going to
 19660                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 19661                                  ;	"invalid drive specification" message when the user try to
 19662                                  ;	access them.
 19663                                  ;
 19664                                  ;	(ax) = 0
 19665                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19666                                  ;	(ds:si) = Next DPB (-1 if none)
 19667                                  
 19668 00000C21 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 19669 00000C24 7414                    	je	short fooset_zero	; don't have any physical drive.
 19670                                  
 19671                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 19672                                  ;	if we are faking floppy drives then see if this cds being initialised
 19673                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 19674                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 19675                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 19676                                  ;	for dpb offsets look at inc\dpb.inc.
 19677                                  
 19678 00000C26 2E803E[8902]01          	cmp	byte [cs:fake_floppy_drv],1
 19679 00000C2C 7513                    	jne	short normcds 		; machine has floppy drives
 19680                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 19681 00000C2E 803C01                  	cmp	byte [si],1
 19682 00000C31 770E                    	ja	short normcds
 19683 00000C33 B103                    	mov	cl,3			; the next dbp pointer
 19684                                  					; AX should be zero here
 19685 00000C35 F3AB                    	rep	stosw
 19686 00000C37 59                      	pop	cx
 19687 00000C38 EB18                    	jmp	short get_next_dpb
 19688                                  
 19689                                  ;	(ax) = 0
 19690                                  
 19691                                  fooset_zero:
 19692 00000C3A B103                    	mov	cl,3
 19693 00000C3C F3AB                    	rep	stosw
 19694 00000C3E 59                      	pop	cx
 19695 00000C3F EB14                    	jmp	short fincds
 19696                                  
 19697                                  ;*	We have a "normal" DPB and thus a normal CDS.
 19698                                  ;
 19699                                  ;	(ax) = 0
 19700                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19701                                  ;	(ds:si) = Next DPB (-1 if none)
 19702                                  
 19703                                  normcds:
 19704 00000C41 59                      	pop	cx
 19705                                  
 19706                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 19707                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 19708                                  ;	this media is a non-fat based one.
 19709                                  
 19710                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 19711                                  	; 23/10/2022
 19712 00000C42 807C0800                	cmp	byte [si+8],0
 19713 00000C46 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 19714 00000C48 B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 19715                                  	;mov	ax,4000h
 19716                                  setnormcds:
 19717 00000C4B AB                      	stosw				; curdir_flags
 19718 00000C4C 89F0                    	mov	ax,si
 19719 00000C4E AB                      	stosw				; curdir_devptr
 19720 00000C4F 8CD8                    	mov	ax,ds
 19721 00000C51 AB                      	stosw
 19722                                  
 19723                                  get_next_dpb:				; entry point for fake_fooset_zero
 19724                                  	; 23/10/2022
 19725 00000C52 C57419                  	lds	si,[si+19h]
 19726                                  	;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19727                                  fincds:
 19728 00000C55 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 19729 00000C58 AB                      	stosw				; curdir_id
 19730 00000C59 AB                      	stosw				; curdir_id
 19731 00000C5A AB                      	stosw				; curdir_user_word
 19732 00000C5B B80200                  	mov	ax,2
 19733 00000C5E AB                      	stosw				; curdir_end
 19734 00000C5F B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 19735 00000C61 AA                      	stosb
 19736 00000C62 AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 19737 00000C63 AB                      	stosw
 19738 00000C64 AB                      	stosw
 19739                                  
 19740 00000C65 E2A3                    	loop	fooset
 19741                                  	
 19742 00000C67 2EC606[A502]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 19743                                  	
 19744 00000C6D C3                      	retn
 19745                                  
 19746                                  ; ----------------------------------------------------------------------
 19747                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 19748                                  ;
 19749                                  ;	entry:
 19750                                  ;	   al == ASCII CAPS drive letter
 19751                                  ;
 19752                                  ;	exit:
 19753                                  ;	   ds:si -> DPB, or si = -1 if not found
 19754                                  ; ----------------------------------------------------------------------
 19755                                  
 19756                                  ;	; 23/10/2022 (get_dpb_for_drive_al
 19757                                  ;
 19758                                  ;get_dpb_for_drive_al:
 19759                                  ;	lds	si,[cs:DOSINFO]		; point to first DPB
 19760                                  ;	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 19761                                  ;	lds	si,[si]
 19762                                  ;	sub	al,'A'
 19763                                  ;
 19764                                  ;get_dpb_for_drive_1:
 19765                                  ;	;cmp	al,[si+DPB.DRIVE]	; match?
 19766                                  ;	cmp	al,[si]
 19767                                  ;	je	short got_dpb_for_drive	;  done if so
 19768                                  ;
 19769                                  ;	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19770                                  ;	cmp	si,-1
 19771                                  ;	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 19772                                  ;
 19773                                  ;got_dpb_for_drive:
 19774                                  ;	retn
 19775                                  
 19776                                  ;=======================================================================
 19777                                  
 19778                                  ;**	EndFile - Build DOS structures
 19779                                  ;
 19780                                  ; This procedure is called after the config.sys has been processed and
 19781                                  ; installable device drivers have been loaded (but before "install="
 19782                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 19783                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 19784                                  ; to allow for the safe EXECing of "install=" programs. All memory
 19785                                  ; above these structures is deallocated back to DOS.
 19786                                  ;
 19787                                  ;	ENTRY	?? BUGBUG
 19788                                  ;	EXIT	?? BUGBUG
 19789                                  ;	USES	?? BUGBUG
 19790                                  
 19791                                  ;=======================================================================
 19792                                  ; allocate files
 19793                                  ; ----------------------------------------------------------------------
 19794                                  
 19795                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19796                                  	; (SYSINIT:0CCDh)
 19797                                  
 19798                                  endfile:
 19799                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 19800                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 19801                                  ; to confbot.
 19802                                  
 19803                                  ;	if this procedure has been called to take care of install= command,
 19804                                  ;	   then we have to save es,si registers.
 19805                                  
 19806                                  	; 11/12/2022
 19807                                  	; ds = cs
 19808                                  
 19809                                  	; 23/10/2022
 19810                                  	; 31/03/2019
 19811 00000C6E 1E                      	push	ds
 19812                                  
 19813                                  	;;mov	ax,Bios_Data ; 0070h
 19814                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19815                                  	; 21/10/2022
 19816 00000C6F B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19817 00000C72 8ED8                    	mov	ds,ax
 19818                                  
 19819                                  	;cmp	word [052Fh],0
 19820 00000C74 833E[2F05]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 19821 00000C79 7505                    	jne	short multrk_flag_done
 19822                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19823                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 19824                                  	; 12/12/2022
 19825 00000C7B 800E[2F05]80            	or	byte [multrk_flag],multrk_on ; 80h
 19826                                  multrk_flag_done:
 19827                                  	; 23/10/2022
 19828                                  	; 31/03/2019
 19829 00000C80 1F                      	pop	ds
 19830                                  
 19831                                  	; 11/12/2022
 19832                                  	; ds = cs
 19833 00000C81 A1[A102]                	mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 19834 00000C84 A3[A302]                	mov	[ALLOCLIM],ax
 19835                                  	; 23/10/2022
 19836                                  	;mov	ax, [cs:top_of_cdss]
 19837                                  	;mov	[cs:ALLOCLIM], ax 
 19838                                  
 19839                                  	; 11/12/2022
 19840                                  	; ds = cs
 19841                                  	;push	cs
 19842                                  	;pop	ds
 19843                                  	
 19844                                  	;mov	ax,[CONFBOT]
 19845                                  	;mov	[ALLOCLIM],ax
 19846                                  
 19847 00000C87 E8FE23                  	call	round
 19848                                  	; 11/12/2022
 19849                                  	; ds = cs
 19850 00000C8A A0[9D02]                	mov	al,[FILES]
 19851                                  	; 23/10/2022
 19852                                  	;mov	al,[cs:FILES]
 19853 00000C8D 2C05                    	sub	al,5
 19854 00000C8F 764B                    	jbe	short dofcbs
 19855                                  
 19856 00000C91 50                      	push	ax
 19857                                  	;mov	al,devmark_files ; 'F'
 19858 00000C92 B046                    	mov	al,'F'
 19859 00000C94 E87A07                  	call	setdevmark		; set devmark for sfts (files)
 19860 00000C97 58                      	pop	ax
 19861 00000C98 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19862                                  					;  it does sign extend.
 19863                                  	; 11/12/2022
 19864                                  	; ds = cs
 19865 00000C9A 8B1E[DE03]              	mov	bx,[memlo]
 19866 00000C9E 8B16[E003]              	mov	dx,[memhi]
 19867 00000CA2 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19868                                  	; 23/10/2022
 19869                                  	;mov	bx,[cs:memlo]
 19870                                  	;mov	dx,[cs:memhi]
 19871                                  	;lds	di,[cs:DOSINFO]		
 19872                                  
 19873                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 19874 00000CA6 C57D04                  	lds	di,[di+4]
 19875                                  
 19876                                  	;mov	[di+SF.SFLink],bx
 19877 00000CA9 891D                    	mov	[di],bx
 19878 00000CAB 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 19879                                  
 19880 00000CAE 0E                      	push	cs
 19881 00000CAF 1F                      	pop	ds
 19882                                  
 19883                                  	; 11/12/2022
 19884                                  	; ds = cs
 19885 00000CB0 C43E[DE03]              	les	di,[memlo]		;point to new sft
 19886                                  	; 23/10/2022
 19887                                  	;les	di,[cs:memlo]
 19888                                  
 19889                                  	;mov	word [es:di+SF.SFLink],-1
 19890 00000CB4 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 19891                                  	;mov	[es:di+SF.SFCount],ax
 19892 00000CB9 26894504                	mov	[es:di+4],ax
 19893                                  	;mov	bl,SF_ENTRY.size ; 59
 19894 00000CBD B33B                    	mov	bl,59
 19895 00000CBF F6E3                    	mul	bl			;ax = number of bytes to clear
 19896 00000CC1 89C1                    	mov	cx,ax
 19897                                  	; 11/12/2022
 19898                                  	; ds = cs
 19899 00000CC3 0106[DE03]              	add	[memlo],ax		;allocate memory
 19900                                  	; 23/10/2022
 19901                                  	;add	[cs:memlo],ax
 19902 00000CC7 B80600                  	mov	ax,6
 19903                                  	; 11/12/2022
 19904 00000CCA 0106[DE03]              	add	[memlo],ax		;remember the header too
 19905                                  	;add	[cs:memlo],ax
 19906                                  	; 11/12/2022
 19907 00000CCE 800E[3414]02            	or	byte [setdevmarkflag],for_devmark ; 2
 19908                                  	; 23/10/2022
 19909                                  	;or	byte [cs:setdevmarkflag],2
 19910 00000CD3 E8B223                  	call	round			; check for mem error before the stosb
 19911 00000CD6 01C7                    	add	di,ax
 19912 00000CD8 31C0                    	xor	ax,ax
 19913 00000CDA F3AA                    	rep	stosb			;clean out the stuff
 19914                                  
 19915                                  ; allocate fcbs
 19916                                  ; ----------------------------------------------------------------------
 19917                                  
 19918                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19919                                  	; (SYSINIT:0D48h)
 19920                                  dofcbs:
 19921                                  	; 11/12/2022
 19922                                  	; ds = cs
 19923                                  	;push	cs
 19924                                  	;pop	ds
 19925 00000CDC E8A923                  	call	round
 19926                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 19927 00000CDF B058                    	mov	al,'X'
 19928 00000CE1 E82D07                  	call	setdevmark
 19929                                  	; 11/12/2022
 19930                                  	; ds = cs
 19931 00000CE4 A0[9E02]                	mov	al,[FCBS]
 19932                                  	;mov	al,[cs:FCBS]
 19933 00000CE7 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19934                                  					;  it does sign extend.
 19935                                  	; 11/12/2022
 19936 00000CE9 8B1E[DE03]              	mov	bx,[memlo]
 19937 00000CED 8B16[E003]              	mov	dx,[memhi]
 19938 00000CF1 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19939                                  	; 23/10/2022
 19940                                  	;mov	bx,[cs:memlo]
 19941                                  	;mov	dx,[cs:memhi]
 19942                                  	;lds	di,[cs:DOSINFO]
 19943                                  
 19944                                  	;mov	[di+SYSI_FCB],bx
 19945                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 19946                                  	; 23/10/2022
 19947 00000CF5 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 19948 00000CF8 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 19949                                  
 19950 00000CFB 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 19951 00000D00 30FF                    	xor	bh,bh
 19952                                  	;mov	[di+SYSI_KEEP],bx
 19953 00000D02 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 19954                                  
 19955 00000D05 0E                      	push	cs
 19956 00000D06 1F                      	pop	ds
 19957                                  	
 19958 00000D07 C43E[DE03]              	les	di,[memlo]		;point to new table
 19959                                  	;mov	word [es:di+SF.SFLink],-1
 19960 00000D0B 26C705FFFF              	mov	word [es:di],-1
 19961                                  	;mov	[es:di+SF.SFCount],ax
 19962                                  	; 02/11/2022
 19963 00000D10 26894504                	mov	[es:di+4],ax
 19964 00000D14 B339                    	mov	bl,SF_ENTRY.size ; 59
 19965 00000D16 89C1                    	mov	cx,ax
 19966 00000D18 F6E3                    	mul	bl			;ax = number of bytes to clear
 19967 00000D1A 0106[DE03]              	add	[memlo],ax		;allocate memory
 19968                                  	;mov	ax,6
 19969 00000D1E B80600                  	mov	ax,SF.size-2 ; 6
 19970 00000D21 0106[DE03]              	add	[memlo],ax		;remember the header too
 19971                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 19972 00000D25 800E[3414]02            	or	byte [setdevmarkflag],2
 19973 00000D2A E85B23                  	call	round			; check for mem error before the stosb
 19974 00000D2D 01C7                    	add	di,ax			;skip over header
 19975 00000D2F B041                    	mov	al,'A'
 19976                                  fillloop:
 19977 00000D31 51                      	push	cx			; save count
 19978 00000D32 B93900                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 19979 00000D35 FC                      	cld
 19980 00000D36 F3AA                    	rep	stosb			; filled
 19981                                  
 19982                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 19983                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 19984                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 19985                                  
 19986                                  	; 18/12/2022
 19987                                  	;cx = 0
 19988 00000D38 26894DC7                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 19989 00000D3C 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 19990 00000D40 26894DDE                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 19991                                  	
 19992                                  	; 23/10/2022	
 19993                                  	;mov     word [es:di-3Bh],0
 19994                                  	;mov     word [es:di-26h],0
 19995                                  	;mov     word [es:di-24h],0
 19996                                  
 19997 00000D44 59                      	pop	cx
 19998 00000D45 E2EA                    	loop	fillloop
 19999                                  
 20000                                  ; allocate buffers
 20001                                  ; ----------------------------------------------------------------------
 20002                                  
 20003                                  ; search through the list of media supported and allocate 3 buffers if the
 20004                                  ; capacity of the drive is > 360kb
 20005                                  
 20006                                  	; 18/12/2022
 20007                                  	; cx = 0
 20008 00000D47 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 20009 00000D4C 7403                    	je	short dodefaultbuff
 20010 00000D4E E98700                  	jmp	dobuff			; the user entered the buffers=.
 20011                                  
 20012                                  dodefaultbuff:
 20013                                  	; 18/12/2022
 20014 00000D51 890E[9902]              	mov	[h_buffers],cx ; 0
 20015 00000D55 41                      	inc	cx
 20016 00000D56 41                      	inc	cx
 20017 00000D57 890E[9702]              	mov	[buffers],cx ; 2	
 20018                                  	
 20019                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 20020                                  	;mov	word [buffers],2	; default to 2 buffers
 20021                                  
 20022                                  	; 23/10/2022	
 20023 00000D5B 50                      	push	ax
 20024 00000D5C 1E                      	push	ds ; 26/03/2019
 20025                                  	;les	bp,[DOSINFO]		; search through the dpb's
 20026 00000D5D 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 20027                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 20028                                  	; 11/12/2022
 20029 00000D62 26C46E00                	les	bp,[es:bp]
 20030                                  	; 23/10/2022
 20031                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 20032                                  
 20033 00000D66 0E                      	push	cs
 20034 00000D67 1F                      	pop	ds
 20035                                  ;SYSINIT:0DE2h:
 20036                                  nextdpb:				; test if the drive supports removeable media
 20037                                  	;mov	bl,[es:bp+DPB.drive]
 20038                                  	; 11/12/2022
 20039 00000D68 268A5E00                	mov	bl,[es:bp]
 20040                                  	; 23/10/2022
 20041                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20042                                  
 20043                                  	;inc	bl
 20044                                  	; 18/12/2022
 20045 00000D6C 43                      	inc	bx
 20046                                  
 20047                                  	;mov	ax,(IOCTL<<8)|8
 20048 00000D6D B80844                  	mov	ax,4408h
 20049 00000D70 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20050                                  
 20051                                  ; ignore fixed disks
 20052                                  
 20053 00000D72 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 20054 00000D74 7534                    	jnz	short nosetbuf
 20055                                  
 20056                                  ; get parameters of drive
 20057                                  
 20058 00000D76 31DB                    	xor	bx,bx
 20059                                  	;;mov	bl,[es:bp+DPB.drive]
 20060                                  	; 11/12/2022
 20061 00000D78 268A5E00                	mov	bl,[es:bp]
 20062                                  	; 23/10/2022
 20063                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20064                                  	
 20065                                  	;inc	bl
 20066                                  	; 18/12/2022
 20067 00000D7C 43                      	inc	bx
 20068                                  
 20069 00000D7D BA[2E35]                	mov	dx,deviceparameters
 20070                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 20071 00000D80 B80D44                  	mov	ax,440Dh
 20072                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 20073 00000D83 B96008                  	mov	cx,860h
 20074 00000D86 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20075 00000D88 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 20076                                  					; generic ioctl
 20077                                  ; determine capacity of drive
 20078                                  ; media capacity = #sectors * bytes/sector
 20079                                  
 20080                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 20081                                  	; 23/10/2022
 20082 00000D8A 8B1E[3D35]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 20083                                  	
 20084                                  ; to keep the magnitude of the media capacity within a word,
 20085                                  ; scale the sector size
 20086                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 20087                                  
 20088                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 20089                                  	; 23/10/2022
 20090 00000D8E A1[3535]                	mov	ax, [deviceparameters+7] ; bytes per sector
 20091 00000D91 31D2                    	xor	dx,dx
 20092 00000D93 B90002                  	mov	cx,512
 20093 00000D96 F7F1                    	div	cx			; scale sector size in factor of
 20094                                  					; 512 bytes
 20095 00000D98 F7E3                    	mul	bx			; ax = #sectors * size factor
 20096 00000D9A 09D2                    	or	dx,dx			; just in case of large floppies
 20097 00000D9C 7505                    	jnz	short setbuf
 20098 00000D9E 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 20099 00000DA1 7607                    	jbe	short nosetbuf
 20100                                  setbuf:
 20101                                  	; 18/12/2022
 20102                                  	; word [buffers] = 2
 20103 00000DA3 C606[9702]03            	mov	byte [buffers],3
 20104                                  	;mov	word [buffers],3
 20105 00000DA8 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 20106                                  					; for default buffer count
 20107                                  nosetbuf:
 20108                                  	; 23/10/2022
 20109                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 20110 00000DAA 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 20111 00000DAF 7406                    	je	short chk_memsize_for_buffers
 20112                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 20113 00000DB1 26C46E19                	les	bp,[es:bp+19h]
 20114 00000DB5 EBB1                    	jmp	short nextdpb
 20115                                  
 20116                                  ;from dos 3.3,the default number of buffers will be changed according to the
 20117                                  ;memory size too.
 20118                                  ; default buffers = 2
 20119                                  ; if diskette media > 360 kb,then default buffers = 3
 20120                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 20121                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 20122                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 20123                                  
 20124                                  chk_memsize_for_buffers:
 20125                                  	; 18/12/2022
 20126                                  	;cmp	word [MEMORY_SIZE],2000h
 20127                                  	;jbe	short bufset
 20128                                  	;mov	word [buffers],5
 20129                                  	;cmp	word [MEMORY_SIZE],4000h
 20130                                  	;jbe	short bufset
 20131                                  	;mov	word [buffers],10
 20132                                  	;cmp	word [MEMORY_SIZE],8000h
 20133                                  	;jbe	short bufset
 20134                                  	;mov	word [buffers],15
 20135                                  
 20136                                  	; 18/12/2022
 20137                                  	; word [buffers] = 3 or 2
 20138 00000DB7 BB[9702]                	mov	bx,buffers
 20139 00000DBA A1[9202]                	mov	ax,[MEMORY_SIZE]
 20140 00000DBD 48                      	dec	ax	; [MEMORY_SIZE] - 1
 20141                                  
 20142 00000DBE 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 20143 00000DC1 7213                    	jb	short bufset
 20144 00000DC3 C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 20145 00000DC6 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 20146 00000DC9 730B                    	jnb	short bufset
 20147 00000DCB C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 20148 00000DCE 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 20149 00000DD1 7303                    	jnb	short bufset
 20150 00000DD3 C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 20151                                  bufset:
 20152                                  	; 23/10/2022
 20153                                  	; 26/03/2019
 20154 00000DD6 1F                      	pop	ds
 20155 00000DD7 58                      	pop	ax
 20156                                  
 20157                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20158                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 20159                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20160                                  
 20161                                  ; 26/03/2019
 20162                                  
 20163                                  ;*******************************************************************************
 20164                                  ;									       *
 20165                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 20166                                  ; input :								       *
 20167                                  ;    memhi:memlo - start of the next available memory			       *
 20168                                  ;    buffers = number of buffers					       *
 20169                                  ;    h_buffers = number of secondary buffers				       *
 20170                                  ;									       *
 20171                                  ; output:								       *
 20172                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 20173                                  ;	buffinfo set.							       *
 20174                                  ;	bufferqueue set.						       *
 20175                                  ;									       *
 20176                                  ; subroutines to be called:						       *
 20177                                  ;									       *
 20178                                  ;*******************************************************************************
 20179                                  
 20180                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20181                                  	; (SYSINIT:0E60h)
 20182                                  dobuff:
 20183                                  	; ds = cs ; 31/03/2019
 20184                                  	; 23/10/2022
 20185 00000DD8 2EC51E[6B02]            	lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 20186                                  	;mov	ax,[buffers] ; 31/03/2019
 20187                                  	;lds	bx,[DOSINFO]
 20188 00000DDD 2EA1[9702]              	mov	ax,[cs:buffers]	; set sysi_buffers
 20189                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 20190 00000DE1 89473F                  	mov	[bx+3Fh],ax
 20191 00000DE4 2EA1[9902]              	mov	ax,[cs:h_buffers]
 20192                                  	;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 20193 00000DE8 894741                  	mov	[bx+41h],ax
 20194 00000DEB C55F12                  	lds	bx,[bx+12h]
 20195                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 20196 00000DEE E89722                  	call	round		; get [memhi]:[memlo]
 20197                                  	;mov	al,devmark_buf	; ='B'
 20198 00000DF1 B042                    	mov	al,'B'	
 20199 00000DF3 E81B06                  	call	setdevmark
 20200                                  
 20201                                  ;allocate buffers
 20202                                  
 20203 00000DF6 1E                      	push	ds			; save buffer info. ptr.
 20204 00000DF7 53                      	push	bx
 20205                                  
 20206 00000DF8 E85203                  	call	set_buffer
 20207                                  
 20208 00000DFB 5B                      	pop	bx
 20209 00000DFC 1F                      	pop	ds
 20210                                  
 20211                                  ;now set the secondary buffer if specified.
 20212                                  
 20213 00000DFD 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 20214 00000E03 742D                    	je	short xif16
 20215 00000E05 E88022                  	call	round
 20216                                  	; 23/10/2022
 20217 00000E08 2E8B0E[DE03]            	mov	cx,[cs:memlo]
 20218                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 20219 00000E0D 894F06                  	mov	[bx+6],cx
 20220 00000E10 2E8B0E[E003]            	mov	cx,[cs:memhi]
 20221                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 20222 00000E15 894F08                  	mov	[bx+8],cx
 20223 00000E18 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 20224                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 20225 00000E1D 894F0A                  	mov	[bx+10],cx
 20226 00000E20 B80002                  	mov	ax,512			; 512 byte
 20227 00000E23 F7E1                    	mul	cx
 20228 00000E25 2EA3[DE03]              	mov	[cs:memlo],ax
 20229                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20230 00000E29 2E800E[3414]02          	or	byte [cs:setdevmarkflag],2
 20231 00000E2F E85622                  	call	round
 20232                                  xif16:
 20233                                  
 20234                                  ; ----------------------------------------------------------------------
 20235                                  ; allocate cdss
 20236                                  ; ----------------------------------------------------------------------
 20237                                  
 20238                                  buf1:
 20239 00000E32 E85322                  	call	round
 20240                                  
 20241 00000E35 50                      	push	ax
 20242                                  	; 23/10/2022
 20243                                  	;mov	ax,devmark_cds		;='L'
 20244 00000E36 B84C00                  	mov	ax, 'L'
 20245 00000E39 E8D505                  	call	setdevmark
 20246 00000E3C 58                      	pop	ax
 20247                                  
 20248 00000E3D 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 20249                                  	;mov	cl,[es:di+SYSI_NUMIO]
 20250 00000E42 268A4D20                	mov	cl,[es:di+20h]
 20251 00000E46 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 20252 00000E4B 7305                    	jae	short gotncds 		; user setting must be at least numio
 20253 00000E4D 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 20254                                  gotncds:
 20255 00000E52 30ED                    	xor	ch,ch
 20256                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 20257 00000E54 26884D21                	mov	[es:di+21h],cl
 20258 00000E58 2EA1[E003]              	mov	ax,[cs:memhi]
 20259                                  	;mov	[es:di+SYSI_CDS+2],ax
 20260 00000E5C 26894518                	mov	[es:di+18h],ax
 20261 00000E60 2EA1[DE03]              	mov	ax,[cs:memlo]
 20262                                  	;mov	[es:di+SYSI_CDS],ax
 20263 00000E64 26894516                	mov	[es:di+16h],ax
 20264 00000E68 88C8                    	mov	al,cl
 20265                                  	;mov	ah,curdirlen ; curdir_list.size
 20266 00000E6A B458                    	mov	ah,88
 20267 00000E6C F6E4                    	mul	ah
 20268 00000E6E E84F02                  	call	ParaRound
 20269 00000E71 2E0106[E003]            	add	[cs:memhi],ax
 20270                                  
 20271                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20272 00000E76 2E800E[3414]02          	or	byte [cs:setdevmarkflag],2
 20273 00000E7C E80922                  	call	round			; check for mem error before initializing
 20274                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 20275 00000E7F 26C535                  	lds	si,[es:di]
 20276                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 20277 00000E82 26C47D16                	les	di,[es:di+16h]
 20278 00000E86 E881FD                  	call	fooset
 20279                                  
 20280                                  ; ----------------------------------------------------------------------
 20281                                  ; allocate space for internal stack
 20282                                  ; ----------------------------------------------------------------------
 20283                                  
 20284 00000E89 0E                      	push	cs
 20285 00000E8A 1F                      	pop	ds
 20286                                  
 20287                                  ;	if the user did not entered stacks= command, as a default, do not install
 20288                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 20289                                  ;	otherwise,install it to the user specified value or to the default
 20290                                  ;	value of 9,128 for other systems.
 20291                                  
 20292 00000E8B 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 20293 00000E90 740E                    	je	short doinstallstack	; then install as specified by the user
 20294 00000E92 803E[3803]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 20295 00000E97 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 20296 00000E99 803E[3703]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 20297 00000E9E 736D                    	jae	short skipstack
 20298                                  doinstallstack:
 20299 00000EA0 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 20300 00000EA3 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 20301 00000EA5 7466                    	jz	short skipstack		; don't install stack.
 20302                                  
 20303                                  ;	dynamic relocation of stack code.
 20304                                  
 20305 00000EA7 E8DE21                  	call	round			;[memhi] = seg. for stack code
 20306                                  					;[memlo] = 0
 20307                                  
 20308                                  ; set devmark block into memory for mem command
 20309                                  ; devmark_id = 's' for stack
 20310                                  
 20311                                  	;mov	al,devmark_stk	;='S'
 20312                                  	; 23/10/2022
 20313 00000EAA B053                    	mov	al,'S'
 20314 00000EAC E86205                  	call	setdevmark
 20315                                  
 20316 00000EAF A1[E003]                	mov	ax,[memhi]
 20317 00000EB2 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 20318                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20319                                  	; 11/12/2022
 20320                                  	; ds = cs
 20321                                  	;push	cs
 20322                                  	;pop	ds
 20323 00000EB4 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 20324 00000EB6 31FF                    	xor	di,di
 20325 00000EB8 B9[6702]                	mov	cx,endstackcode
 20326 00000EBB 890E[DE03]              	mov	[memlo],cx
 20327 00000EBF E8C621                  	call	round		;have enough space for relocation?
 20328 00000EC2 F3A4                    	rep	movsb
 20329                                  
 20330 00000EC4 1E                      	push	ds		; stick the location of the NextStack entry
 20331                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 20332                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 20333                                  	; 21/10/2022
 20334 00000EC5 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20335 00000EC8 8ED8                    	mov	ds,ax
 20336 00000ECA C706[BE08][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 20337 00000ED0 8C06[C008]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 20338                                  
 20339 00000ED4 2EA1[DE03]              	mov	ax,[cs:memlo]
 20340 00000ED8 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 20341 00000EDC A3[C408]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 20342 00000EDF 2EA1[E003]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 20343 00000EE3 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 20344 00000EE7 A3[C608]                	mov	[IT_StackLoc+2],ax
 20345                                  
 20346                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 20347                                  
 20348                                  	;mov	ax,entrysize ; mov ax,8
 20349                                  	; 23/10/2022
 20350 00000EEA B80800                  	mov	ax,8
 20351 00000EED 2E0306[8C02]            	add	ax,[cs:stack_size]
 20352 00000EF2 2EF726[8A02]            	mul	word [cs:stack_count]
 20353                                  
 20354 00000EF7 A3[C808]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 20355                                  
 20356 00000EFA 1F                      	pop	ds		; no more need to access Instance Table
 20357                                  
 20358 00000EFB E8C201                  	call	ParaRound	; convert size to paragraphs
 20359                                  	
 20360                                  	; 11/12/2022
 20361                                  	; ds = cs
 20362                                  	;add	[cs:memhi],ax
 20363 00000EFE 0106[E003]              	add	[memhi],ax
 20364                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20365                                  	;or	byte [cs:setdevmarkflag],2
 20366 00000F02 800E[3414]02            	or	byte [setdevmarkflag],2
 20367                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20368                                  				;to set the devmark_size for stack by round routine.
 20369 00000F07 E87E21                  	call	round		; check for memory error before
 20370                                  				; continuing
 20371 00000F0A E8E902                  	call	stackinit	; initialize hardware stack. 
 20372                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 20373                                  skipstack:
 20374                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20375                                  	; (SYSINIT:0F99h)
 20376                                  
 20377                                  	; 11/12/2022
 20378                                  	; ds = cs
 20379                                  	;push	cs
 20380                                  	;pop	ds
 20381                                  
 20382 00000F0D A0[9D02]                	mov	al,[FILES]
 20383 00000F10 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 20384                                  				;  it does sign extend.
 20385 00000F12 89C1                    	mov	cx,ax
 20386 00000F14 31DB                    	xor	bx,bx		;close standard input
 20387 00000F16 B43E                    	mov	ah,3Eh ; CLOSE
 20388 00000F18 CD21                    	int	21h
 20389 00000F1A BB0200                  	mov	bx,2
 20390                                  rcclloop:			;close everybody but standard output
 20391 00000F1D B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 20392 00000F1F CD21                    	int	21h		; in case we can't get new one open.
 20393 00000F21 43                      	inc	bx
 20394 00000F22 E2F9                    	loop	rcclloop
 20395                                  
 20396 00000F24 BA[B833]                	mov	dx,condev
 20397 00000F27 B002                    	mov	al,2
 20398 00000F29 B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 20399 00000F2B F9                      	stc			; set for possible int 24
 20400 00000F2C CD21                    	int	21h
 20401 00000F2E 7305                    	jnc	short goaux
 20402 00000F30 E8E823                  	call	badfil
 20403 00000F33 EB13                    	jmp	short goaux2
 20404                                  goaux:	
 20405 00000F35 50                      	push	ax
 20406 00000F36 BB0100                  	mov	bx,1		;close standard output
 20407 00000F39 B43E                    	mov	ah,3Eh ; CLOSE
 20408 00000F3B CD21                    	int	21h
 20409 00000F3D 58                      	pop	ax
 20410                                  
 20411 00000F3E 89C3                    	mov	bx,ax		;new device handle
 20412 00000F40 B445                    	mov	ah,45h ; XDUP
 20413 00000F42 CD21                    	int	21h		;dup to 1,stdout
 20414 00000F44 B445                    	mov	ah,45h ; XDUP
 20415 00000F46 CD21                    	int	21h		;dup to 2,stderr
 20416                                  goaux2: 
 20417 00000F48 BA[BC33]                	mov	dx,auxdev
 20418 00000F4B B002                    	mov	al,2		;read/write access
 20419 00000F4D E8FC23                  	call	open_dev
 20420                                  
 20421 00000F50 BA[C033]                	mov	dx,prndev
 20422 00000F53 B001                    	mov	al,1		;write only
 20423 00000F55 E8F423                  	call	open_dev
 20424                                  
 20425                                  ;global rearm command for shared interrupt devices attached in the system;
 20426                                  ;shared interrupt attachment has some problem when it issues interrupt
 20427                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 20428                                  ;no further interrupts on that level will be presented until a global rearm
 20429                                  ;is issued. by the request of the system architecture group, msbio will
 20430                                  ;issue a global rearm after every device driver is loaded.
 20431                                  ;to issue a global rearm:	;for pc1,xt,palace
 20432                                  ;
 20433                                  ;			  out 02f2h,xx  ; interrupt level 2
 20434                                  ;			  out 02f3h,xx  ; interrupt level 3
 20435                                  ;			  out 02f4h,xx  ; interrupt level 4
 20436                                  ;			  out 02f5h,xx  ; interrupt level 5
 20437                                  ;			  out 02f6h,xx  ; interrupt level 6
 20438                                  ;			  out 02f7h,xx  ; interrupt level 7
 20439                                  ;
 20440                                  ;	for pc at,in addition to the above commands,
 20441                                  ;	need to handle the secondary interrupt handler
 20442                                  ;
 20443                                  ;			  out 06f2h,xx  ; interrupt level 10
 20444                                  ;			  out 06f3h,xx  ; interrupt level 11
 20445                                  ;			  out 06f4h,xx  ; interrupt level 12
 20446                                  ;			  out 06f6h,xx  ; interrupt level 14
 20447                                  ;			  out 06f7h,xx  ; interrupt level 15
 20448                                  ;
 20449                                  ;	for round-up machine
 20450                                  ;
 20451                                  ;			  none.
 20452                                  
 20453                                  ; where xx stands for any value.
 20454                                  ;
 20455                                  ; for your information,after naples level machine,the system service bios
 20456                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 20457                                  
 20458                                  	; 24/10/2022
 20459                                  
 20460 00000F58 50                      	push	ax
 20461 00000F59 53                      	push	bx
 20462 00000F5A 52                      	push	dx
 20463 00000F5B 06                      	push	es
 20464                                  
 20465 00000F5C B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 20466 00000F5E BAF202                  	mov	dx,2F2h 		;get starting address
 20467 00000F61 EE                      	out	dx,al			; out 02f2h,0ffh
 20468 00000F62 42                      	inc	dx
 20469 00000F63 EE                      	out	dx,al			; out 02f3h,0ffh
 20470 00000F64 42                      	inc	dx
 20471 00000F65 EE                      	out	dx,al			; out 02f4h,0ffh
 20472 00000F66 42                      	inc	dx
 20473 00000F67 EE                      	out	dx,al			; out 02f5h,0ffh
 20474 00000F68 42                      	inc	dx
 20475 00000F69 EE                      	out	dx,al			; out 02f6h,0ffh
 20476 00000F6A 42                      	inc	dx
 20477 00000F6B EE                      	out	dx,al			; out 02f7h,0ffh
 20478                                  
 20479                                  ;sb secondary global rearm
 20480                                  
 20481 00000F6C B800F0                  	mov	ax,0F000h		;get machine type
 20482 00000F6F 8EC0                    	mov	es,ax
 20483 00000F71 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 20484 00000F77 740D                    	je	short startrearm	; *if at no need to check
 20485                                  
 20486 00000F79 B4C0                    	mov	ah,0C0h 		;get system configuration
 20487 00000F7B CD15                    	int	15h			; *
 20488 00000F7D 7216                    	jc	short finishrearm	; *jmp if old rom
 20489                                  
 20490                                  ; test feature byte for secondary interrupt controller
 20491                                  
 20492 00000F7F 26F6470540              	test	byte [es:bx+5],40h
 20493                                  	; 24/10/2022
 20494                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 20495 00000F84 740F                    	je	short finishrearm	;jmp if it is there
 20496                                  
 20497                                  startrearm:
 20498 00000F86 B0FF                    	mov	al,0FFh 		;write any pattern to port
 20499 00000F88 BAF206                  	mov	dx,6F2h 		;get starting address
 20500 00000F8B EE                      	out	dx,al			;out 06f2h,0ffh
 20501 00000F8C 42                      	inc	dx			;bump address
 20502 00000F8D EE                      	out	dx,al			;out 06f3h,0ffh
 20503 00000F8E 42                      	inc	dx			;bump address
 20504 00000F8F EE                      	out	dx,al			;out 06f4h,0ffh
 20505 00000F90 42                      	inc	dx			;bump address
 20506 00000F91 42                      	inc	dx			;bump address
 20507 00000F92 EE                      	out	dx,al			;out 06f6h,0ffh
 20508 00000F93 42                      	inc	dx			;bump address
 20509 00000F94 EE                      	out	dx,al			;out 06f7h,0ffh
 20510                                  
 20511                                  finishrearm:
 20512 00000F95 07                      	pop	es
 20513 00000F96 5A                      	pop	dx
 20514 00000F97 5B                      	pop	bx
 20515 00000F98 58                      	pop	ax
 20516                                  
 20517                                  ;    global rearm end *******************
 20518                                  
 20519                                  ; ----------------------------------------------------------------------
 20520                                  ; allocate sysinit_base for install= command
 20521                                  ; ----------------------------------------------------------------------
 20522                                  ; sysinit_base allocation.
 20523                                  ;   check if endfile has been called to handle install= command.
 20524                                  
 20525                                  set_sysinit_base:
 20526                                  
 20527                                  ; ----------------------------------------------------------------------
 20528                                  ;sysinit_base will be established in the secure area of
 20529                                  ;lower memory when it handles the first install= command.
 20530                                  ;sysinit_base is the place where the actual exec function will be called and
 20531                                  ;will check sysinit module in high memory if it is damaged by the application
 20532                                  ;program.  if sysinit module has been broken,then "memory error..." message
 20533                                  ;is displayed by sysinit_base.
 20534                                  ; ----------------------------------------------------------------------
 20535                                  
 20536                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 20537                                  	; (SYSINIT:1028h)
 20538                                  
 20539                                  	; 11/12/2022
 20540                                  	; ds = cs
 20541 00000F99 50                      	push	ax			; set devmark for mem command
 20542 00000F9A A1[E003]                	mov	ax,[memhi]
 20543 00000F9D 2B06[E403]              	sub	ax,[area]
 20544 00000FA1 A3[DC03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 20545                                  	;mov	al,devmark_inst ; 'T'
 20546 00000FA4 B054                    	mov	al,'T'
 20547 00000FA6 E86804                  	call	setdevmark
 20548 00000FA9 58                      	pop	ax
 20549                                  
 20550 00000FAA 8B3E[E003]              	mov	di,[memhi]
 20551 00000FAE 8EC7                    	mov	es,di
 20552 00000FB0 893E[5003]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 20553 00000FB4 31FF                    	xor	di,di
 20554 00000FB6 893E[4E03]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 20555 00000FBA BE[CC10]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 20556 00000FBD B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 20557                                  	; 24/10/2022 
 20558                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 20559 00000FC0 010E[DE03]              	add	[memlo],cx
 20560                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 20561                                  	; 11/12/2022
 20562                                  	; ds = cs
 20563                                  	;or	byte [cs:setdevmarkflag],2
 20564 00000FC4 800E[3414]02            	or	byte [setdevmarkflag],2
 20565                                  	;or	byte [setdevmarkflag],for_devmark
 20566 00000FC9 E8BC20                  	call	round			; check mem error. also,readjust memhi for the next use.
 20567 00000FCC F3A4                    	rep	movsb			; reallocate it.
 20568                                  
 20569 00000FCE C706[5203][A510]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 20570 00000FD4 8C0E[5403]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 20571                                  	;or	word [install_flag],has_installed ; set the flag.
 20572                                  	;or	byte [install_flag],has_installed ; 2
 20573                                  	; 11/12/2022
 20574 00000FD8 800E[4A03]02            	or	byte [install_flag],2
 20575                                  	; 24/10/2022
 20576                                  	;or	word [install_flag],2	
 20577                                  
 20578                                  ; ----------------------------------------------------------------------
 20579                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 20580                                  ; the top of the memory will be allocated for sysinit and config.sys if
 20581                                  ; have_install_cmd.
 20582                                  ; ----------------------------------------------------------------------
 20583                                  
 20584 00000FDD E8A820                  	call	round
 20585 00000FE0 8B1E[E003]              	mov	bx,[memhi]
 20586 00000FE4 A1[E403]                	mov	ax,[area]
 20587 00000FE7 A3[DA03]                	mov	[old_area],ax		; save [area]
 20588 00000FEA 8EC0                    	mov	es,ax			;calc what we needed
 20589 00000FEC 29C3                    	sub	bx,ax
 20590                                  	; 24/10/2022
 20591 00000FEE B44A                    	mov	ah,4Ah ; SETBLOCK
 20592 00000FF0 CD21                    	int	21h			;give the rest back
 20593                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20594                                  		; ES = segment address of block to change
 20595                                  		; BX = new size in paragraphs
 20596 00000FF2 06                      	push	es
 20597 00000FF3 8CC0                    	mov	ax,es
 20598 00000FF5 48                      	dec	ax
 20599 00000FF6 8EC0                    	mov	es,ax			;point to arena
 20600                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 20601                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 20602                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 20603                                  	; 24/10/2022
 20604 00000FF8 26C70601000800          	mov	word [es:1],8		;set impossible owner
 20605 00000FFF 26C70608005344          	mov	word [es:8],'SD'	; System Data
 20606 00001006 07                      	pop	es
 20607                                  
 20608 00001007 BBFFFF                  	mov	bx,0FFFFh
 20609 0000100A B448                    	mov	ah,48h ; ALLOC
 20610 0000100C CD21                    	int	21h
 20611 0000100E B448                    	mov	ah,48h ; ALLOC
 20612 00001010 CD21                    	int	21h			; allocate the rest of the memory
 20613                                  		; DOS - 2+ - ALLOCATE MEMORY
 20614                                  		; BX = number of 16-byte paragraphs desired
 20615 00001012 A3[E003]                	mov	[memhi],ax		; start of the allocated memory
 20616 00001015 C706[DE03]0000          	mov	word [memlo],0		;  to be used next.
 20617                                  
 20618                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 20619                                  ;;;; allocated.
 20620                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 20621                                  ;;;; this time) to the top-of-the memory),here we are going to
 20622                                  ;;;; 1). "setblock" from memhi to confbot.
 20623                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 20624                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 20625                                  
 20626                                  ;memory allocation for sysinit,confbot module.
 20627                                  
 20628 0000101B 8EC0                    	mov	es,ax
 20629                                  	;mov	bx,[CONFBOT]
 20630                                  	; 24/10/2022
 20631 0000101D 8B1E[A102]              	mov	bx,[top_of_cdss]
 20632 00001021 29C3                    	sub	bx,ax			; confbot - memhi
 20633 00001023 4B                      	dec	bx			; make a room for the memory block id.
 20634 00001024 4B                      	dec	bx			; make sure!!!.
 20635 00001025 B44A                    	mov	ah,4Ah ; SETBLOCK
 20636 00001027 CD21                    	int	21h			; this will free (confbot to top of memory)
 20637                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20638                                  		; ES = segment address of block to change
 20639                                  		; BX = new size in paragraphs
 20640 00001029 BBFFFF                  	mov	bx,0FFFFh
 20641 0000102C B448                    	mov	ah,48h ; ALLOC
 20642 0000102E CD21                    	int	21h
 20643 00001030 B448                    	mov	ah,48h ; ALLOC
 20644 00001032 CD21                    	int	21h			; allocate (confbot to top of memory)
 20645                                  		; DOS - 2+ - ALLOCATE MEMORY
 20646                                  		; BX = number of 16-byte paragraphs desired
 20647 00001034 A3[E403]                	mov	[area],ax		; save allocated memory segment.
 20648                                  					; need this to free this area for command.com.
 20649 00001037 8E06[E003]              	mov	es,[memhi]
 20650 0000103B B449                    	mov	ah,49h			; free allocated memory.
 20651 0000103D CD21                    	int	21h			; free (memhi to confbot(=area))
 20652                                  		; DOS - 2+ - FREE MEMORY
 20653                                  		; ES = segment address of area to be freed
 20654                                  endfile_ret:
 20655 0000103F C3                      	retn
 20656                                  
 20657                                  ; End of "EndFile" DOS structure configuration.
 20658                                  
 20659                                  ; ----------------------------------------------------------------------
 20660                                  ; 26/03/2019 - Retro DOS v4.0
 20661                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 20662                                  ; ----------------------------------------------------------------------
 20663                                  ; Do_Install_Exec
 20664                                  ;
 20665                                  ; This procedure is used to EXEC a program being loaded via the 
 20666                                  ; "install=" mechanism in config.sys. It does this by setting up
 20667                                  ; the parameters, and then jumping to sysinit_base, which has been
 20668                                  ; setup in low memory. When complete, sysinit_base will jump back
 20669                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 20670                                  ; program).
 20671                                  
 20672                                  ;SYSINIT:10CFh:
 20673                                  
 20674                                  do_install_exec:			; now,handles install= command.
 20675                                  
 20676 00001040 56                      	push	si			; save si for config.sys again.
 20677                                  
 20678                                  ; we are going to call load/exec function.
 20679                                  ; set es:bx to the parameter block here;;;;;;;
 20680                                  ; set ds:dx to the asciiz string. remember that we already has 0
 20681                                  ; after the filename. so parameter starts after that. if next
 20682                                  ; character is a line feed (i.e. 10),then assume that the 0
 20683                                  ; we already encountered used to be a carrage return. in this
 20684                                  ; case,let's set the length to 0 which will be followed by
 20685                                  ; carridge return.
 20686                                  
 20687                                  ; es:si -> command line in config.sys. points to the first non blank
 20688                                  ;character after =.
 20689                                  
 20690 00001041 06                      	push	es
 20691 00001042 1E                      	push	ds
 20692 00001043 07                      	pop	es
 20693 00001044 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 20694 00001045 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 20695                                  
 20696 00001047 31C9                    	xor	cx,cx
 20697 00001049 FC                      	cld
 20698 0000104A 2EC606[6D03]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 20699 00001050 BF[6E03]                	mov	di,ldexec_parm
 20700                                  installfilename:			; skip the file name
 20701 00001053 AC                      	lodsb				; al = ds:si; si++
 20702 00001054 3C00                    	cmp	al,0
 20703 00001056 7402                    	je	short got_installparm
 20704 00001058 EBF9                    	jmp	short installfilename
 20705                                  got_installparm:			; copy the parameters to ldexec_parm
 20706 0000105A AC                      	lodsb
 20707 0000105B 268805                  	mov	[es:di],al
 20708 0000105E 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 20709 00001060 7405                    	je	short done_installparm
 20710 00001062 FEC1                    	inc	cl			; # of char. in the parm.
 20711 00001064 47                      	inc	di
 20712 00001065 EBF3                    	jmp	short got_installparm
 20713                                  done_installparm:
 20714 00001067 2E880E[6C03]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 20715 0000106C 80F900                  	cmp	cl,0			; if no parm,then
 20716 0000106F 7506                    	jne	short install_seg_set 	; let the parm area
 20717 00001071 2EC606[6D03]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 20718                                  					; starts with cr.
 20719                                  install_seg_set:
 20720 00001077 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 20721 0000107E 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 20722                                  
 20723                                  ;---------------------------------------------------M067----------------
 20724                                  ;
 20725                                  ; 	the environment pointer is made 0. so the current environment ptr.
 20726                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 20727                                  ;
 20728                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 20729                                  ;
 20730                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 20731                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 20732                                  ; 	was fixed. 
 20733                                  ;
 20734                                  ; ----------------------------------------------------------------------
 20735                                  
 20736                                  ;;ifdef   MULTI_CONFIG
 20737                                  
 20738                                  ; If there's any environment data in "config_wrkseg", pass to app
 20739                                  
 20740                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20741                                          ;mov     cx,ax
 20742                                          ;cmp     word [cs:config_envlen],0
 20743                                          ;je      short no_envdata2
 20744                                          ;mov     cx,[cs:config_wrkseg]
 20745                                  ;no_envdata2:
 20746                                  ;;endif  ;MULTI_CONFIG
 20747                                  
 20748                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 20749                                  	; 24/10/2022
 20750                                  	;mov	[cs:iexec.environ],cx
 20751                                  	; 02/11/2022
 20752 00001080 2EA3[BE03]              	mov	[cs:iexec.environ],ax	
 20753                                  
 20754                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 20755 00001084 2EA3[C203]              	mov	[cs:iexec.ldexec_line+2],ax
 20756                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 20757 00001088 2EA3[C603]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 20758                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 20759 0000108C 2EA3[CA03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 20760 00001090 E86E00                  	call	sum_up
 20761 00001093 26A3[5603]              	mov	[es:checksum],ax	; save the value of the sum
 20762 00001097 31C0                    	xor	ax,ax
 20763 00001099 B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 20764 0000109B BB[BE03]                	mov	bx,instexe		; es:bx -> parm block.
 20765 0000109E 06                      	push	es			; save es,ds for load/exec
 20766 0000109F 1E                      	push	ds			; these registers will be restored in sysinit_base.
 20767 000010A0 2EFF2E[4E03]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 20768                                  					; load/exec function and check sum.
 20769                                  
 20770                                  ;----------------------------------------
 20771                                  
 20772                                  ;j.k. this is the returning address from sysinit_base.
 20773                                  
 20774                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20775                                  
 20776                                  sysinitptr:				; returning far address from sysinit_base
 20777 000010A5 5E                      	pop	si			; restore si for config.sys file.
 20778 000010A6 06                      	push	es
 20779 000010A7 1E                      	push	ds
 20780 000010A8 07                      	pop	es
 20781 000010A9 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 20782 000010AA 7306                            jnc     short install_exit_ret
 20783                                  
 20784 000010AC 56                      	push	si			; error in loading the file for install=.
 20785 000010AD E86F22                  	call	badload 		; es:si-> path,filename,0.
 20786 000010B0 5E                      	pop	si
 20787                                  
 20788                                  	; 24/10/2022
 20789                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 20790                                  	; 11/12/2022
 20791                                  	; ds = cs
 20792 000010B1 C3                      	retn
 20793                                  
 20794                                  install_exit_ret:
 20795                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 20796                                  
 20797                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 20798                                  ;SYSINIT:1142h:
 20799 000010B2 B44D                    	mov     ah,4Dh
 20800 000010B4 CD21                    	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 20801 000010B6 80FC03                  	cmp     ah,3
 20802 000010B9 7404                    	jz      short sysinitptr_retn
 20803 000010BB E85816                  	call    error_line
 20804 000010BE F9                      	stc
 20805                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 20806 000010BF C3                      	retn		
 20807                                  
 20808                                  ; ----------------------------------------------------------------------
 20809                                  
 20810                                  ;**	ParaRound - Round Up length to paragraph multiple
 20811                                  ;
 20812                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 20813                                  ;	by 16 yielding a "length in paragraphs" value.
 20814                                  ;
 20815                                  ;	ENTRY	(ax) = byte length
 20816                                  ;	EXIT	(ax) = rounded up length in paragraphs
 20817                                  ;	USES	ax, flags
 20818                                  
 20819                                  ParaRound:
 20820 000010C0 83C00F                  	add	ax,15
 20821 000010C3 D1D8                    	rcr	ax,1
 20822 000010C5 D1E8                    	shr	ax,1
 20823 000010C7 D1E8                    	shr	ax,1
 20824 000010C9 D1E8                    	shr	ax,1
 20825 000010CB C3                      	retn
 20826                                  
 20827                                  ; ----------------------------------------------------------------------
 20828                                  ; sysinit_base module.
 20829                                  ;
 20830                                  ; This module is relocated by the routine EndFile to a location in low
 20831                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 20832                                  ; that are being loaded by the "install=" command. After the EXEC call
 20833                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 20834                                  ; top of memory) to be sure that the EXECed program did not damage it.
 20835                                  ; If it did, then this module will print an error message and stop the
 20836                                  ; system. Otherwise, it returns control to SYSINIT.
 20837                                  ;
 20838                                  ;in: after relocation,
 20839                                  ;    ax = 4b00h - load and execute the program dos function.
 20840                                  ;    ds = confbot. segment of config.sys file image
 20841                                  ;    es = sysinitseg. segment of sysinit module itself.
 20842                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 20843                                  ;    es:bx = pointer to a parameter block for load.
 20844                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 20845                                  ;    bigsize (word) - # of word from confbot to SI_end.
 20846                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 20847                                  ;			word boundary moduler form.
 20848                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 20849                                  ;
 20850                                  ;note: sysinit should save necessary registers and when the control is back
 20851                                  
 20852                                  	; 24/10/2022
 20853                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 20854                                  sysinit_base:				
 20855 000010CC 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 20856 000010D1 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 20857 000010D6 CD21                    	int	21h			; load/exec dos call.
 20858 000010D8 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 20859 000010DD 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 20860 000010E2 1F                      	pop	ds			; restore confbot seg
 20861 000010E3 07                      	pop	es			; restore sysinitseg
 20862 000010E4 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 20863                                  					; at this time,i don't have to worry about
 20864                                  					; that sysinit module has been broken or not.
 20865 000010E6 E81800                  	call	sum_up			; otherwise,check if it is good.
 20866 000010E9 263906[5603]            	cmp	[es:checksum],ax
 20867 000010EE 740C                    	je	short sysinit_base_end
 20868                                  
 20869                                  ;	memory broken. show "memory allocation error" message and stall.
 20870                                  
 20871 000010F0 B409                    	mov	ah,9
 20872 000010F2 0E                      	push	cs
 20873 000010F3 1F                      	pop	ds
 20874 000010F4 BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 20875 000010F7 CD21                    	int	21h
 20876                                  		; DOS - PRINT STRING
 20877                                  		; DS:DX -> string terminated by "$"
 20878                                  	; 24/10/2022
 20879                                  _stall: 
 20880                                  	; 11/12/2022
 20881 000010F9 F4                      	hlt 
 20882                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20883                                  	;hlt				;use HLT to minimize energy consumption
 20884 000010FA EBFD                            jmp	short _stall
 20885                                  
 20886                                  sysinit_base_end: 
 20887 000010FC 26FF2E[5203]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 20888                                  
 20889                                  ;-------------------------------------
 20890                                  
 20891                                  sum_up:
 20892                                  
 20893                                  ;in:   es - sysinitseg.
 20894                                  ;out:  ax - result
 20895                                  ;
 20896                                  ;remark: since this routine will only check starting from "locstack" to the end of
 20897                                  ;	 sysinit segment,the data area, and the current stack area are not
 20898                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 20899                                  ;	 gaurantee to be safe.
 20900                                  ;
 20901                                  ;first sum up confbot seg.
 20902                                  
 20903 00001101 1E                      	push	ds
 20904                                  	;mov	ax,[es:CONFBOT]
 20905                                  	; 24/10/2022
 20906 00001102 26A1[A102]              	mov	ax,[es:top_of_cdss]
 20907 00001106 8ED8                    	mov	ds,ax
 20908 00001108 31F6                    	xor	si,si
 20909 0000110A 31C0                    	xor	ax,ax
 20910 0000110C 268B0E[4C03]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 20911                                  					;whole test better fail.
 20912 00001111 D1E9                    	shr	cx,1			; make it a word count
 20913 00001113 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 20914                                  sum1:
 20915 00001115 0304                    	add	ax,[si]
 20916 00001117 46                      	inc	si
 20917 00001118 46                      	inc	si
 20918 00001119 E2FA                    	loop	sum1
 20919                                  ;now,sum up sysinit module.
 20920                                  sum_sys_code:
 20921                                  	; 24/10/2022
 20922 0000111B BE1A11                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 20923                                  				        ; starting after the stack.  M069
 20924                                  					;  this does not cover the possible stack code!!!
 20925                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 20926                                  	; 02/11/2022
 20927                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 20928                                  	; 30/12/2022 (BugFix)
 20929                                  	; (SI_End is 39D0h for this -Retro DOS v4.0- IO.SYS)
 20930 0000111E B9[B038]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 20931 00001121 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 20932 00001123 D1E9                    	shr	cx,1
 20933                                  sum2:
 20934 00001125 260304                  	add	ax,[es:si]
 20935 00001128 46                      	inc	si
 20936 00001129 46                      	inc	si
 20937 0000112A E2F9                    	loop	sum2
 20938 0000112C 1F                      	pop	ds
 20939 0000112D C3                      	retn
 20940                                  
 20941                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20942                                  
 20943                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 20944                                  ;SYSINIT:11BDh:
 20945 0000112E 0000                    	dw	0
 20946                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 20947                                  ;SYSINIT:11BFh:
 20948 00001130 0000                    	dw	0
 20949                                  
 20950                                  mem_alloc_err_msgx:
 20951                                  
 20952                                         ;include msbio.cl4		; memory allocation error message
 20953                                  
 20954                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 20955 00001132 0D0A                    	db	0Dh,0Ah
 20956 00001134 4D656D6F727920616C-     	db 	'Memory allocation error $'
 20956 0000113D 6C6F636174696F6E20-
 20956 00001146 6572726F722024     
 20957                                  
 20958                                  end_sysinit_base: ; label byte
 20959                                  	; 24/10/2022
 20960                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 20961                                  
 20962                                  ; ----------------------------------------------------------------------
 20963                                  ; Set_Buffer
 20964                                  ;
 20965                                  ;function: set buffers in the real memory.				  
 20966                                  ;	   lastly set the memhi,memlo for the next available free address.
 20967                                  ;
 20968                                  ;input:    ds:bx -> buffinfo.
 20969                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 20970                                  ;	   singlebuffersize = buffer header size + sector size		  
 20971                                  ;
 20972                                  ;output:   buffers Queue established.	       				   
 20973                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 20974                                  ; ----------------------------------------------------------------------
 20975                                  
 20976                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20977                                  	; (SYSINIT:11DCh)
 20978                                  
 20979                                  set_buffer:
 20980 0000114D 30D2                    	xor	dl,dl				; assume buffers not in HMA
 20981 0000114F E85500                  	call	GetBufferAddr
 20982 00001152 7402                    	jz	short set_buff_1
 20983 00001154 B201                    	mov	dl,1				; buffers in HMA
 20984                                  set_buff_1:
 20985                                  	; 25/10/2022
 20986                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 20987 00001156 893F                    	mov	[bx],di
 20988                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 20989 00001158 8C4702                  	mov	[bx+2],es
 20990                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 20991 0000115B C747040000              	mov	word [bx+4],0
 20992                                  
 20993 00001160 89F8                    	mov	ax,di
 20994 00001162 2E8B0E[9702]            	mov	cx,[cs:buffers]
 20995 00001167 57                      	push	di				; remember first buffer
 20996                                  
 20997                                  ;	for each buffer
 20998                                  
 20999                                  nxt_buff:
 21000 00001168 E86300                  	call	set_buffer_info 		; set buf_link,buf_id...
 21001 0000116B 89C7                    	mov	di,ax
 21002 0000116D E2F9                    	loop	nxt_buff
 21003                                  
 21004 0000116F 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 21005                                  
 21006 00001174 59                      	pop	cx				; get first buffer
 21007                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 21008 00001175 26890D                  	mov	[es:di],cx
 21009 00001178 87CF                    	xchg	cx,di
 21010                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 21011                                  	; 25/10/2022
 21012 0000117A 26894D02                	mov	[es:di+2],cx
 21013                                  
 21014 0000117E 08D2                    	or	dl,dl				; In HMa ?
 21015 00001180 7417                    	jz	short set_buff_2		; no
 21016                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 21017 00001182 C6470C01                	mov	byte [bx+12],1
 21018 00001186 2EA1[E003]              	mov	ax,[cs:memhi]			; seg of scratch buff
 21019                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 21020 0000118A C7470D0000              	mov	word [bx+13],0
 21021                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 21022 0000118F 89470F                  	mov	word [bx+15],ax
 21023 00001192 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 21024                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 21025 00001196 83E814                  	sub	ax,20
 21026                                  set_buff_2:
 21027 00001199 2E0106[DE03]            	add	[cs:memlo],ax
 21028                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21029 0000119E 2E800E[3414]02          	or	byte [cs:setdevmarkflag],2
 21030                                  	;call	round
 21031                                  	;retn
 21032                                  	; 12/12/2022
 21033 000011A4 E9E11E                  	jmp	round
 21034                                  
 21035                                  ; ----------------------------------------------------------------------
 21036                                  ; procedure : GetBufferAddr
 21037                                  ;
 21038                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 21039                                  ;
 21040                                  ; returns in es:di the buffer adress
 21041                                  ; returns NZ if allocated in HMA
 21042                                  ; ----------------------------------------------------------------------
 21043                                  
 21044                                  	; 25/10/2022 
 21045                                  GetBufferAddr:
 21046 000011A7 53                      	push	bx
 21047 000011A8 52                      	push	dx
 21048 000011A9 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 21049 000011AD 2EF726[9702]            	mul	word [cs:buffers]
 21050                                  	;add	ax,0Fh
 21051 000011B2 83C00F                  	add	ax,15 
 21052                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21053                                  	;and	ax,~15	; 0FFF0h	; para round
 21054                                  	; 12/12/2022
 21055 000011B5 24F0                    	and	al,~15	; 0F0h
 21056 000011B7 89C3                    	mov	bx,ax
 21057 000011B9 B8024A                  	mov	ax,4A02h
 21058                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 21059 000011BC CD2F                    	int	2Fh
 21060 000011BE 83FFFF                  	cmp	di,0FFFFh
 21061 000011C1 7508                    	jne	short got_hma
 21062 000011C3 BF0000                  	mov	di,0			; dont xor di,di Z flag needed
 21063                                  	;zf=1
 21064                                  	;xor	di,di	; 25/10/2022
 21065                                  	;zf=1
 21066 000011C6 2E8E06[E003]            	mov	es,[cs:memhi]
 21067                                  got_hma:
 21068 000011CB 5A                      	pop	dx
 21069 000011CC 5B                      	pop	bx
 21070 000011CD C3                      	retn
 21071                                  
 21072                                  ; ----------------------------------------------------------------------
 21073                                  
 21074                                  set_buffer_info:
 21075                                  
 21076                                  ;function: set buf_link,buf_id,buf_sector
 21077                                  ;
 21078                                  ;in: es:di -> buffer header to be set.
 21079                                  ;    ax = di
 21080                                  ;
 21081                                  ;out:
 21082                                  ;    above entries set.
 21083                                  
 21084                                  	; 25/10/2022 
 21085 000011CE 2EFF36[3903]            	push	word [cs:buf_prev_off]
 21086                                  	;pop	word [es:di+buffinfo.buf_prev]
 21087 000011D3 268F4502                	pop	word [es:di+2]
 21088 000011D7 2EA3[3903]              	mov	[cs:buf_prev_off],ax
 21089 000011DB 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 21090                                  	;mov	[es:di+buffinfo.buf_next],ax
 21091 000011E0 268905                  	mov	[es:di],ax
 21092                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 21093 000011E3 26C74504FF00            	mov	word [es:di+4],00FFh
 21094                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 21095 000011E9 26C745060000            	mov	word [es:di+6],0
 21096                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 21097 000011EF 26C745080000            	mov	word [es:di+8],0
 21098 000011F5 C3                      	retn
 21099                                  
 21100                                  ; ======================================================================
 21101                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 21102                                  ; ----------------------------------------------------------------------
 21103                                  ; 27/03/2019 - Retro DOS v4.0
 21104                                  
 21105                                  ; ----------------------------------------------------------------------
 21106                                  ; ibmstack initialization routine.
 21107                                  ;
 21108                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 21109                                  ;	has been modified. this initialization routine also has to
 21110                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 21111                                  ;	should be set to signal that this interrupt handler is the
 21112                                  ;	first handler hooked to this interrupt vector.
 21113                                  ;	we determine this by looking at the instruction pointed by
 21114                                  ;	this vector. if it is iret, then this handler should be the
 21115                                  ;	first one. in our case, only the interrupt vector 77h is the
 21116                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 21117                                  ;
 21118                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 21119                                  ;	some design changes are needed to the above interrupt sharing
 21120                                  ;	method. the above sharing scheme assumes that 1). interrupt
 21121                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 21122                                  ;	interrupts would only be generated on levels 7 and 15.
 21123                                  ;	these assumptions are not true any more. we have to use the firstflag
 21124                                  ;	for every level of interrupt. we will set the firstflag on the following
 21125                                  ;	conditions:
 21126                                  ;
 21127                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 21128                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 21129                                  ;	 c. else if cs:ip points to an iret, then "first"
 21130                                  ;	 d. else if cs:ip points to dummy, then "first"
 21131                                  ;
 21132                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 21133                                  ;	be equal to the value at f000:ff01. this location is the initial value
 21134                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 21135                                  ;	the bioses for all of the machines.
 21136                                  ;
 21137                                  ;	system design group requests bios to handle the phantom interrupts.
 21138                                  ;
 21139                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 21140                                  ;	produced by the bogus adapter card even without interrupt request is
 21141                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 21142                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 21143                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 21144                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 21145                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 21146                                  ;	interrupt line.
 21147                                  ;
 21148                                  ;	to handle those "phantom" interrupts, the main stack code will check
 21149                                  ;	the own firstflag, and if it is not "first" (which means the forward
 21150                                  ;	pointer points to the legal shared interrupt handler), then pass the
 21151                                  ;	control. if it is the first, then the following action should be
 21152                                  ;	taken. we don't have to implement skack logic in this case.
 21153                                  ;
 21154                                  ;	to implement this logic, we rather choose a simple method.
 21155                                  ;	if ont of the above "firstflag" conditions is met, we are not
 21156                                  ;	going to hook this interrupt vector. the reason is if the original
 21157                                  ;	vector points to "iret" and do nothing, we don't need
 21158                                  ;	to implement the stack logic for it. this will simplify implementation
 21159                                  ;	while maintaining compatibility with the old version of dos.
 21160                                  ;	this implies that in the main stack code, there might be a stack code
 21161                                  ;	that will never be used, a dead code.
 21162                                  ;
 21163                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 21164                                  
 21165                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21166                                  	; (SYSINIT:1287h)
 21167                                  
 21168                                  	; 14/12/2022
 21169                                  stackinit:
 21170 000011F6 50                      	push	ax
 21171 000011F7 1E                      	push	ds
 21172 000011F8 06                      	push	es
 21173 000011F9 53                      	push	bx
 21174 000011FA 51                      	push	cx
 21175 000011FB 52                      	push	dx
 21176 000011FC 57                      	push	di
 21177 000011FD 56                      	push	si
 21178 000011FE 55                      	push	bp
 21179                                  
 21180                                  ;currently es -> stack code area
 21181                                  
 21182                                  	; 12/12/2022
 21183                                  	; ds = cs
 21184 000011FF A1[8A02]                	mov	ax,[stack_count]
 21185 00001202 89C1                    	mov	cx,ax  ; *!*!*  
 21186                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21187                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 21188                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 21189 00001204 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 21190                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 21191 00001208 A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 21192 0000120B 26A3[0600]              	mov	[es:stacksize],ax
 21193                                  	; 12/12/2022
 21194 0000120F A1[8E02]                	mov	ax,[stack_addr]			; offset
 21195                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21196                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21197                                  	;mov	ax,[cs:stack_addr]  ; !!
 21198 00001212 26A3[0800]              	mov	[es:stacks],ax
 21199                                  	; 12/12/2022
 21200 00001216 89C5                    	mov	bp,ax ; *!*
 21201 00001218 A1[9002]                	mov	ax,[stack_addr+2]
 21202                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21203                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21204                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 21205 0000121B 26A3[0A00]              	mov	[es:stacks+2],ax
 21206                                  
 21207                                  ; initialize the data fields with the parameters
 21208                                  
 21209                                  ; "firstentry" will always be at stacks
 21210                                  
 21211                                  	;mov	bp,[es:stacks]			; get offset of stack
 21212                                  	; 12/12/2022
 21213                                  	; bp = [es:stacks] ; *!*
 21214 0000121F 26892E[0C00]            	mov	[es:firstentry],bp
 21215                                  
 21216                                  ; the stacks will always immediately follow the table entries
 21217                                  
 21218 00001224 B80800                  	mov	ax,entrysize ; 8
 21219                                  	;mov	cx,[es:stackcount]
 21220                                  	; 12/12/2022
 21221                                  	; cx = [es:stackcount] ; *!*!*
 21222 00001227 F7E1                    	mul	cx
 21223 00001229 01E8                    	add	ax,bp
 21224 0000122B 26A3[0400]              	mov	[es:stackat],ax
 21225 0000122F 89C3                    	mov	bx,ax
 21226 00001231 83EB02                  	sub	bx,2
 21227                                  
 21228                                  ; zero the entire stack area to start with
 21229                                  
 21230 00001234 268B3E[0400]            	mov	di,[es:stackat]
 21231 00001239 26A1[0600]              	mov	ax,[es:stacksize]
 21232 0000123D F7E1                    	mul	cx
 21233 0000123F 89C1                    	mov	cx,ax
 21234 00001241 31C0                    	xor	ax,ax
 21235 00001243 06                      	push	es
 21236 00001244 1F                      	pop	ds				;ds = relocated stack code seg.
 21237                                  
 21238                                  ;now, ds -> stack code area
 21239                                  
 21240 00001245 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 21241 00001249 FC                      	cld
 21242 0000124A F3AA                    	rep	stosb
 21243                                  
 21244 0000124C 8B0E[0200]              	mov	cx,[stackcount]
 21245                                  
 21246                                  ; loop for "count" times, building a table entry
 21247                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 21248                                  ;  cx = number of entries
 21249                                  ;  es:bp => base of stacks - 2
 21250                                  ;  es:bx => first table entry
 21251                                  
 21252                                  buildloop:
 21253                                  	; 11/12/2022
 21254                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 21255                                  	; 25/10/2022
 21256                                  	;mov	byte [es:bp],free
 21257                                  	; 14/08/2023
 21258 00001250 26884600                	mov	[es:bp],al ; 0 ; free
 21259 00001254 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 21260                                  	;mov	[es:bp+1],al
 21261 00001258 26894602                	mov	[es:bp+savedsp],ax
 21262                                  	;mov	[es:bp2],ax
 21263 0000125C 26894604                	mov	[es:bp+savedss],ax
 21264                                  	;mov	[es:bp+4],ax
 21265 00001260 031E[0600]              	add	bx,[stacksize]
 21266 00001264 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 21267                                  	;mov	[es:bp+6],bx
 21268 00001268 26892F                  	mov	[es:bx],bp
 21269 0000126B 83C508                  	add	bp,entrysize ; 8
 21270                                  
 21271 0000126E E2E0                    	loop	buildloop
 21272                                  
 21273 00001270 83ED08                  	sub	bp,entrysize ; 8
 21274 00001273 892E[0E00]              	mov	[lastentry],bp
 21275 00001277 892E[1000]              	mov	[nextentry],bp
 21276                                  
 21277 0000127B 1E                      	push	ds
 21278 0000127C B800F0                  	mov	ax,0F000h		;look at the model byte
 21279 0000127F 8ED8                    	mov	ds,ax
 21280 00001281 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
 21281 00001286 1F                      	pop	ds
 21282 00001287 7504                    	jne	short skip_disablenmis
 21283                                  
 21284 00001289 B007                    	mov	al,07h			; disable convertible nmis
 21285 0000128B E672                    	out	72h,al
 21286                                  
 21287                                  skip_disablenmis:
 21288 0000128D 31C0                    	xor	ax,ax
 21289 0000128F 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 21290                                  					;ds - relocated stack code segment
 21291 00001291 FA                      	cli
 21292                                  
 21293                                  	;irp	aa,<02,08,09,70>
 21294                                  	;
 21295                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21296                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 21297                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 21298                                  	;mov	dx,offset int&aa	;pass where new handler is
 21299                                  	;call	new_init_loop		;adjust the vector to new handler,
 21300                                  	;				;saving pointer to original owner
 21301                                  	;endm
 21302                                  
 21303                                  stkinit_02:
 21304 00001292 BE0800                  	mov	si,02h*4 ; 8
 21305 00001295 BF[4206]                	mov	di,INT19OLD02
 21306 00001298 BB[1200]                	mov	bx,old02
 21307 0000129B BA[1600]                	mov	dx,int02
 21308 0000129E E84901                  	call	new_init_loop
 21309                                  stkinit_08:
 21310 000012A1 BE2000                  	mov	si,08h*4 ; 32
 21311 000012A4 BF[4706]                	mov	di,INT19OLD08
 21312 000012A7 BB[3800]                	mov	bx,old08
 21313 000012AA BA[3C00]                	mov	dx,int08
 21314 000012AD E83A01                  	call	new_init_loop
 21315                                  stkinit_09:
 21316 000012B0 BE2400                  	mov	si,09h*4 ; 36
 21317 000012B3 BF[4C06]                	mov	di,INT19OLD09
 21318 000012B6 BB[4100]                	mov	bx,old09
 21319 000012B9 BA[4500]                	mov	dx,int09
 21320 000012BC E82B01                  	call	new_init_loop
 21321                                  stkinit_70:
 21322 000012BF BEC001                  	mov	si,70h*4 ; 448
 21323 000012C2 BF[6A06]                	mov	di,INT19OLD70
 21324 000012C5 BB[4E00]                	mov	bx,old70
 21325 000012C8 BA[5200]                	mov	dx,int70
 21326 000012CB E81C01                  	call	new_init_loop
 21327                                  
 21328                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 21329                                  	;
 21330                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21331                                  	;push	ds			;save relocated stack code segment
 21332                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 21333                                  	;push	ds
 21334                                  	;pop	dx			;dx = segment value
 21335                                  	;	
 21336                                  	;cmp	dx,0
 21337                                  	;jz	int&aa&_first
 21338                                  	;
 21339                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 21340                                  	;jz	int&aa&_first
 21341                                  	;
 21342                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 21343                                  	;jz	int&aa&_not_first
 21344                                  	;
 21345                                  	;cmp	dx,0f000h		;rom bios segment
 21346                                  	;jnz	int&aa&_not_first
 21347                                  	;
 21348                                  	;push	es
 21349                                  	;push	dx
 21350                                  	;mov	dx,0f000h
 21351                                  	;mov	es,dx
 21352                                  	;cmp	bx,word ptr es:0ff01h
 21353                                         	;pop	dx
 21354                                  	;pop	es
 21355                                  	;jz	int&aa&_first
 21356                                  	;
 21357                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 21358                                  	;pop	ds
 21359                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 21360                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 21361                                  	;mov	dx, offset int&aa	;pass where new handler is
 21362                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 21363                                  	;				;pointer to original owner.
 21364                                  	;jmp	short int&aa&_end
 21365                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 21366                                  	;pop	ds
 21367                                  ;int&aa&_end:
 21368                                  	;
 21369                                  	;endm
 21370                                  
 21371                                  stkinit_0A:
 21372 000012CE BE2800                  	mov	si,0Ah*4 ; 40
 21373                                  	
 21374                                  ; 14/12/2022
 21375                                  %if 0	
 21376                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21377                                  	push	ds
 21378                                  	
 21379                                  	lds	bx,[es:si]
 21380                                  	push	ds
 21381                                  	pop	dx
 21382                                  		
 21383                                  	cmp	dx,0
 21384                                  	je	short int_0A_first
 21385                                  	
 21386                                  	cmp	byte [bx],0CFh
 21387                                  	je	short int_0A_first
 21388                                  	
 21389                                  	cmp	word [bx+6],424Bh
 21390                                  	je	short int_0A_not_first
 21391                                  	
 21392                                  	cmp	dx,0F000h
 21393                                  	jne	short int_0A_not_first
 21394                                  	
 21395                                  	push	es
 21396                                  	push	dx
 21397                                  	mov	dx,0F000h
 21398                                  	mov	es,dx
 21399                                  	cmp	bx,[es:0FF01h]
 21400                                         	pop	dx
 21401                                  	pop	es
 21402                                  	je	short int_0A_first
 21403                                  %Endif
 21404                                  
 21405                                  	; 14/12/2022
 21406                                  	; 25/10/2022
 21407 000012D1 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21408 000012D4 730C                    	jnc	short int_0A_first
 21409                                  	
 21410                                  int_0A_not_first:
 21411                                  	; 14/12/2022
 21412                                  	; 25/10/2022
 21413                                  	;pop	ds
 21414 000012D6 BF[5106]                	mov	di,INT19OLD0A
 21415 000012D9 BB[5900]                	mov	bx,old0A
 21416 000012DC BA[5700]                	mov	dx,int0A
 21417 000012DF E80801                  	call	new_init_loop
 21418                                  	
 21419                                  	; 14/12/2022	
 21420                                  	;jmp	short int_0A_end
 21421                                  ;int_0A_first:
 21422                                  	; 25/10/2022
 21423                                  	;pop	ds
 21424                                  
 21425                                  	; 14/12/2022
 21426                                  int_0A_first:
 21427                                  int_0A_end:
 21428                                  
 21429                                  stkinit_0B:
 21430 000012E2 BE2C00                  	mov	si,0Bh*4 ; 44
 21431                                  	
 21432                                  	; 14/12/2022
 21433                                  	; 25/10/2022
 21434 000012E5 E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21435 000012E8 730C                    	jnc	short int_0B_end ; int_0B_first
 21436                                  
 21437                                  ; 14/12/2022
 21438                                  %if 0	
 21439                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21440                                  	push	ds
 21441                                  	lds	bx,[es:si]
 21442                                  	push	ds
 21443                                  	pop	dx
 21444                                  		
 21445                                  	cmp	dx,0
 21446                                  	je	short int_0B_first
 21447                                  
 21448                                  	cmp	byte [bx],0CFh
 21449                                  	je	short int_0B_first
 21450                                  	
 21451                                  	cmp	word [bx+6],424Bh
 21452                                  	je	short int_0B_not_first
 21453                                  	
 21454                                  	cmp	dx,0F000h
 21455                                  	jne	short int_0B_not_first
 21456                                  
 21457                                  	push	es
 21458                                  	push	dx
 21459                                  	mov	dx,0F000h
 21460                                  	mov	es,dx
 21461                                  	cmp	bx,[es:0FF01h]
 21462                                  	pop	dx
 21463                                  	pop	es
 21464                                  	je	short int_0B_first
 21465                                  %endif
 21466                                  
 21467                                  int_0B_not_first:
 21468                                  	; 14/12/2022
 21469                                  	; 25/10/2022
 21470                                  	;pop	ds
 21471 000012EA BF[5606]                	mov	di,INT19OLD0B
 21472 000012ED BB[7100]                	mov	bx,old0B
 21473 000012F0 BA[6F00]                	mov	dx,int0B
 21474 000012F3 E8F400                  	call	new_init_loop
 21475                                  
 21476                                  	; 14/12/2022
 21477                                  	;jmp	short int_0B_end
 21478                                  ;int_0B_first:
 21479                                  	; 25/10/2022
 21480                                  	;pop	ds
 21481                                  
 21482                                  int_0B_end:
 21483                                  	
 21484                                  stkinit_0C:
 21485 000012F6 BE3000                  	mov	si,0Ch*4 ; 48
 21486                                  	
 21487                                  	; 14/12/2022
 21488                                  	; 25/10/2022
 21489 000012F9 E8C300                  	call	int_xx_first_check
 21490 000012FC 730C                    	jnc	short int_0C_end ; int_0C_first
 21491                                  
 21492                                  ; 14/12/2022
 21493                                  %if 0	
 21494                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21495                                  	push	ds
 21496                                  	lds	bx,[es:si]
 21497                                  	push	ds
 21498                                  	pop	dx
 21499                                  		
 21500                                  	cmp	dx,0
 21501                                  	je	short int_0C_first
 21502                                  
 21503                                  	cmp	byte [bx],0CFh
 21504                                  	je	short int_0C_first
 21505                                  	
 21506                                  	cmp	word [bx+6],424Bh
 21507                                  	je	short int_0C_not_first
 21508                                  	
 21509                                  	cmp	dx,0F000h
 21510                                  	jne	short int_0C_not_first
 21511                                  
 21512                                  	push	es
 21513                                  	push	dx
 21514                                  	mov	dx,0F000h
 21515                                  	mov	es,dx
 21516                                  	cmp	bx,[es:0FF01h]
 21517                                  	pop	dx
 21518                                  	pop	es
 21519                                  	je	short int_0C_first
 21520                                  %endif
 21521                                  	
 21522                                  int_0C_not_first:
 21523                                  	; 14/12/2022
 21524                                  	; 25/10/2022
 21525                                  	;pop	ds
 21526 000012FE BF[5B06]                	mov	di,INT19OLD0C
 21527 00001301 BB[8900]                	mov	bx,old0C
 21528 00001304 BA[8700]                	mov	dx,int0C
 21529 00001307 E8E000                  	call	new_init_loop
 21530                                  
 21531                                  	; 14/12/2022
 21532                                  	;jmp	short int_0C_end
 21533                                  ;int_0C_first:
 21534                                  	; 25/10/2022
 21535                                  	;pop	ds
 21536                                  
 21537                                  int_0C_end:
 21538                                  
 21539                                  stkinit_0D:
 21540 0000130A BE3400                  	mov	si,0Dh*4 ; 52
 21541                                  
 21542                                  	; 14/12/2022	
 21543                                  	; 25/10/2022
 21544 0000130D E8AF00                  	call	int_xx_first_check
 21545 00001310 730C                    	jnc	short int_0D_end ; int_0D_first
 21546                                  
 21547                                  ; 14/12/2022
 21548                                  %if 0	
 21549                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21550                                  	push	ds
 21551                                  	lds	bx,[es:si]
 21552                                  	push	ds
 21553                                  	pop	dx
 21554                                  		
 21555                                  	cmp	dx,0
 21556                                  	je	short int_0D_first
 21557                                  
 21558                                  	cmp	byte [bx],0CFh
 21559                                  	je	short int_0D_first
 21560                                  	
 21561                                  	cmp	word [bx+6],424Bh
 21562                                  	je	short int_0D_not_first
 21563                                  	
 21564                                  	cmp	dx,0F000h
 21565                                  	jne	short int_0D_not_first
 21566                                  
 21567                                  	push	es
 21568                                  	push	dx
 21569                                  	mov	dx,0F000h
 21570                                  	mov	es,dx
 21571                                  	cmp	bx,[es:0FF01h]
 21572                                  	pop	dx
 21573                                  	pop	es
 21574                                  	je	short int_0D_first
 21575                                  %endif
 21576                                  	
 21577                                  int_0D_not_first:
 21578                                  	; 14/12/2022
 21579                                  	; 25/10/2022
 21580                                  	;pop	ds
 21581 00001312 BF[6006]                	mov	di,INT19OLD0D
 21582 00001315 BB[A100]                	mov	bx,old0D
 21583 00001318 BA[9F00]                	mov	dx,int0D
 21584 0000131B E8CC00                  	call	new_init_loop
 21585                                  
 21586                                  	; 14/12/2022
 21587                                  	;jmp	short int_0D_end
 21588                                  	; 02/11/2022
 21589                                  ;int_0D_first:
 21590                                  	;pop	ds
 21591                                  
 21592                                  int_0D_end:
 21593                                  
 21594                                  stkinit_0E:
 21595 0000131E BE3800                  	mov	si,0Eh*4 ; 56
 21596                                  
 21597                                  	; 14/12/2022	
 21598                                  	; 25/10/2022
 21599 00001321 E89B00                  	call	int_xx_first_check
 21600 00001324 730C                    	jnc	short int_0E_end ; int_0E_first
 21601                                  
 21602                                  ; 14/12/2022
 21603                                  %if 0	
 21604                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21605                                  	push	ds
 21606                                  	lds	bx,[es:si]
 21607                                  	push	ds
 21608                                  	pop	dx
 21609                                  		
 21610                                  	cmp	dx,0
 21611                                  	je	short int_0E_first
 21612                                  
 21613                                  	cmp	byte [bx],0CFh
 21614                                  	je	short int_0E_first
 21615                                  	
 21616                                  	cmp	word [bx+6],424Bh
 21617                                  	je	short int_0E_not_first
 21618                                  	
 21619                                  	cmp	dx,0F000h
 21620                                  	jne	short int_0E_not_first
 21621                                  
 21622                                  	push	es
 21623                                  	push	dx
 21624                                  	mov	dx,0F000h
 21625                                  	mov	es,dx
 21626                                  	cmp	bx,[es:0FF01h]
 21627                                  	pop	dx
 21628                                  	pop	es
 21629                                  	je	short int_0E_first
 21630                                  %endif
 21631                                  	
 21632                                  int_0E_not_first:
 21633                                  	; 14/12/2022
 21634                                  	; 25/10/2022
 21635                                  	;pop	ds
 21636 00001326 BF[6506]                	mov	di,INT19OLD0E
 21637 00001329 BB[B900]                	mov	bx,old0E
 21638 0000132C BA[B700]                	mov	dx,int0E
 21639 0000132F E8B800                  	call	new_init_loop
 21640                                  
 21641                                  	; 14/12/2022
 21642                                  	;jmp	short int_0E_end
 21643                                  ;int_0E_first:
 21644                                  	; 25/10/2022
 21645                                  	;pop	ds	
 21646                                  
 21647                                  int_0E_end:
 21648                                  
 21649                                  stkinit_72:
 21650 00001332 BEC801                  	mov	si,72h*4 ; 456
 21651                                  	
 21652                                  	; 14/12/2022
 21653                                  	; 25/10/2022
 21654 00001335 E88700                  	call	int_xx_first_check
 21655 00001338 730C                    	jnc	short int_72_end ; int_72_first
 21656                                  
 21657                                  ; 14/12/2022
 21658                                  %if 0	
 21659                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21660                                  	push	ds
 21661                                  	lds	bx,[es:si]
 21662                                  	push	ds
 21663                                  	pop	dx
 21664                                  		
 21665                                  	cmp	dx,0
 21666                                  	je	short int_72_first
 21667                                  
 21668                                  	cmp	byte [bx],0CFh
 21669                                  	je	short int_72_first
 21670                                  	
 21671                                  	cmp	word [bx+6],424Bh
 21672                                  	je	short int_72_not_first
 21673                                  	
 21674                                  	cmp	dx,0F000h
 21675                                  	jne	short int_72_not_first
 21676                                  
 21677                                  	push	es
 21678                                  	push	dx
 21679                                  	mov	dx,0F000h
 21680                                  	mov	es,dx
 21681                                  	cmp	bx,[es:0FF01h]
 21682                                  	pop	dx
 21683                                  	pop	es
 21684                                  	je	short int_72_first
 21685                                  %endif
 21686                                  	
 21687                                  int_72_not_first:
 21688                                  	; 14/12/2022
 21689                                  	; 25/10/2022
 21690                                  	;pop	ds
 21691 0000133A BF[6F06]                	mov	di,INT19OLD72
 21692 0000133D BB[D100]                	mov	bx,old72
 21693 00001340 BA[CF00]                	mov	dx,int72
 21694 00001343 E8A400                  	call	new_init_loop
 21695                                  
 21696                                  	; 14/12/2022
 21697                                  	;jmp	short int_72_end
 21698                                  ;int_72_first:
 21699                                  	; 25/10/2022
 21700                                  	;pop	ds
 21701                                  
 21702                                  int_72_end:
 21703                                  
 21704                                  stkinit_73:
 21705 00001346 BECC01                  	mov	si,73h*4 ; 460
 21706                                  	
 21707                                  	; 14/12/2022
 21708                                  	; 25/10/2022
 21709 00001349 E87300                  	call	int_xx_first_check
 21710 0000134C 730C                    	jnc	short int_73_end ; int_73_first
 21711                                  
 21712                                  ; 14/12/2022
 21713                                  %if 0	
 21714                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21715                                  	push	ds
 21716                                  	lds	bx,[es:si]
 21717                                  	push	ds
 21718                                  	pop	dx
 21719                                  		
 21720                                  	cmp	dx,0
 21721                                  	je	short int_73_first
 21722                                  
 21723                                  	cmp	byte [bx],0CFh
 21724                                  	je	short int_73_first
 21725                                  	
 21726                                  	cmp	word [bx+6],424Bh
 21727                                  	je	short int_73_not_first
 21728                                  	
 21729                                  	cmp	dx,0F000h
 21730                                  	jne	short int_73_not_first
 21731                                  
 21732                                  	push	es
 21733                                  	push	dx
 21734                                  	mov	dx,0F000h
 21735                                  	mov	es,dx
 21736                                  	cmp	bx,[es:0FF01h]
 21737                                  	pop	dx
 21738                                  	pop	es
 21739                                  	je	short int_73_first
 21740                                  %endif	
 21741                                  	
 21742                                  int_73_not_first:
 21743                                  	; 14/12/2022
 21744                                  	; 25/10/2022
 21745                                  	;pop	ds
 21746 0000134E BF[7406]                	mov	di,INT19OLD73
 21747 00001351 BB[E900]                	mov	bx,old73
 21748 00001354 BA[E700]                	mov	dx,int73
 21749 00001357 E89000                  	call	new_init_loop
 21750                                  
 21751                                  	; 14/12/2022
 21752                                  	;jmp	short int_73_end
 21753                                  ;int_73_first:
 21754                                  	; 25/10/2022
 21755                                  	;pop	ds
 21756                                  
 21757                                  int_73_end:
 21758                                  
 21759                                  stkinit_74:
 21760 0000135A BED001                  	mov	si,74h*4 ; 464
 21761                                  	
 21762                                  	; 14/12/2022
 21763                                  	; 25/10/2022
 21764 0000135D E85F00                  	call	int_xx_first_check
 21765 00001360 730C                    	jnc	short int_74_end ; int_74_first
 21766                                  
 21767                                  ; 14/12/2022
 21768                                  %if 0		
 21769                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21770                                  	push	ds
 21771                                  	lds	bx,[es:si]
 21772                                  	push	ds
 21773                                  	pop	dx
 21774                                  		
 21775                                  	cmp	dx,0
 21776                                  	je	short int_74_first
 21777                                  
 21778                                  	cmp	byte [bx],0CFh
 21779                                  	je	short int_74_first
 21780                                  	
 21781                                  	cmp	word [bx+6],424Bh
 21782                                  	je	short int_74_not_first
 21783                                  	
 21784                                  	cmp	dx,0F000h
 21785                                  	jne	short int_74_not_first
 21786                                  
 21787                                  	push	es
 21788                                  	push	dx
 21789                                  	mov	dx,0F000h
 21790                                  	mov	es,dx
 21791                                  	cmp	bx,[es:0FF01h]
 21792                                  	pop	dx
 21793                                  	pop	es
 21794                                  	je	short int_74_first
 21795                                  %endif
 21796                                  
 21797                                  int_74_not_first:
 21798                                  	; 14/12/2022
 21799                                  	; 25/10/2022
 21800                                  	;pop	ds
 21801 00001362 BF[7906]                	mov	di,INT19OLD74
 21802 00001365 BB[0101]                	mov	bx,old74
 21803 00001368 BA[FF00]                	mov	dx,int74
 21804 0000136B E87C00                  	call	new_init_loop
 21805                                  	
 21806                                  	; 14/12/2022
 21807                                  	;jmp	short int_74_end
 21808                                  ;int_74_first:
 21809                                  	; 25/10/2022
 21810                                  	;pop	ds
 21811                                  
 21812                                  int_74_end:
 21813                                  
 21814                                  stkinit_76:
 21815 0000136E BED801                  	mov	si,76h*4 ; 472
 21816                                  	
 21817                                  	; 14/12/2022
 21818                                  	; 25/10/2022
 21819 00001371 E84B00                  	call	int_xx_first_check
 21820 00001374 730E                    	jnc	short int_76_end ; int_76_first
 21821                                  
 21822                                  ; 14/12/2022
 21823                                  %if 0	
 21824                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21825                                  	push	ds
 21826                                  	lds	bx,[es:si]
 21827                                  	push	ds
 21828                                  	pop	dx
 21829                                  		
 21830                                  	cmp	dx,0
 21831                                  	je	short int_76_first
 21832                                  
 21833                                  	cmp	byte [bx],0CFh
 21834                                  	je	short int_76_first
 21835                                  	
 21836                                  	cmp	word [bx+6],424Bh
 21837                                  	je	short int_76_not_first
 21838                                  	
 21839                                  	cmp	dx,0F000h
 21840                                  	jne	short int_76_not_first
 21841                                  
 21842                                  	push	es
 21843                                  	push	dx
 21844                                  	mov	dx,0F000h
 21845                                  	mov	es,dx
 21846                                  	cmp	bx,[es:0FF01h]
 21847                                  	pop	dx
 21848                                  	pop	es
 21849                                  	je	short int_76_first
 21850                                  %endif
 21851                                  	
 21852                                  int_76_not_first:
 21853                                  	; 14/12/2022
 21854                                  	; 25/10/2022
 21855                                  	;pop	ds
 21856 00001376 BF[7E06]                	mov	di,INT19OLD76
 21857 00001379 BB[1901]                	mov	bx,old76
 21858 0000137C BA[1701]                	mov	dx,int76
 21859 0000137F E86800                  	call	new_init_loop
 21860                                  
 21861                                  	; 14/12/2022
 21862 00001382 EB00                    	jmp	short int_76_end
 21863                                  ;int_76_first:
 21864                                  	; 25/10/2022
 21865                                  	;pop	ds
 21866                                  
 21867                                  int_76_end:
 21868                                  
 21869                                  stkinit_77:
 21870 00001384 BEDC01                  	mov	si,77h*4 ; 476
 21871                                  	
 21872                                  	; 14/12/2022
 21873                                  	; 25/10/2022
 21874 00001387 E83500                  	call	int_xx_first_check
 21875 0000138A 730C                    	jnc	short int_77_end ; int_77_first
 21876                                  
 21877                                  ; 14/12/2022
 21878                                  %if 0	
 21879                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21880                                  	push	ds
 21881                                  	lds	bx,[es:si]
 21882                                  	push	ds
 21883                                  	pop	dx
 21884                                  		
 21885                                  	cmp	dx,0
 21886                                  	je	short int_77_first
 21887                                  
 21888                                  	cmp	byte [bx],0CFh
 21889                                  	je	short int_77_first
 21890                                  	
 21891                                  	cmp	word [bx+6],424Bh
 21892                                  	je	short int_77_not_first
 21893                                  	
 21894                                  	cmp	dx,0F000h
 21895                                  	jne	short int_77_not_first
 21896                                  
 21897                                  	push	es
 21898                                  	push	dx
 21899                                  	mov	dx,0F000h
 21900                                  	mov	es,dx
 21901                                  	cmp	bx,[es:0FF01h]
 21902                                  	pop	dx
 21903                                  	pop	es
 21904                                  	je	short int_77_first
 21905                                  %endif
 21906                                  	
 21907                                  int_77_not_first:
 21908                                  	; 14/12/2022
 21909                                  	; 25/10/2022
 21910                                  	;pop	ds
 21911 0000138C BF[8306]                	mov	di,INT19OLD77
 21912 0000138F BB[3101]                	mov	bx,old77
 21913 00001392 BA[2F01]                	mov	dx,int77
 21914 00001395 E85200                  	call	new_init_loop
 21915                                  
 21916                                  	; 14/12/2022
 21917                                  	;jmp	short int_77_end
 21918                                  ;int_77_first:
 21919                                  	; 25/10/2022
 21920                                  	;pop	ds
 21921                                  
 21922                                  int_77_end:
 21923 00001398 1E                      	push	ds
 21924 00001399 B800F0                  	mov	ax,0F000h		; look at the model byte
 21925 0000139C 8ED8                    	mov	ds,ax
 21926 0000139E 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 21927 000013A3 1F                      	pop	ds
 21928 000013A4 7504                    	jne	short skip_enablenmis
 21929                                  
 21930 000013A6 B027                    	mov	al,27h			; enable convertible nmis
 21931 000013A8 E672                    	out	72h,al
 21932                                  
 21933                                  ; 25/10/2022
 21934                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 21935                                  
 21936                                  skip_enablenmis:
 21937 000013AA FB                      	sti
 21938                                  	;;mov	ax,Bios_Data ; 70h
 21939                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21940                                  	; 21/10/2022
 21941 000013AB B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21942 000013AE 8ED8                    	mov	ds,ax
 21943                                  
 21944                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 21945                                  
 21946 000013B0 C606[4006]01            	mov	byte [INT19SEM],1	; indicate that int 19
 21947                                  					; initialization is complete
 21948                                  
 21949 000013B5 5D                      	pop	bp			; restore all
 21950 000013B6 5E                      	pop	si
 21951 000013B7 5F                      	pop	di
 21952 000013B8 5A                      	pop	dx
 21953 000013B9 59                      	pop	cx
 21954 000013BA 5B                      	pop	bx
 21955 000013BB 07                      	pop	es
 21956 000013BC 1F                      	pop	ds
 21957 000013BD 58                      	pop	ax
 21958 000013BE C3                      	retn
 21959                                  
 21960                                  ; 14/12/2022
 21961                                  ; ----------------------------------------------------------------------
 21962                                  
 21963                                  	; 14/12/2022
 21964                                  	; 25/10/2022
 21965                                  ;%if 0
 21966                                  	; 27/03/2019 - Retro DOS v4.0
 21967                                  int_xx_first_check:
 21968 000013BF 1E                      	push	ds
 21969 000013C0 26C51C                  	lds	bx,[es:si]
 21970 000013C3 1E                      	push	ds
 21971 000013C4 5A                      	pop	dx
 21972                                  		
 21973 000013C5 83FA00                  	cmp	dx,0
 21974 000013C8 741E                    	je	short int_xx_first
 21975                                  	
 21976 000013CA 803FCF                  	cmp	byte [bx],0CFh
 21977 000013CD 7419                    	je	short int_xx_first
 21978                                  	
 21979 000013CF 817F064B42              	cmp	word [bx+6],424Bh
 21980 000013D4 7411                    	je	short int_xx_not_first
 21981                                  	
 21982 000013D6 81FA00F0                	cmp	dx,0F000h
 21983 000013DA 750B                    	jne	short int_xx_not_first
 21984                                  
 21985 000013DC 06                      	push	es
 21986                                  	;push	dx
 21987                                  	;mov	dx,0F000h
 21988 000013DD 8EC2                    	mov	es,dx
 21989 000013DF 263B1E01FF              	cmp	bx,[es:0FF01h]
 21990                                        	;pop	dx
 21991 000013E4 07                      	pop	es
 21992 000013E5 7401                    	je	short int_xx_first
 21993                                  
 21994                                  int_xx_not_first:
 21995 000013E7 F9                      	stc
 21996                                  int_xx_first:
 21997 000013E8 1F                      	pop	ds
 21998 000013E9 C3                      	retn
 21999                                  
 22000                                  ;%endif
 22001                                  
 22002                                  ; ----------------------------------------------------------------------
 22003                                  ; 27/03/2019 - Retro DOS v4.0
 22004                                  
 22005                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22006                                  ; (SYSINIT:1610h)
 22007                                  
 22008                                  new_init_loop:
 22009                                  
 22010                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 22011                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 22012                                  ;	dx=ds:offset of intxx, the new interrupt handler
 22013                                  ;	di=offset value of int19old&aa variable in bios.
 22014                                  ;	es=zero, segid of vector table
 22015                                  ;	ds=relocated stack code segment
 22016                                  
 22017 000013EA 268B04                  	mov	ax,[es:si]		;remember offset in vector
 22018 000013ED 8907                    	mov	[bx],ax			; to original owner in ds
 22019 000013EF 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 22020 000013F3 894702                  	mov	[bx+2],ax		; to original owner in ds
 22021                                  
 22022 000013F6 1E                      	push	ds
 22023                                  	;;mov	ax,Bios_Data ; 70h
 22024                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22025                                  	; 21/10/2022
 22026 000013F7 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22027 000013FA 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 22028 000013FC 268B04                  	mov	ax,[es:si]		;int 19 handler
 22029 000013FF 8905                    	mov	[di],ax
 22030 00001401 268B4402                	mov	ax,[es:si+2]
 22031 00001405 894502                  	mov	word [di+2],ax
 22032 00001408 1F                      	pop	ds
 22033                                  
 22034 00001409 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 22035 0000140C 268C5C02                	mov	[es:si+2],ds
 22036 00001410 C3                      	retn
 22037                                  
 22038                                  ; End of STACK initialization routine
 22039                                  ; ----------------------------------------------------------------------
 22040                                  
 22041                                  ; ----------------------------------------------------------------------
 22042                                  ;set the devmark for mem command.
 22043                                  ;in: [memhi] - the address to place devmark
 22044                                  ;    [memlo] = 0
 22045                                  ;    al = id for devmark_id
 22046                                  ;out: devmark established.
 22047                                  ;     the address saved in cs:[devmark_addr]
 22048                                  ;     [memhi] increase by 1.
 22049                                  ; ----------------------------------------------------------------------
 22050                                  
 22051                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22052                                  ; (SYSINIT:1637h)
 22053                                  
 22054                                  setdevmark:
 22055                                  
 22056 00001411 06                      	push	es
 22057 00001412 51                      	push	cx
 22058                                  
 22059 00001413 2E8B0E[E003]            	mov	cx,[cs:memhi]
 22060 00001418 2E890E[3214]            	mov	[cs:devmark_addr],cx
 22061 0000141D 8EC1                    	mov	es,cx
 22062                                  	; 25/10/2022
 22063                                  	;mov	[es:devmark.id],al
 22064 0000141F 26A20000                	mov	[es:0],al
 22065 00001423 41                      	inc	cx
 22066                                  	;mov	[es:devmark.seg],cx
 22067 00001424 26890E0100              	mov	[es:1],cx
 22068                                  
 22069 00001429 59                      	pop	cx
 22070 0000142A 07                      	pop	es
 22071 0000142B 2EFF06[E003]            	inc	word [cs:memhi]
 22072 00001430 C3                      	retn
 22073                                  
 22074                                  ; ----------------------------------------------------------------------
 22075                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 22076                                  ; ----------------------------------------------------------------------
 22077                                  ; 27/03/2019 - Retro DOS v4.0
 22078                                  
 22079                                  ;MULTI_CONFIG	equ 1
 22080                                  
 22081                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 22082                                                                          ; allocation strategy call
 22083                                  
 22084                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 22085                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 22086                                  
 22087                                  default_filenum equ 8
 22088                                  
 22089                                  ;stacksw	equ true		; include switchable hardware stacks
 22090                                  
 22091                                  ; external variable defined in ibmbio module for multi-track
 22092                                  
 22093                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 22094                                  					; it on after handling config.sys file as a
 22095                                  					; default value,if multrk_flag = multrk_off1.
 22096                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 22097                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 22098                                  
 22099                                  ; if stacksw
 22100                                  
 22101                                  ; internal stack parameters
 22102                                  
 22103                                  ;entrysize	equ 8
 22104                                  
 22105                                  ;mincount	equ 8
 22106                                  ;defaultcount	equ 9
 22107                                  ;maxcount	equ 64
 22108                                  
 22109                                  ;minsize 	equ 32
 22110                                  ;defaultsize	equ 128
 22111                                  ;maxsize 	equ 512
 22112                                  
 22113                                  DOS_FLAG_OFFSET	equ 86h
 22114                                  
 22115                                  ;ifdef MULTI_CONFIG
 22116                                  ;
 22117                                  ;   config_envlen must immediately precede config_wrkseg, because they
 22118                                  ;   may be loaded as a dword ptr
 22119                                  
 22120                                  ; 25/10/2022
 22121                                  ;config_envlen:	dw  0  			; when config_wrkseg is being used as
 22122                                  ;               			;  a scratch env, this is its length
 22123                                  ;config_wrkseg:	dw  0			; config work area (above confbot)
 22124                                  ;                   			;  segment of work area
 22125                                  ;
 22126                                  ;config_cmd:	db  0  			; current config cmd
 22127                                  ;                 			;  (with CONFIG_OPTION_QUERY bit intact)
 22128                                  ;config_multi:	db  0                   ; non-zero if multi-config config.sys
 22129                                  
 22130                                  ;endif ; MULTI_CONFIG
 22131                                  
 22132 00001431 00                      multdeviceflag:	db  0
 22133                                  
 22134 00001432 0000                    devmark_addr:	dw  0			;segment address for devmark.
 22135                                  
 22136 00001434 00                      setdevmarkflag: db  0			;flag used for devmark
 22137                                  
 22138                                  ; 12/12/2022
 22139                                  ;driver_units:	db  0			;total unitcount for driver
 22140                                  
 22141                                  ; 12/12/2022
 22142                                  ;ems_stub_installed:
 22143                                  ;		db  0
 22144                                  
 22145                                  ; 12/12/2022	
 22146                                  ;align 2
 22147                                  
 22148                                  badparm_ptr:	; label	dword
 22149 00001435 0000                    badparm_off:	dw  0
 22150 00001437 0000                    badparm_seg:	dw  0
 22151                                  
 22152                                  ;******************************************************************************
 22153                                  ;take care of config.sys file.
 22154                                  ;system parser data and code.
 22155                                  ;******************************************************************************
 22156                                  
 22157                                  ;*******************************************************************
 22158                                  ; parser options set for msbio sysconf module
 22159                                  ;*******************************************************************
 22160                                  ;
 22161                                  ;**** default assemble swiches definition **************************
 22162                                  
 22163                                  ;farsw	equ 0		; near call expected
 22164                                  ;datesw	equ 0		; check date format
 22165                                  ;timesw	equ 0		; check time format
 22166                                  ;filesw	equ 1		; check file specification
 22167                                  ;capsw	equ 0		; perform caps if specified
 22168                                  ;cmpxsw	equ 0		; check complex list
 22169                                  ;numsw	equ 1		; check numeric value
 22170                                  ;keysw	equ 0		; support keywords
 22171                                  ;swsw	equ 1		; support switches
 22172                                  ;val1sw	equ 1		; support value definition 1
 22173                                  ;val2sw	equ 0		; support value definition 2
 22174                                  ;val3sw	equ 1		; support value definition 3
 22175                                  ;drvsw	equ 1		; support drive only format
 22176                                  ;qussw	equ 0		; support quoted string format
 22177                                  
 22178                                  ; psdata_seg equ cs
 22179                                  
 22180                                  	;.xlist
 22181                                  	;include parse.asm		;together with psdata.inc
 22182                                  	;.list
 22183                                  
 22184                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 22185                                  ; ======================================================================
 22186                                  ; 27/03/2019 - Retro DOS v4.0
 22187                                  
 22188                                  ; 30/03/2019
 22189                                  ; VERSION.INC (MSDOS 6.0) 
 22190                                  ; Set DBCS Blank constant
 22191                                  
 22192                                  ; ifndef DBCS
 22193                                  DB_SPACE EQU 2020h
 22194                                  DB_SP_HI EQU 20h
 22195                                  DB_SP_LO EQU 20h
 22196                                  ; else
 22197                                  
 22198                                  ;*******************************************************************
 22199                                  ; Parser include file
 22200                                  ;*******************************************************************
 22201                                  
 22202                                  ;**** Equation field
 22203                                  ;-------- Character code definition
 22204                                  
 22205                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 22206                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 22207                                  _$P_Period	   equ	"."             ;AN020;
 22208                                  _$P_Slash	   equ	"/"             ;AN020;
 22209                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 22210                                  _$P_Comma	   equ	","             ;AN000;
 22211                                  _$P_Switch	   equ	"/"             ;AN000;
 22212                                  _$P_Keyword	   equ	"="             ;AN000;
 22213                                  _$P_Colon	   equ	":"             ;AN000;
 22214                                  _$P_Plus 	   equ	"+"             ;AN000;
 22215                                  _$P_Minus	   equ	"-"             ;AN000;
 22216                                  _$P_Rparen	   equ	")"             ;AN000;
 22217                                  _$P_Lparen	   equ	"("             ;AN000;
 22218                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 22219                                  _$P_DQuote	   equ	'"'             ;AN000;
 22220                                  _$P_NULL 	   equ	0		;AN000;
 22221                                  _$P_TAB		   equ	9		;AN000;
 22222                                  _$P_CR		   equ	0Dh		;AN000;
 22223                                  _$P_LF		   equ	0Ah		;AN000;
 22224                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 22225                                  
 22226                                  ;-------- Masks
 22227                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 22228                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 22229                                  
 22230                                  ;-------- DOS function call related equs
 22231                                  
 22232                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 22233                                  					; by this call, following information
 22234                                  struc _$P_CDI	
 22235 00000000 ????                     .DateF: resw 1
 22236 00000002 ??????????               .Money: resb 5
 22237 00000007 ????                     .1000:	 resb 2
 22238 00000009 ????                     .Dec:	 resb 2
 22239 0000000B ????                     .DateS: resb 2
 22240 0000000D ????                     .TimeS: resb 2
 22241 0000000F ??                          	 resb 1
 22242 00000010 ??                      	 resb 1
 22243 00000011 ??                       .TimeF: resb 1	 
 22244 00000012 ????????                	 resw 2
 22245 00000016 ????                    	 resb 2
 22246 00000018 <res Ah>                	 resw 5
 22247                                   .size:
 22248                                  endstruc
 22249                                  
 22250                                  _$P_Date_MDY	   equ	0		;AN000;
 22251                                  _$P_Date_DMY	   equ	1		;AN000;
 22252                                  _$P_Date_YMD	   equ	2		;AN000;
 22253                                  ;-------------
 22254                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 22255                                  					;AN000; DS:SI will points to DBCS EV
 22256                                  ;-------------
 22257                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 22258                                  					;AN000; following parameters are set
 22259                                  					;AN000; to get casemap table.
 22260                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 22261                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 22262                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 22263                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 22264                                  					; By this call following information
 22265                                  					; is returned.
 22266                                  struc _$P_DOS_TBL
 22267 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 22268 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 22269 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 22270                                  endstruc
 22271                                  
 22272                                  ; ----------------------------------------------------------------------------
 22273                                  ; PARMS 	LABEL	BYTE
 22274                                  ;		DW	PARMSX
 22275                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 22276                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22277                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 22278                                  ;					; TYPICAL ARE ";", "="
 22279                                  ;					; "," & WHITESPACE ALWAYS
 22280                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22281                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 22282                                  ; ----------------------------------------------------------------------------
 22283                                  
 22284                                  ;-------------------------------- PARMS block structure
 22285                                  struc _$P_PARMS_Blk
 22286 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 22287 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 22288 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 22289                                  endstruc
 22290                                  
 22291                                  _$P_Len_PARMS	   equ	4		;AN000;
 22292                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 22293                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 22294                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 22295                                  
 22296                                  ; ----------------------------------------------------------------------------
 22297                                  ; PARMSX	LABEL	BYTE
 22298                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 22299                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 22300                                  ;		:			; REPEATS maxp-1 TIMES
 22301                                  ;		DB	maxs		; # OF SWITCHES
 22302                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 22303                                  ;		:			; REPEATS maxs-1 TIMES
 22304                                  ;		DB	maxk		; # OF KEYWORD
 22305                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 22306                                  ;		:			; REPEATS maxk-1 TIMES
 22307                                  ; ----------------------------------------------------------------------------
 22308                                  
 22309                                  ;-------------------------------- PARMSX block structure
 22310                                  struc _$P_PARMSX_Blk		;AN000;
 22311 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 22312 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 22313 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 22314                                  endstruc
 22315                                  
 22316                                  ; ----------------------------------------------------------------------------
 22317                                  ; << Control field definition  >>
 22318                                  ;
 22319                                  ;
 22320                                  ;CONTROL   LABEL   BYTE
 22321                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 22322                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 22323                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 22324                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 22325                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 22326                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 22327                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 22328                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 22329                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 22330                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 22331                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 22332                                  ;				   ; 0002H=REPEATS ALLOWED
 22333                                  ;				   ; 0001H=OPTIONAL
 22334                                  ;	   DW	   FUNCTION_FLAGS
 22335                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 22336                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 22337                                  ;				   ; 0010H=REMOVE ":" AT END
 22338                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 22339                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 22340                                  ;	   DW	   VALUES	   ; VALUE LISTS
 22341                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 22342                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 22343                                  ;	   :
 22344                                  ;
 22345                                  ;Note:
 22346                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 22347                                  ;      DATE bit simalteniously.
 22348                                  ;
 22349                                  ;      The parser examins each bit along with the following priority.
 22350                                  ;
 22351                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 22352                                  ;      FILE SPEC -> SIMPLE STRING.
 22353                                  ;
 22354                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 22355                                  ;      in the result buffer is capitalized.
 22356                                  ;
 22357                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 22358                                  ;
 22359                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 22360                                  ;      switch, for example, '/A', then STRING points to;
 22361                                  ;
 22362                                  ;			DB    1 	; number of following synonyms
 22363                                  ;			DB   '/A',0
 22364                                  ;
 22365                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 22366                                  ;
 22367                                  ;			DB    1 	; number of following synonyms
 22368                                  ;			DB   'CODEPAGE=',0
 22369                                  ;
 22370                                  ;    - "..." must consist of upper case characters only because the parser
 22371                                  ;      performs pattern matching after converting input to upper case (by
 22372                                  ;      using the current country upper case table)
 22373                                  ;
 22374                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 22375                                  ;      example /A and /B, the format will be;
 22376                                  ;
 22377                                  ;			DB    2 	; number of following synonyms
 22378                                  ;			DB    '/A',0
 22379                                  ;			DB    '/B',0
 22380                                  ; ----------------------------------------------------------------------------
 22381                                  
 22382                                  ;**** Match_Flags
 22383                                  
 22384                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 22385                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 22386                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 22387                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 22388                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 22389                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 22390                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 22391                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 22392                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 22393                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 22394                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 22395                                  _$P_Optional	   equ	0001h		;AN000; Optional
 22396                                  
 22397                                  ;**** Function flags
 22398                                  
 22399                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 22400                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 22401                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 22402                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 22403                                  
 22404                                  ;-------------------------------- Control block structure
 22405                                  struc _$P_Control_Blk
 22406 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 22407 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 22408 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 22409 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 22410 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 22411 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 22412                                  endstruc
 22413                                  
 22414                                  ; ----------------------------------------------------------------------------
 22415                                  ; << Value List Definition >>
 22416                                  ;
 22417                                  ;VALUES 	LABEL	BYTE
 22418                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 22419                                  ;	     +-
 22420                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 22421                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 22422                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 22423                                  ;	     |	:
 22424                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 22425                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 22426                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 22427                                  ;	     |	:
 22428                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 22429                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 22430                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 22431                                  ;	     +-	:
 22432                                  ;
 22433                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 22434                                  ;
 22435                                  ;Note:
 22436                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 22437                                  ;      when no choice lists are provided.
 22438                                  ;
 22439                                  ;    - STRING must consist of upper case characters only because the parser
 22440                                  ;      performs pattern matching after converting input to upper case (by
 22441                                  ;      using the current country upper case table)
 22442                                  ; ----------------------------------------------------------------------------
 22443                                  
 22444                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 22445                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 22446                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 22447                                  _$P_nval_String	   equ	3		;AN000; string list ID
 22448                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 22449                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 22450                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 22451                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 22452                                  
 22453                                  struc _$P_Val_List
 22454 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 22455 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 22456 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 22457 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 22458 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 22459                                  endstruc
 22460                                  
 22461                                  ; ----------------------------------------------------------------------------
 22462                                  ; << Result Buffer Definition  >>
 22463                                  ;
 22464                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 22465                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 22466                                  ;						;	1=NUMBER, 2=LIST INDEX,
 22467                                  ;						;	3=STRING, 4=COMPLEX,
 22468                                  ;						;	5=FILESPEC, 6=DRIVE
 22469                                  ;						;	7=DATE, 8=TIME
 22470                                  ;						;	9=QUOTED STRING
 22471                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 22472                                  ;
 22473                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 22474                                  ;
 22475                                  ;            +-
 22476                                  ;	    | DD	n			; VALUE IF NUMBER
 22477                                  ;	    | or
 22478                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 22479                                  ;	    |					; (ES presents Segment address)
 22480                                  ;	    | or
 22481                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 22482                                  ;	    | or
 22483                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 22484                                  ;	    | or
 22485                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 22486                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 22487                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 22488                                  ;	    | or
 22489                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 22490                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 22491                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 22492                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 22493                                  ;	    +-
 22494                                  ;
 22495                                  ;
 22496                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 22497                                  ;      list.
 22498                                  ;
 22499                                  ;      YEAR: If the input value for the year is less than 100, parser
 22500                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 22501                                  ;	     the year value, he returns 1987.
 22502                                  ; ----------------------------------------------------------------------------
 22503                                  
 22504                                  ;-------------------------------- Result block structure
 22505                                  struc _$P_Result_Blk
 22506 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 22507 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 22508 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 22509 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 22510                                  endstruc
 22511                                  
 22512                                  ;--------------------------------
 22513                                  ;**** values for the type field in the result block
 22514                                  
 22515                                  _$P_EOL		   equ	0		;AN000; End of line
 22516                                  _$P_Number	   equ	1		;AN000; Number
 22517                                  _$P_List_Idx	   equ	2		;AN000; List Index
 22518                                  _$P_String	   equ	3		;AN000; String
 22519                                  _$P_Complex	   equ	4		;AN000; Complex
 22520                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 22521                                  _$P_Drive	   equ	6		;AN000; Drive
 22522                                  _$P_Date_F	   equ	7		;AN000; Date
 22523                                  _$P_Time_F	   equ	8		;AN000; Time
 22524                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 22525                                  
 22526                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 22527                                  
 22528                                  ;**** Return code
 22529                                  ;
 22530                                  ; following return code will be returned in the AX register.
 22531                                  
 22532                                  _$P_No_Error	   equ	0		;AN000; No error
 22533                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 22534                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 22535                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 22536                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 22537                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 22538                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 22539                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 22540                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 22541                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 22542                                  
 22543                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 22544                                  
 22545                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 22546                                  
 22547                                  ;********************** Local Data *************************************
 22548 00001439 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 22549 0000143B 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 22550 0000143D 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 22551 0000143F 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 22552 00001441 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 22553 00001442 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 22554 00001444 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 22555 00001446 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 22556                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 22557                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 22558                                  
 22559                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 22560                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 22561                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 22562                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 22563                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 22564                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 22565                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 22566                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 22567                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 22568                                  
 22569                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 22570                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 22571                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 22572                                  
 22573 00001448 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 22574 0000144A 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 22575 0000144C 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 22576 0000144E 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 22577                                  
 22578 00001450 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 22579                                  _$P_STRING_BUF_END equ	$		;AN000;
 22580                                  
 22581                                  ; 25/10/2022
 22582                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 22583                                  
 22584 000014D0 FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 22585 000014D1 0000                    		   dw	0		;AN000; offset	of char case map table
 22586 000014D3 0000                    		   dw	0		;AN000; segment of char case map table
 22587                                  ; 25/10/2022
 22588                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 22589                                  ;		   dw	0		;AN000; offset	of file case map table
 22590                                  ;		   dw	0		;AN000; segment of file case map table
 22591                                  
 22592                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 22593                                  ;
 22594                                  
 22595                                  ;M029
 22596                                  ;!!!WARNING!!!
 22597                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 22598                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 22599                                  ;changes need to be made in SYSPARSE
 22600                                  
 22601                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 22602                                  
 22603                                  ; 25/10/2022
 22604                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 22605                                  
 22606 000014D5 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 22607                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 22608                                  
 22609                                  ;ENDIF					;AN000;(of FileSW)
 22610                                  
 22611                                  ; delimiter parsing
 22612                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 22613                                  _$P_period_only	   equ	02h		;AN032; check only for period
 22614                                  
 22615                                  ;filespec error flag
 22616 000014DE 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 22617                                  					;AN033;  was detected.
 22618                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 22619                                  
 22620                                  
 22621                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 22622                                  ; ======================================================================
 22623                                  ; 27/03/2019 - Retro DOS v4.0
 22624                                  
 22625                                  ;***********************************************************************
 22626                                  ; SysParse;
 22627                                  ;
 22628                                  ;  Function : Parser Entry
 22629                                  ;
 22630                                  ;  Input: DS:SI -> command line
 22631                                  ;	  ES:DI -> parameter block
 22632                                  ;	  cs -> psdata.inc
 22633                                  ;	  CX = operand ordinal
 22634                                  ;
 22635                                  ;	  Note:  ES is the segment containing all the control blocks defined
 22636                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 22637                                  ;		 is in DS.
 22638                                  ;
 22639                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 22640                                  ;		    invalid value list. But this parser does NOT implement
 22641                                  ;		    this feature. Therefore CY always zero.
 22642                                  ;
 22643                                  ;	   CY = 0   AX = return code
 22644                                  ;		    BL = terminated delimiter code
 22645                                  ;		    CX = new operand ordinal
 22646                                  ;		    SI = set past scaned operand
 22647                                  ;		    DX = selected result buffer
 22648                                  ;
 22649                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 22650                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 22651                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 22652                                  ;
 22653                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 22654                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 22655                                  ;
 22656                                  ;-------- Modification History -----------------------------------------
 22657                                  ;
 22658                                  ;  4/04/87 : Created by K. K,
 22659                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 22660                                  ;	   : JMP SHORT assemble error (tm02)
 22661                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 22662                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 22663                                  ;	     DateSW equ 1)	      (tm04)
 22664                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 22665                                  ;				      (tm05) in PSDATA.INC
 22666                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 22667                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 22668                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 22669                                  ;	     value-list block	      (tm07)
 22670                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 22671                                  ;	     switch (keyword) or not. If there is, backup si for next call
 22672                                  ;	     (tm08)
 22673                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 22674                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 22675                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 22676                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 22677                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 22678                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 22679                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 22680                                  ;					  (tm12)
 22681                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 22682                                  ;					  (tm13)
 22683                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 22684                                  ;					  (tm14)
 22685                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 22686                                  ;					  (tm15)
 22687                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 22688                                  
 22689                                  ;  7/24/87 : Quoted strings being returned with quotes.
 22690                                  
 22691                                  ;  7/28/87 : Kerry S (;AN018;)
 22692                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 22693                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 22694                                  ;	     affected: _$P_Chk_SW_Control.
 22695                                  
 22696                                  ;  7/29/87 : Kerry S (;AN019;)
 22697                                  ;	     Now allow the optional bit in match flags for switches.  This
 22698                                  ;	     allows the switch to be encountered with a value or without a
 22699                                  ;	     value and no error is returned.
 22700                                  ;
 22701                                  
 22702                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 22703                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 22704                                  ;	     within a date response, instead of checking just for the one
 22705                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 22706                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 22707                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 22708                                  
 22709                                  ;  9/1/87  : Kerry S (;AN021)
 22710                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 22711                                  ;	     the command line with the string in the control block the
 22712                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 22713                                  ;	     on the command line and assuming a match.	This allowed a shorter
 22714                                  ;	     string on the command line than in the synonym list in the control
 22715                                  ;	     block.  I put in a test for a null in the control block so the
 22716                                  ;	     string in the control block must be the same length as the string
 22717                                  ;	     preceeding the colon or equal on the command line.
 22718                                  
 22719                                  ;  8/28/87 : Kerry S (;AN022;)
 22720                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 22721                                  ;	     problems for people who included it themselves in a segment other
 22722                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 22723                                  ;	     segment.
 22724                                  
 22725                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 22726                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 22727                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 22728                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 22729                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 22730                                  ;	     BL be used if TIME is being parsed.
 22731                                  
 22732                                  ;  9/24/87 : Ed K
 22733                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 22734                                  ;	     invocations with their normally expanded code; made comments
 22735                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 22736                                  
 22737                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 22738                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 22739                                  ;	     pointed to by non-existant CONTROL.
 22740                                  
 22741                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 22742                                  ;	     A quoted text string can be framed only by double quote.  Remove
 22743                                  ;	     support to frame quoted text string with single quote.
 22744                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 22745                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 22746                                  ;	     single quote in PROC prologues are left as is for history reasons.
 22747                                  
 22748                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 22749                                  ;	     quote chars within a quoted string is supposed to be reported as
 22750                                  ;	     one quote character, but is reported as two quotes.  This changed
 22751                                  ;	     two instructions in PROC _$P_Quoted_Str.
 22752                                  
 22753                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 22754                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 22755                                  
 22756                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 22757                                  
 22758                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 22759                                  ;	     psdata buffer should have cs.
 22760                                  
 22761                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 22762                                  ;	     positional missing.
 22763                                  
 22764                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 22765                                  ;	     as a line delimiter, should use carriage return.
 22766                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 22767                                  
 22768                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 22769                                  
 22770                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 22771                                  ;	     endless loop since SI is returned still pointing to start
 22772                                  ;	     of that parm.
 22773                                  
 22774                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 22775                                  ;	     Vector to returned string has CS instead of cs, but
 22776                                  ;	     when tried to fix it on previous version, changed similar
 22777                                  ;	     but wrong place.
 22778                                  
 22779                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 22780                                  ;	     delimiters between hours, minutes, seconds for time. And period
 22781                                  ;	     and comma are valid delimiters between seconds and 100th second.
 22782                                  
 22783                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 22784                                  ;	     in a filespec, then flag an error.
 22785                                  
 22786                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 22787                                  ;	     indexed off of the cs equate instead of the DS register.
 22788                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 22789                                  ;  -->	     local parser data. Why were some references to local data changed
 22790                                  ;	     to do this before, but not all ?????
 22791                                  
 22792                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 22793                                  
 22794                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 22795                                  ;
 22796                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 22797                                  
 22798                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 22799                                  
 22800                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 22801                                  ;	     separator in TIME before hundredths field.
 22802                                  ;
 22803                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 22804                                  ;			strings as keywords.
 22805                                  ;
 22806                                  ;***********************************************************************
 22807                                  
 22808                                  ;IF FarSW				;AN000;(Check if need far return)
 22809                                  ;SysParse proc far			;AN000;
 22810                                  ;ELSE					;AN000;
 22811                                  ;SysParse proc near			;AN000;
 22812                                  ;ENDIF					;AN000;(of FarSW)
 22813                                  
 22814                                  ; 27/03/2019 - Retro DOS v4.0
 22815                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 22816                                  
 22817                                  ; 25/10/2022 - Retro DOS v4.0
 22818                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 22819                                  
 22820                                  SysParse:
 22821 000014DF 2EC706[4614]0000        	mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 22822 000014E6 FC                      	cld				;AN000; confirm forward direction
 22823 000014E7 2E890E[3914]            	mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 22824 000014EC 2EC706[3B14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 22825 000014F3 2EC706[4E14]0000        	mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 22826                                  
 22827 000014FA 2EC706[3F14]0000        	mov	word [cs:_$P_DX],0	;AC034; (tm15)
 22828                                  
 22829                                  ;M029 -- Begin changes
 22830                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 22831                                  ;entry to SysParse. This is in the non-checksum region and any program that
 22832                                  ;corrupts this table but does not corrupt the checksum region will leave
 22833                                  ;command.com parsing in an inconsistent state.
 22834                                  ; NB: The special characters string has been hardcoded here. If any change
 22835                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 22836                                  
 22837                                  ;IF FileSW + DrvSW
 22838 00001501 2EC706[D514]5D5B        	mov	word [cs:_$P_FileSp_Char], ']['
 22839 00001508 2EC706[D714]3C7C        	mov	word [cs:_$P_FileSp_Char+2], '<|'
 22840 0000150F 2EC706[D914]2B3E        	mov	word [cs:_$P_FileSp_Char+4], '+>'
 22841 00001516 2EC706[DB14]3B3D        	mov 	word [cs:_$P_FileSp_Char+6], ';='
 22842                                  ;ENDIFtHHH
 22843                                  
 22844                                  ;M029 -- End of changes
 22845                                  
 22846 0000151D E89E06                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 22847 00001520 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 22848                                  ;--------------------------- End of Line
 22849 00001522 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 22850 00001525 53                      	push	bx			;AN000;
 22851                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 22852                                  					;AN000; Get the PARMSX address to
 22853 00001526 268B1D                  	mov	bx,[es:di]
 22854                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 22855                                  					;AN000; check ORDINAL to see if the minimum
 22856 00001529 263A0F                  	cmp	cl,[es:bx]	
 22857 0000152C 7303                    	jae	short _$P_Fin		;AN000; positional found.
 22858                                  
 22859 0000152E B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 22860                                  _$P_Fin: 				;AN000;
 22861 00001531 5B                      	pop	bx			;AN000;
 22862 00001532 E91F01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 22863                                  ;---------------------------
 22864                                  _$P_Start:				;AN000;
 22865 00001535 2E8936[4814]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 22866 0000153A 53                      	push	bx			;AN000; quoted string or file spec.
 22867 0000153B 57                      	push	di			;AN000;
 22868 0000153C 55                      	push	bp			;AN000;
 22869                                  	;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 22870                                  	; 02/11/2022
 22871 0000153D 8D1E[5014]              	lea	bx,[_$P_STRING_BUF]
 22872 00001541 2EF606[4714]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 22873 00001547 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 22874                                  
 22875                                  _$P_Pack_Loop:				;AN000;
 22876 00001549 AC                      	lodsb				;AN000; Pick a operand from buffer
 22877 0000154A E81607                  	call	_$P_Chk_Switch		;AN000; Check switch character
 22878 0000154D 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 22879                                  
 22880 0000154F E88E06                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 22881 00001552 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 22882                                  
 22883 00001554 E8BE06                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 22884 00001557 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 22885                                  
 22886 00001559 2EF606[4714]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 22887                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 22888 0000155F 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 22889                                  
 22890 00001561 E85A06                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 22891 00001564 EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 22892                                  
 22893                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 22894 00001566 2EF606[4714]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 22895 0000156C 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 22896                                  
 22897 0000156E 4E                      	dec	si			;AN000; (tm08)
 22898 0000156F EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 22899                                  
 22900                                  _$P_PL01:				;AN000;
 22901 00001571 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 22902 00001574 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 22903 00001576 7506                    	jne	short _$P_PL00 		;AN000; then
 22904                                  
 22905 00001578 2E800E[4714]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 22906                                  _$P_PL00:				;AN000;
 22907 0000157E 43                      	inc	bx			;AN000; ready to see next byte
 22908 0000157F E8FA06                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 22909 00001582 73C5                    	jnc	_$P_Pack_Loop		;AN000; if no, process to next byte
 22910                                  
 22911 00001584 AC                      	lodsb				;AN000; if yes, store
 22912 00001585 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 22913 00001588 43                      	inc	bx			;AN000; update pointer
 22914 00001589 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 22915                                  
 22916                                  _$P_Pack_End_BY_EOL:			;AN000;
 22917 0000158B 4E                      	dec	si			;AN000; backup si pointer
 22918                                  _$P_Pack_End:				;AN000;
 22919 0000158C 2E8936[3D14]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 22920 00001591 2EC60700                	mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 22921 00001595 2E891E[4C14]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 22922                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 22923 0000159A 268B1D                  	mov	bx,[es:di]
 22924                                  	;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 22925                                  	; 02/11/2022
 22926 0000159D 8D36[5014]              	lea	si,[_$P_STRING_BUF]
 22927 000015A1 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 22928 000015A5 7436                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 22929                                  
 22930 000015A7 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 22931 000015AB 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 22932                                  
 22933 000015AD 2EF606[4714]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 22934 000015B3 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 22935                                  
 22936                                  _$P_Positional_Manager:			;AN000; else process as positional
 22937 000015B5 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22938 000015B9 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22939 000015BB 2E3906[3914]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 22940 000015C0 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 22941                                  
 22942 000015C2 2EA1[3914]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 22943 000015C6 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 22944 000015C8 43                      	inc	bx			;AC035; add '2' to
 22945 000015C9 43                      	inc	bx			;AC035;  BX reg
 22946                                  					;AN000; now bx points to 1st CONTROL
 22947 000015CA 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 22948 000015CC 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 22949 000015CF E88400                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 22950 000015D2 EB65                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22951                                  
 22952                                  _$P_Too_Many_Error:			;AN000;
 22953 000015D4 2EC706[3B14]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 22954 000015DB EB5C                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22955                                  
 22956                                  _$P_SW_Manager:				;AN000;
 22957 000015DD 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22958 000015E1 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22959 000015E3 40                      	inc	ax			;AN000;
 22960 000015E4 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22961 000015E6 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22962 000015E8 268A0F                  	mov	cl,[es:bx]		;AN000;
 22963 000015EB 30ED                    	xor	ch,ch			;AN000; cx = maxs
 22964                                  	;or	cx,cx			;AN000; at least one switch ?
 22965                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 22966                                  	; 14/08/2023
 22967 000015ED E30F                    	jcxz	_$P_SW_Not_Found	; no
 22968                                  
 22969 000015EF 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 22970                                  
 22971                                  _$P_SW_Mgr_Loop: 			;AN000;
 22972 000015F0 53                      	push	bx			;AN000;
 22973 000015F1 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 22974 000015F4 E8BF00                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 22975 000015F7 5B                      	pop	bx			;AN000;
 22976 000015F8 733F                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 22977                                  
 22978 000015FA 43                      	inc	bx			;AC035; add '2' to
 22979 000015FB 43                      	inc	bx			;AC035;  BX reg
 22980                                  					;AN000; else bx points to the next CONTROL
 22981 000015FC E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 22982                                  
 22983                                  _$P_SW_Not_Found:			;AN000;
 22984 000015FE 2EC706[3B14]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 22985 00001605 EB32                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 22986                                  
 22987                                  _$P_Key_Manager: 			;AN000;
 22988 00001607 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22989 0000160B 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22990 0000160D 40                      	inc	ax			;AN000;
 22991 0000160E D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22992 00001610 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22993 00001612 268A07                  	mov	al,[es:bx]		;AN000;
 22994 00001615 30E4                    	xor	ah,ah			;AN000; ax = maxs
 22995 00001617 D1E0                    	shl	ax,1			;AN000;
 22996 00001619 40                      	inc	ax			;AN000; ax = ax*2+1
 22997 0000161A 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 22998 0000161C 268A0F                  	mov	cl,[es:bx]		;AN000;
 22999 0000161F 30ED                    	xor	ch,ch			;AN000; cx = maxk
 23000                                  	;or	cx,cx			;AN000; at least one keyword ?
 23001                                  	;jz	short _$P_Key_Not_Found	;AN000;
 23002                                  	; 14/08/2023
 23003 00001621 E30F                    	jcxz	_$P_Key_Not_Found	; no
 23004                                  
 23005 00001623 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 23006                                  
 23007                                  _$P_Key_Mgr_Loop:			;AN000;
 23008 00001624 53                      	push	bx			;AN000;
 23009 00001625 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 23010 00001628 E85A00                  	call	_$P_Chk_Key_Control	;AN000; do process for keyword
 23011 0000162B 5B                      	pop	bx			;AN000;
 23012 0000162C 730B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 23013                                  
 23014 0000162E 43                      	inc	bx			;AC035; add '2' to
 23015 0000162F 43                      	inc	bx			;AC035;  BX reg
 23016                                  					;AN000; else bx points to the next CONTROL
 23017 00001630 E2F2                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 23018                                  
 23019                                  _$P_Key_Not_Found:			;AN000;
 23020 00001632 2EC706[3B14]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 23021                                  _$P_Return_to_Caller:			;AN000;
 23022 00001639 5D                      	pop	bp			;AN000;
 23023 0000163A 5F                      	pop	di			;AN000;
 23024 0000163B 5B                      	pop	bx			;AN000;
 23025 0000163C 2E8B0E[3914]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 23026 00001641 2EA1[3B14]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 23027 00001645 2E8B36[3D14]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 23028 0000164A 2E8B16[3F14]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 23029 0000164F 2E8A1E[4114]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 23030                                  _$P_Single_Exit: 			;AN000;
 23031 00001654 F8                      	clc				;AN000;
 23032 00001655 C3                      	retn				;AN000;
 23033                                  
 23034                                  ;***********************************************************************
 23035                                  ; _$P_Chk_Pos_Control
 23036                                  ;
 23037                                  ; Function: Parse CONTROL block for a positional
 23038                                  ;
 23039                                  ; Input:     ES:BX -> CONTROL block
 23040                                  ;	     cs:SI -> _$P_STRING_BUF
 23041                                  ;
 23042                                  ; Output:    None
 23043                                  ;
 23044                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 23045                                  ;
 23046                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 23047                                  ;***********************************************************************
 23048                                  
 23049                                  _$P_Chk_Pos_Control:
 23050 00001656 50                      	push	ax			;AN000;
 23051                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 23052 00001657 268B07                  	mov	ax,[es:bx]
 23053                                  	; 12/12/2022
 23054 0000165A A802                    	test	al,_$P_Repeat
 23055                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 23056 0000165C 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 23057                                  
 23058 0000165E 2EFF06[3914]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 23059                                  _$P_CPC00:				;AN000;
 23060 00001663 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 23061 00001667 7517                    	jne	short _$P_CPC01		;AN000;
 23062                                  
 23063                                  	; 12/12/2022
 23064 00001669 A801                    	test	al,_$P_Optional
 23065                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 23066 0000166B 7509                    	jnz	short _$P_CPC02		;AN000;
 23067                                  
 23068 0000166D 2EC706[3B14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 23069 00001674 EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 23070                                  
 23071                                  _$P_CPC02:				;AN000;
 23072 00001676 50                      	push	ax			;AN000;
 23073                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 23074                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 23075                                  	; 14/08/2023
 23076 00001677 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23077 0000167A E89800                  	call	_$P_Fill_Result		;AN000;
 23078 0000167D 58                      	pop	ax			;AN000;
 23079 0000167E EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 23080                                  
 23081                                  _$P_CPC01:				;AN000;
 23082 00001680 E81701                  	call	_$P_Check_Match_Flags	;AN000;
 23083                                  _$P_CPC_Exit:				;AN000;
 23084 00001683 58                      	pop	ax			;AN000;
 23085 00001684 C3                      	retn				;AN000;
 23086                                  
 23087                                  ;***********************************************************************
 23088                                  ; _$P_Chk_Key_Control
 23089                                  ;
 23090                                  ; Function: Parse CONTROL block for a keyword
 23091                                  ;
 23092                                  ; Input:     ES:BX -> CONTROL block
 23093                                  ;	     cs:SI -> _$P_STRING_BUF
 23094                                  ;
 23095                                  ; Output:    CY = 1 : not match
 23096                                  ;
 23097                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23098                                  ;
 23099                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23100                                  ;***********************************************************************
 23101                                  
 23102                                  _$P_Chk_Key_Control:
 23103 00001685 F9                      	stc				;AN000; this logic works when the KeySW
 23104 00001686 C3                      	retn				;AN000; is reset.
 23105                                  
 23106                                  ;***********************************************************************
 23107                                  ; _$P_Search_KEYorSW:
 23108                                  ;
 23109                                  ; Function: Seach specified keyword or switch from CONTROL
 23110                                  ;
 23111                                  ; Input:     ES:BX -> CONTROL block
 23112                                  ;	     cs:SI -> _$P_STRING_BUF
 23113                                  ;
 23114                                  ; Output:    CY = 1 : not match
 23115                                  ;
 23116                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 23117                                  ;***********************************************************************
 23118                                  
 23119                                  	; 25/10/2022 - Retro DOS v4.0
 23120                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 23121                                  
 23122                                  _$P_Search_KEYorSW:			;AN000;
 23123 00001687 55                      	push	bp			;AN000;
 23124 00001688 51                      	push	cx			;AN000;
 23125 00001689 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 23126 0000168D 30ED                    	xor	ch,ch			;AN000; and set it to cx
 23127                                  	;or	cx,cx			;AN000; No synonyms specified ?
 23128                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 23129                                  	; 14/08/2023
 23130 0000168F E30D                    	jcxz	_$P_KEYorSW_Not_Found
 23131                                  
 23132                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 23133                                  	; 25/10/2022
 23134 00001691 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 23135                                  	;lea	bp,[bx+9]
 23136                                  _$P_KEYorSW_Loop:			;AN000;
 23137 00001694 E8C303                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 23138 00001697 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 23139                                  
 23140 00001699 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 23141 0000169C E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 23142                                  _$P_KEYorSW_Not_Found:			;AN000;
 23143 0000169E F9                      	stc				;AN000; indicate not found in synonym list
 23144 0000169F EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 23145                                  
 23146                                  _$P_KEYorSW_Found:			;AN000;
 23147 000016A1 2E892E[4E14]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 23148 000016A6 F8                      	clc				;AN000; indicate found
 23149                                  _$P_KEYorSW_Exit:			;AN000;
 23150 000016A7 59                      	pop	cx			;AN000;
 23151 000016A8 5D                      	pop	bp			;AN000;
 23152 000016A9 C3                      	retn				;AN000;
 23153                                   
 23154                                  ;***********************************************************************
 23155                                  ; _$P_MoveBP_NUL
 23156                                  ;***********************************************************************
 23157                                  
 23158                                  _$P_MoveBP_NUL:
 23159                                  _$P_MBP_Loop:				;AN000;
 23160                                  	; 11/12/2022
 23161 000016AA 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 23162                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 23163                                  	; (SYSINIT:18DBh)
 23164                                   	;cmp     byte [es:bp+0],0
 23165 000016AF 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 23166                                  
 23167 000016B1 45                      	inc	bp			;AN000; until
 23168 000016B2 EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 23169                                  
 23170                                  _$P_MBP_Exit:				;AN000;
 23171 000016B4 45                      	inc	bp			;AN000; bp points to next to NULL
 23172 000016B5 C3                      	retn				;AN000;
 23173                                  
 23174                                  ;***********************************************************************
 23175                                  ; _$P_Chk_SW_Control
 23176                                  ;
 23177                                  ; Function: Parse CONTROL block for a switch
 23178                                  ;
 23179                                  ; Input:     ES:BX -> CONTROL block
 23180                                  ;	     cs:SI -> _$P_STRING_BUF
 23181                                  ;
 23182                                  ; Output:    CY = 1 : not match
 23183                                  ;
 23184                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23185                                  ;
 23186                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23187                                  ;***********************************************************************
 23188                                  
 23189                                  _$P_Chk_SW_Control:
 23190                                  
 23191                                  ;IF SwSW				;AN000;(Check if switch is supported)
 23192                                  	;or	byte [cs:_$P_Flags+1],10h
 23193 000016B6 2E800E[4714]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 23194 000016BC E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 23195 000016BF 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 23196                                  
 23197                                  	;and	[cs:_$P_Flags+],0EFh
 23198 000016C1 2E8026[4714]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 23199                                  					;AC034; reset the indicator previously set
 23200 000016C7 50                      	push	ax			;AN000; 	      /switch:
 23201 000016C8 2EA1[4A14]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 23202 000016CC 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 23203 000016CE 2E0106[4814]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 23204 000016D3 58                      	pop	ax			;AN000;
 23205                                  
 23206 000016D4 2E8B36[4A14]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 23207 000016D9 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 23208 000016DD 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 23209                                  
 23210 000016DF 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 23211 000016E4 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 23212                                  
 23213 000016E6 2EC706[3B14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 23214 000016ED EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 23215                                  
 23216                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 23217                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 23218 000016EF 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 23219 000016F3 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 23220                                  
 23221                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 23222                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 23223                                  	;test	word [es:bx],1
 23224                                  	; 12/12/2022
 23225                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 23226 000016F5 26F60701                	test	byte [es:bx],_$P_Optional
 23227 000016F9 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 23228                                  
 23229 000016FB 2EC706[3B14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 23230 00001702 EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 23231                                  
 23232                                  _$P_CSW00:				;AN000;
 23233 00001704 E89300                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 23234 00001707 F8                      	clc				;AN000; indicate match
 23235                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23236                                  	; 12/12/2022
 23237 00001708 C3                      	retn
 23238                                  
 23239                                  _$P_Chk_SW_Err0: 			;AN000;
 23240 00001709 F9                      	stc				;AN000; not found in switch synonym list
 23241                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23242                                  	; 12/12/2022
 23243 0000170A C3                      	retn	
 23244                                  
 23245                                  _$P_Chk_SW_Exit: 			;AN000;
 23246 0000170B 50                      	push	ax			;AN000;
 23247                                  	;mov	al,_$P_String		;AN000;
 23248                                  	;mov	ah,_$P_No_Tag		;AN000;
 23249                                  	; 14/08/2023
 23250 0000170C B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23251 0000170F E80300                  	call	_$P_Fill_Result		;AN000; 	 buffer
 23252 00001712 58                      	pop	ax			;AN000;
 23253 00001713 F8                      	clc				;AN000;
 23254                                  _$P_Chk_SW_Single_Exit:			;AN000;
 23255 00001714 C3                      	retn				;AN000;
 23256                                  ;ELSE					;AN000;(of IF SwSW)
 23257                                  ;	stc				;AN000; this logic works when the SwSW
 23258                                  ;	retn				;AN000; is reset.
 23259                                  
 23260                                  ;***********************************************************************
 23261                                  ; _$P_Fill_Result
 23262                                  ;
 23263                                  ; Function: Fill the result buffer
 23264                                  ;
 23265                                  ; Input:    AH = Item tag
 23266                                  ;	    AL = type
 23267                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 23268                                  ;		  AL = 2: DX has index(offset) into value list
 23269                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 23270                                  ;		  AL = 7: DX has year, CL has month and CH has date
 23271                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 23272                                  ;			  amd CH has hundredths
 23273                                  ;		  AL = else: cs:SI points to returned string buffer
 23274                                  ;	    ES:BX -> CONTROL block
 23275                                  ;
 23276                                  ; Output:   None
 23277                                  ;
 23278                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 23279                                  ;
 23280                                  ; Vars: _$P_DX(W)
 23281                                  ;***********************************************************************
 23282                                  
 23283                                  _$P_Fill_Result:
 23284 00001715 57                      	push	di			;AN000;
 23285 00001716 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 23286                                  					;AN000; di points to result buffer
 23287 0000171A 2E893E[3F14]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 23288 0000171F 268805                  	mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 23289 00001722 26886501                	mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 23290 00001726 50                      	push	ax			;AN000;
 23291 00001727 2EA1[4E14]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 23292 0000172B 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 23293                                  					;AN000;   then set it to the result
 23294 0000172F 58                      	pop	ax			;AN000;
 23295                                  _$P_RLT04:				;AN000;
 23296 00001730 3C01                    	cmp	al,_$P_Number		;AN000; if number
 23297 00001732 750A                    	jne	short _$P_RLT00		;AN000;
 23298                                  
 23299                                  _$P_RLT02:				;AN000;
 23300 00001734 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 23301 00001738 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 23302 0000173C EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 23303                                  
 23304                                  _$P_RLT00:				;AN000;
 23305 0000173E 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 23306 00001740 7506                    	jne	short _$P_RLT01		;AN000;
 23307                                  
 23308 00001742 26895504                	mov	word [es:di+_$P_Result_Blk.Picked_Val],dx 
 23309                                  					;AN000; then store list index
 23310 00001746 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 23311                                  
 23312                                  _$P_RLT01:				;AN000;
 23313 00001748 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 23314 0000174A 74E8                    	je	short _$P_RLT02		;AN000;
 23315                                  
 23316 0000174C 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 23317 0000174E 74E4                    	je	short _$P_RLT02		;AN000;
 23318                                  
 23319 00001750 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 23320 00001752 7506                    	jne	short _$P_RLT03		;AN000;
 23321                                  
 23322 00001754 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 23323 00001758 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 23324                                  
 23325                                  _$P_RLT03:				;AN000;
 23326 0000175A 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 23327 0000175C 750F                    	jne	short _$P_RLT05		;AN000;
 23328                                  
 23329 0000175E 2EA1[4814]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 23330 00001762 40                      	inc	ax			;AN000; skip left Parentheses
 23331 00001763 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 23332 00001767 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 23333 0000176B EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 23334                                  
 23335                                  _$P_RLT05:				;AN000;
 23336                                  ;------------------------  AL = 3, 5, or 9
 23337 0000176D 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 23338                                  					;AN000; store offset of STRING_BUF
 23339 00001771 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 23340                                  					;AN031; store segment of STRING_BUF
 23341 00001775 50                      	push	ax			;AN000;
 23342 00001776 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 23343                                  					;AN000; need CAPS by file table?
 23344 0000177B 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 23345                                  
 23346 0000177D B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 23347 0000177F EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 23348                                  
 23349                                  _$P_RLT_CAP00:				;AN000;
 23350 00001781 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 23351                                  					;AN000; need CAPS by char table ?
 23352 00001786 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 23353                                  
 23354 00001788 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 23355                                  _$P_RLT_CAP02:				;AN000;
 23356 0000178A E8DF00                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 23357                                  _$P_RLT_CAP01:				;AN000;
 23358 0000178D 58                      	pop	ax			;AN000;
 23359 0000178E 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 23360                                  					;AN000; removing colon at end ?
 23361 00001793 7403                    	jz	short _$P_RLT_Exit	;AN000;
 23362                                  
 23363 00001795 E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 23364                                  _$P_RLT_Exit:				;AN000;
 23365 00001798 5F                      	pop	di			;AN000;
 23366 00001799 C3                      	retn				;AN000;
 23367                                  
 23368                                  ;***********************************************************************
 23369                                  ; _$P_Check_Match_Flags
 23370                                  ;
 23371                                  ; Function:  Check the mutch_flags and make the exit code and set the
 23372                                  ;	     result buffer
 23373                                  ;
 23374                                  ;	    Check for types in this order:
 23375                                  ;		Complex
 23376                                  ;		Date
 23377                                  ;		Time
 23378                                  ;		Drive
 23379                                  ;		Filespec
 23380                                  ;		Quoted String
 23381                                  ;		Simple String
 23382                                  ;
 23383                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23384                                  ;	     ES:BX -> CONTROL block
 23385                                  ;
 23386                                  ; Output:    None
 23387                                  ;
 23388                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 23389                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 23390                                  ;	     _$P_Drive_Format
 23391                                  ;***********************************************************************
 23392                                  
 23393                                  	; 25/10/2022 - Retro DOS v4.0
 23394                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 23395                                  
 23396                                  	; 12/12/2022
 23397                                  _$P_Check_Match_Flags:
 23398 0000179A 2EC606[DE14]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 23399                                  					;AN033;AC034;; clear filespec error flag.
 23400 000017A0 50                      	push	ax			;AN000;
 23401                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 23402 000017A1 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 23403 000017A4 09C0                    	or	ax,ax			;AC035; test ax for zero
 23404 000017A6 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 23405 000017A8 50                      	push	ax			;AN000; (tm12)
 23406 000017A9 53                      	push	bx			;AN000; (tm12)
 23407 000017AA 52                      	push	dx			;AN000; (tm12)
 23408 000017AB 57                      	push	di			;AN000; (tm12)
 23409 000017AC 2EC706[3B14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 23410                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 23411                                  	;mov	al,_$P_String		;AN000; (tm12)
 23412                                  	; 14/08/2023
 23413 000017B3 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23414 000017B6 E85CFF                  	call	_$P_Fill_Result		;AN000; (tm12)
 23415 000017B9 5F                      	pop	di			;AN000; (tm12)
 23416 000017BA 5A                      	pop	dx			;AN000; (tm12)
 23417 000017BB 5B                      	pop	bx			;AN000; (tm12)
 23418 000017BC 58                      	pop	ax			;AN000; (tm12)
 23419                                  	; 12/12/2022
 23420                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 23421                                  	; 12/12/2022
 23422                                  ;_$P_Mat: 				;AN000; (tm12)
 23423                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 23424                                  _$P_Bridge:
 23425 000017BD EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 23426                                  	
 23427                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23428                                  	; (SYSINIT:19F9h)
 23429                                  	; 12/12/2022
 23430                                  	;nop	; db 90h
 23431                                  
 23432                                  ; 12/12/2022
 23433                                  _$P_Mat:
 23434                                  _$P_Match03:				;AN000;
 23435                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 23436                                  	; 14/08/2023
 23437 000017BF F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 23438 000017C2 7412                    	jz	short _$P_Match04	;AN000;
 23439                                  
 23440 000017C4 2EC706[3B14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23441 000017CB E81F01                  	call	_$P_Value		;AN000; do process
 23442 000017CE 2E833E[3B14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23443 000017D4 7557                    	jne	short _$P_Match_Exit	;AN000;
 23444                                  _$P_Match04:				;AN000;
 23445                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 23446                                  	; 14/08/2023
 23447 000017D6 F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 23448 000017D9 7412                    	jz	short _$P_Match05	;AN000;
 23449                                  
 23450 000017DB 2EC706[3B14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23451 000017E2 E8E400                  	call	_$P_SValue		;AN000; do process
 23452 000017E5 2E833E[3B14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23453 000017EB 7540                    	jne	short _$P_Match_Exit	;AN000;
 23454                                  _$P_Match05:				;AN000;
 23455                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 23456                                  	; 14/08/2023
 23457 000017ED F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 23458 000017F0 7415                    	jz	short _$P_Match06	;AN000;
 23459                                  
 23460 000017F2 2EC706[3B14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23461 000017F9 E8FC02                  	call	_$P_File_Format		;AN000; 1st, call file format
 23462 000017FC E87D03                  	call	_$P_Drive_Format	;AN000; check drive format, next
 23463 000017FF 2E833E[3B14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23464 00001805 7526                    	jne	short _$P_Match_Exit	;AN000;
 23465                                  _$P_Match06:				;AN000;
 23466                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 23467                                  	; 14/08/2023
 23468 00001807 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 23469 0000180A 7412                    	jz	short _$P_Match07	;AN000;
 23470                                  
 23471 0000180C 2EC706[3B14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23472 00001813 E8E202                  	call	_$P_File_Format		;AN000; do process
 23473 00001816 2E833E[3B14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23474 0000181C 750F                    	jne	short _$P_Match_Exit	;AN000;
 23475                                  _$P_Match07:				;AN000;
 23476                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 23477                                  	; 14/08/2023
 23478 0000181E F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 23479 00001821 740A                    	jz	short _$P_Match09	;AN000;
 23480                                  
 23481 00001823 2EC706[3B14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23482 0000182A E8C401                  	call	_$P_Simple_String	;AN000; do process
 23483                                  _$P_Match09:				;AN000;
 23484                                  _$P_Match_Exit:				;AN000;
 23485 0000182D 2E833E[DE14]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 23486 00001833 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23487 00001835 2E833E[3B14]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 23488 0000183B 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23489 0000183D 2EC706[3B14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 23490                                  _$P_Match2_Exit: 			;AN033;
 23491 00001844 58                      	pop	ax			;AN000;
 23492 00001845 C3                      	retn				;AN000;
 23493                                  
 23494                                  ;***********************************************************************
 23495                                  ; _$P_Remove_Colon;
 23496                                  ;
 23497                                  ; Function: Remove colon at end
 23498                                  ;
 23499                                  ; Input:    cs:SI points to string buffer to be examineed
 23500                                  ;
 23501                                  ; Output:   None
 23502                                  ;
 23503                                  ; Use:	_$P_Chk_DBCS
 23504                                  ;***********************************************************************
 23505                                  
 23506                                  _$P_Remove_Colon:
 23507 00001846 50                      	push	ax			;AN000;
 23508 00001847 56                      	push	si			;AN000;
 23509                                  _$P_RCOL_Loop:				;AN000;
 23510 00001848 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23511 0000184B 08C0                    	or	al,al			;AN000; end of string ?
 23512 0000184D 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 23513                                  
 23514 0000184F 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 23515 00001851 750D                    	jne	short _$P_RCOL00	;AN000;
 23516                                  
 23517 00001853 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 23518 00001858 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 23519                                  
 23520 0000185A 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 23521 0000185E EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 23522                                  
 23523                                  _$P_RCOL00:				;AN000;
 23524 00001860 E81904                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 23525 00001863 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 23526                                  
 23527 00001865 46                      	inc	si			;AN000; if yes, skip trailing byte
 23528                                  _$P_RCOL01:				;AN000;
 23529 00001866 46                      	inc	si			;AN000; si points to next byte
 23530 00001867 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 23531                                  
 23532                                  _$P_RCOL_Exit:				;AN000;
 23533 00001869 5E                      	pop	si			;AN000;
 23534 0000186A 58                      	pop	ax			;AN000;
 23535 0000186B C3                      	retn				;AN000;
 23536                                  
 23537                                  ;***********************************************************************
 23538                                  ; _$P_Do_CAPS_String;
 23539                                  ;
 23540                                  ; Function: Perform capitalization along with the file case map table
 23541                                  ;	    or character case map table.
 23542                                  ;
 23543                                  ; Input:    AL = 2 : Use character table
 23544                                  ;	    AL = 4 : Use file table
 23545                                  ;	    cs:SI points to string buffer to be capitalized
 23546                                  ;
 23547                                  ; Output:   None
 23548                                  ;
 23549                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 23550                                  ;***********************************************************************
 23551                                  
 23552                                  _$P_Do_CAPS_String:
 23553 0000186C 56                      	push	si			;AN000;
 23554 0000186D 52                      	push	dx			;AN000;
 23555 0000186E 88C2                    	mov	dl,al			;AN000; save info id
 23556                                  
 23557                                  _$P_DCS_Loop:				;AN000;
 23558 00001870 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 23559 00001873 E80604                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 23560 00001876 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 23561                                  
 23562 00001878 08C0                    	or	al,al			;AN000; end of string ?
 23563 0000187A 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 23564                                  
 23565 0000187C E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 23566 0000187F 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 23567 00001882 EB01                    	jmp	short _$P_DCS01		;AN000; process next
 23568                                  _$P_DCS00:				;AN000;
 23569 00001884 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 23570                                  _$P_DCS01:				;AN000;
 23571 00001885 46                      	inc	si			;AN000; si point to next byte
 23572 00001886 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 23573                                  _$P_DCS_Exit:				;AN000;
 23574 00001888 5A                      	pop	dx			;AN000;
 23575 00001889 5E                      	pop	si			;AN000;
 23576 0000188A C3                      	retn
 23577                                  
 23578                                  ;***********************************************************************
 23579                                  ; _$P_Do_CAPS_Char;
 23580                                  ;
 23581                                  ; Function: Perform capitalization along with the file case map table
 23582                                  ;	    or character case map table.
 23583                                  ;
 23584                                  ; Input:    DL = 2 : Use character table
 23585                                  ;	    DL = 4 : Use file table
 23586                                  ;	    AL = character to be capitalized
 23587                                  ;
 23588                                  ; Output:   None
 23589                                  ;
 23590                                  ; Use:	INT 21h /w AH=65h
 23591                                  ;***********************************************************************
 23592                                  
 23593                                  _$P_Do_CAPS_Char:
 23594 0000188B 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 23595 0000188D 730B                    	jae	short _$P_DCC_Go	;AN000;
 23596                                  
 23597 0000188F 3C61                    	cmp	al,"a"                  ;AN000; if no,
 23598 00001891 7235                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 23599                                  
 23600 00001893 3C7A                    	cmp	al,"z"                  ;AN000;
 23601 00001895 7731                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 23602                                  
 23603 00001897 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 23604                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 23605                                  	; 14/08/2023
 23606 00001899 C3                      	retn
 23607                                  
 23608                                  _$P_DCC_Go:				;AN000;
 23609 0000189A 53                      	push	bx			;AN000;
 23610 0000189B 06                      	push	es			;AN000;
 23611 0000189C 57                      	push	di			;AN000;
 23612                                  
 23613                                  	;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 23614 0000189D 8D3E[D014]              	lea	di,[_$P_Char_CAP_Ptr]
 23615                                  _$P_DCC00:				;AN000;
 23616 000018A1 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 23617 000018A4 7415                    	je	short _$P_DCC01		;AN000; if no,
 23618                                  
 23619                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 23620                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 23621                                  ; call, regardless of what base register is currently be defined as cs.
 23622                                  
 23623 000018A6 50                      	push	ax			;AN000; get CAPS table thru DOS call
 23624 000018A7 51                      	push	cx			;AN000;
 23625 000018A8 52                      	push	dx			;AN000;
 23626                                  
 23627 000018A9 0E                      	push	cs			;AC036; pass current base seg into
 23628                                  					;(Note: this used to push CS.  BUG...
 23629 000018AA 07                      	pop	es			;AN000;   ES reg, required for
 23630                                  					;get extended country information
 23631                                  	;mov	al,dl ; function	;AN000; upper case table
 23632                                  	; 14/08/2023
 23633 000018AB 92                      	xchg	ax,dx
 23634 000018AC B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 23635 000018AE BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 23636 000018B1 B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 23637                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 23638                                  	; 14/08/2023
 23639 000018B4 89DA                    	mov	dx,bx ; 0FFFFh
 23640                                  					;DI already set to point to buffer
 23641 000018B6 CD21                    	int	21h			;AN000; es:di point to buffer that
 23642                                  					;now has been filled in with info
 23643 000018B8 5A                      	pop	dx			;AN000;
 23644 000018B9 59                      	pop	cx			;AN000;
 23645 000018BA 58                      	pop	ax			;AN000;
 23646                                  
 23647                                  _$P_DCC01:				;AN000;
 23648                                  
 23649                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 23650                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 23651                                  ; regardless of which base reg is currently the cs reg.
 23652                                  
 23653                                  	; 14/08/2023
 23654                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 23655                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 23656 000018BB 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 23657 000018BF 43                      	inc	bx			;AC035; add '2' to
 23658 000018C0 43                      	inc	bx			;AC035;  BX reg
 23659                                  					;AN000; skip length field
 23660 000018C1 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 23661                                  	;xlat	es:[bx] 		;AN000; perform case map
 23662 000018C3 26                      	es
 23663 000018C4 D7                      	xlat
 23664 000018C5 5F                      	pop	di			;AN000;
 23665 000018C6 07                      	pop	es			;AN000;
 23666 000018C7 5B                      	pop	bx			;AN000;
 23667                                  _$P_CAPS_Ret:				;AN000;
 23668 000018C8 C3                      	retn				;AN000;
 23669                                  
 23670                                  ;***********************************************************************
 23671                                  ; _$P_Value / _$P_SValue
 23672                                  ;
 23673                                  ; Function:  Make 32bit value from cs:SI and see value list
 23674                                  ;	     and make result buffer.
 23675                                  ;	     _$P_SValue is an entry point for the signed value
 23676                                  ;	     and this will simply call _$P_Value after the handling
 23677                                  ;	     of the sign character, "+" or "-"
 23678                                  ;
 23679                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23680                                  ;	     ES:BX -> CONTROL block
 23681                                  ;
 23682                                  ; Output:    None
 23683                                  ;
 23684                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 23685                                  ;
 23686                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 23687                                  ;***********************************************************************
 23688                                  
 23689                                  	; 26/10/2022 - Retro DOS v4.0
 23690                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 23691                                  
 23692                                  _$P_SValue:				;AN000; when signed value here
 23693 000018C9 50                      	push	ax			;AN000;
 23694 000018CA 2E800E[4714]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 23695 000018D0 2E8026[4714]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 23696 000018D6 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 23697 000018D9 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 23698 000018DB 740A                    	je	short _$P_SVal00	;AN000;
 23699                                  
 23700 000018DD 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 23701 000018DF 7507                    	jne	short _$P_Sval01	;AN000; else
 23702                                  
 23703 000018E1 2E800E[4714]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 23704                                  _$P_SVal00:				;AN000;
 23705 000018E7 46                      	inc	si			;AN000; skip sign char
 23706                                  _$P_Sval01:				;AN000;
 23707 000018E8 E80200                  	call	_$P_Value		;AN000; and process value
 23708 000018EB 58                      	pop	ax			;AN000;
 23709 000018EC C3                      	retn
 23710                                  
 23711                                  ;***********************************************************************
 23712                                  
 23713                                  	; 26/10/2022
 23714                                  _$P_Value:				;AN000;
 23715 000018ED 50                      	push	ax			;AN000;
 23716 000018EE 51                      	push	cx			;AN000;
 23717 000018EF 52                      	push	dx			;AN000;
 23718 000018F0 56                      	push	si			;AN000;
 23719 000018F1 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 23720 000018F3 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 23721 000018F5 53                      	push	bx			;AN000; save control pointer
 23722                                  _$P_Value_Loop:				;AN000;
 23723 000018F6 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23724 000018F9 08C0                    	or	al,al			;AN000; end of line ?
 23725 000018FB 7442                    	jz	short _$P_Value00	;AN000;
 23726                                  
 23727 000018FD E8E600                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 23728 00001900 7239                    	jc	short _$P_Value_Err0	;AN000;
 23729                                  
 23730 00001902 30E4                    	xor	ah,ah			;AN000;
 23731 00001904 89C5                    	mov	bp,ax			;AN000; save binary number
 23732 00001906 D1E2                    	shl	dx,1			;AN000; to have 2*x
 23733 00001908 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23734 0000190A E8C700                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23735 0000190D 722C                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23736                                  
 23737 0000190F 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 23738 00001911 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 23739 00001913 D1E2                    	shl	dx,1			;AN000; to have 4*x
 23740 00001915 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23741 00001917 E8BA00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23742 0000191A 721F                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23743                                  
 23744 0000191C D1E2                    	shl	dx,1			;AN000; to have 8*x
 23745 0000191E D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23746 00001920 E8B100                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23747 00001923 7216                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23748                                  
 23749 00001925 01DA                    	add	dx,bx			;AN000; now have 10*x
 23750 00001927 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 23751 00001929 E8A800                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23752 0000192C 720D                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23753                                  
 23754 0000192E 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 23755 00001930 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 23756 00001933 E89E00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23757 00001936 7203                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23758                                  
 23759 00001938 46                      	inc	si			;AN000; update pointer
 23760 00001939 EBBB                    	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 23761                                  ;
 23762                                  _$P_Value_Err0:				;AN000;
 23763 0000193B 5B                      	pop	bx			;AN000;
 23764 0000193C E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 23765                                  ;
 23766                                  _$P_Value00:				;AN000;
 23767 0000193F 5B                      	pop	bx			;AN000; restore control pointer
 23768 00001940 2EF606[4714]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 23769 00001946 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 23770                                  
 23771 00001948 F7D1                    	not	cx			;AN000; +
 23772 0000194A F7D2                    	not	dx			;AN000; |- Make 2's complement
 23773 0000194C 83C201                  	add	dx,1			;AN000; |
 23774 0000194F 83D100                  	adc	cx,0			;AN000; +
 23775                                  
 23776                                  _$P_Value01:				;AN000; / nval =0
 23777 00001952 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 23778 00001956 268A04                  	mov	al,[es:si]		;AN000; get nval
 23779 00001959 3C00                    	cmp	al,_$P_nval_None 	;AN000; no value list ?
 23780                                  	;*jne	short _$P_Value02	;AN000;
 23781                                  	;* 14/08/2023
 23782 0000195B 7459                    	je	short _$P_Value05
 23783                                  
 23784                                  	;mov	al,_$P_Number		;AN000; Set type
 23785                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23786                                  	; 14/08/2023
 23787                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 23788                                  	;*jmp	short _$P_Value_Exit	;AN000;
 23789                                  
 23790                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 23791                                  	; (SYSINIT:1BA5h)
 23792                                  	; 12/12/2022
 23793                                  	;nop	; db  90h
 23794                                  
 23795                                  _$P_Value02:				;AN000; / nval = 1
 23796                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 23797                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 23798                                  ;(tm07) jne	short _$P_Value03	;AN000;
 23799                                  
 23800 0000195D 46                      	inc	si			;AN000;
 23801 0000195E 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 23802 00001961 3C00                    	cmp	al,_$P_No_nrng		;AN000; (tm07)
 23803 00001963 745D                    	je	short _$P_Value03	;AN000; (tm07)
 23804                                  
 23805 00001965 46                      	inc	si			;AN000; si points to 1st item_tag
 23806                                  _$P_Val02_Loop:				;AN000;
 23807 00001966 2EF606[4714]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 23808 0000196C 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 23809                                  
 23810 0000196E 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 23811 00001972 7234                    	jb	short _$P_Val02_Next	;AN000;
 23812 00001974 7706                    	ja	short _$P_Val_In	;AN000;
 23813                                  
 23814 00001976 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 23815 0000197A 722C                    	jb	short _$P_Val02_Next	;AN000;
 23816                                  
 23817                                  _$P_Val_In:				;AN000;
 23818 0000197C 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 23819 00001980 7726                    	ja	short _$P_Val02_Next	;AN000;
 23820 00001982 7237                    	jb	short _$P_Val_Found	;AN000;
 23821                                  
 23822 00001984 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 23823 00001988 771E                    	ja	short _$P_Val02_Next	;AN000;
 23824                                  
 23825 0000198A EB2F                    	jmp	short _$P_Val_Found	;AN000;
 23826                                  
 23827                                  _$P_Val02_Sign:				;AN000;
 23828 0000198C 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 23829 00001990 7C16                    	jl	short _$P_Val02_Next	;AN000;
 23830 00001992 7F06                    	jg	short _$P_SVal_In	;AN000;
 23831                                  
 23832 00001994 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 23833 00001998 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 23834                                  
 23835                                  _$P_SVal_In:				;AN000;
 23836 0000199A 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 23837 0000199E 7F08                    	jg	short _$P_Val02_Next	;AN000;
 23838                                  
 23839 000019A0 7C19                    	jl	short _$P_Val_Found	;AN000;
 23840                                  
 23841 000019A2 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 23842                                  	;jg	short _$P_Val02_Next	;AN000;
 23843                                  	;jmp	short _$P_Val_Found	;AN000;
 23844                                  	; 14/08/2023
 23845 000019A6 7E13                    	jng	short _$P_Val_Found
 23846                                  
 23847                                  _$P_Val02_Next:				;AN000;
 23848 000019A8 83C609                  	add	si,_$P_Len_Range 	;AN000;
 23849 000019AB FEC8                    	dec	al			;AN000; loop nrng times in AL
 23850 000019AD 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 23851                                  					; / Not found
 23852 000019AF 2EC706[3B14]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 23853                                  	;mov	al,_$P_Number		;AN000;
 23854                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23855                                  _$P_Value05:		;* 14/08/2023
 23856                                  	; 14/08/2023
 23857 000019B6 B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 23858 000019B9 EB11                    	jmp	short _$P_Value_Exit	;AN000;
 23859                                  
 23860                                  _$P_Val_Found:				;AN000;
 23861 000019BB B001                    	mov	al,_$P_Number		;AN000;
 23862 000019BD 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 23863 000019C0 EB0A                    	jmp	short _$P_Value_Exit	;AN000;
 23864                                  
 23865                                  _$P_Value03:				;AN000; / nval = 2
 23866                                  
 23867                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 23868                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 23869                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 23870                                  ;(tm07) inc	si			;AN000;
 23871                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 23872                                  ;	mov	ah,$P_Len_Range 	;AN000;
 23873                                  ;	mul	ah			;AN000;  Skip nrng field
 23874                                  ;	inc	ax			;AN000;
 23875                                  ;	add	si,ax			;AN000; si points to nnval
 23876                                  ;	mov	al,es:[si]		;AN000; get nnval
 23877                                  ;	inc	si			;AN000; si points to 1st item_tag
 23878                                  ;$P_Val03_Loop:				;AN000;
 23879                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 23880                                  ;	jne	$P_Val03_Next		;AN000;
 23881                                  ;
 23882                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 23883                                  ;	je	$P_Val_Found		;AN000;
 23884                                  ;
 23885                                  ;$P_Val03_Next:				;AN000;
 23886                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 23887                                  ;	dec	al			;AN000; loop nval times in AL
 23888                                  ;	jne	$P_Val03_Loop		;AN000;
 23889                                  ;					;AN000; / Not found
 23890                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 23891                                  ;	mov	al,$P_Number		;AN000;
 23892                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 23893                                  ;	jmp	short $P_Value_Exit	;AN000;
 23894                                  ;
 23895                                  ;ENDIF					;AN000;(of Val2SW)
 23896                                  ;$P_Value04:
 23897                                  
 23898                                  _$P_Value_Err:				;AN000;
 23899 000019C2 2EC706[3B14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23900                                  	;mov	al,_$P_String		;AN000; Set type
 23901                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23902                                  	; 14/08/2023
 23903 000019C9 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23904                                  _$P_Value_Exit:				;AN000;
 23905 000019CC E846FD                  	call	_$P_Fill_Result		;AN000;
 23906 000019CF 5E                      	pop	si			;AN000;
 23907 000019D0 5A                      	pop	dx			;AN000;
 23908 000019D1 59                      	pop	cx			;AN000;
 23909 000019D2 58                      	pop	ax			;AN000;
 23910 000019D3 C3                      	retn				;AN000;
 23911                                  
 23912                                  ; 28/03/2019 - Retro DOS v4.0
 23913                                  
 23914                                  ;***********************************************************************
 23915                                  ; _$P_Check_OVF
 23916                                  ;
 23917                                  ; Function:  Check if overflow is occurred with consideration of
 23918                                  ;	     signed or un-signed numeric value
 23919                                  ;
 23920                                  ; Input:     Flag register
 23921                                  ;
 23922                                  ; Output:    CY = 1  :	Overflow
 23923                                  ;
 23924                                  ; Vars:     _$P_Flags(R)
 23925                                  ;***********************************************************************
 23926                                  
 23927                                  	; 26/10/2022
 23928                                  _$P_Check_OVF:
 23929 000019D4 9C                      	pushf				;AN000;
 23930 000019D5 2EF606[4714]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 23931 000019DB 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 23932                                  
 23933 000019DD 9D                      	popf				;AN000; by the CY bit
 23934 000019DE C3                      	retn				;AN000;
 23935                                  
 23936                                  _$P_COVF:				;AN000;
 23937 000019DF 9D                      	popf				;AN000; else,
 23938 000019E0 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 23939                                  
 23940 000019E2 F8                      	clc				;AN000; indicate it with CY bit
 23941 000019E3 C3                      	retn				;AN000; CY=0 means no overflow
 23942                                  
 23943                                  _$P_COVF00:				;AN000;
 23944                                  _$P_0099Err: ; 14/08/2023
 23945 000019E4 F9                      	stc				;AN000; and CY=1 means overflow
 23946                                  _$P_0099Err2: ; 14/08/2023
 23947 000019E5 C3                      	retn				;AN000;
 23948                                  
 23949                                  ;***********************************************************************
 23950                                  ; _$P_0099;
 23951                                  ;
 23952                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 23953                                  ;
 23954                                  ; Input:     AL = character code
 23955                                  ;
 23956                                  ; Output:    CY = 1 : AL is not number
 23957                                  ;	     CY = 0 : AL contains binary value
 23958                                  ;***********************************************************************
 23959                                  
 23960                                  _$P_0099:
 23961 000019E6 3C30                    	cmp	al,"0"                  ;AN000;
 23962                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23963                                  	; 12/12/2022
 23964 000019E8 72FB                    	jb	short _$P_0099Err2  ; cf=1
 23965                                  
 23966 000019EA 3C39                    	cmp	al,"9"                  ;AN000;
 23967 000019EC 77F6                    	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23968                                  
 23969 000019EE 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 23970                                  	; 12/12/2022
 23971                                  	; cf=0	
 23972                                  	;clc				;AN000; indicate no error
 23973 000019F0 C3                      	retn				;AN000;
 23974                                  
 23975                                  	; 14/08/2023
 23976                                  ;_$P_0099Err:				;AN000;
 23977                                  ;	stc				;AN000; indicate error
 23978                                  ;_$P_0099Err2: ; 12/12/2022	
 23979                                  ;	retn				;AN000;
 23980                                  
 23981                                  ;***********************************************************************
 23982                                  ; _$P_Simple_String
 23983                                  ;
 23984                                  ; Function:  See value list for the simple string
 23985                                  ;	     and make result buffer.
 23986                                  ;
 23987                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23988                                  ;	     ES:BX -> CONTROL block
 23989                                  ;
 23990                                  ; Output:    None
 23991                                  ;
 23992                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 23993                                  ;
 23994                                  ; Vars: _$P_RC(W)
 23995                                  ;***********************************************************************
 23996                                  
 23997                                  _$P_Simple_String:
 23998 000019F1 50                      	push	ax			;AN000;
 23999 000019F2 53                      	push	bx			;AN000;
 24000 000019F3 52                      	push	dx			;AN000;
 24001 000019F4 57                      	push	di			;AN000;
 24002 000019F5 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 24003 000019F9 268A05                  	mov	al,[es:di]		;AN000; get nval
 24004 000019FC 08C0                    	or	al,al			;AN000; no value list ?
 24005 000019FE 7504                    	jnz	short _$P_Sim00		;AN000; then
 24006                                  
 24007 00001A00 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24008 00001A02 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 24009                                  
 24010                                  _$P_Sim00:				;AN000;
 24011                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 24012 00001A04 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 24013 00001A06 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 24014                                  
 24015 00001A08 47                      	inc	di			;AN000;
 24016 00001A09 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 24017 00001A0C B409                    	mov	ah,_$P_Len_Range 	;AN000;
 24018 00001A0E F6E4                    	mul	ah			;AN000; Skip nrng field
 24019 00001A10 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 24020 00001A11 01C7                    	add	di,ax			;AN000; di points to nnval
 24021 00001A13 268A05                  	mov	al,[es:di]		;AN000; get nnval
 24022 00001A16 B405                    	mov	ah,_$P_Len_Value 	;AN000;
 24023 00001A18 F6E4                    	mul	ah			;AN000; Skip nnval field
 24024 00001A1A 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 24025 00001A1B 01C7                    	add	di,ax			;AN000; di points to nstrval
 24026 00001A1D 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 24027 00001A20 47                      	inc	di			;AC035; add '2' to
 24028 00001A21 47                      	inc	di			;AC035;  DI reg
 24029                                  					;AN000; di points to 1st string in list
 24030                                  _$P_Sim_Loop:				;AN000;
 24031 00001A22 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 24032 00001A25 E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 24033 00001A28 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 24034                                  
 24035 00001A2A 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 24036 00001A2D FEC8                    	dec	al			;AN000; loop nstval times in AL
 24037 00001A2F 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 24038                                  					;AN000; / Not found
 24039 00001A31 2EC706[3B14]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 24040 00001A38 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24041 00001A3A EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 24042                                  
 24043                                  _$P_Sim_Found:				;AN000;
 24044 00001A3C 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 24045 00001A40 B002                    	mov	al,_$P_List_Idx		;AN000;
 24046 00001A42 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 24047 00001A45 EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 24048                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 24049                                  _$P_Sim01:				;AN000;
 24050 00001A47 2EC706[3B14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24051 00001A4E B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24052                                  _$P_Sim_Exit:				;AN000;
 24053 00001A50 B003                    	mov	al,_$P_String		;AN000; Set type
 24054                                  _$P_Sim_Exit0:				;AN000;
 24055 00001A52 E8C0FC                  	call	_$P_Fill_Result		;AN000;
 24056 00001A55 5F                      	pop	di			;AN000;
 24057 00001A56 5A                      	pop	dx			;AN000;
 24058 00001A57 5B                      	pop	bx			;AN000;
 24059 00001A58 58                      	pop	ax			;AN000;
 24060 00001A59 C3                      	retn				;AN000;
 24061                                  
 24062                                  ;***********************************************************************
 24063                                  ; _$P_String_Comp:
 24064                                  ;
 24065                                  ; Function:  Compare two string
 24066                                  ;
 24067                                  ; Input:     cs:SI -> 1st string
 24068                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 24069                                  ;	     ES:BX -> CONTROL block
 24070                                  ;
 24071                                  ; Output:    CY = 1 if not match
 24072                                  ;
 24073                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 24074                                  ;
 24075                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 24076                                  ;***********************************************************************
 24077                                  
 24078                                  _$P_String_Comp:
 24079 00001A5A 50                      	push	ax			;AN000;
 24080 00001A5B 55                      	push	bp			;AN000;
 24081 00001A5C 52                      	push	dx			;AN000;
 24082 00001A5D 56                      	push	si			;AN000;
 24083 00001A5E B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 24084                                  _$P_SCOM_Loop:				;AN000;
 24085 00001A60 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 24086 00001A63 E81602                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 24087 00001A66 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 24088                                  
 24089 00001A68 E820FE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 24090                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 24091 00001A6B 2EF606[4714]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 24092 00001A71 740D                    	jz	short _$P_SCOM04	;AN000;
 24093                                  
 24094 00001A73 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 24095 00001A75 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 24096                                  
 24097 00001A77 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 24098 00001A7C 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 24099                                  
 24100 00001A7E EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 24101                                  
 24102                                  _$P_SCOM04:				;AN000;
 24103 00001A80 2EF606[4714]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 24104 00001A86 740E                    	jz	short _$P_SCOM03	;AN000;
 24105                                  
 24106 00001A88 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 24107 00001A8A 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 24108                                  
 24109                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24110                                  	;cmp	byte [es:bp+0],_$P_NULL
 24111                                  	; 11/12/2022
 24112 00001A8C 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 24113 00001A91 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 24114                                  
 24115                                  _$P_SCOM05:				;AN000;   found a match
 24116 00001A93 46                      	inc	si			;AN000; si points to just after "=" or ":"
 24117 00001A94 EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 24118                                  
 24119                                  _$P_SCOM03:				;AN000;
 24120                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 24121                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24122                                  	;cmp	al,[es:bp+0]
 24123                                  	; 11/12/2022
 24124 00001A96 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 24125 00001A9A 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 24126                                  
 24127 00001A9C 08C0                    	or	al,al			;AN000; end of line
 24128 00001A9E 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 24129                                  
 24130                                  	; 12/12/2022
 24131                                  	;inc	si			;AN000; update operand pointer
 24132                                  	;inc	bp			;AN000;    and synonym pointer
 24133                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24134 00001AA0 EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 24135                                  
 24136                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 24137                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24138                                  	;cmp	al,[es:bp+0]
 24139                                  	; 11/12/2022
 24140 00001AA2 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 24141 00001AA6 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 24142                                  
 24143 00001AA8 46                      	inc	si			;AN000; else, load next byte
 24144 00001AA9 2E8A04                  	mov	al,[cs:si]		;AN000; and
 24145 00001AAC 45                      	inc	bp			;AN000;
 24146                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24147                                  	;cmp	al,[es:bp+0]
 24148                                  	; 11/12/2022
 24149 00001AAD 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 24150 00001AB1 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 24151                                  
 24152                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24153                                  	; 12/12/2022
 24154                                  _$P_SCOM01:
 24155 00001AB3 46                      	inc	si			;AN000; else update operand pointer
 24156 00001AB4 45                      	inc	bp			;AN000; 		and synonym pointer
 24157                                  ;_$P_SCOM01:				;AN000;
 24158 00001AB5 EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 24159                                  
 24160                                  _$P_SCOM_Differ0:			;AN000;
 24161                                  ;IF SwSW				;AN000;(tm10)
 24162 00001AB7 2EF606[4714]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 24163 00001ABD 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 24164                                  
 24165                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24166                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 24167                                  	; 12/12/2022
 24168 00001ABF 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 24169 00001AC4 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 24170                                  
 24171                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24172                                  	;cmp	byte [es:bp+0],_$P_NULL
 24173                                  	; 11/12/2022
 24174 00001AC6 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 24175                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 24176 00001ACB 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 24177                                  
 24178                                  _$P_not_applicable:			;AN000;(tm10)
 24179                                  ;ENDIF					;AN000;(tm10)
 24180                                  
 24181                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24182                                  					;AN000; ignore colon option specified ?
 24183                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 24184                                  	; 12/12/2022
 24185 00001ACD 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24186                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24187                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 24188 00001AD1 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 24189                                  
 24190 00001AD3 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 24191 00001AD5 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 24192                                  
 24193                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24194                                  	;cmp	byte [es:bp+0],_$P_NULL
 24195                                  	; 11/12/2022
 24196 00001AD7 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 24197 00001ADC 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 24198                                  
 24199 00001ADE EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 24200                                  
 24201                                  _$P_SCOM02:				;AN000;
 24202 00001AE0 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 24203 00001AE2 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 24204                                  
 24205                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24206                                  	;cmp	byte [es:bp+0],_$P_Colon
 24207                                  	; 11/12/2022
 24208 00001AE4 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 24209 00001AE9 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 24210                                  
 24211                                  _$P_SCOM_Differ: 			;AN000;
 24212 00001AEB F9                      	stc				;AN000; indicate not found
 24213 00001AEC EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 24214                                  
 24215                                  _$P_SCOM_Same:				;AN000;
 24216                                  	; 12/12/2022
 24217                                  	; cf=0
 24218 00001AEE 2E8936[4A14]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 24219                                  	; 12/12/2022
 24220                                  	;clc				;AN000; indicate found
 24221                                  _$P_SCOM_Exit:				;AN000;
 24222 00001AF3 5E                      	pop	si			;AN000;
 24223 00001AF4 5A                      	pop	dx			;AN000;
 24224 00001AF5 5D                      	pop	bp			;AN000;
 24225 00001AF6 58                      	pop	ax			;AN000;
 24226 00001AF7 C3                      	retn
 24227                                  
 24228                                  ; 30/03/2019
 24229                                  
 24230                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 24231                                  
 24232                                  ;***********************************************************************
 24233                                  ; _$P_File_Format;
 24234                                  ;
 24235                                  ; Function:  Check if the input string is valid file spec format.
 24236                                  ;	     And set the result buffer.
 24237                                  ;
 24238                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24239                                  ;	     ES:BX -> CONTROL block
 24240                                  ;
 24241                                  ; Output:    None
 24242                                  ;
 24243                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 24244                                  ;
 24245                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 24246                                  ;	_$P_SaveSI_Cmpx(R)
 24247                                  ;***********************************************************************
 24248                                  
 24249                                  _$P_File_Format:
 24250 00001AF8 50                      	push	ax			;AN000;
 24251 00001AF9 57                      	push	di			;AN000;
 24252 00001AFA 56                      	push	si			;AN000;
 24253 00001AFB 2E8B3E[4814]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 24254                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 24255 00001B00 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 24256 00001B03 08C0                    	or	al,al			;AN000; end of line ?
 24257 00001B05 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 24258                                  
 24259 00001B07 E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 24260 00001B0A 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 24261                                  
 24262 00001B0C 2EC606[DE14]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 24263                                  					;AN033;AC034;; set error flag- bad char.
 24264 00001B12 5E                      	pop	si			;AN033;
 24265 00001B13 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 24266 00001B17 5F                      	pop	di			;AN033;
 24267 00001B18 EB3E                    	jmp	short _$P_FileF02	;AN033;
 24268                                  
 24269                                  _$P_FileF_Err:				;AN000;
 24270 00001B1A 5E                      	pop	si			;AN000;
 24271 00001B1B 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 24272 00001B1F 5F                      	pop	di			;AN000;
 24273                                  
 24274                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 24275                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 24276                                  	; 12/12/2022
 24277 00001B20 26F60701                	test	byte [es:bx],_$P_Optional
 24278                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24279                                  	;test	word [es:bx],_$P_Optional
 24280 00001B24 7532                    	jnz	short _$P_FileF02	;AN000;
 24281                                  
 24282 00001B26 2EC706[3B14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 24283 00001B2D EB29                    	jmp	short _$P_FileF02	;AN000;
 24284                                  
 24285                                  _$P_FileF03:				;AN000;
 24286 00001B2F 58                      	pop	ax			;AN000; discard save si
 24287 00001B30 56                      	push	si			;AN000; save new si
 24288                                  _$P_FileF_Loop1: 			;AN000;
 24289 00001B31 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 24290 00001B34 08C0                    	or	al,al			;AN000; end of line ?
 24291 00001B36 741E                    	jz	short _$P_FileF_RLT	;AN000;
 24292                                  
 24293 00001B38 E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 24294 00001B3B 740B                    	je	short _$P_FileF00	;AN000;
 24295                                  
 24296 00001B3D E83C01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 24297 00001B40 7302                    	jnc	short _$P_FileF01	;AN000;
 24298 00001B42 47                      	inc	di			;AN000; if yes, skip next byte
 24299 00001B43 46                      	inc	si			;AN000;
 24300                                  _$P_FileF01:				;AN000;
 24301 00001B44 47                      	inc	di			;AN000;
 24302 00001B45 46                      	inc	si			;AN000;
 24303 00001B46 EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 24304                                  ;
 24305                                  _$P_FileF00:				;AN000;
 24306 00001B48 2EA2[4114]              	mov	[cs:_$P_Terminator],al	;AC034;
 24307 00001B4C 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 24308 00001B50 47                      	inc	di			;AN000;
 24309 00001B51 2E893E[3D14]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 24310                                  _$P_FileF_RLT:				;AN000;
 24311 00001B56 5E                      	pop	si			;AN000;
 24312 00001B57 5F                      	pop	di			;AN000;
 24313                                  _$P_FileF02:				;AN000;
 24314 00001B58 58                      	pop	ax			;AN000; (tm14)
 24315                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 24316                                  	; 14/08/2023
 24317 00001B59 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 24318 00001B5C 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 24319                                  
 24320 00001B5E 50                      	push	ax			;AN000;  (tm14)
 24321                                  	;mov	ah,_$P_No_Tag		;AN000; set
 24322                                  	;mov	al,_$P_File_Spec 	;AN000; result
 24323                                  	; 14/08/2023
 24324 00001B5F B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 24325                                  					      ; set result
 24326 00001B62 E8B0FB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 24327 00001B65 58                      	pop	ax			;AN000;
 24328                                  
 24329                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 24330 00001B66 C3                      	retn				;AN000;
 24331                                  
 24332                                  ;***********************************************************************
 24333                                  ; _$P_FileSp_Chk
 24334                                  ;
 24335                                  ; Function:  Check if the input byte is one of file special characters
 24336                                  ;
 24337                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24338                                  ;	     AL = character code to be examineed
 24339                                  ;
 24340                                  ; Output:    ZF = 1 , AL is one of special characters
 24341                                  ;***********************************************************************
 24342                                  
 24343                                  _$P_FileSp_Chk:
 24344 00001B67 53                      	push	bx			;AN000;
 24345 00001B68 51                      	push	cx			;AN000;
 24346                                  	;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 24347 00001B69 8D1E[D514]              	lea	bx,[_$P_FileSp_Char]
 24348 00001B6D B90900                  	mov	cx,_$P_FileSp_Len	;AN000; load length of it
 24349                                  _$P_FileSp_Loop: 			;AN000;
 24350 00001B70 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 24351 00001B73 7404                    	je	short _$P_FileSp_Exit	;AN000;
 24352                                  
 24353 00001B75 43                      	inc	bx			;AN000;
 24354 00001B76 E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 24355                                  
 24356 00001B78 41                      	inc	cx			;AN000; reset ZF
 24357                                  _$P_FileSp_Exit: 			;AN000;
 24358 00001B79 59                      	pop	cx			;AN000;
 24359 00001B7A 5B                      	pop	bx			;AN000;
 24360 00001B7B C3                      	retn
 24361                                  
 24362                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 24363                                  
 24364                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 24365                                  
 24366                                  ;***********************************************************************
 24367                                  ; _$P_Drive_Format;
 24368                                  ;
 24369                                  ; Function:  Check if the input string is valid drive only format.
 24370                                  ;	     And set the result buffer.
 24371                                  ;
 24372                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24373                                  ;	     ES:BX -> CONTROL block
 24374                                  ;
 24375                                  ; Output:    None
 24376                                  ;
 24377                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 24378                                  ;
 24379                                  ; Vars: _$P_RC(W)
 24380                                  ;***********************************************************************
 24381                                  
 24382                                  _$P_Drive_Format:
 24383 00001B7C 50                      	push	ax			;AN000;
 24384 00001B7D 52                      	push	dx			;AN000;
 24385 00001B7E 2E8A04                  	mov	al,[cs:si]		;AN000;
 24386 00001B81 08C0                    	or	al,al			;AN000; if null string
 24387 00001B83 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 24388                                  
 24389 00001B85 E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 24390 00001B88 722A                    	jc	short _$P_Drv_Err	;AN000;
 24391                                  
 24392 00001B8A 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 24393 00001B8F 740D                    	je	short _$P_DrvF00	;AN000;
 24394                                  
 24395                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24396                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 24397                                  	; 12/12/2022
 24398 00001B91 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24399                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24400                                  	;test	word [es:bx],_$P_Ig_Colon
 24401 00001B95 741D                    	jz	short _$P_Drv_Err	;AN000;
 24402                                  
 24403 00001B97 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 24404 00001B9C 7516                    	jne	short _$P_Drv_Err	;AN000;
 24405                                  
 24406                                  _$P_DrvF00:				;AN000;
 24407 00001B9E 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 24408 00001BA0 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 24409 00001BA2 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 24410                                  
 24411 00001BA4 3C7A                    	cmp	al,"z"                  ;AN000; "a" - "z"
 24412 00001BA6 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 24413                                  
 24414 00001BA8 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 24415 00001BAA 88C2                    	mov	dl,al			;AN000; set
 24416                                  	;mov	ah,_$P_No_Tag		;AN000; result
 24417                                  	;mov	al,_$P_Drive		;AN000; buffer
 24418                                  	; 08/07/2023
 24419 00001BAC B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 24420                                  					      ; set result buffer
 24421 00001BAF E863FB                  	call	_$P_Fill_Result		;AN000; to drive
 24422 00001BB2 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 24423                                  
 24424                                  _$P_Drv_Err:				;AN000;
 24425 00001BB4 2EC706[3B14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24426                                  _$P_Drv_Exit:				;AN000;
 24427 00001BBB 5A                      	pop	dx			;AN000;
 24428 00001BBC 58                      	pop	ax			;AN000;
 24429 00001BBD C3                      	retn				;AN000;
 24430                                  
 24431                                  ;ENDIF					;AN000;(of DrvSW)
 24432                                  
 24433                                  ;***********************************************************************
 24434                                  ; _$P_Skip_Delim;
 24435                                  ;
 24436                                  ; Function: Skip delimiters specified in the PARMS list, white space
 24437                                  ;	    and comma.
 24438                                  ;
 24439                                  ; Input:    DS:SI -> Command String
 24440                                  ;	    ES:DI -> Parameter List
 24441                                  ;
 24442                                  ; Output:   CY = 1 if the end of line encounterd
 24443                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 24444                                  ;	    AL = Last examineed character
 24445                                  ;
 24446                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 24447                                  ;
 24448                                  ; Vars:     _$P_Flags(R)
 24449                                  ;***********************************************************************
 24450                                  
 24451                                  _$P_Skip_Delim:
 24452                                  _$P_Skip_Delim_Loop:			;AN000;
 24453 00001BBE AC                      	lodsb				;AN000;
 24454 00001BBF E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 24455 00001BC2 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 24456                                  
 24457 00001BC4 E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 24458 00001BC7 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 24459                                  
 24460 00001BC9 2EF606[4714]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 24461 00001BCF 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 24462                                  
 24463 00001BD1 2EF606[4714]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 24464                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 24465                                  	; 14/08/2023
 24466                                  	; cf=0
 24467 00001BD7 7505                    	jnz	short _$P_Skip_Delim_Exit
 24468 00001BD9 C3                      	retn
 24469                                  
 24470                                  	;dec	si			;AN000; backup si for next call (tm08)
 24471                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 24472                                  	; 12/12/2022
 24473                                  	; cf=0
 24474                                  	; 14/08/2023
 24475                                  	;jmp	short _$P_Skip_Delim_Exit
 24476                                  
 24477                                  _$P_Skip_Delim_CY:			;AN000;
 24478 00001BDA F9                      	stc				;AN000; indicate EOL
 24479 00001BDB EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 24480                                  
 24481                                  _$P_Skip_Delim_NCY:			;AN000;
 24482 00001BDD F8                      	clc				;AN000; indicate non delim
 24483                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 24484 00001BDE 4E                      	dec	si			;AN000;  backup index pointer
 24485                                  	; 14/08/2023
 24486                                  	; 12/12/2022
 24487                                  ;_$P_Exit_At_Extra:	 ; cf=0
 24488 00001BDF C3                      	retn				;AN000;
 24489                                  
 24490                                  	; 12/12/2022
 24491                                  ;_$P_Exit_At_Extra:			;AN000;
 24492                                  	;clc				;AN000; indicate extra delim
 24493                                  	;retn				;AN000;
 24494                                  
 24495                                  ;***********************************************************************
 24496                                  ; _$P_Chk_EOL;
 24497                                  ;
 24498                                  ; Function: Check if AL is one of End of Line characters.
 24499                                  ;
 24500                                  ; Input:    AL = character code
 24501                                  ;	    ES:DI -> Parameter List
 24502                                  ;
 24503                                  ; Output:   ZF = 1 if one of End of Line characters
 24504                                  ;**********************************************************************
 24505                                  
 24506                                  _$P_Chk_EOL:
 24507 00001BE0 53                      	push	bx			;AN000;
 24508 00001BE1 51                      	push	cx			;AN000;
 24509 00001BE2 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 24510 00001BE4 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24511                                  
 24512 00001BE6 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 24513 00001BE8 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24514                                  
 24515                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 24516 00001BEA 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 24517 00001BEC 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24518                                  ;ENDIF					;AN028;
 24519                                  
 24520 00001BEE 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 24521                                  					;AN000; EOL character specified ?
 24522 00001BF3 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 24523                                  
 24524 00001BF5 31DB                    	xor	bx,bx			;AN000;
 24525 00001BF7 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 24526                                  					;AN000; get length of delimiter list
 24527 00001BFB 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 24528                                  	; 14/08/2023
 24529 00001BFE 31C9                    	xor	cx,cx ; *
 24530 00001C00 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 24531 00001C04 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 24532                                  	; 14/08/2023
 24533                                  	;;xor	cx,cx			;AN000; Get number of extra character
 24534                                  	;xor	ch,ch ; *
 24535 00001C06 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 24536                                  _$P_Chk_EOL_Loop:			;AN000;
 24537 00001C09 43                      	inc	bx			;AN000;
 24538 00001C0A 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 24539 00001C0D 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24540 00001C0F E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 24541                                  	; 14/08/2023
 24542                                  	; cx=0
 24543                                  _$P_Chk_EOL_NZ:				;AN000;
 24544                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 24545                                  	; 14/08/2023
 24546 00001C11 41                      	inc	cx  ; zf=0 (cx=1) ; *
 24547                                  _$P_Chk_EOL_Exit:			;AN000;
 24548 00001C12 59                      	pop	cx			;AN000;
 24549 00001C13 5B                      	pop	bx			;AN000;
 24550 00001C14 C3                      	retn
 24551                                  
 24552                                  ;***********************************************************************
 24553                                  ; _$P_Chk_Delim;
 24554                                  ;
 24555                                  ; Function: Check if AL is one of delimiter characters.
 24556                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 24557                                  ;	    blanks.
 24558                                  ;
 24559                                  ; Input:    AL = character code
 24560                                  ;	    DS:SI -> Next Character
 24561                                  ;	    ES:DI -> Parameter List
 24562                                  ;
 24563                                  ; Output:   ZF = 1 if one of delimiter characters
 24564                                  ;	    SI points to the next character
 24565                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 24566                                  ;***********************************************************************
 24567                                  
 24568                                  _$P_Chk_Delim:
 24569 00001C15 53                      	push	bx			;AN000;
 24570 00001C16 51                      	push	cx			;AN000;
 24571 00001C17 2EC606[4114]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 24572                                  					;AC034; Assume terminated by space
 24573                                  	;and	byte [cs:_$P_Flags20,0DFh
 24574 00001C1D 2E8026[4714]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 24575 00001C23 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 24576 00001C25 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24577                                  
 24578 00001C27 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 24579 00001C29 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24580                                  
 24581 00001C2B 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 24582 00001C2D 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24583                                  
 24584                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 24585                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 24586                                  ;        Erdogan Tan - 14/08/2023
 24587                                  ;_$P_Chk_Delim00:
 24588                                  %if 0
 24589                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24590                                  _$P_Chk_Delim00: 			;AN000;
 24591                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 24592                                  	jne	short _$P_Chk_Delim01	;AN000;
 24593                                  
 24594                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 24595                                  	jne	short _$P_Chk_Delim01	;AN000;
 24596                                  
 24597                                  	mov	al,_$P_Space		;AN000;
 24598                                  	inc	si			;AN000; make si point to next character
 24599                                  	cmp	al,al			;AN000; Set ZF
 24600                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24601                                  %endif
 24602                                  
 24603                                  _$P_Chk_Delim01: 			;AN000;
 24604 00001C2F 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 24605                                  					;AN000; delimiter character specified ?
 24606 00001C34 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 24607                                  
 24608                                  	;xor	cx,cx			;AN000;
 24609 00001C36 30ED                    	xor	ch,ch
 24610                                  	;mov	cl,[es:di+3]
 24611 00001C38 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 24612                                  					;AN000; get length of delimiter list
 24613                                  	;or	cx,cx			;AN000; No extra Delim character ?
 24614                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 24615                                  	; 14/08/2023
 24616 00001C3C E30B                    	jcxz	_$P_Chk_Delim_NZ
 24617                                  
 24618 00001C3E BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 24619                                  _$P_Chk_Delim_Loop:			;AN000;
 24620 00001C41 43                      	inc	bx			;AN000;
 24621 00001C42 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 24622 00001C45 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24623                                  
 24624 00001C47 E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 24625                                  
 24626                                  _$P_Chk_Delim_NZ:			;AN000;
 24627                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 24628                                  	; 14/08/2023
 24629                                  	; cx=0 here
 24630 00001C49 41                      	inc	cx ; cx=1, zf=0
 24631                                  _$P_Chk_Delim_Exit:			;AN000;
 24632                                  _$P_ChkDfin:				;AN000;
 24633 00001C4A 59                      	pop	cx			;AN000;
 24634 00001C4B 5B                      	pop	bx			;AN000;
 24635 00001C4C C3                      	retn				;AN000;
 24636                                  
 24637                                  _$P_Chk_Delim_Exit0:			;AN000;
 24638 00001C4D 2EA2[4114]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 24639 00001C51 2EF606[4714]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 24640 00001C57 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 24641                                  
 24642 00001C59 2E800E[4714]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 24643                                  					;AC034; flag terminated extra delimiter or comma
 24644                                  _$P_No_Set_Extra:			;AN027;
 24645 00001C5F 38C0                    	cmp	al,al			;AN000; set ZF
 24646 00001C61 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24647                                  
 24648                                  
 24649                                  ;***********************************************************************
 24650                                  ; _$P_Chk_Switch;
 24651                                  ;
 24652                                  ; Function: Check if AL is the switch character not in first position of
 24653                                  ;	    _$P_STRING_BUF
 24654                                  ;
 24655                                  ; Input:    AL = character code
 24656                                  ;	    BX = current pointer within _$P_String_Buf
 24657                                  ;	    SI =>next char on command line (following the one in AL)
 24658                                  ;
 24659                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 24660                                  ;		 position, and has no chance of being part of a date string,
 24661                                  ;		 i.e. should be treated as a delimiter.
 24662                                  
 24663                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 24664                                  ;		 position, or is a slash but may be part of a date string, i.e.
 24665                                  ;		 should not be treated as a delimiter.
 24666                                  ;
 24667                                  ; Vars:  _$P_Terminator(W)
 24668                                  
 24669                                  ; Use:	 _$P_0099
 24670                                  ;***********************************************************************
 24671                                  
 24672                                  _$P_Chk_Switch:
 24673                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 24674                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 24675                                  	; 14/08/2023
 24676 00001C63 BD[5014]                	mov	bp,_$P_STRING_BUF
 24677                                  
 24678                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 24679 00001C66 39EB                    	cmp	bx,bp			;AN000;
 24680 00001C68 7406                    	je	short _$P_STRUC_L2	;AN000;
 24681                                  
 24682                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 24683 00001C6A 3C2F                    	cmp	al,_$P_Switch		;AN000;
 24684 00001C6C 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 24685                                  
 24686 00001C6E F9                      	stc				;AN020;not in first position and is slash
 24687                                  	;jmp     short _$P_STRUC_L1	;AN000;
 24688                                  	; 12/12/2022
 24689 00001C6F C3                      	retn
 24690                                  
 24691                                  ; 12/12/2022
 24692                                  ;_$P_STRUC_L5:				;AN000;
 24693                                  ;	CLC				;AN020;not a slash
 24694                                  ;;	    .ENDIF			;AN020;
 24695                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 24696                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 24697                                  
 24698                                  _$P_STRUC_L2:				;AN000;
 24699                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;
 24700 00001C70 3C2F                    	cmp     al,_$P_Switch		;AN000;
 24701 00001C72 7506                    	jne	short _$P_STRUC_L12	;AN000;
 24702                                  
 24703 00001C74 2E800E[4714]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020;AC034;;could be valid switch, first char and is slash
 24704                                  ;	    .ENDIF			;AN020;
 24705                                  
 24706                                  	; 12/12/2022
 24707                                  	; cf=0
 24708                                  	;retn
 24709                                  
 24710                                  _$P_STRUC_L5:
 24711                                  	; 12/12/2022
 24712                                  _$P_STRUC_L12:				;AN000;
 24713 00001C7A F8                      	clc				;AN020;CF=0 indicating first char
 24714                                  ;	.ENDIF				;AN020;
 24715                                  _$P_STRUC_L1:				;AN000;
 24716 00001C7B C3                      	retn				;AN000;
 24717                                  
 24718                                  ;**************************************************************************
 24719                                  ; _$P_Chk_DBCS:
 24720                                  ;
 24721                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 24722                                  ;
 24723                                  ;  Input:
 24724                                  ;	  AL	= Code to be examineed
 24725                                  ;
 24726                                  ;  Output:
 24727                                  ;	  If CF is on then a lead byte of DBCS
 24728                                  ;
 24729                                  ; Use: INT 21h w/AH=63
 24730                                  ;
 24731                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 24732                                  ;***************************************************************************
 24733                                  
 24734                                  _$P_Chk_DBCS:
 24735 00001C7C 1E                      	push	ds			;AN000;
 24736 00001C7D 56                      	push	si			;AN000;
 24737 00001C7E 53                      	push	bx			;AN000; (tm11)
 24738                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 24739                                  	;jne	short _$P_DBCS00	;AN000;
 24740                                  	; 14/08/2023
 24741 00001C7F 2E8B36[4414]            	mov	si,[cs:_$P_DBCSEV_SEG]
 24742 00001C84 21F6                    	and	si,si ; 0 ?
 24743 00001C86 7525                    	jnz	short _$P_DBCS00 ; already set
 24744 00001C88 50                      	push	ax			;AN000;
 24745 00001C89 1E                      	push	ds			;AN000; (tm11)
 24746 00001C8A 51                      	push	cx			;AN000;
 24747 00001C8B 52                      	push	dx			;AN000;
 24748 00001C8C 57                      	push	di			;AN000;
 24749 00001C8D 55                      	push	bp			;AN000;
 24750 00001C8E 06                      	push	es			;AN000;
 24751                                  	; si = 0 ; 14/08/2023
 24752                                  	;xor	si,si			;AN000;
 24753 00001C8F 8EDE                    	mov	ds,si ; 0		;AN000;
 24754 00001C91 B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 24755 00001C94 CD21                    	int	21h			;AN000;
 24756                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 24757 00001C96 8CDB                    	mov	bx,ds			;AN000; (tm11)
 24758 00001C98 09DB                    	or	bx,bx			;AN000; (tm11)
 24759 00001C9A 07                      	pop	es			;AN000;
 24760 00001C9B 5D                      	pop	bp			;AN000;
 24761 00001C9C 5F                      	pop	di			;AN000;
 24762 00001C9D 5A                      	pop	dx			;AN000;
 24763 00001C9E 59                      	pop	cx			;AN000;
 24764 00001C9F 1F                      	pop	ds			;AN000; (tm11)
 24765 00001CA0 58                      	pop	ax			;AN000;
 24766 00001CA1 7424                    	jz	short _$P_NON_DBCS	;AN000;
 24767                                  _$P_DBCS02:				;AN000;
 24768 00001CA3 2E8936[4214]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 24769 00001CA8 2E891E[4414]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 24770                                  _$P_DBCS00:				;AN000;
 24771                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 24772                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 24773                                  	; 14/08/2023
 24774 00001CAD 2EC536[4214]            	lds	si,[cs:_$P_DBCSEV_OFF]
 24775                                  _$P_DBCS_LOOP:				;AN000;
 24776 00001CB2 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 24777 00001CB5 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 24778 00001CB7 3A04                    	cmp	al,[si] 		;AN000;
 24779 00001CB9 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 24780 00001CBB 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 24781 00001CBE 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 24782 00001CC0 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 24783 00001CC1 EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 24784                                  _$P_DBCS01:				;AN000;
 24785 00001CC3 46                      	inc	si			;AC035; add '2' to
 24786 00001CC4 46                      	inc	si			;AC035;  SI reg
 24787                                  					;AN000; get next vector
 24788 00001CC5 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 24789                                  _$P_NON_DBCS:				;AN000;
 24790                                  	; 12/12/2022
 24791                                  	; cf=0
 24792                                  	;clc				;AN000; indicate SBCS
 24793                                  _$P_DBCS_EXIT:				;AN000;
 24794 00001CC7 5B                      	pop	bx			;AN000; (tm11)
 24795 00001CC8 5E                      	pop	si			;AN000;
 24796 00001CC9 1F                      	pop	ds			;AN000;
 24797 00001CCA C3                      	retn				;AN000;
 24798                                  
 24799                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 24800                                  ; ======================================================================
 24801                                  ; 27/03/2019 - Retro DOS v4.0
 24802                                  
 24803                                  ;control block definitions for parser.
 24804                                  ;-----------------------------------------------------------------------
 24805                                  ; buffer = [n | n,m] {/e}
 24806                                  
 24807                                  ; 30/03/2019
 24808                                  
 24809                                  struc p_parms
 24810 00000000 ????                    	resw	1	; dw ?
 24811 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 24812 00000003 ??                      	resb	1	; db 1	; length is 1
 24813 00000004 ??                      	resb 	1	; db ';' ; delimiter
 24814                                  .size:
 24815                                  endstruc
 24816                                  
 24817                                  struc p_pos
 24818 00000000 ????                    	resw	1	; dw ?	; numeric value??
 24819 00000002 ????                    	resw	1	; dw ?	; function
 24820 00000004 ????                    	resw	1	; dw ?	; result value buffer
 24821                                  
 24822                                  ; note: by defining result_val before this structure, we could remove
 24823                                  ;  the "result_val" from every structure invocation
 24824                                  
 24825 00000006 ????                    	resw	1	; dw ?	; value list
 24826 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 24827                                  .size:
 24828                                  endstruc
 24829                                  
 24830                                  struc	p_range
 24831 00000000 ??                      	resb	1	; db 1	; range definition
 24832 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 24833 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 24834 00000003 ????????                	resd	1	; dd ?	; numeric min
 24835 00000007 ????????                	resd	1	; dd ?	; numeric max
 24836                                  .size:
 24837                                  endstruc
 24838                                  
 24839                                  ;-----------------------------------------------------------------------
 24840                                  
 24841                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24842                                  	; (SYSINIT:1F48h)
 24843                                  
 24844                                  ; buffer = [n | n,m] {/e}
 24845                                  
 24846                                  ;buf_parms p_parms <buf_parmsx>
 24847                                  buf_parms: 
 24848 00001CCB [D01C]                  	dw	buf_parmsx
 24849 00001CCD 01                      	db	1	; an extra delimiter list
 24850 00001CCE 01                      	db	1	; length is 1
 24851 00001CCF 3B                      	db	';'	; delimiter
 24852                                  
 24853                                  buf_parmsx:
 24854 00001CD0 0102[DA1C][EE1C]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 24855 00001CD6 01                      	db	1			; one switch
 24856 00001CD7 [021D]                  	dw	sw_x_ctrl
 24857 00001CD9 00                      	db	0			; no keywords
 24858                                  
 24859                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 24860                                  buf_pos1:
 24861 00001CDA 0080                    	dw	8000h	; numeric value??
 24862 00001CDC 0000                    	dw	0	; function
 24863 00001CDE [141D]                  	dw	result_val ; result value buffer	
 24864 00001CE0 [E31C]                  	dw	buf_range_1 ; value list
 24865 00001CE2 00                      	db	0  	; no switches/keywords
 24866                                  
 24867                                  ;buf_range_1 p_range <,,,1,99>		; M050
 24868                                  buf_range_1:
 24869 00001CE3 01                      	db	1	; range definition
 24870 00001CE4 01                      	db	1	; 1 definition of range
 24871 00001CE5 01                      	db	1	; item tag for this range
 24872 00001CE6 01000000                	dd	1	; numeric min
 24873 00001CEA 63000000                	dd	99	; numeric max
 24874                                  
 24875                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 24876                                  buf_pos2:
 24877 00001CEE 0180                    	dw	8001h
 24878 00001CF0 0000                    	dw	0
 24879 00001CF2 [141D]                  	dw	result_val	
 24880 00001CF4 [F71C]                  	dw	buf_range_2
 24881 00001CF6 00                      	db	0
 24882                                  
 24883                                  ;buf_range_2 p_range <,,,0,8>
 24884                                  buf_range_2:
 24885 00001CF7 01                      	db	1
 24886 00001CF8 01                      	db	1
 24887 00001CF9 01                      	db	1
 24888 00001CFA 00000000                	dd	0
 24889 00001CFE 08000000                	dd	8
 24890                                  
 24891                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 24892                                  sw_x_ctrl:
 24893 00001D02 0000                    	dw	0
 24894 00001D04 0000                    	dw	0
 24895 00001D06 [141D]                  	dw	result_val	
 24896 00001D08 [131D]                  	dw	noval
 24897 00001D0A 01                      	db	1	; 1 switch
 24898                                  	
 24899                                  switch_x:
 24900 00001D0B 2F5800                  	db	'/X',0		; M016
 24901                                  
 24902                                  p_buffers:
 24903 00001D0E 0000                    	dw	0	; local variables
 24904                                  p_h_buffers:
 24905 00001D10 0000                    	dw	0
 24906                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24907                                  p_buffer_slash_x:
 24908 00001D12 00                      	db	0 ; 31/03/2019
 24909                                  
 24910                                  ;-- common definitions -------------------------------------------------
 24911                                  
 24912 00001D13 00                      noval:	db	0
 24913                                  
 24914                                  result_val: 	;label	byte
 24915 00001D14 00                      	db	0		; type returned
 24916                                  result_val_itag:
 24917 00001D15 00                      	db	0		; item tag returned
 24918                                  result_val_swoff:
 24919 00001D16 0000                    	dw	0		; es:offset of the switch defined
 24920                                  rv_byte:	;label	byte
 24921 00001D18 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 24922                                  
 24923                                  ;-----------------------------------------------------------------------
 24924                                  
 24925                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24926                                  	; (SYSINIT:1F99h)
 24927                                  
 24928                                  ; break = [ on | off ]
 24929                                  
 24930                                  ;brk_parms p_parms  <brk_parmsx>
 24931                                  brk_parms:
 24932 00001D1C [211D]                  	dw	brk_parmsx
 24933 00001D1E 01                      	db	1	; an extra delimiter list
 24934 00001D1F 01                      	db	1	; length is 1
 24935 00001D20 3B                      	db	';'	; delimiter
 24936                                  
 24937                                  brk_parmsx:
 24938 00001D21 0101[271D]              	dw	101h,brk_pos	; min,max = 1 positional
 24939 00001D25 00                      	db	0		; no switches
 24940 00001D26 00                      	db	0		; no keywords
 24941                                  
 24942                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 24943                                  brk_pos:
 24944 00001D27 0020                    	dw	2000h
 24945 00001D29 0000                    	dw	0
 24946 00001D2B [141D]                  	dw	result_val	
 24947 00001D2D [301D]                  	dw	on_off_string
 24948 00001D2F 00                      	db	0
 24949                                  
 24950                                  on_off_string:	;label	byte
 24951 00001D30 03                      	db	3		; signals that there is a string choice
 24952 00001D31 00                      	db	0		; no range definition
 24953 00001D32 00                      	db	0		; no numeric values choice
 24954 00001D33 02                      	db	2		; 2 strings for choice
 24955 00001D34 01                      	db	1		; the 1st string tag
 24956 00001D35 [3A1D]                  	dw	on_string
 24957 00001D37 02                      	db	2		; the 2nd string tag
 24958 00001D38 [3D1D]                  	dw	off_string
 24959                                  
 24960                                  on_string:
 24961 00001D3A 4F4E00                  	db	"ON",0
 24962                                  off_string:
 24963 00001D3D 4F464600                	db	"OFF",0
 24964                                  
 24965                                  p_ctrl_break:
 24966 00001D41 00                      	db	0	; local variable
 24967                                  
 24968                                  ;-----------------------------------------------------------------------
 24969                                  
 24970                                  	; 27/10/2022
 24971                                  
 24972                                  ; country = n {m {path}}
 24973                                  ; or
 24974                                  ; country = n,,path
 24975                                  
 24976                                  ;cntry_parms p_parms <cntry_parmsx>
 24977                                  cntry_parms:
 24978 00001D42 [471D]                  	dw	cntry_parmsx
 24979 00001D44 01                      	db	1
 24980 00001D45 01                      	db	1
 24981 00001D46 3B                      	db	';'
 24982                                  	
 24983                                  cntry_parmsx:
 24984 00001D47 0103[511D][651D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 24984 00001D4D [6E1D]             
 24985 00001D4F 00                      	db	0		; no switches
 24986 00001D50 00                      	db	0		; no keywords
 24987                                  
 24988                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 24989                                  cntry_pos1:
 24990 00001D51 0080                    	dw	8000h
 24991 00001D53 0000                    	dw	0
 24992 00001D55 [141D]                  	dw	result_val	
 24993 00001D57 [5A1D]                  	dw	cc_range
 24994 00001D59 00                      	db	0
 24995                                  
 24996                                  ;cc_range p_range <,,,1,999>
 24997                                  cc_range:
 24998 00001D5A 01                      	db	1
 24999 00001D5B 01                      	db	1
 25000 00001D5C 01                      	db	1
 25001 00001D5D 01000000                	dd	1
 25002 00001D61 E7030000                	dd	999
 25003                                  
 25004                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 25005                                  cntry_pos2:
 25006 00001D65 0180                    	dw	8001h
 25007 00001D67 0000                    	dw	0
 25008 00001D69 [141D]                  	dw	result_val	
 25009 00001D6B [5A1D]                  	dw	cc_range
 25010 00001D6D 00                      	db	0
 25011                                  
 25012                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 25013                                  cntry_pos3:
 25014 00001D6E 0102                    	dw	201h
 25015 00001D70 0000                    	dw	0
 25016 00001D72 [141D]                  	dw	result_val	
 25017 00001D74 [131D]                  	dw	noval
 25018 00001D76 00                      	db	0	
 25019                                  
 25020                                  p_cntry_code:
 25021 00001D77 0000                    	dw	0	; local variable
 25022                                  p_code_page:
 25023 00001D79 0000                    	dw	0	; local variable
 25024                                  
 25025                                  ;-----------------------------------------------------------------------
 25026                                  
 25027                                  	; 27/10/2022
 25028                                  
 25029                                  ; files = n
 25030                                  
 25031                                  ;files_parms p_parms <files_parmsx>
 25032                                  files_parms:
 25033 00001D7B [801D]                  	dw	files_parmsx
 25034 00001D7D 01                      	db	1
 25035 00001D7E 01                      	db	1
 25036 00001D7F 3B                      	db	';'
 25037                                  
 25038                                  files_parmsx:
 25039 00001D80 0101[861D]              	dw	101h,files_pos	; min,max 1 positional
 25040 00001D84 00                      	db	0		; no switches
 25041 00001D85 00                      	db	0		; no keywords
 25042                                  
 25043                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 25044                                  files_pos:
 25045 00001D86 0080                    	dw	8000h
 25046 00001D88 0000                    	dw	0
 25047 00001D8A [141D]                  	dw	result_val	
 25048 00001D8C [8F1D]                  	dw	files_range
 25049 00001D8E 00                      	db	0
 25050                                  
 25051                                  ;files_range p_range <,,,8,255>
 25052                                  files_range:
 25053 00001D8F 01                      	db	1
 25054 00001D90 01                      	db	1
 25055 00001D91 01                      	db	1
 25056 00001D92 08000000                	dd	8
 25057 00001D96 FF000000                	dd	255
 25058                                  
 25059                                  p_files:
 25060 00001D9A 00                      	db	0		; local variable
 25061                                  
 25062                                  ;-----------------------------------------------------------------------
 25063                                  
 25064                                  	; 27/10/2022
 25065                                  
 25066                                  ; fcbs = n,m
 25067                                  
 25068                                  ;fcbs_parms p_parms <fcbs_parmsx>
 25069                                  fcbs_parms:
 25070 00001D9B [A01D]                  	dw	fcbs_parmsx
 25071 00001D9D 01                      	db	1
 25072 00001D9E 01                      	db	1
 25073 00001D9F 3B                      	db	';'
 25074                                  
 25075                                  fcbs_parmsx:
 25076 00001DA0 0102[A81D][BC1D]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 25077 00001DA6 00                      	db	0		; no switches
 25078 00001DA7 00                      	db	0		; no keywords
 25079                                  
 25080                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 25081                                  fcbs_pos_1:
 25082 00001DA8 0080                    	dw	8000h
 25083 00001DAA 0000                    	dw	0
 25084 00001DAC [141D]                  	dw	result_val	
 25085 00001DAE [B11D]                  	dw	fcbs_range
 25086 00001DB0 00                      	db	0
 25087                                  
 25088                                  ;fcbs_range p_range <,,,1,255>
 25089                                  fcbs_range:
 25090 00001DB1 01                      	db	1
 25091 00001DB2 01                      	db	1
 25092 00001DB3 01                      	db	1
 25093 00001DB4 01000000                	dd	1
 25094 00001DB8 FF000000                	dd	255
 25095                                  
 25096                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 25097                                  fcbs_pos_2:
 25098 00001DBC 0080                    	dw	8000h
 25099 00001DBE 0000                    	dw	0
 25100 00001DC0 [141D]                  	dw	result_val	
 25101 00001DC2 [C51D]                  	dw	fcbs_keep_range
 25102 00001DC4 00                      	db	0
 25103                                  
 25104                                  ;fcbs_keep_range p_range <,,,0,255>
 25105                                  fcbs_keep_range:
 25106 00001DC5 01                      	db	1
 25107 00001DC6 01                      	db	1
 25108 00001DC7 01                      	db	1
 25109 00001DC8 00000000                	dd	0
 25110 00001DCC FF000000                	dd	255
 25111                                  
 25112 00001DD0 00                      p_fcbs:	db	0		; local variable
 25113 00001DD1 00                      p_keep:	db	0		; local variable
 25114                                  
 25115                                  ;-----------------------------------------------------------------------
 25116                                  
 25117                                  	; 27/10/2022
 25118                                  
 25119                                  ; lastdrive = x
 25120                                  
 25121                                  ;ldrv_parms p_parms <ldrv_parmsx>
 25122                                  ldrv_parms:
 25123 00001DD2 [D71D]                  	dw	ldrv_parmsx
 25124 00001DD4 01                      	db	1
 25125 00001DD5 01                      	db	1
 25126 00001DD6 3B                      	db	';'
 25127                                  
 25128                                  ldrv_parmsx:
 25129 00001DD7 0101[DD1D]              	dw	101h,ldrv_pos	; min,max = 1 positional
 25130 00001DDB 00                      	db	0		; no switches
 25131 00001DDC 00                      	db	0		; no keywords
 25132                                  
 25133                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 25134                                  ldrv_pos:				    ; remove colon at end
 25135 00001DDD 1001                    	dw	110h
 25136 00001DDF 1000                    	dw	10h
 25137 00001DE1 [141D]                  	dw	result_val	
 25138 00001DE3 [131D]                  	dw	noval
 25139 00001DE5 00                      	db	0
 25140                                  	
 25141 00001DE6 00                      p_ldrv:	db	0		; local variable
 25142                                  
 25143                                  ;-----------------------------------------------------------------------
 25144                                  
 25145                                  	; 27/10/2022
 25146                                  
 25147                                  ; stacks = n,m
 25148                                  
 25149                                  ;stks_parms p_parms <stks_parmsx>
 25150                                  stks_parms:
 25151 00001DE7 [EC1D]                  	dw	stks_parmsx
 25152 00001DE9 01                      	db	1
 25153 00001DEA 01                      	db	1
 25154 00001DEB 3B                      	db	';'
 25155                                  
 25156                                  stks_parmsx:
 25157 00001DEC 0202[F41D][081E]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 25158 00001DF2 00                      	db	0		; no switches
 25159 00001DF3 00                      	db	0		; no keywords
 25160                                  
 25161                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 25162                                  stks_pos_1:
 25163 00001DF4 0080                    	dw	8000h
 25164 00001DF6 0000                    	dw	0
 25165 00001DF8 [141D]                  	dw	result_val	
 25166 00001DFA [FD1D]                  	dw	stks_range
 25167 00001DFC 00                      	db	0
 25168                                  
 25169                                  ;stks_range p_range <,,,0,64>
 25170                                  stks_range:
 25171 00001DFD 01                      	db	1
 25172 00001DFE 01                      	db	1
 25173 00001DFF 01                      	db	1
 25174 00001E00 00000000                	dd	0
 25175 00001E04 40000000                	dd	64
 25176                                  
 25177                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 25178                                  stks_pos_2:
 25179 00001E08 0080                    	dw	8000h
 25180 00001E0A 0000                    	dw	0
 25181 00001E0C [141D]                  	dw	result_val	
 25182 00001E0E [111E]                  	dw	stk_size_range
 25183 00001E10 00                      	db	0
 25184                                  
 25185                                  ;stk_size_range p_range <,,,0,512>
 25186                                  stk_size_range:
 25187 00001E11 01                      	db	1
 25188 00001E12 01                      	db	1
 25189 00001E13 01                      	db	1
 25190 00001E14 00000000                	dd	0
 25191 00001E18 00020000                	dd	512	
 25192                                  
 25193                                  p_stack_count:
 25194 00001E1C 0000                    	dw	0	; local variable
 25195                                  p_stack_size:
 25196 00001E1E 0000                    	dw	0	; local variable
 25197                                  
 25198                                  ;-----------------------------------------------------------------------
 25199                                  
 25200                                  	; 27/10/2022
 25201                                  
 25202                                  ; multitrack = [ on | off ]
 25203                                  
 25204                                  ;mtrk_parms p_parms <mtrk_parmsx>
 25205                                  mtrk_parms:
 25206 00001E20 [251E]                  	dw	mtrk_parmsx
 25207 00001E22 01                      	db	1
 25208 00001E23 01                      	db	1
 25209 00001E24 3B                      	db	';'
 25210                                  
 25211                                  mtrk_parmsx:
 25212 00001E25 0101[2B1E]              	dw	101h,mtrk_pos	; min,max = 1 positional
 25213 00001E29 00                      	db	0		; no switches
 25214 00001E2A 00                      	db	0		; no keywords
 25215                                  
 25216                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25217                                  mtrk_pos:
 25218 00001E2B 0020                    	dw	2000h
 25219 00001E2D 0000                    	dw	0
 25220 00001E2F [141D]                  	dw	result_val	
 25221 00001E31 [301D]                  	dw	on_off_string
 25222 00001E33 00                      	db	0
 25223                                  
 25224 00001E34 00                      p_mtrk:	db	0		; local variable
 25225                                  
 25226                                  ;-----------------------------------------------------------------------
 25227                                  
 25228                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25229                                  	; (SYSINIT:20B2h)
 25230                                  
 25231                                  ; switches=/k
 25232                                  
 25233                                  ;swit_parms p_parms <swit_parmsx>
 25234                                  swit_parms:
 25235 00001E35 [3A1E]                  	dw	swit_parmsx
 25236 00001E37 01                      	db	1
 25237 00001E38 01                      	db	1
 25238 00001E39 3B                      	db	';'
 25239                                  
 25240                                  swit_parmsx:
 25241 00001E3A 0000                    	dw	0		; no positionals
 25242                                  	;db	5               ; # of switches
 25243                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25244 00001E3C 03                      	db	3
 25245 00001E3D [441E]                  	dw	swit_k_ctrl	; /k control
 25246                                  	;dw	swit_n_ctrl     ; /n control (for MULTI_CONFIG only)
 25247                                  	;dw	swit_f_ctrl     ; /f control (for MULTI_CONFIG only)
 25248 00001E3F [501E]                  	dw	swit_t_ctrl     ; /t control
 25249 00001E41 [5C1E]                  	dw	swit_w_ctrl     ; /w control
 25250 00001E43 00                      	db	0		; no keywords
 25251                                  
 25252                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25253                                  swit_k_ctrl:
 25254 00001E44 00000000[141D]-         	dw	0,0,result_val,noval
 25254 00001E4A [131D]             
 25255 00001E4C 01                      	db	1
 25256 00001E4D 2F4B00                  swit_k:	db	'/K',0
 25257                                  
 25258                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25259                                  ;
 25260                                  ;;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25261                                  ;swit_n_ctrl:
 25262                                  ;	dw	0,0,result_val,noval
 25263                                  ;	db	1
 25264                                  ;swit_n: db	'/N',0
 25265                                  ;
 25266                                  ;;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25267                                  ;swit_f_ctrl:
 25268                                  ;	dw	0,0,result_val,noval
 25269                                  ;	db	1
 25270                                  ;swit_f: db 	'/F',0
 25271                                  
 25272                                  	; 27/10/2022
 25273                                  
 25274                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 25275                                  swit_t_ctrl:
 25276 00001E50 00000000[141D]-         	dw	0,0,result_val,noval
 25276 00001E56 [131D]             
 25277 00001E58 01                      	db	1
 25278 00001E59 2F5400                  swit_t:	db	'/T',0			   ;				M059
 25279                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 25280                                  swit_w_ctrl:
 25281 00001E5C 00000000[141D]-         	dw	0,0,result_val,noval
 25281 00001E62 [131D]             
 25282 00001E64 01                      	db	1
 25283 00001E65 2F5700                  swit_w:	db	'/W',0			   ;				M063
 25284                                  
 25285                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 25286                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 25287                                  ;   in the above table to prevent the parsing code from complaining about them
 25288                                  
 25289 00001E68 00                      p_swit_k:	db     0	; local variable
 25290 00001E69 00                      p_swit_t:	db     0	; local variable			M059
 25291 00001E6A 00                      p_swit_w:	db     0	; local variable			M063
 25292                                  
 25293                                  ;-----------------------------------------------------------------------
 25294                                  
 25295                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25296                                  	; (SYSINIT:20E8h)
 25297                                  
 25298                                  ; DOS = [ high | low ]
 25299                                  
 25300                                  ;dos_parms p_parms  <dos_parmsx>
 25301                                  dos_parms:
 25302 00001E6B [701E]                  	dw	dos_parmsx
 25303 00001E6D 01                      	db	1
 25304 00001E6E 01                      	db	1
 25305 00001E6F 3B                      	db	';'
 25306                                  dos_parmsx:
 25307 00001E70 01                      	db	1		; min parameters
 25308 00001E71 02                      	db	2		; max parameters
 25309 00001E72 [781E]                  	dw	dos_pos		; 
 25310 00001E74 [781E]                  	dw	dos_pos		; 
 25311 00001E76 00                      	db	0		; no switches
 25312 00001E77 00                      	db	0		; no keywords
 25313                                  
 25314                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25315                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25316                                  dos_pos:
 25317 00001E78 00200000[141D]-         	dw	2000h,0,result_val,dos_strings
 25317 00001E7E [8A1E]             
 25318 00001E80 00                      	db	0
 25319 00001E81 00200000[141D]-         	dw	2000h,0,result_val,dos_strings
 25319 00001E87 [8A1E]             
 25320 00001E89 00                      	db	0	
 25321                                  
 25322                                  dos_strings:	;label	byte
 25323 00001E8A 03                      	db	3		; signals that there is a string choice
 25324 00001E8B 00                      	db	0		; no range definition
 25325 00001E8C 00                      	db	0		; no numeric values choice
 25326 00001E8D 04                      	db	4		; 4 strings for choice
 25327 00001E8E 01                      	db	1		; the 1st string tag
 25328 00001E8F [9A1E]                  	dw	hi_string
 25329 00001E91 02                      	db	2		; the 2nd string tag
 25330 00001E92 [9F1E]                  	dw	lo_string
 25331 00001E94 03                      	db	3
 25332 00001E95 [A31E]                  	dw	umb_string
 25333 00001E97 04                      	db	4
 25334 00001E98 [A71E]                  	dw	noumb_string
 25335                                  
 25336 00001E9A 4849474800              hi_string:	db	"HIGH",0
 25337 00001E9F 4C4F5700                lo_string:	db	"LOW",0
 25338 00001EA3 554D4200                umb_string:	db	"UMB",0
 25339 00001EA7 4E4F554D4200            noumb_string:	db	"NOUMB",0
 25340                                  
 25341 00001EAD 00                      p_dos_hi:	db	0	; local variable
 25342                                  				; BUGBUG : I dont know whether PARSER uses
 25343                                  				;          this variable or not
 25344                                  
 25345                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25346                                  
 25347                                  %if 0
 25348                                  
 25349                                  ;****************************************************************** RICHID ****
 25350                                  
 25351                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 25352                                  
 25353                                  ; 30/03/2019 - Retro DOS v4.0
 25354                                  ;------------------------------------------------------------------------------
 25355                                  
 25356                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 25357                                  ;
 25358                                  ;   Date:     May 14, 1992
 25359                                  ;
 25360                                  ;******************************************************************************
 25361                                  ;
 25362                                  ;   Modification log:
 25363                                  ;
 25364                                  ;     DATE    WHO      DESCRIPTION
 25365                                  ;   --------  -------  --------------------------------------------------------
 25366                                  ;   05/14/92  t-richj  Original
 25367                                  ;   06/21/92  t-richj  Final revisions before check-in
 25368                                  ;
 25369                                  ;******************************************************************************
 25370                                  ;
 25371                                  ; There are two primary definitions which need to be made, selectively, before
 25372                                  ; this include file should be used.  These are:
 25373                                  ;    HV_Extern - If this has been defined, variables for this module will be
 25374                                  ;                declared as external.  Otherwise, variables will be declared
 25375                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 25376                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 25377                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 25378                                  ;                (as only one module, sysconf.asm, includes this file).
 25379                                  ;    HV_LoadHigh - This should be defined when this module is going into
 25380                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 25381                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 25382                                  ;
 25383                                  ;******************************************************************************
 25384                                  
 25385                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 25386                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 25387                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 25388                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 25389                                  ; space problem (it's just such a nice round number, eh?).
 25390                                  
 25391                                  MAXUMB	equ	16
 25392                                  
 25393                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 25394                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 25395                                  
 25396                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 25397                                  SystemPSPOwner	equ	8
 25398                                  ;JapanPSPOwner	equ	9
 25399                                  
 25400                                  ; for LoadHigh and DeviceHigh:
 25401                                  ;
 25402                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 25403                                  ;	          UnHideUMBs().
 25404                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 25405                                  ;	           line.
 25406                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 25407                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 25408                                  ;	          given a command-line like "/L:3,500;4"
 25409                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 25410                                  ;	          matching its index number was specified on the command-line;
 25411                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 25412                                  ;	          will be set to 1.  All others will be set to 0.
 25413                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 25414                                  ;	          specified by the user for a UMB (in the above example, all
 25415                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 25416                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 25417                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 25418                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 25419                                  ;	           for details).
 25420                                  
 25421                                  fInHigh:  db	0
 25422                                  fUmbTiny: db	0
 25423                                  SegLoad:  dw	0
 25424                                  UmbLoad:  db	0
 25425                                  UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 25426                                  UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 25427                                  fm_umb:   db	0
 25428                                  fm_strat: db	0
 25429                                  fm_argc:  db	0	
 25430                                  
 25431                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 25432                                  ; UmbLoad is set to the UMB number given.
 25433                                  
 25434                                  UNSPECIFIED	equ	-1
 25435                                  
 25436                                  %endif
 25437                                  
 25438                                  ;****************************************************************** RICHID ****
 25439                                  
 25440                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 25441                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 25442                                  
 25443                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25444                                  ; (SYSINIT:212Bh)	
 25445                                  
 25446                                  		;public	DevEntry
 25447                                  
 25448 00001EAE 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 25449 00001EB0 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 25450 00001EB2 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 25451 00001EB4 00000000                DevEntry:	dd	0	; Entry point to the device driver
 25452 00001EB8 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 25453                                  ; 27/10/2022 
 25454                                  ;ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 25455                                  ;
 25456 00001EBC 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 25457 00001EBD 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 25458 00001EBF 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 25459 00001EC1 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 25460                                  ;
 25461 00001EC3 00000000                DevXMSAddr:	dd	0
 25462                                  ;
 25463 00001EC7 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 25464 00001EC9 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 25465                                  ;
 25466 00001ECB 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 25467                                  				;  is being loaded into UMB
 25468 00001ECC 0000                    DevSizeOption:	dw	0	; SIZE= option
 25469                                  ;
 25470 00001ECE 00                      Int12Lied:	db	0	; did we trap int 12 ?
 25471 00001ECF 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 25472 00001ED1 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 25473                                  ;
 25474 00001ED9 00                      FirstUMBLinked:	db	0
 25475 00001EDA 0000                    DevDOSData:	dw	0	; segment of DOS Data
 25476 00001EDC 00000000                DevCmdLine:	dd	0	; Current Command line
 25477 00001EE0 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 25478                                  				; to use the file name in the command line
 25479                                  ;
 25480                                  ;	ifdef	dblspace_hooks
 25481                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 25482                                  ;	endif
 25483                                  
 25484                                  ; ===========================================================================
 25485                                  
 25486                                  ; 31/03/2019 - Retro DOS v4.0
 25487                                  
 25488                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25489                                  ; (SYSINIT:215Eh)
 25490                                  
 25491                                  ;----------------------------------------------------------------------------
 25492                                  ;
 25493                                  ; procedure : doconf
 25494                                  ;
 25495                                  ;             Config file is parsed initially with this routine. For the
 25496                                  ;             Subsequent passes 'multi_pass' entry is used .
 25497                                  ;
 25498                                  ;----------------------------------------------------------------------------
 25499                                  
 25500                                  	; 27/10/2022
 25501                                  doconf:
 25502 00001EE1 0E                      	push	cs
 25503 00001EE2 1F                      	pop	ds
 25504                                  
 25505 00001EE3 B80037                  	mov	ax,3700h
 25506                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 25507 00001EE6 CD21                    	int	21h
 25508 00001EE8 8816[AA02]              	mov	[command_line+1],dl	; set in default command line
 25509                                  
 25510                                  ; 27/10/2022
 25511                                  ;;ifdef	MULTI_CONFIG
 25512                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 25513                                  ;	mov	[def_swchr],dl ; 31/03/2019 
 25514                                  ;;endif	;MULTI_CONFIG
 25515                                  
 25516 00001EEC BA[C433]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 25517 00001EEF B8003D                  	mov	ax,3D00h
 25518                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 25519 00001EF2 F9                      	stc				;in case of int 24
 25520 00001EF3 CD21                    	int	21h			;function request
 25521 00001EF5 7306                    	jnc	short noprob		; brif opened okay
 25522                                  
 25523                                  ; 27/10/2022
 25524                                  ;;ifdef	MULTI_CONFIG
 25525                                  ;      	call	kbd_read		; we still want to give the guy
 25526                                  ;					; a chance to select clean boot!
 25527                                  ;;endif					; (ie, no autoexec.bat processing)
 25528 00001EF7 C606[4903]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 25529 00001EFC C3                      	retn
 25530                                  noprob: 				;get file size (note < 64k!!)
 25531 00001EFD 89C3                    	mov	bx,ax  ; File handle
 25532 00001EFF 31C9                    	xor	cx,cx
 25533 00001F01 31D2                    	xor	dx,dx
 25534                                  	;mov	ax,4202h
 25535 00001F03 B80242                  	mov	ax,(LSEEK<<8)|2
 25536 00001F06 CD21                    	int	21h
 25537 00001F08 A3[D203]                	mov	[count],ax
 25538                                  
 25539 00001F0B 31D2                    	xor	dx,dx
 25540                                  	;mov	ax,4200h
 25541 00001F0D B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 25542 00001F10 CD21                    	int	21h
 25543                                  
 25544                                  	;mov	dx,[ALLOCLIM]		;use current alloclim value
 25545                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25546 00001F12 8B16[A102]              	mov	dx,[top_of_cdss] 
 25547                                  
 25548 00001F16 A1[D203]                	mov	ax,[count]
 25549 00001F19 A3[4C03]                	mov	[config_size],ax	;save the size of config.sys file.
 25550 00001F1C E8A1F1                  	call	ParaRound
 25551 00001F1F 29C2                    	sub	dx,ax
 25552                                  
 25553                                  ; 27/10/2022
 25554                                  ;;ifdef	MULTI_CONFIG
 25555                                  ;;
 25556                                  ;;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 25557                                  ;;  CONFIG.SYS image, and later for building the initial environment) need
 25558                                  ;;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 25559                                  ;;  we (may) add a variable to the environment that does not explicity appear
 25560                                  ;;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 25561                                  ;;  The default setting for CONFIG cannot result in more than 1 paragraph
 25562                                  ;;  of extra space, so here we account for it (the worst case of course is
 25563                                  ;;  when CONFIG.SYS is some very small size, like 0 -JTP)
 25564                                  ;;
 25565                                  ;       dec     dx                      ;reserve 1 additional paragraph
 25566                                  ;       mov     [config_wrkseg],dx      ;this is the segment to be used for
 25567                                  ;       sub     dx,ax                   ;rebuilding the config.sys memory image
 25568                                  ;;endif	;MULTI_CONFIG
 25569                                  
 25570 00001F21 83EA11                  	sub	dx,11h			;room for header
 25571                                  	
 25572                                  	;mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 25573                                  	;mov	[CONFBOT],dx
 25574                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25575 00001F24 8916[A102]              	mov	[top_of_cdss],dx
 25576 00001F28 E8ABEC                  	call    TempCDS 
 25577                                  	; 11/12/2022
 25578                                  	; ds <> cs 
 25579 00001F2B 2E8B16[A102]            	mov	dx,[cs:top_of_cdss]
 25580                                   
 25581 00001F30 8EDA                    	mov	ds,dx
 25582 00001F32 8EC2                    	mov	es,dx
 25583                                  
 25584 00001F34 31D2                    	xor	dx,dx
 25585 00001F36 2E8B0E[D203]            	mov	cx,[cs:count]
 25586 00001F3B B43F                    	mov	ah,3Fh
 25587                                  	;mov	ah,READ  ; 3Fh
 25588 00001F3D F9                      	stc				;in case of int 24
 25589 00001F3E CD21                    	int	21h			;function request
 25590 00001F40 9C                      	pushf
 25591                                  
 25592                                  ; find the eof mark in the file. if present,then trim length.
 25593                                  
 25594 00001F41 50                      	push	ax
 25595 00001F42 57                      	push	di
 25596 00001F43 51                      	push	cx
 25597 00001F44 B01A                    	mov	al,1Ah			; eof mark
 25598 00001F46 89D7                    	mov	di,dx			; point to buffer
 25599 00001F48 E305                    	jcxz	puteol			; no chars
 25600 00001F4A F2AE                    	repnz	scasb			; find end
 25601 00001F4C 7501                    	jnz	short puteol		; none found and count exhausted
 25602                                  
 25603                                  ; we found a 1a. back up
 25604                                  
 25605 00001F4E 4F                      	dec	di			; backup past 1Ah
 25606                                  
 25607                                  ;  just for the halibut, stick in an extra eol
 25608                                  
 25609                                  puteol:
 25610 00001F4F B00D                    	mov	al,cr ; 0Dh
 25611 00001F51 AA                      	stosb
 25612 00001F52 B00A                    	mov	al,lf  ;0Ah
 25613 00001F54 AA                      	stosb
 25614 00001F55 29D7                    	sub	di,dx			; difference moved
 25615                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25616                                  	;mov	[cs:count],di		; new count
 25617                                  
 25618                                  	; 11/12/2022	
 25619                                  	; 31/03/2019 - Retro DOS v4.0
 25620 00001F57 0E                      	push	cs
 25621 00001F58 1F                      	pop	ds
 25622                                  
 25623 00001F59 893E[D203]              	mov	[count],di		; new count
 25624                                  
 25625 00001F5D 59                      	pop	cx
 25626 00001F5E 5F                      	pop	di
 25627 00001F5F 58                      	pop	ax
 25628                                  
 25629                                  	; 11/12/2022
 25630                                  	; 27/10/2022
 25631                                  	;push	cs
 25632                                  	;pop	ds
 25633                                  
 25634 00001F60 50                      	push	ax
 25635                                  	;mov	ah,CLOSE
 25636 00001F61 B43E                    	mov	ah,3Eh
 25637 00001F63 CD21                    	int	21h
 25638 00001F65 58                      	pop	ax
 25639 00001F66 9D                      	popf
 25640 00001F67 7204                    	jc	short conferr 		;if not we've got a problem
 25641 00001F69 39C1                    	cmp	cx,ax
 25642 00001F6B 742C                    	jz	short getcom		;couldn't read the file
 25643                                  conferr:
 25644 00001F6D BA[C433]                	mov	dx,config		;want to print config error
 25645 00001F70 E8A813                  	call	badfil
 25646                                  endconv:
 25647 00001F73 C3                      	retn
 25648                                  
 25649                                  ;----------------------------------------------------------------------------
 25650                                  ;
 25651                                  ; entry : multi_pass
 25652                                  ;
 25653                                  ;             called to execute device=,install= commands
 25654                                  ;
 25655                                  ;----------------------------------------------------------------------------
 25656                                  
 25657                                  	; 27/10/2022
 25658                                  multi_pass:
 25659 00001F74 0E                      	push	cs
 25660 00001F75 1F                      	pop	ds
 25661                                  
 25662 00001F76 803E[4903]0A            	cmp	byte [multi_pass_id],10
 25663                                  ;jae_endconv:
 25664 00001F7B 73F6                    	jae	short endconv 		; do nothing. just return.
 25665                                  
 25666                                  	;push	word [CONFBOT]
 25667                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25668 00001F7D FF36[A102]              	push	word [top_of_cdss]
 25669 00001F81 07                      	pop	es			; es -> confbot
 25670                                  
 25671 00001F82 8B36[D403]              	mov	si,[org_count]
 25672 00001F86 8936[D203]              	mov	[count],si		; set count
 25673 00001F8A 31F6                    	xor	si,si ; 0
 25674 00001F8C 8936[D603]                      mov     [chrptr],si		; reset chrptr
 25675 00001F90 8936[2B03]                      mov     [linecount],si		; reset linecount
 25676                                  
 25677 00001F94 E86807                  	call	getchr
 25678 00001F97 EB06                    	jmp	short conflp
 25679                                  
 25680                                  getcom:
 25681 00001F99 E8AD0E                          call    organize                ; organize the file
 25682 00001F9C E86007                  	call	getchr
 25683                                  conflp: 
 25684 00001F9F 72D2                    	jc	short endconv
 25685                                  
 25686 00001FA1 FF06[2B03]                      inc     word [linecount]	; increase linecount
 25687                                  
 25688 00001FA5 C606[3114]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 25689 00001FAA C606[3414]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 25690 00001FAF 3C0A                    	cmp	al,lf			; linefeed?
 25691 00001FB1 7416                    	je	short blank_line	;  then ignore this line.
 25692                                  
 25693                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25694                                  %if 0
 25695                                  
 25696                                  ;ifdef	MULTI_CONFIG
 25697                                  
 25698                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 25699                                  ;   number immediately following it....
 25700                                  
 25701                                          mov     [config_cmd],al         ; save original command code
 25702                                  	;and	al,NOT CONFIG_OPTION_QUERY
 25703                                  	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 25704                                          cmp     byte [config_multi],0	; is this a multi-config config.sys?
 25705                                          je      short not_final		; no, line number is not embedded
 25706                                  
 25707                                          push    ax                      ;
 25708                                          call    getchr                  ; ignore end-of-image errors,
 25709                                          mov     ah,al                   ; because if there's an error
 25710                                          call    getchr                  ; fetching the line number that's
 25711                                          xchg    al,ah                   ; supposed to be there, the next
 25712                                          mov     [linecount],ax          ; getchr call will get the same error
 25713                                          pop     ax
 25714                                  ;
 25715                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 25716                                  ;   which to obtain its original program name, it grovels through all of
 25717                                  ;   memory to find the filename that was used to exec it; it wants to find
 25718                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 25719                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 25720                                  ;   immediately before the filename, but since we are now storing line # info
 25721                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 25722                                  ;   spot.
 25723                                  ;
 25724                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 25725                                  ;   over the line number info, since we no longer need that info anyway. This
 25726                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 25727                                  ;   retrieved.
 25728                                  ;
 25729                                          cmp	byte [multi_pass_id],2	; final pass?
 25730                                          jb	short not_final		; no
 25731                                          ;test	word [install_flag],have_install_cmd
 25732                                  	test	byte [install_flag],have_install_cmd ; 1
 25733                                          jz	short final		; no install cmds, so yes it is
 25734                                          cmp	byte [multi_pass_id],3	; final pass?
 25735                                          jb	short not_final		; no
 25736                                  final:                                  ;
 25737                                  	mov	[es:si],al		; save backward-compatible command code
 25738                                  not_final:                              ;
 25739                                  ;endif
 25740                                  
 25741                                  %endif
 25742 00001FB3 88C4                    	mov	ah,al
 25743 00001FB5 E84707                  	call	getchr
 25744 00001FB8 7314                    	jnc	short tryi
 25745                                  
 25746 00001FBA 803E[4903]02            	cmp	byte [multi_pass_id],2
 25747                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 25748                                  	; 27/10/2022
 25749 00001FBF 73B2                    	jnb	short endconv	
 25750 00001FC1 E90707                  	jmp	badop
 25751                                  	
 25752                                  coff:	
 25753                                  	; 11/12/2022
 25754                                  	; ds = cs
 25755                                  	;push	cs
 25756                                  	;pop	ds
 25757 00001FC4 E89910                  	call	newline
 25758 00001FC7 EBD6                    	jmp	short conflp	; 13/05/2019
 25759                                  
 25760                                  blank_line:
 25761 00001FC9 E83307                  	call	getchr
 25762 00001FCC EBD1                    	jmp	short conflp
 25763                                  
 25764                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25765                                  ; 11/12/2022
 25766                                  ; (there is not a jump or call to here from anywhere!)
 25767                                  ;coff_p:
 25768                                  	;push	cs
 25769                                  	;pop	ds
 25770                                  
 25771                                  ;to handle install= commands,we are going to use multi-pass.
 25772                                  ;the first pass handles the other commands and only set install_flag when
 25773                                  ;it finds any install command. the second pass will only handle the
 25774                                  ;install= command.
 25775                                  
 25776                                  ;------------------------------------------------------------------------------
 25777                                  ;install command
 25778                                  ;------------------------------------------------------------------------------
 25779                                  
 25780                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25781                                  	; (SYSINIT:2250h)
 25782                                  tryi:
 25783 00001FCE 803E[4903]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 25784 00001FD3 7503                    	jne	short not_init_pass
 25785 00001FD5 E92301                  	jmp	multi_try_doshi
 25786                                  not_init_pass:
 25787 00001FD8 803E[4903]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 25788                                          ; 11/12/2022
 25789                                  	;je	short multi_pass_coff2	; now it is NOPs
 25790 00001FDD 74E5                    	je	short coff
 25791                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25792                                  	;je	short multi_pass_coff	
 25793                                  					; This pass can be made use of if
 25794                                  					; we want do some config.sys process
 25795                                  					; after device drivers are loaded
 25796                                  					; and before install= commands
 25797                                  					; are processed
 25798                                  
 25799 00001FDF 803E[4903]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 25800 00001FE4 7411                    	je	short multi_try_i
 25801 00001FE6 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 25802                                  	; 11/12/2022
 25803                                  	;je	short multi_pass_coff2
 25804 00001FE9 74D9                    	je	short coff
 25805                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25806                                  	;je	short multi_pass_coff	
 25807                                  
 25808                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 25809                                  ;       but don't process them now.        
 25810                                          
 25811 00001FEB 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 25812                                  	;jne	short precheck_installhigh ; the first pass is for normal operation.
 25813                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25814 00001FEE 752A                    	jne	short tryb	
 25815                                  	
 25816                                  	;or	word [install_flag],have_install_cmd ; set the flag
 25817 00001FF0 800E[4A03]01            	or	byte [install_flag],have_install_cmd ; 1
 25818                                  multi_pass_coff2:
 25819 00001FF5 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 25820                                  
 25821                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25822                                  ;precheck_installhigh:
 25823                                  ;       cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 25824                                  ;       jne     short tryb		; carry on with normal processing
 25825                                  ;	;or	word [install_flag],have_install_cmd
 25826                                  ;	or	byte [install_flag],have_install_cmd ; 1
 25827                                  ;       jmp	short coff
 25828                                  
 25829                                  multi_try_i:
 25830 00001FF7 80FC49                          cmp     ah, CONFIG_INSTALL ; 'I' ; install= command?
 25831                                  	;jne	short multi_try_n	; no, check for installhigh
 25832                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25833 00001FFA 7505                    	jne	short multi_pass_filter
 25834                                  
 25835                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25836                                  ;;ifdef	MULTI_CONFIG
 25837                                  ;       call    query_user              ; query the user if config_cmd
 25838                                  ;       jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25839                                  ;;endif
 25840                                  
 25841 00001FFC E841F0                  	call	do_install_exec 	;install it.
 25842 00001FFF EBC3                    	jmp	short coff		;to handle next install= command.
 25843                                  
 25844                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25845                                  %if 0
 25846                                  
 25847                                  multi_try_n:
 25848                                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 25849                                          jne	short multi_pass_filter	; no. ignore this.
 25850                                  ;ifdef	MULTI_CONFIG
 25851                                          call    query_user              ; query the user if config_cmd
 25852                                          jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25853                                  ;endif
 25854                                  
 25855                                  ;       The memory environment is in its normal DOS state, so do
 25856                                  ;       the standard calls to set the alloc strategy for loading high
 25857                                  
 25858                                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 25859                                  	int	21h			;get alloc strategy
 25860                                  	mov	bx,ax
 25861                                          push    bx                      ; save for the return
 25862                                  
 25863                                          or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 25864                                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 25865                                  	int	21h			;set alloc strategy
 25866                                  
 25867                                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 25868                                          int     21h                     ; get link state
 25869                                          xor     ah,ah                   ; clear top byte
 25870                                          push    ax                      ; save for return
 25871                                  
 25872                                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 25873                                  	mov	bx,1
 25874                                  	int	21h			;link in UMBs
 25875                                  
 25876                                  	call	do_install_exec 	;install it.
 25877                                  
 25878                                          mov     ax,(ALLOCOPER<<8)|3
 25879                                          pop     bx                      ; recover original link state
 25880                                          int     21h
 25881                                          pop     bx                      ; recover original alloc strategy
 25882                                          mov     ax,(ALLOCOPER<<8)|1
 25883                                          int     21h
 25884                                  
 25885                                  	jmp	coff			;to handle next install= command.
 25886                                  
 25887                                  %endif
 25888                                  
 25889                                  multi_pass_filter:
 25890 00002001 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 25891 00002004 740A                    	je	short multi_pass_adjust
 25892 00002006 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 25893 00002009 7405                    	je	short multi_pass_adjust
 25894 0000200B 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 25895 0000200E 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 25896                                  
 25897                                  multi_pass_adjust:			; these commands need to
 25898 00002010 FF0E[D603]              	dec	word [chrptr]		;  adjust chrptr,count
 25899 00002014 FF06[D203]              	inc	word [count]		;  for newline proc.
 25900                                  
 25901                                  multi_pass_coff:
 25902                                  	; 11/12/2022
 25903 00002018 EBAA                    	jmp	short coff		; to handle next install= commands.
 25904                                  
 25905                                  ;------------------------------------------------------------------------------
 25906                                  ; buffer command
 25907                                  ;------------------------------------------------------------------------------
 25908                                  
 25909                                  ;******************************************************************************
 25910                                  ;									      *
 25911                                  ; function: parse the parameters of buffers= command.			      *
 25912                                  ;									      *
 25913                                  ; input :								      *
 25914                                  ;	es:si -> parameters in command line.				      *
 25915                                  ; output:								      *
 25916                                  ;	buffers set							      *
 25917                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 25918                                  ;	h_buffers set if secondary buffer cache specified.		      *
 25919                                  ;									      *
 25920                                  ; subroutines to be called:						      *
 25921                                  ;	sysinit_parse							      *
 25922                                  ; logic:								      *
 25923                                  ; {									      *
 25924                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 25925                                  ;	set dx,cx to 0; 						      *
 25926                                  ;	reset buffer_slash_x;						      *
 25927                                  ;	while (end of command line)					      *
 25928                                  ;	{ sysinit_parse;						      *
 25929                                  ;	  if (no error) then						      *
 25930                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 25931                                  ;		    buffer_slash_x = 1					      *
 25932                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 25933                                  ;			  buffers = result_val._$P_picked_val;		      *
 25934                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 25935                                  ;	  else	{show error message;error exit} 			      *
 25936                                  ;	};								      *
 25937                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 25938                                  ; };									      *
 25939                                  ;									      *
 25940                                  ;******************************************************************************
 25941                                  
 25942                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25943                                  	; (SYSINIT:229Ch)
 25944                                  tryb:
 25945 0000201A 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 25946 0000201D 7557                    	jne	short tryc
 25947                                  
 25948                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25949                                  ;;ifdef	MULTI_CONFIG
 25950                                  ;       call    query_user              ; query the user if config_cmd
 25951                                  ;       jc      short tryc		; has the CONFIG_OPTION_QUERY bit set
 25952                                  ;;endif
 25953                                  
 25954                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25955                                  	; 18/12/2022
 25956 0000201F 31C9                    	xor	cx,cx
 25957                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 25958 00002021 880E[121D]              	mov	[p_buffer_slash_x],cl ; 0
 25959                                  
 25960 00002025 BF[CB1C]                	mov	di,buf_parms
 25961                                  	;xor	cx,cx	; 18/12/2022
 25962                                  	; 04/01/2023
 25963                                  	;mov	dx,cx
 25964                                  do7:
 25965 00002028 E87D06                  	call	sysinit_parse
 25966 0000202B 7303                    	jnc	short if7		; parse error,
 25967                                  	; 04/01/2023
 25968                                  	;call	badparm_p		;  and show messages and end the search loop.
 25969                                  	;;jmp	short sr7
 25970                                  	; 31/12/2022
 25971                                  ;sr7:
 25972                                  	;jmp	coff
 25973                                  	; 04/01/2023
 25974 0000202D E9F605                  	jmp	badparm_p_coff
 25975                                  if7:
 25976 00002030 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 25977 00002033 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 25978                                  	;cmp	word [result_val_swoff],switch_x
 25979 00002035 813E[161D][0B1D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 25980                                  	;jne	short if11
 25981                                  	; 31/12/2022
 25982 0000203B 74EB                    	je	short do7 ;je short en11
 25983                                  
 25984                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 25985                                  	;jmp	short en11 ; 31/12/2022
 25986                                  if11:
 25987                                  	;mov	ax,[rv_dword]
 25988 0000203D A1[181D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 25989 00002040 83F901                  	cmp	cx,1
 25990 00002043 7505                    	jne	short if13
 25991                                  
 25992 00002045 A3[0E1D]                	mov	[p_buffers],ax
 25993                                  	;jmp	short en11
 25994                                  	; 31/12/2022
 25995 00002048 EBDE                    	jmp	short do7
 25996                                  if13:
 25997 0000204A A3[101D]                	mov	[p_h_buffers],ax
 25998                                  en11:
 25999 0000204D EBD9                    	jmp	short do7
 26000                                  en7:
 26001 0000204F 833E[0E1D]63            	cmp	word [p_buffers],99
 26002 00002054 760B                    	jbe	short if18
 26003                                  
 26004                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 26005                                  ;	jne	short if18
 26006                                  
 26007 00002056 E87E06                  	call	badparm_p
 26008 00002059 C706[101D]0000          	mov	word [p_h_buffers],0
 26009 0000205F EB12                    	jmp	short sr7
 26010                                  if18:
 26011 00002061 A1[0E1D]                	mov	ax,[p_buffers]	; we don't have any problem.
 26012 00002064 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 26013                                  
 26014 00002067 A1[101D]                	mov	ax,[p_h_buffers]
 26015 0000206A A3[9902]                	mov	[h_buffers],ax
 26016                                  
 26017                                  ;	mov	al,[p_buffer_slash_x]	; M016
 26018                                  ;	mov	[buffer_slash_x],al
 26019                                  
 26020 0000206D A1[2B03]                	mov	ax,[linecount]
 26021 00002070 A3[3503]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 26022                                  	; 31/12/2022
 26023                                  	;jmp	short sr7
 26024                                  	; 04/01/2023
 26025                                  sr7:
 26026 00002073 E94EFF                  	jmp	coff
 26027                                  
 26028                                  ;------------------------------------------------------------------------------
 26029                                  ; break command
 26030                                  ;------------------------------------------------------------------------------
 26031                                  
 26032                                  ;****************************************************************************
 26033                                  ;									    *
 26034                                  ; function: parse the parameters of break = command.			    *
 26035                                  ;									    *
 26036                                  ; input :								    *
 26037                                  ;	es:si -> parameters in command line.				    *
 26038                                  ; output:								    *
 26039                                  ;	turn the control-c check on or off.				    *
 26040                                  ;									    *
 26041                                  ; subroutines to be called:						    *
 26042                                  ;	sysinit_parse							    *
 26043                                  ; logic:								    *
 26044                                  ; {									    *
 26045                                  ;	set di to brk_parms;						    *
 26046                                  ;	set dx,cx to 0; 						    *
 26047                                  ;	while (end of command line)					    *
 26048                                  ;	{ sysinit_parse;						    *
 26049                                  ;	  if (no error) then						    *
 26050                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 26051                                  ;		   set p_ctrl_break,on;					    *
 26052                                  ;	       else					  /*off 	 */ *
 26053                                  ;		   set p_ctrl_break,off;				    *
 26054                                  ;	  else {show message;error_exit};				    *
 26055                                  ;	};								    *
 26056                                  ;	if (no error) then						    *
 26057                                  ;	   dos function call to set ctrl_break check according to	    *
 26058                                  ; };									    *
 26059                                  ;									    *
 26060                                  ;****************************************************************************
 26061                                  
 26062                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26063                                  	; (SYSINIT:22FFh)
 26064                                  tryc:
 26065 00002076 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 26066 00002079 7534                    	jne	short trym
 26067                                  
 26068                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26069                                  ;;ifdef MULTI_CONFIG
 26070                                  ;       call    query_user              ; query the user if config_cmd
 26071                                  ;       jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 26072                                  ;;endif
 26073 0000207B BF[1C1D]                	mov	di,brk_parms
 26074 0000207E 31C9                    	xor	cx,cx
 26075                                  	; 04/01/2023
 26076                                  	;mov	dx,cx
 26077                                  do22:
 26078 00002080 E82506                  	call	sysinit_parse
 26079 00002083 7303                    	jnc	short if22		; parse error
 26080                                  	;call	badparm_p		;  show message and end the search loop.
 26081                                  	;;jmp	short sr22
 26082                                  	; 31/12/2022
 26083                                  ;sr22:
 26084                                  	;jmp	coff
 26085                                  	; 04/01/2023
 26086 00002085 E99E05                  	jmp	badparm_p_coff
 26087                                  if22:
 26088 00002088 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26089 0000208B 7415                    	je	short en22		; then end the $endloop
 26090                                  
 26091                                  	;cmp	byte [result_val_itag],1
 26092 0000208D 803E[151D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26093 00002092 7507                    	jne	short if26
 26094                                  
 26095 00002094 C606[411D]01            	mov	byte [p_ctrl_break],1	; turn it on
 26096                                  	;jmp	short en26
 26097                                  	; 31/12/2022
 26098 00002099 EBE5                    	jmp	short do22
 26099                                  if26:
 26100 0000209B C606[411D]00            	mov	byte [p_ctrl_break],0	; turn it off
 26101                                  en26:
 26102 000020A0 EBDE                    	jmp	short do22		; we actually set the ctrl break
 26103                                  en22:
 26104 000020A2 B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 26105 000020A4 B001                    	mov	al,1
 26106 000020A6 8A16[411D]              	mov	dl,[p_ctrl_break]
 26107 000020AA CD21                    	int	21h
 26108                                  	; 31/12/2022
 26109                                  	;jmp	short sr22
 26110                                  	; 04/01/2023
 26111                                  sr22:
 26112 000020AC E915FF                  	jmp	coff
 26113                                  
 26114                                  ;------------------------------------------------------------------------------
 26115                                  ; multitrack command
 26116                                  ;------------------------------------------------------------------------------
 26117                                  
 26118                                  ;******************************************************************************
 26119                                  ;									      *
 26120                                  ; function: parse the parameters of multitrack= command.		      *
 26121                                  ;									      *
 26122                                  ; input :								      *
 26123                                  ;	es:si -> parameters in command line.				      *
 26124                                  ; output:								      *
 26125                                  ;	turn multrk_flag on or off.					      *
 26126                                  ;									      *
 26127                                  ; subroutines to be called:						      *
 26128                                  ;	sysinit_parse							      *
 26129                                  ; logic:								      *
 26130                                  ; {									      *
 26131                                  ;	set di to brk_parms;						      *
 26132                                  ;	set dx,cx to 0; 						      *
 26133                                  ;	while (end of command line)					      *
 26134                                  ;	{ sysinit_parse;						      *
 26135                                  ;	  if (no error) then						      *
 26136                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 26137                                  ;		   set p_mtrk,on;					      *
 26138                                  ;	       else					  /*off 	 */   *
 26139                                  ;		   set p_mtrk,off;					      *
 26140                                  ;	  else {show message;error_exit};				      *
 26141                                  ;	};								      *
 26142                                  ;	if (no error) then						      *
 26143                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 26144                                  ;									      *
 26145                                  ; };									      *
 26146                                  ;									      *
 26147                                  ;******************************************************************************
 26148                                  
 26149                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26150                                  trym:
 26151 000020AF 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 26152 000020B2 7569                    	jne	short tryu
 26153                                  
 26154                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26155                                  ;;ifdef	MULTI_CONFIG
 26156                                  ;       call    query_user      ; query the user if config_cmd
 26157                                  ;       jc      short tryu	; has the CONFIG_OPTION_QUERY bit set
 26158                                  ;;endif
 26159 000020B4 BF[201E]                	mov	di,mtrk_parms
 26160 000020B7 31C9                    	xor	cx,cx
 26161                                  	; 04/01/2023
 26162                                  	;mov	dx,cx
 26163                                  do31:
 26164 000020B9 E8EC05                  	call	sysinit_parse
 26165 000020BC 7303                    	jnc	short if31	; parse error
 26166                                  	;call	badparm_p	;  show message and end the search loop.
 26167                                  	;;jmp	short sr31
 26168                                  	; 31/12/2022
 26169                                  ;sr31:
 26170                                  	;jmp	coff
 26171                                  	; 04/01/2023
 26172 000020BE E96505                  	jmp	badparm_p_coff
 26173                                  if31:
 26174 000020C1 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 26175 000020C4 7415                    	je	short en31	; then end the $endloop
 26176                                  
 26177                                  	;cmp	byte [result_val_itag],1
 26178 000020C6 803E[151D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26179 000020CB 7507                    	jne	short if35
 26180                                  
 26181 000020CD C606[341E]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 26182                                  	;jmp	short en35
 26183                                  	; 31/12/2022
 26184 000020D2 EBE5                    	jmp	short do31
 26185                                  if35:
 26186 000020D4 C606[341E]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 26187                                  en35:
 26188 000020D9 EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 26189                                  en31:
 26190 000020DB 1E                      	push	ds
 26191                                  	;;mov	ax,Bios_Data ; 70h
 26192                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 26193                                  	; 21/10/2022
 26194 000020DC B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 26195 000020DF 8ED8                    	mov	ds,ax
 26196                                  
 26197 000020E1 2E803E[341E]00          	cmp	byte [cs:p_mtrk],0
 26198 000020E7 7508                    	jne	short if39
 26199                                  
 26200 000020E9 C706[2F05]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 26201 000020EF EB06                    	jmp	short en39
 26202                                  if39:
 26203 000020F1 C706[2F05]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 26204                                  en39:
 26205 000020F7 1F                      	pop	ds
 26206                                  	; 31/12/2022
 26207                                  	;jmp	short sr31
 26208                                  	; 04/01/2023
 26209                                  sr31:
 26210 000020F8 E9C9FE                  	jmp	coff
 26211                                  
 26212                                  ;----------------------------------------------------------------------------
 26213                                  ; DOS=HIGH/LOW command
 26214                                  ;----------------------------------------------------------------------------
 26215                                  
 26216                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26217                                  multi_try_doshi:
 26218 000020FB 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 26219 000020FE 7403                    	je	short it_is_h
 26220                                  skip_it:
 26221 00002100 E9FEFE                  	jmp	multi_pass_filter
 26222                                  it_is_h:				; M003 - removed initing DevUMB
 26223                                  					;	 & runhigh
 26224                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26225                                  ;;ifdef	MULTI_CONFIG
 26226                                  ;       call    query_user              ; query the user if config_cmd
 26227                                  ;       jc      short skip_it		; has the CONFIG_OPTION_QUERY bit set
 26228                                  ;;endif
 26229 00002103 BF[6B1E]                	mov	di,dos_parms
 26230 00002106 31C9                    	xor	cx,cx
 26231                                  	; 04/01/2023
 26232                                  	;mov	dx,cx
 26233                                  h_do_parse:
 26234 00002108 E89D05                  	call	sysinit_parse
 26235 0000210B 7303                    	jnc	short h_parse_ok	; parse error
 26236                                  h_badparm:
 26237                                  	; 04/01/2023
 26238                                  	;call	badparm_p		; show message and end the search loop.
 26239                                  	;;jmp	short h_end
 26240                                  	; 11/12/2022
 26241                                  ;h_end:
 26242                                  	;jmp	coff
 26243                                  	; 04/01/2023
 26244 0000210D E91605                  	jmp	badparm_p_coff	
 26245                                  h_parse_ok:
 26246 00002110 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26247 00002113 7405                    	je	short h_end		; then end the $endloop
 26248 00002115 E82D06                  	call	ProcDOS
 26249 00002118 EBEE                    	jmp	short h_do_parse
 26250                                  	; 11/12/2022
 26251                                  	; 04/01/2023
 26252                                  h_end:
 26253 0000211A E9A7FE                  	jmp	coff
 26254                                  
 26255                                  ;-----------------------------------------------------------------------------
 26256                                  ; devicehigh command
 26257                                  ;-----------------------------------------------------------------------------
 26258                                  
 26259                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26260                                  tryu:
 26261 0000211D 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 26262 00002120 7539                    	jne	short tryd
 26263                                  
 26264                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26265                                  ;;ifdef	MULTI_CONFIG
 26266                                  ;       call    query_user              ; query the user if config_cmd
 26267                                  ;       jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 26268                                  ;;endif
 26269                                  
 26270                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26271                                  ;	call	InitVar
 26272                                  ;	call	ParseSize		; process the size= option
 26273                                  ;	;jnc	short tryu_0
 26274                                  	
 26275                                  	;jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 26276                                  
 26277                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26278                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 26279                                  	;mov	[cs:badparm_seg], es
 26280                                  	; 11/12/2022
 26281                                  	; ds = cs
 26282 00002122 8936[3514]              	mov	[badparm_off], si
 26283 00002126 8C06[3714]              	mov	[badparm_seg], es
 26284                                  	;
 26285 0000212A E88A08                  	call	ParseSize
 26286 0000212D 7303                    	jnc	short tryu_2	; 28/10/2022
 26287                                  
 26288                                  	;call	badparm_p
 26289                                  	;jmp	coff
 26290                                  	; 04/01/2023
 26291 0000212F E9F404                  	jmp	badparm_p_coff
 26292                                  
 26293                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26294                                  ;tryu_0:
 26295                                  ;	mov	ax,[cs:DevSizeOption]
 26296                                  ;	or	ax,ax
 26297                                  ;	jnz	short tryu_2
 26298                                  ;
 26299                                  ;	call	ParseVar
 26300                                  ;	jnc	short tryu_2
 26301                                  ;tryu_1:
 26302                                  ;	mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 26303                                  ;	mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 26304                                  ;	call	badparm_p		; so all we have to do is choke and
 26305                                  ;	jmp	coff			; die, rather verbosely.
 26306                                  
 26307                                  tryu_2:	
 26308 00002132 56                      	push	si
 26309 00002133 06                      	push	es
 26310                                  tryu_3:
 26311 00002134 268A04                  	mov	al,[es:si]
 26312 00002137 3C0D                    	cmp	al,cr
 26313 00002139 740C                    	je	short tryu_4
 26314 0000213B 3C0A                    	cmp	al,lf
 26315 0000213D 7408                    	je	short tryu_4
 26316 0000213F E8030F                  	call	delim
 26317 00002142 7403                    	jz	short tryu_4
 26318 00002144 46                      	inc	si
 26319 00002145 EBED                    	jmp	short tryu_3
 26320                                  tryu_4:	
 26321                                  	; 11/12/2022
 26322                                  	; ds = cs
 26323 00002147 A2[E01E]                	mov	[DevSavedDelim],al
 26324                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 26325                                  					;  it with null
 26326                                  	; 18/12/2022
 26327 0000214A 29DB                    	sub	bx,bx
 26328 0000214C 26881C                  	mov	[es:si],bl ; 0
 26329                                   	;mov	byte [es:si],0
 26330                                  
 26331 0000214F 07                      	pop	es
 26332 00002150 5E                      	pop	si
 26333                                  
 26334                                  ;------------------------------------------------------------------------------
 26335                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26336                                  ;------------------------------------------------------------------------------
 26337                                  
 26338                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26339                                  ;
 26340                                  ;	call	UmbTest			; See if UMBs are around...
 26341                                  ;	jnc	short NrmTst		; ...yep. So do that normal thang.
 26342                                  ;
 26343                                  ;	mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 26344                                  ;	jmp	short LoadDevice
 26345                                  
 26346                                  ;------------------------------------------------------------------------------
 26347                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26348                                  ;------------------------------------------------------------------------------
 26349                                  
 26350                                  NrmTst:
 26351                                  	; 11/12/2022
 26352                                  	; ds = cs
 26353                                  	;;mov	byte [cs:DeviceHi],0
 26354                                  	;mov	byte [DeviceHi],0
 26355                                  	; 18/12/2022
 26356                                  	; bx = 0
 26357 00002151 381E[BC1E]              	cmp	[DevUMB],bl ; 0
 26358                                  	;cmp	byte [DevUMB],0
 26359                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 26360 00002155 7417                    	je	short LoadDevice	; no, we don't
 26361                                  	;mov	byte [cs:DeviceHi],1
 26362                                  	; 11/12/2022
 26363                                  	;mov	byte [DeviceHi],1
 26364                                  	; 18/12/2022
 26365 00002157 FEC3                    	inc	bl ; mov bl,1 ; (*)
 26366                                  	; 11/12/2022
 26367                                  	;jmp	short LoadDevice2	; 11/12/2022
 26368 00002159 EB13                    	jmp	short LoadDevice
 26369                                  
 26370                                  ;------------------------------------------------------------------------------
 26371                                  ; device command
 26372                                  ;------------------------------------------------------------------------------
 26373                                  
 26374                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26375                                  	; (SYSINIT:2401h)
 26376                                  tryd:
 26377                                  	; 11/12/2022
 26378 0000215B 31DB                    	xor 	bx, bx
 26379                                  	;
 26380 0000215D 80FC44                          cmp     ah,CONFIG_DEVICE ;  'D'
 26381 00002160 7403                    	je	short gotd
 26382                                  skip_it2:
 26383 00002162 E93502                  	jmp	tryq
 26384                                  gotd:
 26385                                  
 26386                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26387                                  ;;ifdef	MULTI_CONFIG
 26388                                  ;       call    query_user              ; query the user if config_cmd
 26389                                  ;       jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 26390                                  ;;endif
 26391                                  	; 11/12/2022
 26392                                  	; ds = cs
 26393                                  	;mov	byte [DeviceHi],0
 26394                                  	;mov	word [DevSizeOption],0
 26395 00002165 891E[CC1E]              	mov	[DevSizeOption],bx ; 0
 26396 00002169 C606[E01E]20            	mov	byte [DevSavedDelim],' '
 26397                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 26398                                  	;mov	word [cs:DevSizeOption],0
 26399                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 26400                                  					;  be replaced with a ' '
 26401                                  LoadDevice:                             ; device= or devicehigh= command.
 26402                                  	; 11/12/2022
 26403                                  	;mov	byte [DeviceHi],0
 26404 0000216E 881E[CB1E]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 26405                                  LoadDevice2:
 26406                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 26407                                  	;
 26408                                  	;push    cs
 26409                                          ;pop     ds
 26410                                  	;
 26411                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 26412                                  	;mov	[bpb_addr+2],es
 26413                                  	;
 26414                                  	;mov	[DevCmdLine],si		; save it for ourself
 26415                                  	;mov	[DevCmdLine+2],es
 26416                                  	;
 26417                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 26418                                  
 26419                                  	; 11/12/2022
 26420                                  	; ds = cs
 26421                                  	;mov	bx,cs
 26422                                  	;mov	ds,bx
 26423                                  
 26424                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 26425 00002172 8936[F803]              	mov	[bpb_addr],si
 26426                                  	;mov	[cs:bpb_addr+2],es
 26427 00002176 8C06[FA03]              	mov	[bpb_addr+2],es
 26428                                  
 26429                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 26430 0000217A 8936[DC1E]              	mov	[DevCmdLine],si
 26431                                  	;mov	[cs:DevCmdLine+2],es	
 26432 0000217E 8C06[DE1E]              	mov	[DevCmdLine+2],es	
 26433                                  
 26434 00002182 E8030F                  	call	round
 26435                                  	
 26436 00002185 E83F07                  	call	SizeDevice
 26437 00002188 7215                    	jc	short BadFile
 26438                                  
 26439                                  	; 11/12/2022
 26440                                  	; ds = cs
 26441                                  
 26442                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 26443                                  
 26444                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26445                                  ;
 26446                                  ;	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 26447                                  ;
 26448                                  ;	mov	al,[DeviceHi]		; If not using upper memory,
 26449                                  ;	or	byte [DeviceHi],0	; Skip all this and go on to
 26450                                  ;	jz	short DevConvLoad	; the actual load.
 26451                                  ;
 26452                                  ;	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 26453                                  ;	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 26454                                  ;
 26455                                  ;	cmp	al,-1			; If umb0 not specified, it's old style
 26456                                  ;	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 26457                                  ;
 26458                                  ;	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 26459                                  ;
 26460                                  ;	call	GetLoadSize		; Returns size of first UMB specified
 26461                                  ;	or	ax,ax
 26462                                  ;	jz	short tryd_1		; If size1 not specified, nada to do:
 26463                                  ;
 26464                                  ;	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 26465                                  ;	jge	short DevConvLoad
 26466                                  ;
 26467                                  ;tryd_1: mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 26468                                  ;	call	StoLoadSize		; minsize for load UMB.
 26469                                  
 26470                                  ; - End DeviceHigh primary logic changes --------------------------------------
 26471                                  
 26472                                  DevConvLoad:
 26473                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26474 0000218A E84F06                  	call	InitDevLoad
 26475                                  
 26476                                  	; 11/12/2022
 26477                                  	; ds = cs
 26478 0000218D A1[B01E]                	mov	ax,[DevLoadAddr]
 26479 00002190 0306[AE1E]              	add	ax,[DevSize]
 26480 00002194 7206                    	jc	short NoMem
 26481 00002196 3906[B21E]              	cmp	[DevLoadEnd],ax
 26482 0000219A 7312                    	jae	short LoadDev
 26483                                  	
 26484                                  	; 11/12/2022
 26485                                  	;mov	ax,[cs:DevLoadAddr]
 26486                                  	;add	ax,[cs:DevSize]
 26487                                  	;jc	short NoMem
 26488                                  	;cmp	[cs:DevLoadEnd],ax
 26489                                  	;jae	short LoadDev
 26490                                  NoMem:
 26491                                  	; 11/12/2022
 26492                                  	; ds = cs
 26493                                  	;jmp	mem_err
 26494 0000219C E92C0F                  	jmp	mem_err2
 26495                                  
 26496                                  BadFile:
 26497                                  	;28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26498                                  	;call	RetFromUM		; Does nothing if didn't call HideUMBs
 26499                                  	;cmp    byte [es:si],' '
 26500                                          ;jae	short tryd_2
 26501 0000219F 26803C0D                	cmp	byte [es:si],0Dh	; cr
 26502 000021A3 7503                            jne	short tryd_2
 26503 000021A5 E92305                  	jmp	badop
 26504                                  tryd_2:
 26505 000021A8 E87411                  	call	badload
 26506 000021AB E916FE                  	jmp	coff
 26507                                  
 26508                                  LoadDev:
 26509 000021AE 06                      	push	es
 26510 000021AF 1F                      	pop	ds
 26511                                  
 26512 000021B0 89F2                    	mov	dx,si			;ds:dx points to file name
 26513 000021B2 E86307                  	call	ExecDev			; load device driver using exec call
 26514                                  badldreset:
 26515 000021B5 1E                      	push	ds
 26516 000021B6 07                      	pop	es			;es:si back to config.sys
 26517 000021B7 0E                      	push	cs
 26518 000021B8 1F                      	pop	ds			;ds back to sysinit
 26519 000021B9 72E4                    	jc	short BadFile
 26520                                  goodld:
 26521                                  	; 11/12/2022
 26522                                  	; ds = cs
 26523                                  
 26524 000021BB 06                      	push	es
 26525 000021BC 56                      	push	si
 26526 000021BD E87507                  	call	RemoveNull
 26527 000021C0 06                      	push	es
 26528 000021C1 56                      	push	si
 26529                                  
 26530 000021C2 0E                      	push	cs
 26531 000021C3 07                      	pop	es
 26532                                  
 26533 000021C4 1E                      	push	ds
 26534 000021C5 56                      	push	si
 26535                                  
 26536                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 26537                                  	; 31/12/2022
 26538                                  	; ds = cs
 26539 000021C6 C536[B41E]              	lds	si,[DevEntry]
 26540                                  	
 26541                                  	;test	word [si+4],8000h
 26542                                  	; 11/12/2022
 26543 000021CA F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 26544                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 26545 000021CE 7511                    	jnz	short got_device_com_cont   ; no.
 26546                                  
 26547 000021D0 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 26548                                  	;cmp	byte [si+32],26
 26549 000021D5 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 26550 000021D9 7206                    	jb	short got_device_com_cont
 26551                                  
 26552 000021DB 5E                      	pop	si
 26553 000021DC 1F                      	pop	ds
 26554                                  
 26555 000021DD 5E                      	pop	si			; clear the stack
 26556 000021DE 07                      	pop	es
 26557                                  
 26558                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26559                                  	;call	RetFromUM		; Do this before we leave
 26560                                  
 26561 000021DF EB57                    	jmp	short badnumblock
 26562                                  
 26563                                  got_device_com_cont:
 26564 000021E1 5E                      	pop	si
 26565 000021E2 1F                      	pop	ds
 26566                                  
 26567                                  	; 11/12/2022
 26568                                  	; ds = cs
 26569                                  
 26570 000021E3 E88205                  	call	LieInt12Mem
 26571 000021E6 E8E105                  	call	UpdatePDB		; update the PSP:2 value M020
 26572                                  
 26573                                  	; 11/12/2022
 26574                                  	; ds = cs
 26575 000021E9 803E[3114]00            	cmp	byte [multdeviceflag],0
 26576                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 26577                                  					;  driver in the file ; M027
 26578 000021EE 750E                    	jne	short skip_pass_limit	;		      ; M027
 26579                                  
 26580                                  	; 11/12/2022
 26581                                  	; ds = cs
 26582                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 26583                                  	;mov	bx,[cs:DevLoadEnd]
 26584                                  	;mov	[cs:break_addr+2],bx
 26585                                  
 26586 000021F0 C706[F403]0000          	mov	word [break_addr],0
 26587 000021F6 8B1E[B21E]              	mov	bx,[DevLoadEnd]
 26588 000021FA 891E[F603]              	mov	[break_addr+2],bx
 26589                                  
 26590                                  skip_pass_limit:
 26591                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 26592                                  ;	number of installed devices (including DblSpace drives) where
 26593                                  ;	"drivenumber" is the number that the next block device will
 26594                                  ;	be assigned to. Because some naughty device drivers (like
 26595                                  ;	interlnk) look at the internal DOS variable instead of the
 26596                                  ;	value we pass it, we'll temporarily stick our value into
 26597                                  ;	DOS DATA while we're initializing the device drivers.
 26598                                  ;
 26599                                  ;	Note that this will make it impossible for this device
 26600                                  ;	driver to access the DblSpace drive letters, whether
 26601                                  ;	they are swapped-hosts or unswapped compressed drives,
 26602                                  ;	during its initialization phase.
 26603                                  
 26604                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26605                                  	;push	ds
 26606                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26607                                  	;
 26608                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 26609                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 26610                                  	;mov	ah,al
 26611                                  	;
 26612                                  	;xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 26613                                  	;pop	ds
 26614                                  	;
 26615                                  	;push	ax			; save real sysi_numio/ncds in ax
 26616                                  
 26617                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26618                                  	; (SYSINIT:24B9h)
 26619                                  
 26620 000021FE BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 26621 00002201 E8D00E                  	call	calldev 		; calldev (sdevstrat);
 26622 00002204 BB0800                  	mov	bx,SYSDEV.INT ; 8
 26623 00002207 E8CA0E                  	call	calldev 		; calldev (sdevint);
 26624                                  
 26625                                  	; 11/12/2022
 26626                                  	; ds <> cs
 26627                                  
 26628                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26629                                  	;pop	ax			; get real sysi_numio value
 26630                                  	;push	ds
 26631                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26632                                  	;mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 26633                                  	;pop	ds
 26634                                  
 26635                                  	; 11/12/2022
 26636 0000220A 0E                      	push	cs
 26637 0000220B 1F                      	pop	ds
 26638                                  
 26639 0000220C E88905                  	call	TrueInt12Mem
 26640                                  
 26641                                  	; 11/12/2022
 26642                                  	; ds = cs
 26643                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 26644                                  	;mov	[cs:DevBrkAddr],ax
 26645                                  	;mov	ax,[cs:break_addr+2]
 26646                                  	;mov	[cs:DevBrkAddr+2],ax
 26647 0000220F A1[F403]                	mov	ax,[break_addr]	
 26648 00002212 A3[B81E]                	mov	[DevBrkAddr],ax
 26649 00002215 A1[F603]                	mov	ax,[break_addr+2]
 26650 00002218 A3[BA1E]                	mov	[DevBrkAddr+2],ax
 26651                                  
 26652                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26653                                  	;call	RetFromUM		; There we go... all done.
 26654                                  
 26655                                  	; 11/12/2022
 26656 0000221B 803E[BC1E]00            	cmp	byte [DevUMB],0	
 26657                                  	;cmp	byte [cs:DevUMB],0
 26658 00002220 7403                    	je	short tryd_3
 26659 00002222 E83608                  	call	AllocUMB
 26660                                  	; 31/12/2022
 26661                                  	; ds= cs
 26662                                  tryd_3:
 26663                                  
 26664                                  ;ifndef ROMDOS
 26665                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 26666                                  
 26667                                  	; 11/12/2022
 26668                                  	; ds = cs
 26669                                  	
 26670                                  	;cmp	byte [cs:runhigh],0FFh
 26671 00002225 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 26672 0000222A 7503                    	jne	short tryd_4
 26673                                  	
 26674                                  	; 11/12/2022
 26675                                  	; ds = cs
 26676 0000222C E8ADE6                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 26677                                  tryd_4:
 26678                                  ;endif ; ROMDOS
 26679                                  
 26680 0000222F 5E                      	pop	si
 26681 00002230 1F                      	pop	ds
 26682 00002231 C60400                  	mov	byte [si],0		; *p = 0;
 26683                                  
 26684 00002234 0E                      	push	cs
 26685 00002235 1F                      	pop	ds
 26686                                  
 26687 00002236 EB1F                    	jmp	short was_device_com
 26688                                  
 26689                                  ;----------------------------------------------------------------------------
 26690                                  
 26691                                  ;02/04/2019 - Retro DOS v4.0
 26692                                  
 26693                                  badnumblock:
 26694 00002238 0E                      	push	cs
 26695 00002239 1F                      	pop	ds
 26696 0000223A BA[1838]                	mov	dx,badblock
 26697 0000223D E80711                  	call	print
 26698                                  
 26699                                  ;------ fall thru -----------------------------------------------------------
 26700                                  
 26701                                  erase_dev_do:				; modified to show message "error in config.sys..."
 26702                                  	
 26703                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 26704                                  	
 26705 00002240 5E                      	pop	si
 26706 00002241 07                      	pop	es
 26707                                  
 26708 00002242 0E                      	push	cs
 26709 00002243 1F                      	pop	ds
 26710                                  
 26711                                  skip1_resetmemhi:
 26712                                  	; 11/12/2022
 26713                                  	; ds = cs
 26714 00002244 833E[FD03]00            	cmp	word [configmsgflag],0
 26715                                  	;cmp	word [cs:configmsgflag],0
 26716 00002249 7409                    	je	short no_error_line_msg
 26717                                  
 26718 0000224B E8C804                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 26719                                  	; 11/12/2022
 26720                                  	; ds = cs
 26721                                  	;mov	word [cs:configmsgflag],0
 26722 0000224E C706[FD03]0000          	mov	word [configmsgflag],0	; set the default value again.
 26723                                  
 26724                                  no_error_line_msg:
 26725 00002254 E96DFD                  	jmp	coff
 26726                                  
 26727                                  ;----------------------------------------------------------------------------
 26728                                  
 26729                                  was_device_com:
 26730                                  	; 14/12/2022
 26731                                  	; ds = cs
 26732 00002257 A1[BA1E]                	mov	ax,[DevBrkAddr+2]
 26733                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 26734 0000225A 3B06[B21E]              	cmp	ax,[DevLoadEnd]
 26735                                  	;cmp	ax,[cs:DevLoadEnd]
 26736 0000225E 7605                    	jbe	short breakok
 26737                                  
 26738 00002260 5E                      	pop	si
 26739 00002261 07                      	pop	es
 26740 00002262 E93AFF                  	jmp	BadFile
 26741                                  
 26742                                  breakok:
 26743                                  	; 14/12/2022
 26744                                  	; ds = cs
 26745 00002265 C43E[6B02]              	les	di,[DOSINFO] 
 26746 00002269 C516[B41E]              	lds	dx,[DevEntry]
 26747                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 26748 0000226D 89D6                    	mov	si,dx
 26749                                  
 26750                                  	; 14/11/2022
 26751                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 26752                                  
 26753                                  	; 14/12/2022
 26754                                  	; ds <> cs
 26755                                  	
 26756                                  	;mov	ax,[si+4]
 26757 0000226F 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 26758                                  	; 12/12/2022
 26759 00002272 F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 26760                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 26761 00002275 7426                    	jz	short isblock
 26762                                  
 26763                                  ;------ lets deal with character devices
 26764                                  
 26765 00002277 2E800E[3414]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26766 0000227D E8E806                  	call	DevSetBreak		;go ahead and alloc mem for device
 26767                                  jc_edd:
 26768 00002280 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 26769                                  
 26770                                  	; 12/12/2022
 26771 00002282 A801                    	test	al,ISCIN
 26772                                  	;test	ax,ISCIN ; 1		;is it a console in?
 26773 00002284 7408                    	jz	short tryclk
 26774                                  
 26775 00002286 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 26776 0000228A 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 26777                                  tryclk: 
 26778                                  	; 12/12/2022
 26779 0000228E A808                    	test	al,ISCLOCK
 26780                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 26781 00002290 7408                    	jz	short golink
 26782                                  
 26783 00002292 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 26784 00002296 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 26785                                  golink: 
 26786 0000229A E9B000                  	jmp	linkit
 26787                                  
 26788                                  ;------ deal with block device drivers
 26789                                  
 26790                                  isblock:
 26791 0000229D 2EA0[F303]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 26792 000022A1 08C0                    	or	al,al
 26793 000022A3 749B                    	jz	short erase_dev_do
 26794                                  	;mov	[si+10],al
 26795 000022A5 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 26796                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26797                                  	;add	[cs:driver_units],al	; keep total for all drivers in file
 26798                                  perdrv:
 26799 000022A8 98                      	cbw				; warning no device > 127 units
 26800 000022A9 89C1                    	mov	cx,ax
 26801 000022AB 88E6                    	mov	dh,ah
 26802                                  	;mov	dl,[es:di+32]
 26803 000022AD 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 26804 000022B1 88D4                    	mov	ah,dl
 26805 000022B3 00C4                    	add	ah,al			; check for too many devices
 26806 000022B5 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 26807 000022B8 7603                    	jbe	short ok_block
 26808 000022BA E97BFF                  	jmp	badnumblock
 26809                                  
 26810                                  ok_block:
 26811 000022BD 2E800E[3414]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26812 000022C3 E8A206                  	call	DevSetBreak		; alloc the device
 26813 000022C6 72B8                    	jc	short jc_edd
 26814 000022C8 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 26815                                  
 26816 000022CC 2E0006[FC03]            	add	[cs:drivenumber],al	; remember amount for next device
 26817 000022D1 2EC51E[F803]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 26818                                  perunit:
 26819 000022D6 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 26820                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 26821                                  	; 11/12/2022
 26822 000022DB 26C46E00                	les	bp,[es:bp]
 26823                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26824                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 26825                                  scandpb:
 26826                                  	;cmp	word [es:bp+25],-1
 26827 000022DF 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 26828 000022E4 7406                    	je	short foundpb
 26829                                  	;les	bp,[es:bp+25]
 26830 000022E6 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 26831 000022EA EBF3                    	jmp	short scandpb
 26832                                  foundpb:
 26833 000022EC 2EA1[B81E]              	mov	ax,[cs:DevBrkAddr]
 26834 000022F0 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 26835 000022F4 2EA1[BA1E]              	mov	ax,[cs:DevBrkAddr+2]
 26836 000022F8 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 26837                                  
 26838 000022FC 2EC42E[B81E]            	les	bp,[cs:DevBrkAddr]
 26839 00002301 2E8306[B81E]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 26840                                  
 26841 00002307 E83D06                  	call	RoundBreakAddr
 26842                                  
 26843 0000230A 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 26844 00002310 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 26845                                  
 26846 00002315 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 26847 00002317 43                      	inc	bx
 26848 00002318 43                      	inc	bx			;point to next guy
 26849                                  	;mov	[es:bp+DPB.DRIVE],dx
 26850                                  	; 11/12/2022
 26851 00002319 26895600                	mov	[es:bp],dx ; 13/05/2019
 26852                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26853                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 26854                                  	
 26855 0000231D B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 26856 0000231F CD21                    	int	21h
 26857                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 26858                                  			; DS:SI -> BPB (BIOS Parameter Block)
 26859                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 26860                                  
 26861                                  	;mov	ax,[es:bp+2]
 26862 00002321 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 26863 00002325 06                      	push	es
 26864 00002326 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 26865                                  	;cmp	ax,[es:di+10h]
 26866 0000232B 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 26867 0000232F 07                      	pop	es
 26868                                  	;jna	short iblk_1
 26869                                  	;jmp	short bad_bpb_size_sector
 26870                                  	; 29/10/2022
 26871 00002330 775A                    	ja	short bad_bpb_size_sector
 26872                                  iblk_1:
 26873 00002332 1E                      	push	ds
 26874 00002333 52                      	push	dx
 26875                                  
 26876 00002334 2EC516[B41E]            	lds	dx,[cs:DevEntry]
 26877                                  	;mov	[es:bp+13h],dx
 26878 00002339 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 26879                                  	;mov	[es:bp+15h],ds
 26880 0000233D 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 26881                                  
 26882 00002341 5A                      	pop	dx
 26883 00002342 1F                      	pop	ds
 26884                                  
 26885 00002343 42                      	inc	dx
 26886 00002344 FEC6                    	inc	dh
 26887 00002346 E28E                    	loop	perunit
 26888                                  
 26889 00002348 0E                      	push	cs
 26890 00002349 1F                      	pop	ds
 26891                                  
 26892 0000234A E889E8                  	call	TempCDS 		; set cds for new drives
 26893                                  linkit:
 26894 0000234D 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 26895 00002352 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 26896 00002356 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 26897                                  
 26898 0000235A 2EC536[B41E]            	lds	si,[cs:DevEntry]	;ds:si = device location
 26899 0000235F 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 26900 00002363 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 26901 00002367 8B04                    	mov	ax,[si]			;get pointer to next device
 26902 00002369 2EA3[B41E]              	mov	[cs:DevEntry],ax	;and save it
 26903                                  
 26904 0000236D 890C                    	mov	[si],cx			;link in the driver
 26905 0000236F 895402                  	mov	[si+2],dx
 26906                                  enddev:
 26907 00002372 5E                      	pop	si
 26908 00002373 07                      	pop	es
 26909 00002374 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 26910 00002375 740B                    	jz	short coffj3
 26911                                  
 26912 00002377 2EFE06[3114]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 26913 0000237C E80B06                  	call	DevBreak		; M009
 26914                                  	; 11/12/2022
 26915                                  	; ds = cs (DevBreak)
 26916                                  
 26917                                  	; 03/04/2019 - Retro DOS v4.0
 26918                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 26919 0000237F E939FE                  	jmp	goodld			; otherwise pretend we loaded it in
 26920                                  coffj3: 
 26921                                  	; 18/12/2022
 26922                                  	; ax = 0
 26923 00002382 2EA2[3114]              	mov	[cs:multdeviceflag],al ; 0
 26924                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 26925 00002386 E80106                  	call	DevBreak
 26926                                  	; 11/12/2022
 26927                                  	; ds = cs (DevBreak)
 26928                                  	
 26929                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 26930                                  	;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 26931                                  ;					;  created a bogus arena to try
 26932                                  ;					;  to protect some of its resident-
 26933                                  ;					;  init code.
 26934                                  	;call	CheckDoubleSpace
 26935 00002389 E938FC                  	jmp	coff
 26936                                  
 26937                                  ;----------------------------------------------------------------------------
 26938                                  
 26939                                  ;CheckDoubleSpace:
 26940                                  ;;;;	ifdef	dblspace_hooks
 26941                                  ;
 26942                                  ;;	Now check for two special MagicDrv cases:
 26943                                  ;;
 26944                                  ;;       a) the last driver load was MagicDrv final placement:
 26945                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 26946                                  ;;
 26947                                  ;;       b) MagicDrv is currently in temporary home:
 26948                                  ;;          -> call it to give it a chance to mount and shuffle drives
 26949                                  ;
 26950                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 26951                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 26952                                  ;
 26953                                  ;;	Now inquire of driver whether it is present, and final located
 26954                                  ;
 26955                                  ;	mov	ax,multMagicdrv ; 4A11h
 26956                                  ;	mov	bx,MD_VERSION ; 0
 26957                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 26958                                  ;	or	ax,ax			; is it there?
 26959                                  ;	jnz	short no_more_magic_calls ; done if not
 26960                                  ;
 26961                                  ;	test	dx,8000h		; is it final placed?
 26962                                  ;	jnz	short magic_not_yet_home ;  skip if not
 26963                                  ;
 26964                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 26965                                  ;;	don't keep checking it, and add its number of drive letters
 26966                                  ;;	to drivenumber.
 26967                                  ;
 26968                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 26969                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 26970                                  ;;					;  the drive number we'll pass to the
 26971                                  ;;					;  next loadable block device.
 26972                                  ;
 26973                                  ;	jmp	short no_more_magic_calls ; and finished.
 26974                                  ;
 26975                                  ;magic_not_yet_home:
 26976                                  ;	push	es
 26977                                  ;	push	si
 26978                                  ;
 26979                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 26980                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 26981                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 26982                                  ;
 26983                                  ;	mov	bx,2
 26984                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 26985                                  ;;					;   by this many units
 26986                                  ;
 26987                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 26988                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 26989                                  ;;					;  sees this, to prevent bad things
 26990                                  ;;					;  from happening if people run the
 26991                                  ;;					;  new driver with an old BIOS
 26992                                  ;	call	far [cs:MagicBackdoor]
 26993                                  ;
 26994                                  ;	pop	si
 26995                                  ;	pop	es
 26996                                  ;
 26997                                  ;no_more_magic_calls:
 26998                                  ;
 26999                                  ;;;;	endif
 27000                                  ;	retn
 27001                                  
 27002                                  ; 03/04/2019 - Retro DOS v4.0
 27003                                  
 27004                                  bad_bpb_size_sector:
 27005 0000238C 5E                      	pop	si
 27006 0000238D 07                      	pop	es
 27007 0000238E BA[3A37]                	mov	dx,badsiz_pre
 27008 00002391 BB[1837]                	mov	bx,crlfm
 27009 00002394 E88E0F                  	call	prnerr
 27010                                  
 27011 00002397 E92AFC                  	jmp	coff
 27012                                  
 27013                                  ;------------------------------------------------------------------------------
 27014                                  ; country command
 27015                                  ;      the syntax is:
 27016                                  ;	country=country id {,codepage {,path}}
 27017                                  ;	country=country id {,,path}	:default codepage id in dos
 27018                                  ;------------------------------------------------------------------------------
 27019                                  
 27020                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27021                                  	; (SYSINIT:2663h)
 27022                                  tryq:
 27023 0000239A 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 27024 0000239D 7403                    	je	short tryq_cont
 27025                                  skip_it3:
 27026 0000239F E90801                  	jmp	tryf
 27027                                  tryq_cont:
 27028                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27029                                  ;;ifdef	MULTI_CONFIG
 27030                                  ;       call    query_user		; query the user if config_cmd
 27031                                  ;       jc      short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 27032                                  ;;endif
 27033                                  	; 14/12/2022
 27034                                  	; ds = cs
 27035                                  	; bx = 0
 27036                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 27037                                  	;mov	word [cs:p_code_page],0
 27038 000023A2 881E[D033]              	mov	[cntry_drv],bl ; 0
 27039 000023A6 891E[791D]              	mov	[p_code_page],bx ; 0
 27040                                  	
 27041 000023AA BF[421D]                	mov	di,cntry_parms
 27042 000023AD 31C9                    	xor	cx,cx
 27043                                  	; 04/01/2023
 27044                                  	;mov	dx,cx
 27045                                  do52:
 27046 000023AF E8F602                  	call	sysinit_parse
 27047 000023B2 730B                    	jnc	short if52		; parse error,check error code and
 27048                                  
 27049 000023B4 E8E000                  	call	cntry_error		; show message and end the search loop.
 27050                                  	; 14/12/2022
 27051                                  	; ds = cs
 27052 000023B7 C706[771D]FFFF          	mov	word [p_cntry_code],-1
 27053                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 27054 000023BD EB34                    	jmp	short sr52
 27055                                  if52:
 27056 000023BF 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 27057 000023C2 742F                    	jz	short sr52		; then end the search loop
 27058                                  
 27059                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 27060                                  	; 14/12/2022
 27061                                  	; ds = cs
 27062 000023C4 803E[141D]01            	cmp	byte [result_val],_$P_Number	
 27063                                  	;cmp	byte [cs:result_val],_$P_Number
 27064 000023C9 7512                    	jnz	short if56
 27065                                  
 27066                                  	;;mov	ax,[cs:rw_dword]
 27067                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27068                                  	; 14/12/2022
 27069 000023CB A1[181D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27070 000023CE 83F901                  	cmp	cx,1
 27071 000023D1 7505                    	jne	short if57
 27072                                  
 27073                                  	;mov	[cs:p_cntry_code],ax
 27074                                  	; 14/12/2022
 27075 000023D3 A3[771D]                	mov	[p_cntry_code],ax
 27076                                  
 27077                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27078                                  	;jmp	short en57
 27079                                  	; 12/12/2022
 27080                                  	;jmp	short en56
 27081 000023D6 EBD7                    	jmp	short do52
 27082                                  
 27083                                  if57:
 27084                                  	;mov	[cs:p_code_page],ax
 27085                                  	; 14/12/2022
 27086                                  	; ds = cs
 27087 000023D8 A3[791D]                	mov	[p_code_page],ax
 27088                                  en57:
 27089                                  	;jmp	short en56		; path entered
 27090                                  	; 12/12/2022
 27091 000023DB EBD2                    	jmp	short do52
 27092                                  
 27093                                  if56:
 27094 000023DD 1E                      	push	ds
 27095 000023DE 06                      	push	es
 27096 000023DF 56                      	push	si
 27097 000023E0 57                      	push	di
 27098                                  
 27099 000023E1 0E                      	push	cs
 27100 000023E2 07                      	pop	es
 27101                                  
 27102                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 27103                                  	; 14/12/2022
 27104 000023E3 C536[181D]              	lds	si,[rv_dword]
 27105 000023E7 BF[D033]                	mov	di,cntry_drv
 27106 000023EA E8260F                  	call	move_asciiz
 27107                                  
 27108 000023ED 5F                      	pop	di
 27109 000023EE 5E                      	pop	si
 27110 000023EF 07                      	pop	es
 27111 000023F0 1F                      	pop	ds
 27112                                  
 27113                                  en56:
 27114 000023F1 EBBC                    	jmp	short do52
 27115                                  
 27116                                  sr52:
 27117                                  	; 14/12/2022
 27118                                  	; ds = cs
 27119 000023F3 833E[771D]FF            	cmp	word [p_cntry_code],-1
 27120                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 27121 000023F8 7509                    	jne	short tryq_open
 27122 000023FA E9C7FB                  	jmp	coff
 27123                                  
 27124                                  tryqbad:				;"invalid country code or code page"
 27125 000023FD F9                      	stc
 27126 000023FE BA[8137]                	mov     dx,badcountry
 27127 00002401 EB79                    	jmp     tryqchkerr
 27128                                  
 27129                                  tryq_open:
 27130                                  	; 14/12/2022
 27131                                  	; ds = cs
 27132 00002403 803E[D033]00            	cmp	byte [cntry_drv],0
 27133                                  	;cmp	byte [cs:cntry_drv],0
 27134 00002408 7405                    	je	short tryq_def
 27135 0000240A BA[D033]                	mov	dx,cntry_drv
 27136 0000240D EB03                    	jmp	short tryq_openit
 27137                                  
 27138                                  tryq_def:
 27139 0000240F BA[D233]                	mov	dx,cntry_root
 27140                                  tryq_openit:
 27141 00002412 B8003D                  	mov	ax,3D00h		;open a file
 27142 00002415 F9                      	stc
 27143 00002416 CD21                    	int	21h
 27144 00002418 7242                    	jc	short tryqfilebad	;open failure
 27145                                  
 27146                                  	; 14/12/2022
 27147                                  	; ds = cs
 27148 0000241A A3[D803]                	mov	[cntryfilehandle],ax
 27149                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 27150 0000241D 89C3                    	mov	bx,ax
 27151 0000241F A1[771D]                	mov	ax,[p_cntry_code]
 27152 00002422 8B16[791D]              	mov	dx,[p_code_page]
 27153                                  	;mov	ax,[cs:p_cntry_code]
 27154                                  	;mov	dx,[cs:p_code_page]	; now,ax=country id,bx=filehandle
 27155                                  	;mov	cx,[cs:memhi]
 27156 00002426 8B0E[E003]              	mov	cx,[memhi]
 27157 0000242A 81C18001                	add	cx,384			; need 6k buffer to handle country.sys
 27158                                  					; M023
 27159                                  	; 14/12/2022
 27160                                  	; ds = cs
 27161 0000242E 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 27162                                  	;cmp	cx,[cs:ALLOCLIM]
 27163 00002432 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 27164                                  
 27165 00002434 BE[D033]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 27166 00002437 803C00                  	cmp	byte [si],0 		;default path?
 27167 0000243A 7502                    	jne	short tryq_set_for_dos
 27168                                  
 27169 0000243C 46                      	inc	si
 27170 0000243D 46                      	inc	si			;ds:si -> cntry_root
 27171                                  
 27172                                  tryq_set_for_dos:
 27173                                  	; 14/12/2022
 27174                                  	; ds = cs
 27175 0000243E C43E[7702]              	les	di,[sysi_country]
 27176                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 27177 00002442 57                      	push	di			;save di
 27178                                  	;add	di,8
 27179 00002443 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 27180 00002446 E8CA0E                  	call	move_asciiz		;set the path to country.sys in dos.
 27181 00002449 5F                      	pop	di			;es:di -> country info tab again.
 27182                                  
 27183                                  	; 14/12/2022	
 27184 0000244A 8B0E[E003]              	mov	cx,[memhi]
 27185                                  	;mov	cx,[cs:memhi]
 27186 0000244E 8ED9                    	mov	ds,cx
 27187 00002450 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 27188 00002452 E8020D                  	call	setdoscountryinfo	;now do the job!!!
 27189                                  	; ds <> cs ; 14/12/2022
 27190 00002455 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 27191                                  
 27192 00002457 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 27193 0000245A 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 27194                                  
 27195                                  tryqfilebad:
 27196 0000245C 0E                      	push	cs
 27197 0000245D 07                      	pop	es
 27198 0000245E 2E803E[D033]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 27199 00002464 7405                    	je	short tryqdefbad
 27200                                  
 27201 00002466 BE[D033]                	mov	si,cntry_drv
 27202 00002469 EB03                    	jmp	short tryqbadload
 27203                                  
 27204                                  tryqdefbad:				;default file has been used.
 27205 0000246B BE[D233]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 27206                                  tryqbadload:
 27207 0000246E E8AE0E                  	call	badload 		;ds will be restored to sysinit_seg
 27208                                  	;mov	cx,[cs:CONFBOT]
 27209                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27210                                  	;mov	cx,[cs:top_of_cdss]
 27211                                  	; 11/12/2022
 27212                                  	; ds = cs
 27213 00002471 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 27214 00002475 8EC1                    	mov	es,cx			;restore es -> confbot.
 27215 00002477 EB13                    	jmp	short coffj4
 27216                                  
 27217                                  tryqmemory:
 27218 00002479 BA[C437]                	mov	dx,insufmemory
 27219                                  tryqchkerr:
 27220                                  	;mov	cx,[cs:CONFBOT]
 27221                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27222                                  	;mov	cx,[cs:top_of_cdss]
 27223                                  	; 12/12/2022
 27224 0000247C 0E                      	push	cs
 27225 0000247D 1F                      	pop	ds
 27226 0000247E 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 27227 00002482 8EC1                    	mov	es,cx			;restore es -> confbot seg
 27228                                  	;push	cs
 27229                                  	;pop	ds			;restore ds to sysinit_seg
 27230 00002484 7306                    	jnc	short coffj4		;if no error,then exit
 27231                                  
 27232 00002486 E8BE0E                  	call	print			;else show error message
 27233 00002489 E88A02                  	call	error_line
 27234                                  coffj4:
 27235                                  	;mov	bx,[cs:cntryfilehandle]
 27236                                  	; 11/12/2022
 27237                                  	; ds = cs
 27238 0000248C 8B1E[D803]              	mov	bx,[cntryfilehandle]
 27239 00002490 B43E                    	mov	ah,3Eh
 27240 00002492 CD21                    	int	21h			;close a file. don't care even if it fails.
 27241 00002494 E92DFB                  	jmp	coff
 27242                                  
 27243                                  ;--------------------------------------------
 27244                                  
 27245                                  cntry_error:
 27246                                  
 27247                                  ;function: show "invalid country code or code page" messages,or
 27248                                  ;		"error in country command" depending on the error code
 27249                                  ;		in ax returned by sysparse;
 27250                                  ;in:	ax - error code
 27251                                  ;	ds - sysinitseg
 27252                                  ;	es - confbot
 27253                                  ;out:	show message.  dx destroyed.
 27254                                  
 27255 00002497 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 27256 0000249A 7505                    	jne	short if64
 27257 0000249C BA[8137]                	mov	dx,badcountry		;"invalid country code or code page"
 27258 0000249F EB03                    	jmp	short en64
 27259                                  if64:
 27260 000024A1 BA[A737]                	mov	dx,badcountrycom	;"error in contry command"
 27261                                  en64:
 27262 000024A4 E8A00E                  	call	print
 27263                                  	;call	error_line
 27264                                  	;retn
 27265                                  	; 11/12/2022
 27266 000024A7 E96C02                  	jmp	error_line
 27267                                  
 27268                                  ;------------------------------------------------------------------------------
 27269                                  ; files command
 27270                                  ;------------------------------------------------------------------------------
 27271                                  
 27272                                  ;******************************************************************************
 27273                                  ; function: parse the parameters of files= command.			      *
 27274                                  ;									      *
 27275                                  ; input :								      *
 27276                                  ;	es:si -> parameters in command line.				      *
 27277                                  ; output:								      *
 27278                                  ;	variable files set.						      *
 27279                                  ;									      *
 27280                                  ; subroutines to be called:						      *
 27281                                  ;	sysinit_parse							      *
 27282                                  ; logic:								      *
 27283                                  ; {									      *
 27284                                  ;	set di points to files_parms;					      *
 27285                                  ;	set dx,cx to 0; 						      *
 27286                                  ;	while (end of command line)					      *
 27287                                  ;	{ sysinit_parse;						      *
 27288                                  ;	  if (no error) then						      *
 27289                                  ;	     files = result_val._$P_picked_val				      *
 27290                                  ;	  else								      *
 27291                                  ;	     error exit;						      *
 27292                                  ;	};								      *
 27293                                  ; };									      *
 27294                                  ;									      *
 27295                                  ;******************************************************************************
 27296                                  
 27297                                  tryf:
 27298 000024AA 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 27299 000024AD 7523                    	jne	short tryl
 27300                                  
 27301                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27302                                  ;;ifdef	MULTI_CONFIG
 27303                                  ;       call    query_user              ; query the user if config_cmd
 27304                                  ;       jc      short tryl		; has the CONFIG_OPTION_QUERY bit set
 27305                                  ;;endif
 27306                                  
 27307                                  	; 14/12/2022
 27308                                  	; ds = cs
 27309                                  
 27310 000024AF BF[7B1D]                	mov	di,files_parms
 27311 000024B2 31C9                    	xor	cx,cx
 27312                                  	; 04/01/2023
 27313                                  	;mov	dx,cx
 27314                                  do67:
 27315 000024B4 E8F101                  	call	sysinit_parse
 27316 000024B7 7303                    	jnc	short if67		; parse error
 27317                                  	;call	badparm_p		;  and show messages and end the search loop.
 27318                                  	;jmp	short sr67
 27319                                  	; 04/01/2023
 27320 000024B9 E96A01                  	jmp	badparm_p_coff
 27321                                  if67:
 27322 000024BC 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27323 000024BF 7408                    	je	short en67		; then end the $endloop
 27324                                  
 27325                                  	; 14/12/2022
 27326                                  	; ds = cs
 27327                                  	;;mov	al,[cs:rv_dword]
 27328                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27329                                  	;mov	[cs:p_files],al		; save it temporarily
 27330                                  	;mov	al,[rv_dword]
 27331 000024C1 A0[181D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27332 000024C4 A2[9A1D]                	mov	[p_files],al
 27333                                  
 27334 000024C7 EBEB                    	jmp	short do67
 27335                                  en67:
 27336                                  	; 14/12/2022
 27337                                  	; ds = cs
 27338 000024C9 A0[9A1D]                	mov	al,[p_files]
 27339 000024CC A2[9D02]                	mov	[FILES],al	
 27340                                  	;mov	al,[cs:p_files]
 27341                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 27342                                  sr67:
 27343 000024CF E9F2FA                  	jmp	coff
 27344                                  
 27345                                  ; 04/04/2019 - Retro DOS v4.0
 27346                                  
 27347                                  ;------------------------------------------------------------------------------
 27348                                  ; lastdrive command
 27349                                  ;------------------------------------------------------------------------------
 27350                                  
 27351                                  ;******************************************************************************
 27352                                  ; function: parse the parameters of lastdrive= command. 		      *
 27353                                  ;									      *
 27354                                  ; input :								      *
 27355                                  ;	es:si -> parameters in command line.				      *
 27356                                  ; output:								      *
 27357                                  ;	set the variable num_cds.					      *
 27358                                  ;									      *
 27359                                  ; subroutines to be called:						      *
 27360                                  ;	sysinit_parse							      *
 27361                                  ; logic:								      *
 27362                                  ; {									      *
 27363                                  ;	set di points to ldrv_parms;					      *
 27364                                  ;	set dx,cx to 0; 						      *
 27365                                  ;	while (end of command line)					      *
 27366                                  ;	{ sysinit_parse;						      *
 27367                                  ;	  if (no error) then						      *
 27368                                  ;	     set num_cds to the returned value; 			      *
 27369                                  ;	  else	/*error exit*/						      *
 27370                                  ;	     error exit;						      *
 27371                                  ;	};								      *
 27372                                  ; };									      *
 27373                                  ;									      *
 27374                                  ;******************************************************************************
 27375                                  
 27376                                  tryl:
 27377 000024D2 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 27378 000024D5 7523                    	jne	short tryp
 27379                                  
 27380                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27381                                  ;;ifdef	MULTI_CONFIG
 27382                                  ;       call    query_user      ; query the user if config_cmd
 27383                                  ;       jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 27384                                  ;;endif
 27385                                  	; 14/12/2022
 27386                                  	; ds = cs
 27387                                  
 27388 000024D7 BF[D21D]                	mov	di,ldrv_parms
 27389 000024DA 31C9                    	xor	cx,cx
 27390                                  	; 04/01/2023
 27391                                  	;mov	dx,cx
 27392                                  do73:
 27393 000024DC E8C901                  	call	sysinit_parse
 27394 000024DF 7303                    	jnc	short if73	; parse error
 27395                                  	;call	badparm_p	;  and show messages and end the search loop.
 27396                                  	;jmp	short sr73
 27397                                  	; 04/01/2023
 27398 000024E1 E94201                  	jmp	badparm_p_coff
 27399                                  if73:
 27400 000024E4 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27401 000024E7 7408                    	je	short en73	; then end the $endloop
 27402                                  
 27403                                  	; 14/12/2022
 27404                                  	; ds = cs
 27405                                  	;;mov	al,[cs:rv_dword]
 27406                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 27407                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 27408                                  
 27409                                  	;mov	al,[rv_dword]
 27410 000024E9 A0[181D]                	mov	al,[rv_byte]
 27411 000024EC A2[E61D]                	mov	[p_ldrv],al
 27412                                  
 27413 000024EF EBEB                    	jmp	short do73
 27414                                  en73:
 27415                                  	; 14/12/2022
 27416                                  	; ds = cs
 27417 000024F1 A0[E61D]                	mov	al,[p_ldrv]
 27418 000024F4 A2[A002]                	mov	[NUM_CDS],al
 27419                                  	;mov	al,[cs:p_ldrv]
 27420                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 27421                                  sr73:
 27422 000024F7 E9CAFA                  	jmp	coff
 27423                                  
 27424                                  ;--------------------------------------------------------------------------
 27425                                  ; setting drive parameters
 27426                                  ;--------------------------------------------------------------------------
 27427                                  
 27428                                  tryp:
 27429 000024FA 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 27430 000024FD 7511                    	jne	short tryk
 27431                                  
 27432                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27433                                  ;;ifdef	MULTI_CONFIG
 27434                                  ;       call    query_user      ; query the user if config_cmd
 27435                                  ;       jc      short tryk	; has the CONFIG_OPTION_QUERY bit set
 27436                                  ;;endif
 27437                                  
 27438 000024FF E86508                  	call	parseline
 27439 00002502 7209                    	jc	short trypbad
 27440 00002504 E88707                  	call	setparms
 27441 00002507 E8BB07                  	call	diddleback
 27442                                  
 27443                                  ; No error check here, because setparms and diddleback have no error 
 27444                                  ; returns, and setparms as coded now can return with carry set. 
 27445                                  ;       jc	short trypbad
 27446                                  
 27447                                  	; 12/12/2022
 27448                                  	; cf = 0
 27449                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27450                                  	;jc	short trypbad
 27451                                  	
 27452 0000250A E9B7FA                  	jmp	coff
 27453                                  trypbad:
 27454 0000250D E9BB01                  	jmp	badop
 27455                                  
 27456                                  ;--------------------------------------------------------------------------
 27457                                  ; setting internal stack parameters
 27458                                  ; stacks=m,n where
 27459                                  ;	m is the number of stacks (range 8 to 64,default 9)
 27460                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 27461                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 27462                                  ;	any combinations that are not within the specified limits will
 27463                                  ;	result in "unrecognized command" error.
 27464                                  ;--------------------------------------------------------------------------
 27465                                  
 27466                                  ;**************************************************************************
 27467                                  ;									  *
 27468                                  ; function: parse the parameters of stacks= command.			  *
 27469                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 27470                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 27471                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 27472                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 27473                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 27474                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 27475                                  ;	    (or if "0,0" pair has been entered.)			  *
 27476                                  ; input :								  *
 27477                                  ;	es:si -> parameters in command line.				  *
 27478                                  ; output:								  *
 27479                                  ;	set the variables stack_count,stack_size.			  *
 27480                                  ;									  *
 27481                                  ; subroutines to be called:						  *
 27482                                  ;	sysinit_parse							  *
 27483                                  ; logic:								  *
 27484                                  ; {									  *
 27485                                  ;	set di points to stks_parms;					  *
 27486                                  ;	set dx,cx to 0; 						  *
 27487                                  ;	while (end of command line)					  *
 27488                                  ;	{ sysinit_parse;						  *
 27489                                  ;	  if (no error) then						  *
 27490                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 27491                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 27492                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 27493                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 27494                                  ;	     }								  *
 27495                                  ;	  else	/*error exit*/						  *
 27496                                  ;	     error exit;						  *
 27497                                  ;	};								  *
 27498                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 27499                                  ;	if o.k.,then set stack_count,stack_size;			  *
 27500                                  ;	 else error_exit;						  *
 27501                                  ; };									  *
 27502                                  ;**************************************************************************
 27503                                  
 27504                                  tryk:
 27505                                          ;if      stacksw
 27506                                  
 27507 00002510 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 27508 00002513 7402                    	je	short do_tryk
 27509                                  skip_it4:
 27510 00002515 EB74                    	jmp	short trys	; 15/12/2022
 27511                                  do_tryk:
 27512                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27513                                  ;;ifdef	MULTI_CONFIG
 27514                                  ;       call    query_user              ; query the user if config_cmd
 27515                                  ;       jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 27516                                  ;;endif
 27517                                  	; 14/12/2022
 27518                                  	; ds = cs
 27519                                  
 27520 00002517 BF[E71D]                	mov	di,stks_parms
 27521 0000251A 31C9                    	xor	cx,cx
 27522                                  	; 04/01/2023
 27523                                  	;mov	dx,cx
 27524                                  do79:
 27525 0000251C E88901                  	call	sysinit_parse
 27526 0000251F 730B                    	jnc	short if79		; parse error
 27527                                  
 27528 00002521 BA[3338]                	mov	dx,badstack		; "invalid stack parameter"
 27529 00002524 E8200E                  	call	print			;  and show messages and end the search loop.
 27530 00002527 E8EC01                  	call	error_line
 27531                                  	;jmp	sr79
 27532                                  	; 11/12/2022
 27533 0000252A EB39                    	jmp	short sr79
 27534                                  if79:
 27535 0000252C 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27536 0000252F 7412                    	je	short en79		; then end the $endloop
 27537                                  
 27538                                  	; 14/12/2022
 27539                                  	; ds = cs
 27540                                  
 27541                                  	;;mov	ax,[cs:rv_dword]
 27542                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27543                                  	;mov	ax,[rv_dword]
 27544 00002531 A1[181D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27545                                  
 27546 00002534 83F901                  	cmp	cx,1
 27547 00002537 7505                    	jne	short if83
 27548                                  
 27549                                  	; 14/12/2022
 27550                                  	;mov	[cs:p_stack_count],ax
 27551                                  	;jmp	short en83
 27552 00002539 A3[1C1E]                	mov	[p_stack_count],ax
 27553 0000253C EBDE                    	jmp	short do79
 27554                                  if83:
 27555                                  	; 14/12/2022
 27556                                  	;mov	[cs:p_stack_size],ax
 27557 0000253E A3[1E1E]                	mov	[p_stack_size],ax
 27558                                  en83:
 27559 00002541 EBD9                    	jmp	short do79
 27560                                  en79:
 27561                                  	; 14/12/2022
 27562                                  	; ds = cs
 27563 00002543 A1[1C1E]                	mov	ax,[p_stack_count]
 27564 00002546 09C0                    	or	ax,ax
 27565 00002548 741E                    	jz	short if87		
 27566                                  
 27567                                  	; 14/12/2022
 27568                                  	;cmp	word [p_stack_count],0
 27569                                  	;;cmp	word [cs:p_stack_count],0
 27570                                  	;je	short if87
 27571                                  
 27572                                  	; 14/12/2022
 27573 0000254A 83F808                  	cmp	ax, mincount ; 8
 27574                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 27575                                  	; 15/12/2022
 27576 0000254D 721F                    	jb	short en87
 27577 0000254F 833E[1E1E]20            	cmp	word [p_stack_size],minsize ; 32
 27578                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 27579                                  	; 15/12/2022
 27580 00002554 7218                    	jb	short en87
 27581                                  if94:
 27582                                  	; 14/12/2022
 27583                                  	; ds = cs
 27584                                  	; ax = [p_stack_count]
 27585                                  	;mov	ax,[p_stack_count]
 27586                                  	;;mov	ax,[cs:p_stack_count]
 27587 00002556 A3[8A02]                	mov	[stack_count],ax
 27588                                  	;mov	[cs:stack_count],ax
 27589                                  	;mov	ax,[cs:p_stack_size]
 27590 00002559 A1[1E1E]                	mov	ax,[p_stack_size]
 27591                                  	;mov	[cs:stack_size],ax
 27592 0000255C A3[8C02]                	mov	[stack_size],ax
 27593                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27594 0000255F C706[8E02]FFFF          	mov	word [stack_addr],-1
 27595                                  sr79:
 27596 00002565 E95CFA                  	jmp	coff
 27597                                  
 27598                                  if87:
 27599                                  	; 14/12/2022
 27600 00002568 3906[1E1E]              	cmp	[p_stack_size],ax ; 0
 27601 0000256C 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 27602                                  	;cmp	word [cs:p_stack_size],0
 27603                                  	;je	short if94
 27604                                  en87:
 27605                                  	; 15/12/2022
 27606                                  	; ([p_stack_count] is invalid, use default values)
 27607                                  	; 14/12/2022
 27608                                  	; ds = cs
 27609 0000256E C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 27610 00002574 C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 27611 0000257A C706[8E02]0000          	mov	word [stack_addr],0
 27612                                  	;mov	word [cs:stack_count],defaultcount ; 9
 27613                                  	;				; reset to default value.
 27614                                  	;mov	word [cs:stack_size],defaultsize ; 128
 27615                                  	;mov	word [cs:stack_addr],0
 27616                                  
 27617 00002580 BA[3338]                	mov	dx,badstack
 27618 00002583 E8C10D                  	call	print
 27619 00002586 E88D01                  	call	error_line
 27620 00002589 EBDA                    	jmp	short sr79
 27621                                  
 27622                                  ; 15/12/2022
 27623                                  %if 0
 27624                                  	mov	di,stks_parms
 27625                                  	xor	cx,cx
 27626                                  	; 04/01/2023
 27627                                  	;mov	dx,cx
 27628                                  do79:
 27629                                  	call	sysinit_parse
 27630                                  	jnc	short if79		; parse error
 27631                                  
 27632                                  	mov	dx,badstack		; "invalid stack parameter"
 27633                                  	call	print			;  and show messages and end the search loop.
 27634                                  	call	error_line
 27635                                  	;jmp	sr79
 27636                                  	; 11/12/2022
 27637                                  	jmp	short sr79
 27638                                  if79:
 27639                                  	cmp	ax,_$P_RC_EOL		; end of line?
 27640                                  	je	short en79		; then end the $endloop
 27641                                  
 27642                                  	;mov	ax,[cs:rv_dword]
 27643                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27644                                  	cmp	cx,1
 27645                                  	jne	short if83
 27646                                  
 27647                                  	mov	[cs:p_stack_count],ax
 27648                                  	jmp	short en83
 27649                                  if83:
 27650                                  	mov	[cs:p_stack_size],ax
 27651                                  en83:
 27652                                  	jmp	short do79
 27653                                  en79:
 27654                                  	cmp	word [cs:p_stack_count],0
 27655                                  	je	short if87
 27656                                  
 27657                                  	cmp	word [cs:p_stack_count],mincount ; 8
 27658                                  	jb	short ll88
 27659                                  	cmp	word [cs:p_stack_size],minsize ; 32
 27660                                  	jnb	short if88
 27661                                  ll88:
 27662                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27663                                  if88:
 27664                                  	jmp	short en87
 27665                                  
 27666                                  	; 11/12/2022
 27667                                  if94:
 27668                                  	mov	ax,[cs:p_stack_count]
 27669                                  	mov	[cs:stack_count],ax
 27670                                  	mov	ax,[cs:p_stack_size]
 27671                                  	mov	[cs:stack_size],ax
 27672                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27673                                  sr79:
 27674                                  	jmp	coff
 27675                                  
 27676                                  if87:
 27677                                  	cmp	word [cs:p_stack_size],0
 27678                                  	je	short en87
 27679                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27680                                  en87:
 27681                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 27682                                  	jne	short if94
 27683                                  
 27684                                  	mov	word [cs:stack_count],defaultcount ; 9
 27685                                  					; reset to default value.
 27686                                  	mov	word [cs:stack_size],defaultsize ; 128
 27687                                  	mov	word [cs:stack_addr],0
 27688                                  
 27689                                  	mov	dx,badstack
 27690                                  	call	print
 27691                                  	call	error_line
 27692                                  	jmp	short sr79
 27693                                  
 27694                                  %endif
 27695                                  
 27696                                  ; 11/12/2022
 27697                                  %if 0 
 27698                                  
 27699                                  if94:
 27700                                  	mov	ax,[cs:p_stack_count]
 27701                                  	mov	[cs:stack_count],ax
 27702                                  	mov	ax,[cs:p_stack_size]
 27703                                  	mov	[cs:stack_size],ax
 27704                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27705                                  sr79:
 27706                                  	jmp	coff
 27707                                  
 27708                                  %endif
 27709                                  
 27710                                  	;endif
 27711                                  
 27712                                  ;------------------------------------------------------------------------
 27713                                  ; shell command
 27714                                  ;------------------------------------------------------------------------
 27715                                  
 27716                                  trys:
 27717 0000258B 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 27718 0000258E 753C                    	jne	short tryx
 27719                                  
 27720                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27721                                  ;;ifdef	MULTI_CONFIG
 27722                                  ;       call    query_user              ; query the user if config_cmd
 27723                                  ;       jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 27724                                  ;       mov	byte [cs:newcmd],1
 27725                                  ;;endif
 27726                                  
 27727                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 27728                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27729                                  	;mov	byte [cs:command_line+1],0
 27730                                  	; 15/12/2022
 27731                                  	; ds = cs
 27732 00002590 C606[AA02]00            	mov	byte [command_line+1],0
 27733                                  
 27734 00002595 BF[1E34]                        mov     di,commnd+1		; we already have the first char
 27735 00002598 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 27736                                  storeshell:
 27737 0000259B E86101                  	call	getchr
 27738 0000259E 08C0                            or      al,al                   ; this is the normal case: "organize"
 27739 000025A0 7419                            jz	short getshparms	; put a ZERO right after the filename
 27740                                  
 27741 000025A2 3C20                            cmp     al," "                  ; this may happen if there are no args
 27742 000025A4 7205                            jb	short endofshell	; I suppose...
 27743 000025A6 8805                    	mov	[di],al
 27744 000025A8 47                      	inc	di
 27745                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 27746                                          ;jb	short storeshell	; commnd (the filename)
 27747                                          ;jmp	short endofshell
 27748                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27749 000025A9 EBF0                    	jmp	short storeshell
 27750                                  
 27751                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27752                                  ;getshparms:
 27753                                  ;	mov     byte [di],0		; zero-terminate the filename
 27754                                  ;	mov     di,command_line+1	; prepare to process the command-line
 27755                                  ;
 27756                                  ;parmloop:
 27757                                  ;	call	getchr
 27758                                  ;	cmp	al," "
 27759                                  ;	jb	short endofparms
 27760                                  ;	mov	[di],al
 27761                                  ;	inc	di
 27762                                  ;	cmp     di,command_line+126
 27763                                  ;	jb	short parmloop
 27764                                  ;endofparms:
 27765                                  ;	mov     cx,di
 27766                                  ;	sub     cx,command_line+1
 27767                                  ;	mov     [cs:command_line],cl
 27768                                  ;
 27769                                  ;endofshell:
 27770                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 27771                                  ;					; the command-line as the case may be)
 27772                                  ;skipline:
 27773                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27774                                  ;       je	short endofline		; the line: watch for ever-present LF
 27775                                  ;call	getchr
 27776                                  ;       jnc	short skipline		; keep it up as long as there are chars
 27777                                  ;
 27778                                  ;endofline:
 27779                                  ;       jmp     conflp
 27780                                  
 27781                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27782                                  endofshell:
 27783 000025AB C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 27784                                  					; the command-line as the case may be)
 27785 000025AE E84E01                  	call	getchr
 27786                                  skipline:
 27787 000025B1 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27788 000025B3 7403                    	je	short endofline		; the line: watch for ever-present LF
 27789 000025B5 E84701                  	call	getchr
 27790                                  endofline:
 27791 000025B8 E9E4F9                  	jmp     conflp
 27792                                  
 27793                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27794                                  getshparms:
 27795                                  	; 18/12/2022
 27796                                  	; al = 0
 27797 000025BB 8805                    	mov	[di],al ; 0
 27798                                  	;mov	byte [di],0		; zero-terminate the filename
 27799 000025BD BF[AA02]                	mov     di,command_line+1	; prepare to process the command-line
 27800                                  parmloop:
 27801 000025C0 E83C01                  	call	getchr
 27802 000025C3 3C20                    	cmp	al," " ; 20h
 27803 000025C5 72E4                    	jb	short endofshell
 27804 000025C7 8805                    	mov	[di],al
 27805 000025C9 47                      	inc	di
 27806 000025CA EBF4                    	jmp	short parmloop
 27807                                  
 27808                                  ;------------------------------------------------------------------------
 27809                                  ; fcbs command
 27810                                  ;------------------------------------------------------------------------
 27811                                  
 27812                                  ;************************************************************************
 27813                                  ; function: parse the parameters of fcbs= command.			*
 27814                                  ;									*
 27815                                  ; input :								*
 27816                                  ;	es:si -> parameters in command line.				*
 27817                                  ; output:								*
 27818                                  ;	set the variables fcbs,keep.					*
 27819                                  ;									*
 27820                                  ; subroutines to be called:						*
 27821                                  ;	sysinit_parse							*
 27822                                  ; logic:								*
 27823                                  ; {									*
 27824                                  ;	set di points to fcbs_parms;					*
 27825                                  ;	set dx,cx to 0; 						*
 27826                                  ;	while (end of command line)					*
 27827                                  ;	{ sysparse;							*
 27828                                  ;	  if (no error) then						*
 27829                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 27830                                  ;		   fcbs = result_val._$P_picked_val;			*
 27831                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 27832                                  ;		   keep = result_val._$P_picked_val;			*
 27833                                  ;	     }								*
 27834                                  ;	  else	/*error exit*/						*
 27835                                  ;	     error exit;						*
 27836                                  ;	};								*
 27837                                  ; };									*
 27838                                  ;************************************************************************
 27839                                  
 27840                                  tryx:
 27841 000025CC 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 27842                                          ;jne	short try1
 27843                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27844 000025CF 752F                    	jne	short tryy	; comment command
 27845                                  
 27846                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27847                                  ;;ifdef	MULTI_CONFIG
 27848                                  ;       call    query_user      ; query the user if config_cmd
 27849                                  ;       jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 27850                                  ;;endif
 27851                                  
 27852 000025D1 BF[9B1D]                	mov	di,fcbs_parms
 27853 000025D4 31C9                    	xor	cx,cx
 27854                                  	; 04/01/2023
 27855                                  	;mov	dx,cx
 27856                                  do98:
 27857 000025D6 E8CF00                  	call	sysinit_parse
 27858                                          ; 04/01/2023
 27859                                  	;jnc	short if98	; parse error
 27860                                          ;call	badparm_p	;  and show messages and end the search loop.
 27861                                  	;jmp	short sr98
 27862                                  	;------------------------
 27863                                  	; 04/01/2023
 27864 000025D9 724B                    	jc	short badparm_p_coff
 27865                                  if98:
 27866 000025DB 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27867 000025DE 7412                    	je	short en98	; then end the $endloop
 27868                                  
 27869                                  	;;mov	al,[cs:rv_dword]
 27870                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27871                                  	; 15/12/2022
 27872                                  	; ds = cs
 27873 000025E0 A0[181D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27874 000025E3 83F901                  	cmp	cx,1		; the first positional?
 27875 000025E6 7505                    	jne	short if102
 27876                                  	;mov	[cs:p_fcbs],al
 27877                                  	; 15/12/2022
 27878 000025E8 A2[D01D]                	mov	[p_fcbs],al
 27879                                  	;jmp	short en102
 27880 000025EB EBE9                    	jmp	short do98
 27881                                  if102:
 27882                                  	;mov	[cs:p_keep],al
 27883                                  	; 15/12/2022
 27884 000025ED A2[D11D]                	mov	[p_keep],al
 27885                                  en102:
 27886 000025F0 EBE4                    	jmp	short do98
 27887                                  en98:
 27888                                  	; 15/12/2022
 27889                                  	; ds = cs
 27890 000025F2 A0[D01D]                	mov	al,[p_fcbs]
 27891 000025F5 A2[9E02]                	mov	[FCBS],al
 27892 000025F8 C606[9F02]00            	mov	byte [KEEP],0
 27893                                  	;mov	al,[cs:p_fcbs]	 ; M017
 27894                                  	;mov	[cs:FCBS],al	 ; M017
 27895                                  	;mov	byte [cs:KEEP],0 ; M017
 27896                                  sr98:
 27897 000025FD E9C4F9                  	jmp	coff
 27898                                  
 27899                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27900                                  ;-------------------------------------------------------------------------
 27901                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 27902                                  ;		line number
 27903                                  ;-------------------------------------------------------------------------
 27904                                  
 27905                                  tryy:
 27906 00002600 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 27907 00002603 750B                    	jne	short try0
 27908                                  
 27909                                  donothing:
 27910                                  	; 15/12/2022
 27911                                  	; ds = cs
 27912 00002605 FF0E[D603]              	dec	word [chrptr]
 27913 00002609 FF06[D203]              	inc	word [count]
 27914                                  	; 02/11/2022
 27915                                  	;dec	word [cs:chrptr]
 27916                                  	;inc	word [cs:count]
 27917                                  
 27918 0000260D E9B4F9                  	jmp	coff
 27919                                  
 27920                                  ;------------------------------------------------------------------------
 27921                                  ; rem command
 27922                                  ;------------------------------------------------------------------------
 27923                                  
 27924                                  try0:				; do nothing with this line.
 27925 00002610 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 27926 00002613 74F0                    	je	short donothing
 27927                                  
 27928                                  ; 07/04/2019 - Retro DOS v4.0
 27929                                  
 27930                                  ;-----------------------------------------------------------------------
 27931                                  ; switches command
 27932                                  ;-----------------------------------------------------------------------
 27933                                  
 27934                                  ;***********************************************************************
 27935                                  ;								       *
 27936                                  ; function: parse the option switches specified.		       *
 27937                                  ; note - this command is intended for the future use also.	       *
 27938                                  ; when we need to set system data flag,use this command.	       *
 27939                                  ;								       *
 27940                                  ; input :							       *
 27941                                  ;	es:si -> parameters in command line.			       *
 27942                                  ; output:							       *
 27943                                  ;	p_swit_k set if /k option chosen.			       *
 27944                                  ;								       *
 27945                                  ; subroutines to be called:					       *
 27946                                  ;	sysinit_parse						       *
 27947                                  ; logic:							       *
 27948                                  ; {								       *
 27949                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 27950                                  ;	set dx,cx to 0; 					       *
 27951                                  ;	while (end of command line)				       *
 27952                                  ;	{ sysinit_parse;					       *
 27953                                  ;	  if (no error) then					       *
 27954                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 27955                                  ;		    p_swit_k = 1				       *
 27956                                  ;	       endif						       *
 27957                                  ;	  else {show error message;error exit}			       *
 27958                                  ;	};							       *
 27959                                  ; };								       *
 27960                                  ;								       *
 27961                                  ;***********************************************************************
 27962                                  
 27963                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 27964                                  
 27965                                  try1:
 27966 00002615 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 27967 00002618 7402                    	je	short do_try1	; switches= command entered?
 27968                                  skip_it5:
 27969                                  	;jmp	tryv
 27970                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27971 0000261A EB7A                    	jmp	tryz
 27972                                  
 27973                                  do_try1:
 27974                                  
 27975                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27976                                  ;;ifdef	MULTI_CONFIG
 27977                                  ;       call    query_user      ; query the user if config_cmd
 27978                                  ;       jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 27979                                  ;;endif
 27980                                  
 27981 0000261C BF[351E]                	mov	di,swit_parms
 27982 0000261F 31C9                    	xor	cx,cx
 27983                                  	; 04/01/2023
 27984                                  	;mov	dx,cx
 27985                                  do110:
 27986 00002621 E88400                  	call	sysinit_parse
 27987 00002624 7306                    	jnc	short if110	; parse error
 27988                                  	;call	badparm_p	;  and show messages and end the search loop.
 27989                                  	;jmp	short sr110
 27990                                  	; -----------------------
 27991                                  	; 04/01/2023
 27992                                  badparm_p_coff:
 27993 00002626 E8AE00                  	call	badparm_p
 27994 00002629 E998F9                  	jmp	coff
 27995                                  	;------------------------
 27996                                  if110:
 27997 0000262C 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27998 0000262F 742D                    	je	short en110	; then jmp to $endloop for semantic check
 27999                                  
 28000                                  	; 15/12/2022
 28001                                  	; ds = cs
 28002                                  	;;cmp	word [cs:result_val_swoff],swit_k
 28003                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28004 00002631 813E[161D][4D1E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28005 00002637 7507                    	jne	short if115	;				;M059
 28006                                  	; 15/12/2022
 28007 00002639 C606[681E]01            	mov	byte [p_swit_k],1
 28008                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 28009 0000263E EBE1                    	jmp	short do110
 28010                                  if115:	
 28011                                  	; 15/12/2022							;M059
 28012                                  	;;cmp	word [cs:result_val_swoff],swit_t
 28013                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 28014 00002640 813E[161D][591E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 28015 00002646 7507                    	jne	short if116					;M059 M063
 28016                                  	; 15/12/2022
 28017 00002648 C606[691E]01            	mov	byte [p_swit_t],1
 28018                                  	;mov	byte [cs:p_swit_t],1				;M059
 28019 0000264D EBD2                    	jmp	short do110					;M059
 28020                                  if116:
 28021                                  	; 15/12/2022
 28022                                  	;;cmp	word [cs:result_val_swoff],swit_w
 28023                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 28024 0000264F 813E[161D][651E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 28025 00002655 75CA                    	jne	short do110					;M063
 28026                                  	; 15/12/2022
 28027 00002657 C606[6A1E]01            	mov	byte [p_swit_w],1
 28028                                  	;mov	byte [cs:p_swit_w],1				;M063
 28029 0000265C EBC3                    	jmp	short do110					;M063
 28030                                  en110:
 28031                                  	; 15/12/2022
 28032                                  	; ds = cs
 28033 0000265E 803E[681E]01            	cmp	byte [p_swit_k],1
 28034                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 28035 00002663 1E                      	push	ds
 28036                                  	;;mov	ax,Bios_Data
 28037                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 28038                                  	; 21/10/2022
 28039 00002664 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 28040 00002667 8ED8                    	mov	ds,ax
 28041 00002669 750A                    	jne	short if117
 28042 0000266B C606[E504]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 28043 00002670 C606[E604]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 28044                                  if117:
 28045                                  	; 15/12/2022
 28046                                  	; ds <> cs
 28047 00002675 2EA0[691E]              	mov	al,[cs:p_swit_t]				;M059
 28048 00002679 A2[F204]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 28049                                  
 28050 0000267C 2E803E[6A1E]00          	cmp	byte [cs:p_swit_w],0				;M063
 28051 00002682 740E                    	je	short skip_dos_flag				;M063
 28052 00002684 06                      	push	es
 28053 00002685 53                      	push	bx
 28054 00002686 B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 28055 00002688 CD21                    	int	21h						;M063
 28056                                  			; DOS - 2+ internal - GET LIST OF LISTS
 28057                                  			; Return: ES:BX -> DOS list of lists
 28058                                  	;or	bytes [es:86h],2
 28059 0000268A 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 28060 00002690 5B                      	pop	bx
 28061 00002691 07                      	pop	es
 28062                                  skip_dos_flag:							;M063
 28063 00002692 1F                      	pop	ds
 28064                                  sr110:
 28065 00002693 E92EF9                  	jmp	coff
 28066                                  
 28067                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28068                                  ;
 28069                                  ;tryv:
 28070                                  ;
 28071                                  ;;ifdef	MULTI_CONFIG
 28072                                  ;;------------------------------------------------------------------------
 28073                                  ;; set command (as in "set var=value<cr/lf>")
 28074                                  ;;------------------------------------------------------------------------
 28075                                  ;
 28076                                  ;       cmp     ah,CONFIG_SET  ; 'V'
 28077                                  ;       jne	short tryn
 28078                                  ;       call    query_user      ; query the user if config_cmd
 28079                                  ;       jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 28080                                  ;       call    copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 28081                                  ;       jnc	short sr110	; no error
 28082                                  ;err:    
 28083                                  ;	call    error_line      ; whoops, display error in line XXX
 28084                                  ;       jmp     short sr110     ; jump to coff (to skip to next line)
 28085                                  ;
 28086                                  ;;------------------------------------------------------------------------
 28087                                  ;; numlock command (as in "numlock=on|off")
 28088                                  ;;------------------------------------------------------------------------
 28089                                  ;tryn:
 28090                                  ;       cmp     ah,CONFIG_NUMLOCK  ;'N'
 28091                                  ;       jne	short tryy            ;
 28092                                  ;       call    query_user      ; query thye user if config_cmd
 28093                                  ;       jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 28094                                  ;       call    set_numlock
 28095                                  ;       jc	short err
 28096                                  ;       jmp	short sr110	; all done
 28097                                  ;
 28098                                  ;;endif	;MULTI_CONFIG
 28099                                  
 28100                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28101                                  ;;-------------------------------------------------------------------------
 28102                                  ;; comment= do nothing. just decrese chrptr,and increase count for correct
 28103                                  ;;		line number
 28104                                  ;;-------------------------------------------------------------------------
 28105                                  ;
 28106                                  ;tryy:
 28107                                  ;       cmp     ah,CONFIG_COMMENT ; 'Y'
 28108                                  ;	jne	short try0
 28109                                  ;donothing:
 28110                                  ;	dec	word [chrptr]
 28111                                  ;	inc	word [count]
 28112                                  ;	jmp	coff
 28113                                  ;
 28114                                  ;;------------------------------------------------------------------------
 28115                                  ;; rem command
 28116                                  ;;------------------------------------------------------------------------
 28117                                  ;
 28118                                  ;try0:				;do nothing with this line.
 28119                                  ;	cmp     ah,CONFIG_REM ; '0'
 28120                                  ;	je	short donothing
 28121                                  
 28122                                  ; 30/10/2022
 28123                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 28124                                  
 28125                                  ;------------------------------------------------------------------------
 28126                                  ; bogus command
 28127                                  ;------------------------------------------------------------------------
 28128                                  
 28129                                  tryz:
 28130 00002696 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 28131                                  	;je	short donothing
 28132                                  	; 02/11/2022
 28133 00002699 740A                    	je	short tryz_donothing
 28134                                  
 28135 0000269B FF0E[D603]              	dec	word [chrptr]
 28136 0000269F FF06[D203]              	inc	word [count]
 28137 000026A3 EB26                    	jmp	short badop
 28138                                  
 28139                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 28140                                  tryz_donothing:
 28141 000026A5 E95DFF                  	jmp	donothing
 28142                                  
 28143                                  ; 07/04/2019 - Retro DOS v4.0
 28144                                  
 28145                                  ;------------------------------------------------------------------------------
 28146                                  
 28147                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28148                                  ;
 28149                                  ;
 28150                                  ;;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 28151                                  ;;
 28152                                  ;;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 28153                                  ;
 28154                                  ;CheckProtmanArena:
 28155                                  ;	push	es
 28156                                  ;	mov	ax,[cs:area]	; get our arena header
 28157                                  ;	dec	ax
 28158                                  ;	mov	es,ax
 28159                                  ;	add	ax,[es:3]	; find end of arena
 28160                                  ;	inc	ax
 28161                                  ;	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 28162                                  ;	ja	short CheckProtmanDone
 28163                                  ;
 28164                                  ;	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 28165                                  ;CheckProtmanDone:
 28166                                  ;	pop	es
 28167                                  ;	retn
 28168                                  
 28169                                  ;------------------------------------------------------------------------------
 28170                                  
 28171                                  sysinit_parse:
 28172                                  
 28173                                  ;------------------------------------------------------------------------------
 28174                                  ;set up registers for sysparse
 28175                                  ;in)	es:si -> command line in confbot
 28176                                  ;	di -> offset of the parse control definition.
 28177                                  ;
 28178                                  ;out)	calls sysparse.
 28179                                  ;	carry will set if parse error.
 28180                                  ;	*** the caller should check the eol condition by looking at ax
 28181                                  ;	*** after each call.
 28182                                  ;	*** if no parameters are found,then ax will contain a error code.
 28183                                  ;	*** if the caller needs to look at the synomym@ of the result,
 28184                                  ;	***  the caller should use cs:@ instead of es:@.
 28185                                  ;	cx register should be set to 0 at the first time the caller calls this
 28186                                  ;	 procedure.
 28187                                  ;	ax - exit code
 28188                                  ;	bl - terminated delimeter code
 28189                                  ;	cx - new positional ordinal
 28190                                  ;	si - set to pase scanned operand
 28191                                  ;	dx - selected result buffer
 28192                                  ;------------------------------------------------------------------------------
 28193                                  
 28194                                  	; 24/10/2022
 28195 000026A8 06                      	push	es			;save es,ds
 28196 000026A9 1E                      	push	ds
 28197                                  
 28198 000026AA 06                      	push	es
 28199 000026AB 1F                      	pop	ds			;now ds:si -> command line
 28200                                  
 28201 000026AC 0E                      	push	cs
 28202 000026AD 07                      	pop	es			;now es:di -> control definition
 28203                                  
 28204 000026AE 2E8C1E[3714]            	mov	[cs:badparm_seg],ds	;save the pointer to the parm
 28205 000026B3 2E8936[3514]            	mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 28206                                  	;mov	dx,0
 28207                                  	; 04/01/2023
 28208 000026B8 29D2                    	sub	dx,dx ; 0
 28209 000026BA E822EE                  	call	SysParse
 28210 000026BD 83F800                  	cmp	ax,_$P_No_Error	; 0	;no error
 28211                                  
 28212                                  ;**cas note:  when zero true after cmp, carry clear
 28213                                  
 28214                                  	;je	short ll4
 28215                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 28216                                  	; 12/12/2022
 28217 000026C0 7406                    	je	short en4 ; cf=0
 28218 000026C2 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 28219                                  	;jne	short if4
 28220                                  	; 12/12/2022
 28221 000026C5 7401                    	je	short en4 ; cf=0
 28222                                  
 28223                                  ; 12/12/2022
 28224                                  ;ll4:
 28225                                  ;	; 12/12/2022
 28226                                  ;	; cf=0
 28227                                  ;	;clc
 28228                                  ;	jmp	short en4
 28229                                  
 28230                                  if4:
 28231                                  	; 24/10/2022
 28232 000026C7 F9                      	stc
 28233                                  en4:
 28234 000026C8 1F                      	pop	ds
 28235 000026C9 07                      	pop	es
 28236 000026CA C3                      	retn
 28237                                  
 28238                                  ; 11/12/2022
 28239                                  %if 0
 28240                                  
 28241                                  ;----------------------------------------------------------------------------
 28242                                  ;
 28243                                  ; procedure : badop_p
 28244                                  ;
 28245                                  ;             same thing as badop,but will make sure to set ds register back
 28246                                  ;             to sysinitseg and return back to the caller.
 28247                                  ;
 28248                                  ;----------------------------------------------------------------------------
 28249                                  
 28250                                  badop_p:
 28251                                  	push	cs
 28252                                  	pop	ds		;set ds to configsys seg.
 28253                                  	mov	dx,badopm
 28254                                  	call	print
 28255                                          ;call	error_line
 28256                                  	;retn
 28257                                  	; 11/12/2022
 28258                                  	jmp	error_line
 28259                                  
 28260                                  %endif
 28261                                  
 28262                                  ;----------------------------------------------------------------------------
 28263                                  ;
 28264                                  ; label : badop
 28265                                  ;
 28266                                  ;----------------------------------------------------------------------------
 28267                                  
 28268                                  badop:	
 28269 000026CB BA[F436]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 28270 000026CE E8760C                  	call	print
 28271 000026D1 E84200                  	call	error_line	;show "error in config.sys ..." .
 28272 000026D4 E9EDF8                  	jmp	coff
 28273                                  
 28274                                  ;----------------------------------------------------------------------------
 28275                                  ;
 28276                                  ; procedure : badparm_p
 28277                                  ;
 28278                                  ;             show "bad command or parameters - xxxxxx"
 28279                                  ;             in badparm_seg,badparm_off -> xxxxx
 28280                                  ;
 28281                                  ;----------------------------------------------------------------------------
 28282                                  
 28283                                  	; 24/10/2022
 28284                                  badparm_p:
 28285                                  	; 11/12/2022
 28286                                  	; ds = cs
 28287                                  	; 11/12/2022
 28288                                  	;push	ds ; *
 28289 000026D7 52                      	push	dx
 28290 000026D8 56                      	push	si
 28291                                  
 28292                                  	; 11/12/2022
 28293                                  	; ds = cs
 28294                                  	;push	cs
 28295                                  	;pop	ds
 28296                                  
 28297 000026D9 BA[1B37]                	mov	dx,badparm
 28298 000026DC E8680C                  	call	print			; "bad command or parameters - "
 28299 000026DF C536[3514]              	lds	si,[badparm_ptr]
 28300                                  
 28301                                  ;	print "xxxx" until cr.
 28302                                  
 28303                                  do1:
 28304 000026E3 8A14                    	mov	dl,[si]			; get next character
 28305 000026E5 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 28306 000026E8 7407                    	je	short en1		; exit loop if so
 28307                                  
 28308 000026EA B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 28309 000026EC CD21                    	int	21h			; display character
 28310 000026EE 46                      	inc	si			; next character
 28311 000026EF EBF2                    	jmp	short do1
 28312                                  en1:
 28313 000026F1 0E                      	push	cs
 28314 000026F2 1F                      	pop	ds
 28315                                  
 28316 000026F3 BA[1837]                	mov	dx,crlfm
 28317 000026F6 E84E0C                  	call	print
 28318 000026F9 E81A00                  	call	error_line
 28319                                  
 28320 000026FC 5E                      	pop	si
 28321 000026FD 5A                      	pop	dx
 28322                                  	; 11/12/2022
 28323                                  	;pop	ds ; *
 28324                                  badparmp_ret:
 28325 000026FE C3                      	retn
 28326                                  
 28327                                  ;----------------------------------------------------------------------------
 28328                                  ;
 28329                                  ; procedure : getchr
 28330                                  ;
 28331                                  ;----------------------------------------------------------------------------
 28332                                  
 28333                                  	; 24/10/2022
 28334                                  getchr:
 28335                                  	; 12/12/2022
 28336                                  	;push	cx
 28337                                  	;mov	cx,[count]
 28338                                  	;jcxz	nochar
 28339                                  	; 12/12/2022
 28340 000026FF 833E[D203]01            	cmp	word [count],1 
 28341 00002704 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 28342                                  	
 28343 00002706 8B36[D603]              	mov	si,[chrptr]
 28344 0000270A 268A04                  	mov	al,[es:si]
 28345 0000270D FF0E[D203]              	dec	word [count]
 28346 00002711 FF06[D603]              	inc	word [chrptr]
 28347                                  	; 12/12/202
 28348                                  	; cf=0
 28349                                  	;clc
 28350                                  ;get_ret:
 28351                                  	;pop	cx
 28352                                  	;retn
 28353                                  nochar: 
 28354                                  	; 12/12/2022
 28355                                  	; cf=1
 28356                                  	;stc
 28357                                  	;jmp	short get_ret
 28358                                  	
 28359 00002715 C3                      	retn
 28360                                  
 28361                                  ; 11/12/2022
 28362                                  %if 0
 28363                                  
 28364                                  ;----------------------------------------------------------------------------
 28365                                  ;
 28366                                  ; procedure : incorrect_order
 28367                                  ;
 28368                                  ;             show "incorrect order in config.sys ..." message.
 28369                                  ;
 28370                                  ;----------------------------------------------------------------------------
 28371                                  
 28372                                  incorrect_order:
 28373                                  	mov	dx,badorder
 28374                                  	call	print
 28375                                  	call	showlinenum
 28376                                  	retn
 28377                                  
 28378                                  %endif
 28379                                  
 28380                                  ;----------------------------------------------------------------------------
 28381                                  ;
 28382                                  ; procedure : error_line
 28383                                  ;
 28384                                  ;             show "error in config.sys ..." message.
 28385                                  ;
 28386                                  ;----------------------------------------------------------------------------
 28387                                  
 28388                                  	; 11/12/2022
 28389                                  	; 24/10/2022
 28390                                  error_line:
 28391                                  	; 11/12/2022
 28392                                  	; ds = cs
 28393                                  	;push	cs
 28394                                  	;pop	ds
 28395                                  
 28396 00002716 BA[5038]                	mov	dx,errorcmd
 28397 00002719 E82B0C                  	call	print
 28398                                  	;call	showlinenum
 28399                                  	;retn
 28400                                  	; 11/12/2022
 28401                                  	;jmp	short shortlinemum
 28402                                  
 28403                                  ;----------------------------------------------------------------------------
 28404                                  ;
 28405                                  ; procedure : showlinenum
 28406                                  ;
 28407                                  ; convert the binary linecount to decimal ascii string in showcount
 28408                                  ; and display showcount at the current curser position.
 28409                                  ; in.) linecount
 28410                                  ;
 28411                                  ; out) the number is printed.
 28412                                  ;
 28413                                  ;----------------------------------------------------------------------------
 28414                                  
 28415                                  	; 11/12/2022
 28416                                  	; ds = cs
 28417                                  	; 24/10/2022
 28418                                  showlinenum:
 28419 0000271C 06                      	push	es
 28420                                  	; 11/12/2022
 28421                                  	;push	ds
 28422 0000271D 57                      	push	di
 28423                                  
 28424 0000271E 0E                      	push	cs
 28425 0000271F 07                      	pop	es		; es=cs
 28426                                  
 28427                                  	; 11/12/2022
 28428                                  	;push	cs
 28429                                  	;pop	ds
 28430                                  
 28431 00002720 BF[3103]                	mov	di,showcount+4	; di -> the least significant decimal field.
 28432 00002723 B90A00                  	mov	cx,10		; decimal divide factor
 28433                                  	;mov	ax,[cs:linecount]
 28434                                  	; 11/12/2022
 28435 00002726 A1[2B03]                	mov	ax,[linecount]
 28436                                  sln_loop:
 28437                                  	; 11/12/2022
 28438 00002729 39C8                    	cmp	ax,cx ; < 10 ?
 28439                                  	;cmp	ax,10		; < 10?
 28440 0000272B 720C                    	jb	short sln_last
 28441                                  
 28442 0000272D 31D2                    	xor	dx,dx
 28443 0000272F F7F1                    	div	cx	; cx = 10
 28444 00002731 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 28445 00002734 8815                    	mov	[di],dl
 28446 00002736 4F                      	dec	di
 28447 00002737 EBF0                    	jmp	short sln_loop
 28448                                  
 28449                                  sln_last:
 28450 00002739 0C30                    	or	al,30h	; "0"
 28451 0000273B 8805                    	mov	[di],al
 28452 0000273D 89FA                    	mov	dx,di
 28453 0000273F E8050C                  	call	print		; show it.
 28454 00002742 5F                      	pop	di
 28455                                  	; 11/12/2022
 28456                                  	;pop	ds
 28457 00002743 07                      	pop	es
 28458 00002744 C3                      	retn
 28459                                  
 28460                                  ; 07/04/2019 - Retro DOS v4.0
 28461                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 28462                                  
 28463                                  ;----------------------------------------------------------------------------
 28464                                  ;
 28465                                  ; procedure : ProcDOS
 28466                                  ;
 28467                                  ;	Process the result of DOS= parsing
 28468                                  ;
 28469                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 28470                                  ;				= 2 for DOS=LOW
 28471                                  ;				= 3 for DOS=UMB
 28472                                  ;				= 4 for DOS=NOUMB
 28473                                  ;----------------------------------------------------------------------------
 28474                                  
 28475                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 28476                                  	; (SYTSINIT:2AB5h)
 28477                                  ProcDOS:
 28478                                  	; 01/01/2023
 28479                                  	; ds = cs
 28480 00002745 30E4                    	xor	ah,ah
 28481                                  	;;mov	al,[cs:result_val_itag]
 28482                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 28483                                  	; 04/01/2023
 28484 00002747 A0[151D]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 28485 0000274A 48                      	dec	ax
 28486 0000274B 7415                    	jz	short pd_hi
 28487 0000274D 48                      	dec	ax
 28488 0000274E 740E                    	jz	short pd_lo
 28489 00002750 48                      	dec	ax
 28490 00002751 7405                    	jz	short pd_umb
 28491                                  	;;mov	byte [cs:DevUMB],0
 28492                                  	; 18/12/2022
 28493                                  	;mov	byte [cs:DevUMB],ah ; 0
 28494                                  	; 01/01/2023
 28495 00002753 8826[BC1E]              	mov	byte [DevUMB],ah ; 0
 28496 00002757 C3                      	retn
 28497                                  pd_umb:
 28498                                  	; 04/01/2023
 28499 00002758 C606[BC1E]FF            	mov	byte [DevUMB],0FFh
 28500                                  	;mov	byte [cs:DevUMB],0FFh
 28501 0000275D C3                      	retn
 28502                                  pd_lo:
 28503                                  	; 04/01/2023
 28504 0000275E A2[6A02]                	mov	[runhigh],al ; 0
 28505                                  	; 18/12/2022
 28506                                  	;mov	[cs:runhigh],al ; 0
 28507                                  	;;mov	byte [cs:runhigh],0
 28508 00002761 C3                      	retn
 28509                                  pd_hi:
 28510                                  	; 04/01/2023
 28511 00002762 C606[6A02]FF            	mov	byte [runhigh],0FFh
 28512                                  	;mov	byte [cs:runhigh],0FFh
 28513                                  limx:	; 11/12/2022
 28514 00002767 C3                      	retn
 28515                                  
 28516                                  ;----------------------------------------------------------------------------
 28517                                  ;
 28518                                  ; procedure : LieInt12Mem
 28519                                  ;
 28520                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 28521                                  ;		alloclim set to the limit of low memory.
 28522                                  ;
 28523                                  ;	Output : none
 28524                                  ;
 28525                                  ;	Changes the ROM BIOS variable which stores the total low memory
 28526                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 28527                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 28528                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 28529                                  ;	converted into Ks and stored in 40:13h
 28530                                  ;
 28531                                  ;----------------------------------------------------------------------------
 28532                                  
 28533                                  LieInt12Mem:
 28534                                  	; 11/12/2022
 28535                                  	; ds = cs
 28536 00002768 A1[A302]                	mov	ax,[ALLOCLIM]
 28537                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 28538                                  					; assuming that it is 3Com
 28539 0000276B E84400                  	call	IsIt3Com		; Is it 3Com driver?
 28540 0000276E 740A                    	jz	short lim_set		; yes, lie to him differently
 28541                                  	; 13/05/2019
 28542                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 28543                                  	;je	short limx		; no, don't lie
 28544                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 28545                                  	; 11/12/2022
 28546                                  	; ds = cs
 28547 00002770 803E[CB1E]00            	cmp	byte [DeviceHi],0
 28548 00002775 74F0                    	je	short limx
 28549 00002777 A1[B21E]                	mov	ax,[DevLoadEnd]
 28550                                  lim_set:
 28551                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28552                                  	; 11/12/2022
 28553                                  	;call	SetInt12Mem
 28554                                  ;limx:
 28555                                  	;retn
 28556                                  	
 28557                                  	;jmp	short SetInt12Mem 
 28558                                  
 28559                                  ;----------------------------------------------------------------------------
 28560                                  ;
 28561                                  ; procedure : SetInt12Mem
 28562                                  ;
 28563                                  ;	Input : AX = Memory size to be set (in paras)
 28564                                  ;	Output : none
 28565                                  ;
 28566                                  ;	Sets the variable 40:13 to the memory size passed in AX
 28567                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 28568                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 28569                                  ;	restoring the value of 40:13
 28570                                  ;
 28571                                  ;----------------------------------------------------------------------------
 28572                                  
 28573                                  	; 01/11/2022
 28574                                  SetInt12Mem:
 28575 0000277A 1E                      	push	ds
 28576 0000277B BB4000                  	mov	bx,40h
 28577 0000277E 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 28578 00002780 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 28579 00002784 2E891E[CF1E]            	mov	[cs:OldInt12Mem],bx	; save it
 28580 00002789 B106                    	mov	cl,6
 28581 0000278B D3E8                    	shr	ax,cl			; convert paras into Ks
 28582 0000278D A31300                  	mov	[13h],ax		; Lie
 28583 00002790 2EC606[CE1E]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 28584 00002796 1F                      	pop	ds
 28585                                  ;limx:
 28586 00002797 C3                      	retn
 28587                                  
 28588                                  ;----------------------------------------------------------------------------
 28589                                  ;
 28590                                  ; procedure : TrueInt12Mem
 28591                                  ;
 28592                                  ;	Input : Int12Lied = 0 if we are not lying currently
 28593                                  ;			  = 0ffh if we are lying
 28594                                  ;		OldInt12Mem = Saved value of 40:13h
 28595                                  ;
 28596                                  ;	Output : none
 28597                                  ;
 28598                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 28599                                  ;	and resets the flag which indicates that we were lying
 28600                                  ;
 28601                                  ;----------------------------------------------------------------------------
 28602                                  
 28603                                  TrueInt12Mem:
 28604                                  	; 11/12/2022
 28605                                  	; ds = cs
 28606 00002798 803E[CE1E]00            	cmp	byte [Int12Lied],0
 28607                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 28608                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 28609                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 28610 0000279D 7412                    	je	short timx		; no, we weren't
 28611                                  	; 18/12/2022
 28612 0000279F B84000                  	mov	ax,40h
 28613 000027A2 8826[CE1E]              	mov	[Int12Lied],ah ; 0
 28614                                  	;mov	byte [Int12Lied],0
 28615                                  	;mov	byte [cs:Int12Lied],0
 28616 000027A6 1E                      	push	ds
 28617                                  	;mov	ax,40h
 28618 000027A7 8ED8                    	mov	ds,ax
 28619 000027A9 2EA1[CF1E]              	mov	ax,[cs:OldInt12Mem]
 28620 000027AD A31300                  	mov	[13h],ax		; restore INT 12 memory
 28621 000027B0 1F                      	pop	ds
 28622                                  timx:
 28623 000027B1 C3                      	retn
 28624                                  
 28625                                  ;----------------------------------------------------------------------------
 28626                                  ;
 28627                                  ; procedure : IsIt3Com?
 28628                                  ;
 28629                                  ;	Input : DevEntry = Seg:0 of device driver
 28630                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 28631                                  ;		 else Zero flag is reset
 28632                                  ;
 28633                                  ;----------------------------------------------------------------------------
 28634                                  
 28635                                  IsIt3Com:
 28636                                  	; 11/12/2022
 28637                                  	; ds = cs
 28638 000027B2 1E                      	push	ds
 28639 000027B3 06                      	push	es
 28640 000027B4 56                      	push	si
 28641                                  	; 11/12/2022
 28642 000027B5 C536[B41E]              	lds	si,[DevEntry]
 28643                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 28644 000027B9 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 28645 000027BC 0E                      	push	cs
 28646 000027BD 07                      	pop	es
 28647 000027BE BF[D11E]                	mov	di,ThreeComName
 28648 000027C1 B90800                  	mov	cx,8			; name length
 28649 000027C4 F3A6                    	rep	cmpsb
 28650 000027C6 5E                      	pop	si
 28651 000027C7 07                      	pop	es
 28652 000027C8 1F                      	pop	ds
 28653 000027C9 C3                      	retn
 28654                                  
 28655                                  ;M020 : BEGIN
 28656                                  ;----------------------------------------------------------------------------
 28657                                  
 28658                                  UpdatePDB:
 28659 000027CA 1E                      	push	ds
 28660 000027CB B462                    	mov	ah,62h
 28661 000027CD CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 28662 000027CF 8EDB                    	mov	ds,bx
 28663 000027D1 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 28664                                  	;mov	[2],bx
 28665 000027D6 891E0200                	mov	[PDB.BLOCK_LEN],bx
 28666 000027DA 1F                      	pop	ds
 28667 000027DB C3                      	retn
 28668                                  
 28669                                  ; M020 : END
 28670                                  
 28671                                  ;----------------------------------------------------------------------------
 28672                                  
 28673                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28674                                  
 28675                                  %if 0
 28676                                  
 28677                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 28678                                  ;include highexit.inc	; umb's, etc
 28679                                  
 28680                                  ; ----------------------------------------------------------------------
 28681                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 28682                                  ; ----------------------------------------------------------------------
 28683                                  ; 07/04/2019 - Retro DOS v4.0
 28684                                  
 28685                                  ;******************************************************************************
 28686                                  ;
 28687                                  ; This file contains routines needed to parse and implement user-given
 28688                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 28689                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 28690                                  ; the variables in highvar.inc, for use by the rest of the routines.
 28691                                  ;
 28692                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 28693                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 28694                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 28695                                  ;    DH/LH module opts
 28696                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 28697                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 28698                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 28699                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 28700                                  ; available during the load.
 28701                                  ;
 28702                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 28703                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 28704                                  ; upper-memory block which was not specified by the user... in addition, if
 28705                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 28706                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 28707                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 28708                                  ; free any UMBs so allocated.
 28709                                  ;
 28710                                  ; When a device driver loads, there is the additional problem of allocating its
 28711                                  ; initial load site; this should be restricted to the first UMB specified on
 28712                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 28713                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 28714                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 28715                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 28716                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 28717                                  ;
 28718                                  ;******************************************************************************
 28719                                  
 28720                                  SWTCH	equ	'/'		; Switch character
 28721                                  
 28722                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 28723                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 28724                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 28725                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 28726                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 28727                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 28728                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 28729                                  
 28730                                  CR	equ	0Dh		; Carriage Return
 28731                                  LF	equ	0Ah		; Line Feed
 28732                                  TAB	equ	09h		; Tab character (^I)
 28733                                  
 28734                                  ; -----------------------------------------------------------------------------
 28735                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 28736                                  ; -----------------------------------------------------------------------------
 28737                                  ; ENTRY:       None
 28738                                  ; EXIT:        Variables listed in highvar.inc are initialized
 28739                                  ; ERROR EXIT:  None
 28740                                  ; USES:        Flags, variables in highvar.inc
 28741                                  ; -----------------------------------------------------------------------------
 28742                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 28743                                  ; are largely ignored, but it is initialized nonetheless.
 28744                                  ; -----------------------------------------------------------------------------
 28745                                  
 28746                                  InitVar:
 28747                                  	;pushreg <ax, cx, di, es>
 28748                                  	push	ax
 28749                                  	push	cx
 28750                                  	push	di
 28751                                  	push	es
 28752                                  
 28753                                  	;dataseg es			;Point ES into appropriate data segment
 28754                                  	push	cs
 28755                                  	pop	es
 28756                                  
 28757                                  	xor	ax,ax
 28758                                  	mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 28759                                  	mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 28760                                  	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 28761                                  	mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 28762                                  					;Later is the # of the 1st spec'd UMB
 28763                                  	mov	[es:fm_argc], al	;Start with zero args having been read
 28764                                  
 28765                                  	cld
 28766                                  
 28767                                  	mov	cx,MAXUMB ; 16		;For each entry
 28768                                  	mov	di,UmbUsed		;on the UmbUsed array,
 28769                                  	rep	stosb			;	Store 0
 28770                                  
 28771                                  	mov	cx,MAXUMB ; 16		;Okay... for each entry
 28772                                  	mov	di,UmbSize		;on the UmbSize array,
 28773                                  	rep	stosw			;	Store 0
 28774                                  
 28775                                  	;normseg es			; Return ES
 28776                                  
 28777                                  	;popreg	<es, di, cx, ax>
 28778                                  	pop	es
 28779                                  	pop	di
 28780                                  	pop	cx
 28781                                  	pop	ax	 	
 28782                                  
 28783                                  	retn
 28784                                  
 28785                                  ; -----------------------------------------------------------------------------
 28786                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 28787                                  ; -----------------------------------------------------------------------------
 28788                                  ; ENTRY   : None
 28789                                  ; EXIT    : None
 28790                                  ; ERROR   : None
 28791                                  ; USES    : Flags, fm_umb, fm_strat
 28792                                  ; -----------------------------------------------------------------------------
 28793                                  
 28794                                  FixMem:
 28795                                  	push	ax
 28796                                  	push	bx
 28797                                  	push	cx
 28798                                  	push	dx
 28799                                  	push	es
 28800                                  
 28801                                  	call	fm_link		; Link in UMBs
 28802                                  
 28803                                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 28804                                  	jc	short fmX	; (if couldn't get it, leave now).
 28805                                  
 28806                                  	mov	es,ax		; It returns in AX, so move it to ES.
 28807                                  
 28808                                  ; - Walk MCB Chain ------------------------------------------------------------
 28809                                  
 28810                                  	xor	dx,dx		; We're keeping the address of the last MCB
 28811                                  	mov 	cx,dx		; in CX... and the last owner
 28812                                  	inc	dx		; in dx as we go through the loop:
 28813                                  
 28814                                  ; ------------------------------------------
 28815                                  ; FM10--DX  = last MCB's owner's PSP address
 28816                                  ;       CX  = last MCB's address (segment)
 28817                                  ; ------------------------------------------
 28818                                  
 28819                                  fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 28820                                  	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 28821                                  	or	bx,dx			; dx was owner of previous MCB
 28822                                  	jnz	short fm30		; If not both zero, don't cat.
 28823                                  
 28824                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 28825                                  
 28826                                  fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 28827                                  	mov	es,cx			; Go back to prev MCB's address
 28828                                  	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 28829                                  
 28830                                  	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 28831                                  	;add	bx,1			; And add one for the header
 28832                                  	; 14/08/2023
 28833                                  	inc	bx
 28834                                  	mov	[es:ARENA.SIZE],bx	; Write the size
 28835                                  
 28836                                  	; ---------------------------------------------------------------------
 28837                                  
 28838                                  fm30:	mov	cx,es			; Put this address on the stack
 28839                                  	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 28840                                  
 28841                                  	mov	bx,es			; Move to the next MCB
 28842                                  	add	bx,[es:ARENA.SIZE]
 28843                                  	inc	bx
 28844                                  	mov	es,bx
 28845                                  
 28846                                  	;cmp	al,'Z'
 28847                                  	cmp	al,arena_signature_end
 28848                                  	jne	short fm10		; If signature != 'Z', there are more.
 28849                                  fmX:	
 28850                                  	call	fm_unlink		; Unlink UMBs
 28851                                  
 28852                                  	pop	es
 28853                                  	pop	dx
 28854                                  	pop	cx
 28855                                  	pop	bx
 28856                                  	pop	ax
 28857                                  
 28858                                  	retn
 28859                                  
 28860                                  ; -----------------------------------------------------------------------------
 28861                                  ;*** fm_link - links UMBs not already linked in
 28862                                  ; -----------------------------------------------------------------------------
 28863                                  ; ENTRY:    None
 28864                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 28865                                  ; ERROR:    None
 28866                                  ; USES:     AX, BX, fm_umb
 28867                                  ; -----------------------------------------------------------------------------
 28868                                  
 28869                                  fm_link:
 28870                                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 28871                                  	int	21h			; Current link-state is now in al
 28872                                  
 28873                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 28874                                  	;
 28875                                  	;push	es
 28876                                  	;push	cs
 28877                                  	;pop	es
 28878                                  	;mov	[es:fm_umb],al
 28879                                  	;pop	es
 28880                                  	
 28881                                  	mov	[cs:fm_umb],al
 28882                                  
 28883                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28884                                  	mov	bx,1
 28885                                  	int	21h
 28886                                  	retn
 28887                                  
 28888                                  ; -----------------------------------------------------------------------------
 28889                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 28890                                  ; -----------------------------------------------------------------------------
 28891                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 28892                                  ; EXIT:     None
 28893                                  ; ERROR:    None
 28894                                  ; USES:     AX, BX
 28895                                  ; -----------------------------------------------------------------------------
 28896                                  
 28897                                  fm_unlink:
 28898                                  	xor	bx,bx
 28899                                  	
 28900                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 28901                                  	;
 28902                                  	;push	ds
 28903                                  	;push	cs
 28904                                  	;pop	ds
 28905                                  	;mov	bl,[fm_umb]	
 28906                                  	;pop	ds
 28907                                  	
 28908                                  	mov	bl,[cs:fm_umb]
 28909                                  
 28910                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28911                                  	int	21h			; so just use that, and call int 21h
 28912                                  	retn
 28913                                  
 28914                                  ; 08/04/2019 - Retro DOS v4.0
 28915                                  
 28916                                  ; -----------------------------------------------------------------------------
 28917                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 28918                                  ; laid out in highvar.inc
 28919                                  ; -----------------------------------------------------------------------------
 28920                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 28921                                  ; EXIT:     ES:SI points to first character in child program name
 28922                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 28923                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 28924                                  ; -----------------------------------------------------------------------------
 28925                                  ; Error codes (in AX if carry set on return):
 28926                                  ;
 28927                                  PV_InvArg	equ	1	; Invalid argument passed
 28928                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 28929                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 28930                                  ;
 28931                                  ; This routine exects ES:SI to point to a string much like the following:
 28932                                  ;    "/S/L:1,200;2 module options"
 28933                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 28934                                  ; required, though that's what this routine is supposed to parse.
 28935                                  ;
 28936                                  optS		equ	'S'	; /S
 28937                                  optL		equ	'L'	; /L:...
 28938                                  ;
 28939                                  ; -----------------------------------------------------------------------------
 28940                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 28941                                  ; a command-line for spawning a child process. For a typical LH command, say,
 28942                                  ;     lh /l:1,1000;2 print/d:lpt2
 28943                                  ; the arguments would look like (one per line):
 28944                                  ;     lh
 28945                                  ;     /l
 28946                                  ;     1
 28947                                  ;     1000
 28948                                  ;     2
 28949                                  ;     print
 28950                                  ;     /d
 28951                                  ;     :lpt2
 28952                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 28953                                  ; arg was the filename. So, inside this routine, we keep a running counter
 28954                                  ; of the number of arguments LH will need to skip in order to get to the
 28955                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 28956                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 28957                                  ; for:
 28958                                  ;    Each /L
 28959                                  ;    Each /S (there should be only one)
 28960                                  ;    Each UMB number (they follow ":" or ";")
 28961                                  ;    Each UMB size   (they follow ",")
 28962                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 28963                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 28964                                  ; -----------------------------------------------------------------------------
 28965                                  
 28966                                  ParseVar:
 28967                                  	;pushreg <di, ds, es>
 28968                                  	push	di
 28969                                  	push	ds
 28970                                  	push	es
 28971                                  
 28972                                  	push	es		; Make DS:SI point to it, as well as ES:SI
 28973                                  	pop	ds		; (regardless if we're in devhigh or loadhigh)
 28974                                  	cld
 28975                                  
 28976                                  ; ------------------------------------------------
 28977                                  ; PV10--ES:SI = any whitespace on the command-line
 28978                                  ; ------------------------------------------------
 28979                                  
 28980                                  pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 28981                                  	call	isWhite
 28982                                  	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 28983                                  	;cmp	al,'/'
 28984                                  	cmp	al,SWTCH
 28985                                  	je	short pv20	;       ES:SI=="/L..."--go process a switch
 28986                                  
 28987                                  	dec	si		; Backup--it's now "odule options", and we need
 28988                                  	clc			; that "m" we just read (or whatever it is).
 28989                                  	jmp	short pvX	; Then return with carry clear == we're done.
 28990                                  
 28991                                  pv20:	lodsb			; Just read 'S' or 'L', hopefully
 28992                                  	;toUpper al		; So we make it upper-case, and...
 28993                                  	and	al,0DFh
 28994                                  	;cmp	al,'S'
 28995                                  	cmp	al,optS		; just read 'S'?
 28996                                  	jne	short pv30
 28997                                  
 28998                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 28999                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 29000                                  
 29001                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 29002                                  	;
 29003                                  	;push	es
 29004                                  	;push	cs
 29005                                  	;pop	es
 29006                                  	;mov	[es:fUmbTiny],1	
 29007                                  	;pop	es
 29008                                  
 29009                                  	mov	byte [cs:fUmbTiny],1
 29010                                  
 29011                                  	jmp	short pv10	; possibly even "/L...".
 29012                                  
 29013                                  pv30:	;cmp	al,'L'
 29014                                  	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 29015                                  	jne	short pvE1		; switch!
 29016                                  
 29017                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 29018                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 29019                                  
 29020                                  	call	parseL
 29021                                  	jnc	short pv10	; If no carry, go back and look for more
 29022                                  
 29023                                  	dec	si		; Else, back up and exit.
 29024                                  	jmp	short pvErr	; AX has already been set by parseL
 29025                                  
 29026                                  pvE1:	;mov	ax,3
 29027                                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 29028                                  pvErr:	dec	si
 29029                                  	dec	si
 29030                                  	stc
 29031                                  pvX:	;popreg	<es, ds, di>
 29032                                  	pop	es
 29033                                  	pop	ds
 29034                                  	pop	di
 29035                                  	retn
 29036                                  
 29037                                  ; -----------------------------------------------------------------------------
 29038                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 29039                                  ; -----------------------------------------------------------------------------
 29040                                  ; ENTRY:    ES:SI points to colon
 29041                                  ; EXIT:     ES:SI points to first character not parsed
 29042                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 29043                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 29044                                  ; -----------------------------------------------------------------------------
 29045                                  ; If the string here is terminated with anything other than whitespace or a
 29046                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 29047                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 29048                                  ; makes sure the app /L: is reported as being the culprit.
 29049                                  ; -----------------------------------------------------------------------------
 29050                                  
 29051                                  parseL:
 29052                                  	lodsb
 29053                                  	cmp	al,':'		; Make sure they did /L:
 29054                                  	jne	short plE1	; If they didn't, return with carry set.
 29055                                  
 29056                                  ; ------------------------------------------
 29057                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 29058                                  ; ------------------------------------------
 29059                                  
 29060                                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 29061                                  	jc	short plE2	; And error if it's a bad number.
 29062                                  	call	convUMB		; Convert any address to a UMB number
 29063                                  
 29064                                  	mov	cl,al		; Remember the UMB number
 29065                                  	call	stowUMB		; Mark this UMB # as used;
 29066                                  	jc	short plE2	; If it was already marked, it'll error
 29067                                  
 29068                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 29069                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 29070                                  
 29071                                  	lodsb
 29072                                  	cmp	al,';'		; Did "umb;" ?
 29073                                  	je	short pl10	; Yep: go back and get another UMB.
 29074                                  
 29075                                  	call	isWhite		; Did "umb " ?
 29076                                  	jz	short plX	; Yep: return (it'll go back to whitespace)
 29077                                  
 29078                                  	call	isEOL		; Did "umb" ?
 29079                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 29080                                  
 29081                                  	;cmp	al,'/'
 29082                                  	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 29083                                  	je	short plSwX	; If so, back up ES:SI one character and return
 29084                                  
 29085                                  	cmp	al,','		; Did "umb," ?
 29086                                  	jne	short plE1	; Just what the heck DID they do? Return error.
 29087                                  
 29088                                  ; --- Read a size -------------------------------------------------------------
 29089                                  
 29090                                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 29091                                  	jc	short plE1	; And error if it's a bad size.
 29092                                  
 29093                                  	call	toPara		; Convert from bytes to paragraphs
 29094                                  
 29095                                  	call	stowSiz		; CL still has the UMB number for this routine
 29096                                  
 29097                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 29098                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 29099                                  
 29100                                  	lodsb
 29101                                  	cmp	al,';'		; They did "umb,size;", so get another UMB.
 29102                                  	je	short pl10	;
 29103                                  
 29104                                  	call	isWhite		; Did it end with whitespace?
 29105                                  	jz	short plX	; If so, we're done here--go back.
 29106                                  
 29107                                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 29108                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 29109                                  
 29110                                  	;cmp	al,'/'
 29111                                  	cmp	al,SWTCH	; Did they do "umb,size/" ?
 29112                                  	je	short plSwX	; If so, again, we're done here.
 29113                                  plE1:	
 29114                                  	;mov	ax,1
 29115                                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 29116                                  	dec	si
 29117                                  	stc
 29118                                  	retn
 29119                                  
 29120                                  plE2:	;mov	ax,2
 29121                                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 29122                                  	; 12/12/2022
 29123                                  	; cf=1
 29124                                  	;stc
 29125                                  	retn
 29126                                  plSwX:	
 29127                                  	dec	si		; If we hit a '/' character, back up one char
 29128                                  				; so the whitespace checker will see it too.
 29129                                  plX:	; 12/12/2022
 29130                                  	; cf=0
 29131                                  	;clc			; Then just return with carry clear, so
 29132                                  	retn			; ParseVar will go about its business.
 29133                                  
 29134                                  ; -----------------------------------------------------------------------------
 29135                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 29136                                  ; -----------------------------------------------------------------------------
 29137                                  ; ENTRY:    None
 29138                                  ; EXIT:     None
 29139                                  ; ERROR:    None
 29140                                  ; USES:     fm_argc, flags
 29141                                  ; -----------------------------------------------------------------------------
 29142                                  
 29143                                  ;incArgc:
 29144                                  	;push	ax
 29145                                  
 29146                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 29147                                  
 29148                                  	;mov	al,[cs:fm_argc]
 29149                                  
 29150                                  	;inc	al		; Increment it,
 29151                                  
 29152                                  	;;putdata fm_argc, al	; And store it right back.
 29153                                  
 29154                                  	;mov	[cs:fm_argc],al
 29155                                  
 29156                                  	;pop	ax
 29157                                  	;retn
 29158                                  
 29159                                  ; -----------------------------------------------------------------------------
 29160                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 29161                                  ; -----------------------------------------------------------------------------
 29162                                  ; ENTRY:    AL contains character to test
 29163                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 29164                                  ; ERROR:    None
 29165                                  ; USES:     ZF
 29166                                  ; -----------------------------------------------------------------------------
 29167                                  
 29168                                  isEOL:
 29169                                  	cmp	al,0		; Null-terminator
 29170                                  	je	short ieX
 29171                                  	cmp	al,CR ; 0Dh	; Carriage Return
 29172                                  	je	short ieX
 29173                                  	cmp	al,LF ; 0Ah	; LineFeed
 29174                                  ieX:	
 29175                                  	retn
 29176                                  
 29177                                  ; -----------------------------------------------------------------------------
 29178                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 29179                                  ; -----------------------------------------------------------------------------
 29180                                  ; ENTRY:    AL contains character to test
 29181                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 29182                                  ; ERROR:    None
 29183                                  ; USES:     ZF
 29184                                  ; -----------------------------------------------------------------------------
 29185                                  
 29186                                  isWhite:
 29187                                  	cmp	al,' '		; Space
 29188                                  	je	short iwX
 29189                                  	cmp	al,'='		; Equals (treat as whitespace)
 29190                                  	je	short iwX
 29191                                  	cmp	al,tab ; 9	; Tab
 29192                                  iwX:	
 29193                                  	retn
 29194                                  
 29195                                  ; -----------------------------------------------------------------------------
 29196                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 29197                                  ; -----------------------------------------------------------------------------
 29198                                  ; ENTRY:    AL contains UMB number
 29199                                  ; EXIT:     None
 29200                                  ; ERROR:    None
 29201                                  ; USES:     Flags, variables in highvar.inc
 29202                                  ; -----------------------------------------------------------------------------
 29203                                  
 29204                                  unMarkUMB:
 29205                                  	push	ax
 29206                                  	push	bx
 29207                                  	push	di
 29208                                  	push	es
 29209                                  
 29210                                  	push	cs
 29211                                  	pop	es
 29212                                  
 29213                                  	xor	ah,ah
 29214                                  	mov	bx,ax
 29215                                  
 29216                                  	; 19/04/2019
 29217                                  	
 29218                                  	;mov	byte [es:bx+UmbUsed],0
 29219                                  	mov	[es:bx+UmbUsed],ah ; 0
 29220                                  
 29221                                  	cmp	[es:UmbLoad],al
 29222                                  	jne	short umu10
 29223                                  
 29224                                  	;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 29225                                  	mov	[es:UmbLoad],ah ; 0
 29226                                  umu10:	
 29227                                  	pop	es
 29228                                  	pop	di
 29229                                  	pop	bx
 29230                                  	pop	ax
 29231                                  	retn
 29232                                  
 29233                                  ; -----------------------------------------------------------------------------
 29234                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 29235                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 29236                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 29237                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 29238                                  ; -----------------------------------------------------------------------------
 29239                                  ; ENTRY:    AL contains UMB number, as specified by the user
 29240                                  ; EXIT:     None
 29241                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 29242                                  ; USES:     AX, Flags, variables in highvar.inc
 29243                                  ; -----------------------------------------------------------------------------
 29244                                  
 29245                                  stowUMB:
 29246                                  	cmp	al,MAXUMB ; 16
 29247                                  	jb	short su10
 29248                                  	stc
 29249                                  	retn			; Ooops-- UMB>=MAXUMB
 29250                                  su10:	
 29251                                  	push	bx
 29252                                  	push	di
 29253                                  	push	si
 29254                                  	push	ds
 29255                                  	push	es
 29256                                  	push	cs
 29257                                  	pop	es
 29258                                  	push	cs
 29259                                  	pop	ds
 29260                                  	
 29261                                  	;cmp	byte [UmbLoad],0FFh
 29262                                  	cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 29263                                  	jne	short su20
 29264                                  	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 29265                                  su20:	
 29266                                  	or	al,al		; If they gave UMB 0, there's really nothing
 29267                                  	jz	short su30	; that we should do here.
 29268                                  
 29269                                  	mov	bl,al
 29270                                  	xor	bh,bh
 29271                                  	mov	ax,1		; Now, AX = 1, and BX = UMB Number
 29272                                  
 29273                                  	xchg	[es:bx+UmbUsed],al
 29274                                  
 29275                                  	or	al,al		; If it was already 1, then al==1... and that
 29276                                  	jz	short su30	; means an error.
 29277                                  
 29278                                  	stc			; OOOPS!  This one's been used before.  :(
 29279                                  su30:	
 29280                                  	pop	es
 29281                                  	pop	ds
 29282                                  	pop	si
 29283                                  	pop	di
 29284                                  	pop	bx
 29285                                  	retn
 29286                                  
 29287                                  ; -----------------------------------------------------------------------------
 29288                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 29289                                  ; -----------------------------------------------------------------------------
 29290                                  ; ENTRY:    CL contains UMB number, AX contains size
 29291                                  ; EXIT:     None
 29292                                  ; ERROR:    None
 29293                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 29294                                  ; -----------------------------------------------------------------------------
 29295                                  
 29296                                  ; 13/05/2019
 29297                                  
 29298                                  stowSiz:
 29299                                  	push	bx
 29300                                  	;push	di ; ?
 29301                                  	push	es
 29302                                  
 29303                                  	push	cs
 29304                                  	pop	es	
 29305                                  
 29306                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 29307                                  	mov	bh,0			;     bx==UMB number, AX==size
 29308                                  	shl	bl,1			;     bx==offset into array, AX=size
 29309                                  	mov	[es:bx+UmbSize],ax	; Store the size
 29310                                  	
 29311                                  	pop	es
 29312                                  	;pop	di ; ?
 29313                                  	pop	bx
 29314                                  
 29315                                  	retn
 29316                                  
 29317                                  ; -----------------------------------------------------------------------------
 29318                                  ;*** toDigit - converts a character-digit to its binary counterpart
 29319                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 29320                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 29321                                  ; A-F are considered valid iff gnradix is 16.
 29322                                  ; -----------------------------------------------------------------------------
 29323                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 29324                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 29325                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 29326                                  ; USES:     CL, Flags
 29327                                  ; -----------------------------------------------------------------------------
 29328                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29329                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29330                                  ; will be 10 or 16.
 29331                                  ; -----------------------------------------------------------------------------
 29332                                  
 29333                                  gnradix:
 29334                                  	dw	0		; Must be a word--16x16 multiplication
 29335                                  
 29336                                  toDigit:
 29337                                  	cmp	word [cs:gnradix],16
 29338                                  	jne	short td20	; Don't check hex digits if radix isn't 16
 29339                                  
 29340                                  toDigit_hex:
 29341                                  	cmp	cl,'a'	; 61h
 29342                                  	jb	short td10
 29343                                  	cmp	cl,'f'	; 66h
 29344                                  	ja	short tdE	; Nothing valid above 'z' at all...
 29345                                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 29346                                  	;clc			; <- CLC is implicit from last SUB
 29347                                  	retn
 29348                                  td10:	
 29349                                  	cmp	cl,'A'  ; 41h
 29350                                  	jb	short td20	; Below 'A'?  Not a letter...
 29351                                  	cmp	cl,'F'	; 46h
 29352                                  	ja	short tdE	; Above 'F'?  Not a digit.
 29353                                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 29354                                  	;clc			; <- CLC is implicit from last SUB
 29355                                  	retn
 29356                                  toDigit_dec:
 29357                                  td20:	
 29358                                  	cmp	cl,'0'		; If less than zero,
 29359                                  	;jb	short tdE	; Done.
 29360                                  	jb	short tdEr ; 08/04/2019
 29361                                  	cmp	cl,'9'		; Or, if greater than nine,
 29362                                  	ja	short tdE	; Done.
 29363                                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 29364                                  	;clc			; <- CLC is implicit from last SUB
 29365                                  	retn
 29366                                  tdE:	
 29367                                  	stc
 29368                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 29369                                  	retn
 29370                                  
 29371                                  ; -----------------------------------------------------------------------------
 29372                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 29373                                  ; -----------------------------------------------------------------------------
 29374                                  ; ENTRY:    ES:SI points to an ascii string to scan
 29375                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 29376                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 29377                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 29378                                  ; -----------------------------------------------------------------------------
 29379                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29380                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29381                                  ; will be 10 or 16.
 29382                                  ; -----------------------------------------------------------------------------
 29383                                  
 29384                                  ; 08/04/2019 - Retro DOS v4.0
 29385                                  
 29386                                  GetXNum:
 29387                                  	;pushreg <bx, cx, ds>
 29388                                  	push	bx
 29389                                  	push	cx
 29390                                  	push	ds
 29391                                  
 29392                                  	cld
 29393                                  	xor	ax,ax
 29394                                  	xor	bx,bx
 29395                                  	xor	cx,cx
 29396                                  	xor	dx,dx			; Start with 0 (makes sense)
 29397                                  
 29398                                  	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 29399                                  
 29400                                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 29401                                  	;call	toDigit
 29402                                  	call	toDigit_dec
 29403                                  	jc	short gxnE		; If it's not a digit, leave now.
 29404                                  
 29405                                  	or	cl,cl
 29406                                  	jnz	short gxn20		; Doesn't have '0x'
 29407                                  	mov	cl,[es:si+1]
 29408                                  	cmp	cl,'x'			; Either 'x'...
 29409                                  	je	short gxn10
 29410                                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 29411                                  	jne	short gxn20
 29412                                  
 29413                                  gxn10:	
 29414                                  	mov	word [cs:gnradix], 16
 29415                                  	inc	si			; Since we read "0x", march over it.
 29416                                  	inc	si
 29417                                  
 29418                                  ; ------------------------------------------------------
 29419                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 29420                                  ;        DX:AX = current total
 29421                                  ;        BX    = 0
 29422                                  ;        CH    = 0
 29423                                  ; ------------------------------------------------------
 29424                                  
 29425                                  gxn20:	
 29426                                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 29427                                  	inc	si
 29428                                  
 29429                                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 29430                                  	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 29431                                  
 29432                                  	call	mul32		; Multiply DX:AX by gnradix
 29433                                  	jc	short gxnX	; (if it's too big, error out)
 29434                                  
 29435                                  	add	ax,cx		; Add the digit
 29436                                  	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 29437                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 29438                                  	;jmp	short gxn20
 29439                                  	jnc	short gxn20
 29440                                  gxnE:	
 29441                                  	;stc			; In this case, we need to set the carry
 29442                                  	jmp	short gxnX	; and leave--there were no digits given.
 29443                                  gxnQ:	
 29444                                  	dec	si		; Don't read in the offensive character.
 29445                                  	clc			; And clear carry, so they know it's okay.
 29446                                  gxnX:	
 29447                                  	pop	ds
 29448                                  	pop	cx
 29449                                  	pop	bx
 29450                                  	retn
 29451                                  
 29452                                  ; -----------------------------------------------------------------------------
 29453                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 29454                                  ; -----------------------------------------------------------------------------
 29455                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 29456                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 29457                                  ; ERROR:   Carry set if number was too large
 29458                                  ; USES:    Flags, AX, DX
 29459                                  ; -----------------------------------------------------------------------------
 29460                                  
 29461                                  mul32:
 29462                                  	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 29463                                  	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 29464                                  	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 29465                                  	jc	short m32E	; Too big?
 29466                                  
 29467                                  	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 29468                                  	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 29469                                  
 29470                                  	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 29471                                  	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 29472                                  	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29473                                  	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29474                                  	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 29475                                  	retn
 29476                                  m32E:	
 29477                                  	pop	ax
 29478                                  	retn
 29479                                  
 29480                                  ; -----------------------------------------------------------------------------
 29481                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 29482                                  ; -----------------------------------------------------------------------------
 29483                                  ; ENTRY:   DX:AX = the number to be divided
 29484                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 29485                                  ; ERROR:   None
 29486                                  ; USES:    Flags, AX, DX
 29487                                  ; -----------------------------------------------------------------------------
 29488                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 29489                                  ;       can't ensure a 386 host machine. Sorry.
 29490                                  ; -----------------------------------------------------------------------------
 29491                                  
 29492                                  toPara:
 29493                                  	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 29494                                  
 29495                                  	mov	cl,4		;
 29496                                  	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 29497                                  	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 29498                                  	mov	cl,12
 29499                                  	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 29500                                  	or	ax,dx		;    AX=hhhh LLLL llll llll
 29501                                  
 29502                                  	pop	cx
 29503                                  	retn
 29504                                  
 29505                                  ; -----------------------------------------------------------------------------
 29506                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 29507                                  ; -----------------------------------------------------------------------------
 29508                                  ; ENTRY:  Nothing
 29509                                  ; EXIT:   AX contains 0x9FFF for most systems
 29510                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 29511                                  ; USES:   Flags, AX
 29512                                  ; -----------------------------------------------------------------------------
 29513                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 29514                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 29515                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 29516                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 29517                                  ; -----------------------------------------------------------------------------
 29518                                  
 29519                                  UmbHead:
 29520                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 29521                                  
 29522                                  	;push	si ; ?
 29523                                  	;push	ds ; ? 
 29524                                  	;push	es
 29525                                  	;push	bx ; *	
 29526                                  
 29527                                  	; 09/04/2019
 29528                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 29529                                  
 29530                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 29531                                  	int	21h
 29532                                  
 29533                                  	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 29534                                  	cmp	ax,0FFFFh
 29535                                  	je	short uhE		; If it's 0xFFFF, it's an error...
 29536                                  
 29537                                  	clc				; Else, it isn't (CLC done by prev cmp)
 29538                                  	;jmp	short uhX
 29539                                  	; 12/12/2022
 29540                                  	retn
 29541                                  uhE:	
 29542                                  	stc
 29543                                  uhX:	
 29544                                  	;pop	bx ; *
 29545                                  	;pop	es
 29546                                  	;pop	ds ; ?
 29547                                  	;pop	si ; ?
 29548                                  	retn
 29549                                  
 29550                                  ; -----------------------------------------------------------------------------
 29551                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 29552                                  ; -----------------------------------------------------------------------------
 29553                                  ; ENTRY:  ES:0 should point to a valid MCB
 29554                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 29555                                  ; USES:   Flags
 29556                                  ; -----------------------------------------------------------------------------
 29557                                  
 29558                                  isSysMCB:
 29559                                  	;push	ax
 29560                                  
 29561                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 29562                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 29563                                  	;je	short ism10
 29564                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 29565                                  	;;je	short ism10
 29566                                  	;;jmp	short ismX		; Anything else isn't.
 29567                                  	;jne	short ismX
 29568                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 29569                                  	jne	short ismX 
 29570                                  ism10:	
 29571                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 29572                                  	;cmp	ax,'SC' ; 4353h
 29573                                  	cmp	word [es:ARENA.NAME],'SC'
 29574                                  ismX:	
 29575                                  	;pop	ax
 29576                                  	retn
 29577                                  
 29578                                  ; 09/04/2019 - Retro DOS v4.0
 29579                                  
 29580                                  ; -----------------------------------------------------------------------------
 29581                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 29582                                  ; -----------------------------------------------------------------------------
 29583                                  ; ENTRY:  AX contains a segment address
 29584                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 29585                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 29586                                  ; USES:   Flags, AX
 29587                                  ; -----------------------------------------------------------------------------
 29588                                  ; An address in the following areas is treated as:
 29589                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 29590                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 29591                                  ;      ...
 29592                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 29593                                  ; -----------------------------------------------------------------------------
 29594                                  
 29595                                  AddrToUmb:
 29596                                  	push	cx
 29597                                  	push	dx
 29598                                  	push	es
 29599                                  
 29600                                  	mov	dx,ax		; DX = address to search for
 29601                                  
 29602                                  	call	UmbHead		; AX = first segment
 29603                                  	jc	short atuE	; If it couldn't get it, error out.
 29604                                  
 29605                                  	; 14/08/2023
 29606                                  	;mov	es,ax ; *	; ES = first UMB segment
 29607                                  	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 29608                                  
 29609                                  	; 22/07/2023
 29610                                  atu10:
 29611                                  	mov	es,ax ; * ; ** ; 14/08/2023
 29612                                  ; ----------------------------------------
 29613                                  ; ATU10--ES - Current MCB address
 29614                                  ;        DX - Address given for conversion
 29615                                  ;        CX - Current UMB #
 29616                                  ; ----------------------------------------
 29617                                  
 29618                                  ;atu10:	
 29619                                  	;mov	ax,es ; * ; 14/08/2023
 29620                                          cmp	ax,dx		; Present segment >= given segment?
 29621                                  	jae	short atuX	; Yep--done.
 29622                                  
 29623                                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 29624                                  	jnz	short atu20
 29625                                  
 29626                                  	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 29627                                  atu20:	
 29628                                  	;mov	al,[es:ARENA.SIGNATURE]
 29629                                  	;cmp	al,arena_signature_end  ; 'Z'
 29630                                  	; 14/08/2023
 29631                                  	; ax = es
 29632                                  	;mov	ax,es ; **
 29633                                  	add	ax,[es:ARENA.SIZE]
 29634                                  	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 29635                                  	je	short atu30		; 'Z' means this was the last MCB... that's it.
 29636                                  
 29637                                  	;NextMCB es,ax
 29638                                  
 29639                                  	;mov	ax,es ; **
 29640                                  	;;add	ax,[es:3]
 29641                                  	;add	ax,[es:ARENA.SIZE]
 29642                                  	inc	ax
 29643                                  	; 14/08/2023
 29644                                  	;mov	es,ax ; *
 29645                                  	jmp	short atu10
 29646                                  
 29647                                  ; -----------------------------------------------------------------------------
 29648                                  ; if we get to atu30, they specified a number that was past the last MCB.
 29649                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 29650                                  ; -----------------------------------------------------------------------------
 29651                                  
 29652                                  atu30:	
 29653                                  	; 14/08/2023
 29654                                  	; ax = es + [es:ARENA.SIZE] 
 29655                                  	;mov	ax,es ; **
 29656                                  	;add	ax,[es:ARENA.SIZE] ; **
 29657                                  	cmp	ax,dx		; Present >= given?
 29658                                  	jae	short atuX	; Yep! It _was_ inside.
 29659                                  atuE:	
 29660                                  	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 29661                                  	dec	cx		; (that makes it return 0xFFFF and sets CF)
 29662                                  atuX:	
 29663                                  	mov	ax,cx		; Return the UMB number in AX
 29664                                  	
 29665                                  	pop	es	
 29666                                  	pop	dx
 29667                                  	pop	cx
 29668                                  	retn
 29669                                  
 29670                                  ; -----------------------------------------------------------------------------
 29671                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 29672                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 29673                                  ; address rather than a UMB number... and use that address to look up a UMB.
 29674                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 29675                                  ; -----------------------------------------------------------------------------
 29676                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 29677                                  ; EXIT:   AX will contain a UMB number
 29678                                  ; ERROR:  None
 29679                                  ; USES:   Flags, AX
 29680                                  ; -----------------------------------------------------------------------------
 29681                                  
 29682                                  convUMB:
 29683                                  	cmp	word [cs:gnradix],16
 29684                                  	jne	short cu10	; If it didn't read in hex, it's not an address
 29685                                  	call	AddrToUmb	; Else, convert the address to a UMB number
 29686                                  ;cmp	ax,0FFFFh
 29687                                  	;jne	short cu10
 29688                                  	;inc	ax		; If too high, ignore it (make it conventional)
 29689                                  	; 14/08/2023
 29690                                  	inc	ax
 29691                                  	jz	short cu10	; If too high, ignore it (make it conventional)
 29692                                  	dec	ax
 29693                                  cu10:	
 29694                                  	retn
 29695                                  
 29696                                  ; -----------------------------------------------------------------------------
 29697                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 29698                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 29699                                  ; of the usual HIGH_FIRST.  See the code.
 29700                                  ; -----------------------------------------------------------------------------
 29701                                  ; ENTRY:  None
 29702                                  ; EXIT:   None
 29703                                  ; ERROR:  None
 29704                                  ; USES:   Flags, fm_umb, fm_strat
 29705                                  ; -----------------------------------------------------------------------------
 29706                                  
 29707                                  setUMBs:
 29708                                  	push	ax
 29709                                  	push	bx
 29710                                  	call	fm_link
 29711                                  	pop	bx
 29712                                  	pop	ax
 29713                                  	retn
 29714                                  
 29715                                  ; -----------------------------------------------------------------------------
 29716                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 29717                                  ; -----------------------------------------------------------------------------
 29718                                  ; ENTRY:  None
 29719                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 29720                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 29721                                  ; ERROR:  None
 29722                                  ; USES:   Flags, fm_strat, fm_umb
 29723                                  ; -----------------------------------------------------------------------------
 29724                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 29725                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 29726                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 29727                                  ; such that the load UMB is too small, and shouldn't be used.
 29728                                  ; -----------------------------------------------------------------------------
 29729                                  
 29730                                  loadLow:
 29731                                  	;push	ds
 29732                                  	;push	cs		; Point DS into appropriate data segment
 29733                                  	;pop	ds	
 29734                                  
 29735                                  	;mov	al,[UmbLoad]
 29736                                  	mov	al,[cs:UmbLoad]
 29737                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 29738                                  	jne	short ll10
 29739                                  
 29740                                  	stc
 29741                                  ll15:
 29742                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 29743                                  	;stc
 29744                                  	;jmp	short llX
 29745                                  	retn
 29746                                  ll10:	
 29747                                  	or	al,al		; AL=the load UMB: Is it == 0?
 29748                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 29749                                  
 29750                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 29751                                  	retn
 29752                                  
 29753                                  	;mov	al,1
 29754                                  	;clc
 29755                                  ;llX:
 29756                                  	;pop	ds		; Return DS to where it was
 29757                                  	;retn
 29758                                  
 29759                                  ; -----------------------------------------------------------------------------
 29760                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 29761                                  ; -----------------------------------------------------------------------------
 29762                                  ; ENTRY:  None
 29763                                  ; EXIT:   None
 29764                                  ; ERROR:  None
 29765                                  ; USES:   Flags, fm_strat, fm_umb
 29766                                  ; -----------------------------------------------------------------------------
 29767                                  
 29768                                  HideUMBs:
 29769                                  	push	ax
 29770                                  	push	cx
 29771                                  	push	ds
 29772                                  	push	es
 29773                                  
 29774                                  	call	UmbTest		; See if we REALLY linked in anything...
 29775                                  	jc	short husX	; ...if not, there's nothing for us to do.
 29776                                  
 29777                                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 29778                                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 29779                                  
 29780                                  	;putdata fInHigh,1	; Remember that we're now running high
 29781                                  	mov	byte [cs:fInHigh],1
 29782                                  
 29783                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 29784                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 29785                                  
 29786                                  	cmp	al,UNSPECIFIED	; If they didn't,
 29787                                  	je	short husX	; then we shouldn't do this loop:
 29788                                  
 29789                                  	xor	cx,cx
 29790                                  
 29791                                  ; -----------------------------------------------
 29792                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 29793                                  ; -----------------------------------------------
 29794                                  
 29795                                  hus10:	inc	cx		; For each UMB:
 29796                                  	cmp	cx,MAXUMB ; 16
 29797                                  	jae	short hus20
 29798                                  
 29799                                  	mov	al,cl		; (stopping as soon as we're outside of the
 29800                                  	push	es
 29801                                  	call	findUMB		; valid range of UMBs)
 29802                                  	pop	es		; push/pop: trash what findumb finds.  :-)
 29803                                  	jc	short hus20
 29804                                  
 29805                                  	call	_hideUMB_	; hide what we need to hide.
 29806                                  
 29807                                  	jmp	short hus10
 29808                                  hus20:	
 29809                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 29810                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 29811                                  
 29812                                  	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 29813                                  	jnz	short husX	; If not, we're done.
 29814                                  
 29815                                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 29816                                  husX:	
 29817                                  	pop	es
 29818                                  	pop	ds
 29819                                  	pop	cx
 29820                                  	pop	ax
 29821                                  	retn
 29822                                  
 29823                                  ; -----------------------------------------------------------------------------
 29824                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 29825                                  ; -----------------------------------------------------------------------------
 29826                                  ; ENTRY:  None
 29827                                  ; EXIT:   AL == load UMB
 29828                                  ; ERROR:  None
 29829                                  ; USES:   Flags, AX
 29830                                  ; -----------------------------------------------------------------------------
 29831                                  
 29832                                  ;GetLoadUMB:
 29833                                  ;	;getdata al, UmbLoad
 29834                                  ;	push	ds
 29835                                  ;	push	cs
 29836                                  ;	pop	ds
 29837                                  ;	mov	al,[UmLoad]
 29838                                  ;	pop	ds
 29839                                  ;	retn
 29840                                  
 29841                                  ; -----------------------------------------------------------------------------
 29842                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 29843                                  ; -----------------------------------------------------------------------------
 29844                                  ; ENTRY:  None
 29845                                  ; EXIT:   AX == load UMB minimum size
 29846                                  ; ERROR:  None
 29847                                  ; USES:   Flags, AX
 29848                                  ; -----------------------------------------------------------------------------
 29849                                  
 29850                                  GetLoadSize:
 29851                                  	; 09/04/2019 - Retro DOS v4.0
 29852                                  	mov	al,[cs:UmbLoad]
 29853                                  	jmp	short GetSize
 29854                                  
 29855                                  	;push	bx
 29856                                  	;;push	si
 29857                                  	;push	ds
 29858                                  	;push	cs
 29859                                  	;pop	ds
 29860                                  
 29861                                  	;mov	al,[UmbLoad]
 29862                                  
 29863                                  	;xor	ah,ah			;    ax==UMB
 29864                                  	;mov	bx,UmbSize		;    bx==array
 29865                                  	;shl	al,1	                ;    ax==offset
 29866                                  	;;add	ax,bx			;    ax==element index
 29867                                  	;;mov	si,ax			; ds:si==element index
 29868                                  
 29869                                  	;;lodsw				;    ax==size
 29870                                  
 29871                                  	;add	bx,ax
 29872                                  	;mov	ax,[bx]
 29873                                  
 29874                                  	;pop	ds
 29875                                  	;;pop	si
 29876                                  	;pop	bx
 29877                                  	;retn
 29878                                  
 29879                                  ; -----------------------------------------------------------------------------
 29880                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 29881                                  ; -----------------------------------------------------------------------------
 29882                                  ; ENTRY:  AL == a UMB number
 29883                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 29884                                  ; ERROR:  None
 29885                                  ; USES:   Flags, AX
 29886                                  ; -----------------------------------------------------------------------------
 29887                                  
 29888                                  GetSize:
 29889                                  	; 09/04/2019 - Retro DOS v4.0
 29890                                  
 29891                                  	push	bx
 29892                                  	;push	si
 29893                                  	;push	ds
 29894                                  	;push	cs
 29895                                  	;pop	ds
 29896                                  
 29897                                  	xor	ah,ah			;    ax==UMB
 29898                                  	mov	bx,UmbSize		;    bx==array
 29899                                  	shl	al,1	                ;    ax==offset
 29900                                  	;add	ax,bx			;    ax==element index
 29901                                  	;mov	si,ax			; ds:si==element index
 29902                                  
 29903                                  	;lodsw				;    ax==size
 29904                                  
 29905                                  	add	bx,ax
 29906                                  	;mov	ax,[bx]
 29907                                  	mov	ax,[cs:bx]
 29908                                  
 29909                                  	;pop	ds
 29910                                  	;pop	si
 29911                                  	pop	bx
 29912                                  	retn
 29913                                  
 29914                                  ; -----------------------------------------------------------------------------
 29915                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 29916                                  ; -----------------------------------------------------------------------------
 29917                                  ; ENTRY:   AL == new load UMB
 29918                                  ; EXIT:    None
 29919                                  ; ERROR:   None
 29920                                  ; USES:    Flags, AX
 29921                                  ; -----------------------------------------------------------------------------
 29922                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 29923                                  ;          time you would ever need this, so that's okay.
 29924                                  ; -----------------------------------------------------------------------------
 29925                                  
 29926                                  ;StoLoadUMB:
 29927                                  ;	;putdata UmbLoad, al
 29928                                  ;	push	es
 29929                                  ;	push	cs
 29930                                  ;	pop	es
 29931                                  ;	mov	[es:UmbLoad],al
 29932                                  ;	pop	es
 29933                                  ;	retn
 29934                                  
 29935                                  ; -----------------------------------------------------------------------------
 29936                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 29937                                  ; -----------------------------------------------------------------------------
 29938                                  ; ENTRY:  AL == new load size
 29939                                  ; EXIT:   None
 29940                                  ; ERROR:  None
 29941                                  ; USES:   Flags, AX
 29942                                  ; -----------------------------------------------------------------------------
 29943                                  
 29944                                  StoLoadSize:
 29945                                  	push	dx
 29946                                  
 29947                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 29948                                  	;
 29949                                  	;push	ds
 29950                                  	;push	cs
 29951                                  	;pop	ds
 29952                                  	;mov	dl,[UmbLoad]
 29953                                  	;pop	ds	
 29954                                  
 29955                                  	mov	dl,[cs:UmbLoad]
 29956                                  
 29957                                  	cmp	dl,UNSPECIFIED ; 0FFh
 29958                                  	je	short sls10
 29959                                  
 29960                                  	call	stowSiz			; We've got a function to do just this
 29961                                  sls10:	
 29962                                  	pop	dx
 29963                                  	retn
 29964                                  
 29965                                  ; -----------------------------------------------------------------------------
 29966                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 29967                                  ; -----------------------------------------------------------------------------
 29968                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 29969                                  ; EXIT:     None; free elements in UMB marked as hidden
 29970                                  ; ERROR:    None
 29971                                  ; USES:     Flags
 29972                                  ; -----------------------------------------------------------------------------
 29973                                  
 29974                                  hideUMB:
 29975                                  	push	ax
 29976                                  	push	es
 29977                                  
 29978                                  	call	findUMB		; Returns with carry if err, else ES == MCB
 29979                                  	jc	short huX
 29980                                  
 29981                                  ; ------------------------------------------------
 29982                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 29983                                  ;            we're not in the same UMB, so exit.
 29984                                  ; ------------------------------------------------
 29985                                  
 29986                                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 29987                                  	jz	short huX	; If it is, we've finished the UMB.
 29988                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 29989                                  	or	word [es:ARENA.OWNER],0
 29990                                  	jnz	short hu20
 29991                                  
 29992                                  	call	hideMCB
 29993                                  hu20:	
 29994                                  	mov	al,[es:ARENA.SIGNATURE]
 29995                                  	cmp	al,arena_signature_end  ;'Z'
 29996                                  	jz	short huX	; 'Z' means this was the last MCB... that's it.
 29997                                  
 29998                                  	;NextMCB es, ax		; Go on forward.
 29999                                  	mov     ax,es
 30000                                  	;add	ax,[es:3]
 30001                                  	add     ax,[es:ARENA.SIZE]
 30002                                  	inc     ax
 30003                                  	mov     es,ax
 30004                                  
 30005                                  	jmp	short hu10
 30006                                  huX:	
 30007                                  	pop	es
 30008                                  	pop	ax
 30009                                  	retn
 30010                                  
 30011                                  ; -----------------------------------------------------------------------------
 30012                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 30013                                  ; -----------------------------------------------------------------------------
 30014                                  ; ENTRY:    None
 30015                                  ; EXIT:     ZF set if user DIDN'T specify /S
 30016                                  ; ERROR:    None
 30017                                  ; USES:     Flags
 30018                                  ; -----------------------------------------------------------------------------
 30019                                  
 30020                                  isTiny:
 30021                                  	push	ax
 30022                                  
 30023                                  	;getdata al, fUmbTiny
 30024                                  	;
 30025                                  	;push	ds
 30026                                  	;push	cs
 30027                                  	;pop	ds
 30028                                  	;mov	al,[fUmbTiny]
 30029                                  	;pop	ds
 30030                                  
 30031                                  	mov	al,[cs:fUmbTiny]		
 30032                                  
 30033                                  	or	al,al
 30034                                  	pop	ax
 30035                                  	retn
 30036                                  
 30037                                  ; -----------------------------------------------------------------------------
 30038                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 30039                                  ; -----------------------------------------------------------------------------
 30040                                  ; ENTRY:    ES:0 should point to an MCB
 30041                                  ; EXIT:     ZF set if MCB is free, else !ZF
 30042                                  ; ERROR:    None
 30043                                  ; USES:     Flags
 30044                                  ; -----------------------------------------------------------------------------
 30045                                  
 30046                                  ;isFreeMCB:
 30047                                  ;	or	word [es:ARENA.OWNER],0
 30048                                  ;	retn
 30049                                  
 30050                                  ; -----------------------------------------------------------------------------
 30051                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 30052                                  ; -----------------------------------------------------------------------------
 30053                                  ; ENTRY:    ES:0 should point to an MCB
 30054                                  ; EXIT:     None; MCB marked as HIDDEN
 30055                                  ; ERROR:    None
 30056                                  ; USES:     None
 30057                                  ; -----------------------------------------------------------------------------
 30058                                  
 30059                                  hideMCB:
 30060                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30061                                  	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 30062                                  	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 30063                                  	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 30064                                  	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 30065                                  	retn
 30066                                  
 30067                                  ; -----------------------------------------------------------------------------
 30068                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 30069                                  ; -----------------------------------------------------------------------------
 30070                                  ; ENTRY:    ES:0 should point to an MCB
 30071                                  ; EXIT:     None; MCB marked as FREE
 30072                                  ; ERROR:    None
 30073                                  ; USES:     None
 30074                                  ; -----------------------------------------------------------------------------
 30075                                  
 30076                                  unHideMCB:
 30077                                  	push	ax
 30078                                  	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 30079                                  	mov	ax,'  ' ; 2020h
 30080                                  	mov	[es:ARENA.NAME+0],ax
 30081                                  	mov	[es:ARENA.NAME+2],ax
 30082                                  	mov	[es:ARENA.NAME+4],ax
 30083                                  	mov	[es:ARENA.NAME+6],ax
 30084                                  	pop	ax
 30085                                  	retn
 30086                                  
 30087                                  ; -----------------------------------------------------------------------------
 30088                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 30089                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 30090                                  ; -----------------------------------------------------------------------------
 30091                                  ; ENTRY:    AL should be to a valid UMB number
 30092                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 30093                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 30094                                  ; USES:     Flags, ES
 30095                                  ; -----------------------------------------------------------------------------
 30096                                  
 30097                                  findUMB:
 30098                                  	push	ax
 30099                                  	push	cx
 30100                                  	push	dx
 30101                                  
 30102                                  	xor	ah,ah		; Zap ah, so al==ax
 30103                                  
 30104                                  	mov	dx,ax		; Store the to-be-found UMB number in DX
 30105                                  
 30106                                  	call	UmbHead		; Returns first UMB segment in AX
 30107                                  	mov	es,ax
 30108                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30109                                  
 30110                                  ; ---------------------------------------------
 30111                                  ; FU10--CX - This UMB number; 0 == conventional
 30112                                  ;       DX - The UMB number they're looking for
 30113                                  ;       ES - The current MCB address
 30114                                  ; ---------------------------------------------
 30115                                  
 30116                                  fu10:	
 30117                                  	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 30118                                  	je	short fuX	; searching for--so exit.
 30119                                  
 30120                                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30121                                  	jnz	short fu20
 30122                                  
 30123                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30124                                  fu20:	
 30125                                  	mov	al,[es:ARENA.SIGNATURE]
 30126                                  	cmp	al,arena_signature_end ; 'Z'
 30127                                  	je	short fuE	; 'Z' means this was the last MCB... that's it.
 30128                                  
 30129                                  	;NextMCB es, ax		; Go on forward.
 30130                                  	mov     ax,es
 30131                                  	;add	ax,[es:3]
 30132                                  	add     ax,[es:ARENA.SIZE]
 30133                                  	inc     ax
 30134                                  	mov     es,ax
 30135                                  
 30136                                  	jmp	short fu10
 30137                                  fuE:	
 30138                                  	stc
 30139                                  fuX:
 30140                                  	pop	dx
 30141                                  	pop	cx
 30142                                  	pop	ax		; The address is already in ES.
 30143                                  	retn
 30144                                  
 30145                                  ; -----------------------------------------------------------------------------
 30146                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 30147                                  ; -----------------------------------------------------------------------------
 30148                                  ; ENTRY:    AL should be to a valid UMB number
 30149                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 30150                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 30151                                  ; USES:     Flags, ES
 30152                                  ; -----------------------------------------------------------------------------
 30153                                  
 30154                                  BigFree:
 30155                                  	push	bx
 30156                                  	push	cx
 30157                                  
 30158                                  	call	findUMB			; Returns with CF if err, else ES==MCB
 30159                                  	jc	short bfX		; (would be "jc bfE"; it just does stc)
 30160                                  
 30161                                  	xor	bx,bx			; Segment address of largest free MCB
 30162                                  	xor	cx,cx			; Size of largest free MCB
 30163                                  
 30164                                  ; ---------------------------------------------
 30165                                  ; BF10--ES - Current MCB address
 30166                                  ;       BX - Address of largest free MCB so far
 30167                                  ;       CX - Size of largest free MCB so far
 30168                                  ; ---------------------------------------------
 30169                                  
 30170                                  bf10:	
 30171                                  	call	isSysMCB		; If we've left the MCB, we're done.
 30172                                  	jz	short bf30
 30173                                  
 30174                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 30175                                  	or	word [es:ARENA.OWNER],0
 30176                                  	jnz	short bf20
 30177                                  
 30178                                  	mov	ax,[es:ARENA.SIZE]
 30179                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 30180                                  	cmp	cx,ax
 30181                                  	jg	short bf20		; Unless we're bigger,
 30182                                  
 30183                                  	mov	bx,es			; Store this new element's address,
 30184                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 30185                                  	mov	cx,ax
 30186                                  
 30187                                  bf20:	mov	al,[es:ARENA.SIGNATURE]
 30188                                  	cmp	al,arena_signature_end	; 'Z'
 30189                                  	jz	short bf30		; 'Z' means this was the last MCB.
 30190                                  
 30191                                  	;NextMCB es,ax		; Go on forward.
 30192                                  	mov     ax,es
 30193                                  	;add	ax,[es:3]
 30194                                  	add     ax,[es:ARENA.SIZE]
 30195                                  	inc     ax
 30196                                  	mov     es,ax
 30197                                  
 30198                                  	jmp	short bf10
 30199                                  
 30200                                  bf30:	mov	es,bx			; Return the address
 30201                                  	mov	ax,cx			; Return the size
 30202                                  	or	bx,bx
 30203                                  	jnz	short bfX		; (if size==0, there's nothing free)
 30204                                  bfE:	
 30205                                  	stc
 30206                                  bfX:
 30207                                  	pop	cx
 30208                                  	pop	bx
 30209                                  	retn
 30210                                  
 30211                                  ; -----------------------------------------------------------------------------
 30212                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 30213                                  ; -----------------------------------------------------------------------------
 30214                                  ; ENTRY:    AL should be to a valid UMB number
 30215                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 30216                                  ; ERROR:    None
 30217                                  ; USES:     Flags
 30218                                  ; -----------------------------------------------------------------------------
 30219                                  
 30220                                  isSpecified:
 30221                                  	push	ax
 30222                                  
 30223                                  	xor	bh,bh
 30224                                  	mov	bl,al
 30225                                  
 30226                                  	;getdata al, DS:UmbUsed[bx]
 30227                                  	;
 30228                                  	;push	ds
 30229                                  	;push	cs
 30230                                  	;pop	ds
 30231                                  	;mov	al,[bx+UmbUsed]
 30232                                  	;pop	ds
 30233                                  	
 30234                                  	mov	al,[cs:bx+UmbUsed]
 30235                                  	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 30236                                  
 30237                                  	pop	ax
 30238                                  	retn
 30239                                  
 30240                                  ; -----------------------------------------------------------------------------
 30241                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 30242                                  ; -----------------------------------------------------------------------------
 30243                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 30244                                  ; EXIT:     None; MCB broken if carry clear
 30245                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 30246                                  ; USES:     Flags
 30247                                  ; -----------------------------------------------------------------------------
 30248                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 30249                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 30250                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 30251                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 30252                                  ; minimum for performing a split.
 30253                                  ; -----------------------------------------------------------------------------
 30254                                  
 30255                                  MIN_SPLIT_SIZE	equ	20h
 30256                                  
 30257                                  shrinkMCB:
 30258                                  	;pushreg <bx, cx, es>
 30259                                  	push	bx
 30260                                  	push	cx
 30261                                  	push	es
 30262                                  
 30263                                  	mov	bx,ax			; Move things around... and
 30264                                  	mov	ax,es			; save this one for later.
 30265                                  
 30266                                  	mov	cx,[es:ARENA.SIZE]
 30267                                  	sub	cx,MIN_SPLIT_SIZE ; 32
 30268                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 30269                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 30270                                  	; 18/12/2022
 30271                                  	cmp	cx,bx
 30272                                  	jb	short smE ; (*)
 30273                                  
 30274                                  	mov	dl,[es:ARENA.SIGNATURE]
 30275                                  	mov	cx,[es:ARENA.SIZE]
 30276                                  
 30277                                  	mov	[es:ARENA.SIZE],bx
 30278                                  	mov	byte [es:ARENA.SIGNATURE],'M'
 30279                                  
 30280                                  	add	ax,bx
 30281                                  	inc	ax
 30282                                  	mov	es,ax			; Move to new arena area
 30283                                  
 30284                                  	mov	ax,cx
 30285                                  	sub	ax,bx
 30286                                  	; 12/12/2022
 30287                                  	; ax > 0
 30288                                  	dec	ax			; And prepare the new size
 30289                                  
 30290                                  	; 18/12/2022
 30291                                  	mov	[es:ARENA.SIGNATURE],dl
 30292                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 30293                                  	mov	[es:ARENA.SIZE],ax
 30294                                  	;mov	ax,'  ' ; 2020h
 30295                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 30296                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 30297                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 30298                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 30299                                  
 30300                                  	; 18/12/2022
 30301                                  	call	freeMCB	; (**)
 30302                                  
 30303                                  	; 12/12/2022
 30304                                  	; cf=0
 30305                                  	;clc
 30306                                  	; 18/12/2022
 30307                                  	;jmp	short smX
 30308                                  smE:	
 30309                                  	; 18/12/2022
 30310                                  	; cf=1 (*)
 30311                                  	;stc
 30312                                  smX:	
 30313                                  	;popreg	<es, cx, bx>
 30314                                  	pop	es
 30315                                  	pop	cx
 30316                                  	pop	bx
 30317                                  	retn
 30318                                  
 30319                                  ; -----------------------------------------------------------------------------
 30320                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 30321                                  ; -----------------------------------------------------------------------------
 30322                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 30323                                  ; EXIT:     None; UMB is hidden as necessary
 30324                                  ; ERROR:    None
 30325                                  ; USES:     Flags, AX, CX
 30326                                  ; -----------------------------------------------------------------------------
 30327                                  ; PRIMARY LOGIC:
 30328                                  ;
 30329                                  ; If the UMB is specified in the DH/LH statement, then:
 30330                                  ;    If the largest free segment is too small (check specified size), then:
 30331                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 30332                                  ;    Else, if largest free segment is LARGER than specified size, then:
 30333                                  ;       If /S was given on the command-line, then:
 30334                                  ;          Break that element into two pieces
 30335                                  ;          Set a flag that we're shrinking
 30336                                  ;       Endif
 30337                                  ;    Endif
 30338                                  ; Endif
 30339                                  ; If the UMB is NOT specified (or was removed by the above):
 30340                                  ;    Hide all free elements in the UMB
 30341                                  ;    If the flag that we're shrinking was set, then:
 30342                                  ;       UN-hide the lower portion of the shrunken UMB
 30343                                  ;    ENDIF
 30344                                  ; ENDIF
 30345                                  ; -----------------------------------------------------------------------------
 30346                                  
 30347                                  _hideUMB_:
 30348                                  	push	bx
 30349                                  	push	dx
 30350                                  	push	es
 30351                                  
 30352                                  	mov	al,cl
 30353                                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 30354                                  	jz	short hu_20
 30355                                  
 30356                                  	mov	al,cl		; Retrieve the size of the largest
 30357                                  	call	BigFree		; free element in AX; put its address in ES
 30358                                  	jc	short hu_20	; Oops. Errors mean skip this part.
 30359                                  
 30360                                  	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 30361                                  	mov	al,cl		; Retrieve the user's specified
 30362                                  	call	GetSize		; minimum size for this umb (into AX)
 30363                                  	pop	bx		; Now BX==BigFree, AX==Specified Size
 30364                                  
 30365                                  	or	ax,ax		; If they didn't specify one,
 30366                                  	jz	short hu_20	; Skip over all this.
 30367                                  
 30368                                  	cmp	ax,bx		; Ah... if (specified > max free)
 30369                                  	jbe	short hu_10
 30370                                  
 30371                                  	mov	al,cl		;   Then mark that UMB as unused. Nya nya.
 30372                                  	call	unMarkUMB
 30373                                  	jmp	short hu_20
 30374                                  hu_10:	
 30375                                  	call	isTiny		; Returns ZF clear if user specified /S
 30376                                  	jz	short hu_20
 30377                                  
 30378                                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 30379                                  	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 30380                                  
 30381                                  	mov	dx,es
 30382                                  	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 30383                                  
 30384                                  hu_20:	mov	ax,cx
 30385                                  	call	isSpecified	; If they specified this UMB, we're done...
 30386                                  	jnz	short hu_X	; so leave.
 30387                                  
 30388                                  	xor	dx,dx
 30389                                  hu_30:	
 30390                                  	mov	al,cl
 30391                                  
 30392                                  	call	hideUMB		; Hides everything in UMB #al
 30393                                  
 30394                                  	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 30395                                  	jz	short hu_X	; So we should leave.
 30396                                  
 30397                                  	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 30398                                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 30399                                  hu_X:	
 30400                                  	pop	es
 30401                                  	pop	dx
 30402                                  	pop	bx
 30403                                  	retn
 30404                                  
 30405                                  ; -----------------------------------------------------------------------------
 30406                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 30407                                  ; -----------------------------------------------------------------------------
 30408                                  ; Entry:  None
 30409                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 30410                                  ; Error:  None
 30411                                  ; Uses:   Flags
 30412                                  ; -----------------------------------------------------------------------------
 30413                                  
 30414                                  UnFreeze:
 30415                                  	push	ax
 30416                                  	push	es
 30417                                  
 30418                                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 30419                                  	jc	short ufX
 30420                                  
 30421                                  	mov	es,ax
 30422                                  
 30423                                  ; ------------------------------
 30424                                  ; UF10--ES - Current MCB address
 30425                                  ; ------------------------------
 30426                                  
 30427                                  uf10:	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 30428                                  	jnz	short uf20
 30429                                  	call	unHideMCB
 30430                                  uf20:	
 30431                                  	mov	al,[es:ARENA.SIGNATURE]
 30432                                  
 30433                                  	cmp	al,arena_signature_end ; 'Z'
 30434                                  	jz	short ufX	; 'Z' means this was the last MCB... that's it.
 30435                                  
 30436                                  	;NextMCB es, ax		; Go on forward.
 30437                                  	mov     ax,es
 30438                                  	;add	ax,[es:3]
 30439                                  	add     ax,[es:ARENA.SIZE]
 30440                                  	inc     ax
 30441                                  	mov     es,ax
 30442                                  
 30443                                  	jmp	short uf10
 30444                                  ufX:	
 30445                                  	pop	es
 30446                                  	pop	ax
 30447                                  	retn
 30448                                  
 30449                                  ; -----------------------------------------------------------------------------
 30450                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 30451                                  ; -----------------------------------------------------------------------------
 30452                                  ; ENTRY:    ES:0 should point to an MCB
 30453                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 30454                                  ; ERROR:    None
 30455                                  ; USES:     Flags
 30456                                  ; -----------------------------------------------------------------------------
 30457                                  
 30458                                  isFrozMCB:
 30459                                  	;push	ax
 30460                                  
 30461                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30462                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30463                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 30464                                  	jne	short ifmX
 30465                                  
 30466                                  	;mov	ax,[es:ARENA.NAME+0]
 30467                                  	;cmp	ax,'FR' ; 5246h
 30468                                  	cmp	word [es:ARENA.NAME+0],'FR'
 30469                                  	jne	short ifmX
 30470                                  	;mov	ax,[es:ARENA.NAME+2]
 30471                                  	;cmp	ax,'OZ' ; 5A4Fh
 30472                                  	cmp	word [es:ARENA.NAME+2],'OZ'
 30473                                  	jne	short ifmX
 30474                                  	;mov	ax,[es:ARENA.NAME+4]
 30475                                  	;cmp	ax,'EN' ; 4E45h
 30476                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30477                                  	jne	short ifmX
 30478                                  	;mov	ax,[es:ARENA.NAME+6]
 30479                                  	;cmp	ax,'  ' ; 2020h
 30480                                  	cmp	word [es:ARENA.NAME+6],'  '
 30481                                  ifmX:	
 30482                                  	;pop	ax
 30483                                  	retn
 30484                                  
 30485                                  ; -----------------------------------------------------------------------------
 30486                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 30487                                  ; -----------------------------------------------------------------------------
 30488                                  ; ENTRY:    ES:0 should point to an MCB
 30489                                  ; EXIT:     None; MCB frozen
 30490                                  ; ERROR:    None
 30491                                  ; USES:     None
 30492                                  ; -----------------------------------------------------------------------------
 30493                                  
 30494                                  frezMCB:
 30495                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30496                                  	mov	word [es:ARENA.NAME+0],'FR'
 30497                                  	mov	word [es:ARENA.NAME+2],'OZ'
 30498                                  	mov	word [es:ARENA.NAME+4],'EN'
 30499                                  	mov	word [es:ARENA.NAME+6],'  '
 30500                                  	retn
 30501                                  
 30502                                  ; -----------------------------------------------------------------------------
 30503                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 30504                                  ; -----------------------------------------------------------------------------
 30505                                  ; Entry:  None
 30506                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 30507                                  ; Error:  None
 30508                                  ; Uses:   Flags
 30509                                  ; -----------------------------------------------------------------------------
 30510                                  
 30511                                  FreezeUM:
 30512                                  	push	ax
 30513                                  	push	cx
 30514                                  	push	dx
 30515                                  	push	es
 30516                                  
 30517                                  	;call	GetLoadUMB
 30518                                  	mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 30519                                  
 30520                                  	xor	ah,ah		; Zap ah, so al==ax
 30521                                  	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 30522                                  
 30523                                  	call	UmbHead		; Returns first UMB segment in AX
 30524                                  	mov	es,ax
 30525                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30526                                  
 30527                                  ; -----------------------------------------
 30528                                  ; FUM10--ES - Current MCB address
 30529                                  ;        CX - Current UMB number
 30530                                  ;        DX - UMB number to skip (load UMB)
 30531                                  ; -----------------------------------------
 30532                                  
 30533                                  fum10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30534                                  	jnz	short fum20
 30535                                  
 30536                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30537                                  fum20:	
 30538                                  	cmp	cx,dx		; If this is the load UMB, we don't want to
 30539                                  	je	short fum30	; freeze anything... so skip that section.
 30540                                  
 30541                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 30542                                  	or	word [es:ARENA.OWNER],0
 30543                                  	jnz	short fum30	; either.
 30544                                  
 30545                                  	call	frezMCB
 30546                                  fum30:	
 30547                                  	mov	al,[es:ARENA.SIGNATURE]
 30548                                  	cmp	al,arena_signature_end ; 'Z'
 30549                                  	je	short fumX	; 'Z' means this was the last MCB... that's it.
 30550                                  
 30551                                  	;NextMCB es, ax		; Go on forward.
 30552                                  	mov     ax,es
 30553                                  	;add	ax,[es:3]
 30554                                  	add     ax,[es:ARENA.SIZE]
 30555                                  	inc     ax
 30556                                  	mov     es,ax
 30557                                  	
 30558                                  	jmp	short fum10
 30559                                  
 30560                                  fumX:	pop	es
 30561                                  	pop	dx
 30562                                  	pop	cx
 30563                                  	pop	ax
 30564                                  	retn
 30565                                  
 30566                                  ; -----------------------------------------------------------------------------
 30567                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 30568                                  ; -----------------------------------------------------------------------------
 30569                                  ; ENTRY:    None
 30570                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 30571                                  ; ERROR:    None
 30572                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 30573                                  ; -----------------------------------------------------------------------------
 30574                                  
 30575                                  UmbTest:
 30576                                  	push	ax
 30577                                  	push	bx
 30578                                  	push	ds
 30579                                  	push	es
 30580                                  
 30581                                  	call	fm_link			; Link in UMBs (if not already linked)
 30582                                  	call	WalkMem			; Check to see if they're really linked
 30583                                  	pushf				; And remember what we found out
 30584                                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 30585                                  	popf				; And restore what we found out.
 30586                                  
 30587                                  	pop	es
 30588                                  	pop	ds
 30589                                  	pop	bx
 30590                                  	pop	ax
 30591                                  	retn
 30592                                  
 30593                                  ; -----------------------------------------------------------------------------
 30594                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 30595                                  ; -----------------------------------------------------------------------------
 30596                                  ; ENTRY:    None
 30597                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 30598                                  ; ERROR:    None
 30599                                  ; USES:     Flags
 30600                                  ; -----------------------------------------------------------------------------
 30601                                  
 30602                                  WalkMem:
 30603                                  	push	ax ; ?
 30604                                  	push	bx ; ?
 30605                                  	push	es ; ? no need to save contents of these registers ?
 30606                                  		   	
 30607                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30608                                  	int	21h
 30609                                  
 30610                                  	mov	ax,[es:bx-2]
 30611                                  	mov	es,ax
 30612                                  
 30613                                  ; ------------------------------
 30614                                  ; UM10: ES = Current MCB pointer
 30615                                  ; ------------------------------
 30616                                  
 30617                                  um10:	mov	al,[es:ARENA.SIGNATURE]
 30618                                  	cmp	al,arena_signature_end ;  'Z'
 30619                                  	je	short um20		; If signature == 'Z', hay no more.
 30620                                  
 30621                                  	;NextMCB es, bx			; Move to the next MCB
 30622                                  
 30623                                  	mov     bx,es
 30624                                  	;add	bx,[es:3]
 30625                                  	add     bx,[es:ARENA.SIZE]
 30626                                  	inc     bx
 30627                                  	mov     es,bx
 30628                                  		
 30629                                  	jmp	short um10		; And restart the loop.
 30630                                  um20:	
 30631                                  	mov	ax,es
 30632                                  
 30633                                  	cmp	ax,9FFFh		; This sets CF iff ax < 9FFF.
 30634                                  
 30635                                  	pop	es ; ?
 30636                                  	pop	bx ; ?
 30637                                  	pop	ax ; ?
 30638                                  	retn
 30639                                  
 30640                                  ; -----------------------------------------------------------------------------
 30641                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 30642                                  ; -----------------------------------------------------------------------------
 30643                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30644                                  ; EXIT:     None
 30645                                  ; ERROR:    None
 30646                                  ; USES:     AX, BX
 30647                                  ; -----------------------------------------------------------------------------
 30648                                  
 30649                                  hl_unlink:
 30650                                  	xor	bh,bh
 30651                                  
 30652                                  	;getdata bl,fm_umb		; Restore original link-state
 30653                                  	;
 30654                                  	;push	ds
 30655                                  	;push	cs
 30656                                  	;pop	ds
 30657                                  	;mov	bl,[fm_umb]
 30658                                  	;pop	ds
 30659                                  
 30660                                  	mov	bl,[cs:fm_umb]
 30661                                  
 30662                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30663                                  	int	21h
 30664                                  	retn
 30665                                  
 30666                                  ; ----------------------------------------------------------------------
 30667                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 30668                                  ; ----------------------------------------------------------------------
 30669                                  ; 09/04/2019 - Retro DOS v4.0
 30670                                  
 30671                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 30672                                  ;   Date:     May 14, 1992
 30673                                  
 30674                                  ;   Modification log:
 30675                                  ;
 30676                                  ;     DATE    WHO      DESCRIPTION
 30677                                  ;   --------  -------  --------------------------------------------------------
 30678                                  ;   05/14/92  t-richj  Original
 30679                                  ;   06/21/92  t-richj  Final revisions before check-in
 30680                                  
 30681                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 30682                                  
 30683                                  ; -----------------------------------------------------------------------------
 30684                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 30685                                  ; -----------------------------------------------------------------------------
 30686                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 30687                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 30688                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 30689                                  ; ERROR:  None
 30690                                  ; USES:   fInHigh (from highvar.inc), carry flag
 30691                                  ; -----------------------------------------------------------------------------
 30692                                  
 30693                                  UnHideUMBs:
 30694                                  	push	ax		; Save ax for what we're about to do
 30695                                  
 30696                                  ; -----------------------------------------------------------------------------
 30697                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 30698                                  ;    length of time. Those six constitute a check of whether or not we should
 30699                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 30700                                  ;    will destroy the current link-state and memory-allocation strategy after
 30701                                  ;    every command execution.
 30702                                  ; -----------------------------------------------------------------------------
 30703                                  
 30704                                  	;getdata al,fInHigh	; Get InHigh from data segment
 30705                                  	;
 30706                                  	;push	ds
 30707                                  	;push	cs
 30708                                  	;pop	ds
 30709                                  	;mov	al,[fInHigh]
 30710                                  	;pop	ds	
 30711                                  
 30712                                  	mov	al,[cs:fInHigh]
 30713                                  
 30714                                  	or	al,al
 30715                                  	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 30716                                  
 30717                                  	pop	ax		; then there's nothing to do here... so
 30718                                  	stc			; restore everything and return. Just like
 30719                                  	retn			; that.
 30720                                  uhu10:	
 30721                                  	call	linkumb		; Make sure UMBs are linked in.
 30722                                  	call	FreeUMBs
 30723                                  
 30724                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 30725                                  	;
 30726                                  	;push	es
 30727                                  	;push	cs
 30728                                  	;pop	es
 30729                                  	;mov	byte [es:fInHigh],0
 30730                                  	;pop	ds	
 30731                                  
 30732                                  	mov	byte [cs:fInHigh],0	
 30733                                  
 30734                                  	call	he_unlink	; Unlink UMBs
 30735                                  
 30736                                  	pop	ax
 30737                                  	; 12/12/2022
 30738                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 30739                                  	retn
 30740                                  
 30741                                  ; -----------------------------------------------------------------------------
 30742                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 30743                                  ; -----------------------------------------------------------------------------
 30744                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30745                                  ; EXIT:     None
 30746                                  ; ERROR:    None
 30747                                  ; USES:     AX, BX
 30748                                  ; -----------------------------------------------------------------------------
 30749                                  
 30750                                  he_unlink:
 30751                                  	xor	bh, bh
 30752                                  
 30753                                  	;getdata bl, fm_umb	; Restore original link-state
 30754                                  	mov	bl,[cs:fm_umb]	
 30755                                  
 30756                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30757                                  	int	21h
 30758                                  	retn
 30759                                  
 30760                                  ; -----------------------------------------------------------------------------
 30761                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 30762                                  ; -----------------------------------------------------------------------------
 30763                                  ; ENTRY:    None
 30764                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 30765                                  ; ERROR:    None (ignore CF)
 30766                                  ; USES:     Flags
 30767                                  ; -----------------------------------------------------------------------------
 30768                                  
 30769                                  FreeUMBs:
 30770                                  	push	ax
 30771                                  	push	es
 30772                                  
 30773                                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 30774                                  	jc	short fusX
 30775                                  
 30776                                  	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 30777                                  fus10:	
 30778                                  	call	isHideMCB	; Returns with ZF set if owner is 0
 30779                                  	jnz	short fus20
 30780                                  	call	freeMCB
 30781                                  fus20:	   
 30782                                  	mov	al,[es:ARENA.SIGNATURE]
 30783                                  	cmp	al,arena_signature_end ; 'Z'
 30784                                  	jz	short fusX	; That means this was the last MCB--that's it.
 30785                                  
 30786                                  	mov	ax,es
 30787                                  	add	ax,[es:ARENA.SIZE]
 30788                                  	inc	ax
 30789                                  	mov	es,ax		; Go on forward.
 30790                                  
 30791                                  	jmp	short fus10
 30792                                  fusX:	
 30793                                  	pop	es
 30794                                  	pop	ax
 30795                                  	retn
 30796                                  
 30797                                  ; -----------------------------------------------------------------------------
 30798                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 30799                                  ; -----------------------------------------------------------------------------
 30800                                  ; ENTRY:    ES:0 should point to an MCB
 30801                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 30802                                  ; ERROR:    None
 30803                                  ; USES:     Flags
 30804                                  ; -----------------------------------------------------------------------------
 30805                                  
 30806                                  isHideMCB:
 30807                                  	;push	ax
 30808                                  
 30809                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 30810                                  	jne	short ihm_x				; then check for HIDDEN
 30811                                  
 30812                                  	;mov	ax,[es:ARENA.NAME]
 30813                                  	;cmp	ax,'HI' ; 4948h
 30814                                  	cmp	word [es:ARENA.NAME+0],'HI'
 30815                                  	jne	short ihm_x
 30816                                  	;mov	ax,[es:ARENA.NAME+2]
 30817                                  	;cmp	ax,'DD' ; 4444h
 30818                                  	cmp	word [es:ARENA.NAME+2],'DD'
 30819                                  	jne	short ihm_x
 30820                                  	;mov	ax,[es:ARENA.NAME+4]
 30821                                  	;cmp	ax,'EN' ; 4E45h
 30822                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30823                                  	jne	short ihm_x
 30824                                  	;mov	ax,[es:ARENA.NAME+6]
 30825                                  	;cmp	ax,'  ' ; 2020h
 30826                                  	cmp	word [es:ARENA.NAME+6],'  '
 30827                                  ihm_x:	
 30828                                  	;pop	ax
 30829                                  	retn
 30830                                  
 30831                                  ; -----------------------------------------------------------------------------
 30832                                  ;*** freeMCB - marks as free the MCB at ES:0
 30833                                  ; -----------------------------------------------------------------------------
 30834                                  ; ENTRY:    ES:0 should point to an MCB
 30835                                  ; EXIT:     None; MCB free'd
 30836                                  ; ERROR:    None
 30837                                  ; USES:     AX
 30838                                  ; -----------------------------------------------------------------------------
 30839                                  
 30840                                  freeMCB:
 30841                                  	mov	word [es:ARENA.OWNER],0
 30842                                  	mov	ax,'  '
 30843                                  	mov	[es:ARENA.NAME+0],ax
 30844                                  	mov	[es:ARENA.NAME+2],ax
 30845                                  	mov	[es:ARENA.NAME+4],ax
 30846                                  	mov	[es:ARENA.NAME+6],ax
 30847                                  	retn
 30848                                  
 30849                                  ; -----------------------------------------------------------------------------
 30850                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 30851                                  ; -----------------------------------------------------------------------------
 30852                                  ; ENTRY:  Nothing
 30853                                  ; EXIT:   AX contains 0x9FFF for most systems
 30854                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 30855                                  ; USES:   Flags, AX
 30856                                  ; -----------------------------------------------------------------------------
 30857                                  
 30858                                  HeadUmb:
 30859                                  	; 13/05/2019
 30860                                  
 30861                                  	;push	si ; ?
 30862                                  	;push	ds ; ?
 30863                                  	;push	es
 30864                                  	;push	bx ; *
 30865                                  
 30866                                  	; 09/04/2019
 30867                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 30868                                  
 30869                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30870                                  	int	21h
 30871                                  			; DOS - 2+ internal - GET LIST OF LISTS
 30872                                  			; Return: ES:BX -> DOS list of lists
 30873                                  	;mov	ax,[es:8Ch]
 30874                                  	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 30875                                  	cmp	ax,0FFFFh
 30876                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 30877                                  
 30878                                  	;clc				; Else, it isn't.
 30879                                  	;jmp	short xhu_x
 30880                                  xhu_e:	
 30881                                  	;stc
 30882                                  	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 30883                                  xhu_x:	
 30884                                  	;pop	bx ; *
 30885                                  	;pop	es	
 30886                                  	;pop	ds ; ?
 30887                                  	;pop	si ; ?
 30888                                  	retn
 30889                                  
 30890                                  ; -----------------------------------------------------------------------------
 30891                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 30892                                  ; -----------------------------------------------------------------------------
 30893                                  ; ENTRY:    None
 30894                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 30895                                  ; ERROR:    None
 30896                                  ; USES:     AX, BX, fm_umb
 30897                                  ; -----------------------------------------------------------------------------
 30898                                  
 30899                                  linkumb:
 30900                                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 30901                                  	int	21h			; Current link-state is now in al
 30902                                  
 30903                                  	or	al,al			; BUGBUG: proper check?
 30904                                  	jnz	short lumbX		; Jumps if UMBs already linked in
 30905                                  
 30906                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30907                                  	mov	bx,1
 30908                                  	int	21h
 30909                                  lumbX:
 30910                                  	retn
 30911                                  
 30912                                  %endif
 30913                                  
 30914                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30915                                  ; (SYSINIT:2B5Fh)
 30916                                  
 30917                                  ; ----------------------------------------------------------------------
 30918                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 30919                                  ; ----------------------------------------------------------------------
 30920                                  ; 09/04/2019 - Retro DOS v4.0
 30921                                  
 30922                                  ;----------------------------------------------------------------------------
 30923                                  ;
 30924                                  ; procedure : InitDevLoad
 30925                                  ;
 30926                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 30927                                  ;			 = 1 indicates load in UMB:
 30928                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 30929                                  ;		                    = 1 indicates a DOS 5-style load
 30930                                  ;		DevSize  = Size of the device driver file in paras
 30931                                  ;
 30932                                  ;	Output : none
 30933                                  ;
 30934                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 30935                                  ;	Also sets up a header for the Device driver entry for mem utility
 30936                                  ;
 30937                                  ;----------------------------------------------------------------------------
 30938                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 30939                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 30940                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 30941                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 30942                                  ;----------------------------------------------------------------------------
 30943                                  
 30944                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30945                                  InitDevLoad:
 30946                                  	; 11/12/2022
 30947                                  	; ds = cs
 30948 000027DC 803E[CB1E]00            	cmp	byte [DeviceHi],0
 30949                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 30950                                  	;je	short InitForLo		; no, init for lo mem
 30951 000027E1 741F                    	je	short initforlo_x ; 09/04/2019
 30952                                  
 30953                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30954                                  ;	cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 30955                                  ;	je	short InitForConv
 30956                                  ;
 30957                                  ;; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 30958                                  ;; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 30959                                  ;; any areas left in upper-memory, except for elements in the load UMB...
 30960                                  ;; we then malloc space as per Dos-5 style, and mark as free any spaces which
 30961                                  ;; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 30962                                  ;; and UnHideUMBs later on marks all 8+HIDDEN as free.
 30963                                  ;
 30964                                  ;	call	ShrinkUMB		; Stop using the old device arena
 30965                                  ;
 30966                                  ;	call	HideUMBs		; Mark up the UM area as we see fit
 30967                                  ;	call	FreezeUM		; Hide everything BUT the load area
 30968                                  ;	call	GetUMBForDev		; And grab that load area as needed
 30969                                  ;	pushf
 30970                                  ;	call	UnFreeze		; Then unhide everything frozen
 30971                                  ;	popf
 30972                                  ;
 30973                                  ;	jc	short InitForLo		; (if carry, it's loading low)
 30974                                  ;
 30975                                  ;	jmp	short InitForHi
 30976                                  
 30977                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30978                                  	; (SYSINIT:2B67h)
 30979                                  InitForConv:
 30980                                  	; 11/12/2022
 30981                                  	; ds = cs
 30982 000027E3 E83700                  	call	SpaceInUMB		; Do we have space left in the
 30983                                  					;  current UMB ?
 30984 000027E6 7308                    	jnc	short InitForHi		; yes, we have
 30985 000027E8 E84D04                  	call	ShrinkUMB		; shrink the current UMB in use
 30986 000027EB E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 30987 000027EE 720D                    	jc	short InitForLo		; we didn't succeed, so load
 30988                                  					;  in low memory
 30989                                  InitForHi:
 30990                                  	; 11/12/2022
 30991                                  	; ds = cs
 30992                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 30993                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 30994                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 30995 000027F0 A1[C11E]                	mov	ax,[DevUMBFree]
 30996 000027F3 8B16[BD1E]              	mov	dx,[DevUMBAddr]
 30997 000027F7 0316[BF1E]              	add	dx,[DevUMBSize]
 30998 000027FB EB0C                    	jmp	short idl1
 30999                                  
 31000                                  InitForLo:
 31001                                  	; 11/12/2022
 31002                                  	; ds = cs
 31003                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 31004 000027FD C606[CB1E]00            	mov	byte [DeviceHi],0
 31005                                  initforlo_x:
 31006                                  	; 11/12/2022
 31007                                  	; ds = cs
 31008                                  					;  into UMB indicate that
 31009                                  					;  we are loading low
 31010                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 31011                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 31012 00002802 A1[E003]                	mov	ax,[memhi]
 31013 00002805 8B16[A302]              	mov	dx,[ALLOCLIM]
 31014                                  idl1:
 31015 00002809 E86C00                  	call	DevSetMark		; setup a sub-arena for DD
 31016                                  	; 11/12/2022
 31017                                  	; ds = cs
 31018                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 31019                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 31020                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 31021                                  	;mov	[cs:DevEntry+2],ax
 31022 0000280C A3[B01E]                	mov	[DevLoadAddr],ax
 31023 0000280F 8916[B21E]              	mov	[DevLoadEnd],dx
 31024 00002813 C706[B41E]0000          	mov	word [DevEntry],0
 31025 00002819 A3[B61E]                	mov	[DevEntry+2],ax
 31026 0000281C C3                      	retn
 31027                                  
 31028                                  ;----------------------------------------------------------------------------
 31029                                  ;
 31030                                  ; procedure : SpaceInUMB?
 31031                                  ;
 31032                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 31033                                  ;	Output : Carry set if no space in UMB
 31034                                  ;		 Carry clear if Space is available for the device in
 31035                                  ;		   current UMB
 31036                                  ;
 31037                                  ;----------------------------------------------------------------------------
 31038                                  
 31039                                  SpaceInUMB:
 31040                                  	; 11/12/2022
 31041                                  	; ds = cs
 31042                                  	;mov	ax,[cs:DevUMBSize]
 31043                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 31044                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 31045 0000281D A1[BF1E]                	mov	ax,[DevUMBSize]
 31046 00002820 0306[BD1E]              	add	ax,[DevUMBAddr]		; End of UMB
 31047 00002824 2B06[C11E]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 31048                                  	; 11/12/2022
 31049                                  	;or	ax,ax			; Nospace ?
 31050                                  	;jnz	short spcinumb1
 31051                                  	;stc
 31052                                  	;retn
 31053                                  	; 11/12/2022
 31054 00002828 83F801                  	cmp	ax,1
 31055 0000282B 7205                    	jb	short spcinumb2	; cf=1
 31056                                  spcinumb1:
 31057 0000282D 48                      	dec	ax			; space for sub-arena
 31058                                  	; 11/12/2022
 31059                                  	; ds = cs
 31060 0000282E 3B06[AE1E]              	cmp	ax,[DevSize]
 31061                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 31062                                  spcinumb2:
 31063 00002832 C3                      	retn
 31064                                  
 31065                                  ;----------------------------------------------------------------------------
 31066                                  ;
 31067                                  ; procedure : PrepareMark
 31068                                  ;
 31069                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 31070                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 31071                                  ;
 31072                                  ;----------------------------------------------------------------------------
 31073                                  
 31074                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31075                                  ;
 31076                                  ;PrepareMark:
 31077                                  ;	push	ds
 31078                                  ;	mov	ds,ax
 31079                                  ;	mov	word [ARENA.OWNER],8
 31080                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 31081                                  ;	pop	ds
 31082                                  ;
 31083                                  ;	inc	ax
 31084                                  ;	mov	[cs:DevUMBAddr],ax
 31085                                  ;	mov	[cs:DevUMBFree],ax
 31086                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 31087                                  ;	retn
 31088                                  
 31089                                  ;----------------------------------------------------------------------------
 31090                                  ;
 31091                                  ; procedure : GetUMBForDev
 31092                                  ;
 31093                                  ;	Input : DevSize
 31094                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 31095                                  ;		 the device.
 31096                                  ;		 If success carry clear
 31097                                  ;
 31098                                  ;	Allocates the biggest UMB for loading devices and updates
 31099                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 31100                                  ;	UMB.
 31101                                  ;
 31102                                  ;	This routine relies on the fact that all of the low memory
 31103                                  ;	is allocated, and any DOS alloc calls should return memory
 31104                                  ;	from the UMB pool.
 31105                                  ;
 31106                                  ;----------------------------------------------------------------------------
 31107                                  
 31108                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31109                                  	; (SYSINIT:2BC6h)
 31110                                  
 31111                                  GetUMBForDev:
 31112                                  	; 11/12/2022
 31113                                  	; ds = cs
 31114 00002833 BBFFFF                  	mov	bx,0FFFFh
 31115 00002836 B80048                  	mov	ax,4800h
 31116 00002839 CD21                    	int	21h
 31117                                  		; DOS - 2+ - ALLOCATE MEMORY
 31118                                  		; BX = number of 16-byte paragraphs desired
 31119                                  
 31120 0000283B 09DB                    	or	bx,bx
 31121 0000283D 742C                    	jz	short gufd_err
 31122                                  
 31123 0000283F 4B                      	dec	bx
 31124                                  	; 11/12/2022
 31125                                  	; ds = cs
 31126 00002840 391E[AE1E]              	cmp	[DevSize],bx
 31127                                  	;cmp	[cs:DevSize],bx
 31128 00002844 7725                    	ja	short gufd_err
 31129 00002846 43                      	inc	bx
 31130                                  
 31131 00002847 B80048                  	mov	ax,4800h
 31132 0000284A CD21                    	int	21h
 31133 0000284C 721D                    	jc	short gufd_err
 31134                                  
 31135                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31136                                  	;dec	ax
 31137                                  	;call	PrepareMark
 31138                                  	;
 31139                                  PrepareMark:
 31140 0000284E 1E                      	push	ds
 31141 0000284F 48                      	dec	ax
 31142 00002850 8ED8                    	mov	ds,ax
 31143 00002852 C70601000800            	mov	word [ARENA.OWNER],8
 31144 00002858 C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 31145 0000285E 40                      	inc	ax
 31146 0000285F 1F                      	pop	ds
 31147                                  	; 11/12/2022
 31148                                  	; ds = cs
 31149                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 31150                                  	;mov	[cs:DevUMBAddr],ax
 31151                                  	;mov	[cs:DevUMBFree],ax
 31152 00002860 891E[BF1E]              	mov	[DevUMBSize],bx		; update the UMB Variables
 31153 00002864 A3[BD1E]                	mov	[DevUMBAddr],ax
 31154 00002867 A3[C11E]                	mov	[DevUMBFree],ax
 31155                                  	;
 31156                                  	; 11/12/2022
 31157                                  	; cf=0
 31158                                  	;clc				; mark no error
 31159 0000286A C3                      	retn
 31160                                  gufd_err:
 31161 0000286B 31C0                    	xor	ax,ax ; 0
 31162                                  	; 11/12/2022
 31163                                  	; ds = cs
 31164                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 31165                                  	;mov	[cs:DevUMBAddr],ax
 31166                                  	;mov	[cs:DevUMBFree],ax
 31167 0000286D A3[BF1E]                	mov	[DevUMBSize],ax		; erase the previous values
 31168 00002870 A3[BD1E]                	mov	[DevUMBAddr],ax
 31169 00002873 A3[C11E]                	mov	[DevUMBFree],ax
 31170 00002876 F9                      	stc
 31171 00002877 C3                      	retn
 31172                                  
 31173                                  ;----------------------------------------------------------------------------
 31174                                  ;
 31175                                  ; procedure : DevSetMark
 31176                                  ;
 31177                                  ;	Input : AX - Free segment were device is going to be loaded
 31178                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 31179                                  ;
 31180                                  ;	Creates a sub-arena for the device driver
 31181                                  ;	puts 'D' marker in the sub-arena
 31182                                  ;	Put the owner of the sub-arena as (AX+1)
 31183                                  ;	Copies the file name into sub-arena name field
 31184                                  ;
 31185                                  ;	Size field of the sub-arena will be set only at succesful
 31186                                  ;	completion of Device load.
 31187                                  ;
 31188                                  ;----------------------------------------------------------------------------
 31189                                  
 31190                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31191                                  	; (SYSINIT:2C13h)
 31192                                  
 31193                                  DevSetMark:
 31194 00002878 06                      	push	es
 31195 00002879 57                      	push	di
 31196 0000287A 1E                      	push	ds
 31197 0000287B 56                      	push	si
 31198 0000287C 8EC0                    	mov	es,ax
 31199 0000287E 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 31200 00002884 40                      	inc	ax
 31201 00002885 26A30100                	mov	[es:devmark.seg],ax
 31202                                  
 31203                                  ;-------------- Copy file name
 31204                                  
 31205 00002889 50                      	push	ax			; save load addr
 31206 0000288A 2EC536[F803]            	lds	si,[cs:bpb_addr]	; command line is still there
 31207                                  
 31208 0000288F 89F7                    	mov	di,si
 31209 00002891 FC                      	cld
 31210                                  dsm_again:
 31211 00002892 AC                      	lodsb
 31212 00002893 3C3A                    	cmp	al,':'
 31213 00002895 7504                    	jne	short isit_slash
 31214 00002897 89F7                    	mov	di,si
 31215 00002899 EBF7                    	jmp	short dsm_again
 31216                                  isit_slash:
 31217 0000289B 3C5C                    	cmp	al, '\'
 31218 0000289D 7504                    	jne	short isit_null
 31219 0000289F 89F7                    	mov	di,si
 31220 000028A1 EBEF                    	jmp	short dsm_again
 31221                                  isit_null:
 31222 000028A3 08C0                    	or	al,al
 31223 000028A5 75EB                    	jnz	short dsm_again
 31224 000028A7 89FE                    	mov	si,di
 31225                                  
 31226 000028A9 BF0800                  	mov	di,devmark.filename ; 8
 31227 000028AC B90800                  	mov	cx,8			; maximum 8 characters
 31228                                  dsm_next_char:
 31229 000028AF AC                      	lodsb
 31230 000028B0 08C0                    	or	al, al
 31231 000028B2 7407                    	jz	short blankout
 31232 000028B4 3C2E                    	cmp	al, '.'
 31233 000028B6 7403                    	je	short blankout
 31234 000028B8 AA                      	stosb
 31235 000028B9 E2F4                    	loop	dsm_next_char
 31236                                  blankout:
 31237 000028BB E304                    	jcxz	dsm_exit
 31238 000028BD B020                    	mov	al, ' '
 31239 000028BF F3AA                    	rep	stosb			; blank out the rest
 31240                                  dsm_exit:
 31241 000028C1 58                      	pop	ax			; restore load addr
 31242 000028C2 5E                      	pop	si
 31243 000028C3 1F                      	pop	ds
 31244 000028C4 5F                      	pop	di
 31245 000028C5 07                      	pop	es
 31246 000028C6 C3                      	retn
 31247                                  
 31248                                  ;----------------------------------------------------------------------------
 31249                                  ;
 31250                                  ; procedure : SizeDevice
 31251                                  ;
 31252                                  ;	Input : ES:SI - points to device file to be sized
 31253                                  ;
 31254                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 31255                                  ;
 31256                                  ;	Calculates the size of the device file in paras and stores it
 31257                                  ;	in DevSize
 31258                                  ;
 31259                                  ;----------------------------------------------------------------------------
 31260                                  
 31261                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31262                                  SizeDevice:
 31263                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31264                                  	; 11/12/2022 ; *
 31265 000028C7 1E                      	push	ds ; *
 31266 000028C8 06                      	push	es
 31267 000028C9 1F                      	pop	ds
 31268 000028CA 89F2                    	mov	dx,si			; ds:dx -> file name
 31269 000028CC B8003D                  	mov	ax,3D00h		; open
 31270 000028CF CD21                    	int	21h
 31271 000028D1 7243                    	jc	short sd_err		; open failed
 31272                                  
 31273 000028D3 89C3                    	mov	bx,ax			; BX - file handle
 31274 000028D5 B80242                  	mov	ax,4202h		; seek
 31275 000028D8 31C9                    	xor	cx,cx
 31276 000028DA 89CA                    	mov	dx,cx			; to end of file
 31277 000028DC CD21                    	int	21h
 31278 000028DE 722F                    	jc	short sd_close		; did seek fail (impossible)
 31279 000028E0 83C00F                  	add	ax,15			; para convert
 31280 000028E3 83D200                  	adc	dx,0
 31281 000028E6 F7C2F0FF                	test	dx,0FFF0h		; size > 0ffff paras ?
 31282 000028EA 7409                    	jz	short szdev1		; no
 31283 000028EC 2EC706[AE1E]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 31284                                  					; assuming that we fail later
 31285 000028F3 EB1A                    	jmp	short sd_close
 31286                                  szdev1:
 31287 000028F5 B104                    	mov	cl,4			; convert it to paras
 31288 000028F7 D3E8                    	shr	ax,cl
 31289 000028F9 B10C                    	mov	cl,12
 31290 000028FB D3E2                    	shl	dx,cl
 31291 000028FD 09D0                    	or	ax,dx
 31292                                  	;
 31293                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31294 000028FF 2E3B06[CC1E]            	cmp     ax,[cs:DevSizeOption]
 31295                                  	;ja	short szdev2
 31296                                  	; 14/08/2023
 31297 00002904 7305                    	jnb	short szdev2
 31298                                  
 31299 00002906 2EA1[CC1E]              	mov     ax,[cs:DevSizeOption]
 31300                                  	; 12/12/2022
 31301 0000290A F8                      	clc
 31302                                  szdev2:
 31303 0000290B 2EA3[AE1E]              	mov	[cs:DevSize],ax		; save file size
 31304                                  
 31305                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31306                                  	; 12/12/2022
 31307                                  	; cf=0
 31308                                  	;clc
 31309                                  sd_close:
 31310 0000290F 9C                      	pushf				; let close not spoil our
 31311                                  					;  carry flag
 31312 00002910 B8003E                  	mov	ax,3E00h		; close
 31313 00002913 CD21                    	int	21h			; we are not checking for err
 31314 00002915 9D                      	popf
 31315                                  sd_err:
 31316                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31317                                  	; 11/12/2022 ; *
 31318 00002916 1F                      	pop     ds ; *
 31319 00002917 C3                      	retn
 31320                                  
 31321                                  ;----------------------------------------------------------------------------
 31322                                  ;
 31323                                  ; procedure : ExecDev
 31324                                  ;
 31325                                  ;	Input : ds:dx -> device to be executed
 31326                                  ;		DevLoadAddr - contains where device has to be loaded
 31327                                  ;
 31328                                  ;	Output : Carry if error
 31329                                  ;		 Carry clear if no error
 31330                                  ;
 31331                                  ;	Loads a device driver using the 4b03h function call
 31332                                  ;
 31333                                  ;----------------------------------------------------------------------------
 31334                                  
 31335                                  	; 01/11/2022
 31336                                  ExecDev:
 31337 00002918 2E8B1E[B01E]            	mov	bx,[cs:DevLoadAddr]
 31338 0000291D 2E891E[C71E]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 31339                                  					;  block for exec with
 31340                                  					;  Load address
 31341 00002922 2E891E[C91E]            	mov	[cs:DevExecReloc],bx
 31342 00002927 8CCB                    	mov	bx,cs
 31343 00002929 8EC3                    	mov	es,bx
 31344 0000292B BB[C71E]                	mov	bx,DevExecAddr		;es:bx points to parameters
 31345 0000292E B003                    	mov	al,3	; (load program only)
 31346 00002930 B44B                    	mov	ah,EXEC ; 4Bh
 31347 00002932 CD21                    	int	21h			;load in the device driver
 31348                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 31349                                  		; DS:DX -> ASCIZ filename
 31350                                  		; ES:BX -> parameter block
 31351                                  		; AL = subfunction 
 31352 00002934 C3                      	retn
 31353                                  
 31354                                  ;----------------------------------------------------------------------------
 31355                                  ;
 31356                                  ; procedure : RetFromUM
 31357                                  ;
 31358                                  ;	Input : None
 31359                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 31360                                  ;		 ConvLoad clear if did.
 31361                                  ;
 31362                                  ;	Prepares memory for more devices after returning from loading one
 31363                                  ;	using the DOS 6 options (/L:... etc).
 31364                                  ;
 31365                                  ;----------------------------------------------------------------------------
 31366                                  
 31367                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31368                                  ;RetFromUM:
 31369                                  ;	pushf
 31370                                  ;	mov	byte [cs:ConvLoad],1
 31371                                  ;	call	UnHideUMBs
 31372                                  ;	jc	short rfUM1		; Skip this if didn't HideUMBs
 31373                                  ;	mov	byte [cs:ConvLoad],0
 31374                                  ;rfUM1:	
 31375                                  ;	popf
 31376                                  ;	retn
 31377                                  
 31378                                  ;----------------------------------------------------------------------------
 31379                                  ;
 31380                                  ; procedure : RemoveNull
 31381                                  ;
 31382                                  ;	Input : ES:SI points to a null terminated string
 31383                                  ;
 31384                                  ;	Output : none
 31385                                  ;
 31386                                  ;	Replaces the null at the end of a string with blank
 31387                                  ;
 31388                                  ;----------------------------------------------------------------------------
 31389                                  
 31390                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31391                                  	; (SYSINIT:2CCEh)
 31392                                  RemoveNull:
 31393                                  	; 11/12/2022
 31394                                  	; ds = cs
 31395                                  rn_next:
 31396 00002935 268A1C                  	mov	bl,[es:si]
 31397 00002938 08DB                    	or	bl,bl			; null ?
 31398 0000293A 7403                    	jz	short rn_gotnull
 31399 0000293C 46                      	inc	si			; advance the pointer
 31400 0000293D EBF6                    	jmp	short rn_next
 31401                                  rn_gotnull:
 31402                                  	; 11/12/2022
 31403 0000293F 8A1E[E01E]              	mov	bl,[DevSavedDelim]
 31404                                  	;mov	bl,[cs:DevSavedDelim]
 31405 00002943 26881C                  	mov	[es:si],bl		; replace null with blank
 31406                                  	; 02/11/2022
 31407                                  ; 11/12/2022
 31408                                  rba_ok:		; 10/04/2019
 31409 00002946 C3                      	retn
 31410                                  
 31411                                  ;----------------------------------------------------------------------------
 31412                                  ;
 31413                                  ; procedure : RoundBreakAddr
 31414                                  ;
 31415                                  ;	Input : DevBrkAddr
 31416                                  ;	Output : DevBrkAddr
 31417                                  ;
 31418                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 31419                                  ;
 31420                                  ;----------------------------------------------------------------------------
 31421                                  
 31422                                  RoundBreakAddr:
 31423 00002947 2EA1[B81E]              	mov	ax,[cs:DevBrkAddr]
 31424 0000294B E872E7                  	call	ParaRound
 31425 0000294E 2E0106[BA1E]            	add	[cs:DevBrkAddr+2],ax
 31426 00002953 2EC706[B81E]0000        	mov	word [cs:DevBrkAddr],0
 31427 0000295A 2EA1[B21E]              	mov	ax,[cs:DevLoadEnd]
 31428 0000295E 2E3906[BA1E]            	cmp	[cs:DevBrkAddr+2],ax
 31429 00002963 76E1                    	jbe	short rba_ok
 31430 00002965 E96107                  	jmp	mem_err
 31431                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31432                                  	; 11/12/2022
 31433                                  ;rba_ok:
 31434                                  ;	retn
 31435                                  
 31436                                  ;----------------------------------------------------------------------------
 31437                                  ;
 31438                                  ; procedure : DevSetBreak
 31439                                  ;
 31440                                  ;	Input : DevBrkAddr
 31441                                  ;	Output : Carry set if Device returned Init failed
 31442                                  ;		 Else carry clear
 31443                                  ;
 31444                                  ;----------------------------------------------------------------------------
 31445                                  
 31446                                  DevSetBreak:
 31447 00002968 50                      	push	ax
 31448                                  
 31449 00002969 2EA1[BA1E]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 31450 0000296D 2E803E[3114]00          	cmp	byte [cs:multdeviceflag],0
 31451 00002973 750F                    	jne	short set_break_continue ;do not check it.
 31452 00002975 2E3B06[B01E]            	cmp	ax,[cs:DevLoadAddr]
 31453 0000297A 7508                    	jne	short set_break_continue ;if not same, then o.k.
 31454                                  
 31455                                  	;cmp	word [cs:DevBrkAddr],0
 31456                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 31457                                  	; 12/12/2022
 31458 0000297C 2E833E[B81E]01          	cmp	word [cs:DevBrkAddr],1
 31459 00002982 7204                    	jb	short break_failed
 31460                                  
 31461                                  set_break_continue:
 31462 00002984 E8C0FF                  	call	RoundBreakAddr
 31463                                  	; 12/12/2022
 31464 00002987 F8                      	clc
 31465                                  break_failed:
 31466 00002988 58                      	pop	ax
 31467                                  	;clc
 31468 00002989 C3                      	retn
 31469                                  
 31470                                  	; 12/12/2022
 31471                                  ;break_failed:
 31472                                  	;pop	ax
 31473                                  	;stc
 31474                                  	;retn
 31475                                  
 31476                                  ;----------------------------------------------------------------------------
 31477                                  ;
 31478                                  ; procedure : DevBreak
 31479                                  ;
 31480                                  ;	Input : DevLoadAddr & DevBrkAddr
 31481                                  ;	Output : none
 31482                                  ;
 31483                                  ;	Marks a succesful install of a device driver
 31484                                  ;	Sets device size field in sub-arena &
 31485                                  ;	Updates Free ptr in UMB or adjusts memhi
 31486                                  ;
 31487                                  ;----------------------------------------------------------------------------
 31488                                  
 31489                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31490                                  DevBreak:
 31491                                  	;push	ds ; 11/12/2022
 31492                                  
 31493                                  	; 11/12/2022
 31494 0000298A 0E                      	push	cs
 31495 0000298B 1F                      	pop	ds
 31496                                  	;mov	ax,[cs:DevLoadAddr]
 31497                                  	;mov	bx,[cs:DevBrkAddr+2]
 31498 0000298C A1[B01E]                	mov	ax,[DevLoadAddr]
 31499 0000298F 8B1E[BA1E]              	mov	bx,[DevBrkAddr+2]
 31500                                  	; 11/12/2022
 31501 00002993 1E                      	push	ds
 31502                                  
 31503 00002994 48                      	dec	ax			; seg of sub-arena
 31504 00002995 8ED8                    	mov	ds,ax
 31505 00002997 40                      	inc	ax			; Back to Device segment
 31506 00002998 29D8                    	sub	ax,bx
 31507 0000299A F7D8                    	neg	ax			; size of device in paras
 31508 0000299C A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 31509                                  	
 31510                                  	; 11/12/2022
 31511 0000299F 1F                      	pop	ds
 31512                                  	; ds = cs
 31513                                   	
 31514 000029A0 803E[CB1E]00            	cmp	byte [DeviceHi],0
 31515                                  	;cmp	byte [cs:DeviceHi],0
 31516 000029A5 7405                    	je	short db_lo
 31517                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 31518                                  	;jmp	short db_exit
 31519                                  	; 11/12/2022
 31520 000029A7 891E[C11E]              	mov	[DevUMBFree],bx
 31521 000029AB C3                      	retn	
 31522                                  db_lo:
 31523                                  	; 11/12/2022
 31524                                  	; ds = cs
 31525                                  	;mov	[cs:memhi],bx
 31526                                  	;mov	word [cs:memlo],0
 31527 000029AC 891E[E003]              	mov	[memhi],bx
 31528 000029B0 C706[DE03]0000          	mov	word [memlo],0 ; 18/12/2022
 31529                                  db_exit:
 31530                                  	;pop	ds ; 11/12/2022
 31531 000029B6 C3                      	retn
 31532                                  
 31533                                  ; 10/04/2019 - Retro DOS v4.0
 31534                                  
 31535                                  ;----------------------------------------------------------------------------
 31536                                  ;
 31537                                  ; procedure : ParseSize
 31538                                  ;
 31539                                  ;	Parses the command line for SIZE= command
 31540                                  ;
 31541                                  ;	ES:SI = command line to parsed
 31542                                  ;
 31543                                  ;	returns ptr to command line after SIZE= option in ES:SI
 31544                                  ;	updates the DevSizeOption variable with value supplied
 31545                                  ;	in SIZE=option
 31546                                  ;	Returns carry if the SIZE option was invalid
 31547                                  ;
 31548                                  ;----------------------------------------------------------------------------
 31549                                  
 31550                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31551                                  	; (SYSINIT:2D5Ah)
 31552                                  ParseSize:
 31553                                  	;push	bx
 31554                                  	;mov	bx,si
 31555                                  
 31556                                  	; 11/12/2022
 31557                                  	; ds = cs
 31558                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 31559                                  	;mov	[cs:DevCmdLine],si
 31560                                  	;mov	[cs:DevCmdLine+2],es
 31561 000029B7 C706[CC1E]0000          	mov	word [DevSizeOption],0 ; init the value
 31562 000029BD 8936[DC1E]              	mov	[DevCmdLine],si
 31563 000029C1 8C06[DE1E]              	mov	[DevCmdLine+2],es	
 31564 000029C5 E82800                  	call	SkipDelim
 31565 000029C8 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 31566 000029CD 751F                    	jne	short ps_no_size
 31567 000029CF 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 31568 000029D5 7517                    	jne	short ps_no_size
 31569 000029D7 268A4404                	mov	al,[es:si+4]
 31570 000029DB E86706                  	call	delim
 31571 000029DE 750E                    	jne	short ps_no_size
 31572 000029E0 83C605                  	add	si,5
 31573 000029E3 E81500                  	call	GetHexNum
 31574 000029E6 7207                    	jc	short ps_err
 31575                                  	; 11/12/2022
 31576                                  	; ds = cs
 31577                                  	;mov	[cs:DevSizeOption],ax
 31578 000029E8 A3[CC1E]                	mov	[DevSizeOption],ax
 31579 000029EB E80200                  	call	SkipDelim
 31580                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31581                                  	;mov	bx,si
 31582                                  ps_no_size:	
 31583                                  	;mov	si,bx
 31584                                  	;pop	bx
 31585 000029EE F8                      	clc	; cf=0
 31586                                  	;retn
 31587                                  	; 11/12/2022
 31588                                  ps_err:		; cf=1
 31589                                  sd_ret:		; cf=?
 31590 000029EF C3                      	retn
 31591                                  ;ps_err:
 31592                                  	; 02/11/2022
 31593                                  	;pop	bx
 31594                                  	;stc
 31595                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31596                                  	; 11/12/2022
 31597                                  	; cf=1
 31598                                  	;stc
 31599                                  	; 11/12/2022
 31600                                  ;sd_ret: 
 31601                                  	; 22/07/2023
 31602                                  	; 12/04/2019
 31603                                  	;retn
 31604                                  
 31605                                  ; 12/04/2019 - Retro DOS v4.0
 31606                                  
 31607                                  ;----------------------------------------------------------------------------
 31608                                  ;
 31609                                  ; procedure : SkipDelim
 31610                                  ;
 31611                                  ;	Skips delimiters in the string pointed to by ES:SI
 31612                                  ;	Returns ptr to first non-delimiter character in ES:SI
 31613                                  ;
 31614                                  ;----------------------------------------------------------------------------
 31615                                  	
 31616                                  	; 01/11/2022
 31617                                  SkipDelim:
 31618                                  sd_next_char:
 31619 000029F0 268A04                  	mov	al,[es:si]
 31620 000029F3 E84F06                  	call	delim
 31621 000029F6 75F7                    	jnz	short sd_ret
 31622 000029F8 46                      	inc	si
 31623 000029F9 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 31624                                  	; 11/12/2022
 31625                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31626                                  ;sd_ret:
 31627                                  	;retn
 31628                                  
 31629                                  ;----------------------------------------------------------------------------
 31630                                  ;
 31631                                  ; procedure : GetHexNum
 31632                                  ;
 31633                                  ;	Converts an ascii string terminated by a delimiter into binary.
 31634                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 31635                                  ;
 31636                                  ;	Returns in AX the number number of paras equivalent to the
 31637                                  ;	hex number of bytes specified by the hexadecimal string.
 31638                                  ;
 31639                                  ;	Returns carry in case it encountered a non-hex character or
 31640                                  ;	if it encountered crlf
 31641                                  ;
 31642                                  ;----------------------------------------------------------------------------
 31643                                  
 31644                                  ; 13/05/2019
 31645                                  
 31646                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31647                                  	; (SYSINIT:2DA5h)
 31648                                  GetHexNum:
 31649 000029FB 31C0                    	xor	ax,ax
 31650 000029FD 31D2                    	xor	dx,dx
 31651                                  ghn_next:
 31652 000029FF 268A1C                  	mov	bl,[es:si]
 31653 00002A02 80FB0D                  	cmp	bl,cr  ; 0Dh
 31654 00002A05 7436                    	je	short ghn_err
 31655 00002A07 80FB0A                  	cmp	bl,lf  ; 0Ah
 31656 00002A0A 7431                    	je	short ghn_err
 31657 00002A0C 50                      	push	ax
 31658 00002A0D 88D8                    	mov	al,bl
 31659 00002A0F E83306                  	call	delim
 31660 00002A12 58                      	pop	ax
 31661                                  	; 04/01/2023
 31662 00002A13 B90400                  	mov	cx, 4
 31663 00002A16 7410                    	jz	short ghn_into_paras
 31664 00002A18 E82400                  	call	GetNibble
 31665                                  	;jc	short ghn_err
 31666                                  	; 11/12/2022
 31667 00002A1B 7221                    	jc	short ghn_ret ; cf=1
 31668                                  	; 04/01/2023
 31669                                  	;mov	cx,4
 31670                                  ghn_shift1:
 31671 00002A1D D1E0                    	shl	ax,1
 31672 00002A1F D1D2                    	rcl	dx,1
 31673 00002A21 E2FA                    	loop	ghn_shift1
 31674 00002A23 08D8                    	or	al,bl
 31675 00002A25 46                      	inc	si
 31676 00002A26 EBD7                    	jmp	short ghn_next
 31677                                  ghn_into_paras:
 31678 00002A28 83C00F                  	add	ax,15
 31679 00002A2B 83D200                  	adc	dx,0
 31680 00002A2E F7C2F0FF                	test	dx,0FFF0h
 31681 00002A32 7509                    	jnz	short ghn_err
 31682                                  	; 04/01/2023
 31683                                  	;mov	cx,4
 31684                                  ghn_shift2:
 31685 00002A34 F8                      	clc
 31686 00002A35 D1DA                    	rcr	dx,1
 31687 00002A37 D1D8                    	rcr	ax,1
 31688 00002A39 E2F9                    	loop	ghn_shift2
 31689 00002A3B F8                      	clc
 31690 00002A3C C3                      	retn
 31691                                  	; 11/12/2022
 31692                                  ghn_err:
 31693                                  gnib_err:
 31694 00002A3D F9                      	stc
 31695                                  ghn_ret:
 31696                                  gnib_ret:
 31697 00002A3E C3                      	retn
 31698                                  
 31699                                  ;----------------------------------------------------------------------------
 31700                                  ;
 31701                                  ; procedure : GetNibble
 31702                                  ;
 31703                                  ;	Convert one nibble (hex digit) in BL into binary
 31704                                  ;
 31705                                  ;	Retruns binary value in BL
 31706                                  ;
 31707                                  ;	Returns carry if BL contains non-hex digit
 31708                                  ;
 31709                                  ;----------------------------------------------------------------------------
 31710                                  
 31711                                  GetNibble:
 31712 00002A3F 80FB30                  	cmp	bl,'0'
 31713                                  	;jb	short gnib_err
 31714                                  	; 11/12/2022
 31715 00002A42 72FA                    	jb	short gnib_ret ; cf=1
 31716 00002A44 80FB39                  	cmp	bl,'9'
 31717 00002A47 7704                    	ja	short is_it_hex
 31718 00002A49 80EB30                  	sub	bl,'0'		; clc
 31719 00002A4C C3                      	retn
 31720                                  is_it_hex:
 31721 00002A4D 80FB41                  	cmp	bl,'A'
 31722                                  	;jb	short gnib_err
 31723                                  	; 11/12/2022
 31724 00002A50 72EC                    	jb	short gnib_ret ; cf=1
 31725 00002A52 80FB46                  	cmp	bl,'F'
 31726 00002A55 77E6                    	ja	short gnib_err ; 11/12/2022
 31727 00002A57 80EB37                  	sub	bl,'A'- 10	; clc
 31728 00002A5A C3                      	retn
 31729                                  	; 11/12/2022
 31730                                  ;gnib_err:
 31731                                  ;	stc
 31732                                  ;gnib_ret:
 31733                                  ;	retn
 31734                                  
 31735                                  ;============================================================================
 31736                                  
 31737                                  ; 12/04/2019 - Retro DOS v4.0
 31738                                  
 31739                                  ; umb.inc (MSDOS 6.0, 1991)
 31740                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 31741                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 31742                                  
 31743                                  XMM_REQUEST_UMB	equ 10h
 31744                                  XMM_RELEASE_UMB	equ 11h
 31745                                  
 31746                                  ;----------------------------------------------------------------------------
 31747                                  ;
 31748                                  ; procedure : AllocUMB
 31749                                  ;
 31750                                  ;	Allocate all UMBs and link it to DOS arena chain
 31751                                  ;
 31752                                  ;----------------------------------------------------------------------------
 31753                                  
 31754                                  AllocUMB:
 31755                                  	; 31/12/2022
 31756                                  	; ds = cs
 31757 00002A5B E81000                  	call	InitAllocUMB		; link in the first UMB
 31758 00002A5E 720D                    	jc	short au_exit		; quit on error
 31759                                  au_next:
 31760 00002A60 E83900                  	call	umb_allocate		; allocate
 31761 00002A63 7205                    	jc	short au_coalesce
 31762 00002A65 E85000                  	call	umb_insert		; & insert till no UMBs
 31763 00002A68 EBF6                    	jmp	short au_next
 31764                                  au_coalesce:
 31765 00002A6A E80901                  	call	umb_coalesce		; coalesce all UMBs
 31766                                  au_exit:
 31767                                  	; 31/12/2022
 31768                                  	; ds = cs
 31769 00002A6D C3                      	retn
 31770                                  
 31771                                  ;----------------------------------------------------------------------------
 31772                                  ;
 31773                                  ; procedure : InitAllocUMB
 31774                                  ;
 31775                                  ;----------------------------------------------------------------------------
 31776                                  
 31777                                  InitAllocUMB:
 31778                                  	; 31/12/2022
 31779                                  	; ds = cs
 31780 00002A6E E8AFDF                  	call	IsXMSLoaded
 31781 00002A71 7527                    	jnz	short iau_err		; quit on no XMS driver
 31782 00002A73 B452                    	mov	ah,52h
 31783 00002A75 CD21                    	int	21h			; get DOS DATA seg
 31784                                  	; 31/12/2022
 31785                                  	; ds = cs
 31786                                  	;mov	[cs:DevDOSData],es	; & save it for later
 31787 00002A77 8C06[DA1E]              	mov	[DevDOSData],es		; & save it for later
 31788 00002A7B B81043                  	mov	ax,4310h
 31789 00002A7E CD2F                    	int	2Fh
 31790                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 31791                                  	;mov	[cs:DevXMSAddr+2],es
 31792 00002A80 891E[C31E]              	mov	[DevXMSAddr],bx		; get XMS driver address
 31793 00002A84 8C06[C51E]              	mov	[DevXMSAddr+2],es	
 31794                                  	; 31/12/2022
 31795 00002A88 803E[D91E]00            	cmp	byte [FirstUMBLinked],0 
 31796                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 31797                                  	;jne	short ia_1		; quit if we already did it
 31798                                  	; 12/12/2022
 31799 00002A8D 770A                    	ja	short ia_1 ; cf=0
 31800 00002A8F E83201                  	call	LinkFirstUMB		; else link the first UMB
 31801                                  	;jc	short iau_err
 31802                                  	; 12/12/2022
 31803 00002A92 7207                    	jc	short iau_err2  ; cf=1
 31804                                  	; 31/12/2022
 31805                                  	; ds = cs
 31806 00002A94 C606[D91E]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31807                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31808                                  ia_1:
 31809                                  	; 12/12/2022
 31810                                  	; cf=0
 31811                                  	;clc
 31812 00002A99 C3                      	retn
 31813                                  iau_err:
 31814 00002A9A F9                      	stc
 31815                                  iau_err2:
 31816 00002A9B C3                      	retn
 31817                                  
 31818                                  ;-------------------------------------------------------------------------
 31819                                  ;
 31820                                  ; Procedure Name	: umb_allocate
 31821                                  ;
 31822                                  ; Inputs		: DS = data
 31823                                  ;
 31824                                  ; Outputs		: if UMB available
 31825                                  ;				Allocates the largest available UMB and 
 31826                                  ;			  	BX = segment of allocated block
 31827                                  ;				DX = size of allocated block
 31828                                  ;				NC
 31829                                  ;			  else 
 31830                                  ;				CY
 31831                                  ;
 31832                                  ; Uses			: BX, DX
 31833                                  ;
 31834                                  ;-------------------------------------------------------------------------
 31835                                  
 31836                                  umb_allocate:
 31837                                  	; 31/12/2022
 31838                                  	; ds = cs
 31839 00002A9C 50                      	push	ax
 31840 00002A9D B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31841 00002A9F BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 31842                                  					;   possible
 31843                                  	; 31/12/2022
 31844 00002AA2 FF1E[C31E]              	call	far [DevXMSAddr]
 31845                                  	;call	far [cs:DevXMSAddr]
 31846                                  					; dx now contains the size of
 31847                                  					; the largest UMB
 31848 00002AA6 09D2                    	or	dx,dx
 31849 00002AA8 740B                    	jz	short ua_err
 31850                                  	
 31851 00002AAA B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31852                                  
 31853                                  	; 31/12/2022
 31854 00002AAC FF1E[C31E]              	call	far [DevXMSAddr]
 31855                                  	;call	far [cs:DevXMSAddr]
 31856                                  
 31857 00002AB0 83F801                  	cmp	ax,1			; Q: was the reqst successful
 31858                                  	;jne	short ua_err		; N: error
 31859                                  	; 14/08/2023
 31860 00002AB3 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 31861                                  ua_err:
 31862 00002AB5 F9                      	stc	
 31863                                  
 31864                                  	;clc
 31865                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31866                                  	; 12/12/2022
 31867                                  	; cf=0
 31868                                  	;clc 
 31869                                  ua_done:
 31870 00002AB6 58                      	pop	ax
 31871 00002AB7 C3                      	retn
 31872                                  	; 14/08/2023
 31873                                  ;ua_err:
 31874                                  	;stc
 31875                                  	;jmp	short ua_done
 31876                                  
 31877                                  ;---------------------------------------------------------------------------
 31878                                  ;
 31879                                  ; Procedure Name	: umb_insert
 31880                                  ;
 31881                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 31882                                  ;			: BX = seg address of UMB to be linked in
 31883                                  ;			: DX = size of UMB to be linked in paras
 31884                                  ;			; DS = data
 31885                                  ;
 31886                                  ; Outputs		: links the UMB into the arena chain
 31887                                  ;
 31888                                  ; Uses			: AX, CX, ES, DX, BX
 31889                                  ;
 31890                                  ;---------------------------------------------------------------------------
 31891                                  
 31892                                  umb_insert:
 31893 00002AB8 1E                      	push	ds
 31894                                  
 31895                                  	; 31/12/2022
 31896                                  	; ds = cs
 31897                                  
 31898                                  	;mov	ds,[cs:DevDOSData]
 31899 00002AB9 8E1E[DA1E]              	mov	ds,[DevDOSData] ; 31/12/2022 
 31900                                  	;mov	ds,[8Ch]
 31901 00002ABD 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 31902 00002AC1 8CD8                    	mov	ax,ds
 31903 00002AC3 8EC0                    	mov	es,ax
 31904                                  ui_next:
 31905 00002AC5 39D8                    	cmp	ax,bx			; Q: is current block above
 31906                                  					;    new block
 31907 00002AC7 770F                    	ja	short ui_insert		; Y: insert it
 31908                                  					; Q: is current block the
 31909                                  					;    last
 31910 00002AC9 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31911 00002ACF 745C                    	je	short ui_append		; Y: append new block to chain
 31912                                  					; N: get next block
 31913 00002AD1 8ED8                    	mov	ds,ax			; M005
 31914                                  	;call	get_next		; ax = es = next block
 31915 00002AD3 E8E200                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 31916 00002AD6 EBED                    	jmp	short ui_next
 31917                                  
 31918                                  ui_insert:
 31919 00002AD8 8CD9                    	mov	cx,ds			; ds = previous arena
 31920 00002ADA 41                      	inc	cx			; top of previous block
 31921                                  
 31922 00002ADB 29D9                    	sub	cx,bx
 31923 00002ADD F7D9                    	neg	cx			; cx = size of used block
 31924                                  	;mov	byte [0],'M'
 31925 00002ADF C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31926                                  	;mov	word [1],8
 31927 00002AE4 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 31928                                  	;mov	[3],cx
 31929 00002AEA 890E0300                	mov	[ARENA.SIZE],cx	
 31930                                  	;mov	word [8],4353h ; 'SC'
 31931 00002AEE C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 31932                                  
 31933                                  ; prepare the arena at start of new block
 31934                                  
 31935 00002AF4 8EC3                    	mov	es,bx
 31936 00002AF6 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31937 00002AFC 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 31938                                  					; mark as free
 31939 00002B03 83EA02                  	sub	dx,2			; make room for arena at
 31940                                  					; start & end of new block
 31941 00002B06 2689160300              	mov	[es:ARENA.SIZE],dx
 31942                                  
 31943                                  ; prepare arena at end of new block
 31944                                  	
 31945 00002B0B 01D3                    	add	bx,dx
 31946 00002B0D 43                      	inc	bx
 31947 00002B0E 8EC3                    	mov	es,bx			; es=arena at top of new block
 31948 00002B10 43                      	inc	bx			; bx=top of new block
 31949                                  
 31950                                  					; ax contains arena just above
 31951                                  					; this block
 31952 00002B11 29D8                    	sub	ax,bx			; ax = size of used block
 31953                                  	
 31954 00002B13 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31955 00002B19 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31956 00002B20 26A30300                	mov	[es:ARENA.SIZE],ax	
 31957 00002B24 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 31958                                  
 31959 00002B2B EB47                    	jmp	short ui_done
 31960                                  
 31961                                  ui_append:
 31962                                  					; es = arena of last block	
 31963 00002B2D 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 31964 00002B32 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 31965                                  					; going to rsrv on top of this 
 31966                                  					; block for the next arena.
 31967                                  	; 13/05/2019
 31968 00002B38 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31969                                  
 31970 00002B3E 89C1                    	mov	cx,ax			; cx=top of prev block-1
 31971 00002B40 40                      	inc	ax
 31972 00002B41 29D8                    	sub	ax,bx			; ax=top of prev block - 
 31973                                  					;    seg. address of new block
 31974 00002B43 F7D8                    	neg	ax
 31975                                  
 31976 00002B45 8EC1                    	mov	es,cx			; ds = arena of unused block
 31977                                  
 31978 00002B47 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31979 00002B4D 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31980 00002B54 26A30300                	mov	[es:ARENA.SIZE],ax	
 31981 00002B58 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 31982                                  
 31983                                  ; prepare the arena at start of new block
 31984 00002B5F 8EC3                    	mov	es,bx
 31985 00002B61 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 31986 00002B67 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 31987                                  					; mark as free
 31988 00002B6E 4A                      	dec	dx			; make room for arena
 31989 00002B6F 2689160300              	mov	[es:ARENA.SIZE],dx	
 31990                                  ui_done:
 31991                                  uc_done: ; 31/12/2022 ; *!
 31992 00002B74 1F                      	pop	ds
 31993                                  	; ds = cs ; 31/12/2022
 31994                                  ;uc_done:	; 18/12/2022
 31995 00002B75 C3                      	retn
 31996                                  
 31997                                  ; 13/04/2019 - Retro DOS v4.0
 31998                                  
 31999                                  ;----------------------------------------------------------------------------
 32000                                  ;
 32001                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 32002                                  ;
 32003                                  ;	Coalesce adds the block following the argument to the argument block,
 32004                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 32005                                  ;	some callers (such as $setblock) use it to join a free block to it's
 32006                                  ;	preceeding allocated block.
 32007                                  ;
 32008                                  ;	EXIT	'C' clear if OK
 32009                                  ;		  (ds) unchanged, this block updated
 32010                                  ;		  (ax) = address of next block, IFF not at end
 32011                                  ;		'C' set if arena trashed
 32012                                  ;	USES	cx, di, ds, es
 32013                                  ;
 32014                                  ;----------------------------------------------------------------------------
 32015                                  
 32016                                  umb_coalesce:
 32017                                  	; 31/12/2022
 32018                                  	; ds = cs
 32019 00002B76 1E                      	push	ds ; *!
 32020                                  
 32021 00002B77 31FF                    	xor	di, di
 32022                                  
 32023                                  	;mov	es,[cs:DevDOSData]
 32024                                  	; 31/12/2022
 32025 00002B79 8E06[DA1E]              	mov	es,[DevDOSData]
 32026 00002B7D 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 32027                                  uc_nextfree:
 32028 00002B82 8CC0                    	mov	ax,es
 32029 00002B84 8ED8                    	mov	ds,ax
 32030                                  	;cmp	[es:1],di
 32031 00002B86 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 32032 00002B8B 7407                    	je	short uc_again		; Y: try to coalesce with next block
 32033                                  					; N: get next arena
 32034 00002B8D E82100                  	call	get_next		; es, ax = next arena
 32035 00002B90 72E2                    	jc	short uc_done	; *!
 32036 00002B92 EBEE                    	jmp	short uc_nextfree
 32037                                  uc_again:
 32038 00002B94 E81A00                  	call	get_next		; ES, AX <- next block
 32039 00002B97 72DB                    	jc	short uc_done	; *!
 32040                                  uc_check:
 32041 00002B99 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 32042 00002B9E 75E2                    	jne	short uc_nextfree	; N: get next free arena
 32043                                  					; Y: coalesce
 32044 00002BA0 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 32045 00002BA5 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 32046                                  	;add	[3],cx
 32047 00002BA6 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 32048 00002BAA 268A0D                  	mov     cl,[es:di]              ; move up signature
 32049 00002BAD 880D                    	mov     [di],cl
 32050 00002BAF EBE3                    	jmp     short uc_again		; try again
 32051                                  
 32052                                  	; 18/12/2022
 32053                                  ;uc_done:
 32054                                  	;retn
 32055                                  
 32056                                  ;----------------------------------------------------------------------------
 32057                                  ;
 32058                                  ;**	get_next - Find Next item in Arena
 32059                                  ;
 32060                                  ;	ENTRY	dS - pointer to block head
 32061                                  ;	EXIT	AX,ES - pointers to next head
 32062                                  ;		'C' set if arena damaged
 32063                                  ;
 32064                                  ;----------------------------------------------------------------------------
 32065                                  
 32066                                  	; 01/11/2022
 32067                                  get_next:
 32068 00002BB1 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 32069 00002BB6 740A                    	je	short gn_err
 32070                                  _get_next_:
 32071 00002BB8 8CD8                    	mov     ax,ds                   ; ax=current block
 32072 00002BBA 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 32073 00002BBE 40                      	inc     ax                      ; remember that header!
 32074 00002BBF 8EC0                    	mov	es,ax
 32075                                  	;clc
 32076                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32077                                  	; 11/12/2022
 32078                                  	; cf=0
 32079                                  	;clc
 32080 00002BC1 C3                      	retn
 32081                                  gn_err:
 32082 00002BC2 F9                      	stc
 32083                                  	; 11/12/2022	
 32084                                  lfu_err:	 ; cf=1
 32085 00002BC3 C3                      	retn
 32086                                  
 32087                                  ;----------------------------------------------------------------------------
 32088                                  ;
 32089                                  ; procedure : LinkFirstUMB
 32090                                  ;
 32091                                  ;----------------------------------------------------------------------------
 32092                                  
 32093                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32094                                  	; (SYSINIT:2F81h)
 32095                                  LinkFirstUMB:
 32096                                  	; 31/12/2022
 32097                                  	; ds = cs
 32098 00002BC4 E8D5FE                  	call	umb_allocate
 32099 00002BC7 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 32100                                  
 32101                                  ; bx = segment of allocated UMB
 32102                                  ; dx = size of UMB
 32103                                  
 32104                                  	; 31/12/2022
 32105                                  	; ds = cs
 32106                                  
 32107 00002BC9 CD12                    	int	12h			; ax = size of memory
 32108 00002BCB B106                    	mov	cl,6
 32109 00002BCD D3E0                    	shl	ax,cl			; ax = size in paragraphs
 32110                                  
 32111 00002BCF 89C1                    	mov	cx,ax			; cx = size in paras
 32112 00002BD1 29D8                    	sub	ax,bx			; ax = - size of unused block
 32113                                  
 32114 00002BD3 F7D8                    	neg	ax
 32115                                  
 32116 00002BD5 83E901                  	sub	cx,1			; cx = first umb_arena
 32117 00002BD8 8EC1                    	mov	es,cx			; es = first umb_arena
 32118                                  	
 32119 00002BDA 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32120 00002BE0 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32121                                  					
 32122 00002BE7 26A30300                	mov	[es:ARENA.SIZE],ax	
 32123 00002BEB 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 32124                                  
 32125                                  ; put in the arena for the first UMB
 32126                                  
 32127 00002BF2 8EC3                    	mov	es,bx			; es has first free umb seg
 32128 00002BF4 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32129 00002BFA 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 32130                                  					; mark as free 
 32131 00002C01 4A                      	dec	dx			; make room for arena
 32132 00002C02 2689160300              	mov	[es:ARENA.SIZE],dx	
 32133                                  
 32134                                  	;mov	es,[cs:DevDOSData]
 32135                                  	; 31/12/2022
 32136 00002C07 8E06[DA1E]              	mov	es,[DevDOSData] ; ds = cs
 32137 00002C0B BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 32138 00002C0E 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 32139                                  					;  data segment with the arena
 32140                                  					;  just below Top of Mem
 32141                                  
 32142                                  ; we must now scan the arena chain and update the size of the last arena
 32143                                  
 32144 00002C11 BF2400                  	mov	di,DOS_ARENA ; 24h
 32145 00002C14 268E05                  	mov	es,[es:di]		; es = start arena
 32146 00002C17 31FF                    	xor	di,di
 32147                                  ;scan_next
 32148                                  ; 09/12/2022
 32149                                  scannext:
 32150 00002C19 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 32151 00002C1D 740C                    	je	short got_last
 32152                                  	
 32153 00002C1F 8CC0                    	mov	ax,es
 32154 00002C21 2603060300              	add	ax,[es:ARENA.SIZE]
 32155 00002C26 40                      	inc	ax
 32156 00002C27 8EC0                    	mov	es,ax
 32157                                  	;jmp	short scan_next
 32158                                  	; 09/12/2022
 32159 00002C29 EBEE                    	jmp	short scannext
 32160                                  got_last:
 32161 00002C2B 26832E030001            	sub	word [es:ARENA.SIZE],1
 32162 00002C31 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32163                                  	;clc
 32164                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32165                                  	; 11/12/2022
 32166                                  	; cf=0
 32167                                  	;clc
 32168 00002C37 C3                      	retn
 32169                                  
 32170                                  ; 11/12/2022
 32171                                  ;;lfu_err:
 32172                                  ;	;stc
 32173                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32174                                  ;	; 11/12/2022
 32175                                  ;	; cf=1
 32176                                  ;	;stc
 32177                                  ;	retn
 32178                                  
 32179                                  ;----------------------------------------------------------------------------
 32180                                  ;
 32181                                  ; procedure : ShrinkUMB
 32182                                  ;
 32183                                  ;	Shrinks the current UMB in use, so that the unused portions
 32184                                  ;	of the UMB is given back to the DOS free mem pool
 32185                                  ;
 32186                                  ;----------------------------------------------------------------------------
 32187                                  
 32188                                  ShrinkUMB:
 32189                                  	; 12/12/2022
 32190                                  	; ds = cs
 32191 00002C38 833E[BD1E]00            	cmp	word [DevUMBAddr],0
 32192                                  	;cmp	word [cs:DevUMBAddr],0
 32193 00002C3D 7421                    	je	short su_exit
 32194 00002C3F 06                      	push	es
 32195 00002C40 53                      	push	bx
 32196                                  	; 12/12/2022
 32197                                  	;mov	bx,[cs:DevUMBFree]
 32198                                  	;sub	bx,[cs:DevUMBAddr]
 32199                                  	;mov	es,[cs:DevUMBAddr]
 32200 00002C41 8B1E[C11E]              	mov	bx,[DevUMBFree]
 32201 00002C45 2B1E[BD1E]              	sub	bx,[DevUMBAddr]
 32202 00002C49 8E06[BD1E]              	mov	es,[DevUMBAddr]
 32203                                  	
 32204 00002C4D B8004A                  	mov	ax,4A00h
 32205 00002C50 CD21                    	int	21h
 32206                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 32207                                  		; ES = segment address of block to change
 32208                                  		; BX = new size in paragraphs
 32209 00002C52 8CC0                    	mov	ax,es
 32210 00002C54 48                      	dec	ax
 32211 00002C55 8EC0                    	mov	es,ax
 32212 00002C57 26C70601000800          	mov	word [es:ARENA.OWNER],8
 32213 00002C5E 5B                      	pop	bx
 32214 00002C5F 07                      	pop	es
 32215                                  su_exit:
 32216 00002C60 C3                      	retn
 32217                                  
 32218                                  ;----------------------------------------------------------------------------
 32219                                  ;
 32220                                  ; procedure : UnlinkUMB
 32221                                  ;
 32222                                  ;	Unlinks the UMBs from the DOS arena chain
 32223                                  ;
 32224                                  ;----------------------------------------------------------------------------
 32225                                  
 32226                                  UnlinkUMB:
 32227                                  	; 12/12/2022
 32228                                  	; ds = cs
 32229 00002C61 1E                      	push	ds
 32230 00002C62 06                      	push	es
 32231                                  	; 12/12/2022
 32232 00002C63 803E[D91E]00            	cmp	byte [FirstUMBLinked],0
 32233                                  	;cmp	byte [cs:FirstUMBLinked],0
 32234 00002C68 7420                    	je	short ulu_x		; nothing to unlink
 32235                                  	; 12/12/2022
 32236 00002C6A 8E06[DA1E]              	mov	es,[DevDOSData]
 32237                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 32238 00002C6E 268E1E2400              	mov	ds,[es:DOS_ARENA]
 32239 00002C73 268B3E8C00              	mov	di,[es:UMB_ARENA]
 32240                                  ulu_next:
 32241 00002C78 E836FF                  	call	get_next
 32242 00002C7B 720D                    	jc	short ulu_x
 32243 00002C7D 39C7                    	cmp	di,ax			; is the next one UMB ?
 32244 00002C7F 7404                    	je	short ulu_found
 32245 00002C81 8ED8                    	mov	ds,ax
 32246 00002C83 EBF3                    	jmp	short ulu_next
 32247                                  ulu_found:
 32248                                  	;mov	byte [0],'Z'
 32249 00002C85 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32250                                  ulu_x:
 32251 00002C8A 07                      	pop	es
 32252 00002C8B 1F                      	pop	ds
 32253 00002C8C C3                      	retn
 32254                                  
 32255                                  ; ----------------------------------------------------------------------
 32256                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 32257                                  ; ----------------------------------------------------------------------
 32258                                  ; 14/04/2019 - Retro DOS v4.0
 32259                                  
 32260                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 32261                                  ;
 32262                                  ; Summary:
 32263                                  ;
 32264                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 32265                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 32266                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 32267                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 32268                                  ;   and/or config.inc for the full list.
 32269                                  ;
 32270                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 32271                                  ;   configuration support. blockname is either MENU, which contains one
 32272                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 32273                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 32274                                  ;   INCLUDE allows the current block to name another block for inclusion
 32275                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 32276                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 32277                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 32278                                  ;
 32279                                  ; Example:
 32280                                  ;
 32281                                  ;   [menu]
 32282                                  ;   menuitem=misc,Miscellaneous
 32283                                  ;   menuitem=network,Network Configuration
 32284                                  ;   menudefault=network,15
 32285                                  ;
 32286                                  ;   [network]
 32287                                  ;   include misc
 32288                                  ;   device=foo
 32289                                  ;
 32290                                  ;   [misc]
 32291                                  ;   device=bar
 32292                                  ;   include alternate
 32293                                  ;
 32294                                  ;   [alternate]
 32295                                  ;   device=tar
 32296                                  ;
 32297                                  ;
 32298                                  ;   When the menu is displayed
 32299                                  ;
 32300                                  ;    1. Miscellaneous
 32301                                  ;    2. Network Configuration
 32302                                  ;
 32303                                  ;   #2 is highlighted as the default option, and will be automatically
 32304                                  ;   selected after 15 seconds. It will invoke the following lines in the
 32305                                  ;   following order:
 32306                                  ;
 32307                                  ;       DEVICE=BAR
 32308                                  ;       DEVICE=TAR
 32309                                  ;       DEVICE=FOO
 32310                                  ;
 32311                                  
 32312                                  ;MULTI_CONFIG equ 1
 32313                                  
 32314                                  ; the following depend on the positions of the various letters in switchlist
 32315                                  
 32316                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 32317                                  
 32318                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 32319                                  flagdrive	equ 00001000b ; 8 
 32320                                  flagcyln	equ 00010000b ; 16
 32321                                  flagseclim	equ 00100000b ; 32
 32322                                  flagheads	equ 01000000b ; 64
 32323                                  flagff		equ 10000000b ; 128
 32324                                  
 32325                                  ;----------------------------------------------------------------------------
 32326                                  ; 19/04/2019 - Retro DOS v4.0
 32327                                  
 32328                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 32329                                  
 32330                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32331                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 32332                                  
 32333 00002C8D 00                      insert_blank:	db 	0
 32334                                  
 32335                                  ;----------------------------------------------------------------------------
 32336                                  ;
 32337                                  ; procedure : setparms
 32338                                  ;
 32339                                  ; the following set of routines is used to parse the drivparm = command in
 32340                                  ; the config.sys file to change the default drive parameters.
 32341                                  ;
 32342                                  ;----------------------------------------------------------------------------
 32343                                  
 32344                                  setparms:
 32345 00002C8E 1E                      	push	ds
 32346 00002C8F 50                      	push	ax
 32347 00002C90 53                      	push	bx
 32348 00002C91 51                      	push	cx
 32349 00002C92 52                      	push	dx
 32350                                  
 32351 00002C93 0E                      	push	cs
 32352 00002C94 1F                      	pop	ds
 32353                                  
 32354 00002C95 31DB                    	xor	bx,bx
 32355 00002C97 8A1E[5636]              	mov	bl,[drive]
 32356                                  	; 18/12/2022
 32357 00002C9B 43                      	inc	bx
 32358                                  	;inc	bl			; get it correct for ioctl call
 32359                                  					; (1=a,2=b...)
 32360 00002C9C BA[2E35]                	mov	dx,deviceparameters
 32361                                  	;mov	ah,IOCTL ; 44h
 32362                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 32363                                  	; 14/08/2023
 32364 00002C9F B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 32365                                  	;mov	ch,RAWIO ; 8
 32366                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 32367                                  	; 14/08/2023
 32368 00002CA2 B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 32369 00002CA5 CD21                    	int	21h
 32370                                  
 32371                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32372                                  ;
 32373                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 32374                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 32375                                  ;	; 21/10/2022
 32376                                  ;	mov	ax,DOSBIODATASEG ; 0070h	
 32377                                  ;	mov	ds,ax			; set Bios_Data segment
 32378                                  ;
 32379                                  ;	test	word [cs:switches],flagec35 ; 4
 32380                                  ;	jz	short not_ec35
 32381                                  
 32382                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32383                                  	;test	word [switches],flagec35 ; 4
 32384                                  	; 12/12/2022
 32385 00002CA7 F606[5736]04            	test	byte [switches],flagec35 ; 4
 32386 00002CAC 7411                    	jz	short eot_ok
 32387                                  
 32388                                  	;mov	cl,[cs:drive]		; which drive was this for?
 32389                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32390 00002CAE 8A0E[5636]              	mov	cl,[drive]
 32391 00002CB2 B87000                  	mov	ax,DOSBIODATASEG ; 0070h	
 32392 00002CB5 8ED8                    	mov	ds,ax	
 32393                                  
 32394 00002CB7 B001                    	mov	al,1			; assume drive 0
 32395 00002CB9 D2E0                    	shl	al,cl			; set proper bit depending on drive
 32396                                  	;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 32397 00002CBB 0806[3105]              	or	[ec35_flag],al		; set the bit in the permanent flags
 32398                                  
 32399                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32400                                  ;
 32401                                  ;not_ec35:
 32402                                  ;;	Now adjust the BIOS's EOT variable if our new drive has more
 32403                                  ;;	sectors per track than any old ones.
 32404                                  ;
 32405                                  ;	;mov	al,[cs:deviceparameters+20]
 32406                                  ;	mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32407                                  ;	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 32408                                  ;	cmp	al,[EOT]
 32409                                  ;	jbe	short eot_ok
 32410                                  ;	mov	[EOT],al
 32411                                  
 32412                                  eot_ok:
 32413 00002CBF 5A                      	pop	dx			; fix up all the registers
 32414 00002CC0 59                      	pop	cx
 32415 00002CC1 5B                      	pop	bx
 32416 00002CC2 58                      	pop	ax
 32417 00002CC3 1F                      	pop	ds ; 13/05/2019
 32418 00002CC4 C3                      	retn
 32419                                  
 32420                                  ;----------------------------------------------------------------------------
 32421                                  ;
 32422                                  ; procedure : diddleback
 32423                                  ;
 32424                                  ; replace default values for further drivparm commands
 32425                                  ;
 32426                                  ;----------------------------------------------------------------------------
 32427                                  
 32428                                  diddleback:
 32429 00002CC5 1E                      	push	ds
 32430 00002CC6 0E                      	push	cs
 32431 00002CC7 1F                      	pop	ds
 32432                                  	;mov	word [deviceparameters+4],80
 32433 00002CC8 C706[3235]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32434                                  	;mov	byte [deviceparameters+1],2
 32435 00002CCE C606[2F35]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 32436                                  	;mov	word [deviceparameters+2],0
 32437 00002CD3 C706[3035]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 32438 00002CD9 C706[5736]0000          	mov	word [switches],0	    ; zero all switches
 32439 00002CDF 1F                      	pop	ds
 32440 00002CE0 C3                      	retn
 32441                                  
 32442                                  ; 04/01/2023
 32443                                  %if 0
 32444                                  
 32445                                  ; 15/04/2019 - Retro DOS v4.0
 32446                                  
 32447                                  ;----------------------------------------------------------------------------
 32448                                  ;
 32449                                  ; procedure : parseline
 32450                                  ;
 32451                                  ; entry point is parseline. al contains the first character in command line.
 32452                                  ;
 32453                                  ;----------------------------------------------------------------------------
 32454                                  
 32455                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32456                                  	; (SYSINIT:30ACh)
 32457                                  
 32458                                  parseline:
 32459                                  	push	ds
 32460                                  
 32461                                  	push	cs
 32462                                  	pop	ds
 32463                                  
 32464                                  nextswtch:
 32465                                  	cmp	al,cr			; carriage return?
 32466                                  	je	short done_line
 32467                                  	cmp	al,lf			; linefeed?
 32468                                  	je	short put_back		; put it back and done
 32469                                  
 32470                                  ; anything less or equal to a space is ignored.
 32471                                  
 32472                                  	cmp	al,' '                  ; space?
 32473                                  	jbe	short getnext		; skip over space
 32474                                  	cmp	al,'/'
 32475                                  	je	short getparm
 32476                                  	stc				; mark error invalid-character-in-input
 32477                                  	jmp	short exitpl
 32478                                  
 32479                                  getparm:
 32480                                  	call	check_switch
 32481                                  	mov	[switches],bx		; save switches read so far
 32482                                  	jc	short swterr
 32483                                  getnext:
 32484                                  	call	getchr
 32485                                  	jc	short done_line
 32486                                  	jmp	short nextswtch
 32487                                  swterr:
 32488                                  	jmp	short exitpl		; exit if error
 32489                                  
 32490                                  done_line:
 32491                                  	; 12/12/2022
 32492                                  	test	byte [switches],flagdrive ; 8
 32493                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32494                                  	jnz	short okay
 32495                                  	stc				; mark error no-drive-specified
 32496                                  	jmp	short exitpl
 32497                                  
 32498                                  okay:
 32499                                  	mov	ax,[switches]
 32500                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32501                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32502                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32503                                  	;clc			    ; everything is fine
 32504                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32505                                  	; 12/12/2022
 32506                                  	; cf=0
 32507                                  	;clc
 32508                                  	call	setdeviceparameters
 32509                                  exitpl:
 32510                                  	pop	ds
 32511                                  	retn
 32512                                  put_back:
 32513                                  	inc	word [count]		; one more char to scan
 32514                                  	dec	word [chrptr]		; back up over linefeed
 32515                                  	jmp	short done_line
 32516                                  
 32517                                  %endif
 32518                                  
 32519                                  ;----------------------------------------------------------------------------
 32520                                  ;
 32521                                  ; procedure : check_switch
 32522                                  ;
 32523                                  ; processes a switch in the input. it ensures that the switch is valid, and
 32524                                  ; gets the number, if any required, following the switch. the switch and the
 32525                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 32526                                  ; error.
 32527                                  ;
 32528                                  ;----------------------------------------------------------------------------
 32529                                  
 32530                                  check_switch:
 32531 00002CE1 E81BFA                  	call	getchr
 32532                                  	;jc	short err_check
 32533 00002CE4 724E                    	jc	short err_chk
 32534 00002CE6 24DF                            and     al,0DFh                 ; convert it to upper case
 32535 00002CE8 3C41                    	cmp	al,'A'
 32536                                  	;jb	short err_check
 32537 00002CEA 7248                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 32538 00002CEC 3C5A                    	cmp	al,'Z'
 32539 00002CEE 7743                    	ja	short err_check
 32540                                  
 32541 00002CF0 06                      	push	es
 32542                                  
 32543 00002CF1 0E                      	push	cs
 32544 00002CF2 07                      	pop	es
 32545                                  
 32546 00002CF3 8A0E[EA36]              	mov	cl,[switchlist]		; get number of valid switches
 32547 00002CF7 B500                    	mov	ch,0
 32548 00002CF9 BF[EB36]                	mov	di,1+switchlist		; point to string of valid switches
 32549 00002CFC F2AE                    	repne	scasb
 32550                                  
 32551 00002CFE 07                      	pop	es
 32552 00002CFF 7532                    	jnz	short err_check
 32553                                  
 32554 00002D01 B80100                  	mov	ax,1
 32555 00002D04 D3E0                    	shl	ax,cl			; set bit to indicate switch
 32556 00002D06 8B1E[5736]              	mov	bx,[switches]		; get switches so far
 32557 00002D0A 09C3                    	or	bx,ax			; save this with other switches
 32558 00002D0C 89C1                    	mov	cx,ax
 32559                                  	; 12/12/2022
 32560 00002D0E A8F8                    	test	al,switchnum ; 0F8h
 32561                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 32562 00002D10 741E                    	jz	short done_swtch
 32563                                  
 32564 00002D12 E8EAF9                  	call	getchr
 32565 00002D15 721A                    	jc	short err_swtch
 32566                                  
 32567 00002D17 3C3A                    	cmp	al,':'
 32568 00002D19 7516                    	jne	short err_swtch
 32569                                  
 32570 00002D1B E8E1F9                  	call	getchr
 32571 00002D1E 53                      	push	bx			; preserve switches
 32572                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32573                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 32574                                  	; 12/12/2022
 32575                                  	; ds = cs
 32576 00002D1F C606[2A03]20            	mov	byte [sepchr],' '
 32577 00002D24 E8D803                  	call	getnum
 32578                                  	;mov	byte [cs:sepchr],0
 32579                                  	; 12/12/2022
 32580 00002D27 C606[2A03]00            	mov	byte [sepchr],0
 32581 00002D2C 5B                      	pop	bx			; restore switches
 32582                                  
 32583                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 32584                                  ; not check for carry set here. if there is an error, it will be detected
 32585                                  ; further on (hopefully).
 32586                                  
 32587 00002D2D E80500                  	call	process_num
 32588                                  
 32589                                  done_swtch:
 32590                                  	;clc
 32591                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32592                                  	; 12/12/2022
 32593                                  	; cf=0
 32594                                  	;clc
 32595 00002D30 C3                      	retn
 32596                                  
 32597                                  err_swtch:
 32598 00002D31 31CB                    	xor	bx,cx			; remove this switch from the records
 32599                                  err_check:
 32600 00002D33 F9                      	stc
 32601                                  err_chk:
 32602 00002D34 C3                      	retn
 32603                                  
 32604                                  ;----------------------------------------------------------------------------
 32605                                  ;
 32606                                  ; procedure : process_num
 32607                                  ;
 32608                                  ; this routine takes the switch just input, and the number following (if any),
 32609                                  ; and sets the value in the appropriate variable. if the number input is zero
 32610                                  ; then it does nothing - it assumes the default value that is present in the
 32611                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 32612                                  ;
 32613                                  ;----------------------------------------------------------------------------
 32614                                  
 32615                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32616                                  	; (SYSINIT:3156h)
 32617                                  process_num:
 32618 00002D35 850E[5736]              	test	[switches],cx		; if this switch has been done before,
 32619 00002D39 752B                    	jnz	short done_ret		; ignore this one.
 32620                                  	; 12/12/2022
 32621 00002D3B F6C108                  	test	cl,flagdrive ; 8
 32622                                  	;test	cx,flagdrive ; 8
 32623 00002D3E 7404                    	jz	short try_f
 32624 00002D40 A2[5636]                	mov	byte [drive],al
 32625                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32626                                  	;jmp	short done_ret
 32627                                  	; 12/12/2022
 32628                                  	; cf=0
 32629 00002D43 C3                      	retn	; 13/05/2019
 32630                                  try_f:
 32631                                  	; 12/12/2022
 32632 00002D44 F6C180                  	test	cl,flagff ; 80h
 32633                                  	;test	cx,flagff ; 80h
 32634 00002D47 7404                    	jz	short try_t
 32635                                  
 32636                                  ; ensure that we do not get bogus form factors that are not supported
 32637                                  
 32638                                  	;mov	[deviceparameters+1],al
 32639 00002D49 A2[2F35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 32640                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32641                                  	;jmp	short done_ret
 32642                                  	; 12/12/2022
 32643                                  	; cf=0
 32644 00002D4C C3                      	retn	; 13/05/2019
 32645                                  try_t:
 32646 00002D4D 09C0                    	or	ax,ax
 32647 00002D4F 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 32648                                  	; 12/12/2022
 32649 00002D51 F6C110                  	test	cl,flagcyln ; 10h
 32650                                  	;test	cx,flagcyln ; 10h
 32651 00002D54 7404                    	jz	short try_s
 32652                                  
 32653                                  	;mov	[deviceparameters+4],ax
 32654 00002D56 A3[3235]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 32655                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32656                                  	;jmp	short done_ret
 32657                                  	; 12/12/2022
 32658                                  	; cf=0
 32659 00002D59 C3                      	retn	; 13/05/2019
 32660                                  try_s:
 32661                                  	; 12/12/2022
 32662 00002D5A F6C120                  	test	cl,flagseclim ; 20h
 32663                                  	;test	cx,flagseclim ; 20h
 32664 00002D5D 7404                    	jz	short try_h
 32665 00002D5F A3[5436]                	mov	[slim],ax
 32666                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32667                                  	;jmp	short done_ret
 32668                                  	; 12/12/2022
 32669                                  	; cf=0
 32670 00002D62 C3                      	retn	; 13/05/2019
 32671                                  
 32672                                  ; must be for number of heads
 32673                                  
 32674                                  try_h:
 32675 00002D63 A3[5236]                	mov	[hlim],ax
 32676                                  done_ret:
 32677                                  	;clc
 32678                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32679                                  	; 12/12/2022
 32680                                  	; cf=0 (test instruction resets cf)
 32681                                  	;clc
 32682 00002D66 C3                      	retn
 32683                                  
 32684                                  ; 04/01/2023 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32685                                  %if 1
 32686                                  
 32687                                  ; 15/04/2019 - Retro DOS v4.0
 32688                                  
 32689                                  ;----------------------------------------------------------------------------
 32690                                  ;
 32691                                  ; procedure : parseline
 32692                                  ;
 32693                                  ; entry point is parseline. al contains the first character in command line.
 32694                                  ;
 32695                                  ;----------------------------------------------------------------------------
 32696                                  
 32697                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32698                                  	; (SYSINIT:30ACh)
 32699                                  parseline:
 32700                                  	; 04/01/2023
 32701                                  	; ds = cs ; *
 32702                                  
 32703                                  	;push	ds ; *
 32704                                  
 32705                                  	;push	cs ; *
 32706                                  	;pop	ds ; *
 32707                                  
 32708                                  nextswtch:
 32709 00002D67 3C0D                    	cmp	al,cr			; carriage return?
 32710 00002D69 741C                    	je	short done_line
 32711 00002D6B 3C0A                    	cmp	al,lf			; linefeed?
 32712 00002D6D 7421                    	je	short put_back		; put it back and done
 32713                                  
 32714                                  ; anything less or equal to a space is ignored.
 32715                                  
 32716 00002D6F 3C20                    	cmp	al,' '                  ; space?
 32717 00002D71 760F                    	jbe	short getnext		; skip over space
 32718 00002D73 3C2F                    	cmp	al,'/'
 32719 00002D75 7402                    	je	short getparm
 32720 00002D77 F9                      	stc				; mark error invalid-character-in-input
 32721                                  	;jmp	short exitpl
 32722                                  	; 04/01/2023
 32723                                  swterr:
 32724 00002D78 C3                      	retn
 32725                                  
 32726                                  getparm:
 32727 00002D79 E865FF                  	call	check_switch
 32728 00002D7C 891E[5736]              	mov	[switches],bx		; save switches read so far
 32729 00002D80 72F6                    	jc	short swterr
 32730                                  getnext:
 32731 00002D82 E87AF9                  	call	getchr
 32732                                  	;jc	short done_line
 32733                                  	;jmp	short nextswtch
 32734                                  	; 04/01/2023
 32735 00002D85 73E0                    	jnc	short nextswtch
 32736                                  ;swterr:
 32737                                  	;jmp	short exitpl		; exit if error
 32738                                  
 32739                                  done_line:
 32740                                  	; 12/12/2022
 32741 00002D87 F606[5736]08            	test	byte [switches],flagdrive ; 8
 32742                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32743 00002D8C 750C                    	jnz	short okay
 32744 00002D8E F9                      	stc				; mark error no-drive-specified
 32745                                  	;jmp	short exitpl
 32746                                  	; 04/01/2023
 32747 00002D8F C3                      	retn
 32748                                  
 32749                                  ;exitpl:
 32750                                  	; 04/01/2023
 32751                                  	; ds = cs
 32752                                  	;;pop	ds ; *
 32753                                  	;retn
 32754                                  
 32755                                  put_back:
 32756 00002D90 FF06[D203]              	inc	word [count]		; one more char to scan
 32757 00002D94 FF0E[D603]              	dec	word [chrptr]		; back up over linefeed
 32758 00002D98 EBED                    	jmp	short done_line
 32759                                  
 32760                                  okay:
 32761 00002D9A A1[5736]                	mov	ax,[switches]
 32762 00002D9D 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32763 00002DA0 A3[3035]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32764 00002DA3 C706[5435]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32765                                  	;clc			    ; everything is fine
 32766                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32767                                  	; 12/12/2022
 32768                                  	; cf=0
 32769                                  	;clc
 32770                                  	;call	setdeviceparameters
 32771                                  	; 04/01/2023
 32772                                  	;jmp	short setdeviceparameters
 32773                                  
 32774                                  %endif
 32775                                  
 32776                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 32777                                  
 32778                                  ;----------------------------------------------------------------------------
 32779                                  ;
 32780                                  ; procedure : setdeviceparameters
 32781                                  ;
 32782                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 32783                                  ; system based on the form factor. it is assumed that the bpbs for the
 32784                                  ; various form factors are present in the bpbtable. for hard files,
 32785                                  ; the recommended bpb is the same as the bpb on the drive.
 32786                                  ; no attempt is made to preserve registers since we are going to jump to
 32787                                  ; sysinit straight after this routine.
 32788                                  ;
 32789                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 32790                                  ;	  we always return no carry
 32791                                  ;
 32792                                  ;	note:  there is a routine by the same name in msdioctl.asm
 32793                                  ;
 32794                                  ;----------------------------------------------------------------------------
 32795                                  
 32796                                  ; 15/04/2019 - Retro DOS v4.0
 32797                                  
 32798                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32799                                  setdeviceparameters:
 32800                                  	; 04/01/2023
 32801                                  	; ds = cs
 32802                                  	
 32803 00002DA9 06                      	push	es
 32804                                  
 32805 00002DAA 0E                      	push	cs
 32806 00002DAB 07                      	pop	es
 32807                                  
 32808 00002DAC 31DB                    	xor	bx,bx
 32809 00002DAE 8A1E[2F35]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 32810 00002DB2 80FB00                  	cmp	bl,DEV_5INCH ; 0
 32811 00002DB5 7506                    	jne	short got_80
 32812                                  
 32813 00002DB7 C706[3235]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32814                                  							; 48 tpi=40 cyl
 32815                                  got_80:
 32816 00002DBD D1E3                    	shl	bx,1			; get index into bpb table
 32817 00002DBF 8BB7[D636]              	mov	si,[bpbtable+bx]	; get address of bpb
 32818                                  
 32819                                  	;mov	di,deviceparameters+7	
 32820                                  	; 02/11/2022
 32821 00002DC3 BF[3535]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 32822 00002DC6 B91F00                  	mov	cx,A_BPB.size ; 31
 32823 00002DC9 FC                      	cld
 32824                                  	;repe	movsb
 32825                                  	; 02/11/2022
 32826 00002DCA F3A4                    	rep	movsb
 32827                                  
 32828 00002DCC 07                      	pop	es
 32829                                  
 32830                                  	; 12/12/2022
 32831 00002DCD F606[5736]20            	test	byte [switches],flagseclim ; 20h
 32832                                  	;test	word [switches],flagseclim ; 20h
 32833 00002DD2 7406                    	jz	short see_heads
 32834                                  
 32835 00002DD4 A1[5436]                	mov	ax,[slim]
 32836                                  	;mov	[deviceparameters+20],ax
 32837 00002DD7 A3[4235]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 32838                                  
 32839                                  see_heads:
 32840                                  	; 12/12/2022
 32841 00002DDA F606[5736]40            	test	byte [switches],flagheads ; 40h
 32842                                  	;test	word [switches],flagheads ; 40h
 32843 00002DDF 7406                    	jz	short heads_not_altered
 32844                                  
 32845 00002DE1 A1[5236]                	mov	ax,[hlim]
 32846                                  	;mov	[deviceparameters+22],ax	
 32847 00002DE4 A3[4435]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 32848                                  
 32849                                  heads_not_altered:
 32850                                  
 32851                                  ; set up correct media descriptor byte and sectors/cluster
 32852                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 32853                                  
 32854                                  	;mov	byte [deviceparameters+9],2
 32855                                  	; 02/11/2022
 32856                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 32857                                  	; 04/01/2023
 32858 00002DE7 B80200                  	mov	ax,2	
 32859 00002DEA A2[3735]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 32860                                  
 32861 00002DED B3F0                    	mov	bl,0F0h			; get default mediabyte
 32862                                  
 32863                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 32864                                  
 32865                                  	;mov	bh,[deviceparameters+17]
 32866                                  	; 02/11/2022
 32867 00002DEF 8A3E[3F35]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 32868                                  
 32869                                  	; 04/01/2023
 32870                                  	; ax = 2
 32871 00002DF3 3906[4435]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 32872                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 32873 00002DF7 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 32874                                  
 32875 00002DF9 7524                    	jne	short only_one_head	; one head, do one head stuff
 32876                                  
 32877                                  ;	two head drives will use the mediadescriptor from the bpb
 32878                                  
 32879 00002DFB 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 32880                                  
 32881                                  ;	two sided drives have two special cases to look for. One is
 32882                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 32883                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 32884                                  ;	   one sector/cluster.
 32885                                  
 32886                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 32887                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 32888                                  ;	   type of 2 headed drive is all set.
 32889                                  
 32890 00002DFD 833E[4235]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 32891 00002E02 7509                    	jne	short not_144m
 32892 00002E04 833E[3235]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32893 00002E09 7502                    	jne	short not_144m
 32894                                  
 32895                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 32896                                  
 32897 00002E0B EB24                    	jmp	short got_one_secperclus_drive
 32898                                  
 32899                                  ;	check for 320K
 32900                                  
 32901                                  not_144m:
 32902 00002E0D 833E[3235]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32903 00002E12 7521                    	jne	short got_correct_mediad
 32904 00002E14 833E[4235]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32905 00002E19 751A                    	jne	short got_correct_mediad
 32906                                  
 32907 00002E1B B3FC                    	mov	bl,0FCh
 32908 00002E1D EB16                    	jmp	short got_correct_mediad
 32909                                  
 32910                                  only_one_head:
 32911                                  
 32912                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 32913                                  
 32914 00002E1F 803E[2F35]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 32915 00002E24 740B                    	je	short got_one_secperclus_drive
 32916                                  
 32917                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 32918                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 32919                                  ;	  besides 8 will be considered 0fch
 32920                                  
 32921 00002E26 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 32922 00002E28 833E[4235]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32923                                  	; 12/12/2022
 32924 00002E2D 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 32925                                  
 32926 00002E2F B3FE                    	mov	bl,0FEh			; 160K mediaid
 32927                                  
 32928                                  ;	we've either got a one sided drive, or a 1.44M drive
 32929                                  ;	  either case we'll use 1 sector per cluster instead of 2
 32930                                  
 32931                                  got_one_secperclus_drive:
 32932                                  	; 04/01/2023
 32933                                  	; ax = 2
 32934 00002E31 48                      	dec	ax  ; ax = 1
 32935 00002E32 A2[3735]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 32936                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 32937                                  
 32938                                  got_correct_mediad:
 32939 00002E35 881E[3F35]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 32940                                  
 32941                                  ;	 Calculate the correct number of Total Sectors on medium
 32942                                  
 32943 00002E39 A1[3235]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 32944 00002E3C F726[4435]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 32945 00002E40 F726[4235]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32946 00002E44 A3[3D35]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 32947 00002E47 F8                      	clc				; we currently return no errors
 32948                                  
 32949 00002E48 C3                      	retn
 32950                                  
 32951                                  ;	M047 -- end rewritten routine
 32952                                  
 32953                                  ;----------------------------------------------------------------------------
 32954                                  ;
 32955                                  ; procedure : organize
 32956                                  ;
 32957                                  ;----------------------------------------------------------------------------
 32958                                  
 32959                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32960                                  	; (SYSINIT:3234h)
 32961                                  
 32962                                  organize:
 32963                                  	; 04/01/2023
 32964                                  	; ds = cs
 32965 00002E49 8B0E[D203]              	mov	cx,[count]
 32966                                  	;mov	cx,[cs:count]
 32967 00002E4D E326                    	jcxz	nochar1
 32968                                  
 32969                                  ;ifndef	MULTI_CONFIG
 32970                                  ;
 32971                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 32972                                  ;;   because we the case of values in SET commands preserved
 32973                                  ;
 32974                                  ;	call	mapcase
 32975                                  ;endif
 32976                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32977 00002E4F E81B02                  	call	mapcase
 32978                                  
 32979 00002E52 31F6                    	xor	si,si
 32980 00002E54 89F7                    	mov	di,si
 32981 00002E56 31C0                    	xor	ax,ax
 32982                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32983                                  	;;mov	byte [cs:com_level],0
 32984                                  	; 12/12/2022
 32985                                  	;mov	[cs:com_level],al ; 0
 32986                                  	; 04/01/2023
 32987                                  	; ds = cs
 32988 00002E58 A2[CC03]                	mov	[com_level],al ; 0
 32989                                  org1:
 32990 00002E5B E8B101                  	call	skip_comment
 32991 00002E5E 740D                    	jz	short end_commd_line	; found a comment string and skipped.
 32992 00002E60 E89601                  	call	get2			; not a comment string. then get a char.
 32993 00002E63 3C0A                    	cmp	al,lf ; 0Ah
 32994 00002E65 7406                    	je	short end_commd_line	; starts with a blank line.
 32995 00002E67 3C20                    	cmp	al,' ' ; 20h
 32996 00002E69 76F0                    	jbe	short org1		; skip leading control characters
 32997 00002E6B EB0A                    	jmp	short findit
 32998                                  
 32999                                  end_commd_line:
 33000 00002E6D AA                      	stosb				; store line feed char in buffer for the linecount.
 33001                                  	;mov	byte [cs:com_level],0	; reset the command level.
 33002                                  	; 04/01/2023
 33003                                  	; ds = cs
 33004 00002E6E C606[CC03]00            	mov	byte [com_level],0
 33005 00002E73 EBE6                    	jmp	short org1
 33006                                  
 33007                                  nochar1:
 33008 00002E75 F9                      	stc
 33009 00002E76 C3                      	retn
 33010                                  
 33011                                  findit:
 33012 00002E77 51                      	push	cx
 33013 00002E78 56                      	push	si
 33014 00002E79 57                      	push	di
 33015 00002E7A 89F5                    	mov	bp,si
 33016 00002E7C 4D                      	dec	bp
 33017 00002E7D BE[9D34]                        mov     si,comtab		; prepare to search command table
 33018 00002E80 B500                    	mov	ch,0
 33019                                  findcom:
 33020 00002E82 89EF                    	mov	di,bp
 33021 00002E84 8A0C                    	mov	cl,[si]
 33022 00002E86 46                      	inc	si
 33023 00002E87 E324                    	jcxz	nocom
 33024                                  
 33025                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33026                                  
 33027                                  ;ifdef	MULTI_CONFIG
 33028                                  ;
 33029                                  ;;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 33030                                  ;;   time skip the upcoming delimiter test (since ";" need not be followed by
 33031                                  ;;   anything in particular)
 33032                                  ;
 33033                                  ;       cmp     byte [es:di],CONFIG_SEMICOLON  ; ';'
 33034                                  ;       je	short semicolon
 33035                                  ;loopcom:
 33036                                  ;       mov     al,[es:di]
 33037                                  ;       inc     di
 33038                                  ;       and     al,~20h ; 0DFh		; force upper case
 33039                                  ;       inc     si                      ; compare to byte @es:di
 33040                                  ;       cmp     al,[si-1]
 33041                                  ;       loope   loopcom
 33042                                  ;;else
 33043                                  ;;	repe	cmpsb
 33044                                  ;endif
 33045                                  	; 02/11/2022
 33046 00002E89 F3A6                    	repe	cmpsb
 33047                                  
 33048 00002E8B 9F                      	lahf
 33049 00002E8C 01CE                            add     si,cx                   ; bump to next position without affecting flags
 33050 00002E8E 9E                      	sahf
 33051 00002E8F AC                              lodsb                           ; get indicator letter
 33052 00002E90 75F0                    	jnz	short findcom
 33053 00002E92 26803D0D                        cmp     byte [es:di],cr		; the next char might be cr,lf
 33054 00002E96 7410                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 33055 00002E98 26803D0A                	cmp	byte [es:di],lf
 33056 00002E9C 740A                    	je	short gotcom0
 33057                                  
 33058                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33059                                  ;
 33060                                  ;;ifdef	MULTI_CONFIG
 33061                                  ;
 33062                                  ;;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 33063                                  ;
 33064                                  ;       cmp     al,CONFIG_BEGIN  ; '['
 33065                                  ;       je	short gotcom0
 33066                                  ;;endif
 33067                                  ;	push	ax
 33068                                  ;       mov     al,[es:di]		; now the next char. should be a delim.
 33069                                  ;
 33070                                  ;;ifdef	MULTI_CONFIG
 33071                                  ;
 33072                                  ;;   If keyword is *immediately* followed by a question mark (?), then
 33073                                  ;;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 33074                                  ;;   stored in the CONFIG.SYS memory image.
 33075                                  ;
 33076                                  ;       cmp     al,'?'                  ; explicit interactive command?
 33077                                  ;       jne	short no_query		; no
 33078                                  ;       pop     ax                      ; yes, so retrieve the original code
 33079                                  ;       or      al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 33080                                  ;       jmp     short gotcom0           ;
 33081                                  ;semicolon:
 33082                                  ;       mov     al,CONFIG_REM
 33083                                  ;       jmp     short gotcom0
 33084                                  ;no_query:
 33085                                  ;;endif  ;MULTI_CONFIG
 33086                                  
 33087                                  	; 02/11/2022
 33088 00002E9E 50                      	push	ax
 33089 00002E9F 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 33090                                  
 33091 00002EA2 E8A001                  	call	delim
 33092                                  no_delim:
 33093 00002EA5 58                      	pop	ax
 33094 00002EA6 75DA                    	jnz	short findcom
 33095                                  gotcom0:
 33096 00002EA8 5F                      	pop	di
 33097 00002EA9 5E                      	pop	si
 33098 00002EAA 59                      	pop	cx
 33099 00002EAB EB0F                    	jmp	short gotcom
 33100                                  nocom:
 33101 00002EAD 5F                      	pop	di
 33102 00002EAE 5E                      	pop	si
 33103 00002EAF 59                      	pop	cx
 33104 00002EB0 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 33105 00002EB2 AA                      	stosb				; save indicator char.
 33106                                  _skipline:
 33107 00002EB3 E84301                  	call	get2
 33108 00002EB6 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 33109 00002EB8 75F9                            jne     short _skipline
 33110 00002EBA EBB1                    	jmp	short end_commd_line	; handle next command line
 33111                                  gotcom:
 33112 00002EBC AA                              stosb                           ; save indicator char in buffer
 33113                                  
 33114                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33115                                  ;;ifdef	MULTI_CONFIG
 33116                                  ;
 33117                                  ;;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 33118                                  ;;   it screws up the direct comparisons below.
 33119                                  ;
 33120                                  ;       and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33121                                  ;;endif
 33122                                  ;	mov	[cs:cmd_indicator],al	; save it for the future use.
 33123                                  ;
 33124                                  ;;ifdef	MULTI_CONFIG
 33125                                  ;
 33126                                  ;;   There is no whitespace/delimiter between the "begin block" character
 33127                                  ;;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 33128                                  ;;   skipping code
 33129                                  ;
 33130                                  ;       cmp     al,CONFIG_BEGIN
 33131                                  ;       je	short org31
 33132                                  ;       cmp     al,CONFIG_SUBMENU ; 'O'
 33133                                  ;       je      short no_mapcase
 33134                                  ;       cmp     al,CONFIG_MENUITEM ; 'E'
 33135                                  ;       je      short no_mapcase
 33136                                  ;       cmp     al,CONFIG_MENUDEFAULT ; 'A'
 33137                                  ;       je      short no_mapcase
 33138                                  ;       cmp     al,CONFIG_INCLUDE ; 'J'
 33139                                  ;       je      short no_mapcase
 33140                                  ;       call    mapcase                 ; map case of rest of line to UPPER
 33141                                  ;no_mapcase:
 33142                                  ;;endif
 33143                                  
 33144                                  	; 02/11/2022
 33145                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 33146                                  	; 04/01/2023
 33147                                  	; ds = cs
 33148 00002EBD A2[D003]                	mov	[cmd_indicator],al
 33149                                  org2:	
 33150 00002EC0 E83601                  	call    get2                    ; skip the command name until delimiter
 33151 00002EC3 3C0A                            cmp     al,lf
 33152 00002EC5 740B                    	je	short org21
 33153 00002EC7 3C0D                    	cmp	al,cr
 33154 00002EC9 7407                    	je	short org21
 33155                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33156                                  	;cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 33157                                  	;je	short org21		; T-RICHJ: to be parsed properly.
 33158                                  
 33159 00002ECB E87701                  	call	delim
 33160 00002ECE 75F0                            jnz	short org2
 33161 00002ED0 EB02                    	jmp	short org3
 33162                                  org21:					;if cr or lf then
 33163 00002ED2 4E                      	dec	si			; undo si, cx register
 33164 00002ED3 41                      	inc	cx			;  and continue
 33165                                  org3:	
 33166                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 33167                                  	;je	short get_cmt_token
 33168                                  	;; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33169                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 33170                                  	;;je	short org_file
 33171                                          ;cmp     byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 33172                                  	;je	short org_file
 33173                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 33174                                          ;;je	short org_file
 33175                                  	;; 02/11/2022
 33176                                  	;cmp     byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 33177                                  	;je	short org_file
 33178                                          ;cmp     byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 33179                                  	;je	short org_file
 33180                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 33181                                  	;je	short org_switch
 33182                                  
 33183                                  	; 04/01/2023
 33184                                  	; ds = cs
 33185                                  
 33186 00002ED4 803E[D003]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 33187 00002ED9 7456                    	je	short get_cmt_token
 33188                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33189                                          ;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 33190                                  	;je	short org_file
 33191 00002EDB 803E[D003]49                    cmp     byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 33192 00002EE0 7429                    	je	short org_file
 33193                                          ;cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 33194                                          ;je	short org_file
 33195                                  	; 02/11/2022
 33196 00002EE2 803E[D003]44            	cmp     byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 33197 00002EE7 7422                    	je	short org_file
 33198 00002EE9 803E[D003]53                    cmp     byte [cmd_indicator],CONFIG_SHELL ; 'S'
 33199 00002EEE 741B                    	je	short org_file
 33200 00002EF0 803E[D003]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 33201 00002EF5 7403                    	je	short org_switch
 33202                                  	
 33203                                  org31:
 33204 00002EF7 E99500                  	jmp	org4
 33205                                  
 33206                                  org_switch:
 33207 00002EFA E81201                  	call	skip_comment
 33208 00002EFD 7472                    	jz	short end_commd_line_brdg
 33209                                  
 33210 00002EFF E8F700                  	call	get2
 33211 00002F02 E84801                  	call	org_delim
 33212 00002F05 74F3                    	jz	short org_switch
 33213                                  
 33214 00002F07 AA                      	stosb
 33215 00002F08 E99300                  	jmp	org5
 33216                                  
 33217                                  org_file:			; get the filename and put 0 at end
 33218 00002F0B E80101                  	call	skip_comment
 33219 00002F0E 7464                    	jz	short org_put_zero
 33220                                  
 33221 00002F10 E8E600                  	call	get2		; not a comment
 33222 00002F13 E82F01                  	call	delim
 33223 00002F16 74F3                    	jz	short org_file	; skip the possible delimiters
 33224                                  
 33225 00002F18 AA                      	stosb			; copy the first non delim char found in buffer
 33226                                  
 33227                                  org_copy_file:
 33228 00002F19 E8F300                  	call	skip_comment	; comment char in the filename?
 33229 00002F1C 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 33230                                  
 33231 00002F1E E8D800                  	call	get2
 33232 00002F21 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 33233 00002F23 7457                    	je	short end_file_slash ; this will be the special case.
 33234                                  
 33235 00002F25 AA                      	stosb			; save the char. in buffer
 33236 00002F26 E81C01                  	call	delim
 33237 00002F29 7459                    	jz	short end_copy_file
 33238                                  
 33239 00002F2B 3C20                    	cmp	al, ' '
 33240 00002F2D 77EA                    	ja	short org_copy_file ; keep copying
 33241 00002F2F EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 33242                                  
 33243                                  get_cmt_token:			; get the token. just max. 2 char.
 33244 00002F31 E8C500                  	call	get2
 33245 00002F34 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 33246 00002F36 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 33247 00002F38 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 33248 00002F3A 74F5                    	je	short get_cmt_token ;  character.)
 33249 00002F3C 3C3D                    	cmp	al,'='		; = is special in this case.
 33250 00002F3E 74F1                    	je	short get_cmt_token
 33251 00002F40 3C0D                    	cmp	al,cr
 33252 00002F42 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 33253 00002F44 3C0A                    	cmp	al,lf
 33254 00002F46 7422                    	je	short get_cmt_end
 33255                                  
 33256                                  	; 04/01/2023
 33257                                  	; ds = cs
 33258                                  	;mov	[cs:cmmt1],al	; store it
 33259                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 33260 00002F48 A2[CE03]                	mov	[cmmt1],al	; store it
 33261 00002F4B C606[CD03]01            	mov	byte [cmmt],1 ; 1 char. so far.
 33262 00002F50 E8A600                  	call	get2
 33263 00002F53 3C20                    	cmp	al,' ' ; 20h
 33264 00002F55 7413                    	je	short get_cmt_end
 33265 00002F57 3C09                    	cmp	al,tab ; 9
 33266 00002F59 740F                    	je	short get_cmt_end
 33267 00002F5B 3C0D                    	cmp	al,cr  ; 0Dh
 33268 00002F5D 740B                    	je	short get_cmt_end
 33269 00002F5F 3C0A                    	cmp	al,lf  ; 0Ah
 33270 00002F61 740E                    	je	short end_commd_line_brdg
 33271                                  
 33272                                  	;mov	[cs:cmmt2],al
 33273                                  	;inc	byte [cs:cmmt]
 33274                                  	; 04/01/2023
 33275 00002F63 A2[CF03]                	mov	[cmmt2],al
 33276 00002F66 FE06[CD03]              	inc	byte [cmmt]
 33277                                  
 33278                                  get_cmt_end:
 33279 00002F6A E88C00                  	call	get2
 33280 00002F6D 3C0A                    	cmp	al,lf
 33281 00002F6F 75F9                    	jne	short get_cmt_end	; skip it.
 33282                                  end_commd_line_brdg: 
 33283 00002F71 E9F9FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 33284                                  
 33285                                  org_put_zero:				; make the filename in front of
 33286 00002F74 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 33287 00002F78 47                      	inc	di
 33288 00002F79 E9F1FE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 33289                                  
 33290                                  end_file_slash: 			; al = "/" option char.
 33291 00002F7C 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 33292 00002F80 47                      	inc	di			; and
 33293 00002F81 AA                      	stosb				; store "/" after that.
 33294 00002F82 EB1A                    	jmp	short org5		; continue with the rest of the line
 33295                                  
 33296                                  end_copy_file:
 33297 00002F84 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 33298 00002F89 3C0A                    	cmp	al,lf
 33299 00002F8B 74E4                    	je	short end_commd_line_brdg
 33300 00002F8D EB0F                    	jmp	short org5
 33301                                  
 33302                                  org4:					; org4 skips all delimiters after the command name except for '/'
 33303 00002F8F E87D00                  	call	skip_comment
 33304 00002F92 74DD                    	jz	short end_commd_line_brdg
 33305                                  
 33306 00002F94 E86200                  	call	get2
 33307 00002F97 E8B300                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 33308 00002F9A 74F3                    	jz	short org4
 33309 00002F9C EB08                    	jmp	short org51
 33310                                  
 33311                                  org5:					; rest of the line
 33312 00002F9E E86E00                  	call	skip_comment		; comment?
 33313 00002FA1 74CE                    	jz	short end_commd_line_brdg
 33314 00002FA3 E85300                  	call	get2			; not a comment.
 33315                                  
 33316                                  org51:
 33317 00002FA6 AA                      	stosb				; copy the character
 33318 00002FA7 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 33319 00002FA9 743A                    	je	short at_quote
 33320 00002FAB 3C20                    	cmp	al,' '  ; 20h
 33321 00002FAD 77EF                    	ja	short org5
 33322                                  					; M051 - Start
 33323                                  	; 04/01/2023
 33324                                  	; ds = cs
 33325 00002FAF 803E[D003]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 33326                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 33327 00002FB4 7514                    	jne	short not_dh		; N: 
 33328 00002FB6 3C0A                    	cmp	al,lf			; Q: is this line feed
 33329 00002FB8 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 33330 00002FBA 3C0D                    	cmp	al,cr			; Q: is this a cr
 33331 00002FBC 75E0                    	jne	short org5		; N: 
 33332 00002FBE 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 33333 00002FC3 AA                      	stosb				; put cr after blank
 33334 00002FC4 FE06[8D2C]              	inc	byte [insert_blank]
 33335                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 33336                                  					; inserted
 33337 00002FC8 EBD4                    	jmp	short org5
 33338                                  not_dh:					; M051 - End
 33339                                  
 33340 00002FCA 3C0A                    	cmp	al,lf			; line feed?
 33341 00002FCC 740F                    	je	short org1_brdg		; handles the next command line.
 33342 00002FCE EBCE                    	jmp	short org5		; handles next char in this line.
 33343                                  
 33344                                  org_dhlf:				; M051 - Start
 33345                                  	; 04/01/2023
 33346                                  	; ds = cs
 33347 00002FD0 803E[8D2C]01            	cmp	byte [insert_blank],1
 33348                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 33349 00002FD5 7406                    	je	short org1_brdg		; Y:
 33350 00002FD7 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 33351 00002FDC AA                      	stosb				; put lf after blank
 33352                                  					; M051 - End
 33353                                  org1_brdg:
 33354 00002FDD C606[8D2C]00            	mov	byte [insert_blank],0 
 33355                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 33356                                  					; M051: devicehigh
 33357 00002FE2 E976FE                  	jmp	org1
 33358                                  
 33359                                  at_quote:
 33360 00002FE5 803E[CC03]00            	cmp	byte [com_level],0
 33361                                  	;cmp	byte [cs:com_level],0
 33362 00002FEA 7407                    	je	short up_level
 33363                                  	;mov	byte [cs:com_level],0	; reset it.
 33364 00002FEC C606[CC03]00            	mov	byte [com_level],0
 33365 00002FF1 EBAB                    	jmp	short org5
 33366                                  
 33367                                  up_level:
 33368                                  	;inc	byte [cs:com_level]	; set it.
 33369 00002FF3 FE06[CC03]              	inc	byte [com_level]
 33370 00002FF7 EBA5                    	jmp	short org5
 33371                                  
 33372                                  ;----------------------------------------------------------------------------
 33373                                  ;
 33374                                  ; procedure : get2
 33375                                  ;
 33376                                  ;----------------------------------------------------------------------------
 33377                                  
 33378                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33379                                  	; (SYSINIT:33FAh)
 33380                                  	; 04/01/2023
 33381                                  get2:
 33382 00002FF9 E304                    	jcxz	noget
 33383                                  	;
 33384                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33385                                  	;;lods	byte ptr es:[si]
 33386                                  	; 12/12/2022
 33387 00002FFB 26                      	es	
 33388 00002FFC AC                      	lodsb
 33389                                  	;mov	al, [es:si]
 33390                                  	;inc	si
 33391                                  	;
 33392 00002FFD 49                      	dec	cx
 33393 00002FFE C3                      	retn
 33394                                  noget:
 33395 00002FFF 59                      	pop	cx
 33396                                  	; 04/01/2023
 33397                                  	; ds = cs
 33398                                  	;mov	[cs:count],di ; 13/05/2019
 33399                                  	;mov	[cs:org_count],di
 33400 00003000 893E[D203]              	mov	[count],di
 33401 00003004 893E[D403]              	mov	[org_count],di
 33402 00003008 31F6                    	xor	si,si
 33403                                  	;mov	[cs:chrptr],si
 33404 0000300A 8936[D603]              	mov	[chrptr],si
 33405                                  
 33406                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33407                                  ;;ifndef MULTI_CONFIG
 33408                                  ;;	retn
 33409                                  ;;else
 33410                                  ;
 33411                                  ;;   This was the rather kludgy way out of procedure "organize", but instead
 33412                                  ;;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 33413                                  ;;   and the new boot menu stuff...
 33414                                  ;
 33415                                  ;	mov     cx,di
 33416                                  ;	jmp     menu_check
 33417                                  ;;endif
 33418                                  
 33419                                  	; 02/11/2022
 33420 0000300E C3                      	retn
 33421                                  
 33422                                  ;----------------------------------------------------------------------------
 33423                                  ;
 33424                                  ; procedure : skip_comment
 33425                                  ;
 33426                                  ;skip the commented string until lf, if current es:si-> a comment string.
 33427                                  ;in) es:si-> string
 33428                                  ;	 cx -> length.
 33429                                  ;out) zero flag not set if not found a comment string.
 33430                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 33431                                  ;	  the line feed character at this moment when return.
 33432                                  ;	  ax register destroyed.
 33433                                  ;	  if found, si, cx register adjusted accordingly.
 33434                                  ;
 33435                                  ;----------------------------------------------------------------------------
 33436                                  
 33437                                  	; 04/01/2023 - Retro DOS v4.0
 33438                                  
 33439                                  skip_comment:
 33440 0000300F E3EE                    	jcxz	noget		; get out of the organize routine.
 33441                                  
 33442                                  	; 04/01/2023
 33443                                  	; ds = cs	
 33444                                  
 33445 00003011 803E[CC03]00            	cmp	byte [com_level],0
 33446                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 33447 00003016 752C                    	jne	short no_commt	 ; (not inside quotations)
 33448                                  
 33449 00003018 803E[CD03]01            	cmp	byte [cmmt],1
 33450                                  	;cmp	byte [cs:cmmt],1
 33451 0000301D 7225                    	jb	short no_commt
 33452                                  
 33453 0000301F 268A04                  	mov	al,[es:si]
 33454                                  	
 33455 00003022 3806[CE03]              	cmp	[cmmt1],al
 33456                                  	;cmp	[cs:cmmt1],al
 33457 00003026 751C                    	jne	short no_commt
 33458                                  
 33459 00003028 803E[CD03]02            	cmp	byte [cmmt],2
 33460                                  	;cmp	byte [cs:cmmt],2
 33461 0000302D 750A                    	jne	short skip_cmmt
 33462                                  
 33463 0000302F 268A4401                	mov	al,[es:si+1]
 33464                                  	
 33465 00003033 3806[CF03]              	cmp	[cmmt2],al
 33466                                  	;cmp	[cs:cmmt2],al
 33467 00003037 750B                    	jne	short no_commt
 33468                                  skip_cmmt:
 33469 00003039 E3C4                    	jcxz	noget		; get out of organize routine.
 33470 0000303B 268A04                  	mov	al,[es:si]
 33471 0000303E 46                      	inc	si
 33472 0000303F 49                      	dec	cx
 33473 00003040 3C0A                    	cmp	al,lf		; line feed?
 33474 00003042 75F5                    	jne	short skip_cmmt
 33475                                  no_commt:
 33476 00003044 C3                      	retn
 33477                                  
 33478                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33479                                  %if 0
 33480                                  
 33481                                  ;ifdef	MULTI_CONFIG
 33482                                  
 33483                                  ;----------------------------------------------------------------------------
 33484                                  ;
 33485                                  ;   kbd_read: wait for keystroke
 33486                                  ;
 33487                                  ;   INPUT
 33488                                  ;       DS == CS == sysinitseg
 33489                                  ;
 33490                                  ;   OUTPUT
 33491                                  ;       Carry SET to clean boot, CLEAR otherwise
 33492                                  ;
 33493                                  ;   OTHER REGS USED
 33494                                  ;       All
 33495                                  ;
 33496                                  ;   HISTORY
 33497                                  ;       Created 16-Nov-1992 by JeffPar
 33498                                  ;
 33499                                  ;----------------------------------------------------------------------------
 33500                                  
 33501                                  kbd_read:
 33502                                          test    byte [bDisableUI],2
 33503                                          jnz     short kbd_nodelay
 33504                                  
 33505                                          push    ds              ; the bios timer tick count is incremented
 33506                                          sub     ax,ax           ; 18.2 times per second;
 33507                                          mov     ds,ax           ; watch the timer tick count for 37 transitions
 33508                                  	;mov	dx,[046Ch]	; get initial value
 33509                                  kbd_loop:
 33510                                          mov     ah,1            ;
 33511                                          int     16h             ; peek the keyboard
 33512                                          jnz	short kbd_loopdone ; something's there, get out
 33513                                          mov     ah,2            ; peek the shift states
 33514                                          int     16h             ;
 33515                                          test    al,03h          ; either right or left shift key bits set?
 33516                                          jnz	short kbd_loopdone ; yes
 33517                                          mov     ax,[046Ch]	;
 33518                                  	;sub	ax,dx           ; get difference
 33519                                  	; 15/04/2019 - Retro DOS v4.0
 33520                                  	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 33521                                  
 33522                                  	cmp     al,37           ; reached limit?
 33523                                          jb	short kbd_loop	; not yet
 33524                                  kbd_loopdone:
 33525                                          pop     ds              ; delay complete!
 33526                                  kbd_nodelay:
 33527                                          sub     bx,bx           ; assume clean boot
 33528                                          mov     ah,2            ; peek the shift states
 33529                                          int     16h             ;
 33530                                          test    al,03h          ; either right or left shift key bits set?
 33531                                          jz      short kbd_notshift ; no
 33532                                          inc     bx              ; yes
 33533                                          inc     bx
 33534                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 33535                                  	or	byte [bQueryOpt],4
 33536                                  kbd_notshift:                   ;
 33537                                          mov     ah,1            ; peek the keyboard
 33538                                          int     16h             ;
 33539                                          jz	short kbd_test	; no key present
 33540                                          or      al,al           ; is it a function key?
 33541                                          jnz	short kbd_test	; no
 33542                                  
 33543                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 33544                                          cmp     ah,62h          ; CTRL F5
 33545                                          je	short kbd_cfg_bypass
 33546                                  	
 33547                                          cmp     ah,3Fh          ; F5 function key?
 33548                                          jne	short kbd_notf5	; no
 33549                                  kbd_cfg_bypass:
 33550                                          mov     dx,_$CleanMsg
 33551                                          call    print
 33552                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 33553                                  	or	byte [bQueryOpt],4           ;
 33554                                          jmp     short kbd_eat   ; yes, clean boot selected
 33555                                  kbd_notf5:
 33556                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 33557                                          cmp     ah,65h          ; CTRL F8
 33558                                          je	short kbd_cfg_confirm
 33559                                  
 33560                                          cmp     ah,42h          ; F8 function key?
 33561                                          jne	short kbd_exit	; no
 33562                                  kbd_cfg_confirm:
 33563                                          mov     dx,_$InterMsg
 33564                                          call    print           ;
 33565                                          mov     bl,1            ; yes, interactive-boot option enabled
 33566                                          mov     [bQueryOpt],bl  ; change default setting
 33567                                  kbd_eat:                        ;
 33568                                          mov     ah,0            ;
 33569                                          int     16h             ; eat the key we assumed was a signal
 33570                                          mov	byte [secElapsed],-1
 33571                                          or      bx,bx           ;
 33572                                          jz	short kbd_clean	;
 33573                                  kbd_test:                       ;
 33574                                          cmp     bl,2            ;
 33575                                          jb	short kbd_exit	;
 33576                                  kbd_clean:                      ;
 33577                                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 33578                                          stc                     ; set carry to indicate abort
 33579                                          retn			;
 33580                                  kbd_exit:                       ;
 33581                                          clc                     ; clear carry to indicate success
 33582                                          retn			;
 33583                                  
 33584                                  ;----------------------------------------------------------------------------
 33585                                  ;
 33586                                  ;   set_numlock: set numlock LED
 33587                                  ;
 33588                                  ;   INPUT
 33589                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 33590                                  ;
 33591                                  ;   OUTPUT
 33592                                  ;       None
 33593                                  ;
 33594                                  ;   OTHER REGS USED
 33595                                  ;       None
 33596                                  ;
 33597                                  ;   HISTORY
 33598                                  ;       Created 16-Nov-1992 by JeffPar
 33599                                  ;
 33600                                  ;----------------------------------------------------------------------------
 33601                                  
 33602                                  set_numlock:
 33603                                          push    ax
 33604                                          push    ds
 33605                                          sub     ax,ax
 33606                                          mov     ds,ax
 33607                                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 33608                                          cmp     ax,[cs:OnOff+2]	; should we turn it off?
 33609                                          jne	short not_off	; no
 33610                                          and     byte [0417h],~20h ; 0DFh
 33611                                          jmp     short set_done
 33612                                  not_off:
 33613                                          cmp     ax,[cs:OnOff]	; should we turn it on?
 33614                                          stc
 33615                                          jne	short set_done	; no
 33616                                          or      byte [0417h],20h
 33617                                  set_done:
 33618                                          pop     ds
 33619                                          pop     ax
 33620                                          retn
 33621                                  
 33622                                  ; 16/04/2019 - Retro DOS v4.0
 33623                                  
 33624                                  ;----------------------------------------------------------------------------
 33625                                  ;
 33626                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 33627                                  ;
 33628                                  ;   INPUT
 33629                                  ;       CX == "organized" config.sys memory image length
 33630                                  ;    ES:SI -> "organized" config.sys memory image
 33631                                  ;       DS == CS == sysinitseg
 33632                                  ;
 33633                                  ;   OUTPUT
 33634                                  ;       Same as above;  the idea is that menu_check simply transforms
 33635                                  ;       a block-structured config.sys image into a conventional image,
 33636                                  ;       based on the user's block selection and any other boot-time options
 33637                                  ;       the user may have employed...
 33638                                  ;
 33639                                  ;   OTHER REGS USED
 33640                                  ;       All
 33641                                  ;
 33642                                  ;   NOTES
 33643                                  ;       [count] and [org_count] are set to the new config.sys image length
 33644                                  ;
 33645                                  ;   HISTORY
 33646                                  ;       Created 16-Mar-1992 by JeffPar
 33647                                  ;
 33648                                  ;----------------------------------------------------------------------------
 33649                                  
 33650                                  menu_check:
 33651                                  
 33652                                  ;   Search for SWITCHES, determine if /N or /F are present;  if so, then
 33653                                  ;   disable clean/interactive boot options
 33654                                  
 33655                                          push    cx              ;
 33656                                          push    si              ;
 33657                                          sub     bx,bx           ; remains ZERO until first block
 33658                                  swchk_loop:                     ;
 33659                                          call    get_char        ; get first char of current line
 33660                                          jc	short swchk_end	; hit eof
 33661                                          cmp     al,CONFIG_BEGIN ;
 33662                                          jne	short swchk_next1 ;
 33663                                          inc     bx              ; remember that we've seen a block
 33664                                          jmp     short swchk_nextline
 33665                                  swchk_next1:                    ;
 33666                                          cmp     al,CONFIG_NUMLOCK
 33667                                          jne	short swchk_next2 ;
 33668                                          or      bx,bx           ; only do NUMLOCK commands that exist
 33669                                          jnz	short swchk_nextline ; before the first block
 33670                                          call    set_numlock     ; REM it out so we don't act on it later, too
 33671                                          mov     byte [es:si-1],CONFIG_REM
 33672                                          jmp     short swchk_nextline
 33673                                  swchk_next2:                    ;
 33674                                          cmp     al,CONFIG_SWITCHES
 33675                                          jne	short swchk_nextline ; this line ain't it
 33676                                  swchk_scan:                     ;
 33677                                          call    get_char        ; look for /N or /F
 33678                                  swchk_scan1:                    ;
 33679                                          cmp     al,LF           ; end of line?
 33680                                          je	short swchk_nextline ; yes
 33681                                          cmp     al,'/'          ; switch-char?
 33682                                          jne	short swchk_scan ; no
 33683                                          call    get_char        ;
 33684                                          and     al,~20h ; 0DFh	; convert to upper case
 33685                                          cmp     al,[swit_n+1]
 33686                                          jne	short swchk_scan2 ; no
 33687                                          or      byte [bDisableUI],1
 33688                                          jmp	short swchk_scan ; continue looking for switches of interest
 33689                                  swchk_scan2:                    ;
 33690                                          cmp     al,[swit_f+1]
 33691                                          jne	short swchk_scan1 ; no
 33692                                          or      byte [bDisableUI],2
 33693                                          jmp     short swchk_scan ; continue looking for switches of interest
 33694                                  swchk_nextline:                 ;
 33695                                          call    skip_opt_line   ;
 33696                                          jmp     short swchk_loop ;
 33697                                  swchk_end:                      ;
 33698                                          pop     si              ;
 33699                                          pop     cx              ;
 33700                                  
 33701                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 33702                                  ;   the DisableUI flag is still clear
 33703                                  
 33704                                          test    byte [bDisableUI],1
 33705                                          jnz	short menu_search
 33706                                  ;
 33707                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 33708                                  ;   there is anything at all in the keyboard buffer
 33709                                  ;
 33710                                          call    kbd_read
 33711                                          jnc	short menu_search
 33712                                          jmp	menu_abort
 33713                                  
 33714                                  ;   Search for MENU block;  it is allowed to be anywhere in config.sys
 33715                                  
 33716                                  menu_search:
 33717                                          sub     bx,bx           ; if no MENU, default to zero for no_selection
 33718                                          mov     di,szMenu	;
 33719                                          call    find_block      ; find the MENU block
 33720                                          jnc	short menu_found ;
 33721                                          mov     byte [szBoot],0
 33722                                          jmp	no_selection ; not found
 33723                                  
 33724                                  ;   Process the requested menu color(s)
 33725                                  
 33726                                  menu_color:
 33727                                          push    cx              ;
 33728                                          push    dx              ;
 33729                                          mov     dx,0007h        ; default color setting
 33730                                          call    get_number	; get first number
 33731                                          and     bl,0Fh		; first # is foreground color (for low nibble)
 33732                                          mov     ch,bl           ; save it in CH
 33733                                          and     dl,0F0h         ;
 33734                                          or      dl,bl           ;
 33735                                          call    delim           ; did we hit a delimiter
 33736                                          jne	short check_color ; no, all done
 33737                                          call    get_number	; get next number
 33738                                          and     bl,0Fh		; second # is background color (for high nibble)
 33739                                          mov     dh,bl           ; save it in DH
 33740                                          and     dl,0Fh		;
 33741                                          mov     cl,4            ;
 33742                                          shl     bl,cl           ;
 33743                                          or      dl,bl           ;
 33744                                  check_color:                    ;
 33745                                          cmp     ch,dh           ; are foreground/background the same?
 33746                                          jne	short set_color	; no
 33747                                          xor     dl,08h          ; yes, so modify the fgnd intensity
 33748                                  set_color:
 33749                                          mov     [bMenuColor],dl ;
 33750                                          pop     dx              ;
 33751                                          pop     cx              ;
 33752                                          jmp	menu_nextitem
 33753                                  
 33754                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 33755                                  ;   above is there simply to alleviate short jump problems)
 33756                                  
 33757                                  menu_found:
 33758                                          mov     byte [bDefBlock],1
 33759                                          mov     word [offDefBlock],0
 33760                                          mov     byte [secTimeOut],-1
 33761                                          and     byte [bQueryOpt],~2 ; 0FDh
 33762                                  
 33763                                          call    skip_opt_line   ; skip to next line
 33764                                          sub     dx,dx           ; initialize total block count (0 => none yet)
 33765                                  
 33766                                  ;   Process the menu block now
 33767                                  
 33768                                  menu_process:
 33769                                          call    get_char        ; get first char of current line
 33770                                          jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 33771                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33772                                          cmp     al,CONFIG_BEGIN ; BEGIN implies END
 33773                                          je	short to_menu_getdefault
 33774                                          cmp     al,CONFIG_SUBMENU
 33775                                          je	short menu_item	; go process sub-menu
 33776                                          cmp     al,CONFIG_MENUITEM
 33777                                          je	short menu_item	; go process menu item
 33778                                          cmp     al,CONFIG_MENUDEFAULT
 33779                                          je	short menu_default ; go process menu default
 33780                                          cmp     al,CONFIG_MENUCOLOR
 33781                                          je	short menu_color ; go process menu color
 33782                                          cmp     al,CONFIG_NUMLOCK
 33783                                          je	short menu_numlock ;
 33784                                          cmp     al,CONFIG_REM   ; allow remarks in menu block
 33785                                          je	short menu_nextitem ;
 33786                                          call    any_delim       ; allow blank lines and such
 33787                                          je	short menu_nextitem ;
 33788                                          stc                     ;
 33789                                          call    print_error     ; non-MENU command!
 33790                                          jmp     short menu_nextitem
 33791                                  menu_numlock:
 33792                                          call    set_numlock
 33793                                          jmp     short menu_nextitem
 33794                                  to_menu_getdefault:
 33795                                          jmp     short menu_getdefault
 33796                                  
 33797                                  ;   Save the offset of the default block name, we'll need it later
 33798                                  
 33799                                  menu_default:
 33800                                          mov     [offDefBlock],si; save address of default block name
 33801                                          cmp     byte [secElapsed],0
 33802                                          jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 33803                                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 33804                                          jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 33805                                          call    skip_delim      ; something is typed
 33806                                          jc	short menu_nextitem ;
 33807                                          mov     si,bx           ;
 33808                                          call    get_number      ; get number (of seconds for timeout)
 33809                                          cmp     bl,90           ; limit it to a reasonable number
 33810                                          jb	short timeout_ok ; (besides, 99 is the largest # my simple
 33811                                          mov     bl,90           ;  display function can handle)
 33812                                  timeout_ok:                     ;
 33813                                          mov     [secTimeOut],bl ;
 33814                                  timeout_skip:
 33815                                          jmp     short menu_nextitem
 33816                                  
 33817                                  ;   Verify that this is a valid menu item by searching for the named block
 33818                                  
 33819                                  menu_item:
 33820                                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 33821                                          jae	short menu_nextitem ;
 33822                                          mov     di,si           ; DS:DI -> block name to search for
 33823                                          call    srch_block      ;
 33824                                          je	short menu_itemfound ;
 33825                                          stc                     ;
 33826                                          call    print_error     ; print error and pause
 33827                                          jmp     short menu_nextitem ; if not found, ignore this menu item
 33828                                  
 33829                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 33830                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 33831                                  ;   and CX are unmodified
 33832                                  
 33833                                  menu_itemfound:
 33834                                          inc     dx              ; otherwise, increment total block count
 33835                                          mov     bx,dx           ; and use it to index the arrays of offsets
 33836                                          mov	[abBlockType+bx],al
 33837                                          add     bx,bx           ; of recorded block names and descriptions
 33838                                  
 33839                                  ;   There should be a description immediately following the block name on
 33840                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 33841                                  ;   description...
 33842                                  
 33843                                          mov     [aoffBlockName+bx],si
 33844                                          mov     [aoffBlockDesc+bx],si
 33845                                          mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 33846                                          call    skip_token      ;
 33847                                          jc	short menu_nextitem ; hit eol/eof
 33848                                          call    skip_delim      ;
 33849                                          jc	short menu_nextitem ; hit eol/eof
 33850                                          xchg    bx,di           ;
 33851                                          mov     [aoffBlockDesc+bx],di
 33852                                  
 33853                                  menu_nextitem:
 33854                                          call    skip_opt_line   ;
 33855                                          jmp     menu_process    ; go back for more lines
 33856                                  
 33857                                  ;   Display menu items now, after determining which one is default
 33858                                  
 33859                                  menu_getdefault:
 33860                                          or      dl,dl           ; where there any valid blocks at all?
 33861                                          jnz	short menu_valid ; yes
 33862                                          sub     bx,bx           ; no, so force autoselect of 0
 33863                                          jmp     menu_autoselect ; (meaning: process common blocks only)
 33864                                  menu_valid:
 33865                                          sub     bx,bx           ;
 33866                                          mov     [bMaxBlock],dl  ; first, record how many blocks we found
 33867                                          mov     di,[offDefBlock];
 33868                                          or      di,di           ; does a default block exist?
 33869                                          jz	short menu_nodefault ; no
 33870                                          inc     bx              ; yes, walk name table, looking for default
 33871                                  menu_chkdefault:
 33872                                          push    bx              ;
 33873                                          add     bx,bx           ;
 33874                                          mov     si,[aoffBlockName+bx]
 33875                                          mov     cx,128          ; arbitrary maximum length of a name
 33876                                          push    ds              ;
 33877                                          push    es              ;
 33878                                          pop     ds              ;
 33879                                          call    comp_names      ; is this block the same as the default?
 33880                                          pop     ds              ;
 33881                                          pop     bx              ;
 33882                                          je	short menu_setdefault ; yes
 33883                                          inc     bx              ;
 33884                                          cmp     bl,[bMaxBlock]  ; all done searching?
 33885                                          jbe	short menu_chkdefault ; not yet
 33886                                  menu_nodefault:
 33887                                          mov     bl,1            ; if no default, force default to #1
 33888                                  menu_setdefault:
 33889                                          mov     [bDefBlock],bl  ; yes, this will be the initial current block
 33890                                  
 33891                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 33892                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 33893                                  ;   supposed to skip menu display and run with the specified default block;
 33894                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 33895                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 33896                                  ;   with no timeout)
 33897                                  
 33898                                          cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 33899                                          jne	short menu_display ; no
 33900                                          test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 33901                                          jnz	short menu_display ; yes, so *don't* assume default after all
 33902                                          jmp     not_topmenu	;
 33903                                  
 33904                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 33905                                  
 33906                                  menu_display:
 33907                                          mov     ah,0Fh          ; get current video mode
 33908                                          int     10h             ;
 33909                                          mov     ah,00h          ; just re-select that mode
 33910                                          int     10h             ;
 33911                                          push    es              ;
 33912                                          mov     ax,40h          ; reach down into the ROM BIOS data area
 33913                                          mov     es,ax           ; and save the current (default) video page
 33914                                          mov     ax,[es:004Eh]   ; start address and page #, in case the
 33915                                          mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 33916                                          mov     al,[es:0062h]   ;
 33917                                          mov     [bCRTPage],al   ;
 33918                                          mov     ax,[bMenuPage]	; select new page for menu
 33919                                          int     10h             ;
 33920                                          mov     ax,0600h        ; clear entire screen
 33921                                          mov     bh,[bMenuColor] ; using this color
 33922                                          sub     cx,cx           ; upper left row/col
 33923                                          ;mov	dl,[es:CRT_Cols] 
 33924                                          mov	dl,[es:4Ah]
 33925                                  	dec     dl              ;
 33926                                          ;mov	dh,[es:CRT_Rows];
 33927                                          mov	dh,[es:84h]
 33928                                  	or      dh,dh           ; # of rows valid?
 33929                                          jnz	short menu_clear ; hopefully
 33930                                          mov     dh,[bLastRow]   ; no, use a default
 33931                                  menu_clear:
 33932                                          int     10h             ; clear the screen using the req. attribute
 33933                                          pop     es              ;
 33934                                          mov     [bLastRow],dh   ; save DH
 33935                                          mov     dx,_$MenuHeader
 33936                                          call    print           ; cursor now on row 3 (numbered from 0)
 33937                                  
 33938                                          test    byte [bDisableUI],1
 33939                                          jnz     short menu_nostatus
 33940                                          mov     bh,[bMenuPage]  ;
 33941                                          mov     dh,[bLastRow]   ; restore DH
 33942                                          mov     dl,0            ; print the status line on row DH, col 0,
 33943                                          mov     ah,02h          ; now that we can trash the cursor position
 33944                                          int     10h             ;
 33945                                          mov     dx,_$StatusLine
 33946                                          call    print           ;
 33947                                          mov     ah,3            ; get cursor position
 33948                                          int     10h             ;
 33949                                          sub     dl,2            ;
 33950                                          mov     [bLastCol],dl   ; save column where status char will go
 33951                                  
 33952                                  menu_nostatus:
 33953                                          mov     bx,1            ; now prepare to display all the menu items
 33954                                  menu_disploop:
 33955                                          call    print_item	; print item #BL
 33956                                          inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 33957                                          cmp     bl,[bMaxBlock]  ; all done?
 33958                                          jbe	short menu_disploop ; not yet
 33959                                  
 33960                                  ;   Set cursor position to just below the menu items
 33961                                  
 33962                                          mov     dl,0            ; select column
 33963                                          mov     dh,bl           ;
 33964                                          add     dh,4            ; select row below menu
 33965                                          mov     bh,[bMenuPage]  ;
 33966                                          mov     ah,02h          ; set cursor position beneath the block list
 33967                                          int     10h             ;
 33968                                  
 33969                                          mov     dx,_$MenuPrmpt
 33970                                          call    print           ;
 33971                                          call    select_item     ; make a selection, return # in BX
 33972                                          mov     dx,crlfm	
 33973                                          call    print           ;
 33974                                          push    word [bDisableUI]
 33975                                          or      byte [bDisableUI],1
 33976                                          call    show_status     ; clear the status line now
 33977                                          pop     word [bDisableUI]
 33978                                  
 33979                                  ;   Now begins the "re-organization" process...
 33980                                  
 33981                                  menu_autoselect:
 33982                                          cmp     bx,-1           ; clean boot requested?
 33983                                          jne	short normal_boot ; no
 33984                                          call    disable_autoexec; basically, add a /D to the command.com line
 33985                                  menu_abort:
 33986                                          sub     cx,cx           ; then immediately exit with 0 config.sys image
 33987                                          jmp	menu_exit	;
 33988                                  
 33989                                  normal_boot:
 33990                                          cmp     bx,-2           ; back to top-level menu?
 33991                                          jne	short not_topmenu ; no
 33992                                          mov     cx,[count]      ; yes, start all over
 33993                                          sub     si,si           ;
 33994                                          jmp     menu_search
 33995                                  
 33996                                  not_topmenu:
 33997                                          cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 33998                                          jne	short not_submenu
 33999                                          add     bx,bx           ;
 34000                                          mov     di,[aoffBlockName+bx]
 34001                                          call    srch_block      ; THIS CANNOT FAIL!
 34002                                          mov     si,di           ;
 34003                                          mov     cx,bx           ; ES:SI and CX are ready for another round
 34004                                          jmp     menu_found
 34005                                  
 34006                                  not_submenu:
 34007                                          add     bx,bx           ; get BX -> name of selected block
 34008                                          mov     bx,[aoffBlockName+bx]
 34009                                  
 34010                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 34011                                  ;   the offset relative to ES of the block name to be processed (along with
 34012                                  ;   all the "common" lines of course)
 34013                                  
 34014                                  no_selection:
 34015                                          mov     [offDefBlock],bx; save selection
 34016                                          mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 34017                                          sub     si,si           ;
 34018                                          push    ds              ;
 34019                                          mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 34020                                          sub     di,di           ;
 34021                                  
 34022                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 34023                                  ;
 34024                                  ;   Work our way through the config.sys image again, this time copying
 34025                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 34026                                  ;   within the requested block.  Lines inside INCLUDEd blocks are transparently
 34027                                  ;   copied by copy_block in a recursive fashion;  the amount of recursion is
 34028                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 34029                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 34030                                  ;
 34031                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 34032                                  ;   stack we're running on, then we should check it inside copy_block
 34033                                  
 34034                                  copyblock_loop:
 34035                                          push    bx              ; save selected block name
 34036                                          call    copy_block      ; process (named or common) block
 34037                                          pop     bx              ;
 34038                                          jc	short move_config ; hit eof
 34039                                  
 34040                                  ;   copy_block can only return for two reasons:  it hit eof or a new block
 34041                                  
 34042                                  copyblock_begin:
 34043                                          push    ax              ;
 34044                                          push    cx              ;
 34045                                          push    si              ;
 34046                                          push    di              ; always do "common" blocks
 34047                                          mov     di,szCommon
 34048                                          push    ds              ;
 34049                                          push    cs              ;
 34050                                          pop     ds              ;
 34051                                          call    comp_names      ;
 34052                                          pop     ds              ;
 34053                                          pop     di              ;
 34054                                          pop     si              ;
 34055                                          pop     cx              ;
 34056                                          pop     ax              ;
 34057                                          je	short copyblock_check
 34058                                          or      bx,bx           ; is there a block name to check?
 34059                                          jz	short copyblock_skip ; no
 34060                                          push    di              ;
 34061                                          mov     di,bx           ; check block against given block name
 34062                                          push    ds              ;
 34063                                          push    es              ;
 34064                                          pop     ds              ;
 34065                                          call    comp_names      ; is this the block we really want to do?
 34066                                          pop     ds              ;
 34067                                          pop     di              ;
 34068                                  copyblock_check:
 34069                                          jc	short move_config ; hit eof
 34070                                          jne	short copyblock_skip  ;
 34071                                          call    skip_opt_line   ;
 34072                                          jmp	short copyblock_loop 
 34073                                  
 34074                                  copyblock_skip:                 ;
 34075                                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 34076                                          call    get_char        ;
 34077                                          jc	short move_config ; hit eof
 34078                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34079                                          cmp     al,CONFIG_BEGIN ;
 34080                                          je	short copyblock_begin
 34081                                          jmp     short copyblock_skip ; anything else is just skipped
 34082                                  ;
 34083                                  ;   To create as little risk to the rest of SysInit as little as possible,
 34084                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 34085                                  ;   copy the new config.sys image to "confbot"
 34086                                  ;
 34087                                  move_config:
 34088                                          mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 34089                                          push    cx              ;
 34090                                  ;
 34091                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 34092                                  ;   since the configuration name only currently exists in the "confbot" area
 34093                                  ;
 34094                                   	;mov	cx,7
 34095                                  	mov     cx,szMenu-szBoot-1
 34096                                          mov     si,szBoot	; first copy the CONFIG= part
 34097                                          inc     di              ; skip a byte, in case absolutely nothing
 34098                                                                  ; was copied to the workspace, because we always
 34099                                                                  ; zero the first byte of the workspace (below)
 34100                                  copy_boot: 
 34101                                  	;lods    byte ptr cs:[si];
 34102                                          cs
 34103                                  	lodsb
 34104                                  	mov     [di],al         ;
 34105                                          inc     di              ;
 34106                                          loop    copy_boot       ;
 34107                                  
 34108                                          push    es              ; then copy the configuration name
 34109                                          mov     cx,128-7        ; put an upper limit on the name, to be safe
 34110                                          mov     si,[cs:offDefBlock]; ES:SI -> default block name
 34111                                          or      si,si           ; valid?
 34112                                          jnz	short l1	; yes
 34113                                          push    cs              ;
 34114                                          pop     es              ;
 34115                                          mov     si,szCommon
 34116                                  l1:     mov     al,[es:si]      ;
 34117                                          call    any_delim       ;
 34118                                          je	short l2	;
 34119                                          mov     [di],al         ;
 34120                                          inc     si              ;
 34121                                          inc     di              ;
 34122                                          loop    l1              ;
 34123                                  l2:     mov     byte [di],lf	; terminate the configuration string
 34124                                          pop     es              ;
 34125                                  
 34126                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 34127                                  
 34128                                          sub     di,di           ;
 34129                                          mov     [cs:config_envlen],di
 34130                                          sub     si,si           ;
 34131                                          pop     cx              ; recover the size of "config_wrkseg"
 34132                                  
 34133                                          push    cx              ;
 34134                                          rep     movsb           ; moved!
 34135                                          pop     cx              ;
 34136                                          mov     ax,ds           ;
 34137                                          pop     ds              ;
 34138                                  
 34139                                  ;   Now that the config_wrkseg is available once again, we shall
 34140                                  ;   use it to create an environment. The first thing to go in will be
 34141                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 34142                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 34143                                  ;   is empty.
 34144                                  
 34145                                          push    es              ;
 34146                                          mov     es,ax           ;
 34147                                          inc     si              ; ES:SI -> "CONFIG=configuration"
 34148                                          mov     byte [es:0],0	;empty the environment block
 34149                                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 34150                                          pop     es
 34151                                  
 34152                                  ;   Before returning, restore the default video page setting but do NOT
 34153                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 34154                                  ;   displayed on a different page, then it's because we don't want to see
 34155                                  ;   all the device driver/TSR goop (which goes to the default page)
 34156                                  
 34157                                  menu_done:
 34158                                          cmp     byte [bMenuPage],0
 34159                                          je	short menu_exit	;
 34160                                          push    es              ;
 34161                                          mov     ax,40h          ;
 34162                                          mov     es,ax           ;
 34163                                          mov     ax,[wCRTStart]  ;
 34164                                          mov     [es:004Eh],ax   ;
 34165                                          mov     al,[bCRTPage]   ;
 34166                                          mov     [es:0062h],al   ;
 34167                                          pop     es              ;
 34168                                  menu_exit:
 34169                                          mov     [count],cx      ; set new counts
 34170                                          mov     [org_count],cx  ;
 34171                                          sub     si,si           ; always return ES:SI pointing to config.sys
 34172                                          retn
 34173                                  
 34174                                  ;----------------------------------------------------------------------------
 34175                                  ;
 34176                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 34177                                  ;
 34178                                  ;   INPUT
 34179                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 34180                                  ;
 34181                                  ;   OUTPUT
 34182                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 34183                                  ;       carry set if error (eg, missing =); clear otherwise
 34184                                  ;
 34185                                  ;   OTHER REGS USED
 34186                                  ;       None
 34187                                  ;
 34188                                  ;   NOTES
 34189                                  ;       None
 34190                                  ;
 34191                                  ;   HISTORY
 34192                                  ;       Created 29-Mar-1992 by JeffPar
 34193                                  ;
 34194                                  ;----------------------------------------------------------------------------
 34195                                  
 34196                                  copy_envvar:
 34197                                          push    cx              ;
 34198                                          push    si              ;
 34199                                          push    ds              ;
 34200                                          push    es              ;
 34201                                          push    es              ;
 34202                                          mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 34203                                          pop     ds                 ; DS:SI to point to envvar
 34204                                  
 34205                                  ;   Have to calculate the length of the variable name (and if we hit
 34206                                  ;   the end of the line before we hit '=', then it's curtains for this
 34207                                  ;   config.sys line)
 34208                                  ;
 34209                                  ;   The check for NULL is important because copy_envvar is also used to copy
 34210                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 34211                                  ;   menu block existed (in order to prevent the creation of an environment)
 34212                                  
 34213                                          sub     cx,cx           ;
 34214                                  copy_varlen:                    ;
 34215                                          lodsb                   ;
 34216                                          or      al,al           ; NULL?
 34217                                          stc                     ;
 34218                                          jz	short copy_envexit ; yes, abort
 34219                                          cmp     al,cr          ;
 34220                                          stc                     ;
 34221                                          je	short copy_envexit
 34222                                          cmp     al,lf          ;
 34223                                          stc                     ;
 34224                                          je	short copy_envexit
 34225                                          inc     cx              ;
 34226                                          cmp     al,'='          ;
 34227                                          jne	short copy_varlen
 34228                                          mov     al,0            ;
 34229                                          mov     ah,[si]         ; save char after '='
 34230                                          sub     si,cx           ; back up to given varname
 34231                                          dec     cx              ; CX == # of bytes in varname
 34232                                          sub     di,di           ; start looking for DS:SI at ES:0
 34233                                  copy_varsrch:
 34234                                          cmp     byte [es:di],al
 34235                                          je	short copy_envprep ; search failed, just copy var
 34236                                          mov     bx,di           ; ES:BX -> start of this varname
 34237                                          push    cx              ;
 34238                                          push    si              ;
 34239                                          repe    cmpsb           ;
 34240                                          pop     si              ;
 34241                                          pop     cx              ;
 34242                                          jne	short copy_varnext ; no match, skip to next varname
 34243                                          cmp     byte [es:di],'='
 34244                                          jne     short copy_varnext ; no match, there's more characters
 34245                                  
 34246                                  ;   Previous occurrence of variable has been found; determine the
 34247                                  ;   entire length and then destroy it
 34248                                  
 34249                                          mov     cx,-1           ;
 34250                                          repne   scasb           ; guaranteed to get null (since we put it there)
 34251                                          push    si              ;
 34252                                          mov     si,di           ;
 34253                                          mov     di,bx           ;
 34254                                          mov     cx,[cs:config_envlen]
 34255                                          sub     cx,si           ; destroy variable now
 34256                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 34257                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO:SYS - SYSINIT:4724h
 34258                                  
 34259                                  	rep	; 0F3h
 34260                                  	es	; 26h
 34261                                  	movsb	; 0A4h
 34262                                  
 34263                                  	pop     si
 34264                                  copy_envprep:
 34265                                          cmp     ah,cr          ; if there is nothing after the '='
 34266                                          je	short copy_envdel ; then just exit with variable deleted
 34267                                          cmp     ah,lf           ;
 34268                                          je	short copy_envdel
 34269                                          jmp     short copy_envloop
 34270                                  
 34271                                  copy_varnext:                   ;
 34272                                          push    cx              ;
 34273                                          mov     cx,-1           ;
 34274                                          repne   scasb           ;
 34275                                          pop     cx              ;
 34276                                          jmp	short copy_varsrch
 34277                                  
 34278                                  copy_envloop:                   ;
 34279                                          lodsb                   ;
 34280                                          cmp     al,cr           ;
 34281                                          je	short copy_envdone
 34282                                          cmp     al,lf           ;
 34283                                          je	short copy_envdone
 34284                                          stosb                   ;
 34285                                          jmp     short copy_envloop
 34286                                  
 34287                                  copy_envdone:                   ;
 34288                                          sub     al,al           ; do SUB to clear carry as well
 34289                                          stosb                   ; always null-terminate these puppies
 34290                                  copy_envdel:                    ;
 34291                                          mov     [es:di],al      ; and stick another null to terminate the env.
 34292                                          mov     [cs:config_envlen],di
 34293                                  
 34294                                  copy_envexit:                   ;
 34295                                          pop     es              ;
 34296                                          pop     ds              ;
 34297                                          pop     si              ;
 34298                                          pop     cx              ;
 34299                                  
 34300                                  copy_done:	; 18/12/2022
 34301                                          retn
 34302                                  
 34303                                  ;----------------------------------------------------------------------------
 34304                                  ;
 34305                                  ;   copy_block:  copy the current block to the new config.sys workspace
 34306                                  ;
 34307                                  ;   INPUT
 34308                                  ;       CX == remaining bytes in "organized" config.sys memory image
 34309                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 34310                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 34311                                  ;             config.sys image) where the current block is to be copied
 34312                                  ;
 34313                                  ;   OUTPUT
 34314                                  ;       Same as above
 34315                                  ;       AL also equals the last character read from the organized image
 34316                                  ;
 34317                                  ;   OTHER REGS USED
 34318                                  ;       All
 34319                                  ;
 34320                                  ;   NOTES
 34321                                  ;       None
 34322                                  ;
 34323                                  ;   HISTORY
 34324                                  ;       Created 16-Mar-1992 by JeffPar
 34325                                  ;
 34326                                  ;----------------------------------------------------------------------------
 34327                                  
 34328                                  copy_block:
 34329                                          call    get_char        ; check for include
 34330                                          jc	short copy_done	;
 34331                                  	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34332                                  	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 34333                                          je	short copy_done ;
 34334                                  
 34335                                          cmp     al,CONFIG_INCLUDE ; 'J'
 34336                                          mov     al,ah           ; AL == the original line code
 34337                                          jne	short copy_line	; not an "include" line
 34338                                  
 34339                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 34340                                  ;   never try to include the block again (no infinite include loops please),
 34341                                  ;   then search for the named block and call copy_block again.
 34342                                  
 34343                                          mov     byte [es:si-1],CONFIG_REM ; '0'
 34344                                          push    di              ;
 34345                                  
 34346                                          mov     di,szMenu
 34347                                          call    comp_names_safe ; don't allow INCLUDE MENU
 34348                                          je	short copy_skip	;
 34349                                  
 34350                                          mov     di,szCommon
 34351                                          call    comp_names_safe ; don't allow INCLUDE COMMON
 34352                                          je	short copy_skip	;
 34353                                  
 34354                                          mov     di,si           ; try to find the block
 34355                                          call    srch_block      ;
 34356                                          mov     dx,di           ;
 34357                                          pop     di              ;
 34358                                          jne	short copy_error ; no such block
 34359                                          push    cx              ;
 34360                                          mov     cx,bx           ;
 34361                                          push    si              ;
 34362                                          dec     dx              ;
 34363                                          mov     si,dx           ;
 34364                                          call    skip_line       ; skip the rest of the "block name" line
 34365                                          call    copy_block      ; and copy in the rest of that block
 34366                                          pop     si              ;
 34367                                          pop     cx              ;
 34368                                          sub     al,al           ; force skip_opt_line to skip...
 34369                                          jmp     short copy_nextline
 34370                                  
 34371                                  copy_skip:
 34372                                          pop     di
 34373                                  copy_error:
 34374                                          clc                     ;
 34375                                          call    print_error     ; note that carry is clear, no pause
 34376                                          jmp     short copy_nextline
 34377                                  
 34378                                  ;   Copy the line at ES:SI to the current location at DS:DI
 34379                                  
 34380                                  copy_line:
 34381                                          mov     [di],al         ;
 34382                                          inc     di              ;
 34383                                          cmp     al,' '          ; is this is a "real" line with a "real" code?
 34384                                          jb	short copy_nextline ; no
 34385                                          cmp     byte [cs:config_multi],0
 34386                                          je	short copy_loop	; not a multi-config config.sys, don't embed #s
 34387                                          call    get_linenum	; BX == line # of line @ES:SI
 34388                                          mov     [di],bx         ; stash it immediately following the line code
 34389                                          inc     di              ;
 34390                                          inc     di              ;
 34391                                          jmp     short copy_next ;
 34392                                  copy_loop:                      ;
 34393                                          call    get_char        ;
 34394                                          jc	short copy_done ; end of file
 34395                                          mov     [di],al         ;
 34396                                          inc     di              ;
 34397                                  copy_next:
 34398                                          cmp     al,lf ; 0Ah	; done with line?
 34399                                          jne	short copy_loop	; nope
 34400                                  
 34401                                  copy_nextline:
 34402                                          call    skip_opt_line   ;
 34403                                          jmp     short copy_block
 34404                                  
 34405                                  	; 18/12/2022
 34406                                  ;copy_done:
 34407                                          ;retn
 34408                                  
 34409                                  ;----------------------------------------------------------------------------
 34410                                  ;
 34411                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 34412                                  ;
 34413                                  ;   INPUT
 34414                                  ;    ES:SI -> some line in the config.sys memory image
 34415                                  ;
 34416                                  ;   OUTPUT
 34417                                  ;       BX == line # (relative to 1)
 34418                                  ;
 34419                                  ;   OTHER REGS USED
 34420                                  ;       DX
 34421                                  ;
 34422                                  ;   NOTES
 34423                                  ;       None
 34424                                  ;
 34425                                  ;   HISTORY
 34426                                  ;       Created 16-Mar-1992 by JeffPar
 34427                                  ;
 34428                                  ;----------------------------------------------------------------------------
 34429                                  
 34430                                  get_linenum:
 34431                                          push    ax              ;
 34432                                          sub     bx,bx           ; BX == line # (to be returned)
 34433                                          push    cx              ;
 34434                                          mov     dx,si           ; DX == the offset we're looking for
 34435                                          push    si              ;
 34436                                          mov     cx,[cs:count]   ;
 34437                                          sub     si,si           ; prepare to scan entire file
 34438                                  get_linenum_loop:               ;
 34439                                          call    skip_line       ;
 34440                                          jc	short get_linenum_done
 34441                                          inc     bx              ;
 34442                                          cmp     si,dx           ; have we exceeded the desired offset yet?
 34443                                          jb	short get_linenum_loop ; no
 34444                                  get_linenum_done:               ;
 34445                                          pop     si              ;
 34446                                          pop     cx              ;
 34447                                          pop     ax              ;
 34448                                          retn
 34449                                  
 34450                                  ;----------------------------------------------------------------------------
 34451                                  ;
 34452                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 34453                                  ;
 34454                                  ;   INPUT
 34455                                  ;       ES -> config.sys image
 34456                                  ;    ES:DI -> block name to find
 34457                                  ;
 34458                                  ;   OUTPUT
 34459                                  ;       ZF flag set, if found
 34460                                  ;    ES:DI -> just past the name in the block heading, if found
 34461                                  ;       BX == # bytes remaining from that point, if found
 34462                                  ;
 34463                                  ;   OTHER REGS USED
 34464                                  ;       None
 34465                                  ;
 34466                                  ;   NOTES
 34467                                  ;       This differs from "find_block" in that it searches the ENTIRE
 34468                                  ;       config.sys image, not merely the remaining portion, and that it
 34469                                  ;       takes a pointer to block name that is *elsewhere* in the image
 34470                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 34471                                  ;
 34472                                  ;   HISTORY
 34473                                  ;       Created 16-Mar-1992 by JeffPar
 34474                                  ;
 34475                                  ;----------------------------------------------------------------------------
 34476                                  
 34477                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 34478                                          push    ax              ;
 34479                                          push    cx              ;
 34480                                          mov     cx,[cs:count]   ;
 34481                                          push    si              ;
 34482                                          sub     si,si           ;
 34483                                          push    ds              ;
 34484                                          push    es              ;
 34485                                          pop     ds              ;
 34486                                          call    find_block      ;
 34487                                          mov     di,si           ;
 34488                                          mov     bx,cx           ;
 34489                                          pop     ds              ;
 34490                                          pop     si              ;
 34491                                          pop     cx              ;
 34492                                          pop     ax              ;
 34493                                  find_exit: ; 16/04/2019
 34494                                          retn			;
 34495                                  
 34496                                  ;----------------------------------------------------------------------------
 34497                                  ;
 34498                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 34499                                  ;
 34500                                  ;   INPUT
 34501                                  ;    DS:DI -> block name to find
 34502                                  ;    ES:SI -> remainder of config.sys image
 34503                                  ;       CX == remaining size of config.sys image
 34504                                  ;
 34505                                  ;   OUTPUT
 34506                                  ;       ZF flag set, if found (also, CF set if EOF)
 34507                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 34508                                  ;       CX == # bytes remaining from that point
 34509                                  ;
 34510                                  ;   OTHER REGS USED
 34511                                  ;       AX
 34512                                  ;
 34513                                  ;   NOTES
 34514                                  ;       This differs from "srch_block" in that it searches only the
 34515                                  ;       remaining portion of the config.sys image and leaves SI and CX
 34516                                  ;       pointing to where the search left off, and that it takes a pointer
 34517                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 34518                                  ;
 34519                                  ;   HISTORY
 34520                                  ;       Created 16-Mar-1992 by JeffPar
 34521                                  ;
 34522                                  ;----------------------------------------------------------------------------
 34523                                  
 34524                                  find_block:
 34525                                          call    get_char        ; get line code
 34526                                          jc	short find_exit	; end of file
 34527                                          and     al,~CONFIG_OPTION_QUERY
 34528                                          cmp     al,CONFIG_BEGIN ; beginning of a block?
 34529                                          je	short check_line ; no
 34530                                          cmp     al,CONFIG_INCLUDE
 34531                                          jne	short next_line	;
 34532                                          or	byte [cs:config_multi],1
 34533                                          jmp     short next_line ;
 34534                                  check_line:
 34535                                          or      byte [cs:config_multi],1
 34536                                          call    comp_names      ; compare block names
 34537                                          jbe	short find_exit	; end of file, or names matched
 34538                                  next_line:
 34539                                          call    skip_opt_line   ; no, so skip to next line
 34540                                          jmp	short find_block  ;
 34541                                  ;find_exit:
 34542                                  ;	retn
 34543                                  
 34544                                  ;----------------------------------------------------------------------------
 34545                                  ;
 34546                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 34547                                  ;
 34548                                  ;   INPUT
 34549                                  ;    DS:DI -> keyword to compare
 34550                                  ;    ES:SI -> position in config.sys
 34551                                  ;       CX == remaining bytes in config.sys
 34552                                  ;
 34553                                  ;   OUTPUT
 34554                                  ;       ZF flag set, if match (also, CF set if EOF)
 34555                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 34556                                  ;       CX == # bytes remaining from that point
 34557                                  ;
 34558                                  ;   OTHER REGS USED
 34559                                  ;       AX
 34560                                  ;
 34561                                  ;   NOTES
 34562                                  ;       None
 34563                                  ;
 34564                                  ;   HISTORY
 34565                                  ;       Created 16-Mar-1992 by JeffPar
 34566                                  ;
 34567                                  ;----------------------------------------------------------------------------
 34568                                  
 34569                                  comp_names:
 34570                                          push    di              ;
 34571                                  comp_loop:                      ;
 34572                                          call    get_char        ;
 34573                                          jc	short comp_exit	;
 34574                                          call    any_delim       ; is next character a delimiter?
 34575                                          mov     ah,[di]         ; (get next character we're supposed to match)
 34576                                          je	short comp_almost ; yes, it *could* be a match
 34577                                          inc     di              ;
 34578                                          and     ax,~2020h ; 0DFDFh 
 34579                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 34580                                          cmp     al,ah           ; match?
 34581                                          je	short comp_loop ; yes, keep looking at the characters
 34582                                          clc                     ; prevent erroneous eof indication: clear carry
 34583                                  comp_exit:                      ;
 34584                                          pop     di              ;
 34585                                          retn			;
 34586                                  comp_almost:                    ;
 34587                                          xchg    al,ah           ; we don't know for sure if it's a match
 34588                                          call    any_delim       ; until we verify that the second string has
 34589                                          xchg    al,ah           ; been exhausted also...
 34590                                          jmp     comp_exit       ; if we are, this call to any_delim will tell...
 34591                                  
 34592                                  ;----------------------------------------------------------------------------
 34593                                  
 34594                                  comp_names_safe:
 34595                                          push    ax
 34596                                          push    cx
 34597                                          push	si
 34598                                          push    ds
 34599                                          push    cs
 34600                                          pop     ds
 34601                                          call    comp_names
 34602                                          pop     ds
 34603                                  	pop	si
 34604                                          pop     cx
 34605                                          pop     ax
 34606                                          retn
 34607                                  
 34608                                  ;----------------------------------------------------------------------------
 34609                                  ;
 34610                                  ;   print_item:  display menu item #BL
 34611                                  ;
 34612                                  ;   INPUT
 34613                                  ;       BL == menu item # to display
 34614                                  ;
 34615                                  ;   OUTPUT
 34616                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 34617                                  ;
 34618                                  ;   OTHER REGS USED
 34619                                  ;       None
 34620                                  ;
 34621                                  ;   NOTES
 34622                                  ;       This function saves/restores the current cursor position, so you
 34623                                  ;       needn't worry about it.
 34624                                  ;
 34625                                  ;   HISTORY
 34626                                  ;       Created 16-Mar-1992 by JeffPar
 34627                                  ;
 34628                                  ;----------------------------------------------------------------------------
 34629                                  
 34630                                  print_item:		; prints menu item #BL (1 to N)
 34631                                          push    ax              ;
 34632                                          push    bx              ;
 34633                                          push    cx              ;
 34634                                          push    dx              ;
 34635                                          push    si              ;
 34636                                          mov     ah,03h          ; get cursor position
 34637                                          mov     bh,[bMenuPage]  ; always page zero
 34638                                          int     10h             ; DH/DL = row/column
 34639                                          push    dx              ; save it
 34640                                          mov     ah,02h          ; set cursor position
 34641                                          mov     dh,bl           ;
 34642                                          add     dh,3            ;
 34643                                          mov     dl,5            ;
 34644                                          int     10h             ; set cursor position for correct row/col
 34645                                          mov     al,bl           ;
 34646                                          add     al,'0'          ; convert menu item # to ASCII digit
 34647                                          mov     ah,[bMenuColor] ; normal attribute
 34648                                          cmp     bl,[bDefBlock]  ; are we printing the current block?
 34649                                          jne	short print_other ; no
 34650                                          or      ah,70h          ; yes, set bgnd color to white
 34651                                          mov     ch,ah           ;
 34652                                          mov     cl,4            ;
 34653                                          rol     ch,cl           ;
 34654                                          cmp     ch,ah           ; are fgnd/bgnd the same?
 34655                                          jne	short print_other ; no
 34656                                          xor     ah,08h          ; yes, so modify the fgnd intensity
 34657                                  print_other:                    ;
 34658                                          mov     bh,0            ;
 34659                                          add     bx,bx           ;
 34660                                          mov     di,[aoffBlockDesc+bx]
 34661                                          mov     bl,ah           ; put the attribute in the correct register now
 34662                                          mov     bh,[bMenuPage]  ; get correct video page #
 34663                                          mov     ah,09h          ; write char/attr
 34664                                          mov     cx,1            ;
 34665                                          int     10h             ;
 34666                                          inc     dl              ; increment column
 34667                                          mov     ah,02h          ;
 34668                                          int     10h             ;
 34669                                          ;mov	ax,0900h+'.'    ;
 34670                                          mov	ax,092Eh
 34671                                  	int     10h             ; display '.'
 34672                                          inc     dl              ; increment column
 34673                                          mov     ah,02h          ;
 34674                                          int     10h             ;
 34675                                          ;mov	ax,0900h+' '    ;
 34676                                          mov	ax,0920h
 34677                                  	int     10h             ; display ' '
 34678                                          inc     dl              ; increment column
 34679                                          mov     ah,02h          ;
 34680                                          int     10h             ;
 34681                                          push    es              ;
 34682                                  print_loop:                     ;
 34683                                          mov     al,[es:di]	; get a character of the description
 34684                                          inc     di              ;
 34685                                          cmp     al,TAB ; 9	; substitute spaces for tabs
 34686                                          jne	short print_nontab ;
 34687                                          mov     al,' '          ;
 34688                                  print_nontab:                   ;
 34689                                          cmp     al,' '          ;
 34690                                          jb	short print_done ; stop at the 1st character < space
 34691                                          cmp     al,'$'          ;
 34692                                          je	short print_done ; also stop on $
 34693                                          mov     ah,09h          ; display function #
 34694                                          int     10h             ;
 34695                                          inc     dl              ; increment column
 34696                                          cmp     dl,78           ; far enough?
 34697                                          jae	short print_done ; yes
 34698                                          mov     ah,02h          ;
 34699                                          int     10h             ;
 34700                                          jmp     print_loop      ;
 34701                                  print_done:                     ;
 34702                                          pop     es              ;
 34703                                          pop     dx              ;
 34704                                          mov     ah,02h          ;
 34705                                          int     10h             ; restore previous row/col
 34706                                          pop     si              ;
 34707                                          pop     dx              ;
 34708                                          pop     cx              ;
 34709                                          pop     bx              ;
 34710                                          pop     ax              ;
 34711                                          retn			;
 34712                                  
 34713                                  ;----------------------------------------------------------------------------
 34714                                  ;
 34715                                  ;   select_item:  wait for user to select menu item, with time-out
 34716                                  ;
 34717                                  ;   INPUT
 34718                                  ;       None
 34719                                  ;
 34720                                  ;   OUTPUT
 34721                                  ;       BX == menu item # (1-N), or -1 for clean boot
 34722                                  ;       Selected menu item highlighted
 34723                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 34724                                  ;
 34725                                  ;   OTHER REGS USED
 34726                                  ;       None
 34727                                  ;
 34728                                  ;   NOTES
 34729                                  ;       None
 34730                                  ;
 34731                                  ;   HISTORY
 34732                                  ;       Created 16-Mar-1992 by JeffPar
 34733                                  ;
 34734                                  ;----------------------------------------------------------------------------
 34735                                  
 34736                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 34737                                          mov     bl,[bDefBlock]  ; BL will be the default block #
 34738                                          mov     al,bl           ;
 34739                                          call    disp_num        ;
 34740                                          call    show_status     ; display current interactive status
 34741                                          cmp     byte [secTimeOut],-1
 34742                                          je	short input_key	; no time-out, just go to input
 34743                                          mov     ah,GET_TIME ; 2Ch
 34744                                          int     21h             ;
 34745                                          mov     bh,dh           ; BH = initial # of seconds
 34746                                  check_time:
 34747                                          mov     al,[secTimeOut] ;
 34748                                          sub     al,[secElapsed] ;
 34749                                          jae	short show_time	;
 34750                                          or      byte [bQueryOpt],2  ; disable all further prompting
 34751                                          mov     byte [secElapsed],0
 34752                                          jmp	select_done	; time's up!
 34753                                  show_time:
 34754                                          push    bx              ;
 34755                                          mov     bl,al           ; save # in BL
 34756                                          mov     bh,[bMenuPage]  ;
 34757                                          mov     ah,03h          ; get cursor position
 34758                                          int     10h             ;
 34759                                          push    dx              ;
 34760                                  	add	dl,8		; move cursor to the right
 34761                                          mov     ah,02h          ; set cursor position
 34762                                          int     10h             ;
 34763                                          mov     dx,_$TimeOut
 34764                                          call    print           ; print the "Time remaining: " prompt
 34765                                          mov     al,bl           ; recover # from BL
 34766                                          cbw                     ; this works because AL is always <= 90
 34767                                          mov     cl,10           ;
 34768                                          div     cl              ; AL = tens digit, AH = ones digit
 34769                                          mov     cl,ah           ;
 34770                                          add     al,'0'          ;
 34771                                          mov     ah,0Eh          ;
 34772                                          int     10h             ; write TTY tens digit
 34773                                          mov     al,cl           ;
 34774                                          add     al,'0'          ;
 34775                                          mov     ah,0Eh          ;
 34776                                          int     10h             ; write TTY ones digit
 34777                                          pop     dx
 34778                                          mov     ah,02h          ; set cursor position back to where it was
 34779                                          int     10h             ;
 34780                                          pop     bx              ;
 34781                                  input_key:
 34782                                          mov     ah,RAW_CON_IO ; 6
 34783                                          mov     dl,0FFh         ; input request
 34784                                          int     21h             ;
 34785                                          jnz	short got_key	;
 34786                                          cmp     byte [secTimeOut],-1; is there a time-out?
 34787                                          je	short input_key	; no, just go back to input
 34788                                          mov     ah,GET_TIME     ;
 34789                                          int     21h             ; DH = seconds
 34790                                          mov     ah,dh           ;
 34791                                          sub     dh,bh           ; should generally be zero or one
 34792                                          mov     bh,ah           ;
 34793                                          jnc	short got_time	;
 34794                                          mov     dh,1            ; it wrapped back to zero, so assume one
 34795                                  got_time:
 34796                                          or      dh,dh           ; any change?
 34797                                          jz	short input_key	; no
 34798                                          add     [secElapsed],dh ;
 34799                                          jmp	short check_time ;
 34800                                  got_key:
 34801                                          push    ax              ;
 34802                                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 34803                                          xchg    [secTimeOut],ax
 34804                                          cmp     al,-1           ; was time-out already disabled?
 34805                                          je	short timeout_disabled ; yes
 34806                                          push    bx              ; let's disable # seconds display
 34807                                          mov     ax,0A20h        ; write multiple spaces
 34808                                          mov     bx,[bMenuColor]
 34809                                          mov     cx,80           ; 80 of them, to be safe
 34810                                          int     10h             ; to completely obliterate # seconds display
 34811                                          pop     bx   		;
 34812                                  
 34813                                  timeout_disabled:
 34814                                          pop     ax              ;
 34815                                          or      al,al           ; extended key pressed?
 34816                                          jnz	short normal_key ; no
 34817                                          int     21h             ; get the next part of the key then
 34818                                          jz	short input_key	; hmmm, what happened to the second part?
 34819                                  
 34820                                          cmp     al,48h          ; up arrow?
 34821                                          jne	short not_up	; no
 34822                                          cmp     bl,1            ; are we as up as up can get?
 34823                                          jbe	short input_key	; yes, ignore it
 34824                                          dec     byte [bDefBlock] ;
 34825                                          call    print_item      ; re-print the current item
 34826                                          dec     bl              ; and then print the new current item
 34827                                          jmp     short print1
 34828                                  not_up:
 34829                                          cmp     al,50h          ; down arrow?
 34830                                          jne	short not_down	; no
 34831                                          cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 34832                                          jae	short to_input_key ; yes, ignore it
 34833                                          inc     byte [bDefBlock] ;
 34834                                          call    print_item      ; re-print the current item
 34835                                          inc     bx              ; and then print the new current item
 34836                                  print1: 
 34837                                  	mov     al,bl           ;
 34838                                  print2: 
 34839                                  	call    print_item      ;
 34840                                          call    disp_num        ;
 34841                                  to_input_key:
 34842                                          jmp     input_key       ;
 34843                                  not_down:
 34844                                          test    byte [bDisableUI],1
 34845                                          jnz	short to_input_key ; don't allow F8 or F5
 34846                                          cmp     al,42h          ; F8 function key?
 34847                                          jne	short not_f8	; no
 34848                                          xor     byte [bQueryOpt],1
 34849                                          call    show_status     ;
 34850                                          jmp     input_key	;
 34851                                  not_f8:
 34852                                          cmp     al,3Fh          ; F5 function key?
 34853                                          jne	short to_input_key ; no
 34854                                          mov     bx,-1           ; special return code (-1) indicating clean boot
 34855                                          mov     al,' '          ; don't want to display anything really;
 34856                                          jmp     short disp_input; just want to display the cr/lf sequence...
 34857                                  
 34858                                  normal_key:
 34859                                          cmp     al,0Dh          ; Enter?
 34860                                          je	short select_done ; yes
 34861                                          cmp     al,08h          ; backspace?
 34862                                          jne	short not_backspace ; no
 34863                                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 34864                                          retn			;
 34865                                  not_backspace:
 34866                                          sub     al,'0'          ; is greater than '0'?
 34867                                          jbe	short to_input_key ; no
 34868                                          cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 34869                                          ja	short to_input_key ; no
 34870                                          mov	[bDefBlock],al  ;
 34871                                          call    print_item      ; redisplay the current selection
 34872                                          mov     bl,al           ; set new selection
 34873                                          jmp	short print2
 34874                                  
 34875                                  select_done:
 34876                                          mov     bh,0            ; return a full 16-bit value (for indexing)
 34877                                          mov     al,bl           ;
 34878                                          add     al,'0'          ; convert it into a digit, then display it
 34879                                  
 34880                                  	; fall into disp_input
 34881                                  
 34882                                  ; 16/04/2019 - Retro DOS v4.0
 34883                                  
 34884                                  ;----------------------------------------------------------------------------
 34885                                  ;
 34886                                  ;   disp_input:  display a single character + cr/lf
 34887                                  ;
 34888                                  ;   INPUT
 34889                                  ;       AL == character to display
 34890                                  ;
 34891                                  ;   OUTPUT
 34892                                  ;       None
 34893                                  ;
 34894                                  ;   OTHER REGS USED
 34895                                  ;       None
 34896                                  ;
 34897                                  ;   NOTES
 34898                                  ;       This function is used not only for the menu input selection but
 34899                                  ;       also for the interactive line prompting (the y/n/a thing).
 34900                                  ;
 34901                                  ;   HISTORY
 34902                                  ;       Created 16-Mar-1992 by JeffPar
 34903                                  ;
 34904                                  ;----------------------------------------------------------------------------
 34905                                  
 34906                                  disp_input:
 34907                                          push    ax
 34908                                          cmp     al,' '
 34909                                          jae	short disp_ok
 34910                                          mov     al,' '
 34911                                  disp_ok:
 34912                                          mov     dl,al
 34913                                          mov     ah,STD_CON_OUTPUT ; 2
 34914                                          int     21h
 34915                                          mov     dx,crlfm
 34916                                          call    print
 34917                                          pop     ax
 34918                                          retn
 34919                                  
 34920                                  ;----------------------------------------------------------------------------
 34921                                  
 34922                                  disp_num:
 34923                                          push    bx
 34924                                          add     al,'0'
 34925                                          mov     ah,0Ah
 34926                                          mov     bx,[bMenuColor]
 34927                                          mov     cx,1
 34928                                          int     10h
 34929                                          pop     bx
 34930                                          retn
 34931                                  
 34932                                  ;----------------------------------------------------------------------------
 34933                                  ;
 34934                                  ;   show_status:  display current interactive mode setting (on/off/none)
 34935                                  ;
 34936                                  ;   INPUT
 34937                                  ;       None
 34938                                  ;
 34939                                  ;   OUTPUT
 34940                                  ;       None
 34941                                  ;
 34942                                  ;   OTHER REGS USED
 34943                                  ;       None
 34944                                  ;
 34945                                  ;   NOTES
 34946                                  ;       None
 34947                                  ;
 34948                                  ;   HISTORY
 34949                                  ;       Created 16-Mar-1992 by JeffPar
 34950                                  ;
 34951                                  ;----------------------------------------------------------------------------
 34952                                  
 34953                                  show_status:
 34954                                          push    bx              ; BL = video page #
 34955                                          mov     bx,[bMenuColor]
 34956                                          mov     ah,03h          ; get cursor position
 34957                                          int     10h             ;
 34958                                          push    dx              ; save it
 34959                                          mov     ah,02h          ; set cursor position
 34960                                          mov     dx,[bLastCol]   ; set correct row/col
 34961                                          test    byte [bDisableUI],1
 34962                                          jz	short show_onoff ; just show on/off
 34963                                          mov     dl,0            ;
 34964                                          int     10h             ;
 34965                                          mov     ax,0A20h        ; write multiple spaces
 34966                                          mov     cx,80           ; 80 of them, to be exact
 34967                                          int     10h             ; to obliterate the status line
 34968                                          jmp     short show_done ;
 34969                                  show_onoff: 
 34970                                          int     10h
 34971                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 34972                                  		; AL = character, BH = display page - alpha mode
 34973                                  		; BL = color of character (graphics mode, PCjr only)
 34974                                  		; CX = number of times to write character
 34975                                  
 34976                                          mov     al,[_$NO]	; assume OFF
 34977                                          cmp     byte [bQueryOpt],1 ; is interactive mode on?
 34978                                          jne	short show_noton ; no
 34979                                          mov     al,[_$YES]	; yes
 34980                                  show_noton:                     ;
 34981                                          mov     ah,0Eh          ; write TTY
 34982                                          int     10h             ;
 34983                                  show_done:                      ;
 34984                                          pop     dx              ;
 34985                                          mov     ah,02h          ;
 34986                                          int     10h             ; restore original cursor position
 34987                                          pop     bx              ;
 34988                                          retn			;
 34989                                  
 34990                                  ; 16/04/2019 - Retro DOS v4.0
 34991                                  
 34992                                  ;----------------------------------------------------------------------------
 34993                                  ;
 34994                                  ;   skip_token: advances ES:SI/CX past the current token
 34995                                  ;
 34996                                  ;   INPUT
 34997                                  ;    ES:SI -> position in config.sys
 34998                                  ;       CX == remaining bytes in config.sys
 34999                                  ;
 35000                                  ;   OUTPUT
 35001                                  ;       CF set if EOL/EOF hit
 35002                                  ;       AL == 1st char of delimiter
 35003                                  ;    ES:SI -> just past the delimiter
 35004                                  ;       CX == # bytes remaining from that point
 35005                                  ;
 35006                                  ;   OTHER REGS USED
 35007                                  ;       AX
 35008                                  ;
 35009                                  ;   NOTES
 35010                                  ;       None
 35011                                  ;
 35012                                  ;   HISTORY
 35013                                  ;       Created 16-Mar-1992 by JeffPar
 35014                                  ;
 35015                                  ;----------------------------------------------------------------------------
 35016                                  
 35017                                  skip_token:
 35018                                          call    get_char
 35019                                          jc	short skip_token_done
 35020                                          call    any_delim
 35021                                          jne	short skip_token
 35022                                  skip_check_eol:
 35023                                          cmp     al,cr ; 0Dh
 35024                                          je	short skip_token_eol
 35025                                          cmp     al,lf ; 0Ah
 35026                                          je	short skip_token_eol
 35027                                          clc
 35028                                          ;jmp	short skip_token_done
 35029                                  	retn
 35030                                  skip_token_eol:
 35031                                          stc
 35032                                  skip_token_done:
 35033                                          retn
 35034                                  
 35035                                  ;----------------------------------------------------------------------------
 35036                                  ;
 35037                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 35038                                  ;
 35039                                  ;   INPUT
 35040                                  ;    ES:SI -> position in config.sys
 35041                                  ;       CX == remaining bytes in config.sys
 35042                                  ;
 35043                                  ;   OUTPUT
 35044                                  ;       CF set if EOF hit
 35045                                  ;       AL == 1st char of token
 35046                                  ;    ES:SI -> just past the token
 35047                                  ;       CX == # bytes remaining from that point
 35048                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 35049                                  ;
 35050                                  ;   OTHER REGS USED
 35051                                  ;       AX
 35052                                  ;
 35053                                  ;   NOTES
 35054                                  ;       None
 35055                                  ;
 35056                                  ;   HISTORY
 35057                                  ;       Created 16-Mar-1992 by JeffPar
 35058                                  ;
 35059                                  ;----------------------------------------------------------------------------
 35060                                  
 35061                                  skip_delim:       ; returns carry set if eol/eof
 35062                                          call    get_char        ;
 35063                                          lea     bx,[si-1]       ; also returns BX -> next token
 35064                                          jc	short skip_token_done ;
 35065                                          call    delim           ;
 35066                                          je	short skip_delim ;
 35067                                          jmp	short skip_check_eol  ; 13/05/2019
 35068                                  
 35069                                  ;----------------------------------------------------------------------------
 35070                                  ;
 35071                                  ;   skip_opt_line: same as skip_line provided AL != LF
 35072                                  ;
 35073                                  ;   INPUT
 35074                                  ;       AL == last character read
 35075                                  ;    ES:SI -> position in config.sys
 35076                                  ;       CX == remaining bytes in config.sys
 35077                                  ;
 35078                                  ;   OUTPUT
 35079                                  ;       CF set if EOF hit
 35080                                  ;       AL == 1st char of new line
 35081                                  ;    ES:SI -> just past 1st char of new line
 35082                                  ;       CX == # bytes remaining from that point
 35083                                  ;
 35084                                  ;   OTHER REGS USED
 35085                                  ;       AX
 35086                                  ;
 35087                                  ;   NOTES
 35088                                  ;       In other words, the purpose here is to skip to the next line,
 35089                                  ;       unless ES:SI is already sitting at the front of the next line (which
 35090                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 35091                                  ;
 35092                                  ;   HISTORY
 35093                                  ;       Created 16-Mar-1992 by JeffPar
 35094                                  ;
 35095                                  ;----------------------------------------------------------------------------
 35096                                  
 35097                                  skip_opt_line:
 35098                                          cmp     al,lf ; 0Ah
 35099                                          je	short skip_line_done
 35100                                       
 35101                                  	; fall into skip_line
 35102                                  
 35103                                  ;----------------------------------------------------------------------------
 35104                                  ;
 35105                                  ;   skip_line: skip to the next line
 35106                                  ;
 35107                                  ;   INPUT
 35108                                  ;    ES:SI -> position in config.sys
 35109                                  ;       CX == remaining bytes in config.sys
 35110                                  ;
 35111                                  ;   OUTPUT
 35112                                  ;       CF set if EOF hit
 35113                                  ;    ES:SI -> just past 1st char of new line
 35114                                  ;       CX == # bytes remaining from that point
 35115                                  ;
 35116                                  ;   OTHER REGS USED
 35117                                  ;       AX
 35118                                  ;
 35119                                  ;   NOTES
 35120                                  ;       None
 35121                                  ;
 35122                                  ;   HISTORY
 35123                                  ;       Created 16-Mar-1992 by JeffPar
 35124                                  ;
 35125                                  ;----------------------------------------------------------------------------
 35126                                  
 35127                                  skip_line:
 35128                                          call    get_char
 35129                                          jc	short skip_line_done
 35130                                          cmp     al,lf ; 0Ah
 35131                                          jne	short skip_line
 35132                                  skip_line_done:
 35133                                  num_done:	; 18/12/2022
 35134                                          retn
 35135                                  
 35136                                  ;----------------------------------------------------------------------------
 35137                                  ;
 35138                                  ;   get_number: return binary equivalent of numeric string
 35139                                  ;
 35140                                  ;   INPUT
 35141                                  ;    ES:SI -> position in config.sys
 35142                                  ;       CX == remaining bytes in config.sys
 35143                                  ;
 35144                                  ;   OUTPUT
 35145                                  ;       AL == non-digit encountered
 35146                                  ;       BX == binary #
 35147                                  ;    ES:SI -> just past 1st non-digit
 35148                                  ;       CX == # bytes remaining from that point
 35149                                  ;
 35150                                  ;   OTHER REGS USED
 35151                                  ;       AX
 35152                                  ;
 35153                                  ;   NOTES
 35154                                  ;       None
 35155                                  ;
 35156                                  ;   HISTORY
 35157                                  ;       Created 16-Mar-1992 by JeffPar
 35158                                  ;
 35159                                  ;----------------------------------------------------------------------------
 35160                                  
 35161                                  ; 13/05/2019
 35162                                  
 35163                                  get_number:
 35164                                          sub     bx,bx           ; BX = result
 35165                                  num_loop:
 35166                                          call    get_char        ;
 35167                                          jc	short num_done	;
 35168                                          cmp     al,'0'          ; convert to value
 35169                                          jb	short num_done	; no more number
 35170                                          cmp     al,'9'          ;
 35171                                          ja	short num_done	;
 35172                                          push    ax              ;
 35173                                          mov     ax,10           ;
 35174                                          push    dx              ;
 35175                                          mul     bx              ;
 35176                                          pop     dx              ;
 35177                                          mov     bx,ax           ;
 35178                                          pop     ax              ;
 35179                                          sub     al,'0'          ;
 35180                                          cbw                     ;
 35181                                          add     bx,ax           ;
 35182                                          jmp	short num_loop	;
 35183                                  
 35184                                  	; 18/12/2022
 35185                                  ;num_done:
 35186                                          ;retn
 35187                                  
 35188                                  ;----------------------------------------------------------------------------
 35189                                  ;
 35190                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 35191                                  ;
 35192                                  ;   INPUT
 35193                                  ;    ES:SI -> position in config.sys
 35194                                  ;       CX == remaining bytes in config.sys
 35195                                  ;
 35196                                  ;   OUTPUT
 35197                                  ;       AL == next character
 35198                                  ;    ES:SI -> just past next character
 35199                                  ;       CX == # bytes remaining from that point
 35200                                  ;
 35201                                  ;   OTHER REGS USED
 35202                                  ;       AX
 35203                                  ;
 35204                                  ;   NOTES
 35205                                  ;       None
 35206                                  ;
 35207                                  ;   HISTORY
 35208                                  ;       Created 16-Mar-1992 by JeffPar
 35209                                  ;
 35210                                  ;----------------------------------------------------------------------------
 35211                                  
 35212                                  get_char:
 35213                                          sub     cx,1            ; use SUB to set carry,zero
 35214                                          jb	short get_fail	; out of data
 35215                                          ;lods	byte ptr es:[si] ;
 35216                                  	es	
 35217                                  	lodsb
 35218                                          mov     ah,al           ;
 35219                                          retn			;
 35220                                  get_fail:                       ; restore CX to zero
 35221                                          mov     cx,0            ; leave carry set, zero not set
 35222                                  nearby_ret:
 35223                                          retn
 35224                                  
 35225                                  ;----------------------------------------------------------------------------
 35226                                  ;
 35227                                  ;   query_user: ask user whether to execute current config.sys command
 35228                                  ;
 35229                                  ;   INPUT
 35230                                  ;       AL == current command code
 35231                                  ;    ES:SI -> current command line in config.sys
 35232                                  ;    config_cmd == current command code, but with QUERY bit intact
 35233                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 35234                                  ;
 35235                                  ;   OUTPUT
 35236                                  ;       CF set if command should be ignored (it is also REM'ed out)
 35237                                  ;
 35238                                  ;   OTHER REGS USED
 35239                                  ;       BX, CX, DX, DI
 35240                                  ;
 35241                                  ;   NOTES
 35242                                  ;       None
 35243                                  ;
 35244                                  ;   HISTORY
 35245                                  ;       Created 16-Mar-1992 by JeffPar
 35246                                  ;
 35247                                  ;----------------------------------------------------------------------------
 35248                                  
 35249                                  	; 12/12/2022
 35250                                  query_user:
 35251                                          test    byte [bQueryOpt],4	; answer no to everything?
 35252                                          ;jz	short qu_1		;
 35253                                          ; 12/12/2022
 35254                                  	;jmp	short skip_all		;
 35255                                  	jnz	short skip_all
 35256                                  qu_1:
 35257                                  	test    byte [bQueryOpt],2	; answer yes to everything?
 35258                                          jnz	short nearby_ret	; yes (and return carry clear!)
 35259                                          push    ax                      ;
 35260                                          mov     al,[config_cmd]         ;
 35261                                          test    byte [bQueryOpt],1	; query every command?
 35262                                          jnz	short query_all		; yes
 35263                                          test    al,CONFIG_OPTION_QUERY  ;
 35264                                          ;jnz	short query_all		;
 35265                                          ; 12/12/2022
 35266                                  	;jmp	short do_cmd		;
 35267                                  	jz	short do_cmd ; cf=0
 35268                                  query_all:
 35269                                  
 35270                                  ;   Search for the command code (AL) in "comtab", and then print
 35271                                  ;   out the corresponding keyword, followed by the rest of the actual
 35272                                  ;   line pointed to by ES:SI
 35273                                  
 35274                                          push    si                      ; save pointer to rest of CONFIG.SYS line
 35275                                          mov     dx,_$AutoPrmpt    	;
 35276                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35277                                          jz	short generic_prompt	; config_cmd must have been 0
 35278                                  
 35279                                          mov     dh,al                   ; save config_cmd in DH
 35280                                          sub     bx,bx                   ;
 35281                                          mov     di,comtab		;
 35282                                  find_match:                             ;
 35283                                          mov     bl,[di]                 ; get size of current keyword
 35284                                          or      bl,bl                   ;
 35285                                          jz	short line_print	; end of table
 35286                                          inc     di                      ;
 35287                                          cmp     al,[di+bx]              ; match?
 35288                                          je	short cmd_match		; yes
 35289                                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 35290                                  	; 13/05/2019	
 35291                                          jmp	short find_match	; loop
 35292                                  cmd_match:                              ;
 35293                                          mov     cl,[di-1]               ;
 35294                                          mov     ch,0                    ;
 35295                                          mov     ah,STD_CON_OUTPUT ; 2
 35296                                  cmd_print:                              ;
 35297                                          mov     al,[di]                 ;
 35298                                          inc     di                      ;
 35299                                          mov     dl,al                   ;
 35300                                          int     21h                     ;
 35301                                          loop    cmd_print               ;
 35302                                          mov     dl,'='                  ;
 35303                                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 35304                                          jne	short cmd_notset	;
 35305                                          mov     dl,' '                  ;
 35306                                  cmd_notset:
 35307                                          int     21h                     ; '=' looks funny on SET commands
 35308                                  line_print:                             ;
 35309                                  	;lods	byte ptr es:[si]        ;
 35310                                          es
 35311                                  	lodsb
 35312                                  	or      al,al                   ;
 35313                                          jnz	short non_null		;
 35314                                          mov     al,' '                  ;
 35315                                  non_null:                               ;
 35316                                          cmp     al,' '                  ; control code?
 35317                                          jb	short prompt_user	; yes, assume end of line
 35318                                          jne	short non_space		;
 35319                                          cmp     byte [es:si],' '	;
 35320                                          jb	short prompt_user	;
 35321                                  non_space:                              ;
 35322                                          mov     dl,al                   ;
 35323                                          mov     ah,STD_CON_OUTPUT ; 2	;
 35324                                          int     21h                     ;
 35325                                          jmp	short line_print	;
 35326                                  prompt_user:                            ;
 35327                                          mov     dx,_$InterPrmpt		;
 35328                                  
 35329                                  generic_prompt:
 35330                                          call    print                   ;
 35331                                  input_loop:                             ;
 35332                                          mov     ah,0                    ; read a key
 35333                                          int     16h                     ;
 35334                                          or      al,al                   ; is it a function key?
 35335                                          jnz	short not_func		; no
 35336                                          cmp     ah,3Fh                  ; F5 function key?
 35337                                          jne	short input_loop	; no
 35338                                          mov     al,[_$NO]                  ;
 35339                                          or      byte [bQueryOpt],4	; no more queries
 35340                                          jmp     short legal_char        ;
 35341                                  not_func:
 35342                                          and     al,~20h ; 0DFh		; converting to upper case
 35343                                          cmp     al,[_$NO]		; verify character is legal
 35344                                          je	short legal_char	;
 35345                                          cmp     al,[_$YES]		;
 35346                                          je	short legal_char	;
 35347                                          cmp     byte [config_cmd],0	;
 35348                                          je	short input_loop	; don't allow Esc on this query
 35349                                          cmp     al,1Bh                  ; Esc?
 35350                                          jne	short input_loop	;
 35351                                          or      byte [bQueryOpt],2	; no more interactive boot prompts
 35352                                          mov     al,[_$YES]
 35353                                  legal_char:                             ;
 35354                                          call    disp_input              ;
 35355                                          pop     si                      ; restore pointer to rest of CONFIG.SYS line
 35356                                  
 35357                                          cmp     al,[_$NO]		; process line?
 35358                                          je	short skip_cmd		; no
 35359                                  	; 12/12/2022
 35360                                  	clc
 35361                                  do_cmd:
 35362                                  	pop     ax			;
 35363                                  	; 12/12/2022
 35364                                  	; cf=0
 35365                                  	;clc				; just do the command
 35366                                  	retn
 35367                                  
 35368                                  skip_cmd:
 35369                                  	pop     ax			;
 35370                                  skip_all:
 35371                                  	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 35372                                  	stc
 35373                                  	retn
 35374                                  
 35375                                  ;----------------------------------------------------------------------------
 35376                                  ;
 35377                                  ;   print_error: displays multi-config error conditions
 35378                                  ;
 35379                                  ;   INPUT
 35380                                  ;    Carry set to pause, clear to not
 35381                                  ;    ES:SI -> current command line in config.sys
 35382                                  ;
 35383                                  ;   OUTPUT
 35384                                  ;       None
 35385                                  ;
 35386                                  ;   OTHER REGS USED
 35387                                  ;       None
 35388                                  ;
 35389                                  ;   NOTES
 35390                                  ;       None
 35391                                  ;
 35392                                  ;   HISTORY
 35393                                  ;       Created 16-Mar-1992 by JeffPar
 35394                                  ;
 35395                                  ;----------------------------------------------------------------------------
 35396                                  
 35397                                  print_error:
 35398                                          push    ax
 35399                                          push    bx
 35400                                          push    cx
 35401                                          push    dx
 35402                                          push    ds
 35403                                          push    cs
 35404                                          pop     ds
 35405                                          pushf
 35406                                          call    get_linenum
 35407                                          mov     [linecount],bx
 35408                                          call    error_line
 35409                                          popf
 35410                                          jnc	short pe_ret
 35411                                          mov     dx,_$PauseMsg
 35412                                          call    print
 35413                                          mov     ax,0C07h		; flush input buffer, then wait for key
 35414                                          int     21h			; wait for a key
 35415                                          or      al,al			; extended key?
 35416                                          jnz	short pe_1		; no
 35417                                          mov     ah,07h			; yes
 35418                                          int     21h			; eat it too
 35419                                  pe_1:     
 35420                                  	mov     dx,crlfm
 35421                                          call    print
 35422                                  pe_ret: 
 35423                                  	pop     ds
 35424                                          pop     dx
 35425                                          pop     cx
 35426                                          pop     bx
 35427                                          pop     ax
 35428                                  	retn
 35429                                  
 35430                                  ;----------------------------------------------------------------------------
 35431                                  
 35432                                  ;   This function is very simple:  it merely prepends a "/D" to the
 35433                                  ;   command-line for the shell;  this (undocumented) switch disables
 35434                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 35435                                  ;   displayed when there's no AUTOEXEC.BAT.
 35436                                  
 35437                                  disable_autoexec:
 35438                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 35439                                  	; 17/04/2019 - Retro DOS v4.0
 35440                                  
 35441                                  	test	byte [bQueryOpt],4
 35442                                  	jz	short disable_exit
 35443                                  	test	byte [dae_flag],1
 35444                                  	jnz	short disable_exit
 35445                                  	or	byte [dae_flag],1
 35446                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 35447                                  	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 35448                                  	mov     dx,'D ' ; 2044h
 35449                                  dae_1:
 35450                                          ;mov	al,[def_swchr]
 35451                                  	mov     al,[command_line-1]     ; get default switchchar
 35452                                          or      al,al                   ; anything there?
 35453                                          jz	short disable_exit	; no, disable_autoexec already called
 35454                                          mov     bl,[command_line]       ;
 35455                                          mov     bh,0                    ; BX == command-line length
 35456                                          mov     cx,bx                   ;
 35457                                          add     bl,3                    ;
 35458                                          cmp     bl,126                  ;
 35459                                          ja	short disable_exit	;
 35460                                          mov     [command_line],bl       ; update length
 35461                                          add     bx,command_line+1	; make sure we move the NULL too
 35462                                          inc     cx                      ; (just for consistency sake)
 35463                                  disable_loop:                           ;
 35464                                          mov     ah,[bx-3]               ;
 35465                                          mov     [bx],ah                 ;
 35466                                          dec     bx                      ;
 35467                                          loop    disable_loop            ;
 35468                                          mov     [bx-2],al               ;
 35469                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 35470                                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 35471                                          ;mov	byte [command_line-1],0 ;
 35472                                  disable_exit:                           ;
 35473                                          retn
 35474                                  
 35475                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 35476                                  	cmp     byte [bQueryOpt],1
 35477                                  	jnz     short disable_exit
 35478                                  	test	byte [dae_flag],2
 35479                                  	jnz     short disable_exit
 35480                                  	or      byte [dae_flag],2
 35481                                  	mov     dx,' Y'
 35482                                  	jmp     short dae_1
 35483                                  
 35484                                  ;endif  ;MULTI_CONFIG
 35485                                  
 35486                                  %endif	; 02/11/2022
 35487                                  
 35488                                  
 35489                                  ; 19/04/2019 - Retro DOS v4.0
 35490                                  
 35491                                  ;----------------------------------------------------------------------------
 35492                                  ;
 35493                                  ; procedure : delim
 35494                                  ;
 35495                                  ;----------------------------------------------------------------------------
 35496                                  
 35497                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35498                                  ;
 35499                                  ;;ifdef	MULTI_CONFIG
 35500                                  ;
 35501                                  ;any_delim:
 35502                                  ;       cmp     al,cr
 35503                                  ;       je	short delim_ret
 35504                                  ;       cmp     al,lf
 35505                                  ;       je	short delim_ret
 35506                                  ;       cmp     al,'['
 35507                                  ;       je	short delim_ret
 35508                                  ;       cmp     al,']'
 35509                                  ;       je	short delim_ret
 35510                                  ;
 35511                                  ;;endif  ;MULTI_CONFIG
 35512                                  
 35513                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35514                                  	; (SYSINIT:3450h)	
 35515                                  delim:
 35516 00003045 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 35517 00003047 7416                    	je	short delim_ret
 35518                                  
 35519 00003049 3C00                    	cmp	al,0		; special case for sysinit!!!
 35520 0000304B 7412                    	je	short delim_ret
 35521                                  
 35522                                  org_delim:			; used by organize routine except for getting
 35523 0000304D 3C20                    	cmp	al,' '          ; the filename.
 35524 0000304F 740E                    	je	short delim_ret
 35525 00003051 3C09                            cmp     al,tab ; 9
 35526 00003053 740A                    	je	short delim_ret
 35527 00003055 3C3D                    	cmp	al,'='
 35528 00003057 7406                    	je	short delim_ret
 35529 00003059 3C2C                    	cmp	al,','
 35530 0000305B 7402                    	je	short delim_ret
 35531 0000305D 3C3B                    	cmp	al,';'
 35532                                  
 35533                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35534                                  ;;ifdef	MULTI_CONFIG
 35535                                  ;;   Make sure there's no chance of a false EOF indication
 35536                                  ;	clc
 35537                                  ;;endif
 35538                                  
 35539                                  	; 02/11/2022
 35540                                  delim_ret:
 35541 0000305F C3                      	retn
 35542                                  
 35543                                  ;----------------------------------------------------------------------------
 35544                                  ;
 35545                                  ; procedure : newline
 35546                                  ;
 35547                                  ;  newline returns with first character of next line
 35548                                  ;
 35549                                  ;----------------------------------------------------------------------------
 35550                                  
 35551                                  newline:
 35552 00003060 E89CF6                  	call	getchr			;skip non-control characters
 35553 00003063 7207                    	jc	short nl_ret
 35554 00003065 3C0A                    	cmp	al,lf			;look for line feed
 35555 00003067 75F7                    	jne	short newline
 35556 00003069 E893F6                  	call	getchr
 35557                                  nl_ret:
 35558 0000306C C3                      	retn
 35559                                  
 35560                                  ;----------------------------------------------------------------------------
 35561                                  ; 
 35562                                  ; procedure : mapcase
 35563                                  ;
 35564                                  ;----------------------------------------------------------------------------
 35565                                  
 35566                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 35567                                  mapcase:
 35568 0000306D 51                      	push	cx
 35569 0000306E 56                      	push	si
 35570 0000306F 1E                      	push	ds
 35571                                  
 35572 00003070 06                      	push	es
 35573 00003071 1F                      	pop	ds
 35574                                  
 35575                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35576                                  ;;ifdef	MULTI_CONFIG
 35577                                  ;
 35578                                  ;	mov	bl,al                   ; same cmd code this line
 35579                                  ;;else
 35580                                  ;;	xor	si,si
 35581                                  ;;endif
 35582                                  	; 02/11/2022
 35583 00003072 31F6                    	xor	si, si
 35584                                  
 35585                                  convloop:
 35586 00003074 AC                      	lodsb
 35587 00003075 3C61                    	cmp	al,'a'
 35588 00003077 7209                    	jb	short noconv
 35589 00003079 3C7A                    	cmp	al,'z'
 35590 0000307B 7705                    	ja	short noconv
 35591 0000307D 2C20                    	sub	al,20h
 35592 0000307F 8844FF                  	mov	[si-1],al
 35593                                  noconv:
 35594                                  
 35595                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35596                                  ;;ifdef	MULTI_CONFIG
 35597                                  ;;
 35598                                  ;;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 35599                                  ;;   upper-case a line at a time, after we've been able to figure out whether
 35600                                  ;;   the line is a SET command or not (since we don't want to upper-case
 35601                                  ;;   anything after the "=" in a SET)
 35602                                  ;;
 35603                                  ;       cmp     bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 35604                                  ;       jne	short check_eol		; no, just check for end-of-line
 35605                                  ;       cmp     al,'='                  ; separator between SET var and value?
 35606                                  ;       je	short convdone		; yes
 35607                                  ;check_eol:
 35608                                  ;       cmp     al,cr
 35609                                  ;       je	short convdone
 35610                                  ;       cmp     al,lf
 35611                                  ;       je	short convdone
 35612                                  ;;endif
 35613                                  	
 35614                                  	; 02/11/2022
 35615 00003082 E2F0                    	loop	convloop
 35616                                  convdone:
 35617 00003084 1F                      	pop	ds
 35618 00003085 5E                      	pop	si
 35619 00003086 59                      	pop	cx
 35620 00003087 C3                      	retn
 35621                                  
 35622                                  ;----------------------------------------------------------------------------
 35623                                  ;
 35624                                  ; procedure : round
 35625                                  ;
 35626                                  ; round the values in memlo and memhi to paragraph boundary.
 35627                                  ; perform bounds check.
 35628                                  ;
 35629                                  ;----------------------------------------------------------------------------
 35630                                  
 35631                                  round:
 35632 00003088 50                      	push	ax
 35633 00003089 2EA1[DE03]              	mov	ax,[cs:memlo]
 35634                                  
 35635 0000308D E830E0                  	call	ParaRound		; para round up
 35636                                  
 35637 00003090 2E0106[E003]            	add	[cs:memhi],ax
 35638 00003095 2EC706[DE03]0000        	mov	word [cs:memlo],0
 35639 0000309C 2EA1[E003]              	mov	ax,[cs:memhi]		; ax = new memhi
 35640 000030A0 2E3B06[A302]            	cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 35641 000030A5 7322                    	jae	short mem_err
 35642 000030A7 2EF606[3414]02          	test	byte [cs:setdevmarkflag],for_devmark ; 2
 35643 000030AD 7418                    	jz	short skip_set_devmarksize
 35644 000030AF 06                      	push	es
 35645 000030B0 56                      	push	si
 35646 000030B1 2E8B36[3214]            	mov	si,[cs:devmark_addr]
 35647 000030B6 8EC6                    	mov	es,si
 35648 000030B8 29F0                    	sub	ax,si
 35649 000030BA 48                      	dec	ax
 35650                                  	;mov	[es:3],ax
 35651 000030BB 26A30300                	mov	[es:devmark.size],ax	; paragraph
 35652 000030BF 2E8026[3414]FD          	and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 35653 000030C5 5E                      	pop	si
 35654 000030C6 07                      	pop	es
 35655                                  skip_set_devmarksize:
 35656 000030C7 58                      	pop	ax
 35657                                  	; 11/12/2022
 35658                                  	; cf = 0
 35659                                  	; 02/11/2022
 35660                                  	;clc	; ? (not needed here)	; clear carry
 35661 000030C8 C3                      	retn
 35662                                  
 35663                                  ;----------------------------------------------------------------------------
 35664                                  
 35665                                  mem_err:
 35666                                  	; 11/12/2022
 35667 000030C9 0E                      	push	cs
 35668 000030CA 1F                      	pop	ds
 35669                                  mem_err2:
 35670 000030CB BA[F137]                	mov	dx,badmem
 35671                                  	;push	cs
 35672                                  	;pop	ds
 35673 000030CE E87602                  	call	print
 35674 000030D1 E97FD7                  	jmp	stall
 35675                                  
 35676                                  ;----------------------------------------------------------------------------
 35677                                  ;
 35678                                  ; procedure : calldev
 35679                                  ;
 35680                                  ;----------------------------------------------------------------------------
 35681                                  
 35682                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35683                                  	; (SYSINIT:34E0h)
 35684                                  calldev:
 35685 000030D4 2E8E1E[B61E]            	mov	ds,[cs:DevEntry+2]
 35686 000030D9 2E031E[B41E]            	add	bx,[cs:DevEntry]	; do a little relocation
 35687 000030DE 8B07                    	mov	ax,[bx]
 35688                                  
 35689 000030E0 2EFF36[B41E]            	push	word [cs:DevEntry]
 35690 000030E5 2EA3[B41E]              	mov	word [cs:DevEntry],ax
 35691 000030E9 BB[E603]                	mov	bx,packet
 35692 000030EC 2EFF1E[B41E]            	call	far [cs:DevEntry]
 35693 000030F1 2E8F06[B41E]            	pop	word [cs:DevEntry]
 35694 000030F6 C3                      	retn
 35695                                  
 35696                                  ;----------------------------------------------------------------------------
 35697                                  ;
 35698                                  ; procedure : todigit
 35699                                  ;
 35700                                  ;----------------------------------------------------------------------------
 35701                                  
 35702                                  todigit:
 35703 000030F7 2C30                    	sub	al,'0'
 35704                                  	;jb	short notdig  ; 02/11/2022
 35705                                  	; 12/12/2022
 35706 000030F9 7203                    	jb	short notdig2
 35707                                  	;cmp	al,9
 35708                                  	;ja	short notdig
 35709                                  	;clc
 35710                                  	;retn
 35711                                  	; 12/12/2022
 35712 000030FB 3C0A                    	cmp	al,10
 35713 000030FD F5                      	cmc
 35714                                  notdig:
 35715                                  	;stc
 35716                                  notdig2:
 35717 000030FE C3                      	retn
 35718                                  
 35719                                  ;----------------------------------------------------------------------------
 35720                                  ;
 35721                                  ; procedure : getnum
 35722                                  ;
 35723                                  ; getnum parses a decimal number.
 35724                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 35725                                  ; error), if number is bad carry is set, zero is set, ax=0.
 35726                                  ;
 35727                                  ;----------------------------------------------------------------------------
 35728                                  
 35729                                  getnum:
 35730 000030FF 53                      	push	bx
 35731 00003100 31DB                    	xor	bx,bx			; running count is zero
 35732                                  b2:
 35733 00003102 E8F2FF                  	call	todigit 		; do we have a digit ?
 35734 00003105 7247                    	jc	short badnum		; no, bomb
 35735                                  
 35736 00003107 93                      	xchg	ax,bx			; put total in ax
 35737 00003108 53                      	push	bx			; save digit (0 to 9)
 35738                                  	;mov	bx,10			; base of arithmetic
 35739                                  	; 12/12/2022
 35740 00003109 B30A                    	mov	bl,10
 35741 0000310B F7E3                    	mul	bx			; shift by one decimal digit
 35742 0000310D 5B                      	pop	bx			; get back digit (0 to 9)
 35743 0000310E 00D8                    	add	al,bl			; get total
 35744 00003110 80D400                  	adc	ah,0			; make that 16 bits
 35745 00003113 7239                    	jc	short badnum		; too big a number
 35746                                  
 35747 00003115 93                      	xchg	ax,bx			; stash total
 35748                                  
 35749 00003116 E8E6F5                  	call	getchr			;get next digit
 35750 00003119 722D                    	jc	short b1		; no more characters
 35751 0000311B 3C20                    	cmp	al,' ' 			; space?
 35752 0000311D 741F                    	je	short b15		; then end of digits
 35753 0000311F 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 35754 00003121 741B                    	je	short b15		; then end of digits.
 35755 00003123 3C09                    	cmp	al, tab ; 9		; tab
 35756 00003125 7417                    	je	short b15
 35757 00003127 2E3A06[2A03]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 35758 0000312C 7410                    	je	short b15
 35759 0000312E 3C2F                    	cmp	al,'/'			; see if another switch follows
 35760                                  	;nop				; cas - remnant of old bad code
 35761                                  	;nop
 35762                                  	; 12/12/2022
 35763                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35764                                  	;nop
 35765                                  	;nop
 35766 00003130 740C                    	je	short b15
 35767 00003132 3C0A                    	cmp	al,lf			; line-feed?
 35768 00003134 7408                    	je	short b15
 35769 00003136 3C0D                    	cmp	al,cr			; carriage return?
 35770 00003138 7404                    	je	short b15
 35771 0000313A 08C0                    	or	al,al			; end of line separator?
 35772 0000313C 75C4                    	jnz	short b2		; no, try as a valid char...
 35773                                  b15:
 35774 0000313E 2EFF06[D203]            	inc	word [cs:count]		; one more character to s...
 35775 00003143 2EFF0E[D603]            	dec	word [cs:chrptr]	; back up over separator
 35776                                  b1:
 35777 00003148 89D8                    	mov	ax,bx			; get proper count
 35778 0000314A 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 35779 0000314C 5B                      	pop	bx
 35780 0000314D C3                      	retn
 35781                                  badnum:
 35782                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35783                                  	;mov	byte [cs:sepchr],0
 35784 0000314E 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 35785                                  	; 12 /12/2022
 35786 00003150 2EA2[2A03]              	mov	[cs:sepchr],al ; 0
 35787 00003154 5B                      	pop	bx
 35788 00003155 F9                      	stc				; and carry set
 35789 00003156 C3                      	retn
 35790                                  
 35791                                  ;****************************************************************************
 35792                                  
 35793                                  setdoscountryinfo:
 35794                                  
 35795                                  ;----------------------------------------------------------------------------
 35796                                  ;input: es:di -> pointer to dos_country_cdpg_info
 35797                                  ;	ds:0  -> buffer.
 35798                                  ;	si = 0
 35799                                  ;	ax = country id
 35800                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 35801                                  ;	bx = file handle
 35802                                  ;	this routine can handle maximum 438 country_data entries.
 35803                                  ;
 35804                                  ;output: dos_country_cdpg_info set.
 35805                                  ;	 carry set if any file read failure or wrong information in the file.
 35806                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 35807                                  ;	 codepage_id in the file.
 35808                                  ;----------------------------------------------------------------------------
 35809                                  
 35810 00003157 57                      	push	di
 35811 00003158 50                      	push	ax
 35812 00003159 52                      	push	dx
 35813                                  
 35814 0000315A 31C9                    	xor	cx,cx
 35815 0000315C 31D2                    	xor	dx,dx
 35816 0000315E B80002                  	mov	ax,512			;read 512 bytes
 35817 00003161 E84F01                  	call	readincontrolbuffer	;read the file header
 35818 00003164 724D                    	jc	short setdosdata_fail
 35819                                  
 35820 00003166 06                      	push	es
 35821 00003167 56                      	push	si
 35822                                  
 35823 00003168 0E                      	push	cs
 35824 00003169 07                      	pop	es
 35825                                  
 35826 0000316A BF[1334]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 35827 0000316D B90800                  	mov	cx,8			;length of the signature
 35828 00003170 F3A6                    	repz	cmpsb
 35829                                  
 35830 00003172 5E                      	pop	si
 35831 00003173 07                      	pop	es
 35832 00003174 753D                    	jnz	short setdosdata_fail 	;signature mismatch
 35833                                  
 35834 00003176 83C612                  	add	si,18			;si -> county info type
 35835 00003179 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 35836 0000317C 7535                    	jne	short setdosdata_fail 	;cannot proceed. error return
 35837                                  
 35838 0000317E 46                      	inc	si			;si -> file offset
 35839 0000317F 8B14                    	mov	dx,[si]			;get the info file offset.
 35840 00003181 8B4C02                  	mov	cx,[si+2]
 35841 00003184 B80018                  	mov	ax,6144			;read 6144 bytes.
 35842 00003187 E82901                  	call	readincontrolbuffer	;read info
 35843 0000318A 7227                    	jc	short setdosdata_fail
 35844                                  
 35845 0000318C 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 35846 0000318E 81F9B601                	cmp	cx, 438			;cannot handle more than 438 entries.
 35847 00003192 771F                    	ja	short setdosdata_fail
 35848                                  
 35849 00003194 46                      	inc	si
 35850 00003195 46                      	inc	si			;si -> entry information packet
 35851 00003196 5A                      	pop	dx			;restore code page id
 35852 00003197 58                      	pop	ax			;restore country id
 35853 00003198 5F                      	pop	di
 35854                                  
 35855                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 35856 00003199 3B4402                  	cmp	ax,[si+2]		;compare country_id
 35857 0000319C 750A                    	jne	short setdoscntry_next
 35858                                  
 35859 0000319E 83FA00                  	cmp	dx,0			;no user specified code page ?
 35860 000031A1 7415                    	je	short setdoscntry_any_codepage ;then no need to match code page id.
 35861 000031A3 3B5404                  	cmp	dx,[si+4]		;compare code page id
 35862 000031A6 7413                    	je	short setdoscntry_got_it
 35863                                  
 35864                                  setdoscntry_next:
 35865 000031A8 0334                    	add	si,[si]			;next entry
 35866 000031AA 46                      	inc	si
 35867 000031AB 46                      	inc	si			;take a word for size of entry itself
 35868 000031AC E2EB                    	loop	setdoscntry_find
 35869                                  
 35870 000031AE B9FFFF                  	mov	cx,-1			;signals that bad country id entered.
 35871                                  setdoscntry_fail:
 35872 000031B1 F9                      	stc
 35873 000031B2 C3                      	retn
 35874                                  
 35875                                  setdosdata_fail:
 35876 000031B3 5E                      	pop	si
 35877 000031B4 59                      	pop	cx
 35878 000031B5 5F                      	pop	di
 35879 000031B6 EBF9                    	jmp	short setdoscntry_fail
 35880                                  
 35881                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 35882 000031B8 8B5404                  	mov	dx,[si+4]
 35883                                  
 35884                                  setdoscntry_got_it:			;found the matching entry
 35885 000031BB 2E8916[1B34]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 35886 000031C0 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 35887 000031C3 8B4C0C                  	mov	cx,[si+12]
 35888 000031C6 B80002                  	mov	ax,512 			;read 512 bytes
 35889 000031C9 E8E700                  	call	readincontrolbuffer
 35890 000031CC 72E3                    	jc	short setdoscntry_fail
 35891                                  
 35892 000031CE 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 35893 000031D0 46                      	inc	si
 35894 000031D1 46                      	inc	si			;si -> first entry
 35895                                  
 35896                                  setdoscntry_data:
 35897 000031D2 57                      	push	di			;es:di -> dos_country_cdpg_info
 35898 000031D3 51                      	push	cx			;save # of entry left
 35899 000031D4 56                      	push	si			;si -> current entry in control buffer
 35900                                  
 35901 000031D5 8A4402                  	mov	al,[si+2]		;get data entry id
 35902 000031D8 E8AA00                  	call	getcountrydestination	;get the address of destination in es:di
 35903 000031DB 727D                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 35904                                  
 35905 000031DD 8B5404                  	mov	dx,[si+4]		;get offset of data
 35906 000031E0 8B4C06                  	mov	cx,[si+6]
 35907 000031E3 B80042                  	mov	ax,4200h
 35908 000031E6 F9                      	stc
 35909 000031E7 CD21                    	int	21h			;move pointer
 35910 000031E9 72C8                    	jc	short setdosdata_fail
 35911                                  
 35912 000031EB BA0002                  	mov	dx,512			;start of data buffer
 35913 000031EE B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 35914 000031F1 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 35915 000031F3 F9                      	stc
 35916 000031F4 CD21                    	int	21h			;read the country.sys data
 35917 000031F6 72BB                    	jc	short setdosdata_fail 	;read failure
 35918                                  
 35919 000031F8 39C8                    	cmp	ax,cx
 35920 000031FA 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 35921                                  
 35922 000031FC 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 35923 000031FF 8B4C06                  	mov	cx,[si+6]
 35924 00003202 B80042                  	mov	ax,4200h
 35925 00003205 F9                      	stc
 35926 00003206 CD21                    	int	21h			;move pointer back again
 35927 00003208 72A9                    	jc	short setdosdata_fail
 35928                                  
 35929 0000320A 56                      	push	si
 35930 0000320B BE0802                  	mov	si,(512+8)		;get length of the data from the file
 35931 0000320E 8B0C                    	mov	cx,[si]
 35932 00003210 5E                      	pop	si
 35933 00003211 BA0002                  	mov	dx,512			;start of data buffer
 35934 00003214 83C10A                  	add	cx,10			;signature + a word for the length itself
 35935 00003217 B43F                    	mov	ah,3Fh			;read the data from the file.
 35936 00003219 F9                      	stc
 35937 0000321A CD21                    	int	21h
 35938 0000321C 7295                    	jc	short setdosdata_fail
 35939                                  
 35940 0000321E 39C8                    	cmp	ax,cx
 35941 00003220 7591                    	jne	short setdosdata_fail
 35942                                  
 35943 00003222 8A4402                  	mov	al,[si+2]		;save data id for future use.
 35944 00003225 BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 35945 00003228 8B0C                    	mov	cx,[si]			;get the length of the file
 35946 0000322A 41                      	inc	cx			;take care of a word for lenght of tab
 35947 0000322B 41                      	inc	cx			;itself.
 35948 0000322C 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 35949 00003230 7781                    	ja	short setdosdata_fail
 35950                                  
 35951                                  	;if	bugfix
 35952 00003232 E83500                  	call	setdbcs_before_copy
 35953                                  	;endif
 35954                                  
 35955 00003235 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 35956 00003237 7512                    	jne	short setdoscntry_mov 	;no, don't worry
 35957                                  
 35958 00003239 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 35959                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 35960 0000323D 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 35961                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 35962                                  	
 35963 00003241 57                      	push	di			;save di
 35964                                  
 35965 00003242 50                      	push	ax
 35966 00003243 2EA1[1B34]              	mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 35967 00003247 894404                  	mov	[si+4],ax		;use the saved one for this !!!!
 35968 0000324A 58                      	pop	ax
 35969                                  
 35970                                  setdoscntry_mov:
 35971 0000324B F3A4                    	rep	movsb			;copy the table into dos
 35972 0000324D 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 35973 0000324F 7509                    	jne	short setdoscntry_data_next
 35974                                  
 35975 00003251 5F                      	pop	di			;restore di
 35976 00003252 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 35977                                  	;pop	word [es:di+26]		;restore
 35978 00003256 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 35979                                  	;pop	word [es:di+24]
 35980                                  
 35981                                  setdoscntry_data_next:
 35982 0000325A 5E                      	pop	si			;restore control buffer pointer
 35983 0000325B 59                      	pop	cx			;restore # of entries left
 35984 0000325C 5F                      	pop	di			;restore pointer to dso_country_cdpg
 35985 0000325D 0334                    	add	si,[si]			;try to get the next entry
 35986 0000325F 46                      	inc	si
 35987 00003260 46                      	inc	si			;take a word of entry length itself
 35988 00003261 49                      	dec	cx
 35989 00003262 83F900                  	cmp	cx,0
 35990 00003265 741D                    	je	short setdoscntry_ok
 35991 00003267 E968FF                  	jmp	setdoscntry_data
 35992                                  
 35993                                  	; 18/12/2022
 35994                                  ;setdoscntry_ok:
 35995                                  	;retn
 35996                                  
 35997                                  ;----------------------------------------------------------------------------
 35998                                  
 35999                                  	;if	bugfix
 36000                                  
 36001                                  setdbcs_before_copy:
 36002 0000326A 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 36003 0000326C 7516                    	jne	short sdbcsbc		; jump if not
 36004 0000326E 26833D00                	cmp	word [es:di],0		; zero byte data block?
 36005 00003272 7410                    	je	short sdbcsbc		; jump if so
 36006                                  
 36007 00003274 57                      	push	di
 36008 00003275 50                      	push	ax
 36009 00003276 51                      	push	cx
 36010 00003277 268B0D                  	mov	cx,[es:di]		; load block length
 36011 0000327A 83C702                  	add	di,2			; points actual data
 36012 0000327D 30C0                    	xor	al,al			; fill bytes
 36013 0000327F F3AA                    	rep	stosb			; clear data block
 36014 00003281 59                      	pop	cx
 36015 00003282 58                      	pop	ax
 36016 00003283 5F                      	pop	di
 36017                                  sdbcsbc:
 36018                                  setdoscntry_ok:	; 18/12/2022	
 36019 00003284 C3                      	retn
 36020                                  
 36021                                  	;endif
 36022                                  
 36023                                  ;----------------------------------------------------------------------------
 36024                                  
 36025                                  getcountrydestination:
 36026                                  
 36027                                  ;get the destination address in the dos country info table.
 36028                                  ;input: al - data id
 36029                                  ;	es:di -> dos_country_cdpg_info
 36030                                  ;on return:
 36031                                  ;	es:di -> destination address of the matching data id
 36032                                  ;	carry set if no matching data id found in dos.
 36033                                  
 36034 00003285 51                      	push	cx
 36035                                  	;add	di,74
 36036 00003286 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 36037                                  					;skip the reserved area, syscodepage etc.
 36038 00003289 268B0D                  	mov	cx,[es:di]		;get the number of entries
 36039 0000328C 47                      	inc	di
 36040 0000328D 47                      	inc	di			;si -> the first start entry id
 36041                                  
 36042                                  getcntrydest:
 36043 0000328E 263805                  	cmp	byte [es:di],al
 36044 00003291 7413                    	je	short getcntrydest_ok
 36045 00003293 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 36046 00003297 7405                    	je	short getcntrydest_1
 36047                                  
 36048 00003299 83C705                  	add	di,5			;next data id
 36049 0000329C EB03                    	jmp	short getcntrydest_loop
 36050                                  
 36051                                  getcntrydest_1:
 36052                                  	;add	di,41
 36053 0000329E 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 36054                                  getcntrydest_loop:
 36055 000032A1 E2EB                    	loop	getcntrydest
 36056 000032A3 F9                      	stc
 36057 000032A4 EB0B                    	jmp	short getcntrydest_exit
 36058                                  
 36059                                  getcntrydest_ok:
 36060 000032A6 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 36061 000032A8 7503                    	jne	short getcntrydest_ok1
 36062                                  
 36063 000032AA 47                      	inc	di			;now di -> cccountryinfolen
 36064 000032AB EB04                    	jmp	short getcntrydest_exit
 36065                                  
 36066                                  getcntrydest_ok1:
 36067 000032AD 26C47D01                	les	di,[es:di+1]		;get the destination in es:di
 36068                                  
 36069                                  getcntrydest_exit:
 36070 000032B1 59                      	pop	cx
 36071 000032B2 C3                      	retn
 36072                                  
 36073                                  ;----------------------------------------------------------------------------
 36074                                  
 36075                                  readincontrolbuffer:
 36076                                  
 36077                                  ;move file pointer to cx:dx
 36078                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 36079                                  ;si will be set to 0 hence ds:si points to the control buffer.
 36080                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 36081                                  ;	 be moved.
 36082                                  ;	 ax - # of bytes to read
 36083                                  ;	 bx - file handle
 36084                                  ;	 ds - buffer seg.
 36085                                  ;return: the control data information is read into ds:0 - ds:0200.
 36086                                  ;	 cx,dx value destroyed.
 36087                                  ;	 carry set if error in reading file.
 36088                                  
 36089 000032B3 50                      	push	ax			;# of bytes to read
 36090 000032B4 B80042                  	mov	ax,4200h
 36091 000032B7 F9                      	stc
 36092 000032B8 CD21                    	int	21h			;move pointer
 36093 000032BA 59                      	pop	cx			;# of bytes to read
 36094 000032BB 7209                    	jc	short ricb_exit
 36095                                  
 36096 000032BD 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 36097 000032BF 31F6                    	xor	si,si
 36098 000032C1 B43F                    	mov	ah,3Fh			;read into the buffer
 36099 000032C3 F9                      	stc
 36100 000032C4 CD21                    	int	21h			;should be less than 1024 bytes.
 36101                                  ricb_exit:
 36102 000032C6 C3                      	retn
 36103                                  
 36104                                  ;----------------------------------------------------------------------------
 36105                                  
 36106                                  set_country_path:
 36107                                  
 36108                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 36109                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 36110                                  ;     assumes current directory is the root directory.
 36111                                  ;out: ds:di -> full path (cntry_drv).
 36112                                  ;     set the cntry_drv string from the country=,,path command.
 36113                                  ;     ds, es, si value saved.
 36114                                  
 36115 000032C7 56                      	push	si
 36116                                  
 36117 000032C8 1E                      	push	ds			;switch ds, es
 36118 000032C9 06                      	push	es
 36119 000032CA 1F                      	pop	ds
 36120 000032CB 07                      	pop	es			;now ds -> confbot, es -> sysinitseg
 36121                                  
 36122 000032CC E82E00                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 36123 000032CF 7206                    	jc	short scp_default_drv 	;no, use current default drive.
 36124                                  
 36125 000032D1 8A04                    	mov	al,[si]
 36126 000032D3 46                      	inc	si
 36127 000032D4 46                      	inc	si			;si -> next char after ":"
 36128 000032D5 EB06                    	jmp	short scp_setdrv
 36129                                  
 36130                                  scp_default_drv:
 36131 000032D7 B419                    	mov	ah,19h
 36132 000032D9 CD21                    	int	21h
 36133 000032DB 0441                    	add	al,"A"			;convert it to a character.
 36134                                  
 36135                                  scp_setdrv:
 36136 000032DD 2EA2[D033]              	mov	[cs:cntry_drv],al	;set the drive letter.
 36137 000032E1 BF[D333]                	mov	di,cntry_path
 36138 000032E4 8A04                    	mov	al,[si]
 36139 000032E6 3C5C                    	cmp	al, "\"
 36140 000032E8 7406                    	je	short scp_root_dir
 36141                                  
 36142 000032EA 3C2F                    	cmp	al,"/"			;let's accept "/" as an directory delim
 36143 000032EC 7402                    	je	short scp_root_dir
 36144                                  
 36145 000032EE EB01                    	jmp	short scp_path
 36146                                  
 36147                                  scp_root_dir:
 36148 000032F0 4F                      	dec	di			;di -> cntry_root
 36149                                  scp_path:
 36150 000032F1 E81F00                  	call	move_asciiz		;copy it
 36151                                  
 36152 000032F4 BF[D033]                	mov	di,cntry_drv
 36153                                  scpath_exit:
 36154                                  
 36155 000032F7 1E                      	push	ds			;switch ds, es
 36156 000032F8 06                      	push	es
 36157 000032F9 1F                      	pop	ds
 36158 000032FA 07                      	pop	es			;ds, es value restored
 36159                                  
 36160 000032FB 5E                      	pop	si
 36161 000032FC C3                      	retn
 36162                                  
 36163                                  ;----------------------------------------------------------------------------
 36164                                  
 36165                                  chk_drive_letter:
 36166                                  
 36167                                  ;check if ds:[si] is a drive letter followed by ":".
 36168                                  ;assume that every alpha character is already converted to upper case.
 36169                                  ;carry set if not.
 36170                                  
 36171 000032FD 50                      	push	ax
 36172 000032FE 803C41                  	cmp	byte [si],"A"
 36173                                  	;jb	short cdletter_no
 36174 00003301 720E                    	jb	short cdletter_exit
 36175 00003303 803C5A                  	cmp	byte [si],"Z"
 36176 00003306 7708                    	ja	short cdletter_no
 36177 00003308 807C013A                	cmp	byte [si+1],":"
 36178 0000330C 7502                    	jne	short cdletter_no
 36179                                  
 36180 0000330E EB01                    	jmp	short cdletter_exit
 36181                                  
 36182                                  cdletter_no:
 36183 00003310 F9                      	stc
 36184                                  cdletter_exit:
 36185 00003311 58                      	pop	ax
 36186 00003312 C3                      	retn
 36187                                  
 36188                                  ;----------------------------------------------------------------------------
 36189                                  
 36190                                  move_asciiz:
 36191                                  
 36192                                  ;in: ds:si -> source es:di -> target
 36193                                  ;out: copy the string until 0.
 36194                                  ;assumes there exists a 0.
 36195                                  
 36196                                  masciiz_loop:
 36197 00003313 A4                      	movsb
 36198 00003314 807CFF00                	cmp	byte [si-1],0	; was it 0?
 36199 00003318 75F9                    	jne	short masciiz_loop
 36200 0000331A C3                      	retn
 36201                                  
 36202                                  ;----------------------------------------------------------------------------
 36203                                  
 36204                                  ;	ds:dx points to string to output (asciz)
 36205                                  ;
 36206                                  ;	prints <badld_pre> <string> <badld_post>
 36207                                  
 36208                                  badfil:
 36209 0000331B 0E                      	push	cs
 36210 0000331C 07                      	pop	es
 36211                                  
 36212 0000331D 89D6                    	mov	si,dx
 36213                                  badload:
 36214 0000331F BA[5B37]                	mov	dx,badld_pre	; want to print config error
 36215 00003322 BB[1837]                	mov	bx,crlfm
 36216                                  prnerr:
 36217 00003325 0E                      	push	cs
 36218 00003326 1F                      	pop	ds ; *
 36219 00003327 E81D00                  	call	print
 36220                                  prn1:
 36221 0000332A 268A14                  	mov	dl,[es:si]
 36222 0000332D 08D2                    	or	dl,dl
 36223 0000332F 7407                    	jz	short prn2
 36224 00003331 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 36225 00003333 CD21                    	int	21h
 36226 00003335 46                      	inc	si
 36227 00003336 EBF2                    	jmp	short prn1
 36228                                  prn2:
 36229 00003338 89DA                    	mov	dx,bx
 36230 0000333A E80A00                  	call	print
 36231                                  	; 11/12/2022
 36232                                  	; ds = cs ; *
 36233 0000333D 803E[D103]01            	cmp	byte [donotshownum],1 ; suppress line number when handling command.com
 36234                                  	;cmp	byte [cs:donotshownum],1 
 36235 00003342 7407                    	je	short prnexit
 36236                                  	
 36237                                  	; 18/12/2022
 36238                                  	;call	error_line
 36239 00003344 E9CFF3                  	jmp	error_line
 36240                                  ;prnexit:
 36241                                  	;retn
 36242                                  
 36243                                  ;----------------------------------------------------------------------------
 36244                                  
 36245                                  print:
 36246 00003347 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 36247 00003349 CD21                    	int	21h
 36248                                  prnexit:	; 18/12/2022
 36249 0000334B C3                      	retn
 36250                                  
 36251                                  ;----------------------------------------------------------------------------
 36252                                  
 36253                                  ;  open device pointed to by dx, al has access code
 36254                                  ;   if unable to open do a device open null device instead
 36255                                  
 36256                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36257                                  	; (SYSINIT:3764h)
 36258                                  open_dev:
 36259 0000334C E80500                  	call	open_file
 36260 0000334F 7309                    	jnc	short open_dev3
 36261                                  
 36262                                  open_dev1:
 36263 00003351 BA[B433]                	mov	dx,nuldev
 36264                                  	; 18/12/2022
 36265                                  	;call	open_file
 36266                                  ;of_retn:
 36267                                  	;retn
 36268                                  	; 18/12/2022
 36269                                  	;jmp	short open_file
 36270                                  open_file:
 36271 00003354 B43D                    	mov	ah,OPEN	; 3Dh
 36272 00003356 F9                      	stc
 36273 00003357 CD21                    	int	21h
 36274                                  of_retn:	; 18/12/2022
 36275 00003359 C3                      	retn
 36276                                  
 36277                                  open_dev3:
 36278 0000335A 89C3                    	mov	bx,ax			; handle from open to bx
 36279                                  	;;xor	ax,ax			; get device info
 36280                                  	;;mov	ah,IOCTL ; 44h
 36281                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 36282                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36283                                  	;xor	ax,ax
 36284                                  	;mov	ah,44h	; IOCTL
 36285                                  	; 11/12/2022
 36286 0000335C B80044                  	mov	ax,4400h ; IOCTL<<8 
 36287                                  
 36288 0000335F CD21                    	int	21h
 36289                                  
 36290 00003361 F6C280                  	test	dl,10000000b ; 80h
 36291 00003364 75F3                    	jnz	short of_retn
 36292                                  
 36293 00003366 B43E                    	mov	ah,CLOSE ; 3Eh
 36294 00003368 CD21                    	int	21h
 36295 0000336A EBE5                    	jmp	short open_dev1
 36296                                  
 36297                                  ;----------------------------------------------------------------------------
 36298                                  
 36299                                  ; 18/12/2022
 36300                                  %if 0
 36301                                  open_file:
 36302                                  	mov	ah,OPEN	; 3Dh
 36303                                  	stc
 36304                                  	int	21h
 36305                                  	retn
 36306                                  %endif
 36307                                  
 36308                                  ;----------------------------------------------------------------------------
 36309                                  
 36310                                  ; test int24. return back to dos with the fake user response of "fail"
 36311                                  
 36312                                  int24:
 36313 0000336C B003                    	mov	al,3			; fail the system call
 36314 0000336E CF                      	iret				; return back to dos.
 36315                                  
 36316                                  ; 19/04/2019 - Retro DOS v4.0
 36317                                  
 36318                                  ;----------------------------------------------------------------------------
 36319                                  ; DATA
 36320                                  ;----------------------------------------------------------------------------
 36321                                  
 36322                                  ;include copyrigh.inc			; copyright statement
 36323                                  
 36324                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 36325                                  
 36326                                  ;MsDosVersion6Copyr:
 36327                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 36328                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 36329                                  
 36330                                  ; 22/10/2022
 36331                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 36332                                  
 36333                                  ; 28/12/2022
 36334                                  %if 0
 36335                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36336                                  MsDosVersion5Copyr:
 36337                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 36338                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 36339                                  %endif
 36340                                  
 36341                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36342                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36343                                  ; 20/04/2019 - Retro DOS v4.0
 36344                                  ;BOOTMES:
 36345                                  ;	db      13
 36346                                  ;	db      10
 36347                                  ;	db      "MS-DOS version "
 36348                                  ;	db      MAJOR_VERSION + "0"
 36349                                  ;	db      "."
 36350                                  ;	db      (MINOR_VERSION / 10) + "0"
 36351                                  ;	db      (MINOR_VERSION % 10) + "0"
 36352                                  ;	db      13,10
 36353                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 36354                                  ;	; 22/10/2022
 36355                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 36356                                  ;	;
 36357                                  ;	db	0
 36358                                  
 36359                                  	; 12/12/2022
 36360 0000336F 00                      	db	0
 36361                                  ; 12/12/2022
 36362                                  BOOTMES:
 36363 00003370 0D0A                    	db	13,10
 36364                                  	;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 36365                                  	; 28/12/2022
 36366 00003372 526574726F20444F53-     	db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 36366 0000337B 2076342E3120284D6F-
 36366 00003384 646966696564204D53-
 36366 0000338D 444F5320352E302920 
 36367 00003396 0D0A                    	db	13,10
 36368                                  	;db	"by Erdogan Tan [2022] "
 36369 00003398 6279204572646F6761-     	db	"by Erdogan Tan [2023] " ; 04/01/2023
 36369 000033A1 6E2054616E205B3230-
 36369 000033AA 32335D20           
 36370 000033AE 0D0A                    	db	13,10
 36371 000033B0 0D0A2400                	db	13,10,"$",0
 36372                                  
 36373 000033B4 4E554C00                nuldev:	db	"NUL",0
 36374 000033B8 434F4E00                condev:	db	"CON",0
 36375 000033BC 41555800                auxdev:	db	"AUX",0
 36376 000033C0 50524E00                prndev:	db	"PRN",0
 36377                                  
 36378                                  ;IFDEF	CONFIGPROC
 36379 000033C4 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 36379 000033CD 595300             
 36380                                  
 36381 000033D0 413A                    cntry_drv:  db	"A:"
 36382 000033D2 5C                      cntry_root: db	"\"
 36383 000033D3 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 36383 000033DC 595300             
 36384                                  	    ;db	52 dup (0)
 36385 000033DF 00<rep 34h>             	    times 52 db 0	
 36386                                  
 36387                                  country_file_signature:
 36388 00003413 FF434F554E545259        	db	0FFh,'COUNTRY'
 36389                                  
 36390                                  cntrycodepage_id: 
 36391 0000341B 0000                    	dw	0 	
 36392                                  
 36393                                  ;ENDIF ; CONFIGPROC
 36394                                  
 36395                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36396                                  ;;ifdef	MULTI_CONFIG
 36397                                  ;newcmd:  db	0			; non-zero if non-std shell specified
 36398                                  ;tmplate: db	64                      ; must precede commnd
 36399                                  ;;endif
 36400                                  	; 02/11/2022
 36401                                  	;db	12                      ; size of commnd line (excl. null)
 36402                                  
 36403 0000341D 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 36403 00003426 434F4D00           
 36404                                  	;db	51 dup (0)
 36405 0000342A 00<rep 33h>             	times	51 db 0
 36406                                  ;endif
 36407                                  
 36408                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36409                                  ;;ifdef	MULTI_CONFIG
 36410                                  ;commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 36411                                  ;	 db	2,"/P",0 		; followed by their respective alternate
 36412                                  ;commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 36413                                  ;	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 36414                                  ;commnd4: db	"\DOS\COMMAND.COM",0 	;
 36415                                  ;	 db	9,"A:\DOS /P",0		;
 36416                                  ;def_swchr:	
 36417                                  ;	 db	0			; default switchchar (referenced as command_line-1)
 36418                                  ;;endif
 36419                                  
 36420                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36421                                  ;command_line:
 36422                                  ;	db	2,"/P"			; default command.com args
 36423                                  ;	;db	125 dup (0)
 36424                                  ;	times	125 db 0
 36425                                  
 36426                                  pathstring:
 36427                                  	;db	64 dup (0)
 36428 0000345D 00<rep 40h>             	times	64 db 0
 36429                                  
 36430                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36431                                  %if 0
 36432                                  
 36433                                  dae_flag:
 36434                                  	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 36435                                  
 36436                                  ;ifdef	MULTI_CONFIG
 36437                                  
 36438                                  MAX_MULTI_CONFIG equ 10
 36439                                  
 36440                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 36441                                  
 36442                                  bMenuColor:	db      07h ;1Fh        ; default fgnd/bgnd color
 36443                                  bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 36444                                  		db      5               ; video page function # (KEEP AFTER bMenuPage)
 36445                                  bLastCol:	db      0               ; ending column on status line
 36446                                  bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 36447                                  bDisableUI:	db      0               ; 1=disable clean/interactive
 36448                                                                          ; 2=disable default 2-second delay
 36449                                  bCRTPage:	db      0               ; value saved from BIOS data area
 36450                                  wCRTStart:	dw      0               ; value saved from BIOS data area
 36451                                  bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 36452                                  bDefBlock:	db      1               ; default block #
 36453                                  bMaxBlock:	db      0               ; maxmimum block #
 36454                                  offDefBlock:	dw      0               ; offset of name of default block (if any)
 36455                                  secTimeOut:	db      -1              ; # of seconds for timeout (-1 == indefinite)
 36456                                  secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 36457                                  abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 36458                                  aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 36459                                  aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 36460                                  
 36461                                  szBoot:		db      "CONFIG=",0
 36462                                  szMenu:		db      "MENU",0
 36463                                  szCommon:	db      "COMMON",0
 36464                                  
 36465                                  ;endif	;MULTI_CONFIG
 36466                                  
 36467                                  comtab:	 ; label byte
 36468                                  
 36469                                  ;            cmd len    command         cmd code
 36470                                  ;            -------    -------         --------
 36471                                  
 36472                                  ;ifdef MULTI_CONFIG
 36473                                          db      1,      "[",            CONFIG_BEGIN
 36474                                  ;endif
 36475                                          db      5,      "BREAK",        CONFIG_BREAK
 36476                                          db      7,      "BUFFERS",      CONFIG_BUFFERS
 36477                                          db      7,      "COMMENT",      CONFIG_COMMENT
 36478                                          db      7,      "COUNTRY",      CONFIG_COUNTRY
 36479                                          db      6,      "DEVICE",       CONFIG_DEVICE
 36480                                          db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36481                                          db      3,      "DOS",          CONFIG_DOS
 36482                                          db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36483                                          db      4,      "FCBS",         CONFIG_FCBS
 36484                                          db      5,      "FILES",        CONFIG_FILES
 36485                                  ;ifdef MULTI_CONFIG
 36486                                          db      7,      "INCLUDE",      CONFIG_INCLUDE
 36487                                  ;endif
 36488                                          db      7,      "INSTALL",      CONFIG_INSTALL
 36489                                          db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 36490                                          db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36491                                  ;ifdef MULTI_CONFIG
 36492                                          db      7,      "SUBMENU",      CONFIG_SUBMENU
 36493                                          db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 36494                                          db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 36495                                          db      8,      "MENUITEM",     CONFIG_MENUITEM
 36496                                  ;endif
 36497                                          db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36498                                  ;ifdef MULTI_CONFIG
 36499                                          db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 36500                                  ;endif
 36501                                          db      3,      "REM",          CONFIG_REM
 36502                                  ;ifdef MULTI_CONFIG
 36503                                          db      3,      "SET",          CONFIG_SET
 36504                                  ;endif
 36505                                          db      5,      "SHELL",        CONFIG_SHELL
 36506                                  ;if    STACKSW
 36507                                          db      6,      "STACKS",       CONFIG_STACKS
 36508                                  ;endif
 36509                                          db      8,      "SWITCHES",     CONFIG_SWITCHES
 36510                                  	db	0
 36511                                  %endif
 36512                                  
 36513                                  comtab:
 36514                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36515                                  	; (SYSINIT:38EDh)
 36516 0000349D 074255464645525342      	db      7,      "BUFFERS",      CONFIG_BUFFERS
 36517 000034A6 05425245414B43          	db      5,      "BREAK",        CONFIG_BREAK
 36518 000034AD 0644455649434544        	db      6,      "DEVICE",       CONFIG_DEVICE
 36519 000034B5 0A4445564943454849-     	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36519 000034BE 474855             
 36520 000034C1 0546494C455346          	db      5,      "FILES",        CONFIG_FILES
 36521 000034C8 044643425358            	db      4,      "FCBS",         CONFIG_FCBS
 36522 000034CE 094C41535444524956-     	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36522 000034D7 454C               
 36523 000034D9 0A4D554C5449545241-     	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36523 000034E2 434B4D             
 36524 000034E5 08445249565041524D-     	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36524 000034EE 50                 
 36525 000034EF 06535441434B534B        	db      6,      "STACKS",       CONFIG_STACKS
 36526 000034F7 07434F554E54525951      	db      7,      "COUNTRY",      CONFIG_COUNTRY
 36527 00003500 055348454C4C53          	db      5,      "SHELL",        CONFIG_SHELL
 36528 00003507 07494E5354414C4C49      	db      7,      "INSTALL",      CONFIG_INSTALL
 36529 00003510 07434F4D4D454E5459      	db      7,      "COMMENT",      CONFIG_COMMENT
 36530 00003519 0352454D30              	db      3,      "REM",          CONFIG_REM
 36531 0000351E 085357495443484553-     	db      8,      "SWITCHES",     CONFIG_SWITCHES
 36531 00003527 31                 
 36532 00003528 03444F5348              	db      3,      "DOS",          CONFIG_DOS
 36533 0000352D 00                      	db	0
 36534                                  
 36535                                  deviceparameters:	
 36536                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 36537                                  devp.specialfunc:	; deviceparameters +
 36538 0000352E 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 36539                                  devp.devtype:
 36540 0000352F 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 36541                                  devp.devattr:
 36542 00003530 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 36543                                  devp.cylinders:
 36544 00003532 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 36545                                  
 36546 00003534 00<rep 11Eh>            	times	286	db 0
 36547                                  	
 36548 00003652 0200                    hlim:	dw	2
 36549 00003654 0900                    slim:	dw	9
 36550                                  
 36551 00003656 00                      drive:	db	0
 36552                                  
 36553                                  switches:
 36554 00003657 0000                    	dw	0
 36555                                  
 36556                                  ; the following are the recommended bpbs for the media that
 36557                                  ; we know of so far.
 36558                                  
 36559                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36560                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 36561                                  
 36562                                  ; 48 tpi diskettes
 36563                                  
 36564 00003659 0002                    bpb48t	dw	512
 36565 0000365B 02                      	db	2
 36566 0000365C 0100                    	dw	1
 36567 0000365E 02                      	db	2
 36568 0000365F 7000                    	dw	112
 36569 00003661 D002                    	dw	2*9*40 ; 720
 36570 00003663 FD                      	db	0FDh
 36571 00003664 0200                    	dw	2
 36572 00003666 0900                    	dw	9
 36573 00003668 0200                    	dw	2
 36574 0000366A 00000000                	dd	0
 36575 0000366E 00000000                        dd      0
 36576                                  
 36577                                  ; 96tpi diskettes
 36578                                  
 36579 00003672 0002                    bpb96t:	dw	512
 36580 00003674 01                      	db	1
 36581 00003675 0100                    	dw	1
 36582 00003677 02                      	db	2
 36583 00003678 E000                    	dw	224
 36584 0000367A 6009                    	dw	2*15*80 ; 2400
 36585 0000367C F9                      	db	0F9h
 36586 0000367D 0700                    	dw	7
 36587 0000367F 0F00                    	dw	15
 36588 00003681 0200                    	dw	2
 36589 00003683 00000000                	dd	0
 36590 00003687 00000000                        dd      0
 36591                                  
 36592                                  ; 3 1/2 inch diskette bpb
 36593                                  
 36594 0000368B 0002                    bpb35:	dw	512
 36595 0000368D 02                      	db	2
 36596 0000368E 0100                    	dw	1
 36597 00003690 02                      	db	2
 36598 00003691 7000                    	dw	112
 36599 00003693 A005                    	dw	2*9*80 ; 1440
 36600 00003695 F9                      	db	0F9h
 36601 00003696 0300                    	dw	3
 36602 00003698 0900                    	dw	9
 36603 0000369A 0200                    	dw	2
 36604 0000369C 00000000                	dd	0
 36605 000036A0 00000000                        dd      0
 36606                                        
 36607 000036A4 0002                    bpb35h:	dw	512
 36608 000036A6 01                      	db	1
 36609 000036A7 0100                    	dw	1
 36610 000036A9 02                      	db	2
 36611 000036AA E000                    	dw	224
 36612 000036AC 400B                    	dw	2*18*80 ; 2880
 36613 000036AE F0                      	db	0F0h
 36614 000036AF 0900                    	dw	9
 36615 000036B1 1200                    	dw	18
 36616 000036B3 0200                    	dw	2
 36617 000036B5 00000000                	dd	0
 36618 000036B9 00000000                        dd      0
 36619                                  
 36620                                  ; m037 - BEGIN
 36621                                  
 36622 000036BD 0002                    bpb288:	dw	512
 36623 000036BF 02                      	db	2
 36624 000036C0 0100                    	dw	1
 36625 000036C2 02                      	db	2
 36626 000036C3 F000                    	dw	240
 36627 000036C5 8016                    	dw	2*36*80 ; 5760
 36628 000036C7 F0                      	db	0F0h
 36629 000036C8 0900                    	dw	9
 36630 000036CA 2400                    	dw	36
 36631 000036CC 0200                    	dw	2
 36632 000036CE 00000000                	dd	0
 36633 000036D2 00000000                        dd      0
 36634                                  
 36635                                  ; m037 - END
 36636                                  
 36637                                  ; 12/05/2019
 36638                                  
 36639                                  align 2
 36640                                  
 36641                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36642                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 36643                                  
 36644 000036D6 [5936]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 36645 000036D8 [7236]                  	    dw	    bpb96t		; 96tpi drives
 36646 000036DA [8B36]                  	    dw	    bpb35		; 3.5" drives
 36647                                  ; the following are not supported, so default to 3.5" media layout
 36648 000036DC [8B36]                  	    dw	    bpb35		; not used - 8" drives
 36649 000036DE [8B36]                  	    dw	    bpb35		; not used - 8" drives
 36650 000036E0 [8B36]                  	    dw	    bpb35		; not used - hard files
 36651 000036E2 [8B36]                  	    dw	    bpb35		; not used - tape drives
 36652 000036E4 [A436]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 36653 000036E6 [8B36]                  	    dw	    bpb35		; ERIMO				m037
 36654 000036E8 [BD36]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 36655                                  
 36656                                  switchlist: 
 36657 000036EA 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 36658                                  
 36659                                  ;----------------------------------------------------------------------------
 36660                                  ; Messages
 36661                                  ;----------------------------------------------------------------------------
 36662                                  
 36663                                  ; 19/04/2019 - Retro DOS v4.0
 36664                                  
 36665                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 36666                                  
 36667 000036F3 00                      	db 	0
 36668                                  
 36669                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36670                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 36671                                  
 36672                                  badopm:
 36673 000036F4 0D0A                    	db	0Dh,0Ah 
 36674 000036F6 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 36674 000036FF 7A656420636F6D6D61-
 36674 00003708 6E6420696E20434F4E-
 36674 00003711 4649472E535953     
 36675                                  crlfm:
 36676 00003718 0D0A24                  	db	0Dh,0Ah,'$'
 36677                                  badparm:
 36678 0000371B 0D0A                    	db	0Dh,0Ah
 36679 0000371D 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 36679 00003726 6E64206F7220706172-
 36679 0000372F 616D6574657273202D-
 36679 00003738 2024               
 36680                                  badsiz_pre:
 36681 0000373A 0D0A                    	db	0Dh,0Ah
 36682 0000373C 536563746F72207369-     	db	'Sector size too large in file $'
 36682 00003745 7A6520746F6F206C61-
 36682 0000374E 72676520696E206669-
 36682 00003757 6C652024           
 36683                                  badld_pre:
 36684 0000375B 0D0A                    	db	0Dh,0Ah
 36685 0000375D 426164206F72206D69-     	db	'Bad or missing $'
 36685 00003766 7373696E672024     
 36686                                  badcom:
 36687 0000376D 436F6D6D616E642049-     	db	'Command Interpreter',0
 36687 00003776 6E7465727072657465-
 36687 0000377F 7200               
 36688                                  badcountry:
 36689 00003781 0D0A                    	db	0Dh,0Ah
 36690 00003783 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 36690 0000378C 6F756E74727920636F-
 36690 00003795 6465206F7220636F64-
 36690 0000379E 6520706167650D0A24 
 36691                                  badcountrycom:
 36692 000037A7 0D0A                    	db	0Dh,0Ah
 36693 000037A9 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 36693 000037B2 434F554E5452592063-
 36693 000037BB 6F6D6D616E640D0A24 
 36694                                  insufmemory:
 36695 000037C4 0D0A                    	db	0Dh,0Ah
 36696 000037C6 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 36696 000037CF 656E74206D656D6F72-
 36696 000037D8 7920666F7220434F55-
 36696 000037E1 4E5452592E53595320-
 36696 000037EA 66696C650D0A24     
 36697                                  badmem:
 36698 000037F1 0D0A                    	db	0Dh,0Ah
 36699 000037F3 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 36699 000037FC 74696F6E20746F6F20-
 36699 00003805 6C6172676520666F72-
 36699 0000380E 206D656D6F72790D0A-
 36699 00003817 24                 
 36700                                  badblock:
 36701 00003818 0D0A                    	db	0Dh,0Ah
 36702 0000381A 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 36702 00003823 626C6F636B20646576-
 36702 0000382C 696365730D0A24     
 36703                                  badstack:
 36704 00003833 0D0A                    	db	0Dh,0Ah
 36705 00003835 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 36705 0000383E 5441434B2070617261-
 36705 00003847 6D65746572730D0A24 
 36706                                  	; 18/12/2022
 36707                                  ;badorder:
 36708                                  	;db	0Dh,0Ah
 36709                                  	;db	'Incorrect order in CONFIG.SYS line $'
 36710                                  errorcmd:
 36711 00003850 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 36711 00003859 434F4E4649472E5359-
 36711 00003862 53206C696E652024   
 36712                                  
 36713                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36714                                  %if 0
 36715                                  
 36716                                  OnOff:	db	'ON'
 36717                                  OnOff2:	db	'OFF'
 36718                                  
 36719                                  StartMsg:
 36720                                  	db	'Starting MS-DOS...',0Dh,0Ah
 36721                                  	db	0Ah,0
 36722                                  _$PauseMsg:
 36723                                  	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 36724                                  _$CleanMsg:
 36725                                  	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 36726                                  _$InterMsg:
 36727                                  	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 36728                                  _$MenuHeader:
 36729                                  	db	0Dh,0Ah
 36730                                  	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 36731                                  	db	'  =======================',0Dh,0Ah,'$'
 36732                                  _$MenuPrmpt:
 36733                                  	db	'  Enter a choice: $'
 36734                                  _$StatusLine:
 36735                                  	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS'
 36736                                  	db	'and AUTOEXEC.BAT [ ]$'
 36737                                  _$InterPrmpt:
 36738                                  	db	' [Y,N]?$'
 36739                                  _$YES:	db	'YES$'
 36740                                  _$NO:	db	'NO $'
 36741                                  _$TimeOut:
 36742                                  	db	'Time remaining: $'
 36743                                  badcomprmpt:
 36744                                  	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 36745                                  	db	0Dh,0Ah,'$'
 36746                                  _$AutoPrmpt:
 36747                                  	db	'Process AUTOEXEC.BAT [Y,N]?$'
 36748                                  
 36749                                  %endif
 36750                                  
 36751                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36752                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 36753                                  
 36754                                  TooManyDrivesMsg:
 36755 0000386A 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 36755 00003873 4C6F676963616C2064-
 36755 0000387C 726976657320706173-
 36755 00003885 74205A3A2065786973-
 36755 0000388E 7420616E642077696C-
 36755 00003897 6C2062652069676E6F-
 36755 000038A0 7265640D0A24       
 36756                                  
 36757                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 36758                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 36759                                  	;db	7 dup(0)
 36760                                  
 36761                                  	;times	7 db 0
 36762                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36763                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 36764                                  	; 09/12/2022
 36765                                  	;times 4 db 0
 36766                                  
 36767                                  ;----------------------------------------------------------------------------
 36768                                  		; 09/12/2022
 36769                                  		;db 0
 36770                                  
 36771                                  number3div	equ ($-SYSINIT$)
 36772                                  number3mod	equ (number3div % 16)
 36773                                  
 36774                                  %if number3mod>0 & number3mod<16
 36775 000038A6 00<rep Ah>              		times (16-number3mod) db 0
 36776                                  %endif
 36777                                  
 36778                                  ;----------------------------------------------------------------------------
 36779                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 36780                                  ;----------------------------------------------------------------------------
 36781                                  
 36782                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 36783                                  
 36784                                  ;----------------------------------------------------------------------------
 36785                                  ; 20/04/2019 - Retro DOS v4.0
 36786                                  
 36787                                  ; 09/12/2022
 36788                                  ;
 36789                                  ;bss_start:
 36790                                  ;
 36791                                  ;ABSOLUTE bss_start
 36792                                  ;
 36793                                  ;alignb 16
 36794                                  
 36795                                  SI_end:  ; SI_end equ $
 36796                                  
 36797                                  ;----------------------------------------------------------------------------
 36798                                  
 36799                                  ;sysinitseg	ends
 36800                                  
 36801                                  ; ***************************************************************************
 36802                                  
 36803                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 36804                                  
 36805                                  SYSINITSIZE	equ SI_end - SYSINIT$
 36806                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 36807                                  
 36808                                  ;----------------------------------------------------------------------------
 36809                                  ; End of Retro DOS v4.0 (MSDOS 5.0) IO.SYS source by Erdogan Tan - 09/12/2022
 36810                                  ;----------------------------------------------------------------------------
 36811                                  
 36812                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 36813                                  ;----------------------------------------------------------------------------
 36814                                  ;----------------------------------------------------------------------------
 36815                                  
 36816                                  ; ----------------------------------------------------------------------------
 36817                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 36818                                  ; ----------------------------------------------------------------------------
 36819                                  ; 18/03/2019 - Retro DOS v4.0 
 36820                                  ; 11/06/2018 - Retro DOS v3.0 
 36821                                  
 36822                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 36823                                  		;; 28/06/2019 ('msdos6.s') 
 36824                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 36825                                  		
 36826                                  		; 29/12/2022
 36827 000038B0 <bin 8EFAh>             		incbin	'MSDOS51.BIN' ; Retro DOS 4.1 - MSDOS 5.0+ KERNEL
 36828                                  		
 36829                                  		;; 28/12/2022 (BugFix)
 36830                                  		;; 22/12/2022
 36831                                  		;; 21/12/2022 ('msdos5.s')
 36832                                  		;incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 36833                                  	
 36834                                  msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 36835                                  
 36836                                  align 2
 36837                                  
 36838                                  ; 21/12/2022
 36839                                  ;END_OF_KERNEL:
 36840                                  END_OF_KERNEL equ $
 36841                                  
 36842                                  ;=============================================================================
 36843                                  ;	END
 36844                                  ;=============================================================================
 36845                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 36846                                  ; ------------------------------
 36847                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
