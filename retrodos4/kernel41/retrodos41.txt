     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 04/01/2023 - Retro DOS v4.1 (Prev: 22/12/2022, Retro DOS v4.0)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 25/05/2018 (Retro DOS 3.0), 26/12/2018 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15 (2.11)
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))		-	
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB    (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  
   881                                  section .BIOSDATA vstart=0
   882                                  
   883                                  ;--- DOSBIOS data segment ----------------------------------------------------
   884                                  ;-----------------------------------------------------------------------------
   885                                  
   886                                  ;Bios_Data segment
   887                                  
   888                                  BData_start:				
   889 00000000 E96017                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   890                                  ; ----------------------------------------------------------------------------
   891                                  
   892 00000003 0000                    DosDataSg:	dw 0
   893                                  
   894                                  ; DOS's int 2f handler will exit via a jump through here.
   895                                  ; This is how the BIOS hooks int2f
   896                                  			
   897 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   898 00000006 [9108]                  off_706:	dw int_2f
   899 00000008 7000                    word_708:	dw 70h			; KERNEL_SEGMENT
   900                                  
   901 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   902                                  					; This is to maintain binary compatibility
   903                                  					; with DISK based DOS 5.0
   904                                  
   905                                  ; This is a byte used for special key handling in the resident
   906                                  ; console device driver. It must be here so that it can be included
   907                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   908                                  
   909 0000000C 00                      altah:		db 0			; special key handling
   910                                  			
   911 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   912 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   913                                  
   914                                  ; PTRSAV - pointer save
   915                                  ;
   916                                  ; This variable holds the pointer to the Request Header passed by a program
   917                                  ; wishing to use a device driver. When the strategy routine is called it 
   918                                  ; puts the address of the Request header in this variable and returns.
   919                                  		
   920 00000012 00000000                ptrsav:		dd 0			
   921                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   922 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   923 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   924 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   925 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   926 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   927 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   928                                  
   929                                  ;-----------------------------------------------------------------------------
   930                                  
   931                                  res_dev_list:
   932                                  
   933                                  ; Device Header for the CON Device Driver
   934                                  
   935                                  CONHeader:				; HEADER FOR DEVICE "CON"
   936 00000023 [3500]                  		dw auxdev2
   937 00000025 7000                    		dw 70h	
   938 00000027 1380                    word_727:	dw 8013h
   939 00000029 [F506]                  		dw strategy
   940 0000002B [0007]                  		dw con_entry
   941 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   942 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   943 00000037 7000                    		dw 70h
   944 00000039 0080                    		dw 8000h
   945 0000003B [F506]                  		dw strategy
   946 0000003D [2107]                  		dw aux0_entry
   947 0000003F 4155582020202020        aAux:		db 'AUX     '
   948 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   949 00000049 7000                    		dw 70h
   950 0000004B C0A0                    word_74B:	dw 0A0C0h
   951 0000004D [F506]                  		dw strategy
   952 0000004F [0507]                  		dw prn0_entry
   953 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   954 00000059 [6B00]                  timdev:		dw dskdev	
   955 0000005B 7000                    		dw 70h
   956 0000005D 0880                    		dw 8008h
   957 0000005F [F506]                  		dw strategy
   958 00000061 [3907]                  		dw tim_entry
   959 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   960 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   961 0000006D 7000                    		dw 70h
   962 0000006F C208                    		dw 8C2h
   963                                  		;dw offset strategy
   964                                  		;dw offset dsk_entry
   965                                  		; 19/10/2022
   966 00000071 [F506]                  		dw strategy
   967 00000073 [3E07]                  		dw dsk_entry
   968                                  
   969                                  ; maximum number of drives
   970                                  
   971 00000075 04                      drvmax:		db 4			
   972 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   973 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   974                                  					; 96tpi support		
   975 00000078 00                      single:		db 0			; used to detect single drive systems		
   976 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   977                                  					; used by console driver.			
   978 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   979                                  					; drive. (examined by checksingle).
   980                                  		
   981 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   982 0000007D 7000                    		dw 70h
   983 0000007F 0080                    		dw 8000h
   984 00000081 [F506]                  		dw strategy
   985 00000083 [2107]                  		dw aux0_entry
   986 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   987 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   988 0000008F 7000                    		dw 70h
   989 00000091 C0A0                    		dw 0A0C0h
   990 00000093 [F506]                  		dw strategy
   991 00000095 [0C07]                  		dw prn1_entry
   992 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
   993 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
   994 000000A1 7000                    		dw 70h
   995 000000A3 C0A0                    		dw 0A0C0h
   996 000000A5 [F506]                  		dw strategy
   997 000000A7 [1307]                  		dw prn2_entry
   998 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
   998 000000B2 0000               
   999                                  
  1000                                  ;M058; Start of changes
  1001                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1002                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1003                                  ;cannot change for them to work. Even ProComm does this.
  1004                                  
  1005 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1006                                  
  1007 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1008 000000BA 7000                    		dw 70h
  1009 000000BC C0A0                    		dw 0A0C0h
  1010 000000BE [F506]                  		dw strategy
  1011 000000C0 [1A07]                  		dw prn3_entry
  1012 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1013 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1014 000000CC 7000                    		dw 70h
  1015 000000CE 0080                    		dw 8000h
  1016 000000D0 [F506]                  		dw strategy
  1017 000000D2 [2707]                  		dw aux1_entry
  1018                                  		; 19/10/2022
  1019 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1020                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1021 000000DC [EE00]                  		dw com4dev
  1022 000000DE 7000                    		dw 70h
  1023 000000E0 0080                    		dw 8000h
  1024                                  		;dw offset strategy
  1025                                  		;dw offset aux2_entry
  1026 000000E2 [F506]                  		dw strategy
  1027 000000E4 [2D07]                  		dw aux2_entry	
  1028 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1029 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1030 000000F0 7000                    		dw 70h
  1031 000000F2 0080                    		dw 8000h
  1032 000000F4 [F506]                  		dw strategy
  1033 000000F6 [3307]                  		dw aux3_entry
  1034 000000F8 434F4D3420202020        		db 'COM4    '
  1035                                  
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  
  1038 00000100 10                      RomVectors:	db 10h			
  1039 00000101 00000000                Old10:		dd 0
  1040 00000105 13                      		db 13h
  1041 00000106 00000000                Old13:		dd 0			
  1042 0000010A 15                      		db 15h
  1043 0000010B 00000000                Old15:		dd 0			
  1044 0000010F 19                      		db 19h
  1045 00000110 00000000                Old19:		dd 0
  1046 00000114 1B                      		db 1Bh
  1047 00000115 00000000                Old1B:		dd 0
  1048                                  
  1049                                  ;EndRomVectors	equ $
  1050                                  
  1051                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1052                                  
  1053                                  ;-----------------------------------------------------------------------------
  1054                                  
  1055 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1056 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1057                                  
  1058                                  ; (MSDOS 3.3) NOTE:
  1059                                  ; Some floppy drives do not have changeline support. The result is a
  1060                                  ; large amount of inefficiency in the code. A media-check always returns
  1061                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1062                                  ; always discard any cached data.
  1063                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1064                                  ; The following three items are used to do this. The logical door latch is
  1065                                  ; based on the premise that it is not physically possible to change floppy
  1066                                  ; disks in a drive in under two seconds (most people take about 10). The
  1067                                  ; logical door latch is implemented by saving the time of the last successful
  1068                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1069                                  ; current time is compared to the saved time. If less than two seconds have
  1070                                  ; passed then the value "No Change" is returned. If more than two seconds
  1071                                  ; have passed the value "Don't Know" is returned.
  1072                                  ;    There is one complecation to this algorithm. Some programs change the
  1073                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1074                                  ; This possibility is detected by counting the number of disk operations
  1075                                  ; which occur without any time passing. If this count exceeds the value of
  1076                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1077                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1078                                  ; of disk operation which occur without the time changing.
  1079                                  
  1080 0000011D 00                      accesscount:	db 0			
  1081 0000011E FF                      tim_drv:	db 0FFh			
  1082 0000011F 00                      medbyt:		db 0
  1083                                  wrtverify:	; 15/10/2022			
  1084 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1085 00000121 00                      verify:		db 0			; 1 if verify after write
  1086 00000122 0000                    seccnt:		dw 0			
  1087 00000124 00                      		db 0			; -- pad where hardnum was
  1088 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1089                                  
  1090                                  ; (MSDOS 3.3) NOTE:
  1091                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1092                                  ; have to be made to read the diskette. Consequently a large head settle
  1093                                  ; time was always used in the I/O operations. To get around this problem
  1094                                  ; we need to continually adjust the head settle time. The following
  1095                                  ; algorithm is used:
  1096                                  ;
  1097                                  ;   Get the current head settle value.
  1098                                  ;   If it is 1, then
  1099                                  ;	set slow = 15
  1100                                  ;   else
  1101                                  ;	set slow = value
  1102                                  ;   ...
  1103                                  ;   if we are seeking and writing then
  1104                                  ;	use slow
  1105                                  ;   else
  1106                                  ;	use fast
  1107                                  ;   ...
  1108                                  ;   restore current head settle value
  1109                                  
  1110 00000126 00                      motorstartup:	db 0			; value from table
  1111 00000127 00                      settlecurrent:	db 0			; value	from table
  1112 00000128 00                      settleslow:	db 0			; slow settle value
  1113 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1114 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1115 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1116 0000012C 09                      eot:		db 9			
  1117 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table			
  1118 00000131 00                      cursec:		db 0			; current sector
  1119 00000132 00                      curhd:		db 0			; current head
  1120 00000133 0000                    curtrk:		dw 0			; current track
  1121 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1122 00000137 08                      formt_eot:	db 8			; eot used for format
  1123 00000138 00                      hdnum:		db 0			; head number
  1124 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1125 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1126                                  
  1127                                  ;-----------------------------------------------------------------------------
  1128                                  
  1129                                  ; disk errors returned from the IBM rom
  1130                                  
  1131 0000013C CC                      errin:		db 0CCh			; write	fault error
  1132 0000013D 80                      		db 80h			; no response
  1133 0000013E 40                      		db 40h			; seek failure
  1134 0000013F 10                      		db 10h			; bad crc
  1135 00000140 08                      		db 8			; dma overrun
  1136 00000141 06                      		db 6			; media	change
  1137 00000142 04                      		db 4			; sector not found
  1138 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1139 00000144 00                      lsterr:		db 0			; all other errors
  1140                                  
  1141                                  ; returned error codes corresponding to above
  1142                                  
  1143 00000145 0A                      errout:		db 10			; write	fault error
  1144 00000146 02                      		db 2			; no response
  1145 00000147 06                      		db 6			; seek failure
  1146 00000148 04                      		db 4			; bad crc
  1147 00000149 04                      		db 4			; dma overrun
  1148 0000014A 0F                      		db 15			; invalid media	change
  1149 0000014B 08                      		db 8			; sector not found
  1150 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1151 0000014D 0C                      		db 12			; general error
  1152                                  
  1153                                  ;-----------------------------------------------------------------------------
  1154                                  
  1155                                  ; 30/12/2018 - Retro DOS v4.0
  1156                                  
  1157                                  ; read in boot sector here, read done in readboot.
  1158                                  ; also read sector for dma check for hard disk.
  1159                                  ;
  1160                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1161                                  ; in them which causes the byte after the buffer to be trashed
  1162                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1163                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1164                                  ; makes that system more-or-less work.
  1165                                  
  1166                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1167                                  		; 19/10/2022
  1168 0000014E 00<rep 200h>            		times 512 db 0
  1169                                  
  1170                                  ;-----------------------------------------------------------------------------
  1171                                  
  1172                                  ; 30/12/2018 - Retro DOS v4.0
  1173                                  ;-----------------------------------------------------------------------------
  1174                                  ; 25/05/2018 (04/04/2018)
  1175                                  ;*****************************************************************************
  1176                                  ;	"bds" contains information for each drive in the system.
  1177                                  ;	various values are patched whenever actions are performed.
  1178                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1179                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1180                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1181                                  ;	that the parameters have not been set.
  1182                                  
  1183                                  bds1:		;dw offset bds2
  1184 0000034E [B203]                  		dw bds2	; 19/10/2022
  1185 00000350 7000                    		dw 70h			; dword	link to	next structure
  1186 00000352 00                      		db 0			; int 13h drive	number
  1187 00000353 00                      		db 0			; logical drive	letter
  1188 00000354 0002                    fdrive1:	dw 512			
  1189                                  					; physical sector size in bytes
  1190 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1191 00000357 0100                    		dw 1			; reserved sectors for dos
  1192 00000359 02                      		db 2			; no of	file allocation	tables
  1193 0000035A 4000                    		dw 64			; number of root directory entries
  1194 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1195 0000035E 00                      		db 0			; media	descriptor, initially 0
  1196 0000035F 0200                    		dw 2			; number of fat	sectors
  1197 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1198 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1199 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1200 00000367 0000                    		dw 0			; hidden sector	(high)
  1201 00000369 0000                    		dw 0			; number sectors (low)
  1202 0000036B 0000                    		dw 0			; number sectors (high)
  1203 0000036D 00                      		db 0			; true => large	fats
  1204 0000036E 0000                    		dw 0			; open ref. count
  1205 00000370 03                      		db 3			; form factor
  1206 00000371 2000                    		dw 20h			; various flags
  1207 00000373 2800                    		dw 40			; number of cylinders
  1208 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1209 00000377 01                      		db 1
  1210 00000378 0100                    		dw 1
  1211 0000037A 02                      		db 2
  1212 0000037B E000                    		dw 224			; number of root directory entries
  1213 0000037D 6801                    		dw 360
  1214 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1215 00000380 0200                    		dw 2
  1216 00000382 0900                    		dw 9
  1217 00000384 0200                    		dw 2
  1218 00000386 0000                    		dw 0
  1219 00000388 0000                    		dw 0
  1220 0000038A 0000                    		dw 0
  1221 0000038C 0000                    		dw 0
  1222                                  		;db 6 dup(0)
  1223 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1224 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1225 00000395 FFFF                    word_A95:	dw 0FFFFh		; keep these two contiguous (?)
  1226 00000397 FFFF                    		dw 0FFFFh
  1227 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1227 000003A2 202000             
  1228 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1229 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1230                                  ; ----
  1231                                  
  1232 000003B2 [1604]                  bds2:		dw bds3		
  1233 000003B4 7000                    		dw 70h
  1234 000003B6 00                      		db 0
  1235 000003B7 00                      		db 0
  1236 000003B8 0002                    fdrive2:	dw 512			
  1237 000003BA FF0100024000680100-     byte_ABA:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1237 000003C3 020009000100       
  1238 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1238 000003D2 00000320002800     
  1239 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1239 000003E2 01F002000900       
  1240 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1240 000003F1 00000000000000FF   
  1241 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1241 00000402 4D                 
  1242 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1242 0000040C 00464154           
  1243 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1244                                  ; ----
  1245                                  
  1246 00000416 [7A04]                  bds3:		dw bds4		
  1247 00000418 7000                    		dw 70h
  1248 0000041A 00                      		db 0
  1249 0000041B 00                      		db 0
  1250 0000041C 0002                    fdrive3:	dw 512			
  1251 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1251 00000427 020009000100       
  1252 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1252 00000436 00000320002800     
  1253 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1253 00000446 01F002000900       
  1254 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1254 00000455 00000000000000FF   
  1255 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1255 00000466 4D                 
  1256 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1256 00000470 00464154           
  1257 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1258                                  ; ----
  1259                                  
  1260 0000047A FFFF                    bds4:		dw 0FFFFh		
  1261 0000047C 7000                    		dw 70h
  1262 0000047E 00                      		db 0
  1263 0000047F 00                      		db 0
  1264 00000480 0002                    fdrive4:	dw 512			
  1265 00000482 FF0100024000680100-     byte_B82:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1265 0000048B 020009000100       
  1266 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1266 0000049A 00000320002800     
  1267 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1267 000004AA 01F002000900       
  1268 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1268 000004B9 00000000000000FF   
  1269 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1269 000004CA 4D                 
  1270 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1270 000004D4 00464154           
  1271 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1272                                  
  1273                                  ;-----------------------------------------------------------------------------
  1274                                  
  1275 000004DE 03                      sm92:		db 3			; .spf			
  1276 000004DF 09                      		db 9			; .spt
  1277 000004E0 70                      		db 112	; 70h		; .cdire
  1278 000004E1 A005                    		dw 1440	; 2*9*80	; .csec
  1279 000004E3 02                      		db 2			; .spau
  1280 000004E4 02                      		db 2			; .chead
  1281                                  
  1282 000004E5 00                      keyrd_func:	db 0			
  1283 000004E6 01                      keysts_func:	db 1			
  1284 000004E7 00                      printdev:	db 0			; printer device index
  1285                                  
  1286                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1287 000004E8 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1288                                  
  1289 000004F0 0000                    daycnt:		dw 0			
  1290 000004F2 00                      t_switch:	db 0			; flag for updating daycnt
  1291 000004F3 00                      havecmosclock:	db 0			
  1292 000004F4 13                      base_century:	db 19			
  1293 000004F5 50                      base_year:	db 80			
  1294 000004F6 1F1C1F1E1F1E1F1F1E-     month_tab:	db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
  1294 000004FF 1F1E1F             
  1295 00000502 [FD14]                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1296 00000504 7000                    		dw 70h ; 17/10/2022	
  1297 00000506 [2C14]                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1298 00000508 7000                    		dw 70h ; 17/10/2022
  1299 0000050A 00                      set_id_flag:	db 0			; flag for getbp routine
  1300 0000050B 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1301 00000514 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1302 0000051D 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1302 00000526 202000             
  1303                                  
  1304 00000529 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1305 0000052B 0000                    start_sec_h:	dw 0			; starting sector number high word
  1306 0000052D 0000                    saved_word:	dw 0			; tempory saving place for a word
  1307 0000052F 0000                    multrk_flag:	dw 0			
  1308 00000531 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1309 00000532 0000                    vretry_cnt:	dw 0			
  1310 00000534 0000                    soft_ecc_cnt:	dw 0			
  1311 00000536 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1312 00000537 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1313                                  
  1314                                  ; variables for msdioctl.asm module
  1315                                  
  1316                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1317                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1318                                  ;	n	bytes per sector
  1319                                  ;      ---	----------------
  1320                                  ;	0	      128
  1321                                  ;	1	      256
  1322                                  ;	2	      512
  1323                                  ;	3	     1024
  1324                                  
  1325                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1326                                  ;					; we support (was 40 in dos 3.2)
  1327                                  
  1328 00000539 2400                    sectorspertrack: dw 36			
  1329 0000053B 00000102                tracktable:	db 0, 0, 1, 2		
  1330 0000053F 00000202                		db 0, 0, 2, 2
  1331 00000543 00000302                		db 0, 0, 3, 2
  1332 00000547 00000402                		db 0, 0, 4, 2
  1333 0000054B 00000502                		db 0, 0, 5, 2
  1334 0000054F 00000602                		db 0, 0, 6, 2
  1335 00000553 00000702                		db 0, 0, 7, 2
  1336 00000557 00000802                		db 0, 0, 8, 2
  1337 0000055B 00000902                		db 0, 0, 9, 2
  1338 0000055F 00000A02                		db 0, 0, 10, 2
  1339 00000563 00000B02                		db 0, 0, 11, 2
  1340 00000567 00000C02                		db 0, 0, 12, 2
  1341 0000056B 00000D02                		db 0, 0, 13, 2
  1342 0000056F 00000E02                		db 0, 0, 14, 2
  1343 00000573 00000F02                		db 0, 0, 15, 2
  1344 00000577 00001002                		db 0, 0, 16, 2
  1345 0000057B 00001102                		db 0, 0, 17, 2
  1346 0000057F 00001202                		db 0, 0, 18, 2
  1347 00000583 00001302                		db 0, 0, 19, 2
  1348 00000587 00001402                		db 0, 0, 20, 2
  1349 0000058B 00001502                		db 0, 0, 21, 2
  1350 0000058F 00001602                		db 0, 0, 22, 2
  1351 00000593 00001702                		db 0, 0, 23, 2
  1352 00000597 00001802                		db 0, 0, 24, 2
  1353 0000059B 00001902                		db 0, 0, 25, 2
  1354 0000059F 00001A02                		db 0, 0, 26, 2
  1355 000005A3 00001B02                		db 0, 0, 27, 2
  1356 000005A7 00001C02                		db 0, 0, 28, 2
  1357 000005AB 00001D02                		db 0, 0, 29, 2
  1358 000005AF 00001E02                		db 0, 0, 30, 2
  1359 000005B3 00001F02                		db 0, 0, 31, 2
  1360 000005B7 00002002                		db 0, 0, 32, 2
  1361 000005BB 00002102                		db 0, 0, 33, 2
  1362 000005BF 00002202                		db 0, 0, 34, 2
  1363 000005C3 00002302                		db 0, 0, 35, 2
  1364 000005C7 00002402                		db 0, 0, 36, 2
  1365 000005CB 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1366                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1367                                  					; times	((4*63)	- 144) db 0
  1368                                  
  1369                                  ;-----------------------------------------------------------------------------
  1370                                  
  1371                                  ; this is a real ugly place to put this
  1372                                  ; it should really go in the bds
  1373                                  
  1374 00000637 00                      mediatype:	db 0			
  1375 00000638 00                      media_set_for_format: db 0		; 1 if we have done an int 13 set media
  1376                                  					; type for format call
  1377 00000639 00                      had_format_error: db 0			; 1 if the previous format operation
  1378                                  					; failed.
  1379                                  
  1380                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1381                                  ; the one passed by "new roms" before we perform a format operation. the old
  1382                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1383                                  ; this table does not contain the previously saved dpt.
  1384                                  		
  1385 0000063A FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1386 0000063E FF                      model_byte:	db 0FFh			; model	byte set at init time
  1387 0000063F 00                      secondary_model_byte: db 0
  1388                                  		
  1389 00000640 00                      int19sem:	db 0			; indicate that all int 19
  1390                                  					; initialization is complete
  1391                                  		
  1392                                  ;; we assume the following remain contiguous and their order doesn't change
  1393                                  ;i19_lst:
  1394                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1395                                  ;	public	int19old&aa
  1396                                  ;		db	aa&h	; store the number as a byte
  1397                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1398                                  ;	endm
  1399                                  
  1400                                  ; 21/10/2022
  1401                                  
  1402 00000641 02                      i19_lst:	db 2			
  1403                                  					; Int19old&aa
  1404 00000642 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1405 00000646 08                      		db 8
  1406 00000647 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1407 0000064B 09                      		db 9
  1408 0000064C FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1409 00000650 0A                      		db 0Ah
  1410 00000651 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1411 00000655 0B                      		db 0Bh
  1412 00000656 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1413 0000065A 0C                      		db 0Ch
  1414 0000065B FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1415 0000065F 0D                      		db 0Dh
  1416 00000660 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1417 00000664 0E                      		db 0Eh
  1418 00000665 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1419 00000669 70                      		db 70h
  1420 0000066A FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1421 0000066E 72                      		db 72h
  1422 0000066F FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1423 00000673 73                      		db 73h
  1424 00000674 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1425 00000678 74                      		db 74h
  1426 00000679 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1427 0000067D 76                      		db 76h
  1428 0000067E FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1429 00000682 77                      		db 77h
  1430 00000683 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1431                                  
  1432                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1433                                  
  1434                                  ;-----------------------------------------------------------------------------
  1435                                  
  1436 00000687 [5403]                  dskdrvs:	dw fdrive1	
  1437 00000689 [B803]                  		dw fdrive2
  1438 0000068B [1C04]                  		dw fdrive3
  1439 0000068D [8004]                  		dw fdrive4
  1440                                  
  1441                                  ;M011 -- made all hard drive stuff variable
  1442                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1443 0000068F 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1444                                  
  1445                                  ;-----------------------------------------------------------------------------
  1446                                  
  1447                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1448                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1449                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1450                                  
  1451                                  ;variables for dynamic relocatable modules
  1452                                  ;these should be stay resident.
  1453                                  
  1454 000006BB 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1455                                  					; for p12 machine
  1456                                  
  1457                                  ; data structures for real-time date and time
  1458                                  			
  1459 000006BF 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1460                                  
  1461 000006C3 0000                    month_table:	dw 0			; january
  1462 000006C5 1F00                    		dw 31			; february
  1463 000006C7 3B00                    		dw 59
  1464 000006C9 5A00                    		dw 90
  1465 000006CB 7800                    		dw 120
  1466 000006CD 9700                    		dw 151
  1467 000006CF B500                    		dw 181
  1468 000006D1 D400                    		dw 212
  1469 000006D3 F300                    		dw 243
  1470 000006D5 1101                    		dw 273
  1471 000006D7 3001                    		dw 304
  1472 000006D9 4E01                    		dw 334			; december
  1473                                  
  1474 000006DB 0000                    daycnt2:	dw 0			
  1475 000006DD 00                      feb29:		db 0			; february 29 in a leap	year flag
  1476                                  
  1477                                  ;-----------------------------------------------------------------------------
  1478                                  ;
  1479                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1480                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1481                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1482                                  
  1483                                  ; ----------------------------------------------------------------------------
  1484                                  
  1485                                  ;************************************************************************
  1486                                  ;*									*
  1487                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1488                                  ;*	  are plugged in by seg_reinit.					*
  1489                                  ;*									*
  1490                                  ;************************************************************************
  1491                                  
  1492                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1493                                  ; BIOSCODE_SEGMENT equ 2C7h
  1494                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1495                                  
  1496                                  ; 01/10/2022 - Erdogan Tan
  1497                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1498                                  ;  addresses, they will be changed to table labels later)
  1499                                  
  1500                                  ; 09/12/2022
  1501                                  %if 0
  1502                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1503                                  					; at 2C7h:43h =	70h:25B3h
  1504                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1505                                  					; at 2C7h:396h = 70h:2906h
  1506                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1507                                  					; at 2C7h:1302h	= 70h:3872h
  1508                                  i13x:		dw 154Bh, 2C7h		; i13z
  1509                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1510                                  %endif
  1511                                  
  1512                                  ; 09/12/2022
  1513 000006DE [4300]A102              cdev:		dw chardev_entry, IOSYSCODESEG
  1514 000006E2 [8B03]A102              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1515 000006E6 [B812]A102              bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1516 000006EA [F514]A102              i13x:		dw i13z, IOSYSCODESEG
  1517                                  
  1518                                  end_BC_entries:	; 15/10/2022
  1519                                  
  1520                                  ;************************************************************************
  1521                                  ;*									*
  1522                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1523                                  ;*									*
  1524                                  ;************************************************************************
  1525                                  
  1526                                  cbreak:					
  1527 000006EE 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1528                                  					; indicate break key set
  1529                                  intret:					
  1530 000006F4 CF                      		iret
  1531                                  
  1532                                  ; =============== S U B	R O U T	I N E ========================================
  1533                                  
  1534                                  
  1535                                  ;************************************************************************
  1536                                  ;*									*
  1537                                  ;*	strategy - store es:bx (device driver request packet)		*
  1538                                  ;*		     away at [ptrsav] for next driver function call	*
  1539                                  ;*									*
  1540                                  ;************************************************************************
  1541                                  
  1542                                  strategy:	; proc far		
  1543 000006F5 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1544                                  					; away at [ptrsav] for next driver function call
  1545 000006FA 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1546 000006FF CB                      		retf
  1547                                  
  1548                                  ; ----------------------------------------------------------------------------
  1549                                  
  1550                                  ;************************************************************************
  1551                                  ;*									*
  1552                                  ;*	device driver entry points. these are the initial		*
  1553                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1554                                  ;*	  in the case of our resident drivers, they'll just		*
  1555                                  ;*	  stick a fake return address on the stack which		*
  1556                                  ;*	  points to dispatch tables and possibly some unit		*
  1557                                  ;*	  numbers, and then call through a common entry point		*
  1558                                  ;*	  which can take care of a20 switching				*
  1559                                  ;*									*
  1560                                  ;************************************************************************
  1561                                  
  1562                                  ; 01/10/2022 - Erdogan Tan
  1563                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1564                                  ;  addresses, they will be changed to table labels later)
  1565                                  
  1566                                  ; 09/12/2022
  1567                                  
  1568                                  con_entry:				
  1569 00000700 E84000                  		call	cdev_entry
  1570                                  ; ----------------------------------------------------------------------------
  1571                                  		;dw 0E4h		; con_table
  1572 00000703 [E300]                  		dw con_table	
  1573                                  					; 2C7h:0E4h = 70h:2654h
  1574                                  ; ----------------------------------------------------------------------------
  1575                                  
  1576                                  prn0_entry:				
  1577 00000705 E83B00                  		call	cdev_entry
  1578                                  ; ----------------------------------------------------------------------------
  1579                                  		;dw 0FBh		; prn_table
  1580 00000708 [FA00]                  		dw prn_table
  1581                                  					; 2C7h:0FBh = 70h:266Bh
  1582 0000070A 0000                    		db 0, 0
  1583                                  ; ----------------------------------------------------------------------------
  1584                                  
  1585                                  prn1_entry:				
  1586 0000070C E83400                  		call	cdev_entry
  1587                                  ; ----------------------------------------------------------------------------
  1588                                  		;dw 0FBh		; prn_table
  1589 0000070F [FA00]                  		dw prn_table
  1590                                  					; 2C7h:0FBh = 70h:266Bh
  1591 00000711 0001                    		db 0, 1
  1592                                  ; ----------------------------------------------------------------------------
  1593                                  
  1594                                  prn2_entry:				
  1595 00000713 E82D00                  		call	cdev_entry
  1596                                  ; ----------------------------------------------------------------------------
  1597                                  		;dw 0FBh		; prn_table
  1598 00000716 [FA00]                  		dw prn_table
  1599                                  					; 2C7h:0FBh = 70h:266Bh
  1600 00000718 0102                    		db 1, 2
  1601                                  ; ----------------------------------------------------------------------------
  1602                                  
  1603                                  prn3_entry:				
  1604 0000071A E82600                  		call	cdev_entry
  1605                                  ; ----------------------------------------------------------------------------
  1606                                  		;dw 0FBh		; prn_table
  1607 0000071D [FA00]                  		dw prn_table
  1608                                  					; 2C7h:0FBh = 70h:266Bh
  1609 0000071F 0203                    		db 2, 3
  1610                                  ; ----------------------------------------------------------------------------
  1611                                  
  1612                                  aux0_entry:				
  1613 00000721 E81F00                  		call	cdev_entry
  1614                                  ; ----------------------------------------------------------------------------
  1615                                  		;dw 130h		; aux_table
  1616 00000724 [2F01]                  		dw aux_table
  1617                                  					; 2C7h:130h = 70h:26A0h
  1618 00000726 00                      		db 0
  1619                                  ; ----------------------------------------------------------------------------
  1620                                  
  1621                                  aux1_entry:				
  1622 00000727 E81900                  		call	cdev_entry
  1623                                  ; ----------------------------------------------------------------------------
  1624                                  		;dw 130h		; aux_table
  1625 0000072A [2F01]                  		dw aux_table
  1626                                  					; 2C7h:130h = 70h:26A0h
  1627 0000072C 01                      		db 1
  1628                                  ; ----------------------------------------------------------------------------
  1629                                  
  1630                                  aux2_entry:				
  1631 0000072D E81300                  		call	cdev_entry
  1632                                  ; ----------------------------------------------------------------------------
  1633                                  		;dw 130h		; aux_table
  1634 00000730 [2F01]                  		dw aux_table
  1635                                  					; 2C7h:130h = 70h:26A0h
  1636 00000732 02                      		db 2
  1637                                  ; ----------------------------------------------------------------------------
  1638                                  
  1639                                  aux3_entry:				
  1640 00000733 E80D00                  		call	cdev_entry
  1641                                  ; ----------------------------------------------------------------------------
  1642                                  		;dw 130h		; aux_table
  1643 00000736 [2F01]                  		dw aux_table
  1644                                  					; 2C7h:130h = 70h:26A0h
  1645 00000738 03                      		db 3
  1646                                  ; ----------------------------------------------------------------------------
  1647                                  
  1648                                  tim_entry:				
  1649 00000739 E80700                  		call	cdev_entry
  1650                                  ; ----------------------------------------------------------------------------
  1651                                  		;dw 147h		; tim_table
  1652 0000073C [4601]                  		dw tim_table
  1653                                  					; 2C7h:147h = 70h:26B7h
  1654                                  ; ----------------------------------------------------------------------------
  1655                                  
  1656                                  ; 15/10/2022
  1657                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1658                                  ; 09/12/2022
  1659                                  DSKTBL equ dsktbl
  1660                                  
  1661                                  dsk_entry:				
  1662 0000073E E80200                  		call	cdev_entry
  1663                                  ; ----------------------------------------------------------------------------
  1664                                  		;dw 4A2h		; dsktbl
  1665 00000741 [9604]                  		dw DSKTBL		; 09/12/2022
  1666                                  					; 2C7h:4A2h = 70h:2A12h
  1667                                  
  1668                                  ; =============== S U B	R O U T	I N E ========================================
  1669                                  
  1670                                  ;************************************************************************
  1671                                  ;*									*
  1672                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1673                                  ;*	This code assumes that if Segment of Device request packet is	*
  1674                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1675                                  ;*	A20 is already on.						*
  1676                                  ;*									*
  1677                                  ;************************************************************************
  1678                                  
  1679                                  cdev_entry:	; proc near		
  1680 00000743 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1681 00000749 740D                    		jz	short ce_enter_codeseg
  1682                                  				; optimized for DOS in HMA
  1683 0000074B 50                      		push	ax
  1684 0000074C 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1685 00000750 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1686 00000755 58                      		pop	ax
  1687 00000756 7505                    		jnz	short not_from_dos
  1688                                  				; jump is coded this way to fall thru
  1689                                  				; in 99.99% of the cases
  1690                                  ce_enter_codeseg:
  1691 00000758 2EFF2E[DE06]            		jmp	far [cs:cdev]			
  1692                                  		;jmp	dword ptr cs:cdev
  1693                                  ;-----------------------------------------------------------------------------
  1694                                  
  1695                                  not_from_dos:				
  1696 0000075D E86200                  		call	EnsureA20On
  1697 00000760 EBF6                    		jmp	short ce_enter_codeseg
  1698                                  
  1699                                  ;************************************************************************
  1700                                  ;*									*
  1701                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1702                                  ;*	   character in al on the display using int 10h ttywrite	*
  1703                                  ;*									*
  1704                                  ;************************************************************************
  1705                                  
  1706                                  outchr:					
  1707 00000762 50                      		push	ax		; int 29h handler
  1708 00000763 56                      		push	si
  1709 00000764 57                      		push	di
  1710 00000765 55                      		push	bp
  1711 00000766 53                      		push	bx
  1712 00000767 B40E                    		mov	ah, 0Eh
  1713 00000769 BB0700                  		mov	bx, 7
  1714 0000076C CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1715                                  					; AL = character, BH = display page (alpha modes)
  1716                                  					; BL = foreground color	(graphics modes)
  1717 0000076E 5B                      		pop	bx
  1718 0000076F 5D                      		pop	bp
  1719 00000770 5F                      		pop	di
  1720 00000771 5E                      		pop	si
  1721 00000772 58                      		pop	ax
  1722 00000773 CF                      		iret
  1723                                  ;-----------------------------------------------------------------------------
  1724                                  
  1725                                  ;************************************************************************
  1726                                  ;*									*
  1727                                  ;*	block13 - our int13 hooker					*
  1728                                  ;*									*
  1729                                  ;************************************************************************
  1730                                  
  1731                                  block13:				
  1732 00000774 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1733 0000077A 7408                    		jz	short skipa20
  1734 0000077C E85400                  		call	IsA20Off	; A20 Off?
  1735 0000077F 7503                    		jnz	short skipa20
  1736 00000781 E84300                  		call	EnableA20	; assure a20 enabled
  1737                                  
  1738                                  skipa20:				
  1739 00000784 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1740 00000789 9C                      		pushf			; fake interrupt
  1741 0000078A 2EFF1E[EA06]            		call	far [cs:i13x]
  1742                                  		;call	dword ptr cs:i13x
  1743                                  					; call through Bios_Code entry table
  1744 0000078F 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1745 00000794 CA0200                  		retf	2
  1746                                  
  1747                                  ; =============== S U B	R O U T	I N E =======================================
  1748                                  
  1749                                  ; the int13 hook calls back here to call-through to the ROM
  1750                                  ; this is necessary because some people have extended their
  1751                                  ; ROM BIOSs to use ds as a parameter/result register and
  1752                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1753                                  
  1754                                  call_orig13:	; proc far		
  1755 00000797 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1756 0000079B 9C                      		pushf			; simulate an int13
  1757 0000079C 2EFF1E[B400]            		call	far [cs:Orig13]
  1758                                  		;call	cs:Orig13
  1759 000007A1 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1760 000007A6 0E                      		push	cs
  1761 000007A7 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1762                                  
  1763 000007A8 9C                      		pushf
  1764                                  		; 10/12/2022
  1765                                  		; ds = cs
  1766 000007A9 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1767                                  		;cmp	byte [cs:inHMA], 0
  1768 000007AE 7408                    		jz	short corig13_popf_retf
  1769 000007B0 E82000                  		call	IsA20Off
  1770 000007B3 7503                    		jnz	short corig13_popf_retf
  1771 000007B5 E80F00                  		call	EnableA20
  1772                                  corig13_popf_retf:			
  1773 000007B8 9D                      		popf
  1774 000007B9 CB                      		retf
  1775                                  
  1776                                  ;-----------------------------------------------------------------------------
  1777                                  
  1778                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1779                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1780                                  
  1781 000007BA 9000FFFF                HiMem:		dd 0FFFF0090h		
  1782 000007BE 80000000                LoMem:		dd 80h
  1783                                  
  1784                                  ; ----------------------------------------------------------------------------			
  1785                                  
  1786                                  ; =============== S U B	R O U T	I N E ========================================
  1787                                  
  1788                                  
  1789                                  ;************************************************************************
  1790                                  ;*									*
  1791                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1792                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1793                                  ;*									*
  1794                                  ;************************************************************************
  1795                                  
  1796                                  EnsureA20On:	; proc near		
  1797 000007C2 E80E00                  		call	IsA20Off
  1798                                  		;jz	short EnableA20
  1799                                  		;retn
  1800                                  		; 18/12/2022
  1801 000007C5 750B                    		jnz	short A20On_retn	
  1802                                  
  1803                                  ; =============== S U B	R O U T	I N E ========================================
  1804                                  
  1805                                  
  1806                                  EnableA20:	; proc near		
  1807 000007C7 50                      		push	ax
  1808 000007C8 53                      		push	bx
  1809 000007C9 B405                    		mov	ah, 5	 ; local enable a20
  1810                                  		;call	cs:xms
  1811 000007CB 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1812 000007D0 5B                      		pop	bx
  1813 000007D1 58                      		pop	ax
  1814                                  A20On_retn:	; 18/12/2022	
  1815 000007D2 C3                      		retn
  1816                                  
  1817                                  ; =============== S U B	R O U T	I N E ========================================
  1818                                  
  1819                                  
  1820                                  IsA20Off:	; proc near		
  1821 000007D3 1E                      		push	ds
  1822 000007D4 06                      		push	es
  1823 000007D5 51                      		push	cx
  1824 000007D6 56                      		push	si
  1825 000007D7 57                      		push	di
  1826 000007D8 2EC536[BA07]            		lds	si, [cs:HiMem]
  1827 000007DD 2EC43E[BE07]            		les	di, [cs:LoMem]
  1828 000007E2 B90800                  		mov	cx, 8
  1829 000007E5 F3A7                    		repe cmpsw
  1830 000007E7 5F                      		pop	di
  1831 000007E8 5E                      		pop	si
  1832 000007E9 59                      		pop	cx
  1833 000007EA 07                      		pop	es
  1834 000007EB 1F                      		pop	ds
  1835 000007EC C3                      		retn
  1836                                  
  1837                                  ; ----------------------------------------------------------------------------
  1838                                  
  1839                                  DisableA20:
  1840 000007ED 50                      		push	ax
  1841 000007EE 53                      		push	bx
  1842 000007EF B406                    		mov	ah, 6		; local disable A20
  1843 000007F1 2EFF1E[0E00]            		call	far [cs:xms]
  1844                                  		;call	cs:xms
  1845 000007F6 5B                      		pop	bx
  1846 000007F7 58                      		pop	ax
  1847 000007F8 C3                      		retn
  1848                                  
  1849                                  ; ----------------------------------------------------------------------------
  1850                                  
  1851                                  ;************************************************************************
  1852                                  ;*									*
  1853                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1854                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1855                                  ;*									*
  1856                                  ;************************************************************************
  1857                                  
  1858                                  int19:					
  1859 000007F9 0E                      		push	cs
  1860 000007FA 1F                      		pop	ds
  1861 000007FB 8E06[1A00]              		mov	es, [zeroseg]	; 16/10/2022
  1862 000007FF B90500                  		mov	cx, 5		; NUMROMVECTORS
  1863                                  		;mov	si, offset RomVectors
  1864 00000802 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1865                                  next_int:				
  1866 00000805 AC                      		lodsb			; get int number
  1867 00000806 98                      		cbw			; assume < 128
  1868 00000807 D1E0                    		shl	ax, 1
  1869 00000809 D1E0                    		shl	ax, 1		; int *	4
  1870 0000080B 89C7                    		mov	di, ax
  1871 0000080D AD                      		lodsw
  1872 0000080E AB                      		stosw
  1873 0000080F AD                      		lodsw
  1874 00000810 AB                      		stosw			; install the saved vector
  1875 00000811 E2F2                    		loop	next_int
  1876 00000813 803E[4006]00            		cmp	byte [int19sem], 0 ; 19/10/2022
  1877 00000818 7422                    		jz	short doint19
  1878 0000081A BE[4106]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1879                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1880 0000081D B90E00                  		mov	cx, 14		; num_i19
  1881                                  
  1882                                  i19_restore_loop:			
  1883 00000820 AC                      		lodsb			; get interrupt	number
  1884 00000821 98                      		cbw			; assume < 128
  1885 00000822 89C7                    		mov	di, ax
  1886 00000824 AD                      		lodsw			; get original vector offset
  1887 00000825 89C3                    		mov	bx, ax		; save it
  1888 00000827 AD                      		lodsw
  1889 00000828 83FBFF                  		cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1890 0000082B 740D                    		jz	short i19_restor_1 ; opt no need to check selector too
  1891 0000082D 83F8FF                  		cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1892 00000830 7408                    		jz	short i19_restor_1
  1893 00000832 01FF                    		add	di, di
  1894 00000834 01FF                    		add	di, di
  1895 00000836 93                      		xchg	ax, bx
  1896 00000837 AB                      		stosw
  1897 00000838 93                      		xchg	ax, bx
  1898 00000839 AB                      		stosw			; put the vector back
  1899                                  
  1900                                  i19_restor_1:				
  1901 0000083A E2E4                    		loop	i19_restore_loop
  1902                                  
  1903                                  doint19:				
  1904 0000083C 803E[0D00]00            		cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1905 00000841 7403                    		jz	short SkipVDisk
  1906 00000843 E83000                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1907                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1908                                  					; the memory above 1MB during a	warm boot.
  1909                                  SkipVDisk:				
  1910 00000846 CD19                    		int	19h		; DISK BOOT
  1911                                  					; causes reboot	of disk	system
  1912                                  
  1913                                  ; =============== S U B	R O U T	I N E ========================================
  1914                                  
  1915                                  ;-----------------------------------------------------------------------------
  1916                                  ;
  1917                                  ; procedure : int15
  1918                                  ;
  1919                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1920                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1921                                  ;		is running high, it Erases the VDISK header
  1922                                  ;		present at 1MB boundary
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------
  1925                                  
  1926                                  ; 16/10/2022
  1927                                  ;DELKEY		equ	53h
  1928                                  ;ROMDATASEG	equ	40h
  1929                                  KBFLAG		equ	17h
  1930                                  ;CTRLSTATE	equ	04h
  1931                                  ;ALTSTATE	equ	08h
  1932                                  
  1933                                  Int15:		; proc near		
  1934                                  		;cmp	ax, 4F00h+DELKEY
  1935 00000848 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1936 0000084B 7405                    		jz	short int15_1
  1937 0000084D 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1938                                  		;jmp	cs:Old15
  1939                                  ; ----------------------------------------------------------------------------
  1940                                  
  1941                                  int15_1:				
  1942 00000852 1E                      		push	ds
  1943 00000853 50                      		push	ax
  1944 00000854 B84000                  		mov	ax, 40h		; ROMDATASEG
  1945 00000857 8ED8                    		mov	ds, ax
  1946                                  		;mov	al, ds:17h	; [KBFLAG]
  1947                                  		; 16/10/2022
  1948 00000859 A01700                  		mov	al, [KBFLAG]
  1949 0000085C 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1950 0000085E 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1951 00000860 750C                    		jnz	short int15_2
  1952 00000862 0E                      		push	cs
  1953 00000863 1F                      		pop	ds
  1954 00000864 803E[0D00]00            		cmp	byte [inHMA], 0	; is DOS running from HMA
  1955 00000869 7403                    		jz	short int15_2
  1956 0000086B E80800                  		call	EraseVDiskHead
  1957                                  int15_2:				
  1958 0000086E 58                      		pop	ax
  1959 0000086F 1F                      		pop	ds
  1960 00000870 F9                      		stc
  1961 00000871 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1962                                  		;jmp	cs:Old15
  1963                                  
  1964                                  ; =============== S U B	R O U T	I N E ========================================
  1965                                  
  1966                                  ;-----------------------------------------------------------------------------
  1967                                  ;
  1968                                  ; procedure : EraseVDiskHead
  1969                                  ;
  1970                                  ;		Erases the VDisk Header present in the 1MB boundary
  1971                                  ;
  1972                                  ;-----------------------------------------------------------------------------
  1973                                  
  1974                                  EraseVDiskHead:	; proc near		
  1975 00000876 50                      		push	ax
  1976 00000877 51                      		push	cx
  1977 00000878 57                      		push	di
  1978 00000879 06                      		push	es
  1979 0000087A E845FF                  		call	EnsureA20On
  1980 0000087D B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  1981 00000880 8EC0                    		mov	es, ax
  1982 00000882 BF1000                  		mov	di, 10h		; point	to VDISK header
  1983 00000885 B91000                  		mov	cx, 10h		; size of vdisk	header
  1984 00000888 31C0                    		xor	ax, ax
  1985 0000088A F3AB                    		rep stosw		; clear	it
  1986 0000088C 07                      		pop	es
  1987 0000088D 5F                      		pop	di
  1988 0000088E 59                      		pop	cx
  1989 0000088F 58                      		pop	ax
  1990 00000890 C3                      		retn
  1991                                  
  1992                                  ; ----------------------------------------------------------------------------
  1993                                  
  1994                                  ;************************************************************************
  1995                                  ;*									*
  1996                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  1997                                  ;*	  it returns through one of the three functions that follow.	*
  1998                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  1999                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2000                                  ;*									*
  2001                                  ;************************************************************************
  2002                                  
  2003                                  int_2f:		
  2004 00000891 2EFF2E[E606]            		jmp	far [cs:bcode_i2f] ; 16/10/2022			
  2005                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2006                                  
  2007                                  ; ----------------------------------------------------------------------------
  2008                                  
  2009                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2010                                  ; note:  is it really necessary to transiton out and then back in?
  2011                                  ;	 It's not as if this is a really speed critical function.
  2012                                  ;	 might as well do whatever's most compact.
  2013                                  
  2014                                  i2f_dskentry:				
  2015 00000896 E9A5FE                  		jmp	dsk_entry
  2016                                  
  2017                                  ; ----------------------------------------------------------------------------
  2018                                  
  2019                                  ;************************************************************************
  2020                                  ;*									*
  2021                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2022                                  ;*		is done. presently does nothing. affects no		*
  2023                                  ;*		registers!						*
  2024                                  ;*									*
  2025                                  ;************************************************************************
  2026                                  
  2027                                  ; 09/12/2022
  2028                                  ; re_init_:
  2029                                  re_init:				; called back by sysinit after
  2030 00000899 CB                      		retf			; a bunch of stuff is done.
  2031                                  					; presently does nothing
  2032                                  
  2033                                  ; ----------------------------------------------------------------------------
  2034                                  
  2035                                  ;SR; WIN386 support
  2036                                  
  2037                                  ; WIN386 instance data structure
  2038                                  ;
  2039                                  ; Here is a Win386 startup info structure which we set up and to which
  2040                                  ; we return a pointer when Win386 initializes.
  2041                                  
  2042 0000089A 0300                    Win386_SI:	db 3, 0			; SI_Version
  2043                                  					; Startup Info for Win386
  2044 0000089C 00000000                SI_Next:	dd 0			; pointer to next info structure
  2045 000008A0 00000000                		dd 0			; a field we don't need
  2046 000008A4 00000000                		dd 0			; another field	we don't need
  2047 000008A8 [AC08]                  SI_Instance:	dw Instance_Table
  2048 000008AA 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2049                                  
  2050                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2051                                  ; areas. Note that the address and size of the hardware stacks must
  2052                                  ; be calculated and inserted at boot time.
  2053                                  
  2054 000008AC 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2055 000008B0 0200                    		dw 2			; ... 2	bytes
  2056 000008B2 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2057 000008B6 1400                    		dw 14h			; ... 14H bytes
  2058 000008B8 [0C00]                  		dw altah		; a con	device buffer...
  2059 000008BA 7000                    		dw 70h			; Bios_Data segment
  2060 000008BC 0100                    		dw 1			; ... 1 byte
  2061                                  
  2062                                  NextStack:
  2063                                  
  2064                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2065                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2066                                  ;	That's just fine as long as these are the last items
  2067                                  ;	in the instance list since the first item is initialized
  2068                                  ;	to 0000 at load time.
  2069                                  
  2070 000008BE 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2071 000008C2 0200                    		dw 2			; ... 2 bytes
  2072 000008C4 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2073 000008C8 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2074 000008CA 00000000                		dd 0			; terminate the	instance table
  2075                                  
  2076                                  					;SR;
  2077 000008CE 00                      IsWin386:	db 0			; Flag to indicate whether
  2078                                  					; Win386 is running or not
  2079                                  ;-----------------------------------------------------------------------------
  2080                                  
  2081                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2082                                  ;when we call it including checking of A20. The code being only about 
  2083                                  ;30 bytes, we might as well put it in BIOS_DATA
  2084                                  
  2085                                  V86_Crit_SetFocus:			
  2086 000008CF 57                      		push	di
  2087 000008D0 06                      		push	es
  2088 000008D1 53                      		push	bx
  2089 000008D2 50                      		push	ax
  2090 000008D3 31FF                    		xor	di, di
  2091 000008D5 8EC7                    		mov	es, di
  2092 000008D7 BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2093 000008DA B88416                  		mov	ax, 1684h	; Get API entry	point
  2094 000008DD CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2095                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2096                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2097 000008DF 8CC0                    		mov	ax, es
  2098 000008E1 09F8                    		or	ax, di
  2099 000008E3 740B                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2100                                  					; Set up stack frame to	simulate a call.
  2101 000008E5 0E                      		push	cs
  2102                                  		;mov	ax, offset Skip
  2103 000008E6 B8[F008]                		mov	ax, Skip
  2104 000008E9 50                      		push	ax
  2105 000008EA 06                      		push	es
  2106 000008EB 57                      		push	di		; API far call address
  2107 000008EC B80100                  		mov	ax, 1		; SetFocus function number
  2108 000008EF CB                      		retf			; do the call
  2109                                  ;-----------------------------------------------------------------------------
  2110                                  
  2111                                  Skip:					
  2112 000008F0 58                      		pop	ax
  2113 000008F1 5B                      		pop	bx
  2114 000008F2 07                      		pop	es
  2115 000008F3 5F                      		pop	di
  2116 000008F4 CB                      		retf
  2117                                  
  2118                                  ;End WIN386 support
  2119                                  
  2120                                  ; ----------------------------------------------------------------------------
  2121                                  
  2122                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2123                                  
  2124                                  ; 09/12/2022
  2125                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2126                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2127                                  ; (followings are in sysinit segment)
  2128                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2129                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2130                                  ;DEVICELIST	equ 273h
  2131                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2132                                  ;MEMORYSIZE	equ 292h	
  2133                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2134                                  ;DEFAULTDRIVE	equ 296h
  2135                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2136                                  ;;currentdoslocation equ 271h
  2137                                  ;CURRENTDOSLOCATION equ 271h
  2138                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2139                                  ;SYSINITSTART	equ 267h
  2140                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2141                                  ; 18/10/2022
  2142                                  ;toomanydrivesflag equ 3FFh 
  2143                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2144                                  
  2145                                  ; ----------------------------------------------------------------------------
  2146                                  
  2147 000008F5 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2148                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2149                                  					; (procedure in	SYSINIT	segment)
  2150                                  ; 17/10/2022
  2151 000008F7 [290A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2152 000008F9 4104                    		dw SYSINITSEG	
  2153                                  
  2154                                  ;SR;
  2155                                  ; A communication block has been setup between the DOS and the BIOS. All
  2156                                  ;the data starting from SysinitPresent will be part of the data block. 
  2157                                  ;Right now, this is the only data being communicated. It can be expanded 
  2158                                  ;later to add more stuff
  2159                                  
  2160 000008FB 00                      SysinitPresent:	db 0			
  2161 000008FC 0000                    endfloppy:	db 0, 0
  2162                                  
  2163                                  ; ----------------------------------------------------------------------------			
  2164                                  
  2165                                  ; Bios_Data ends
  2166                                  	
  2167                                  ; Possibly disposable BIOS data
  2168                                  ; This data follows the	regular	BIOS data,
  2169                                  ; and is part of the same group.
  2170                                  
  2171 000008FE 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2171 00000907 202000             
  2172                                  					; null volume id
  2173 0000090A 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2173 00000913 202000             
  2174                                  					; vid scratch buffer
  2175 00000916 80                      harddrv:	db 80h			
  2176                                  
  2177                                  end96tpi:
  2178                                  
  2179                                  ;;*********************************************************************
  2180                                  ;;memory allocation for bdss
  2181                                  ;;*********************************************************************
  2182                                  ;
  2183                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2184                                  ;
  2185                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2186                                  ;
  2187                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2188                                  
  2189 00000917 FFFF                    bdss:		dw 0FFFFh		
  2190 00000919 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2190 00000922 0210000000F8       
  2191 00000928 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2191 00000931 000000000000000003 
  2192 0000093A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2192 00000943 00000000000000     
  2193 0000094A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2193 00000953 000000000000000000 
  2194 0000095C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2194 00000965 4E414D45           
  2195 00000969 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2195 00000972 46415431           
  2196 00000976 3220202000              		db 32h,	20h, 20h, 20h, 0
  2197 0000097B FFFF                    		dw 0FFFFh
  2198 0000097D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2198 00000986 0210000000F8       
  2199 0000098C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2199 00000995 000000000000000003 
  2200 0000099E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2200 000009A7 00000000000000     
  2201 000009AE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2201 000009B7 000000000000000000 
  2202 000009C0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2202 000009C9 4E414D45           
  2203 000009CD 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2203 000009D6 46415431           
  2204 000009DA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2205 000009DF FFFF                    		dw 0FFFFh
  2206 000009E1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2206 000009EA 0210000000F8       
  2207 000009F0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2207 000009F9 000000000000000003 
  2208 00000A02 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2208 00000A0B 00000000000000     
  2209 00000A12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2209 00000A1B 000000000000000000 
  2210 00000A24 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2210 00000A2D 4E414D45           
  2211 00000A31 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2211 00000A3A 46415431           
  2212 00000A3E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2213 00000A43 FFFF                    		dw 0FFFFh
  2214 00000A45 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2214 00000A4E 0210000000F8       
  2215 00000A54 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2215 00000A5D 000000000000000003 
  2216 00000A66 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2216 00000A6F 00000000000000     
  2217 00000A76 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2217 00000A7F 000000000000000000 
  2218 00000A88 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2218 00000A91 4E414D45           
  2219 00000A95 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2219 00000A9E 46415431           
  2220 00000AA2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2221 00000AA7 FFFF                    		dw 0FFFFh
  2222 00000AA9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2222 00000AB2 0210000000F8       
  2223 00000AB8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2223 00000AC1 000000000000000003 
  2224 00000ACA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2224 00000AD3 00000000000000     
  2225 00000ADA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2225 00000AE3 000000000000000000 
  2226 00000AEC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2226 00000AF5 4E414D45           
  2227 00000AF9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2227 00000B02 46415431           
  2228 00000B06 3220202000              		db 32h,	20h, 20h, 20h, 0
  2229 00000B0B FFFF                    		dw 0FFFFh
  2230 00000B0D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2230 00000B16 0210000000F8       
  2231 00000B1C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2231 00000B25 000000000000000003 
  2232 00000B2E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2232 00000B37 00000000000000     
  2233 00000B3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2233 00000B47 000000000000000000 
  2234 00000B50 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2234 00000B59 4E414D45           
  2235 00000B5D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2235 00000B66 46415431           
  2236 00000B6A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2237 00000B6F FFFF                    		dw 0FFFFh
  2238 00000B71 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2238 00000B7A 0210000000F8       
  2239 00000B80 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2239 00000B89 000000000000000003 
  2240 00000B92 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2240 00000B9B 00000000000000     
  2241 00000BA2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2241 00000BAB 000000000000000000 
  2242 00000BB4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2242 00000BBD 4E414D45           
  2243 00000BC1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2243 00000BCA 46415431           
  2244 00000BCE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2245 00000BD3 FFFF                    		dw 0FFFFh
  2246 00000BD5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2246 00000BDE 0210000000F8       
  2247 00000BE4 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2247 00000BED 000000000000000003 
  2248 00000BF6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2248 00000BFF 00000000000000     
  2249 00000C06 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2249 00000C0F 000000000000000000 
  2250 00000C18 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2250 00000C21 4E414D45           
  2251 00000C25 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2251 00000C2E 46415431           
  2252 00000C32 3220202000              		db 32h,	20h, 20h, 20h, 0
  2253 00000C37 FFFF                    		dw 0FFFFh
  2254 00000C39 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2254 00000C42 0210000000F8       
  2255 00000C48 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2255 00000C51 000000000000000003 
  2256 00000C5A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2256 00000C63 00000000000000     
  2257 00000C6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2257 00000C73 000000000000000000 
  2258 00000C7C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2258 00000C85 4E414D45           
  2259 00000C89 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2259 00000C92 46415431           
  2260 00000C96 3220202000              		db 32h,	20h, 20h, 20h, 0
  2261 00000C9B FFFF                    		dw 0FFFFh
  2262 00000C9D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2262 00000CA6 0210000000F8       
  2263 00000CAC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2263 00000CB5 000000000000000003 
  2264 00000CBE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2264 00000CC7 00000000000000     
  2265 00000CCE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2265 00000CD7 000000000000000000 
  2266 00000CE0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2266 00000CE9 4E414D45           
  2267 00000CED 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2267 00000CF6 46415431           
  2268 00000CFA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2269 00000CFF FFFF                    		dw 0FFFFh
  2270 00000D01 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2270 00000D0A 0210000000F8       
  2271 00000D10 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2271 00000D19 000000000000000003 
  2272 00000D22 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2272 00000D2B 00000000000000     
  2273 00000D32 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2273 00000D3B 000000000000000000 
  2274 00000D44 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2274 00000D4D 4E414D45           
  2275 00000D51 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2275 00000D5A 46415431           
  2276 00000D5E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2277 00000D63 FFFF                    		dw 0FFFFh
  2278 00000D65 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2278 00000D6E 0210000000F8       
  2279 00000D74 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2279 00000D7D 000000000000000003 
  2280 00000D86 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2280 00000D8F 00000000000000     
  2281 00000D96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2281 00000D9F 000000000000000000 
  2282 00000DA8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2282 00000DB1 4E414D45           
  2283 00000DB5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2283 00000DBE 46415431           
  2284 00000DC2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2285 00000DC7 FFFF                    		dw 0FFFFh
  2286 00000DC9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2286 00000DD2 0210000000F8       
  2287 00000DD8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2287 00000DE1 000000000000000003 
  2288 00000DEA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2288 00000DF3 00000000000000     
  2289 00000DFA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2289 00000E03 000000000000000000 
  2290 00000E0C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2290 00000E15 4E414D45           
  2291 00000E19 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2291 00000E22 46415431           
  2292 00000E26 3220202000              		db 32h,	20h, 20h, 20h, 0
  2293 00000E2B FFFF                    		dw 0FFFFh
  2294 00000E2D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2294 00000E36 0210000000F8       
  2295 00000E3C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2295 00000E45 000000000000000003 
  2296 00000E4E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2296 00000E57 00000000000000     
  2297 00000E5E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2297 00000E67 000000000000000000 
  2298 00000E70 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2298 00000E79 4E414D45           
  2299 00000E7D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2299 00000E86 46415431           
  2300 00000E8A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2301 00000E8F FFFF                    		dw 0FFFFh
  2302 00000E91 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2302 00000E9A 0210000000F8       
  2303 00000EA0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2303 00000EA9 000000000000000003 
  2304 00000EB2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2304 00000EBB 00000000000000     
  2305 00000EC2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2305 00000ECB 000000000000000000 
  2306 00000ED4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2306 00000EDD 4E414D45           
  2307 00000EE1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2307 00000EEA 46415431           
  2308 00000EEE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2309 00000EF3 FFFF                    		dw 0FFFFh
  2310 00000EF5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2310 00000EFE 0210000000F8       
  2311 00000F04 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2311 00000F0D 000000000000000003 
  2312 00000F16 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2312 00000F1F 00000000000000     
  2313 00000F26 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2313 00000F2F 000000000000000000 
  2314 00000F38 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2314 00000F41 4E414D45           
  2315 00000F45 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2315 00000F4E 46415431           
  2316 00000F52 3220202000              		db 32h,	20h, 20h, 20h, 0
  2317 00000F57 FFFF                    		dw 0FFFFh
  2318 00000F59 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2318 00000F62 0210000000F8       
  2319 00000F68 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2319 00000F71 000000000000000003 
  2320 00000F7A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2320 00000F83 00000000000000     
  2321 00000F8A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2321 00000F93 000000000000000000 
  2322 00000F9C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2322 00000FA5 4E414D45           
  2323 00000FA9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2323 00000FB2 46415431           
  2324 00000FB6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2325 00000FBB FFFF                    		dw 0FFFFh
  2326 00000FBD 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2326 00000FC6 0210000000F8       
  2327 00000FCC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2327 00000FD5 000000000000000003 
  2328 00000FDE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2328 00000FE7 00000000000000     
  2329 00000FEE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2329 00000FF7 000000000000000000 
  2330 00001000 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2330 00001009 4E414D45           
  2331 0000100D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2331 00001016 46415431           
  2332 0000101A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2333 0000101F FFFF                    		dw 0FFFFh
  2334 00001021 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2334 0000102A 0210000000F8       
  2335 00001030 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2335 00001039 000000000000000003 
  2336 00001042 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2336 0000104B 00000000000000     
  2337 00001052 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2337 0000105B 000000000000000000 
  2338 00001064 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2338 0000106D 4E414D45           
  2339 00001071 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2339 0000107A 46415431           
  2340 0000107E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2341 00001083 FFFF                    		dw 0FFFFh
  2342 00001085 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2342 0000108E 0210000000F8       
  2343 00001094 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2343 0000109D 000000000000000003 
  2344 000010A6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2344 000010AF 00000000000000     
  2345 000010B6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2345 000010BF 000000000000000000 
  2346 000010C8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2346 000010D1 4E414D45           
  2347 000010D5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2347 000010DE 46415431           
  2348 000010E2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2349 000010E7 FFFF                    		dw 0FFFFh
  2350 000010E9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2350 000010F2 0210000000F8       
  2351 000010F8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2351 00001101 000000000000000003 
  2352 0000110A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2352 00001113 00000000000000     
  2353 0000111A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2353 00001123 000000000000000000 
  2354 0000112C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2354 00001135 4E414D45           
  2355 00001139 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2355 00001142 46415431           
  2356 00001146 3220202000              		db 32h,	20h, 20h, 20h, 0
  2357 0000114B FFFF                    		dw 0FFFFh
  2358 0000114D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2358 00001156 0210000000F8       
  2359 0000115C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2359 00001165 000000000000000003 
  2360 0000116E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2360 00001177 00000000000000     
  2361 0000117E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2361 00001187 000000000000000000 
  2362 00001190 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2362 00001199 4E414D45           
  2363 0000119D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2363 000011A6 46415431           
  2364 000011AA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2365 000011AF FFFF                    		dw 0FFFFh
  2366 000011B1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2366 000011BA 0210000000F8       
  2367 000011C0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2367 000011C9 000000000000000003 
  2368 000011D2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2368 000011DB 00000000000000     
  2369 000011E2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2369 000011EB 000000000000000000 
  2370 000011F4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2370 000011FD 4E414D45           
  2371 00001201 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2371 0000120A 46415431           
  2372 0000120E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2373 00001213 FFFF                    		dw 0FFFFh
  2374 00001215 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2374 0000121E 0210000000F8       
  2375 00001224 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2375 0000122D 000000000000000003 
  2376 00001236 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2376 0000123F 00000000000000     
  2377 00001246 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2377 0000124F 000000000000000000 
  2378 00001258 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2378 00001261 4E414D45           
  2379 00001265 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2379 0000126E 46415431           
  2380 00001272 3220202000              		db 32h,	20h, 20h, 20h, 0
  2381 00001277 FFFF                    		dw 0FFFFh
  2382 00001279 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2382 00001282 0210000000F8       
  2383 00001288 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2383 00001291 000000000000000003 
  2384 0000129A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2384 000012A3 00000000000000     
  2385 000012AA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2385 000012B3 000000000000000000 
  2386 000012BC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2386 000012C5 4E414D45           
  2387 000012C9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2387 000012D2 46415431           
  2388 000012D6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2389 000012DB 00                      		db 0
  2390                                  
  2391                                  ;---------------------------------------------------------------------------
  2392                                  ; Possibly disposable data, goes at end of data group
  2393                                  ;***************************************************************************
  2394                                  
  2395                                  ; Possibly disposable data, goes at end of data group
  2396                                  
  2397                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2398                                  ;
  2399                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2400                                  ;		(dl) = drive number (80h or 81h).
  2401                                  ;		(dh) = head number.
  2402                                  ;		(ch) = cylinder number.
  2403                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2404                                  ;		(al) = number of sectors.
  2405                                  ;		(es:bx) = address of read buffer.
  2406                                  ;		for more on register contents see rom bios listing.
  2407                                  ;		stack set up for return by an iret.
  2408                                  ;
  2409                                  ;	exit:	(ah) = status of current operation.
  2410                                  ;		(cy) = 1 if failed, 0 if successful.
  2411                                  ;		for other register contents see rom bios listing.
  2412                                  ;
  2413                                  ;	uses:	
  2414                                  ;
  2415                                  ;
  2416                                  ;	warning: uses old13 vector for non-read calls.
  2417                                  ;		does direct calls to the at rom.
  2418                                  ;		does segment arithmatic.
  2419                                  ;
  2420                                  ;	effects: performs disk i/o operation.
  2421                                  
  2422                                  ; 16/10/2022
  2423                                  ; 28/05/2019
  2424                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2425                                  
  2426                                  ;* offsets into cmd_block for registers
  2427                                  
  2428                                  pre_comp equ 0	;write pre-compensation
  2429                                  sec_cnt	 equ 1	;sector count
  2430                                  sec_num	 equ 2	;sector number
  2431                                  cyl_low	 equ 3	;cylinder number, low part
  2432                                  cyl_high equ 4	;cylinder number, high part
  2433                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2434                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2435                                  cmd_reg  equ 6	;command register
  2436                                  
  2437                                  ; 01/10/2022
  2438                                  disk_status1	equ 74h
  2439                                  hf_num		equ 75h
  2440                                  control_byte	equ 76h
  2441                                  
  2442                                  ibm_disk_io:				
  2443 000012DC 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2444 000012DF 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2445 000012E1 80FC02                  		cmp	ah, 2
  2446 000012E4 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2447 000012E6 80FC0A                  		cmp	ah, 0Ah
  2448 000012E9 7405                    		jz	short atd2	; and call 0Ah (read long).
  2449                                  atd1:
  2450 000012EB 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2451                                  		;jmp	cs:Old13	; use rom int 13h handler
  2452                                  ;-----------------------------------------------------------------------------
  2453                                  
  2454                                  atd2:					
  2455 000012F0 53                      		push	bx
  2456 000012F1 51                      		push	cx
  2457 000012F2 52                      		push	dx
  2458 000012F3 57                      		push	di
  2459 000012F4 1E                      		push	ds
  2460 000012F5 06                      		push	es
  2461 000012F6 50                      		push	ax
  2462 000012F7 B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2463                                  					; establish bios segment addressing
  2464 000012FA 8ED8                    		mov	ds, ax
  2465                                  		; 16/10/2022
  2466 000012FC C606740000              		mov	byte [disk_status1], 0
  2467                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2468                                  					; initially no error code.
  2469 00001301 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2470 00001304 3A167500                		cmp	dl, [hf_num]
  2471                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2472 00001308 7207                    		jb	short atd3	; disk number in range
  2473                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2474 0000130A C606740001              		mov	byte [disk_status1], 1
  2475 0000130F EB20                    		jmp	short atd4	; disk number out of range error,
  2476                                  					; return
  2477                                  ; ----------------------------------------------------------------------------
  2478                                  
  2479                                  atd3:					
  2480 00001311 53                      		push	bx
  2481 00001312 8CC0                    		mov	ax, es
  2482 00001314 C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2483 00001317 01D8                    		add	ax, bx
  2484 00001319 8EC0                    		mov	es, ax
  2485 0000131B 5B                      		pop	bx
  2486 0000131C 83E30F                  		and	bx, 0Fh
  2487 0000131F 0E                      		push	cs
  2488 00001320 E8DF00                  		call	check_dma
  2489 00001323 720C                    		jb	short atd4	; abort if dma across segment boundary
  2490 00001325 58                      		pop	ax
  2491 00001326 50                      		push	ax
  2492 00001327 E81A00                  		call	setcmd		; set up command block for disk op
  2493 0000132A BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2494 0000132D EE                      		out	dx, al		; write out command modifier
  2495 0000132E E86B00                  		call	docmd		; carry out command
  2496                                  ; ----------------------------------------------------------------------------
  2497                                  
  2498                                  atd4:	
  2499                                  
  2500                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2501                                  ;	      and save a couple bytes while were at it.
  2502                                  				
  2503 00001331 58                      		pop	ax
  2504                                  		;mov	ah, ds:74h	; [disk_status1]
  2505 00001332 8A267400                		mov	ah, [disk_status1]
  2506 00001336 08E4                    		or	ah, ah
  2507 00001338 7401                    		jz	short atd5
  2508 0000133A F9                      		stc
  2509                                  atd5:					
  2510 0000133B 07                      		pop	es
  2511 0000133C 1F                      		pop	ds
  2512 0000133D 5F                      		pop	di
  2513 0000133E 5A                      		pop	dx
  2514 0000133F 59                      		pop	cx
  2515 00001340 5B                      		pop	bx
  2516 00001341 CA0200                  		retf	2		; far return, dropping flags
  2517                                  
  2518                                  ; =============== S U B	R O U T	I N E ========================================
  2519                                  
  2520                                  ;***	setcmd - set up cmd_block for the disk operation
  2521                                  ;
  2522                                  ;	entry:	(ds) = bios data segment.
  2523                                  ;		(es:bx) in seg:000x form.
  2524                                  ;		other registers as in int 13h call
  2525                                  ;	
  2526                                  ;	exit:	cmd_block set up for disk read call.
  2527                                  ;		control_byte set up for disk operation.
  2528                                  ;		(al) = control byte modifier
  2529                                  ;
  2530                                  ;	sets the fields of cmd_block using the register contents
  2531                                  ;	and the contents of the disk parameter block for the given drive.
  2532                                  ;
  2533                                  ;	warning: (ax) destroyed.
  2534                                  ;		does direct calls to the at rom.
  2535                                  
  2536                                  setcmd:		; proc near		
  2537                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2538                                  		; 16/10/2022
  2539 00001344 A24300                  		mov	[cmd_block+sec_cnt], al
  2540                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2541 00001347 C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2542 0000134C 80FC02                  		cmp	ah, 2
  2543 0000134F 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2544 00001351 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2545                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2546                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2547                                  setc1:					
  2548 00001356 88C8                    		mov	al, cl
  2549 00001358 243F                    		and	al, 3Fh		; mask sector number
  2550                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2551                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2552 0000135A A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2553 0000135D 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2554 00001361 88C8                    		mov	al, cl
  2555 00001363 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2556                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2557 00001366 A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2558 00001369 89D0                    		mov	ax, dx
  2559 0000136B C0E004                  		shl	al, 4		; drive	number
  2560 0000136E 80E40F                  		and	ah, 0Fh
  2561 00001371 08E0                    		or	al, ah		; head number
  2562 00001373 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2563                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2564 00001375 A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2565 00001378 06                      		push	es
  2566 00001379 53                      		push	bx
  2567 0000137A 0E                      		push	cs
  2568 0000137B E85C00                  		call	get_vec
  2569 0000137E 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2570                                  			 		; write pre-comp from disk parameters
  2571 00001382 C1E802                  		shr	ax, 2
  2572                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2573 00001385 A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2574                                  					; only use low part
  2575 00001388 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2576                                  					; control byte modifier
  2577 0000138C 5B                      		pop	bx
  2578 0000138D 07                      		pop	es
  2579                                  		;mov	ah, ds:76h	; [control_byte]
  2580 0000138E 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2581 00001392 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2582 00001395 08C4                    		or	ah, al
  2583                                  		;mov	ds:76h,	ah
  2584 00001397 88267600                		mov	[control_byte], ah ; mov [76h],al
  2585 0000139B C3                      		retn
  2586                                  
  2587                                  ; =============== S U B	R O U T	I N E ========================================
  2588                                  
  2589                                  ;***	docmd - carry out read operation to at hard disk
  2590                                  ;
  2591                                  ;	entry:	(es:bx) = address for read in data.
  2592                                  ;		cmd_block set up for disk read.
  2593                                  ;
  2594                                  ;	exit:	buffer at (es:bx) contains data read.
  2595                                  ;		disk_status1 set to error code (0 if success).
  2596                                  ;
  2597                                  ;	
  2598                                  ;
  2599                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2600                                  ;		no check is made for dma boundary overrun.
  2601                                  ;
  2602                                  ;	effects: programs disk controller.
  2603                                  ;		performs disk input.
  2604                                  
  2605                                  docmd:		; proc near		
  2606 0000139C 89DF                    		mov	di, bx
  2607 0000139E 0E                      		push	cs
  2608 0000139F E84000                  		call	command
  2609 000013A2 7535                    		jnz	short doc3
  2610                                  doc1:					
  2611 000013A4 0E                      		push	cs
  2612 000013A5 E84200                  		call	waitt		; wait for controller to complete read
  2613 000013A8 752F                    		jnz	short doc3
  2614 000013AA B90001                  		mov	cx, 256		; 256 words per sector
  2615 000013AD BAF001                  		mov	dx, 1F0h	; hf_port
  2616 000013B0 FC                      		cld			; string op goes up
  2617 000013B1 FA                      		cli			; disable interrupts
  2618                                  					; (bug was forgetting this)
  2619                                  
  2620                                  ;	M062 -- some of these old machines have intermittent failures
  2621                                  ;		when the read is done at full speed. Instead of using
  2622                                  ;		a string rep instruction, we'll use a loop. There is
  2623                                  ;		a slight performance hit, but it only affects these
  2624                                  ;		very old machines with an exact date code match, and
  2625                                  ;		it makes said machines more reliable
  2626                                  ;
  2627                                  ;M062	repz	insw		;read in sector
  2628                                  
  2629                                  rsct_loop:				
  2630 000013B2 6D                      		insw
  2631 000013B3 E2FD                    		loop	rsct_loop
  2632 000013B5 FB                      		sti
  2633                                  		; 16/10/2022
  2634 000013B6 F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2635                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2636                                  					; (ds =	40h)
  2637 000013BB 7410                    		jz	short doc2	; no ecc bytes to read.
  2638 000013BD 0E                      		push	cs
  2639 000013BE E83100                  		call	wait_drq	; wait for controller to complete read
  2640 000013C1 7216                    		jb	short doc3
  2641 000013C3 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2642 000013C6 BAF001                  		mov	dx, 1F0h	; hf_port
  2643 000013C9 FA                      		cli
  2644 000013CA F36C                    		rep insb		; read in ecc
  2645 000013CC FB                      		sti
  2646                                  doc2:					
  2647 000013CD 0E                      		push	cs
  2648 000013CE E82900                  		call	check_status
  2649 000013D1 7506                    		jnz	short doc3	; operation failed
  2650                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2651 000013D3 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2652 000013D7 75CB                    		jnz	short doc1	; loop while more sectors to read
  2653                                  doc3:					
  2654 000013D9 C3                      		retn
  2655                                  
  2656                                  ; =============== S U B	R O U T	I N E ========================================
  2657                                  
  2658                                  ;***	define where the rom routines are actually located
  2659                                  ;	   in the buggy old AT BIOS that we might need to
  2660                                  ;	   install a special level of int13 handler for
  2661                                  
  2662                                  ; 16/10/2022
  2663                                  
  2664                                  romsegment 	equ 0F000h  ; segment
  2665                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2666                                  romwait		equ 2E7Fh   ; offset in romsegment
  2667                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2668                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2669                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2670                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2671                                  romfret		equ 0FF65h  ; far return in rom	
  2672                                  
  2673                                  ;***	get_vec - get pointer to hard disk parameters.
  2674                                  ;
  2675                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2676                                  ;
  2677                                  ;	exit:	(es:bx) = address of disk parameters table.
  2678                                  ;
  2679                                  ;	uses:	ax for segment computation.
  2680                                  ;
  2681                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2682                                  ;	or 70h (disk 1).
  2683                                  ;	
  2684                                  ;	warning: (ax) destroyed.
  2685                                  ;		this does a direct call to the at rom.
  2686                                  
  2687                                  get_vec:	; proc near		
  2688                                  		;push	0FF65h		; romfret ; far	return in rom
  2689                                  		;jmp	far ptr	0F000h:2F8Eh
  2690                                  		; 16/10/2022
  2691 000013DA 6865FF                  		push	romfret		; far return in rom
  2692 000013DD EA8E2F00F0              		jmp	romsegment:romget_vec
  2693                                  
  2694                                  ; =============== S U B	R O U T	I N E ========================================
  2695                                  
  2696                                  ;***	command - send contents of cmd_block to disk controller.
  2697                                  ;
  2698                                  ;	entry:	control_byte 
  2699                                  ;		cmd_block - set up with values for hard disk controller.
  2700                                  ;
  2701                                  ;	exit:	disk_status1 = error code.
  2702                                  ;		nz if error, zr for no error.
  2703                                  ;
  2704                                  ;
  2705                                  ;	warning: (ax), (cx), (dx) destroyed.
  2706                                  ;		does a direct call to the at rom.
  2707                                  ;
  2708                                  ;	effects: programs disk controller.
  2709                                  
  2710                                  command:	; proc near		
  2711                                  		;push	0FF65h		; romfret ; far	return in rom
  2712                                  		;jmp	far ptr	0F000h:2E1Eh
  2713                                  		; 16/10/2022
  2714 000013E2 6865FF                  		push	romfret		; far return in rom
  2715 000013E5 EA1E2E00F0              		jmp	romsegment:romcommand
  2716                                  
  2717                                  ; =============== S U B	R O U T	I N E ========================================
  2718                                  
  2719                                  ;***	waitt - wait for disk interrupt
  2720                                  ;
  2721                                  ;	entry:	nothing.
  2722                                  ;
  2723                                  ;	exit:	disk_status1 = error code.
  2724                                  ;		nz if error, zr if no error.
  2725                                  ;
  2726                                  ;
  2727                                  ;	warning: (ax), (bl), (cx) destroyed.
  2728                                  ;		does a direct call to the at rom.
  2729                                  ;		
  2730                                  ;	effects: calls int 15h, function 9000h.
  2731                                  
  2732                                  waitt:		; proc near		
  2733                                  		;push	0FF65h		; romfret ; far	return in rom
  2734                                  		;jmp	far ptr	0F000h:2E7Fh
  2735                                  		; 16/10/2022
  2736 000013EA 6865FF                  		push	romfret		; far return in rom
  2737 000013ED EA7F2E00F0              		jmp	romsegment:romwait
  2738                                  
  2739                                  ; =============== S U B	R O U T	I N E ========================================
  2740                                  
  2741                                  ;***	wait_drq - wait for data request.
  2742                                  ;
  2743                                  ;	entry:	nothing.
  2744                                  ;
  2745                                  ;	exit:	disk_status1 = error code.
  2746                                  ;		cy if error, nc if no error.
  2747                                  ;
  2748                                  ;	warning: (al), (cx), (dx) destroyed.
  2749                                  ;		does a direct call to the at rom.
  2750                                  
  2751                                  wait_drq:	; proc near		
  2752                                  		;push	0FF65h		; romfret ; far	return in rom
  2753                                  		;jmp	far ptr	0F000h:2EE2h
  2754                                  		; 16/10/2022
  2755 000013F2 6865FF                  		push	romfret		; far return in rom
  2756 000013F5 EAE22E00F0              		jmp	romsegment:romwait_drq
  2757                                  
  2758                                  ; =============== S U B	R O U T	I N E ========================================
  2759                                  
  2760                                  ;***	check_status - check hard disk status.
  2761                                  ;
  2762                                  ;	entry:	nothing.
  2763                                  ;
  2764                                  ;	exit:	disk_status1 = error code.
  2765                                  ;		nz if error, zr if no error.
  2766                                  ;
  2767                                  ;	warning: (ax), (cx), (dx) destroyed.
  2768                                  ;		does a direct call to the at rom.
  2769                                  
  2770                                  check_status:	; proc near		
  2771                                  		;push	0FF65h		; romfret ; far	return in rom
  2772                                  		;jmp	far ptr	0F000h:2EF8h
  2773                                  		; 16/10/2022
  2774 000013FA 6865FF                  		push	romfret		; far return in rom
  2775 000013FD EAF82E00F0              		jmp	romsegment:romcheck_status
  2776                                  
  2777                                  ; =============== S U B	R O U T	I N E ========================================
  2778                                  
  2779                                  ;***	check_dma - check for dma overrun 64k segment.
  2780                                  ;
  2781                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2782                                  ;		cmd_block set up for operation.
  2783                                  ;
  2784                                  ;	exit:	disk_status1 - error code.
  2785                                  ;		cy if error, nc if no error.
  2786                                  ;
  2787                                  ;	warning: does a direct call to the at rom.
  2788                                  
  2789                                  check_dma:	; proc near		
  2790                                  		;push	0FF65h		; romfret ; far	return in rom
  2791                                  		;jmp	far ptr	0F000h:2F69h
  2792                                  		; 16/10/2022
  2793 00001402 6865FF                  		push	romfret		; far return in rom
  2794 00001405 EA692F00F0              		jmp	romsegment:romcheck_dma
  2795                                  
  2796                                  ;-----------------------------------------------------------------------------
  2797                                  
  2798                                  endatrom:
  2799                                  
  2800                                  ; ----------------------------------------------------------------------------
  2801                                  
  2802                                  ;; M015 -- begin changes
  2803                                  ;;
  2804                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2805                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2806                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2807                                  ;; If our init code detects this error, it will install this
  2808                                  ;; special Int13 hook through the same mechanism that was set
  2809                                  ;; up for the IBM patch above. This code is also dynamically
  2810                                  ;; relocated by MSINIT.
  2811                                  
  2812                                  compaq_disk_io:
  2813 0000140A 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2814                                  					;
  2815                                  					; the following	label defines the end of the at	rom patch.
  2816                                  					; this is used at configuration	time.
  2817                                  					;
  2818                                  					; warning!!!
  2819                                  					; this code will be dynamically	relocated by msinit
  2820 0000140D 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2821                                  no_hookit:				
  2822                                  		;jmp	cs:Old13
  2823                                  		; 16/10/2022
  2824 0000140F 2EFF2E[0601]            		jmp	far [cs:Old13]
  2825                                  
  2826                                  ; ----------------------------------------------------------------------------
  2827                                  
  2828                                  mebbe_hookit:				
  2829 00001414 80FA80                  		cmp	dl, 80h
  2830 00001417 72F6                    		jb	short no_hookit
  2831 00001419 1E                      		push	ds
  2832 0000141A 50                      		push	ax
  2833 0000141B B84000                  		mov	ax, 40h
  2834 0000141E 8ED8                    		mov	ds, ax
  2835 00001420 58                      		pop	ax
  2836 00001421 9C                      		pushf
  2837                                  		;call	cs:Old13
  2838                                  		; 16/10/2022
  2839 00001422 2EFF1E[0601]            		call	far [cs:Old13]
  2840 00001427 1F                      		pop	ds
  2841 00001428 CA0200                  		retf	2
  2842                                  
  2843                                  ; ----------------------------------------------------------------------------
  2844                                  
  2845 0000142B 00                      end_compaq_i13hook: db 0			
  2846                                  
  2847                                  ; =============== S U B	R O U T	I N E ========================================
  2848                                  
  2849                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2850                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2851                                  
  2852                                  daycnt_to_day:	; proc far
  2853                                  
  2854                                  ; entry: [daycnt] = number of days since 1-1-80
  2855                                  ;
  2856                                  ; return: ch - century in bcd
  2857                                  ;	  cl - year in bcd
  2858                                  ;	  dh - month in bcd
  2859                                  ;	  dl - day in bcd
  2860                                  
  2861                                  		; 16/10/2022		
  2862 0000142C 2EFF36[F004]            		push	word [cs:daycnt] ; save daycnt
  2863 00001431 2E813E[F004]891C        		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2864                                  					; # days from 1-1-1980 to 1-1-2000
  2865 00001438 730E                    		jnb	short century20
  2866 0000143A 2EC606[F404]13          		mov	byte [cs:base_century], 19
  2867 00001440 2EC606[F504]50          		mov	byte [cs:base_year], 80
  2868 00001446 EB13                    		jmp	short years
  2869                                  ; ----------------------------------------------------------------------------
  2870                                  		
  2871                                  century20:				
  2872 00001448 2EC606[F404]14          		mov	byte [cs:base_century], 20
  2873 0000144E 2EC606[F504]00          		mov	byte [cs:base_year], 0
  2874 00001454 2E812E[F004]891C        		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2875                                  					; adjust daycnt
  2876                                  years:					
  2877 0000145B 31D2                    		xor	dx, dx
  2878 0000145D 2EA1[F004]              		mov	ax, [cs:daycnt]
  2879 00001461 BBB505                  		mov	bx, 1461	; (366+365*3)
  2880                                  					; # of days in a Leap year block
  2881 00001464 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  2882 00001466 2E8916[F004]            		mov	[cs:daycnt], dx	; save daycnt left
  2883 0000146B B304                    		mov	bl, 4
  2884 0000146D F6E3                    		mul	bl		; AX = # of years. Less	than 100
  2885 0000146F 2E0006[F504]            		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2886 00001474 2EFF06[F004]            		inc	word [cs:daycnt]	; set daycnt to	1 base
  2887 00001479 2E813E[F004]6E01        		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2888 00001480 7626                    		jbe	short leapyear	; within 366+355+355+355 days.
  2889 00001482 2EFE06[F504]            		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2890 00001487 2E812E[F004]6E01        		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2891 0000148E B90300                  		mov	cx, 3		; And next three years are normal
  2892                                  regularyear:				
  2893 00001491 2E813E[F004]6D01        		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2894 00001498 7614                    		jbe	short yeardone	; {if (daycnt >	365)
  2895 0000149A 2EFE06[F504]            		inc	byte [cs:base_year]	;   { daycnt -=	365
  2896 0000149F 2E812E[F004]6D01        		sub	word [cs:daycnt], 365	;   }
  2897 000014A6 E2E9                    		loop	regularyear	; }
  2898                                  					;
  2899                                  					; should never fall through loop
  2900                                  leapyear:				
  2901 000014A8 2EC606[F704]1D          		mov	byte [cs:month_tab+1], 29 ; leap year.
  2902                                  					; change month table.
  2903                                  yeardone:				
  2904 000014AE 31DB                    		xor	bx, bx
  2905 000014B0 31D2                    		xor	dx, dx
  2906 000014B2 2EA1[F004]              		mov	ax, [cs:daycnt]
  2907                                  		;mov	si, offset month_tab
  2908 000014B6 BE[F604]                		mov	si, month_tab	; 19/10/2022
  2909 000014B9 B90C00                  		mov	cx, 12
  2910                                  months:					
  2911 000014BC FEC3                    		inc	bl
  2912                                  
  2913                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  2914                                  		;mov	dl, [cs:si]
  2915                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  2916                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  2917                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  2918                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  2919                                  		
  2920 000014BE 8A14                    		mov	dl, [si] ; ?	; mov dl, [cs:si]
  2921 000014C0 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  2922                                  					; dh=0
  2923 000014C2 7605                    		jbe	short month_done
  2924 000014C4 46                      		inc	si		; next month
  2925 000014C5 29D0                    		sub	ax, dx		; adjust daycnt
  2926 000014C7 E2F3                    		loop	months		;
  2927                                  					; should never fall through loop
  2928                                  month_done:				
  2929 000014C9 2EC606[F704]1C          		mov	byte [cs:month_tab+1], 28
  2930                                  					; restore month table value
  2931 000014CF 88DA                    		mov	dl, bl
  2932 000014D1 2E8A36[F504]            		mov	dh, [cs:base_year]
  2933 000014D6 2E8A0E[F404]            		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  2934 000014DB 2EFF1E[0205]            		call	far [cs:bintobcd]
  2935                                  		;call	cs:bintobcd	; convert "day"	to bcd
  2936                                  					; dl = bcd day,	al = month
  2937 000014E0 86D0                    		xchg	dl, al
  2938 000014E2 2EFF1E[0205]            		call	far [cs:bintobcd]
  2939                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  2940 000014E7 86F0                    		xchg	dh, al
  2941 000014E9 2EFF1E[0205]            		call	far [cs:bintobcd]
  2942                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  2943 000014EE 86C8                    		xchg	cl, al
  2944 000014F0 2EFF1E[0205]            		call	far [cs:bintobcd]
  2945                                  		;call	cs:bintobcd	; ch = bcd century
  2946 000014F5 88C5                    		mov	ch, al
  2947 000014F7 2E8F06[F004]            		pop	word [cs:daycnt] ; restore original value
  2948 000014FC CB                      		retf
  2949                                  
  2950                                  enddaycnttoday:	
  2951                                  
  2952                                  ; =============== S U B	R O U T	I N E ========================================
  2953                                  
  2954                                  bin_to_bcd:	; proc far		; real time clock support
  2955                                  
  2956                                  ;convert a binary input in al (less than 63h or 99 decimal)
  2957                                  ;into a bcd value in al. ah destroyed.	
  2958                                  		
  2959 000014FD 51                      		push	cx		
  2960 000014FE D40A                    		aam			; al=high digit	bcd, ah=low digit bc
  2961 00001500 B104                    		mov	cl, 4
  2962 00001502 D2E4                    		shl	ah, cl		; mov the high digit to	high nibble
  2963 00001504 08E0                    		or	al, ah
  2964 00001506 59                      		pop	cx
  2965 00001507 CB                      		retf
  2966                                  
  2967                                  ; ----------------------------------------------------------------------------
  2968                                  
  2969                                  ; the k09 requires the routines for reading the clock because of the suspend/
  2970                                  ; resume facility. the system clock needs to be reset after resume.
  2971                                  
  2972                                  ; the following routine is executed at resume time when the system
  2973                                  ; powered on after suspension. it reads the real time clock and
  2974                                  ; resets the system time and date, and then irets.
  2975                                  
  2976                                  ; warning!!! this code will be dynamically relocated by msinit.
  2977                                  
  2978                                  int6c:					
  2979 00001508 0E                      		push	cs
  2980 00001509 1F                      		pop	ds
  2981 0000150A 8F06[BB06]              		pop	word [int6c_ret_addr]	; pop off return address
  2982 0000150E 8F06[BD06]              		pop	word [int6c_ret_addr+2]
  2983 00001512 9D                      		popf
  2984 00001513 E81300                  		call	read_real_date	; get the date from the clock
  2985 00001516 FA                      		cli
  2986 00001517 8936[F004]              		mov	[daycnt], si	; update dos copy of date
  2987 0000151B FB                      		sti
  2988 0000151C E8CB00                  		call	read_real_time	; get the time from the	rtc
  2989 0000151F FA                      		cli
  2990 00001520 B401                    		mov	ah, 1
  2991 00001522 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  2992                                  					; CX:DX	= clock	count
  2993                                  					; Return: time of day set
  2994 00001524 FB                      		sti
  2995                                  		;jmp	int6c_ret_addr	; long jump
  2996                                  		; 16/10/2022
  2997 00001525 FF2E[BB06]              		jmp	far [int6c_ret_addr] ; long jump
  2998                                  
  2999                                  ; =============== S U B	R O U T	I N E ========================================
  3000                                  
  3001                                  ;   read_real_date reads real-time clock for date and returns the number
  3002                                  ;   of days elapsed since 1-1-80 in si
  3003                                  
  3004                                  read_real_date:	; proc near		
  3005 00001529 50                      		push	ax
  3006 0000152A 51                      		push	cx
  3007 0000152B 52                      		push	dx
  3008 0000152C 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3009 0000152E CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3010                                  					; Return: CX:DX	= clock	count
  3011                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3012                                  					; midnight
  3013                                  					; Otherwise, AL	> 0
  3014 00001530 5A                      		pop	dx
  3015 00001531 59                      		pop	cx
  3016 00001532 58                      		pop	ax
  3017 00001533 50                      		push	ax
  3018 00001534 53                      		push	bx
  3019 00001535 51                      		push	cx
  3020 00001536 52                      		push	dx
  3021 00001537 2EC706[DB06]0100        		mov	word [cs:daycnt2], 1
  3022                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3023 0000153E B404                    		mov	ah, 4
  3024 00001540 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3025                                  					; Return: DL = day in BCD
  3026                                  					; DH = month in	BCD
  3027                                  					; CL = year in BCD
  3028                                  					; CH = century (19h or 20h)
  3029 00001542 7303                    		jnb	short read_ok
  3030 00001544 E99300                  		jmp	r_d_ret
  3031                                  ;-----------------------------------------------------------------------------
  3032                                  
  3033                                  read_ok:				
  3034 00001547 882E[BF06]              		mov	[bin_date_time], ch
  3035 0000154B 880E[C006]              		mov	[bin_date_time+1], cl
  3036 0000154F 8836[C106]              		mov	[bin_date_time+2], dh
  3037 00001553 8816[C206]              		mov	[bin_date_time+3], dl
  3038 00001557 2EC706[DB06]0200        		mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3039 0000155E E84201                  		call	bcd_verify	; verify bcd values in range
  3040 00001561 7277                    		jb	short r_d_ret	;  some	value out of range
  3041 00001563 2EC706[DB06]0300        		mov	word [cs:daycnt2], 3
  3042 0000156A E8E600                  		call	date_verify
  3043 0000156D 726B                    		jb	short r_d_ret
  3044 0000156F 2EC706[DB06]0000        		mov	word [cs:daycnt2], 0
  3045 00001576 E8AA00                  		call	in_bin
  3046 00001579 A0[C006]                		mov	al, [bin_date_time+1]
  3047 0000157C 98                      		cbw
  3048 0000157D 803E[BF06]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3049 00001582 7503                    		jnz	short century_19 ; no
  3050 00001584 83C064                  		add	ax, 100		; add in a century
  3051                                  
  3052                                  century_19:				
  3053 00001587 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3054 0000158A B104                    		mov	cl, 4		; leap year every 4
  3055 0000158C F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3056 0000158E 88E3                    		mov	bl, ah		; save odd years
  3057 00001590 98                      		cbw			; zero ah
  3058 00001591 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3059                                  					; # of days in leap year blocks
  3060 00001594 F7E1                    		mul	cx
  3061 00001596 2EA3[DB06]              		mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3062 0000159A 88D8                    		mov	al, bl		; get odd years	count
  3063 0000159C 98                      		cbw
  3064 0000159D 09C0                    		or	ax, ax
  3065 0000159F 740C                    		jz	short leap_year
  3066 000015A1 B96D01                  		mov	cx, 365		; days in year
  3067 000015A4 F7E1                    		mul	cx
  3068 000015A6 2E0106[DB06]            		add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3069 000015AB EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3070                                  					; possibly account for a leap day
  3071                                  ;-----------------------------------------------------------------------------
  3072                                  
  3073                                  leap_year:				
  3074 000015AD 803E[C106]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3075 000015B2 7605                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3076                                  leap_adjustment:			
  3077 000015B4 2EFF06[DB06]            		inc	word [cs:daycnt2] ; account for leap day
  3078                                  no_leap_adjustment:			
  3079 000015B9 8A0E[C206]              		mov	cl, [bin_date_time+3] ; get days of month
  3080 000015BD 30ED                    		xor	ch, ch
  3081 000015BF 49                      		dec	cx		; because of offset from day 1,	not day	0
  3082 000015C0 2E010E[DB06]            		add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3083 000015C5 8A0E[C106]              		mov	cl, [bin_date_time+2] ; get month
  3084 000015C9 30ED                    		xor	ch, ch
  3085 000015CB 49                      		dec	cx		; january starts at offset 0
  3086 000015CC D1E1                    		shl	cx, 1		; word offset
  3087 000015CE BE[C306]                		mov	si, month_table
  3088 000015D1 01CE                    		add	si, cx
  3089                                  		; 16/10/2022
  3090                                  		; ds must be same with cs here, if so..
  3091                                  		; what for cs: prefixes are used !?)
  3092                                  		; mov	ax, [cs:si]
  3093                                  		; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3094 000015D3 8B04                    		mov	ax, [si]	; mov ax, [cs:si]
  3095                                  					; get #	days in	previous months
  3096 000015D5 2E0106[DB06]            		add	[cs:daycnt2], ax
  3097                                  r_d_ret:				
  3098 000015DA 2E8B36[DB06]            		mov	si, [cs:daycnt2]
  3099 000015DF 5A                      		pop	dx
  3100 000015E0 59                      		pop	cx
  3101 000015E1 5B                      		pop	bx
  3102 000015E2 58                      		pop	ax
  3103 000015E3 C3                      		retn
  3104                                  
  3105                                  ;-----------------------------------------------------------------------------
  3106                                  
  3107                                  r_t_retj:				
  3108 000015E4 31C9                    		xor	cx, cx
  3109 000015E6 31D2                    		xor	dx, dx
  3110 000015E8 EB38                    		jmp	short r_t_ret
  3111                                  
  3112                                  ; =============== S U B	R O U T	I N E ========================================
  3113                                  
  3114                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3115                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3116                                  
  3117                                  read_real_time:	; proc near		
  3118 000015EA B402                    		mov	ah, 2
  3119 000015EC CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3120                                  					; Return: CH = hours in	BCD
  3121                                  					; CL = minutes in BCD
  3122                                  					; DH = seconds in BCD
  3123 000015EE 72F4                    		jb	short r_t_retj
  3124 000015F0 882E[BF06]              		mov	[bin_date_time], ch ; hours
  3125 000015F4 880E[C006]              		mov	[bin_date_time+1], cl ; minutes
  3126 000015F8 8836[C106]              		mov	[bin_date_time+2], dh ; seconds
  3127 000015FC C606[C206]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3128 00001601 E89F00                  		call	bcd_verify
  3129 00001604 72DE                    		jb	short r_t_retj
  3130 00001606 E88500                  		call	time_verify
  3131 00001609 72D9                    		jb	short r_t_retj
  3132 0000160B E81500                  		call	in_bin		; from bcd to bin
  3133 0000160E 8A2E[BF06]              		mov	ch, [bin_date_time]
  3134 00001612 8A0E[C006]              		mov	cl, [bin_date_time+1]
  3135 00001616 8A36[C106]              		mov	dh, [bin_date_time+2]
  3136 0000161A 8A16[C206]              		mov	dl, [bin_date_time+3]
  3137                                  		; 16/10/2022
  3138                                  		; 17/09/2022
  3139                                  		; 31/05/2019
  3140 0000161E FF1E[E206]              		call	far [ttticks] 
  3141                                  		;call	dword ptr ttticks ; note: indirect far call
  3142                                  					; cx:dx	= number of ticks
  3143                                  					; (at 18.2 ticks per sec.)
  3144                                  r_t_ret:				
  3145 00001622 C3                      		retn
  3146                                  
  3147                                  ; =============== S U B	R O U T	I N E =======================================
  3148                                  
  3149                                  ;   in_bin converts bin_date_time values from bcd to bin
  3150                                  
  3151                                  in_bin:		; proc near		
  3152 00001623 A0[BF06]                		mov	al, [bin_date_time] ; century or hours
  3153 00001626 E81F00                  		call	bcd_to_bin
  3154 00001629 A2[BF06]                		mov	[bin_date_time], al
  3155 0000162C A0[C006]                		mov	al, [bin_date_time+1] ; years or minutes
  3156 0000162F E81600                  		call	bcd_to_bin
  3157 00001632 A2[C006]                		mov	[bin_date_time+1], al
  3158 00001635 A0[C106]                		mov	al, [bin_date_time+2] ; months or seconds
  3159 00001638 E80D00                  		call	bcd_to_bin
  3160 0000163B A2[C106]                		mov	[bin_date_time+2], al
  3161 0000163E A0[C206]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3162 00001641 E80400                  		call	bcd_to_bin
  3163 00001644 A2[C206]                		mov	[bin_date_time+3], al
  3164 00001647 C3                      		retn
  3165                                  
  3166                                  ; =============== S U B	R O U T	I N E =======================================
  3167                                  
  3168                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3169                                  ;   a binary representation in al
  3170                                  ;   ah is destroyed
  3171                                  
  3172                                  bcd_to_bin:	; proc near		
  3173 00001648 88C4                    		mov	ah, al
  3174 0000164A 240F                    		and	al, 0Fh
  3175 0000164C B104                    		mov	cl, 4
  3176 0000164E D2EC                    		shr	ah, cl
  3177 00001650 D50A                    		aad
  3178 00001652 C3                      		retn
  3179                                  
  3180                                  ; =============== S U B	R O U T	I N E ========================================
  3181                                  
  3182                                  ;   date_verify loosely checks bcd date values to be in range
  3183                                  ;   in bin_date_time
  3184                                  
  3185                                  date_verify:	; proc near		
  3186 00001653 803E[BF06]20            		cmp	byte [bin_date_time], 20h ; century check
  3187 00001658 7732                    		ja	short date_error
  3188 0000165A 740E                    		jz	short century_20 ; jmp in 21th century
  3189 0000165C 803E[BF06]19            		cmp	byte [bin_date_time], 19h ; century check
  3190                                  		;jb	short date_error
  3191                                  		; 12/12/2022
  3192 00001661 722A                    		jb	short date_err2
  3193 00001663 803E[C006]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3194                                  		;jb	short date_error
  3195                                  		; 12/12/2022
  3196 00001668 7223                    		jb	short date_err2
  3197                                  century_20:				
  3198 0000166A 803E[C006]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3199 0000166F 771B                    		ja	short date_error
  3200 00001671 803E[C106]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3201 00001676 7714                    		ja	short date_error
  3202 00001678 803E[C106]00            		cmp	byte [bin_date_time+2], 0
  3203                                  		;jbe	short date_error
  3204 0000167D 760D                    		jna	short date_error
  3205 0000167F 803E[C206]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3206 00001684 7706                    		ja	short date_error
  3207                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3208                                  		;;jbe	short date_error
  3209                                  		;jna	short date_error
  3210                                  		; 12/12/2022
  3211                                  		; cf=0
  3212                                  		;clc
  3213                                  		; 12/12/2022
  3214 00001686 803E[C206]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3215 0000168B C3                      		retn
  3216                                  ;-----------------------------------------------------------------------------
  3217                                  
  3218                                  date_error:				
  3219 0000168C F9                      		stc
  3220                                  date_err2:
  3221 0000168D C3                      		retn
  3222                                  
  3223                                  ; =============== S U B	R O U T	I N E ========================================
  3224                                  
  3225                                  ; time_verify very loosely checks bcd date values to be in range
  3226                                  ; in bin_date_time
  3227                                  
  3228                                  time_verify:	; proc near		
  3229 0000168E 803E[BF06]24            		cmp	byte [bin_date_time], 24h ; hour check
  3230 00001693 770C                    		ja	short time_error
  3231 00001695 803E[C006]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3232 0000169A 7705                    		ja	short time_error
  3233                                  		; 12/12/2022h
  3234                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3235                                  		;ja	short time_error
  3236                                  		;clc
  3237                                  		;retn
  3238                                  		; 12/12/2022
  3239 0000169C 803E[C106]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3240                                  time_error:
  3241                                  bv_error:	
  3242 000016A1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3243 000016A2 C3                      		retn
  3244                                  
  3245                                  ; ----------------------------------------------------------------------------
  3246                                  
  3247                                  ;time_error:				
  3248                                  		;stc
  3249                                  		;retn
  3250                                  
  3251                                  ; =============== S U B	R O U T	I N E ========================================
  3252                                  
  3253                                  ;   bcd_verify checks values in bin_date_time to be valid
  3254                                  ;   bcd numerals.  carry set if any nibble out of range
  3255                                  
  3256                                  bcd_verify:	; proc near		
  3257 000016A3 B90400                  		mov	cx, 4		; 4 bytes to check
  3258 000016A6 BB[BF06]                		mov	bx, bin_date_time
  3259                                  bv_loop:				
  3260 000016A9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3261 000016AB 88C4                    		mov	ah, al
  3262 000016AD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3263                                  					; is 1's place in range?
  3264 000016B0 3C0A                    		cmp	al, 10
  3265 000016B2 77ED                    		ja	short bv_error	; jmp out of range
  3266 000016B4 D0EC                    		shr	ah, 1
  3267 000016B6 D0EC                    		shr	ah, 1
  3268 000016B8 D0EC                    		shr	ah, 1
  3269 000016BA D0EC                    		shr	ah, 1
  3270 000016BC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3271 000016BF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3272 000016C2 77DD                    		ja	short bv_error	; jmp out of range
  3273 000016C4 43                      		inc	bx		; next byte
  3274 000016C5 49                      		dec	cx
  3275 000016C6 75E1                    		jnz	short bv_loop
  3276 000016C8 F8                      		clc			; set success flag
  3277 000016C9 C3                      		retn
  3278                                  ; ----------------------------------------------------------------------------
  3279                                  
  3280                                  		; 12/12/2022
  3281                                  ;bv_error:				
  3282                                  		;stc			; set error flag
  3283                                  		;retn
  3284                                  
  3285                                  ; ----------------------------------------------------------------------------
  3286                                  
  3287                                  endk09:
  3288                                  
  3289                                  ; ----------------------------------------------------------------------------
  3290                                  
  3291                                  ;------------------------------------------------------------------------
  3292                                  ;									:
  3293                                  ;	System initialization						:
  3294                                  ;									:
  3295                                  ;	The entry conditions are established by the bootstrap		:
  3296                                  ;	loader and are considered unknown. The following jobs		:
  3297                                  ;	will be performed by this module:				:
  3298                                  ;									:
  3299                                  ;	1.	All device initialization is performed			:
  3300                                  ;	2.	A local stack is set up and DS:SI are set		:
  3301                                  ;		to point to an initialization table. Then		:
  3302                                  ;		an inter-segment call is made to the first		:
  3303                                  ;		byte of the dos 					:
  3304                                  ;	3.	Once the dos returns from this call the ds		:
  3305                                  ;		register has been set up to point to the start		:
  3306                                  ;		of free memory. The initialization will then		:
  3307                                  ;		load the command program into this area 		:
  3308                                  ;		beginning at 100 hex and transfer control to		:
  3309                                  ;		this program.						:
  3310                                  ;									:
  3311                                  ;------------------------------------------------------------------------
  3312                                  
  3313                                  ; 01/10/2022
  3314                                  ; 08/01/2018 - Retro DOS v4.0
  3315                                  
  3316                                  ; drvfat must be the first location of freeable space!
  3317                                  
  3318                                  
  3319                                  align 2
  3320                                  		;db 90h
  3321                                  
  3322                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3323                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3324                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3325                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3326                                  	
  3327 000016CA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3328                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3329                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3330                                  ;doscnt:	dw 0			; how many sectors to read
  3331 000016CC 00                      fbigfat:	db 0			; flags	for drive
  3332                                  ;fatloc:	dw 0			; seg addr of fat sector
  3333 000016CD 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3334 000016CF 80                      rom_drv_num:	db 80h			; rom drive number
  3335                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3336                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3337                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3338                                  
  3339                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3340                                  ; call to determine drive parameters.
  3341                                  
  3342 000016D0 02                      num_heads:	db 2			; number of heads returned by rom
  3343 000016D1 09                      sec_trk:	db 9			; sec/trk returned by rom
  3344 000016D2 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3345 000016D3 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3346                                  
  3347                                  ; ----------------------------------------------------------------------------
  3348                                  
  3349 000016D4 0002000140000000        disktable:	dw 512,	256, 64, 0	; warning !!! old values
  3350 000016DC 0008010270000000        		dw 2048, 513, 112, 0
  3351 000016E4 0020020400010000        		dw 8192, 1026, 256, 0
  3352 000016EC A87F030800020000        		dw 32680, 2051,	512, 0	; warning !!! old values
  3353 000016F4 FFFF041000040000        		dw 65535, 4100,	1024, 0	; default disktable under
  3354                                  					; the assumption of total fat size <= 128 kb,
  3355                                  					; and the maximum size of fat entry = 16 bit.
  3356                                  
  3357 000016FC 0000A87F0308000200-     disktable2:	dw 0, 32680, 2051, 512,	0 
  3357 00001705 00                 
  3358                                  					; for compatibility.
  3359 00001706 040000000204000240-     		dw 4, 0, 402h, 200h, 40h ; covers upto 134 mb media.
  3359 0000170F 00                 
  3360                                  					; fbig = 40h
  3361 00001710 080000000308000240-     		dw 8, 0, 803h, 200h, 40h ; upto	268 mb
  3361 00001719 00                 
  3362 0000171A 100000000410000240-     		dw 10h,	0, 1004h, 200h,	40h ; upto 536 mb
  3362 00001723 00                 
  3363 00001724 200000000520000240-     		dw 20h,	0, 2005h, 200h,	40h ; upto 1072	mb
  3363 0000172D 00                 
  3364 0000172E 400000000640000240-     		dw 40h,	0, 4006h, 200h,	40h ; upto 2144	mb
  3364 00001737 00                 
  3365 00001738 800000000780000240-     		dw 80h,	0, 8007h, 200h,	40h ; upto 4288	mb...
  3365 00001741 00                 
  3366                                  					
  3367                                  ; ----------------------------------------------------------------------------
  3368                                  
  3369                                  ;******************************************************
  3370                                  ;variables for mini disk initialization
  3371                                  ;******************************************************
  3372                                  
  3373                                  ; 01/10/2022
  3374                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3375                                  
  3376 00001742 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3377 00001743 00                      hnum:		db 0			; real number of hardfiles
  3378 00001744 [8706]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3379 00001746 [1709]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3380                                  					; of bds table. needed to figure out
  3381                                  					; the dosdatasg address.
  3382 00001748 0000                    mini_hdlim:	dw 0			
  3383 0000174A 0000                    mini_seclim:	dw 0
  3384                                  
  3385                                  ;end of mini disk init variables **********************
  3386                                  
  3387                                  ; ----------------------------------------------------------------------------
  3388                                  			
  3389 0000174C 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3390                                  
  3391                                  ; 13/12/2022
  3392                                  %if 0
  3393                                  
  3394                                  ;align 2
  3395                                  		db  90h	
  3396                                  
  3397                                  ; the following are the recommended bpbs for the media that we know of so far.
  3398                                  
  3399                                  ;struc bpbx
  3400                                  ;   resw 1 ; 512
  3401                                  ;   resb 1
  3402                                  ;   resw 1 ; 1
  3403                                  ;   resb 1 ; 2
  3404                                  ;   resw 1
  3405                                  ;   resw 1
  3406                                  ;   resb 1
  3407                                  ;   resw 1
  3408                                  ;   resw 1
  3409                                  ;   resw 1 ; 2
  3410                                  ;   resw 1
  3411                                  ;   resw 1 ; hidden sector high
  3412                                  ;   resd 1 ; extended total sectors
  3413                                  ;.size:
  3414                                  ;endstruc
  3415                                  
  3416                                  ; 08/01/2019 - Retro DOS v4.0
  3417                                  
  3418                                  ; 20/04/2019
  3419                                  
  3420                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3421                                  
  3422                                  ; 09/12/2022
  3423                                  BPB48T:
  3424                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3425                                  		; 48 tpi diskettes	;
  3426                                  		dw	512		; physical sector size in bytes
  3427                                  		db	2		; sectors/allocation unit
  3428                                  		dw	1		; reserved sectors for dos
  3429                                  		db	2		; number of allocation tables
  3430                                  		dw	112		; number of directory entries
  3431                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3432                                  		db	0FDh		; media descriptor
  3433                                  		dw	2		; number of fat sectors
  3434                                  		dw	9		; sectors per track
  3435                                  		dw	2		; heads
  3436                                  		dw	0		; hidden sector count (low word)
  3437                                  		dw	0		; hidden sector (high)
  3438                                  		dw	0		; number of sectors (low)
  3439                                  		dw	0		; number of sectors (high)					
  3440                                  
  3441                                  		db 90h
  3442                                  ;align 2
  3443                                  BPB96T:
  3444                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3445                                  		; 96 tpi diskettes	;
  3446                                  		dw	512		; physical sector size in bytes
  3447                                  		db	1		; sectors/allocation unit
  3448                                  		dw	1		; reserved sectors for dos
  3449                                  		db	2		; number of allocation tables
  3450                                  		dw	224		; number of directory entries
  3451                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3452                                  		db	0F9h		; media descriptor
  3453                                  		dw	7		; number of fat sectors
  3454                                  		dw	15		; sectors per track
  3455                                  		dw	2		; heads
  3456                                  		dw	0		; hidden sector count (low word)
  3457                                  		dw	0		; hidden sector (high)
  3458                                  		dw	0		; number of sectors (low)
  3459                                  		dw	0		; number of sectors (high)
  3460                                  
  3461                                  		db 90h
  3462                                  ;align 2
  3463                                  BPB35:
  3464                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3465                                  		; 3.5" diskettes - 720 KB ;		
  3466                                  		dw	512		; physical sector size in bytes
  3467                                  		db	2		; sectors/allocation unit
  3468                                  		dw	1		; reserved sectors for dos
  3469                                  		db	2		; number of allocation tables
  3470                                  		dw	112		; number of directory entries
  3471                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3472                                  		db	0F9h		; media descriptor
  3473                                  		dw	3		; number of fat sectors
  3474                                  		dw	9		; sectors per track
  3475                                  		dw	2		; heads
  3476                                  		dw	0		; hidden sector count (low word)
  3477                                  		dw	0		; hidden sector (high)
  3478                                  		dw	0		; number of sectors (low)
  3479                                  		dw	0		; number of sectors (high)
  3480                                  
  3481                                  		db 90h
  3482                                  ;align 2
  3483                                  
  3484                                  ;align 2
  3485                                  ;BPB144:
  3486                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3487                                  ;
  3488                                  ;		dw	512		; physical sector size in bytes
  3489                                  ;		db	1		; sectors/allocation unit
  3490                                  ;		dw	1		; reserved sectors for dos
  3491                                  ;		db	2		; number of allocation tables
  3492                                  ;		dw	224		; number of directory entries
  3493                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3494                                  ;		db	0F0h		; media descriptor
  3495                                  ;		dw	9		; number of fat sectors
  3496                                  ;		dw	18		; sectors per track
  3497                                  ;		dw	2		; heads
  3498                                  ;		dw	0		; hidden sector count (low word)
  3499                                  ;		dw	0		; hidden sector (high)
  3500                                  ;		dw	0		; number of sectors (low)
  3501                                  ;		dw	0		; number of sectors (high)
  3502                                  ;
  3503                                  ;		db 90h
  3504                                  ;align 2
  3505                                  
  3506                                  BPB288:
  3507                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3508                                  		; 3.5" diskettes - 2.88 MB ;	 
  3509                                  		dw	512		; physical sector size in bytes
  3510                                  		db	2		; sectors/allocation unit
  3511                                  		dw	1		; reserved sectors for dos
  3512                                  		db	2		; number of allocation tables
  3513                                  		dw	240		; number of directory entries
  3514                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3515                                  		db	0F0h		; media descriptor
  3516                                  		dw	3		; number of fat sectors
  3517                                  		dw	9		; sectors per track
  3518                                  		dw	2		; heads
  3519                                  		dw	0		; hidden sector count (low word)
  3520                                  		dw	0		; hidden sector (high)
  3521                                  		dw	0		; number of sectors (low)
  3522                                  		dw	0		; number of sectors (high)
  3523                                  
  3524                                  		db 90h			;
  3525                                  ;align 2
  3526                                  
  3527                                  %endif
  3528                                  
  3529                                  ; ----------------------------------------------------------------------------
  3530                                  					; align	2
  3531                                  ; 09/12/2022
  3532                                  %if 0
  3533                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3534                                  		dw bpb96t		; 96tpi	drives
  3535                                  		dw bpb35		; 3.5" drives
  3536                                  		dw bpb35		; unused 8" diskette
  3537                                  		dw bpb35		; unused 8" diskette
  3538                                  		dw bpb35		; used for hard	disk
  3539                                  		dw bpb35		; used for tape	drive
  3540                                  		dw bpb35		; FFOTHER
  3541                                  		dw bpb35		; ERIMO
  3542                                  		dw bpb288		; 2.88MB drive
  3543                                  		;
  3544                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3545                                  %endif
  3546                                  
  3547                                  ; 13/12/2022
  3548                                  %if 0
  3549                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3550                                  		dw BPB96T		; 96tpi	drives
  3551                                  		dw BPB35		; 3.5" drives
  3552                                  		dw BPB35		; unused 8" diskette
  3553                                  		dw BPB35		; unused 8" diskette
  3554                                  		dw BPB35		; used for hard	disk
  3555                                  		dw BPB35		; used for tape	drive
  3556                                  		dw BPB35		; FFOTHER
  3557                                  		dw BPB35		; ERIMO
  3558                                  		dw BPB288		; 2.88MB drive
  3559                                  		;
  3560                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3561                                  
  3562                                  %endif
  3563                                  
  3564                                  ; ----------------------------------------------------------------------------
  3565                                  
  3566                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3567                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3568                                  ;	  will not yet be moved to its final resting place, so we know
  3569                                  ;	  it'll be low.
  3570                                  ;
  3571                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3572                                  ;	  the function you want to call in Bios_Code. This routine will
  3573                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3574                                  ;	  will get executed when the utility function finishes. It will
  3575                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3576                                  ;	  and a retf
  3577                                  
  3578                                  ; 16/10/2022
  3579                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3580                                  ; 09/12/2022
  3581                                  BC_RETF equ bc_retf
  3582                                  
  3583                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3584                                  					; 2C7h:0C8h = 70h:2638h
  3585 00001755 [C800]                  		dw BC_RETF
  3586                                  
  3587                                  ; ----------------------------------------------------------------------------
  3588                                  
  3589                                  call_bios_code:	; proc far			
  3590 00001757 2EFF36[5517]            		push	word [cs:addr_of_bcretf] 
  3591                                  					; set up near return to far return
  3592 0000175C 2EFF36[E006]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3593 00001761 55                      		push	bp		; save offset of utility function
  3594 00001762 CB                      		retf			; far jump to (DOS)BIOS code
  3595                                  
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  		
  3598                                  		; 20/12/2022
  3599                                  ;flp_drvs	db 0			
  3600                                  
  3601                                  ; ----------------------------------------------------------------------------
  3602                                  
  3603                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3604                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3605                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3606                                  
  3607                                  ;-----------------------------------------------------------------------------
  3608                                  ; entry point from boot sector
  3609                                  ;-----------------------------------------------------------------------------
  3610                                  
  3611                                  init:		; 27/12/2018
  3612                                  		; MSDOS 6.0 (MSINIT.ASM)
  3613                                  		;=============================================================
  3614                                  		;
  3615                                  		; entry from boot sector. the register contents are:
  3616                                  		;
  3617                                  		;   dl = int 13 drive number we booted from
  3618                                  		;   ch = media byte
  3619                                  		;   bx = first data sector on disk.
  3620                                  		;   ax = first data sector (high)
  3621                                  		;   di = sectors/fat for the boot media.
  3622                                  
  3623                                  		; 07/04/2018
  3624                                  		;=============================================================
  3625                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3626                                                  ; DL = [bsDriveNumber]
  3627                                  		; DH = [bsMedia]
  3628                                  		; AX = [bsSectors] ; Total sectors
  3629                                  		; DS = 0, SS = 0
  3630                                  		; BP = 7C00h
  3631                                  	
  3632                                  ; 20/12/2022
  3633                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3634                                  %if 0	
  3635                                  		cli
  3636                                  
  3637                                  		push	ax
  3638                                  		xor	ax, ax
  3639                                  		mov	ds, ax
  3640                                  		pop	ax
  3641                                  %endif
  3642                                  
  3643                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3644                                  
  3645                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3646                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3647                                  
  3648                                  ;-----------------------------------------------------------------------------
  3649                                  ; initialization - stage 1
  3650                                  ;-----------------------------------------------------------------------------
  3651                                  ; 02/06/2018 - Retro DOS v3.0
  3652                                  		
  3653                                  		; 21/12/2022
  3654                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3655                                  		;mov	bx, 60h
  3656                                  		;mov	es, bx
  3657                                  		;mov	si, bp
  3658                                  		;sub	di, di
  3659                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3660                                  		;;mov	cl, 35
  3661                                  		;rep	movsw
  3662                                  
  3663 00001763 0E                      		push	cs
  3664 00001764 1F                      		pop	ds
  3665                                  
  3666                                  		; 20/03/2019 - Retro DOS v4.0
  3667                                  		;cli		; turn interrupts off while manupulating stack
  3668                                  		;mov	ss, cx	; set stack segment register
  3669 00001765 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3670                                  		;sti		; turn interrupts on
  3671                                  
  3672                                  		; 27/03/2018
  3673                                  		;mov	cx, KERNEL_SIZE	; words !
  3674                                  
  3675                                  		; 20/03/2019
  3676 00001768 B90080                  		mov	cx, 32768 ; 65536 bytes
  3677                                  
  3678                                  		; 21/12/2022
  3679                                  		; 07/04/2018
  3680 0000176B BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3681                                  		;mov	bl, KERNEL_SEGMENT
  3682 0000176E 8EC3                    		mov	es, bx
  3683 00001770 31FF                    		xor	di, di
  3684 00001772 89FE                    		mov	si, di
  3685                                  		
  3686                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3687                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3688 00001774 F3A5                    		rep	movsw
  3689                                  
  3690                                  		; 20/03/2019 - Retro DOS v4.0
  3691 00001776 53                      		push	bx
  3692 00001777 68[7B17]                		push	init0
  3693 0000177A CB                      		retf
  3694                                  init0:	
  3695                                  		; 20/12/2022
  3696                                  		; (combined kernel file > 64KB)
  3697                                  
  3698                                  		; 20/03/2019
  3699 0000177B B520                    		mov	ch, 20h
  3700 0000177D 8ED9                    		mov	ds, cx ; 2000h
  3701                                  		;mov	cx, 1070h
  3702 0000177F B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3703 00001782 8EC1                    		mov	es, cx
  3704                                  		
  3705                                  		; 21/12/2022
  3706                                  		KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3707                                  
  3708 00001784 B9[EA47]                		mov	cx, KERNEL_SIZE - 32768
  3709                                  		;xor	si, si
  3710                                  		;xor	di, di
  3711 00001787 F3A5                    		rep	movsw
  3712                                  
  3713                                  		; 17/06/2018 
  3714 00001789 8EDB                    		mov	ds, bx
  3715                                  		; 21/03/2019
  3716 0000178B 8EC3                    		mov	es, bx
  3717                                  ;init0:
  3718                                  ;		;push	es
  3719                                  ;		push	bx ; 20/03/2019
  3720                                  ;		push	init1 ; 07/04/2018
  3721                                  ;		retf	; jump to 0070h:init1
  3722                                  ;init:
  3723                                  init1:
  3724                                  		; 20/12/2022
  3725                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3726                                  		; for full MSDOS compatibility.
  3727                                  
  3728 0000178D 8EC1                    		mov	es, cx ; 0
  3729 0000178F 8ED9                    		mov	ds, cx ; 0
  3730                                  
  3731 00001791 B82205                  		mov	ax, SEC9
  3732                                  
  3733                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3734 00001794 B378                    		mov	bl, 1Eh*4
  3735                                  				; INT 1Eh points to diskette parms table
  3736                                  
  3737                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3738                                   		; (do not move the DPT if is not original ROMBIOS table)
  3739                                  
  3740                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3741                                  		;;jnz	short mov_dpt
  3742                                  
  3743                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3744                                  		;je	short dont_mov_dpt
  3745                                  
  3746                                  		;mov	si, [bx] ; [1Eh*4]		
  3747                                  ;mov_dpt:
  3748                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3749 00001796 C537                    		lds	si, [bx]
  3750 00001798 89C7                    		mov	di, ax  ; SEC9
  3751 0000179A B10B                    		mov	cl, 11
  3752                                  		;cld
  3753 0000179C F3A4                    		rep	movsb
  3754                                  
  3755                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3756 0000179E 8ED9                    		mov	ds, cx ; 0
  3757 000017A0 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3758 000017A2 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3759                                  ;dont_mov_dpt:
  3760                                  
  3761                                  ; 20/12/2022 - Retro DOS v4.0
  3762                                  %if 0
  3763                                  		; 27/12/2018 - Retro DOS v4.0
  3764                                  		; 'Starting MS-DOS...' message
  3765                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3766                                  		; (0070h:96A3h)
  3767                                  
  3768                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3769                                  		mov     ah, 0Eh
  3770                                  		;bh = 0
  3771                                          	mov     bl, 7		; "normal" attribute and page
  3772                                  startmsg_nxt_chr:  
  3773                                  		lodsb
  3774                                  		or	al, al
  3775                                          	jz	short startmsg_ok
  3776                                         
  3777                                  		int	10h		; video write
  3778                                          	jmp	short startmsg_nxt_chr
  3779                                  
  3780                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3781                                  
  3782                                  startmsg_ok:
  3783                                  
  3784                                  %endif
  3785                                  
  3786                                  ;-----------------------------------------------------------------------------
  3787                                  ; initialization - stage 2
  3788                                  ;-----------------------------------------------------------------------------
  3789                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3790                                  
  3791                                  
  3792                                  ; 19/03/2018
  3793                                  ; Retro DOS v2.0 (24/02/2018)
  3794                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3795                                  
  3796                                  ;------------------------------------------------------------------------
  3797                                  ;									:
  3798                                  ;	System initialization						:
  3799                                  ;									:
  3800                                  ;	The entry conditions are established by the bootstrap		:
  3801                                  ;	loader and are considered unknown. The following jobs		:
  3802                                  ;	will be performed by this module:				:
  3803                                  ;									:
  3804                                  ;	1.	All device initialization is performed			:
  3805                                  ;	2.	A local stack is set up and DS:SI are set		:
  3806                                  ;		to point to an initialization table. Then		:
  3807                                  ;		an inter-segment call is made to the first		:
  3808                                  ;		byte of the dos 					:
  3809                                  ;	3.	Once the dos returns from this call the ds		:
  3810                                  ;		register has been set up to point to the start		:
  3811                                  ;		of free memory. The initialization will then		:
  3812                                  ;		load the command program into this area 		:
  3813                                  ;		beginning at 100 hex and transfer control to		:
  3814                                  ;		this program.						:
  3815                                  ;									:
  3816                                  ;------------------------------------------------------------------------
  3817                                  		
  3818                                  		; 20/12/2022
  3819                                  		; ----------------------
  3820                                  		; Registers
  3821                                  		; ----------------------
  3822                                  		; DL = [bsDriveNumber]
  3823                                  		; DH = [bsMedia]
  3824                                  		; DS = 0, ES = 0, SS = 0
  3825                                  		; BP = 7C00h
  3826                                  		; SP = 700h
  3827                                  		; ----------------------
  3828                                  		; CX = 0				
  3829                                  
  3830                                  ; 02/10/2022 - 20/12/2022
  3831                                  ; ------------------------------------------------------------------------------
  3832                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3833                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3834                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3835                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3836                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3837                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3838                                  ; ------------------------------------------------------------------------------
  3839                                  
  3840                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3841                                  ;
  3842                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3843                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3844                                  ;;	data sector of the bios.
  3845                                  ;
  3846                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3847                                  ;		mov	[cs:bios_l], bx
  3848                                  
  3849                                  ; with the following information from msload, we don't need the
  3850                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3851                                  ;     limitation of msbio.com file.
  3852                                  
  3853                                  		; 21/12/2022
  3854 000017A5 FA                      		cli
  3855                                  
  3856 000017A6 0E                      		push	cs		; Save a peck of interrupt vectors...
  3857 000017A7 07                      		pop	es
  3858                                  		;push	cx
  3859                                  		;push	di
  3860                                  		; 20/12/2022
  3861 000017A8 B105                    		mov	cl, 5
  3862                                  		;mov	cx, 5		; NUMROMVECTORS
  3863                                  					; no. of rom vectors to	be saved
  3864                                  		;mov	si, offset RomVectors ; point to list of int vectors
  3865 000017AA BE[0001]                		mov	si, RomVectors
  3866                                  next_int_:		
  3867 000017AD 2E                      		cs	; 16/10/2022
  3868 000017AE AC                      		lodsb		
  3869                                  		;lods	byte ptr cs:[si] ; cs lodsb
  3870 000017AF 98                      		cbw			; ax = interrupt number
  3871 000017B0 D1E0                    		shl	ax, 1
  3872 000017B2 D1E0                    		shl	ax, 1		; int no * 4
  3873 000017B4 89C7                    		mov	di, ax		; interrupt vector address
  3874 000017B6 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  3875                                  					; saving address in di
  3876                                  		;lodsw			; movsw
  3877                                  		;stosw
  3878                                  		;lodsw			; movsw
  3879                                  		;stosw			; save the vector
  3880                                  		; 20/12/2022
  3881 000017B8 A5                      		movsw
  3882 000017B9 A5                      		movsw		
  3883                                  
  3884 000017BA 87F7                    		xchg	si, di
  3885 000017BC E2EF                    		loop	next_int_
  3886                                  		
  3887                                  		;pop	di
  3888                                  		;pop	cx
  3889                                  
  3890                                  ; we need to save int13 in two places in case we are running on an at.
  3891                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  3892                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  3893                                  ; rom int13 routine, we must have that rom address also stored away.
  3894                                  
  3895                                  		; 20/12/2022
  3896                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  3897                                  		;mov	[cs:Orig13], ax
  3898                                  		;mov	ax, [cs:Old13+2]
  3899                                  		;mov	[cs:Orig13+2], ax
  3900                                  
  3901                                  		; 16/10/2022
  3902 000017BE C7064C00[7407]          		mov	word [13h*4], block13
  3903                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  3904                                  					; set up int 13	for new	action
  3905 000017C4 8C0E4E00                		mov	[13h*4+2], cs
  3906                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  3907 000017C8 C7065400[4808]          		mov	word [15h*4], Int15
  3908                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  3909                                  					; set up int 15	for new	action
  3910 000017CE 8C0E5600                		mov	[15h*4+2], cs
  3911                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  3912 000017D2 C7066400[F907]          		mov	word [19h*4], int19
  3913                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  3914                                  					; set up int 19	for new	action
  3915 000017D8 8C0E6600                		mov	[19h*4+2], cs
  3916                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  3917                                  
  3918                                  		; 20/12/2022
  3919 000017DC 0E                      		push	cs
  3920 000017DD 1F                      		pop	ds
  3921                                  		
  3922 000017DE A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  3923 000017E1 A3[B400]                		mov	[Orig13], ax
  3924 000017E4 A1[0801]                		mov	ax, [Old13+2]
  3925 000017E7 A3[B600]                		mov	[Orig13+2], ax
  3926                                  					; ;
  3927 000017EA FB                      		sti
  3928 000017EB CD11                    		int	11h		; EQUIPMENT DETERMINATION
  3929                                  					; Return: AX = equipment flag bits
  3930                                  
  3931                                  ; we have to support a system that does not have any diskette
  3932                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  3933                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  3934                                  ; otherwise, the system has only hardfiles.
  3935                                  ;
  3936                                  ; important thing is that still, for compatibility reason, the drive letter
  3937                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  3938                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  3939                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  3940                                  ; drives will get "invalid drive letter ..." message. we are going to
  3941                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  3942                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  3943                                  
  3944                                  ; check the register returned by the equipment determination interrupt
  3945                                  ; we have to handle the case of no diskettes in the system by faking
  3946                                  ; two dummy drives.
  3947                                  ;
  3948                                  ; if the register indicates that we do have floppy drives we don't need
  3949                                  ; to do anything special.
  3950                                  ;
  3951                                  ; if the register indicates that we don't have any floppy drives then
  3952                                  ; what we need to do is set the fakefloppydrv variable, change the
  3953                                  ; register to say that we do have floppy drives and then go to execute
  3954                                  ; the code which starts at notsingle. this is because we can skip the
  3955                                  ; code given below which tries to find if there are one or two drives
  3956                                  ; since we already know about this.
  3957                                  
  3958                                  		; 06/05/2019 - Retro DOS v4.0
  3959 000017ED 88C1                    		mov	cl, al
  3960                                  
  3961                                  		; 12/12/2022
  3962 000017EF A801                    		test	al, 1
  3963                                  		;test	ax, 1		; floppy drives	present	?
  3964 000017F1 751F                    		jnz	short normalfloppydrv ;	yes.
  3965                                  
  3966                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  3967                                  ; whether it is an old ROM BIOS or a new one
  3968                                  ;
  3969                                  ; WARNING !!!
  3970                                  ;
  3971                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  3972                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  3973                                  
  3974                                  		; 20/12/2022
  3975                                  		;push	ax
  3976                                  		;push	bx
  3977                                  		;push	cx
  3978 000017F3 52                      		push	dx
  3979                                  		;push	di
  3980 000017F4 06                      		push	es
  3981 000017F5 B408                    		mov	ah, 8
  3982 000017F7 B200                    		mov	dl, 0
  3983 000017F9 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  3984                                  					; DL = drive number
  3985                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  3986                                  					; DL = number of consecutive drives
  3987                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  3988 000017FB 7202                    		jc	short _gdskp_error
  3989                                  		;;mov	[cs:flp_drvs], dl
  3990                                  		; 20/12/2022
  3991                                  		; ds = cs
  3992                                  		;mov	[flp_drvs], dl
  3993 000017FD 88D1                    		mov	cl, dl
  3994                                  _gdskp_error:	
  3995                                  		; 20/12/2022			
  3996 000017FF 07                      		pop	es
  3997                                  		;pop	di
  3998 00001800 5A                      		pop	dx
  3999                                  		;pop	cx
  4000                                  		;pop	bx
  4001                                  		;pop	ax
  4002                                  		
  4003 00001801 720F                    		jc	short normalfloppydrv
  4004                                  					; if error it is an old ROM BIOS
  4005                                  					; so, lets assume that ROM BIOS lied
  4006                                  		; 20/12/2022
  4007                                  		; ds = cs
  4008                                  		;cmp	byte [flp_drvs], 0
  4009                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4010                                  		;jz	short _set_fake_flpdrv
  4011                                  		;;mov	al, [cs:flp_drvs]
  4012                                  		;mov	al, [flp_drvs]
  4013                                  		;;dec	al		; make it zero based
  4014                                  		;; 18/12/2022
  4015                                  		;dec	ax
  4016                                  		;jmp	short got_num_flp_drvs
  4017                                  		
  4018                                  		; 20/12/2022
  4019 00001803 08C9                    		or	cl, cl ; [flp_drvs]
  4020 00001805 7403                    		jz	short _set_fake_flpdrv		
  4021 00001807 49                      		dec	cx	
  4022 00001808 EB0C                    		jmp	short got_num_flp_drvs
  4023                                  ; ----------------------------------------------------------------------------
  4024                                  
  4025                                  _set_fake_flpdrv:
  4026                                  		;20/12/2022
  4027                                  		; ds = cs
  4028 0000180A FEC1                    		inc	cl	; cl = 1
  4029 0000180C 880E[D316]              		mov	[fakefloppydrv], cl ; 1
  4030                                  		;mov	byte [fakefloppydrv], 1		
  4031                                  		;;mov	byte [cs:fakefloppydrv], 1
  4032                                  					; we don't have any floppy drives.
  4033                                  		; 20/12/2022
  4034                                  		;mov	ax, 1
  4035 00001810 EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4036                                  ; ----------------------------------------------------------------------------
  4037                                  
  4038                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4039                                  		; 20/12/2022
  4040                                  		;rol	al, 1		; there	exist floppy drives.
  4041                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4042 00001812 D0C1                    		rol	cl, 1
  4043 00001814 D0C1                    		rol	cl, 1
  4044                                  got_num_flp_drvs:			
  4045                                  		;;and	ax, 3		; only look at bits 0 &	1
  4046                                  		; 18/12/2022
  4047                                  		;and	al, 3
  4048                                  		; 20/12/2022
  4049 00001816 80E103                  		and	cl, 3
  4050 00001819 7505                    		jnz	short notsingle	; zero means single drive system
  4051                                  		; 20/12/2022
  4052 0000181B 41                      		inc	cx
  4053                                  		;inc	ax		; pretend it's a two drive system
  4054                                  settwodrive:				; set this to two fakedrives
  4055                                  		; 20/12/2022
  4056                                  		; ds = cs
  4057 0000181C FE06[7800]              		inc	byte [single]
  4058                                  		;inc	byte [cs:single] ; remember this
  4059                                  notsingle:	
  4060                                  		; 20/12/2022			
  4061                                  		;inc	ax		; ax has number	of drives, 2-4
  4062                                  		;			; is also 0 indexed boot drive if we
  4063                                  		;			; booted off hard file
  4064                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4065                                  		; 20/12/2022
  4066 00001820 FEC1                    		inc	cl	; cl >= 2
  4067                                  
  4068                                  ; 16/10/2022
  4069                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4070                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4071                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4072                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4073                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4074                                  SEC9	EQU	522h	; address of disk parameters
  4075                                  CHROUT	EQU	29h
  4076                                  LSTDRV	EQU     504h
  4077                                  
  4078                                  ; determine whether we booted from floppy or hard disk...
  4079                                  
  4080                                  		; 20/12/2022
  4081 00001822 88C8                    		mov	al, cl	; 26/05/2019
  4082                                  
  4083 00001824 F6C280                  		test	dl, 80h		; boot from floppy ?
  4084 00001827 7502                    		jnz	short gothrd	; no.
  4085 00001829 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4086                                  gothrd:					
  4087                                  
  4088                                  ; MSDOS 6.0
  4089                                  ;   ax = 0-based drive we booted from
  4090                                  ;   bios_l, bios_h set.
  4091                                  ;   cl = number of floppies including fake one
  4092                                  ;   ch = media byte
  4093                                  
  4094                                  ; Retro DOS 4.0 - 27/12/2018 
  4095                                  ;  (from Retro DOS v2.0 boot sector)
  4096                                  ;   dl = int 13 drive number we booted from
  4097                                  ;   dh = media byte
  4098                                  
  4099                                  		; 20/12/2022
  4100 0000182B 88F5                    		mov	ch, dh		; 01/07/2018
  4101                                  
  4102                                  		; cl = number of floppies
  4103                                  		; ch = media byte
  4104                                  
  4105                                  		; set up local stack
  4106                                  
  4107                                  		; 20/12/2022
  4108                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4109                                  					; bios_l, bios_h set.
  4110                                  					; cl = number of floppies including fake one
  4111                                  					; ch = media byte
  4112                                  		; 20/12/2022
  4113                                  		; es = ds = cs
  4114                                  		; ss = 0
  4115                                  		; sp = 700h
  4116                                  
  4117                                  		; 20/12/2022
  4118                                  		;cli
  4119                                  		;mov	ss, dx		; set stack segment and stack pointer
  4120                                  		;mov	sp, 700h
  4121                                  		;sti
  4122                                  
  4123 0000182D 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4124                                  		
  4125 0000182E 88EC                    		mov	ah, ch		; FAT ID to AH
  4126 00001830 50                      		push	ax ; (**)	; save boot drive number and media byte
  4127                                  		
  4128                                  ; let model_byte, secondary_model_byte be set here!!!
  4129                                  
  4130 00001831 B4C0                    		mov	ah, 0C0h
  4131 00001833 CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4132 00001835 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4133 00001837 80FC00                  		cmp	ah, 0
  4134 0000183A 7510                    		jnz	short no_rom_system_conf
  4135                                  
  4136                                  ;		; 20/12/2022
  4137                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4138                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4139                                  ;
  4140                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4141                                  ;
  4142                                  ;		on return:
  4143                                  ;		CF = 0 if successful
  4144                                  ;		   = 1 if error
  4145                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4146                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4147                                  ;
  4148                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4149                                  ;
  4150                                  ;		Offset Size	     Description
  4151                                  ;
  4152                                  ;		  00   word   length of descriptor (8 minimum)
  4153                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4154                                  ;		  03   byte   secondary model byte
  4155                                  ;		  04   byte   BIOS revision level (zero based)
  4156                                  ;		  05   byte   feature information, see below
  4157                                  ;		  06   dword  reserved
  4158                                  
  4159                                  		; 20/12/2022
  4160                                  		; ds = cs
  4161 0000183C 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4162 00001840 A2[3E06]                		mov	[model_byte], al
  4163                                  		;mov	[cs:model_byte], al
  4164                                  					; get/save model byte
  4165 00001843 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4166 00001847 A2[3F06]                		mov	[secondary_model_byte], al
  4167                                  		;mov	[cs:secondary_model_byte], al
  4168                                  					; get/save secondary model byte
  4169 0000184A EB0C                    		jmp	short turn_timer_on
  4170                                  ;-----------------------------------------------------------------------------
  4171                                  
  4172                                  no_rom_system_conf:			
  4173 0000184C BEFFFF                  		mov	si, 0FFFFh
  4174 0000184F 8EC6                    		mov	es, si
  4175                                  		; 20/12/2022
  4176 00001851 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4177 00001855 A2[3E06]                		mov	[model_byte], al
  4178                                  		;mov	[cs:model_byte], al ; save model byte
  4179                                  turn_timer_on:				
  4180 00001858 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4181 0000185A E620                    		out	20h, al		; Interrupt controller,	8259A.
  4182                                  					; AKPORT
  4183                                  
  4184                                  ; some olivetti m24 machines have an 8530 serial communications
  4185                                  ; chip installed at io address 50h and 52h. if we're running
  4186                                  ; on one of those, we must inhibit the normal aux port initialization
  4187                                  
  4188                                  		; 20/12/2022
  4189                                  		; ds = cs
  4190 0000185C 803E[3E06]00            		cmp	byte [model_byte], 0
  4191                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4192 00001861 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4193                                  					; (except olivetti m24)
  4194 00001863 E466                    		in	al, 66h		; is 8530 installed?
  4195 00001865 A820                    		test	al, 20h
  4196 00001867 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4197 00001869 B00F                    		mov	al, 0Fh		; double check
  4198 0000186B E650                    		out	50h, al
  4199 0000186D E450                    		in	al, 50h
  4200 0000186F A801                    		test	al, 1		; this test was	copied from olivetti
  4201 00001871 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4202                                  
  4203                                  not_olivetti_m24:
  4204 00001873 B003                    		mov	al, 3		; init com4
  4205 00001875 E89F08                  		call	aux_init
  4206 00001878 B002                    		mov	al, 2		; init com3
  4207 0000187A E89A08                  		call	aux_init
  4208 0000187D B001                    		mov	al, 1		; init com2
  4209 0000187F E89508                  		call	aux_init
  4210 00001882 30C0                    		xor	al, al		; init com1
  4211 00001884 E89008                  		call	aux_init
  4212                                  
  4213                                  skip_aux_port_init:			
  4214 00001887 B002                    		mov	al, 2		; init lpt3
  4215 00001889 E88308                  		call	print_init
  4216 0000188C B001                    		mov	al, 1		; init lpt2
  4217 0000188E E87E08                  		call	print_init
  4218 00001891 30C0                    		xor	al, al		; init lpt1
  4219 00001893 E87908                  		call	print_init
  4220                                  
  4221 00001896 31D2                    		xor	dx, dx	; 0
  4222 00001898 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4223 0000189A 8EC2                    		mov	es, dx
  4224 0000189C 31C0                    		xor	ax, ax
  4225                                  		; 16/10/2022
  4226 0000189E BF3405                  		mov	di, INITSPOT	; 0534h
  4227                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4228                                  					; IBM wants 4 zeros here
  4229 000018A1 AB                      		stosw
  4230 000018A2 AB                      		stosw
  4231 000018A3 8CC8                    		mov	ax, cs		; fetch	segment
  4232 000018A5 C7066C00[EE06]          		mov	word [BRKADR], cbreak
  4233                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4234                                  					; break	entry point
  4235 000018AB A36E00                  		mov	[BRKADR+2], ax		
  4236                                  		;mov	ds:6Eh,	ax	; vector for break
  4237 000018AE C706A400[6207]          		mov	word [CHROUT*4], outchr
  4238                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4239 000018B4 A3A600                  		mov	[CHROUT*4+2], ax
  4240                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4241                                  
  4242 000018B7 BF0400                  		mov	di, 4
  4243 000018BA BB[F406]                		mov	bx, intret ; 19/10/2022
  4244                                  		;mov	bx, offset intret ; intret (cs:intret)
  4245                                  					; will initialize rest of interrupts
  4246 000018BD 93                      		xchg	ax, bx
  4247 000018BE AB                      		stosw			; location 4
  4248 000018BF 93                      		xchg	ax, bx		; cs:
  4249 000018C0 AB                      		stosw			; int 1	; location 6
  4250 000018C1 83C704                  		add	di, 4
  4251 000018C4 93                      		xchg	ax, bx
  4252 000018C5 AB                      		stosw			; location 12
  4253 000018C6 93                      		xchg	ax, bx		; cs:
  4254 000018C7 AB                      		stosw			; int 3	; location 14
  4255 000018C8 93                      		xchg	ax, bx
  4256 000018C9 AB                      		stosw			; location 16
  4257 000018CA 93                      		xchg	ax, bx		; cs:
  4258 000018CB AB                      		stosw			; int 4	; location 18
  4259                                  
  4260                                  
  4261                                  ;		; 20/12/2022
  4262                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4263                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4264                                  ;	
  4265                                  ;		50:00	byte	Print screen status byte
  4266                                  ;				 00 = PrtSc not active,
  4267                                  ;				 01 = PrtSc in progress
  4268                                  ;				 FF = error
  4269                                  ;		50:01  3 bytes	Used by BASIC
  4270                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4271                                  ;		50:05  10bytes	POST work area
  4272                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4273                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4274                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4275                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4276                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4277                                  ;		50:20	word	DOS dynamic storage
  4278                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4279                                  ;		50:30	4bytes	MODE command
  4280                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4281                                  
  4282 000018CC 89160005                		mov	[0500h], dx ; 0
  4283                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4284 000018D0 89160405                		mov	[LSTDRV], dx	; [0504h]
  4285                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4286                                  
  4287                                  ; we need to initialize the cs:motorstartup variable from the disk
  4288                                  ; parameter table at sec9. the offsets in this table are defined in
  4289                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4290                                  
  4291 000018D4 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4292                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4293                                  					; [522h+0Ah]
  4294                                  		; 20/12/2022
  4295                                  		; ds = 0
  4296                                  
  4297 000018D7 2EA2[2601]              		mov	[cs:motorstartup], al
  4298 000018DB 2E803E[3E06]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4299 000018E1 720B                    		jb	short no_diddle	; no
  4300 000018E3 C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4301                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4302                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4303 000018E9 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4304                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4305                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4306                                  no_diddle:				
  4307 000018EE CD12                    		int	12h		; MEMORY SIZE -
  4308                                  					; Return: AX = number of contiguous 1K blocks of memory
  4309 000018F0 B106                    		mov	cl, 6
  4310 000018F2 D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4311                                  		
  4312                                  		; 20/12/2022
  4313                                  		; 03/07/2018 - 27/12/2018
  4314                                  		;pop	cx ; (**)
  4315                                  		;mov	[cs:drvfat], cx
  4316                                  		
  4317 000018F4 50                      		push	ax ; (*)	; save real top	of memory
  4318                                  
  4319                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4320                                  
  4321                                  ;M068 - BEGIN
  4322                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4323                                  
  4324                                  		; 20/12/2022
  4325                                  		; ds = 0
  4326                                  
  4327                                  		;push	ds
  4328                                  		;push	bx		; pushes not required but since this
  4329                                  					; happens to be a last minute change
  4330                                  					; & since it is only init code.
  4331                                  		;xor	bx, bx
  4332                                  		;mov	ds, bx
  4333                                  		
  4334                                  		;mov	bx, ds:0BCh	; [2Fh*4]
  4335 000018F5 8B1EBC00                		mov	bx, [2Fh*4]
  4336                                  		;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4337 000018F9 8E1EBE00                		mov	ds, [2Fh*4+2]
  4338 000018FD 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4339                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4340 00001902 750F                    		jnz	short SkipRPL
  4341 00001904 807F054C                		cmp	byte [bx+5], 'L'
  4342                                  		;cmp	byte ptr [bx+5], 'L'
  4343 00001908 7509                    		jnz	short SkipRPL
  4344 0000190A 89C2                    		mov	dx, ax		; get TOM into DX
  4345 0000190C B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4346 0000190F CD2F                    		int	2Fh		; Get new TOM from any RPL
  4347 00001911 89D0                    		mov	ax, dx
  4348                                  SkipRPL:	
  4349                                  		; 20/12/2022		
  4350                                  		;pop	bx
  4351                                  		;pop	ds
  4352                                  
  4353                                  ;M068 - END
  4354                                  		; 20/12/2022
  4355                                  		; 27/12/2018
  4356 00001913 0E                      		push	cs
  4357 00001914 1F                      		pop	ds
  4358                                  
  4359                                  		; 18/03/2019 - Retro DOS v4.0
  4360                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4361                                  		;mov	[cs:fatloc], ax	; location to read fat
  4362                                  
  4363                                  		; 01/07/2018
  4364                                  		; 08/04/2018
  4365                                  		; 28/03/2018
  4366                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4367 00001915 83E840                  		sub	ax, 64
  4368 00001918 A3[CD16]                		mov	[init_bootseg], ax ; 20/12/2022
  4369                                  		;mov	[cs:init_bootseg], ax
  4370                                  
  4371                                  		; 27/12/2018 - Retro DOS v4.0
  4372                                  		;pop	ax ; (*)	; get back real top of memory
  4373 0000191B 5A                      		pop	dx ; (*)
  4374                                  
  4375                                  		; 20/12/2022
  4376                                  		; 27/12/2018
  4377 0000191C 59                      		pop	cx ; (**)
  4378 0000191D 890E[CA16]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4379                                  
  4380                                  		; 20/12/2022
  4381                                  
  4382                                  		;mov	dx, 46Dh	; SYSINIT segment
  4383 00001921 BA4104                  		mov	dx, SYSINITSEG	; 17/10/2022
  4384 00001924 8EDA                    		mov	ds, dx
  4385                                  
  4386                                  ; set pointer to resident device driver chain
  4387                                  
  4388                                  		; 17/10/2022
  4389 00001926 C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4390                                  		;mov	word [273h], res_dev_list
  4391                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4392                                  					; [SYSINIT+DEVICE_LIST]
  4393 0000192C 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4394                                  		;mov	[275h], cs
  4395                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4396                                  
  4397 00001930 A3[9202]                		mov	[MEMORYSIZE], ax
  4398                                  		;mov	[292h], ax
  4399                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4400                                  
  4401 00001933 FEC1                    		inc	cl
  4402 00001935 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4403                                  		;mov	[296h], cl
  4404                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4405                                  
  4406 00001939 C706[7102]D007          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4407                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4408                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4409                                  					; dos_load_seg
  4410                                  
  4411                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4412                                  ; printer cards. we initialize this value to point to an iret only if
  4413                                  ;
  4414                                  ; 1) the original segment points to storage inside valid ram.
  4415                                  ;
  4416                                  ; 2) the original segment is 0F000:xxxx
  4417                                  
  4418                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4419                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4420                                  		;mov	es, ax
  4421                                  		; 20/12/2022
  4422                                  		;push	ds ; SYSINITSEG
  4423                                  		;pop	es
  4424 0000193F 8EC2                    		mov	es, dx ; SYSINITSEG
  4425 00001941 31C0                    		xor	ax, ax ; 0
  4426 00001943 8ED8                    		mov	ds, ax		; segment 0
  4427                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4428 00001945 A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4429                                  		; 18/10/2022
  4430 00001948 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4431                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  4432 0000194D 7605                    		jbe	short resetintf
  4433 0000194F 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4434 00001952 750A                    		jnz	short keepintf
  4435                                  resetintf:	
  4436 00001954 C7063C00[F406]          		mov	word [0Fh*4], intret			
  4437                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4438 0000195A 8C0E3E00                		mov	word [0Fh*4+2], cs
  4439                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4440                                  keepintf:				
  4441                                  ; end important
  4442                                  
  4443                                  ; 17/10/2022
  4444                                  ; 28/12/2018 - Retro DOS v4.0
  4445                                  
  4446                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4447                                  ;
  4448                                  ; we will check if the system has ibm extended keyboard by
  4449                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4450                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4451                                  ; for the extended keyboard function. use cx as the temporary register.
  4452                                  
  4453                                  		; 20/12/2022
  4454                                  		; ds = 0
  4455                                  		;xor	cx, cx
  4456                                  		;mov	ds, cx
  4457                                  
  4458 0000195E 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4459                                  
  4460                                  		; 20/12/2022
  4461                                  		; 20/03/2019
  4462 00001962 0E                      		push	cs
  4463 00001963 1F                      		pop	ds
  4464                                  
  4465                                  		;test	cl, 00010000b ; 10h
  4466 00001964 F6C110                  		test	cl, 10h		; extended keyboard ?
  4467 00001967 740A                    		jz	short org_key	; no, original keyboard
  4468                                  
  4469                                  		; 20/12/2022
  4470                                  		;  ds = cs
  4471 00001969 C606[E504]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4472 0000196E C606[E604]11            		mov	byte [keysts_func], 11h
  4473                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4474                                  		;mov	byte [cs:keysts_func], 11h
  4475                                  					; change for extended keyboard functions
  4476                                  org_key:
  4477                                  
  4478                                  ; 02/06/2018 - Retro DOS v3.0
  4479                                  
  4480                                  ;**************************************************************
  4481                                  ;	will initialize the number of drives
  4482                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4483                                  ;	the indications are as follows:
  4484                                  ;
  4485                                  ;	bits	7	6	drives
  4486                                  ;		0	0	1
  4487                                  ;		0	1	2
  4488                                  ;		1	0	3
  4489                                  ;		1	1	4
  4490                                  ;**************************************************************
  4491                                  		
  4492                                  		; 20/12/2022
  4493                                  		; ds = cs		
  4494                                  		;push	cs
  4495                                  		;pop	ds
  4496                                  		; 21/12/2022
  4497                                  		;push	cs
  4498                                  		;pop	es
  4499                                  
  4500 00001973 E8E608                  		call	cmos_clock_read	; If cmos clock	exists,
  4501                                  					; then set the system time according to	that.
  4502                                  					; also,	reset the cmos clock rate.
  4503                                  		; 18/10/2022
  4504                                  		;mov	word ptr BData_start, offset harddrv ;
  4505                                  					; set up pointer to hdrive
  4506                                  		; 02/10/2022
  4507 00001976 C706[0000][1609]        		mov	word [hdrv_pat], harddrv 
  4508                                  		
  4509                                  		; 20/12/2022
  4510                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4511 0000197C 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4512 0000197D 30E4                    		xor	ah, ah		; chuck	fat id byte
  4513 0000197F A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4514 00001982 A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4515 00001985 D1E0                    		shl	ax, 1
  4516 00001987 0106[4417]              		add	[last_dskdrv_table], ax
  4517                                  
  4518 0000198B B280                    		mov	dl, 80h
  4519 0000198D B408                    		mov	ah, 8
  4520 0000198F CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4521                                  					; DL = drive number
  4522                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4523                                  					; DL = number of consecutive drives
  4524                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4525 00001991 7204                    		jc	short enddrv
  4526 00001993 8816[4317]              		mov	[hnum], dl	; save number of hard disk drives
  4527                                  enddrv:
  4528                                  		; 21/12/2022
  4529 00001997 0E                      		push	cs
  4530 00001998 07                      		pop	es
  4531                                  
  4532                                  ; scan the list of drives to determine their type. we have three flavors of
  4533                                  ; diskette drives:
  4534                                  ;
  4535                                  ;   48tpi drives    we do nothing special for them
  4536                                  ;   96tpi drives    mark the fact that they have changeline support.
  4537                                  ;   3.5"  drives    mark changeline support and small.
  4538                                  ;
  4539                                  ; the following code uses registers for certain values:
  4540                                  ;
  4541                                  ;   dl - physical drive
  4542                                  ;   ds:di - points to current bds
  4543                                  ;   cx - flag bits for bds
  4544                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4545                                  					
  4546 00001999 30D2                    		xor	dl, dl
  4547                                  
  4548                                  		; 20/12/2022
  4549                                  		; ds = cs
  4550                                  		; 17/06/2018		 
  4551                                  		;push	cs
  4552                                  		;pop	ds
  4553                                  
  4554 0000199B C606[2C01]09            		mov	byte [eot], 9
  4555 000019A0 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4556                                  					; to set aside two bdss	for the	two fake floppy	drives
  4557                                  
  4558                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4559                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4560                                  
  4561                                  ; check to see if we are faking floppy drives. if not we don't
  4562                                  ; do anything special. if we are faking floppy drives we need
  4563                                  ; to set aside two bdss for the two fake floppy drives. we
  4564                                  ; don't need to initalise any fields though. so starting at start_bds
  4565                                  ; use the link field in the bds structure to go to the second bds
  4566                                  ; in the list and initalise it's link field to -1 to set the end of
  4567                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4568                                  ; the bds for harddrives.
  4569                                  
  4570 000019A3 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  4571 000019A8 750B                    		jnz	short loop_drive
  4572 000019AA 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4573                                  					; di <-	first bds link
  4574 000019AC 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4575                                  					; di <-	second bds link
  4576 000019AE C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4577 000019B2 E90F01                  		jmp	dohard		; allocate/initialise bds for harddrives
  4578                                  ;-----------------------------------------------------------------------------
  4579                                  
  4580                                  loop_drive:				
  4581 000019B5 3A16[7500]              		cmp	dl, [drvmax]
  4582 000019B9 7203                    		jb	short got_more
  4583 000019BB E90201                  		jmp	done_drives
  4584                                  ;-----------------------------------------------------------------------------
  4585                                  
  4586                                  got_more:				
  4587 000019BE 31C9                    		xor	cx, cx		; zero all flags
  4588 000019C0 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4589                                  					; get next bds
  4590 000019C2 B600                    		mov	dh, 0 ; ff48tpi
  4591                                  					; set form factor to 48	tpi
  4592 000019C4 C606[D216]28            		mov	byte [num_cyln], 40 ; 40 tracks per	side
  4593                                  		
  4594                                  		; 20/12/2022
  4595                                  		;push	ds ; 11/05/2019	
  4596 000019C9 57                      		push	di
  4597 000019CA 52                      		push	dx
  4598 000019CB 51                      		push	cx
  4599 000019CC 06                      		push	es ; ((*)) ; 20/12/2022	
  4600                                  		
  4601 000019CD B408                    		mov	ah, 8
  4602 000019CF CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4603                                  					; DL = drive number
  4604                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4605                                  					; DL = number of consecutive drives
  4606                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4607 000019D1 7276                    		jc	short noparmsfromrom
  4608                                  
  4609                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4610                                  ; in this case, we are going to put bogus informations to bds table.
  4611                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4612                                  ; they are calculated at the later time. this is just for the diagnostic
  4613                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4614                                  ; this should only happen with drive b.
  4615                                  
  4616 000019D3 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4617 000019D6 7505                    		jnz	short pfr_ok
  4618                                  
  4619                                  		;mov	ch, 39		; rom gave wrong info.
  4620                                  		;mov	cl, 9		; let's default to 360k.
  4621                                  		; 20/12/2022
  4622 000019D8 B90927                  		mov	cx, 2709h
  4623                                  
  4624 000019DB B601                    		mov	dh, 1
  4625                                  pfr_ok:					
  4626 000019DD FEC6                    		inc	dh		; make number of heads 1-based
  4627 000019DF FEC5                    		inc	ch		; make number of cylinders 1-based
  4628 000019E1 8836[D016]              		mov	[num_heads], dh	; save parms returned by rom
  4629 000019E5 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4630 000019E8 880E[D116]              		mov	[sec_trk], cl
  4631 000019EC 882E[D216]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4632                                  
  4633                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4634                                  
  4635 000019F0 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4636                                  		;jbe	short eot_ok
  4637                                  		; 09/12/2022
  4638 000019F4 7504                    		jne	short eotok
  4639 000019F6 880E[2C01]              		mov	[eot], cl
  4640                                  ;eot_ok:					
  4641                                  eotok:
  4642                                  		; 20/12/2022
  4643 000019FA 07                      		pop	es ; ((*)) es = cs = ds		
  4644 000019FB 59                      		pop	cx
  4645 000019FC 5A                      		pop	dx
  4646 000019FD 5F                      		pop	di
  4647                                  		;pop	ds ; 20/12/2022
  4648                                  
  4649                                  ; Check	for presence of	changeline
  4650                                  
  4651 000019FE B415                    		mov	ah, 15h
  4652 00001A00 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4653                                  					; DL = drive ID
  4654                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4655                                  					; CX:DX	= number of sectors on the media
  4656 00001A02 720D                    		jc	short changeline_done
  4657 00001A04 80FC02                  		cmp	ah, 2		; check	for presence of	changeline
  4658 00001A07 7508                    		jnz	short changeline_done
  4659                                  
  4660                                  ; we have a drive with change line support.
  4661                                  
  4662 00001A09 80C902                  		or	cl, 2		; fchangeline
  4663                                  					; signal type
  4664 00001A0C C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4665                                  
  4666                                  ; we now try to set up the form factor for the types of media that we know
  4667                                  ; and can recognise. for the rest, we set the form factor as "other".
  4668                                  
  4669                                  changeline_done:
  4670                                  
  4671                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  4672                                  			
  4673 00001A11 803E[D216]28            		cmp	byte [num_cyln], 40
  4674 00001A16 750B                    		jnz	short try_80
  4675 00001A18 803E[D116]09            		cmp	byte [sec_trk], 9
  4676 00001A1D 7653                    		jbe	short nextdrive
  4677                                  gotother:				
  4678 00001A1F B607                    		mov	dh, 7 ; ffOther ; we have a "strange" medium 
  4679 00001A21 EB4F                    		jmp	short nextdrive
  4680                                  ;-----------------------------------------------------------------------------
  4681                                  
  4682                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4683                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4684                                  
  4685                                  try_80:					
  4686 00001A23 803E[D216]50            		cmp	byte [num_cyln], 80
  4687 00001A28 75F5                    		jnz	short gotother
  4688 00001A2A B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4689 00001A2C 803E[D116]24            		cmp	byte [sec_trk], 36 ; is it	?
  4690 00001A31 743F                    		jz	short nextdrive	; yeah,	go update
  4691                                  
  4692                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4693                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4694                                  		;mov	dh, ff144
  4695                                  		;cmp	byte [sec_trk], 18
  4696                                  		;je	short nextdrive
  4697                                  
  4698 00001A33 803E[D116]0F            		cmp	byte [sec_trk], 15
  4699 00001A38 740B                    		jz	short got96
  4700                                  		
  4701 00001A3A 803E[D116]09            		cmp	byte [sec_trk], 9
  4702 00001A3F 75DE                    		jnz	short gotother
  4703                                  		
  4704 00001A41 B602                    		mov	dh, 2 ; ffSmall
  4705 00001A43 EB2D                    		jmp	short nextdrive
  4706                                  ; ----------------------------------------------------------------------------
  4707                                  
  4708                                  got96:					
  4709 00001A45 B601                    		mov	dh, 1 ; ff96tpi
  4710 00001A47 EB29                    		jmp	short nextdrive
  4711                                  ; ----------------------------------------------------------------------------
  4712                                  
  4713                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4714                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4715                                  
  4716                                  noparmsfromrom:				
  4717                                  		; 20/12/2022
  4718 00001A49 07                      		pop	es ; ((*)) 
  4719 00001A4A 59                      		pop	cx
  4720 00001A4B 5A                      		pop	dx
  4721 00001A4C 5F                      		pop	di
  4722                                  		;pop	ds ; 20/12/2022
  4723                                  		
  4724 00001A4D B415                    		mov	ah, 15h
  4725 00001A4F CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4726                                  					; DL = drive ID
  4727                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4728                                  					; CX:DX	= number of sectors on the media
  4729 00001A51 721F                    		jc	short nextdrive
  4730                                  		
  4731 00001A53 80FC02                  		cmp	ah, 2		; is there changeline?
  4732 00001A56 751A                    		jnz	short nextdrive
  4733                                  
  4734 00001A58 80C902                  		or	cl, 2 ; fchangeline
  4735 00001A5B C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi drives
  4736 00001A60 C606[D216]50            		mov	byte [num_cyln], 80
  4737 00001A65 B601                    		mov	dh, 1 ; ff96tpi 
  4738 00001A67 B00F                    		mov	al, 15
  4739 00001A69 3A06[2C01]              		cmp	al, [eot]
  4740 00001A6D 7603                    		jbe	short nextdrive ; eot_ok2
  4741 00001A6F A2[2C01]                		mov	[eot], al
  4742                                  ; ----------------------------------------------------------------------------
  4743                                  
  4744                                  ;eot_ok2:
  4745                                  nextdrive:				
  4746 00001A72 80C920                  		or	cl, 20h	; fi_own_physical
  4747                                  					; set this true	for all	drives
  4748 00001A75 88D7                    		mov	bh, dl		; save int13 drive number
  4749                                  
  4750                                  ; we need to do special things if we have a single drive system and are setting
  4751                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4752                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4753                                  ; we detect the presence of this situation by examining the flag single for the
  4754                                  ; value 2.
  4755 00001A77 803E[7800]02            		cmp	byte [single], 2
  4756 00001A7C 7505                    		jnz	short not_special
  4757 00001A7E FECF                    		dec	bh		; int13	drive number same for logical drive
  4758 00001A80 80F120                  		xor	cl, 20h	; fi_own_physical
  4759                                  					; reset	ownership flag for logical drive
  4760                                  not_special:
  4761                                  
  4762                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4763                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4764                                  ; form factor is of type "ffother".
  4765                                  				
  4766 00001A83 31C0                    		xor	ax, ax		; fill BDS for drive
  4767 00001A85 A0[D016]                		mov	al, [num_heads]
  4768 00001A88 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4769 00001A8B A0[D116]                		mov	al, [sec_trk]
  4770 00001A8E 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4771 00001A91 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4772 00001A94 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4773 00001A97 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4774 00001A9A 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4775 00001A9D 8A1E[D216]              		mov	bl, [num_cyln]
  4776 00001AA1 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4777 00001AA4 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4778 00001AA9 7511                    		jnz	short no_single
  4779 00001AAB C606[7800]02            		mov	byte [single], 2 ; Don't forget we have
  4780                                  					; single drive system
  4781                                  		; 18/12/2022
  4782 00001AB0 80C910                  		or	cl, 10h
  4783                                  		;or	cx, 10h	; fi_am_mult
  4784                                  					; set that this	is one of several drives
  4785 00001AB3 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4786                                  					; save flags
  4787 00001AB6 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4788                                  					; move to next BDS in list
  4789 00001AB8 FEC2                    		inc	dl		; add a	number
  4790 00001ABA EBB6                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4791                                  ; ----------------------------------------------------------------------------
  4792                                  
  4793                                  no_single:				
  4794                                  		;inc	dl
  4795                                  		; 18/12/2022
  4796 00001ABC 42                      		inc	dx
  4797 00001ABD E9F5FE                  		jmp	loop_drive
  4798                                  ; ----------------------------------------------------------------------------
  4799                                  
  4800                                  done_drives:	
  4801                                  		;mov	word [di+BDS.link], -1			
  4802 00001AC0 C705FFFF                		mov	word [di], -1	; set link to null
  4803                                  
  4804                                  ; set up all the hard drives in	the system
  4805                                  
  4806                                  		; 20/12/2022
  4807                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  4808                                  dohard:					
  4809 00001AC4 8A36[4317]              		mov	dh, [hnum]
  4810 00001AC8 08F6                    		or	dh, dh		; done if no hardfiles
  4811 00001ACA 745B                    		jz	short static_configure
  4812 00001ACC B280                    		mov	dl, 80h
  4813                                  dohard1:				
  4814 00001ACE 52                      		push	dx
  4815 00001ACF 8B3E[4617]              		mov	di, [end_of_bdss]
  4816 00001AD3 8A1E[7500]              		mov	bl, [drvmax]
  4817 00001AD7 B700                    		mov	bh, 0		; first	primary	partition (or active)
  4818 00001AD9 E8C601                  		call	sethard
  4819 00001ADC 7208                    		jb	short hardfile_err
  4820 00001ADE E83107                  		call	dmax_check	; error	if already 26 drives
  4821 00001AE1 7303                    		jnb	short hardfile_err
  4822 00001AE3 E84107                  		call	xinstall_bds	; insert new bds into linked list
  4823                                  hardfile_err:				
  4824 00001AE6 5A                      		pop	dx
  4825 00001AE7 FEC2                    		inc	dl		; next hard drive
  4826 00001AE9 FECE                    		dec	dh
  4827 00001AEB 75E1                    		jnz	short dohard1
  4828                                  
  4829                                  ; end of physical drive	initialization
  4830                                  
  4831                                  ; *** do not change the position of the following statement.
  4832                                  ; *** domini routine will use [drvmax] value for the start of the logical
  4833                                  ; *** drive number of mini disk(s).
  4834                                  					
  4835 00001AED E83006                  		call	domini		; for setting up mini disks, if found
  4836                                  
  4837                                  ; -- begin added section
  4838                                  
  4839 00001AF0 8A36[4317]              		mov	dh, [hnum]	; we already know this is >0
  4840 00001AF4 B280                    		mov	dl, 80h
  4841                                  dohardx1:				
  4842 00001AF6 B701                    		mov	bh, 1		; do all subsequent primary partitions
  4843                                  dohardx2:				
  4844 00001AF8 52                      		push	dx
  4845 00001AF9 53                      		push	bx
  4846 00001AFA 8B3E[4617]              		mov	di, [end_of_bdss]
  4847 00001AFE 8A1E[7500]              		mov	bl, [drvmax]
  4848 00001B02 E89D01                  		call	sethard
  4849 00001B05 720E                    		jb	short dohardx4	; move to next hardfile	if error
  4850 00001B07 E80807                  		call	dmax_check	; make sure <=26 drives
  4851 00001B0A 7309                    		jnb	short dohardx4	; skip if error
  4852 00001B0C E81807                  		call	xinstall_bds	; insert new bds into linked list
  4853 00001B0F 5B                      		pop	bx		; get partition	number
  4854 00001B10 5A                      		pop	dx		; restore physical drive counts
  4855 00001B11 FEC7                    		inc	bh
  4856 00001B13 EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  4857                                  ; ----------------------------------------------------------------------------
  4858                                  
  4859                                  dohardx4:				
  4860 00001B15 5B                      		pop	bx		; unjunk partition number from stack
  4861 00001B16 5A                      		pop	dx		; restore physical drive counts
  4862 00001B17 FEC2                    		inc	dl		; next hard drive
  4863 00001B19 FECE                    		dec	dh
  4864 00001B1B 75D9                    		jnz	short dohardx1
  4865                                  
  4866                                  ; -- end changed section
  4867                                  
  4868                                  ;******************************************************************************
  4869                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  4870                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  4871                                  ; than two diskette drives
  4872                                  ;
  4873                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  4874                                  ;		as usual and then rescan the bds chain to adjust the  drive
  4875                                  ;		letters. to do this, scan for disk drives and assign logical
  4876                                  ;		drive number starting from 2 and then rescan diskette drives
  4877                                  ;		and assign next to the last logical drive number of last disk
  4878                                  ;		drive to the 3rd and 4th diskette drives.
  4879                                  ;******************************************************************************
  4880                                  
  4881 00001B1D 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  4882                                  		;jbe	short static_configure ; no - no need for remapping
  4883 00001B22 7603                    		jbe	short no_remap
  4884 00001B24 E8F700                  		call	remap		; remap	bds chain to adjust driver letters
  4885                                  no_remap:
  4886                                  
  4887                                  ; End of drive initialization.
  4888                                  
  4889                                  ; ----------------------------------------------------------------------------
  4890                                  
  4891                                  ;we now decide, based on the configurations available so far, what
  4892                                  ;code or data we need to keep as a stay resident code. the following table
  4893                                  ;shows the configurations under consideration. they are listed in the order
  4894                                  ;of their current position memory.
  4895                                  ;
  4896                                  ;configuration will be done in two ways:
  4897                                  ;
  4898                                  ;first, we are going to set "static configuration". static configuration will
  4899                                  ;consider from basic configuration to endof96tpi configuration. the result
  4900                                  ;of static configuration will be the address the dynamic configuration will
  4901                                  ;use to start with.
  4902                                  ;
  4903                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  4904                                  ;involves possible relocation of code or data. dynamic configuration routine
  4905                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  4906                                  ;code individually. after these operation, [dosdatasg] will be set.
  4907                                  ;this will be the place sysinit routine will relocate msdos module for good.
  4908                                  
  4909                                  ; -- begin changed section
  4910                                  ;
  4911                                  ;   1.	 basic configuration for msbio (endfloppy)
  4912                                  ;   2.   end96tpi	; a system that supports "change line error"
  4913                                  ;   3.	 end of bdss	; end of bdss for hard disks
  4914                                  ;   4.	 endatrom	;some of at rom fix module.
  4915                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  4916                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  4917                                  ;
  4918                                  
  4919                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  4920                                  
  4921                                  static_configure:			
  4922 00001B27 8B3E[4617]              		mov	di, [end_of_bdss]
  4923 00001B2B 81FF[1709]              		cmp	di, bdss	; 19/10/2022
  4924                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  4925 00001B2F 750D                    		jnz	short dynamic_configure	; that's the end, then
  4926                                  		; 18/10/2022
  4927 00001B31 BF[1709]                		mov	di, end96tpi
  4928                                  		;mov	di, offset harddrv ; end96tpi
  4929                                  					; keep everything up to	end96tpi
  4930 00001B34 803E[7700]00            		cmp	byte [fhave96], 0
  4931 00001B39 7503                    		jnz	short dynamic_configure
  4932                                  		
  4933 00001B3B BF[FC08]                		mov	di, endfloppy
  4934                                  dynamic_configure:
  4935                                  		; 20/12/2022
  4936                                  		;push	cs
  4937                                  		;pop	es
  4938                                  		
  4939 00001B3E FC                      		cld			; clear direction
  4940                                  
  4941                                  ; -- end changed section
  4942                                  
  4943                                  		; 20/12/2022
  4944                                  		; ds = cs <> es
  4945                                  		; ss = 0
  4946                                  		; sp = 700h
  4947                                  
  4948 00001B3F 803E[3E06]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  4949 00001B44 7577                    		jnz	short checkcmosclock
  4950 00001B46 803E[4317]00            		cmp	byte [hnum], 0	; No hard file?
  4951 00001B4B 7470                    		jz	short checkcmosclock
  4952 00001B4D 97                      		xchg	ax, di		; save allocation pointer in ax
  4953 00001B4E BE00F0                  		mov	si, 0F000h
  4954 00001B51 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  4955 00001B53 BE[4C17]                		mov	si, bios_date	; "01/10/84"
  4956 00001B56 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  4957 00001B59 B90900                  		mov	cx, 9		; bdate_l
  4958                                  					; Only patch ROM for bios 01/10/84
  4959 00001B5C F3A6                    		repe cmpsb		; check	for date + zero	on end
  4960 00001B5E 97                      		xchg	ax, di		; restore allocation pointer
  4961                                  
  4962                                  ; M015 -- begin changes
  4963                                  
  4964                                  		;jnz	short checkcmosclock
  4965                                  		; 02/10/2022
  4966 00001B5F 7508                    		jnz	short checkcompaqbug
  4967                                  
  4968                                  ; install at rom fix
  4969                                  
  4970                                  		; 19/10/2022
  4971                                  		;mov	cx, offset endatrom
  4972 00001B61 B9[0A14]                		mov	cx, endatrom
  4973                                  		;mov	si, offset ibm_disk_io
  4974 00001B64 BE[DC12]                		mov	si, ibm_disk_io
  4975 00001B67 EB46                    		jmp	short install_int13_patch
  4976                                  ; ----------------------------------------------------------------------------
  4977                                  
  4978                                  ; M065 -- begin changes
  4979                                  ;
  4980                                  ; On certain systems with Western Digital disk controllers, the
  4981                                  ; following detection scheme caused an unpredictable and serious
  4982                                  ; failure. In particular, they've implemented a nonstandard
  4983                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  4984                                  ; what happens to be at es:[bx] and other memory locations indexed
  4985                                  ; off of it.
  4986                                  ;
  4987                                  ; Compaq was unable to tell us exactly which kind of systems have
  4988                                  ; the bug, except that they guarantee that the bug was fixed in
  4989                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  4990                                  ; string, and then look for date codes before 08/04/86 to decide
  4991                                  ; when to install the hook.
  4992                                  
  4993                                  ;checkcmosclock:
  4994                                  ; 02/10/2022				
  4995                                  checkcompaqbug:
  4996                                  		; 20/12/2022
  4997                                  		; es = 0F000h
  4998                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  4999                                  		;mov	es, ax
  5000                                  
  5001                                  		; 19/10/2022
  5002 00001B69 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5003                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5004 00001B70 754B                    		jnz	short not_compaq_patch
  5005 00001B72 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5006                                  		;cmp	word ptr es:0FFECh, 'PM'
  5007 00001B79 7542                    		jnz	short not_compaq_patch
  5008 00001B7B 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5009                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5010 00001B82 7539                    		jnz	short not_compaq_patch
  5011                                  
  5012                                  ; We're running on a COMPAQ. Now look at the date code.
  5013                                  
  5014 00001B84 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5015 00001B88 86E0                    		xchg	ah, al
  5016 00001B8A 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5017                                  		;cmp	ax, '86'        ; 3836h
  5018                                  					; is it	86?
  5019 00001B8D 772E                    		ja	short not_compaq_patch
  5020 00001B8F 7218                    		jb	short do_compaq_patch
  5021 00001B91 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5022 00001B95 86E0                    		xchg	ah, al
  5023 00001B97 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5024                                  		;cmp	ax, '08'        ; 3038h
  5025                                  					; is it	08?
  5026 00001B9A 7721                    		ja	short not_compaq_patch
  5027 00001B9C 720B                    		jb	short do_compaq_patch
  5028 00001B9E 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5029 00001BA2 86E0                    		xchg	ah, al
  5030 00001BA4 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5031                                  		;cmp	ax, '04'        ; 3034h
  5032                                  					; is it	04?
  5033 00001BA7 7314                    		jnb	short not_compaq_patch
  5034                                  
  5035                                  do_compaq_patch:			
  5036 00001BA9 B9[2B14]                		mov	cx, end_compaq_i13hook
  5037 00001BAC BE[0A14]                		mov	si, endatrom
  5038                                  
  5039                                  install_int13_patch:			
  5040 00001BAF 0E                      		push	cs
  5041 00001BB0 07                      		pop	es
  5042                                  		; 18/10/2022
  5043 00001BB1 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5044 00001BB5 8C0E[B600]              		mov	[Orig13+2], cs
  5045 00001BB9 29F1                    		sub	cx, si		; size of rom fix module
  5046 00001BBB F3A4                    		rep movsb		; relocate it
  5047                                  
  5048                                  ; M065 -- end changes
  5049                                  
  5050                                  ; ----------------------------------------------------------------------------
  5051                                  not_compaq_patch:			; M065
  5052                                  		; 17/10/2022
  5053                                  checkcmosclock:	
  5054                                  		; 18/10/2022		
  5055 00001BBD 0E                      		push	cs
  5056 00001BBE 07                      		pop	es
  5057                                  
  5058                                  		; 20/12/2022
  5059                                  		; ds = cs = es
  5060                                  		; ss = 0
  5061                                  		; sp = 700h
  5062                                  
  5063 00001BBF 803E[F304]01            		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5064 00001BC4 7518                    		jnz	short checkk09	; no
  5065                                  
  5066 00001BC6 893E[0605]              		mov	word [daycnttoday], di
  5067                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5068 00001BCA B9D100                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5069 00001BCD BE[2C14]                		mov	si, daycnt_to_day
  5070 00001BD0 F3A4                    		rep movsb
  5071 00001BD2 893E[0205]              		mov	word [bintobcd], di
  5072                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5073                                  					; let original segment stay
  5074 00001BD6 B90B00                  		mov	cx, 11	; endcmosclockset - bin_to_bcd
  5075 00001BD9 BE[FD14]                		mov	si, bin_to_bcd
  5076 00001BDC F3A4                    		rep movsb
  5077                                  checkk09:				
  5078 00001BDE 57                      		push	di ; ? ; save ? ; 20/12/2022
  5079 00001BDF B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5080 00001BE2 B301                    		mov	bl, 1		; wait for 1 clock tick
  5081 00001BE4 268A3D                  		mov	bh, [es:di]
  5082 00001BE7 F9                      		stc			; Assume we will fail
  5083 00001BE8 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5084                                  					; AL = condition type, BH = condition compare or mask value
  5085                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5086                                  					; DX = I/O port	address	if AL bit 4 set
  5087 00001BEA 5F                      		pop	di ; ?
  5088 00001BEB 721B                    		jc	short configdone ; 20/12/2022
  5089                                  
  5090 00001BED C606[7900]01            		mov	byte [fhavek09], 1
  5091                                  					; remember we have a k09 type
  5092 00001BF2 1E                      		push	ds
  5093 00001BF3 31C0                    		xor	ax, ax
  5094 00001BF5 8ED8                    		mov	ds, ax
  5095                                  		
  5096 00001BF7 893EB001                		mov	[6Ch*4], di
  5097                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5098                                  					; new int 6ch handler
  5099                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5100 00001BFB 8C0EB201                		mov	word [6Ch*4+2], cs
  5101 00001BFF 1F                      		pop	ds
  5102                                  		; 20/12/2022
  5103                                  		; ds = cs = es
  5104 00001C00 BE[0815]                		mov	si, int6c
  5105 00001C03 B9C201                  		mov	cx, endk09-int6c ; 459
  5106                                  		;mov	cx, 459		; endk09 - int6c
  5107                                  					; size of k09 routine
  5108 00001C06 F3A4                    		rep movsb		;
  5109                                  					; set up config	stuff for sysinit
  5110                                  ; ----------------------------------------------------------------------------
  5111                                  ; Set up config stuff for SYSINIT
  5112                                  
  5113                                  ; 17/10/2022
  5114                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5115                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5116                                  ; 09/12/2022
  5117                                  SETDRIVE equ SetDrive
  5118                                  GETBP equ GetBp
  5119                                  		
  5120                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5121                                  configdone:	
  5122                                  		; 21/12/2022			
  5123                                  		; 20/03/2019
  5124                                  		;push	cs		; di is	final ending address of	msbio.
  5125                                  		;pop	ds
  5126                                  		
  5127 00001C08 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5128                                  		; 10/12/2022
  5129                                  		;shr	di, 1
  5130                                  		;shr	di, 1
  5131                                  		;shr	di, 1
  5132                                  		;shr	di, 1
  5133 00001C0B B104                    		mov	cl, 4
  5134 00001C0D D3EF                    		shr	di, cl		
  5135                                  		; 10/12/2022
  5136 00001C0F 83C770                  		add	di, 70h	 ; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5137                                  		; 19/10/2022 - Temporary !
  5138                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5139 00001C12 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5140                                  
  5141                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5142                                  
  5143                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5144                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5145                                  	     
  5146                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5147                                  
  5148                                  ; ----------------------------------------------------------------------------
  5149                                  ; ----------------------------------------------------------------------------
  5150                                  %if 0
  5151                                  		mov	ax, [drvfat]	; get drive and	fat id
  5152                                  		; 22/12/2022
  5153                                  		; Note: SETDRIVES uses AL (drive number) only
  5154                                  		mov	bp, SETDRIVE
  5155                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5156                                  					; at 2C7h:4D7h = 70h:2A47h
  5157                                  		push	cs		; simulate far call
  5158                                  		call	call_bios_code	; get bds for drive
  5159                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5160                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5161                                  		push	cs
  5162                                  		call	call_bios_code
  5163                                  
  5164                                  	; resort to funky old segment definitions for now
  5165                                  
  5166                                  		; 22/12/2022
  5167                                  		;push	es		; copy bds to ds:di
  5168                                  		;pop	ds
  5169                                  
  5170                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5171                                  	;
  5172                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5173                                  	;	  back. Apparently it was what actually setup es: for the following
  5174                                  	; cas----
  5175                                  
  5176                                  		; 22/12/2022
  5177                                  		;xor	di, di
  5178                                  		;mov	al, [es:di]	; get fat id byte
  5179                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5180                                  		;mov	[es:drvfat+1], al
  5181                                  		;mov	ax, [es:drvfat]
  5182                                  		
  5183                                  		; 22/12/2022
  5184                                  		; ds = cs
  5185                                  	;;;	mov	al, [drvfat]
  5186                                  
  5187                                  	; cas -- why do a SECOND setdrive here???
  5188                                  
  5189                                  		; 22/12/2022
  5190                                  		;push	es		; save whatever's in es
  5191                                  		;push	ds		; copy bds to es:di
  5192                                  		;pop	es
  5193                                  		;push	cs		; copy Bios_Data to ds
  5194                                  		;pop	ds
  5195                                  	
  5196                                  	; 22/12/2022
  5197                                  	;;;	mov	bp, SETDRIVE
  5198                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5199                                  	;;;	push	cs		; simulate far call
  5200                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5201                                  	
  5202                                  		; 22/12/2022
  5203                                  		;push	es		; copy bds back to ds:di
  5204                                  		;pop	ds
  5205                                  		;pop	es		; pop whatever was in es
  5206                                  
  5207                                  	; Now we load in the MSDOS.SYS file
  5208                                  
  5209                                  	; 22/12/2022
  5210                                  	; -----
  5211                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5212                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5213                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5214                                  	;				; get size of fat on media
  5215                                  	;	;mov	es:16DEh, bl
  5216                                  	;	mov	[es:fbigfat], bl
  5217                                  	;	mov	cl, [di+8]
  5218                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5219                                  	;	;sub	es:16D8h, ax
  5220                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5221                                  	;				; need a logical sector number that will
  5222                                  	;				; be used by getclus(diskrd procedure)
  5223                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5224                                  	;	;sbb	es:16DAh, ax
  5225                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5226                                  	; -----
  5227                                  		
  5228                                  	; -----	; 22/12/2022
  5229                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5230                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5231                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5232                                  					; get size of fat on media
  5233                                  		mov	[fbigfat], bl
  5234                                  		mov	cl, [es:di+8]
  5235                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5236                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5237                                  					; need a logical sector number that will
  5238                                  					; be used by getclus(diskrd procedure)
  5239                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5240                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5241                                  	; ------
  5242                                  
  5243                                  		xor	ch, ch	 ; cx = sectors/cluster
  5244                                  
  5245                                  	; the boot program has left the directory at 0:500h
  5246                                  
  5247                                  		push	ds
  5248                                  		xor	di, di
  5249                                  		mov	ds, di
  5250                                  		mov	bx, [53Ah]
  5251                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5252                                  					; (First cluster field of 2nd dir entry
  5253                                  					; of root directory in the buffer at 500h)
  5254                                  		pop	ds
  5255                                  loadit:
  5256                                  		mov	ax, SYSINITSEG	; 46Dh
  5257                                  		;mov	ax, 46Dh	; sysinit segment
  5258                                  		mov	es, ax
  5259                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5260                                  		;mov	es, [es:271h]
  5261                                  
  5262                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5263                                  ; ----------------------------------------------------------------------------
  5264                                  
  5265                                  		;test	byte [cs:fbigfat], fbig
  5266                                  		test	byte [cs:fbigfat], 40h ; fbig
  5267                                  		jnz	short eofbig
  5268                                  		cmp	bx, 0FF7h
  5269                                  		jmp	short iseofx
  5270                                  ; ----------------------------------------------------------------------------
  5271                                  
  5272                                  eofbig:
  5273                                  		cmp	bx, 0FFF7h
  5274                                  iseofx:
  5275                                  		jb	short loadit	; keep loading until cluster = eof
  5276                                  
  5277                                  %endif
  5278                                  ; ----------------------------------------------------------------------------
  5279                                  ; ----------------------------------------------------------------------------
  5280                                  
  5281 00001C16 E84104                  		call	setdrvparms	; 
  5282                                  
  5283                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5284                                  		;jmp	far 46Dh:267h
  5285 00001C19 EA[6702]4104            		jmp	SYSINITSEG:SYSINITSTART
  5286                                  
  5287                                  ; =============== S U B	R O U T	I N E ========================================
  5288                                  
  5289                                  ; Following are subroutines to support resident device driver initialization
  5290                                  ;
  5291                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5292                                  
  5293                                  ;	M035 -- begin changed section
  5294                                  
  5295                                  ;******************************************************************************
  5296                                  ; module name: remap
  5297                                  ;
  5298                                  ; descriptive name: all the code for himem that could be separated from msbio
  5299                                  ;
  5300                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5301                                  ;	     letters) if more than two diskette drives on the system.
  5302                                  ;
  5303                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5304                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5305                                  ;	       letters. to do this, scan for disk drives and assign logical
  5306                                  ;	       drive number starting from 2 and then rescan diskette drives
  5307                                  ;	       and assign next to the last logical drive number of last disk
  5308                                  ;	       drive to the 3rd and 4th diskette drives.
  5309                                  
  5310                                  ; input:       none
  5311                                  ; exit:	drive letters have been remapped in bds chain
  5312                                  ; exit error:  none
  5313                                  ; called from: msinit
  5314                                  ;
  5315                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5316                                  ;	  found in the system
  5317                                  ;	  this function assumes that there are no more than 26 drives assigned
  5318                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5319                                  ;	  this function assumes that the first entries in the chain are
  5320                                  ;	   floppy drives, and all the rest are hard drives
  5321                                  ;	  will alter the boot drive if necessary to reflect remapping
  5322                                  ;
  5323                                  ;******************************************************************************
  5324                                  
  5325                                  ; 17/10/2022
  5326                                  ; 02/10/2022
  5327                                  
  5328                                  remap:		; proc near		
  5329 00001C1E 2E8B3E[1901]            		mov	di, [cs:start_bds] ; get first bds
  5330                                  
  5331                                  ; search for 1st fixed disk physical drive num
  5332                                  
  5333                                  drive_loop:				
  5334 00001C23 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5335                                  					; first	hard disk??
  5336 00001C27 7409                    		jz	short fdrv_found ; yes,	continue
  5337 00001C29 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5338                                  					; get next bds,	assume segment
  5339 00001C2B 83FFFF                  		cmp	di, -1		; last bds?
  5340 00001C2E 75F3                    		jnz	short drive_loop ; loop	if not
  5341 00001C30 EB4F                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5342                                  
  5343                                  ;------------------------------------------------------------------------------
  5344                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5345                                  ;logical drive nums to 3, 4, 5 etc.
  5346                                  ;------------------------------------------------------------------------------
  5347                                  
  5348                                  fdrv_found:				
  5349 00001C32 B002                    		mov	al, 2		; start	with logical drv num=2
  5350                                  fdrv_loop:				
  5351 00001C34 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5352                                  					; found	??
  5353 00001C37 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5354                                  					; ds:di--> next	bds
  5355                                  		;inc	al		; set num for next drive
  5356                                  		; 18/12/2022
  5357 00001C39 40                      		inc	ax
  5358 00001C3A 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ??
  5359 00001C3D 75F5                    		jnz	short fdrv_loop	; no - assign more disk	drives
  5360                                  
  5361                                  ;------------------------------------------------------------------------------
  5362                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5363                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5364                                  ; any more.
  5365                                  ;------------------------------------------------------------------------------
  5366                                  
  5367 00001C3F 2E8B3E[1901]            		mov	di, [cs:start_bds] ; [start_bds]
  5368                                  					; get first bds
  5369 00001C44 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5370                                  					; ds:di-->bds2
  5371 00001C46 2E8A26[2501]            		mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5372 00001C4B 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5373                                  remap_loop1:				
  5374 00001C4E 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5375                                  					; set new num to next floppy
  5376 00001C50 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5377 00001C53 FEC0                    		inc	al		; new number for next floppy
  5378 00001C55 FECC                    		dec	ah		; count	down extra floppies
  5379 00001C57 75F5                    		jnz	short remap_loop1
  5380                                  
  5381                                  ; now we've got to adjust the boot drive if we reassigned it
  5382                                  
  5383 00001C59 2EA0[CA16]              		mov	al, [cs:drvfat]
  5384 00001C5D 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5385 00001C5F 7220                    		jb	short rmap_exit
  5386 00001C61 2E2A06[2501]            		sub	al, [cs:dsktnum] ; is it one of the other floppies?
  5387 00001C66 7204                    		jb	short remap_boot_flop ;	brif so
  5388                                  
  5389                                  ; we've got to remap the boot hard drive
  5390                                  ; subtract the number of EXTRA floppies from it
  5391                                  
  5392 00001C68 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5393 00001C6A EB05                    		jmp	short remap_change_boot_drv
  5394                                  ; ---------------------------------------------------------------------------
  5395                                  
  5396                                  ; we've got to remap the boot floppy.
  5397                                  ; add the number of hard drive partitions to it
  5398                                  
  5399                                  remap_boot_flop:			
  5400 00001C6C 2E0206[7500]            		add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5401                                  remap_change_boot_drv:			
  5402 00001C71 2EA2[CA16]              		mov	[cs:drvfat], al ; alter msdos.sys load drive
  5403 00001C75 FEC0                    		inc	al
  5404 00001C77 1E                      		push	ds
  5405 00001C78 BF4104                  		mov	di, SYSINITSEG	; 46Dh
  5406                                  		;mov	di, 46Dh	; SYSINIT segment
  5407 00001C7B 8EDF                    		mov	ds, di
  5408 00001C7D A2[9602]                		mov	[DEFAULTDRIVE], al
  5409                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5410                                  					; pass it to sysinit as	well
  5411 00001C80 1F                      		pop	ds
  5412                                  rmap_exit:				
  5413 00001C81 C3                      		retn
  5414                                  
  5415                                  ; =============== S U B	R O U T	I N E =======================================
  5416                                  
  5417                                  ; 17/10/2022
  5418                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5419                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5420                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5421                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5422                                  ;**************************************************
  5423                                  ; getboot - get the boot sector for a hard disk
  5424                                  ;
  5425                                  ; Reads the boot sector from a specified drive into
  5426                                  ; a buffer at the top of memory.
  5427                                  ;
  5428                                  ; dl = int13 drive number to read boot sector for
  5429                                  ;**************************************************
  5430                                  
  5431                                  ; 17/10/2022
  5432                                  bootbias equ 200h
  5433                                  
  5434                                  getboot:	; proc near		
  5435                                  		
  5436                                  		; 08/04/2018
  5437                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5438                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5439                                  		; 02/10/2022 - Retro DOS v4.0
  5440                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5441                                  
  5442 00001C82 2EA1[CD16]              		mov	ax, [cs:init_bootseg] ; 17/10/2022
  5443 00001C86 8EC0                    		mov	es, ax
  5444                                  		; 17/10/2022
  5445 00001C88 BB0002                  		mov	bx, bootbias ; 200h
  5446                                  		;mov	bx, 200h	; bootbias
  5447                                  					; load BX, ES:BX is where sector goes
  5448 00001C8B B80102                  		mov	ax, 201h
  5449 00001C8E 30F6                    		xor	dh, dh
  5450 00001C90 B90100                  		mov	cx, 1
  5451 00001C93 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5452                                  					; AL = number of sectors to read, CH = track, CL = sector
  5453                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5454                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5455 00001C95 7209                    		jb	short erret
  5456                                  		; 17/10/2022
  5457 00001C97 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5458                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5459                                  					; Dave Litton magic word?
  5460 00001C9E 7401                    		jz	short norm_ret	; yes
  5461                                  erret:					
  5462 00001CA0 F9                      		stc
  5463                                  norm_ret:				
  5464 00001CA1 C3                      		retn
  5465                                  
  5466                                  ; =============== S U B	R O U T	I N E =======================================
  5467                                  
  5468                                  ; 28/12/2018 - Retro DOS v4.0 
  5469                                  
  5470                                  ;***************************************************************************
  5471                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5472                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5473                                  ;   our own logical sectors start. we also read in our boot sector to
  5474                                  ;   determine version number
  5475                                  ;
  5476                                  ;   inputs:	dl is rom drive number (80...)
  5477                                  ;		bh is partition number (0....) 
  5478                                  ;		ds:di points to bds
  5479                                  ;   outputs:	carry clear -> bpb is filled in
  5480                                  ;		carry set   -> bpb is left uninitialized due to error
  5481                                  ;	trashes (at least) si, cx
  5482                                  ;	MUST PRESERVE ES:!!!!
  5483                                  ;***************************************************************************
  5484                                  
  5485                                  sethard:	; proc near		
  5486 00001CA2 57                      		push	di
  5487 00001CA3 53                      		push	bx
  5488 00001CA4 1E                      		push	ds
  5489 00001CA5 06                      		push	es
  5490 00001CA6 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5491 00001CA9 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5492 00001CAC 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5493                                  					; fnon_removable
  5494 00001CB0 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5495                                  					; ffHardFile
  5496 00001CB4 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5497 00001CB9 88FE                    		mov	dh, bh		; partition number
  5498 00001CBB 52                      		push	dx
  5499 00001CBC B408                    		mov	ah, 8
  5500 00001CBE CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5501                                  					; DL = drive number
  5502                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5503                                  					; DL = number of consecutive drives
  5504                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5505 00001CC0 FEC6                    		inc	dh
  5506 00001CC2 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5507 00001CC5 5A                      		pop	dx
  5508 00001CC6 7263                    		jb	short setret	; error	if no hard disk
  5509 00001CC8 80E13F                  		and	cl, 3Fh
  5510 00001CCB 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5511 00001CCE 52                      		push	dx		; save partition number
  5512 00001CCF E8B0FF                  		call	getboot
  5513 00001CD2 5A                      		pop	dx		; restore partition number
  5514 00001CD3 7256                    		jb	short setret
  5515 00001CD5 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5516                                  
  5517                                  ; The first 'active' partition is 00, the second is 01....
  5518                                  ;   then the remainder of the 'primary' but non-active partitions
  5519                                  
  5520                                  act_part:				
  5521 00001CD8 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5522 00001CDD 7418                    		jz	short no_act	; no
  5523 00001CDF 26803F01                		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5524 00001CE3 740C                    		jz	short got_good_act
  5525 00001CE5 26803F04                		cmp	byte [es:bx], 4
  5526 00001CE9 7406                    		jz	short got_good_act
  5527 00001CEB 26803F06                		cmp	byte [es:bx], 6
  5528 00001CEF 7506                    		jnz	short no_act
  5529                                  got_good_act:				
  5530 00001CF1 08F6                    		or	dh, dh		; is this our target partition #?
  5531 00001CF3 743A                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5532 00001CF5 FECE                    		dec	dh		; count	down
  5533                                  no_act:					
  5534 00001CF7 83C310                  		add	bx, 16
  5535 00001CFA 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5536                                  					; last entry done?
  5537 00001CFE 75D8                    		jnz	short act_part	; no, process next entry
  5538 00001D00 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5539                                  					; restore original value of bx
  5540                                  
  5541                                  ; Now scan the non-active partitions
  5542                                  
  5543                                  get_primary:				
  5544 00001D03 26F647FC80              		test	byte [es:bx-4], 80h
  5545 00001D08 7518                    		jnz	short not_prim	; we've already scanned
  5546                                  					; the ACTIVE ones
  5547 00001D0A 26803F01                		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5548 00001D0E 740C                    		jz	short got_prim
  5549 00001D10 26803F04                		cmp	byte [es:bx], 4
  5550 00001D14 7406                    		jz	short got_prim
  5551 00001D16 26803F06                		cmp	byte [es:bx], 6
  5552 00001D1A 7506                    		jnz	short not_prim
  5553                                  got_prim:				
  5554 00001D1C 08F6                    		or	dh, dh		; is this our target partition?
  5555 00001D1E 740F                    		jz	short set2
  5556 00001D20 FECE                    		dec	dh
  5557                                  not_prim:				
  5558 00001D22 83C310                  		add	bx, 16
  5559 00001D25 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5560 00001D29 75D8                    		jnz	short get_primary ; loop till we've gone through table
  5561                                  setret:					
  5562 00001D2B F9                      		stc			; error	return
  5563 00001D2C E9E002                  		jmp	ret_hard_err
  5564                                  
  5565                                  ; ---------------------------------------------------------------------------
  5566                                  
  5567                                  ;  until we get the real logical boot record and get the bpb,
  5568                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5569                                  ;  for the convenience of the computation.
  5570                                  ;
  5571                                  ;  at the end of this procedure, if a bpb information is gotten from
  5572                                  ;  the valid boot record, then we are going to use those bpb information
  5573                                  ;  without change.
  5574                                  ;
  5575                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5576                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5577                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5578                                  
  5579                                  set2:					
  5580 00001D2F 2E8816[CF16]            		mov	[cs:rom_drv_num], dl
  5581                                  			; save the rom bios drive number we are handling now.
  5582 00001D34 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5583 00001D38 268B5706                		mov	dx, [es:bx+6]
  5584                                  
  5585                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5586                                  ; sectors should be allowed	
  5587                                  
  5588 00001D3C 83E801                  		sub	ax, 1
  5589 00001D3F 83DA00                  		sbb	dx, 0
  5590 00001D42 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5591 00001D46 2613570A                		adc	dx, [es:bx+10]
  5592 00001D4A 7305                    		jnb	short okdrive
  5593 00001D4C 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  5594                                  okdrive:				
  5595 00001D51 268B4704                		mov	ax, [es:bx+4]
  5596 00001D55 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5597                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5598 00001D58 268B4706                		mov	ax, [es:bx+6]
  5599 00001D5C 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5600 00001D5F 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5601 00001D63 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5602 00001D67 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5603 00001D6A 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5604                                  					; bpb->maxsec =	p->partitionlength
  5605 00001D6D 83FA00                  		cmp	dx, 0
  5606 00001D70 7705                    		ja	short okdrive_1
  5607 00001D72 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5608 00001D75 72B4                    		jb	short setret	; return -1;
  5609                                  okdrive_1:				
  5610 00001D77 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5611 00001D7A 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5612 00001D7D 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5613                                  					; usually equal	to the # of sec/trk.
  5614 00001D7F 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5615 00001D82 50                      		push	ax
  5616 00001D83 89D0                    		mov	ax, dx
  5617 00001D85 31D2                    		xor	dx, dx
  5618 00001D87 F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5619                                  					; (track)temp_h:ax + (sector)dx
  5620                                  		; 17/10/2022
  5621 00001D89 2EA3[2905]              		mov	[cs:temp_h], ax
  5622 00001D8D 58                      		pop	ax
  5623 00001D8E F7F3                    		div	bx
  5624 00001D90 88D1                    		mov	cl, dl
  5625 00001D92 FEC1                    		inc	cl
  5626 00001D94 31DB                    		xor	bx, bx
  5627 00001D96 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5628 00001D99 50                      		push	ax
  5629 00001D9A 31D2                    		xor	dx, dx
  5630 00001D9C 2EA1[2905]              		mov	ax, [cs:temp_h]
  5631 00001DA0 F7F3                    		div	bx
  5632 00001DA2 2EA3[2905]              		mov	[cs:temp_h], ax
  5633 00001DA6 58                      		pop	ax
  5634 00001DA7 F7F3                    		div	bx		;  dl is head, ax is cylinder
  5635 00001DA9 2E833E[2905]00          		cmp	word [cs:temp_h], 0
  5636 00001DAF 777C                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5637 00001DB1 3D0004                  		cmp	ax, 1024
  5638 00001DB4 7777                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5639                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5640                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5641                                  			; ('ja' must be 'jnb')
  5642                                  okdrive_2:
  5643                                   		; 28/07/2019
  5644                                  ; dl is head.
  5645                                  ; ax is cylinder
  5646                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5647                                  
  5648                                  ;*** for mini disks ***
  5649                                  
  5650 00001DB6 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5651                                  					; check	for mini disk
  5652 00001DBA 7503                    		jnz	short oknotmini	; not mini disk.
  5653 00001DBC 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5654                                  					; set the physical track number
  5655                                  oknotmini:
  5656                                  ;*** end of added logic for mini disk
  5657                                  				
  5658 00001DBF D0CC                    		ror	ah, 1		; move high two	bits of	cyl to high
  5659 00001DC1 D0CC                    		ror	ah, 1		; two bits of upper byte
  5660 00001DC3 80E4C0                  		and	ah, 0C0h	; turn off remainder of	bits
  5661 00001DC6 08E1                    		or	cl, ah		; move two bits	to correct spot
  5662 00001DC8 88C5                    		mov	ch, al		; ch is	cylinder (low 8	bits)
  5663                                  					; cl is	sector + 2 high	bits of	cylinder
  5664 00001DCA 88D6                    		mov	dh, dl		; dh is	head
  5665 00001DCC 2E8A16[CF16]            		mov	dl, [cs:rom_drv_num] ; dl is drive number
  5666                                  
  5667                                  ; cl is sector + 2 high bits of cylinder
  5668                                  ; ch is low 8 bits of cylinder
  5669                                  ; dh is head
  5670                                  ; dl is drive
  5671                                  
  5672                                  ; for convenience, we are going to read the logical boot sector
  5673                                  ; into cs:disksector area.
  5674                                  
  5675                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5676                                  ; is to be read in is cs:disksector.
  5677                                  
  5678 00001DD1 0E                      		push	cs
  5679 00001DD2 07                      		pop	es
  5680 00001DD3 BB[4E01]                		mov	bx, disksector	; for convenience,
  5681                                  					; we are going to read the logical boot	sector
  5682                                  					; into cs:disksector area.
  5683 00001DD6 B80102                  		mov	ax, 201h
  5684 00001DD9 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5685                                  					; AL = number of sectors to read, CH = track, CL = sector
  5686                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5687                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5688                                  
  5689                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  5690                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  5691                                  ; media if we recognize the version number.
  5692                                  
  5693 00001DDB BB[4E01]                		mov	bx, disksector
  5694 00001DDE 53                      		push	bx
  5695 00001DDF 50                      		push	ax
  5696 00001DE0 2E803FE9                		cmp	byte [cs:bx], 0E9h ; is it a near jump?
  5697 00001DE4 740D                    		jz	short check_1_ok ; yes
  5698 00001DE6 2E803FEB                		cmp	byte [cs:bx], 0EBh ; is it a short jump?
  5699 00001DEA 7529                    		jnz	short invalid_boot_record ; no
  5700 00001DEC 2E807F0290              		cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  5701 00001DF1 7522                    		jnz	short invalid_boot_record
  5702                                  check_1_ok:				
  5703 00001DF3 BB5901                  		mov	bx, 159h	; disksector+EXT_BOOT.BPB
  5704                                  					; point	to the bpb in the boot record
  5705 00001DF6 2E8A470A                		mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  5706                                  					; get the mediadescriptor byte
  5707 00001DFA 24F0                    		and	al, 0F0h	; mask off low nibble
  5708 00001DFC 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  5709 00001DFE 7515                    		jnz	short invalid_boot_record ; no,	invalid	boot record
  5710 00001E00 2E813F0002              		cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  5711 00001E05 750E                    		jnz	short invalid_boot_record ; invalidate non 512 byte sectors
  5712                                  
  5713                                  check2_ok:				; yes, mediadescriptor ok.
  5714 00001E07 2E8A4702                		mov	al, [cs:bx+2]	; now make sure	that
  5715                                  					; the sectorspercluster	is
  5716                                  					; a power of 2
  5717                                  					;
  5718                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  5719                                  					; get the sectorspercluster
  5720 00001E0B 08C0                    		or	al, al		; is it	zero?
  5721 00001E0D 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  5722                                  
  5723                                  ck_power_of_two:			
  5724 00001E0F D0E8                    		shr	al, 1		; shift	until first bit	emerges
  5725 00001E11 73FC                    		jnb	short ck_power_of_two
  5726 00001E13 7405                    		jz	short valid_boot_record
  5727                                  
  5728                                  invalid_boot_record:			
  5729 00001E15 58                      		pop	ax
  5730 00001E16 5B                      		pop	bx
  5731 00001E17 E93301                  		jmp	unknown		; jump to invalid boot record
  5732                                  					; unformatted or illegal media.
  5733                                  ; ---------------------------------------------------------------------------
  5734                                  
  5735                                  valid_boot_record:			
  5736 00001E1A 58                      		pop	ax
  5737 00001E1B 5B                      		pop	bx
  5738                                  
  5739                                  ; Signature found. Now check version.
  5740                                  
  5741 00001E1C 2E817F08322E            		cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  5742                                  		;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  5743 00001E22 750F                    		jnz	short try5
  5744 00001E24 2E807F0A30              		cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  5745                                  		;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  5746 00001E29 7508                    		jnz	short try5
  5747 00001E2B EB2F                    		jmp	short copybpb
  5748                                  ; ---------------------------------------------------------------------------
  5749                                  
  5750                                  setret_brdg:				
  5751 00001E2D E9FBFE                  		jmp	setret
  5752                                  ; ---------------------------------------------------------------------------
  5753                                  
  5754                                  unknown3_0_j:				
  5755 00001E30 E91E01                  		jmp	unknown3_0	; legally formatted media,
  5756                                  					; although, content might be bad.
  5757                                  ; ---------------------------------------------------------------------------
  5758                                  
  5759                                  try5:					
  5760 00001E33 E8DE01                  		call	cover_fdisk_bug
  5761                                  
  5762                                  ; see if it is an os2 signature
  5763                                  
  5764 00001E36 2E817F08302E            		cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  5765                                  		;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  5766 00001E3C 750D                    		jnz	short no_os2
  5767 00001E3E 2E8A4707                		mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  5768 00001E42 2C31                    		sub	al, '1'
  5769                                  		;sub	al, 31h		; '1'
  5770 00001E44 24FE                    		and	al, 0FEh
  5771 00001E46 7414                    		jz	short copybpb	; accept either	'1' or '2'
  5772 00001E48 E90201                  		jmp	unknown
  5773                                  ; ---------------------------------------------------------------------------
  5774                                  
  5775                                  ; no os2 signature, this is to check for real dos versions
  5776                                  
  5777                                  no_os2:					
  5778 00001E4B 2E817F08332E            		cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  5779                                  		;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  5780 00001E51 72DD                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  5781                                  					; do not trust it, but still legal.
  5782 00001E53 7507                    		jnz	short copybpb	; honor	os2 boot record
  5783                                  					; or dos 4.0 version
  5784 00001E55 2E807F0A31              		cmp	byte [cs:bx+10], '1'
  5785                                  		;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  5786 00001E5A 72D4                    		jb	short unknown3_0_j ; if version >=	3.1, then o.k.
  5787                                  copybpb:
  5788                                  
  5789                                  ; 03/10/2022
  5790                                  
  5791                                  ; we have a valid boot sector. use the bpb in it to build the
  5792                                  ; bpb in bios. it is assumed that only
  5793                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  5794                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  5795                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  5796                                  ; need to be set (all other values in already). fbigfat is also set.
  5797                                  
  5798                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  5799                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  5800                                  ; and system id according to the boot record.
  5801                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  5802                                  
  5803                                  		; 10/12/2022
  5804                                  		; (number of FATs optimization)
  5805 00001E5C BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  5806                                  		;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  5807 00001E5F 2E8A4C05                		mov	cl, [cs:si+05h]
  5808                                  		
  5809 00001E63 2E807C1B29              		cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  5810                                  		;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  5811                                  					; [disksector+EXT_BOOT.SIG]
  5812                                  					; EXT_BOOT_SIGNATURE
  5813 00001E68 754E                    		jnz	short copybpb_fat ; conventional fat system
  5814                                  
  5815                                  		; 03/10/2022
  5816                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  5817                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  5818                                  		;	     number of FATs must be 2 ; =*?=
  5819                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  5820                                  		;
  5821                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  5822                                  
  5823                                  		; 10/12/2022
  5824                                  		;cmp	byte [cs:disksector+10h], 0
  5825                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  5826                                  		;jnz	short copybpb_fat ; a fat system.
  5827 00001E6A 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  5828 00001E6C 754A                    		jnz	short copybpb_fat ; a fat system.
  5829                                  
  5830                                  ; non fat based	media.
  5831                                  
  5832 00001E6E 57                      		push	di
  5833 00001E6F 1E                      		push	ds
  5834 00001E70 1E                      		push	ds
  5835 00001E71 07                      		pop	es
  5836 00001E72 0E                      		push	cs
  5837 00001E73 1F                      		pop	ds
  5838                                  
  5839                                  		; 10/12/2022
  5840                                  		; (number of FATs optimization)
  5841                                  		; SI = disksector+11
  5842                                  		; 17/10/2022
  5843                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5844                                  		;mov	si, disksector+11
  5845 00001E74 83C706                  		add	di, 6		; add di,BDS.BPB
  5846                                  
  5847                                  ; just for completeness, we'll make sure that total_sectors and
  5848                                  ; big_total_sectors aren't both zero. I've seen examples of
  5849                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  5850                                  ; got that way. If it occurs, then use the values from the
  5851                                  ; partition table.
  5852                                  
  5853                                  		; 18/12/2022
  5854 00001E77 29C9                    		sub	cx, cx 
  5855                                  
  5856                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  5857                                  		;jnz	short already_nonz 
  5858                                  		;			; how about big_total?
  5859                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  5860                                  		;jnz	short already_nonz ; we're okay if any are != 0
  5861                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5862                                  		;jnz	short already_nonz
  5863                                  
  5864                                  		; 18/12/2022
  5865 00001E79 2E394C08                		cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  5866 00001E7D 7521                    		jnz	short already_nonz
  5867                                  					     ; how about big_total?
  5868 00001E7F 2E394C15                		cmp	word [cs:si+15h], cx ; 0 ; [cs:si+EBPB.BIGTOTALSECTORS]
  5869 00001E83 751B                    		jnz	short already_nonz   ; we're okay if any are != 0
  5870 00001E85 2E394C17                		cmp	word [cs:si+17h], cx ; 0 ; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5871 00001E89 7515                    		jnz	short already_nonz
  5872                                  
  5873                                  ; now let's copy the values from the partition table (now in the BDS)
  5874                                  ; into the BPB in the boot sector buffer, before they get copied back.
  5875                                  
  5876 00001E8B 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  5877 00001E8E 2E894408                		mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  5878 00001E92 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  5879 00001E95 2E894415                		mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  5880 00001E99 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  5881 00001E9C 2E894417                		mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5882                                  
  5883                                  already_nonz:	
  5884                                  		; 18/12/2022
  5885                                  		; cx = 0
  5886 00001EA0 B119                    		mov	cl, 25		
  5887                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  5888 00001EA2 F3A4                    		rep movsb
  5889 00001EA4 1F                      		pop	ds
  5890 00001EA5 5F                      		pop	di
  5891 00001EA6 06                      		push	es
  5892 00001EA7 1E                      		push	ds
  5893 00001EA8 07                      		pop	es
  5894 00001EA9 0E                      		push	cs
  5895 00001EAA 1F                      		pop	ds
  5896                                  		; 18/12/2022
  5897 00001EAB BD[3707]                		mov	bp, mov_media_ids
  5898                                  		;mov	bp, 751h	; mov_media_ids
  5899                                  					; at 2C7h:751h = 70h:2CC1h
  5900                                  					; set volume id, systemid, serial.
  5901 00001EAE 0E                      		push	cs		; simulate far call
  5902 00001EAF E8A5F8                  		call	call_bios_code
  5903 00001EB2 06                      		push	es
  5904 00001EB3 1F                      		pop	ds
  5905 00001EB4 07                      		pop	es
  5906 00001EB5 E95601                  		jmp	goodret
  5907                                  ; ---------------------------------------------------------------------------
  5908                                  
  5909                                  ; ****** cas ---
  5910                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  5911                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  5912                                  ; happens with some frequency -- perhaps through some OS/2 setup
  5913                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  5914                                  ; from the boot sector into the DPB anyway, we've just been using
  5915                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  5916                                  ; we'll go ahead and copy it into the DPB, except in the case
  5917                                  ; that it equals zero, in which case we just use the values in
  5918                                  ; the DPB from the partition table.
  5919                                  
  5920                                  ; 17/10/2022
  5921                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  5922                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  5923                                  ; 09/12/2022
  5924                                  MOVMEDIAIDS equ mov_media_ids
  5925                                  CLEARIDS equ clear_ids
  5926                                  
  5927                                  copybpb_fat:
  5928                                  		; 10/12/2022
  5929                                  		; (number of FATs optimization)
  5930                                  		; SI = disksector+11				
  5931                                  		; 17/10/2022
  5932                                  		;mov	si, disksector+11
  5933                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5934                                  					; cs:si	-> bpb in boot
  5935 00001EB8 31D2                    		xor	dx, dx
  5936 00001EBA 2E8B4408                		mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  5937                                  					; get totsec from boot sec
  5938 00001EBE 09C0                    		or	ax, ax
  5939 00001EC0 7516                    		jnz	short copy_totsec ; if non zero, use that
  5940 00001EC2 2E8B4415                		mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  5941                                  					; get the big version
  5942                                  					; (32 bit total	sectors)
  5943 00001EC6 2E8B5417                		mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5944                                  		; 10/12/2022
  5945                                  		; (number of FATs optimization)
  5946                                  		; CL = number of FATs (2 or 1) 
  5947 00001ECA 89D3                    		mov	bx, dx		; see if it is a big zero
  5948 00001ECC 09C3                    		or	bx, ax
  5949 00001ECE 7508                    		jnz	short copy_totsec
  5950                                  			; screw it. it	was bogus.
  5951 00001ED0 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  5952 00001ED3 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  5953 00001ED6 EB06                    		jmp	short fat_big_small
  5954                                  
  5955                                  		;mov	cx, dx
  5956                                  		;or	cx, ax		; see if it is a big zero
  5957                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  5958                                  copy_totsec:				
  5959 00001ED8 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5960                                  					; make DPB match boot sec
  5961 00001EDB 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5962                                  
  5963                                  		; 10/12/2022
  5964                                  ;totsec_already_set:			
  5965                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  5966                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  5967                                  
  5968                                  ; determine fat entry size.
  5969                                  
  5970                                  fat_big_small:
  5971                                  
  5972                                  ;at this moment dx;ax = total sector number
  5973                                  
  5974                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  5975                                  ;from the BPB on the disk
  5976                                  				
  5977 00001EDE 2E8B5C03                		mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  5978                                  					; get #reserved_sectors	from BPB
  5979 00001EE2 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  5980                                  					; update BDS field
  5981 00001EE5 29D8                    		sub	ax, bx
  5982 00001EE7 83DA00                  		sbb	dx, 0		; update the count
  5983 00001EEA 2E8B5C0B                		mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  5984                                  					; bx = sectors/fat
  5985 00001EEE 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  5986                                  					; set in bds bpb
  5987                                  		; 10/12/2022
  5988                                  		; (number of FATs optimization)
  5989                                  		; CL = number of FATs (2 or 1) 
  5990                                  		;dec	cl ; *
  5991                                  		; 18/12/2022
  5992 00001EF1 49                      		dec	cx ; *
  5993 00001EF2 D3E3                    		shl	bx, cl			
  5994                                  		;shl	bx, 1	; =*?=	; always 2 fats
  5995                                  		
  5996 00001EF4 29D8                    		sub	ax, bx		; sub #	fat sectors
  5997 00001EF6 83DA00                  		sbb	dx, 0
  5998 00001EF9 2E8B5C06                		mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  5999                                  					; # root entries
  6000 00001EFD 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6001                                  					; set in bds bpb
  6002 00001F00 B104                    		mov	cl, 4
  6003 00001F02 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6004 00001F04 29D8                    		sub	ax, bx		; sub #	dir sectors
  6005 00001F06 83DA00                  		sbb	dx, 0		;
  6006                                  					; dx:ax	now contains the
  6007                                  					; # of data sectors
  6008 00001F09 31C9                    		xor	cx, cx ; *
  6009 00001F0B 2E8A4C02                		mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6010                                  					; sectors per cluster
  6011 00001F0F 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6012                                  					; set in bios bpb
  6013 00001F12 50                      		push	ax
  6014 00001F13 89D0                    		mov	ax, dx
  6015 00001F15 31D2                    		xor	dx, dx
  6016 00001F17 F7F1                    		div	cx		; cx = sectors per cluster
  6017 00001F19 2EA3[2905]              		mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6018                                  					; # clusters.
  6019 00001F1D 58                      		pop	ax
  6020 00001F1E F7F1                    		div	cx
  6021 00001F20 2E833E[2905]00          		cmp	word [cs:temp_h], 0
  6022 00001F26 771C                    		ja	short toobig_ret ; too big cluster number
  6023 00001F28 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6024                                  					; is this 16-bit fat?
  6025 00001F2B 7205                    		jb	short copymediaid ; no,	small fat
  6026                                  		; 17/10/2022
  6027 00001F2D 800E[CC16]40            		or	byte [fbigfat], 40h
  6028                                  		;or	ds:fbigfat, 40h	; fbig
  6029                                  					; 16 bit fat
  6030                                  copymediaid:				
  6031 00001F32 06                      		push	es
  6032 00001F33 1E                      		push	ds
  6033 00001F34 07                      		pop	es
  6034 00001F35 0E                      		push	cs
  6035 00001F36 1F                      		pop	ds
  6036                                  		; 17/10/2022
  6037 00001F37 BD[3707]                		mov	bp, MOVMEDIAIDS
  6038                                  		;mov	bp, 751h	; mov_media_ids
  6039                                  					; at 2C7h:751h = 70h:2CC1h
  6040                                  					; copy filesys_id, volume label
  6041 00001F3A 0E                      		push	cs		; simulate far call
  6042 00001F3B E819F8                  		call	call_bios_code
  6043 00001F3E 06                      		push	es
  6044 00001F3F 1F                      		pop	ds
  6045 00001F40 07                      		pop	es
  6046 00001F41 E9A500                  		jmp	massage_bpb	; now final check for bpb info
  6047                                  					; and return.
  6048                                  ; ---------------------------------------------------------------------------
  6049                                  
  6050                                  toobig_ret:				
  6051 00001F44 2E800E[CC16]80          		or	byte [cs:fbigfat], 80h
  6052 00001F4A E9C100                  		jmp	goodret		; still	drive letter is	assigned
  6053                                  					; but useless. to big for
  6054                                  					; current pc dos fat file system
  6055                                  ; ---------------------------------------------------------------------------
  6056                                  
  6057                                  unknown:	
  6058                                  		; 12/12/2022
  6059 00001F4D 804D2402                		or	byte [di+24h], 02h			
  6060                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6061                                  					; unformatted_media
  6062                                  					; Set unformatted media	flag.
  6063                                  
  6064                                  ; the boot signature may not be	recognizable,
  6065                                  ; but we should	try and	read it	anyway.
  6066                                  
  6067                                  unknown3_0:				
  6068 00001F51 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6069                                  					; [di+BDS.totalsecs32+2]
  6070 00001F54 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6071 00001F57 BE[FC16]                		mov	si, disktable2
  6072                                  
  6073                                  scan:					
  6074 00001F5A 2E3B14                  		cmp	dx, [cs:si]
  6075 00001F5D 720D                    		jb	short gotparm
  6076 00001F5F 7706                    		ja	short scan_next
  6077 00001F61 2E3B4402                		cmp	ax, [cs:si+2]
  6078 00001F65 7605                    		jbe	short gotparm
  6079                                  
  6080                                  scan_next:				
  6081 00001F67 83C60A                  		add	si, 10		; 5*2
  6082 00001F6A EBEE                    		jmp	short scan	; covers upto 512 mb media
  6083                                  ; ---------------------------------------------------------------------------
  6084                                  
  6085                                  gotparm:				
  6086 00001F6C 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6087                                  		;or	ds:fbigfat, cl
  6088                                  		; 17/10/2022
  6089 00001F6F 080E[CC16]              		or	[fbigfat], cl
  6090 00001F73 2E8B4C04                		mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6091                                  					; cl = log base	2 of ch
  6092 00001F77 2E8B5406                		mov	dx, [cs:si+6]	; dx = number of root dir entries
  6093                                  
  6094                                  ; now calculate size of fat table
  6095                                  
  6096 00001F7B 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6097                                  					; save number of (root)	dir entries
  6098 00001F7E 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6099 00001F81 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6100 00001F84 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6101                                  					; save sectors per cluster
  6102                                  		; 17/10/2022
  6103 00001F87 F606[CC16]40            		test	byte [fbigfat], 40h
  6104                                  		;test	ds:fbigfat, 40h	; fbig
  6105                                  					; if (fbigfat)
  6106 00001F8C 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6107                                  
  6108                                  ; we don't need to change "small fat" logic since it is gauranteed
  6109                                  ; that double word total sector will not use 12 bit fat (unless
  6110                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6111                                  ; so in this case we assume dx = 0 !!
  6112                                  
  6113 00001F8E 31DB                    		xor	bx, bx		; (12 bit fat)
  6114 00001F90 88EB                    		mov	bl, ch
  6115 00001F92 4B                      		dec	bx
  6116 00001F93 01C3                    		add	bx, ax		; dx=0
  6117 00001F95 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6118 00001F97 43                      		inc	bx		; BDS.secperclus
  6119 00001F98 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6120 00001F9B 89DE                    		mov	si, bx
  6121 00001F9D D1EB                    		shr	bx, 1
  6122 00001F9F 01F3                    		add	bx, si
  6123 00001FA1 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6124 00001FA5 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6125 00001FA7 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6126                                  					; save number of fat sectors
  6127 00001FAA EB3D                    		jmp	short massage_bpb
  6128                                  ; ---------------------------------------------------------------------------
  6129                                  
  6130                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6131                                  
  6132                                  dobig:					
  6133 00001FAC B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6134 00001FAE 52                      		push	dx		; save total sectors (high)
  6135 00001FAF 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6136 00001FB2 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6137 00001FB4 29D0                    		sub	ax, dx
  6138 00001FB6 5A                      		pop	dx
  6139 00001FB7 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6140 00001FBA 83E801                  		sub	ax, 1
  6141 00001FBD 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6142                                  					; total	secs - reserved	secs - root dir	secs
  6143 00001FC0 B302                    		mov	bl, 2
  6144 00001FC2 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6145                                  					; bx = 256 * BDS.secperclus + 2
  6146                                  
  6147                                  ; I don't understand why to add bx here!!!
  6148                                  
  6149                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6150                                  		; 27/09/2022
  6151                                  		; (Microsoft FAT32 File	System Specification,
  6152                                  		; December 2000, Page 21)
  6153                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6154                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6155                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6156                                  		; (If FATType == FAT16,	BPB_FATSz16 = LOWORD(FATSz))
  6157                                  		
  6158 00001FC5 01D8                    		add	ax, bx		; ax = t-r-d+256*spc+2
  6159 00001FC7 83D200                  		adc	dx, 0
  6160 00001FCA 83E801                  		sub	ax, 1		; ax = t-r-d+256*spc+1
  6161 00001FCD 83DA00                  		sbb	dx, 0
  6162                                  
  6163                                  ; assuming dx in the table will never be bigger than bx.
  6164                                  
  6165 00001FD0 F7F3                    		div	bx		; BDS.fatsecs =
  6166                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6167 00001FD2 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6168                                  					; number of fat	sectors
  6169                                  
  6170                                  ; now, set the default filesys_id, volume label, serial number
  6171                                  
  6172                                  		;mov	bl, ds:fbigfat
  6173                                  		; 17/10/2022
  6174 00001FD5 8A1E[CC16]              		mov	bl, [fbigfat]
  6175 00001FD9 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6176                                  
  6177 00001FDC 1E                      		push	ds
  6178 00001FDD 1E                      		push	ds
  6179 00001FDE 07                      		pop	es
  6180 00001FDF 0E                      		push	cs
  6181 00001FE0 1F                      		pop	ds
  6182                                  		; 17/10/2022
  6183 00001FE1 BD[CC05]                		mov	bp, CLEARIDS
  6184                                  		;mov	bp, 5D9h	; clear_ids
  6185                                  					; at 2C7h:5D9h = 70h:2B49h
  6186 00001FE4 0E                      		push	cs
  6187 00001FE5 E86FF7                  		call	call_bios_code
  6188 00001FE8 1F                      		pop	ds
  6189                                  
  6190                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6191                                  ; set according to the partition information. we are going to
  6192                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6193                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6194                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6195                                  ; we don't do this for the bpb information from the boot record. we
  6196                                  ; are not going to change the bpb information from the boot record.
  6197                                  
  6198                                  massage_bpb:
  6199                                  		; 12/12/2022
  6200 00001FE9 8A1E[CC16]              		mov	bl, [fbigfat]
  6201 00001FED 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6202                                  					; set size of fat on media
  6203                                  		;
  6204 00001FF0 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6205 00001FF3 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6206 00001FF6 83FA00                  		cmp	dx, 0		; double word total sectors?
  6207                                  		;ja	short goodret	; don't have to change it.
  6208                                  		; 12/12/2022
  6209 00001FF9 7714                    		ja	short short goodret2
  6210                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6211                                  		;ja	short goodret	; don't have to change it.
  6212                                  		; 12/12/2022
  6213 00001FFB 395519                  		cmp	[di+19h], dx ; 0
  6214 00001FFE 770F                    		ja	short goodret2
  6215 00002000 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6216                                  		;jb	short goodret
  6217                                  		; 12/12/2022
  6218 00002003 7209                    		jc	short goodret
  6219 00002005 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6220 00002008 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6221                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6222                                  		; 12/12/2022
  6223 0000200B 89551B                  		mov	[di+1Bh], dx ; 0 
  6224                                  goodret:				
  6225                                  		;;mov	bl, ds:fbigfat
  6226                                  		; 12/12/2022
  6227                                  		;; 17/10/2022
  6228                                  		;mov	bl, [fbigfat]
  6229                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6230                                  		;			; set size of fat on media
  6231 0000200E F8                      		clc
  6232                                  ret_hard_err:
  6233                                  		; 12/12/2022
  6234                                  goodret2:					
  6235 0000200F 07                      		pop	es
  6236 00002010 1F                      		pop	ds
  6237 00002011 5B                      		pop	bx
  6238 00002012 5F                      		pop	di
  6239 00002013 C3                      		retn
  6240                                  
  6241                                  ; =============== S U B	R O U T	I N E =======================================
  6242                                  
  6243                                  ; 15/10/2022
  6244                                  
  6245                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6246                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6247                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6248                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6249                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6250                                  
  6251                                  		; 17/10/2022
  6252                                  cover_fdisk_bug:	
  6253 00002014 50                      		push	ax
  6254 00002015 52                      		push	dx
  6255 00002016 56                      		push	si
  6256 00002017 2E803E[7401]29          		cmp	byte [cs:disksector+26h], 29h
  6257                                  					; [disksector+EXT_BOOT.SIG],
  6258                                  					; EXT_BOOT_SIGNATURE
  6259 0000201D 7431                    		jz	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6260 0000201F 2E817F073130            		cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6261 00002025 7507                    		jnz	short cfb_chk_BPB_TOTALSECTORS
  6262 00002027 2E807F0A30              		cmp	byte [cs:bx+10], '0'
  6263 0000202C 7522                    		jnz	short cfb_retit
  6264                                  cfb_chk_BPB_TOTALSECTORS:
  6265                                  		; 17/10/2022		
  6266 0000202E BE[5901]                		mov	si, disksector+11 ; 14Eh+0Bh
  6267                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6268 00002031 2E837C0800              		cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6269                                  					; just to make sure.
  6270 00002036 7418                    		jz	short cfb_retit
  6271 00002038 2E8B4408                		mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6272 0000203C 2E034411                		add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6273 00002040 730E                    		jnb	short cfb_retit
  6274 00002042 750C                    		jnz	short cfb_retit	; if carry set and ax=0
  6275 00002044 2EFF4C08                		dec	word [cs:si+8]	; 0 -> 0FFFFh
  6276                                  					; then decrease	BPB_TOTALSECTORS by 1
  6277 00002048 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6278 0000204C 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6279                                  cfb_retit:				
  6280 00002050 5E                      		pop	si
  6281 00002051 5A                      		pop	dx
  6282 00002052 58                      		pop	ax
  6283 00002053 C3                      		retn
  6284                                  
  6285                                  ; ---------------------------------------------------------------------------
  6286                                  
  6287 00002054 0200                    word2		dw 2			
  6288 00002056 0300                    word3		dw 3			
  6289 00002058 0002                    word512		dw 512			
  6290                                  
  6291                                  ; =============== S U B	R O U T	I N E =======================================
  6292                                  
  6293                                  ; 15/10/2022
  6294                                  
  6295                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6296                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6297                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6298                                  ; as the bpb on the drive.
  6299                                  ;
  6300                                  ; no attempt is made to preserve registers since we are going to jump to
  6301                                  ; sysinit straight after this routine.
  6302                                  
  6303                                  setdrvparms:
  6304 0000205A 31DB                    		xor	bx, bx
  6305                                  		; 18/10/2022
  6306 0000205C C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6307                                  _next_bds:				
  6308 00002060 06                      		push	es
  6309 00002061 57                      		push	di
  6310 00002062 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6311 00002066 80FB05                  		cmp	bl, 5		; ffHardFile
  6312 00002069 753E                    		jnz	short nothardff
  6313 0000206B 31D2                    		xor	dx, dx
  6314 0000206D 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6315 00002071 09C0                    		or	ax, ax
  6316 00002073 7508                    		jnz	short get_ccyl
  6317 00002075 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6318 00002079 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6319                                  
  6320                                  get_ccyl:				
  6321 0000207D 52                      		push	dx
  6322 0000207E 50                      		push	ax
  6323 0000207F 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6324 00002083 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6325                                  					; assume sectors per cyl. < 64k.
  6326 00002087 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6327 00002089 58                      		pop	ax
  6328 0000208A 5A                      		pop	dx		; dx:ax	= total	sectors
  6329 0000208B 50                      		push	ax
  6330 0000208C 89D0                    		mov	ax, dx
  6331 0000208E 31D2                    		xor	dx, dx
  6332 00002090 F7F1                    		div	cx
  6333 00002092 2EA3[2905]              		mov	[cs:temp_h], ax	; ax be	0 here.
  6334 00002096 58                      		pop	ax
  6335 00002097 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6336 00002099 09D2                    		or	dx, dx
  6337 0000209B 7401                    		jz	short no_cyl_rnd ; came out even
  6338 0000209D 40                      		inc	ax		; round	up
  6339                                  
  6340                                  no_cyl_rnd:				
  6341 0000209E 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6342 000020A2 06                      		push	es
  6343 000020A3 1F                      		pop	ds
  6344 000020A4 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6345                                  					; ds:si	-> bpb for hard	file
  6346 000020A7 EB51                    		jmp	short set_recbpb
  6347                                  ; ---------------------------------------------------------------------------
  6348                                  
  6349                                  nothardff:				
  6350 000020A9 0E                      		push	cs
  6351 000020AA 1F                      		pop	ds
  6352                                  
  6353                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6354                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6355                                  
  6356                                  		; 10/12/2022
  6357                                  		; ds = cs
  6358                                  		; 17/10/2022 (ds=cs)
  6359 000020AB 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  6360                                  		;cmp	byte [cs:fakefloppydrv], 1
  6361 000020B0 7450                    		jz	short go_to_next_bds
  6362 000020B2 80FB07                  		cmp	bl, 7		; ffother
  6363                                  					; special case "other" type of medium
  6364 000020B5 753D                    		jnz	short not_process_other
  6365                                  process_other:
  6366 000020B7 31D2                    		xor	dx, dx
  6367 000020B9 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6368 000020BC F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6369 000020BF F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6370 000020C2 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6371                                  					; have the total number of sectors
  6372 000020C5 48                      		dec	ax
  6373 000020C6 B201                    		mov	dl, 1
  6374                                  _again:					
  6375 000020C8 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6376 000020CB 7206                    		jb	short _@@
  6377 000020CD D1E8                    		shr	ax, 1
  6378 000020CF D0E2                    		shl	dl, 1
  6379 000020D1 EBF5                    		jmp	short _again
  6380                                  ; ---------------------------------------------------------------------------
  6381                                  
  6382                                  _@@:					
  6383 000020D3 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  6384 000020D6 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  6385 000020D8 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6386                                  __@@:					
  6387 000020DD 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6388                                  
  6389                                  ; logic to get the sectors/fat area.
  6390                                  ; fat entry is assumed to be 1.5 bytes!!!
  6391                                  
  6392                                  		; 10/12/2022
  6393                                  		; ds = cs
  6394                                  		; 17/10/2022 (ds=cs)
  6395 000020E0 F726[5620]              		mul	word [word3]
  6396 000020E4 F736[5420]              		div	word [word2]
  6397 000020E8 31D2                    		xor	dx, dx
  6398 000020EA F736[5820]              		div	word [word512]
  6399                                  		;
  6400                                  		; 10/12/2022
  6401                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6402                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6403                                  		;xor	dx, dx
  6404                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6405                                  		;
  6406 000020EE 40                      		inc	ax		; + 1
  6407                                  no_round_up:
  6408 000020EF 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6409 000020F2 EB0E                    		jmp	short go_to_next_bds
  6410                                  ; ---------------------------------------------------------------------------
  6411                                  
  6412                                  not_process_other:			
  6413 000020F4 D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  6414                                  		;mov	si, bpbtable
  6415                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6416                                  		; 09/12/2022
  6417                                  		;mov	si, BPBTABLE
  6418                                  		;mov	si, [bx+si]	; get address of bpb
  6419                                  		; 10/12/2022
  6420                                  		;mov	si, [BPBTABLE+bx]
  6421                                  		; 13/12/2022
  6422 000020F6 8BB7[1851]              		mov	si, [SYSINITOFFSET+bpbtable+bx]
  6423                                  set_recbpb:				
  6424 000020FA 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6425                                  					; es:di	-> recbpb
  6426 000020FD B91900                  		mov	cx, 25		; bpbx.size
  6427 00002100 F3A4                    		rep movsb		; move (size bpbx) bytes	
  6428                                  go_to_next_bds:				
  6429 00002102 5F                      		pop	di
  6430 00002103 07                      		pop	es		; restore pointer to bds
  6431 00002104 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6432 00002107 83FFFF                  		cmp	di, 0FFFFh	; -1
  6433 0000210A 740A                    		jz	short got_end_of_bds_chain
  6434 0000210C E951FF                  		jmp	_next_bds
  6435                                  ; ---------------------------------------------------------------------------
  6436                                  
  6437                                  		; 18/12/2022
  6438                                  ;got_end_of_bds_chain:			
  6439                                  		;retn
  6440                                  
  6441                                  ; =============== S U B	R O U T	I N E =======================================
  6442                                  
  6443                                  ; 15/10/2022
  6444                                  ; 30/12/2018 - Retro DOS v4.0
  6445                                  
  6446                                  ; al = device number
  6447                                  
  6448                                  print_init:	
  6449 0000210F 98                      		cbw
  6450 00002110 89C2                    		mov	dx, ax
  6451 00002112 B401                    		mov	ah, 1
  6452 00002114 CD17                    		int	17h		; PRINTER - INITIALIZE
  6453                                  					; DX = printer port (0-3)
  6454                                  					; Return: AH = status
  6455                                  got_end_of_bds_chain:	; 18/12/2022
  6456 00002116 C3                      		retn
  6457                                  
  6458                                  ; =============== S U B	R O U T	I N E =======================================
  6459                                  
  6460                                  ; al = device number
  6461                                  
  6462                                  aux_init:
  6463 00002117 98                      		cbw
  6464 00002118 89C2                    		mov	dx, ax
  6465                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  6466                                  					; 2400,n,1,8 (msequ.inc)
  6467                                  		;mov	ah, 0
  6468                                  		; 10/12/2022
  6469 0000211A B8A300                  		mov	ax, 00A3h
  6470 0000211D CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  6471                                  					; 	AL = initializing parameters,
  6472                                  					;	DX = port number (0-3)
  6473                                  					; Return: AH = RS-232 status code bits,
  6474                                  					;	  AL = modem status bits
  6475 0000211F C3                      		retn
  6476                                  
  6477                                  ; =============== S U B	R O U T	I N E =======================================
  6478                                  
  6479                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6480                                  ; 30/12/2018 - Retro DOS v4.0
  6481                                  ; 03/06/2018 - Retro DOS v3.0
  6482                                  ; (19/03/2018 - Retro DOS v2.0)
  6483                                  
  6484                                  ; domini **********************************************************************
  6485                                  ;
  6486                                  ;mini disk initialization routine. called right after dohard
  6487                                  ;modified for >2 hardfile support
  6488                                  ;
  6489                                  ; **cs=ds=es=datagrp
  6490                                  ;
  6491                                  ; **domini will search for every extended partition in the system, and
  6492                                  ;   initialize it.
  6493                                  ;
  6494                                  ; **bdsm stands for bds table for mini disk and located right after the label
  6495                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  6496                                  ;   address of bdsm table.
  6497                                  ;
  6498                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  6499                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  6500                                  ;   right now, they are called as ismini, hidden_trks respectively.
  6501                                  ;
  6502                                  ; **domini will use the same routine in sethard routine after label set2 to
  6503                                  ;   save coding.
  6504                                  ;
  6505                                  ; **drvmax determined in dohard routine will be used for the next
  6506                                  ;   available logical mini disk drive number.
  6507                                  ;
  6508                                  ; input: drvmax, dskdrvs
  6509                                  ;
  6510                                  ; output: minidisk installed. bdsm table established and installed to bds.
  6511                                  ;	  end_of_bdsm - ending offset address of bdsm.
  6512                                  ;
  6513                                  ; called modules:
  6514                                  ;		  getboot
  6515                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  6516                                  ;
  6517                                  ;		  setmini (new, it will use set2 routine)
  6518                                  ;
  6519                                  ; variables used: end_of_bdsm
  6520                                  ;		  rom_minidisk_num
  6521                                  ;		  mini_hdlim, mini_seclim
  6522                                  ;		  BDS_STRUC, start_bds
  6523                                  ;
  6524                                  ;******************************************************************************
  6525                                  
  6526                                  		; 19/10/2022
  6527                                  domini:	
  6528 00002120 8A36[4317]              		mov	dh, [hnum]	; get number of hardfiles
  6529                                  		; 10/12/2022
  6530 00002124 20F6                    		and	dh, dh
  6531                                  		;cmp	dh, 0
  6532 00002126 7431                    		jz	short dominiret	; no hard file?	then exit.
  6533 00002128 B280                    		mov	dl, 80h		; start	with hardfile 80h
  6534                                  domini_loop:				
  6535 0000212A 52                      		push	dx
  6536 0000212B 8816[4217]              		mov	[rom_minidisk_num], dl
  6537 0000212F B408                    		mov	ah, 8
  6538 00002131 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6539                                  					; DL = drive number
  6540                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6541                                  					; DL = number of consecutive drives
  6542                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6543 00002133 FEC6                    		inc	dh
  6544 00002135 31C0                    		xor	ax, ax
  6545 00002137 88F0                    		mov	al, dh
  6546 00002139 A3[4817]                		mov	[mini_hdlim], ax ; # of heads
  6547 0000213C 80E13F                  		and	cl, 3Fh
  6548 0000213F 88C8                    		mov	al, cl
  6549 00002141 A3[4A17]                		mov	[mini_seclim], ax ; # of sectors/track
  6550 00002144 06                      		push	es
  6551 00002145 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6552 00002149 E836FB                  		call	getboot		; read master boot record into
  6553                                  					; initbootsegment:bootbias
  6554 0000214C 7203                    		jb	short domininext
  6555 0000214E E80900                  		call	find_mini_partition
  6556                                  domininext:				
  6557 00002151 07                      		pop	es
  6558 00002152 5A                      		pop	dx
  6559 00002153 FEC2                    		inc	dl		; next hard file
  6560 00002155 FECE                    		dec	dh
  6561 00002157 75D1                    		jnz	short domini_loop
  6562                                  dominiret:				
  6563 00002159 C3                      		retn
  6564                                  
  6565                                  ; =============== S U B	R O U T	I N E =======================================
  6566                                  
  6567                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6568                                  ; 30/12/2018 - Retro DOS v4.0
  6569                                  
  6570                                  ;find_mini_partition tries to find every extended partition on a disk.
  6571                                  ;at entry:	di -> bdsm entry
  6572                                  ;		es:bx -> 07c0:bootbias - master boot record
  6573                                  ;		rom_minidisk_num - rom drive number
  6574                                  ;		drvmax - logical drive number
  6575                                  ;		mini_hdlim, mini_seclim
  6576                                  ;
  6577                                  ;called routine: setmini which uses set2 (in sethard routine)
  6578                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  6579                                  
  6580                                  
  6581                                  find_mini_partition:	
  6582 0000215A 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  6583                                  fmpnext:				
  6584 0000215E 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  6585 00002162 740A                    		jz	short fmpgot
  6586 00002164 83C310                  		add	bx, 16
  6587 00002167 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6588 0000216B 75F1                    		jnz	short fmpnext
  6589                                  		;jmp	short fmpnextfound ; extended partition	not found
  6590                                  		; 18/12/2022
  6591                                  fmpnextfound:
  6592 0000216D C3                      		retn
  6593                                  
  6594                                  ;		; 30/07/2019 - Retro DOS v3.2
  6595                                  ;		jb	short fmpnext
  6596                                  ;fmpret:
  6597                                  ;		retn	; 29/05/2019
  6598                                  
  6599                                  ; ---------------------------------------------------------------------------
  6600                                  
  6601                                  		; 19/10/2022
  6602                                  fmpgot:					; found my partition.				
  6603 0000216E E8A100                  		call	dmax_check	; check	for drvmax already 26
  6604 00002171 73FA                    		jnb	short fmpnextfound ; done if too many
  6605 00002173 8B3E[4617]              		mov	di, [end_of_bdss] ; get next free	bds
  6606 00002177 C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  6607                                  		; 10/12/2022
  6608 0000217C 804D2301                		or	byte [di+23h], 1
  6609                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  6610                                  					; fNon_Removable
  6611 00002180 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  6612                                  					; ffHardFile
  6613 00002184 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  6614 00002189 A1[4817]                		mov	ax, [mini_hdlim]
  6615 0000218C 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  6616 0000218F A1[4A17]                		mov	ax, [mini_seclim]
  6617 00002192 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  6618 00002195 A0[4217]                		mov	al, [rom_minidisk_num]
  6619 00002198 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  6620                                  					; set physical number
  6621 0000219B A0[7500]                		mov	al, [drvmax]
  6622 0000219E 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  6623                                  					; set logical number
  6624 000021A1 26837F0A00              		cmp	word [es:bx+10], 0
  6625 000021A6 7707                    		ja	short fmpgot_cont
  6626 000021A8 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  6627                                  					; only lower word is meaningful.
  6628 000021AD 72BE                    		jb	short fmpnextfound
  6629                                  					; should be bigger than 64 sectors at least
  6630                                  fmpgot_cont:				
  6631 000021AF 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  6632 000021B2 268A7702                		mov	dh, [es:bx+2]	; cylinder
  6633 000021B6 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  6634 000021B9 D0C6                    		rol	dh, 1
  6635 000021BB D0C6                    		rol	dh, 1
  6636 000021BD 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  6637 000021C1 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  6638                                  					; set hidden trks
  6639 000021C4 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  6640 000021C8 268A7701                		mov	dh, [es:bx+1]	; head
  6641 000021CC 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6642 000021D0 BB0002                  		mov	bx, 200h	; bootbias
  6643 000021D3 B80102                  		mov	ax, 201h
  6644 000021D6 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6645                                  					; AL = number of sectors to read, CH = track, CL = sector
  6646                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6647                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6648 000021D8 7293                    		jb	short fmpnextfound
  6649 000021DA BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  6650 000021DD 06                      		push	es
  6651 000021DE E80900                  		call	setmini		; install a mini disk.
  6652                                  					; bx value saved.
  6653 000021E1 07                      		pop	es
  6654 000021E2 7203                    		jb	short fmpnextchain
  6655 000021E4 E84000                  		call	xinstall_bds	; -- install the bdsm into table
  6656                                  fmpnextchain:				
  6657 000021E7 E974FF                  		jmp	fmpnext		; let's find out
  6658                                  					; if we	have any chained partition
  6659                                  ; ---------------------------------------------------------------------------
  6660                                  
  6661                                  		; 18/12/2022
  6662                                  ;fmpnextfound:				
  6663                                  		;retn
  6664                                  
  6665                                  ; =============== S U B	R O U T	I N E =======================================
  6666                                  
  6667                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6668                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6669                                  
  6670                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  6671                                  	
  6672 000021EA 57                      		push	di
  6673 000021EB 53                      		push	bx
  6674 000021EC 1E                      		push	ds
  6675 000021ED 06                      		push	es
  6676                                  setmini_1:				
  6677 000021EE 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  6678 000021F2 741B                    		jz	short setmini_2
  6679 000021F4 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  6680 000021F8 7415                    		jz	short setmini_2
  6681 000021FA 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG	partition
  6682 000021FE 740F                    		jz	short setmini_2
  6683 00002200 83C310                  		add	bx, 16
  6684 00002203 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6685 00002207 75E5                    		jnz	short setmini_1
  6686 00002209 F9                      		stc
  6687 0000220A 07                      		pop	es
  6688 0000220B 1F                      		pop	ds
  6689 0000220C 5B                      		pop	bx
  6690 0000220D 5F                      		pop	di
  6691 0000220E C3                      		retn
  6692                                  
  6693                                  ; ---------------------------------------------------------------------------
  6694                                  setmini_2:				
  6695 0000220F E91DFB                  		jmp	set2		; branch into middle of sethard
  6696                                  
  6697                                  ; =============== S U B	R O U T	I N E =======================================
  6698                                  
  6699                                  ; 15/10/2022
  6700                                  ; 28/12/2018 - Retro DOS v4.0
  6701                                  ;
  6702                                  ; dmax_check --- call this when we want to install a new drive.
  6703                                  ;		it checks for drvmax < 26 to see if there is
  6704                                  ;		a drive letter left.
  6705                                  ;
  6706                                  ;	drvmax < 26 : carry SET!
  6707                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  6708                                  ;			trash ax
  6709                                  
  6710                                  dmax_check:	
  6711 00002212 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  6712 00002217 720D                    		jb	short dmax_ok	; return with carry if okay
  6713 00002219 06                      		push	es
  6714                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  6715 0000221A B84104                  		mov	ax, SYSINITSEG	; 17/10/2022	
  6716 0000221D 8EC0                    		mov	es, ax
  6717                                  		; 18/10/2022
  6718 0000221F 26C606[FF03]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  6719                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  6720                                  					; set message flag
  6721                                  					; [SYSINIT+toomanydrivesflag]
  6722 00002225 07                      		pop	es
  6723                                  
  6724                                  		;;push	es
  6725                                  		;;mov	ax,SYSINIT_SEG
  6726                                  		;;mov	es,ax
  6727                                  		;;mov	byte [es:toomanydrivesflag],1
  6728                                  					; set message flag
  6729                                  		;;pop	es
  6730                                  		;
  6731                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  6732                                  dmax_ok:				
  6733 00002226 C3                      		retn
  6734                                  
  6735                                  ; =============== S U B	R O U T	I N E =======================================
  6736                                  
  6737                                  ; 18/10/2022
  6738                                  ; 15/10/2022
  6739                                  ; 28/12/2018 - Retro DOS v4.0						
  6740                                  ;								 
  6741                                  ;	link next bds (at ds:di) into the chain. assume that the
  6742                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  6743                                  ;	  dskdrv_table, and end_of_bdss.	
  6744                                  
  6745                                  xinstall_bds:		
  6746 00002227 56                      		push	si
  6747 00002228 53                      		push	bx
  6748 00002229 8B36[1901]              		mov	si, [start_bds]	; get first bds
  6749                                  xinstall_bds_1:				
  6750 0000222D 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  6751 00002230 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  6752                                  		;mov	si, [si+BDS.link]
  6753 00002232 8B34                    		mov	si, [si]	; chain	through	list
  6754 00002234 EBF7                    		jmp	short xinstall_bds_1
  6755                                  ; ---------------------------------------------------------------------------
  6756                                  
  6757                                  xinstall_bds_2:				
  6758                                  		;mov	[si+BDS.link], di
  6759 00002236 893C                    		mov	[si], di
  6760                                  		;mov	[si+BDS.link+2], ds
  6761 00002238 8C5C02                  		mov	[si+2], ds
  6762                                  		;mov	word [di+BDS.link], -1
  6763 0000223B C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  6764                                  		;mov	[di+BDS.link+2], ds
  6765 0000223F 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  6766                                  		; 20/03/2019 - Retro DOS v4.0
  6767                                  		;lea	bx, [di+BDS.BPB]
  6768 00002242 8D5D06                  		lea	bx, [di+6]
  6769 00002245 8B36[4417]              		mov	si, [last_dskdrv_table]
  6770 00002249 891C                    		mov	[si], bx
  6771 0000224B 8306[4417]02            		add	word [last_dskdrv_table], 2
  6772 00002250 FE06[7500]              		inc	byte [drvmax]
  6773 00002254 8306[4617]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  6774 00002259 5B                      		pop	bx
  6775 0000225A 5E                      		pop	si
  6776 0000225B C3                      		retn
  6777                                  
  6778                                  ; =============== S U B	R O U T	I N E =======================================
  6779                                  
  6780                                  ; 17/10/2022
  6781                                  ; 15/10/2022
  6782                                  ; 28/12/2018 - Retro DOS v4.0
  6783                                  ; 03/06/2018 - Retro DOS v3.0
  6784                                  
  6785                                  cmos_clock_read:	
  6786 0000225C 50                      		push	ax
  6787 0000225D 51                      		push	cx
  6788 0000225E 52                      		push	dx
  6789 0000225F 55                      		push	bp
  6790 00002260 31ED                    		xor	bp, bp
  6791                                  loop_clock:				
  6792 00002262 31C9                    		xor	cx, cx
  6793 00002264 31D2                    		xor	dx, dx
  6794 00002266 B402                    		mov	ah, 2
  6795 00002268 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  6796                                  					; Return: CH = hours in	BCD
  6797                                  					; CL = minutes in BCD
  6798                                  					; DH = seconds in BCD
  6799 0000226A 83F900                  		cmp	cx, 0
  6800 0000226D 7512                    		jnz	short clock_present
  6801 0000226F 83FA00                  		cmp	dx, 0
  6802 00002272 750D                    		jnz	short clock_present
  6803 00002274 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  6804 00002277 741C                    		jz	short no_readdate ; was	at zero	setting.
  6805 00002279 45                      		inc	bp		; only perform delay once.
  6806 0000227A B90040                  		mov	cx, 4000h	; 16384
  6807                                  delay:					
  6808 0000227D E2FE                    		loop	delay
  6809 0000227F EBE1                    		jmp	short loop_clock
  6810                                  ; ---------------------------------------------------------------------------
  6811                                  
  6812                                  clock_present:				
  6813 00002281 2EC606[F304]01          		mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  6814 00002287 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  6815                                  					; possibly destroyed by	cp dos and
  6816                                  					; post routine did not restore that.
  6817 0000228A 56                      		push	si
  6818 0000228B E89BF2                  		call	read_real_date	; read real-time clock for date
  6819 0000228E FA                      		cli
  6820                                  		;mov	ds:daycnt, si	; set system date
  6821 0000228F 8936[F004]              		mov	[daycnt], si
  6822 00002293 FB                      		sti
  6823 00002294 5E                      		pop	si
  6824                                  
  6825                                  no_readdate:				
  6826 00002295 5D                      		pop	bp
  6827 00002296 5A                      		pop	dx
  6828 00002297 59                      		pop	cx
  6829 00002298 58                      		pop	ax
  6830 00002299 C3                      		retn
  6831                                  
  6832                                  ; ---------------------------------------------------------------------------
  6833                                  
  6834                                  ; the following code is written by jack gulley in engineering group.
  6835                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  6836                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  6837                                  ; the cmos clock rate are still slow which slow down disk operations
  6838                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  6839                                  ; to fix this problem at the request of cp dos.
  6840                                  ;
  6841                                  ; the program is modified to be run on msinit. equates are defined
  6842                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  6843                                  ;
  6844                                  ;  the following code cmosck is used to insure that the cmos has not
  6845                                  ;	had its rate controls left in an invalid state on older at's.
  6846                                  ;
  6847                                  ;	it checks for an at model byte "fc" with a submodel type of
  6848                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  6849                                  ;	bits in case post has not done it. this initilization routine
  6850                                  ;	is only needed once when dos loads. it should be run as soon
  6851                                  ;	as possible to prevent slow diskette access.
  6852                                  ;
  6853                                  ;	this code exposes one to dos clearing cmos setup done by a
  6854                                  ;	resident program that hides and re-boots the system.
  6855                                  
  6856                                  cmosck:					; check and reset rtc rate bits	
  6857                                  
  6858                                  ;model byte and submodel byte were already determined in msinit.
  6859                                  
  6860                                  	; 16/06/2018 - Retro DOS v3.0
  6861                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  6862                                  			
  6863 0000229A 50                      		push	ax
  6864 0000229B 2E803E[3E06]FC          		cmp	byte [cs:model_byte], 0FCh
  6865 000022A1 7525                    		jnz	short cmosck9	; Exit if not an AT model
  6866 000022A3 2E803E[3F06]06          		cmp	byte [cs:secondary_model_byte], 6
  6867                                  					; Is it 06 for the industral AT ?
  6868 000022A9 7408                    		jz	short cmosck4	; Go reset CMOS	periodic rate if 06
  6869 000022AB 2E803E[3F06]04          		cmp	byte [cs:secondary_model_byte], 4
  6870                                  					; Is it 00, 01, 02, or 03 ?
  6871 000022B1 7315                    		jnb	short cmosck9	; EXIT if problem fixed by POST  
  6872                                  					; Also,Secondary_model_byte = 0 
  6873                                  					;   when AH=0C0h, int 15h failed.
  6874                                  					;	RESET THE CMOS PERIODIC RATE 
  6875                                  					;  Model=FC submodel=00,01,02,03 or 06 
  6876                                  cmosck4:				
  6877 000022B3 B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  6878                                  					; NMI disabled on return
  6879 000022B5 B426                    		mov	ah, 26h		; 00100110b
  6880                                  					; Set divider &	rate selection
  6881 000022B7 E83000                  		call	cmos_write
  6882 000022BA B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  6883                                  					; NMI disabled on return
  6884 000022BC E80B00                  		call	cmos_read
  6885 000022BF 2407                    		and	al, 7		; 00000111b
  6886                                  					; clear	SET,PIE,AIE,UIE,SQWE
  6887 000022C1 88C4                    		mov	ah, al
  6888 000022C3 B00B                    		mov	al, 0Bh		; cmos_reg_b
  6889                                  					; NMI enabled on return
  6890 000022C5 E82200                  		call	cmos_write
  6891                                  cmosck9:				
  6892 000022C8 58                      		pop	ax
  6893 000022C9 C3                      		retn
  6894                                  
  6895                                  ; =============== S U B	R O U T	I N E =======================================
  6896                                  
  6897                                  ;--- CMOS_READ -----------------------------------------------------------------
  6898                                  ;		read byte from cmos system clock configuration table	       :
  6899                                  ;									       :
  6900                                  ; input: (al)=	cmos table address to be read				       :
  6901                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  6902                                  ;		bits 6-0 = address of table location to read		       :
  6903                                  ;									       :
  6904                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  6905                                  ;		on then nmi left disabled.  during the cmos read both nmi and  :
  6906                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  6907                                  ;		the cmos address register is pointed to a default value and    :
  6908                                  ;		the interrupt flag restored to the entry state on return.      :
  6909                                  ;		only the (al) register and the nmi state is changed.	       :
  6910                                  ;-------------------------------------------------------------------------------
  6911                                  
  6912                                  cmos_read:				; read location (al) into (al)	
  6913 000022CA 9C                      		pushf
  6914 000022CB FA                      		cli
  6915 000022CC 53                      		push	bx
  6916 000022CD 50                      		push	ax		; AL = cmos table address to be	read
  6917 000022CE 0C80                    		or	al, 80h
  6918 000022D0 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6919                                  					; RTC Seconds
  6920 000022D2 90                      		nop			; (undocumented	delay needed)
  6921 000022D3 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  6922 000022D5 89C3                    		mov	bx, ax
  6923 000022D7 58                      		pop	ax
  6924 000022D8 2480                    		and	al, 80h
  6925 000022DA 0C0F                    		or	al, 0Fh
  6926 000022DC E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6927                                  					; RTC Seconds
  6928 000022DE 90                      		nop
  6929 000022DF E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  6930 000022E1 89D8                    		mov	ax, bx
  6931 000022E3 5B                      		pop	bx
  6932 000022E4 0E                      		push	cs		; *place code segment in stack and
  6933 000022E5 E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  6934 000022E8 C3                      		retn			; return with flags restored
  6935                                  
  6936                                  ; ---------------------------------------------------------------------------
  6937                                  
  6938                                  cmos_popf:				
  6939 000022E9 CF                      		iret			; popf for level b- parts
  6940                                  					; return far and restore flags
  6941                                  
  6942                                  ; =============== S U B	R O U T	I N E =======================================
  6943                                  
  6944                                  ;--- cmos_write ----------------------------------------------------------------
  6945                                  ;		write byte to cmos system clock configuration table	       :
  6946                                  ;									       :
  6947                                  ; input: (al)=	cmos table address to be written to			       :
  6948                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  6949                                  ;		bits 6-0 = address of table location to write		       :
  6950                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  6951                                  ;									       :
  6952                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  6953                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  6954                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  6955                                  ;		the cmos address register is pointed to a default value and    :
  6956                                  ;		the interrupt flag restored to the entry state on return.      :
  6957                                  ;		only the cmos location and the nmi state is changed.	       :
  6958                                  ;-------------------------------------------------------------------------------
  6959                                  
  6960                                  cmos_write:				; write (ah) to location (al)	
  6961 000022EA 9C                      		pushf			; write (ah) to location (al)
  6962 000022EB 50                      		push	ax		; save work register values
  6963 000022EC FA                      		cli
  6964 000022ED 50                      		push	ax		; save user nmi	state
  6965 000022EE 0C80                    		or	al, 80h		; disable nmi for us
  6966 000022F0 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6967                                  					; RTC Seconds
  6968 000022F2 90                      		nop
  6969 000022F3 88E0                    		mov	al, ah
  6970 000022F5 E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  6971 000022F7 58                      		pop	ax		; get user nmi
  6972 000022F8 2480                    		and	al, 80h
  6973 000022FA 0C0F                    		or	al, 0Fh
  6974 000022FC E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6975                                  					; RTC Seconds
  6976 000022FE 90                      		nop
  6977 000022FF E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  6978 00002301 58                      		pop	ax		; restore work registers
  6979 00002302 0E                      		push	cs		; *place code segment in stack and
  6980 00002303 E8E3FF                  		call	cmos_popf	; *handle popf for b- level 80286
  6981 00002306 C3                      		retn
  6982                                  
  6983                                  ; 21/12/2022
  6984                                  ; ---------------------------------------------------------------------------
  6985                                  ; ---------------------------------------------------------------------------
  6986                                  %if 0
  6987                                  
  6988                                  ; ---------------------------------------------------------------------------
  6989                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  6990                                  ; ---------------------------------------------------------------------------
  6991                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  6992                                  ; ---------------------------------------------------------------------------
  6993                                  
  6994                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6995                                  ;
  6996                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  6997                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  6998                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  6999                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7000                                  
  7001                                  ; =============== S U B	R O U T	I N E =======================================
  7002                                  
  7003                                  ; GetClus, read in a cluster at a specified address
  7004                                  ;
  7005                                  ;  bx = cluster to read
  7006                                  ;  cx = sectors per cluster
  7007                                  ;  es:di = load location
  7008                                  
  7009                                  ; 17/10/2022
  7010                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7011                                  ; 09/12/2022
  7012                                  DISKRD equ diskrd
  7013                                  
  7014                                  		; 17/10/2022
  7015                                  getclus:				
  7016                                  		push	cx
  7017                                  		push	di
  7018                                  		mov	[cs:doscnt], cx
  7019                                  		mov	ax, bx
  7020                                  		dec	ax
  7021                                  		dec	ax
  7022                                  		mul	cx		; convert to logical sector
  7023                                  					; dx:ax	= matching logical sector number
  7024                                  					;	  starting from the data sector
  7025                                  		add	ax, [cs:bios_l]
  7026                                  		adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7027                                  unpack:					
  7028                                  		push	ds
  7029                                  		push	ax
  7030                                  		push	bx
  7031                                  		mov	si, [cs:fatloc]
  7032                                  		mov	ds, si
  7033                                  		mov	si, bx		; next cluster
  7034                                  		test	byte [cs:fbigfat], 40h	; fbig
  7035                                  					; 16 bit fat?jh
  7036                                  		jnz	short unpack16	; yes
  7037                                  		shr	si, 1		; 12 bit fat. si=si/2
  7038                                  					; si = clus + clus/2
  7039                                  		add	si, bx		;
  7040                                  					; (si =	byte offset of the cluster in the FAT)
  7041                                  		push	dx
  7042                                  		xor	dx, dx
  7043                                  		call	get_fat_sector
  7044                                  		pop	dx
  7045                                  		mov	ax, [bx]	; save it into ax
  7046                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7047                                  		mov	al, [bx]	; splitted fat
  7048                                  		mov	[cs:temp_cluster], al
  7049                                  		inc	si		; (next	byte)
  7050                                  		push	dx
  7051                                  		xor	dx, dx
  7052                                  		call	get_fat_sector
  7053                                  		pop	dx
  7054                                  		;mov	al, ds:0
  7055                                  		mov	al, [0] ; 19/10/2022
  7056                                  		mov	[cs:temp_cluster+1], al
  7057                                  		mov	ax, [cs:temp_cluster]
  7058                                  even_odd:				
  7059                                  		pop	bx		; restore old fat entry	value
  7060                                  		push	bx		; save it right	away.
  7061                                  		shr	bx, 1		; was it even or odd?
  7062                                  		jnb	short havclus	; it was even.
  7063                                  		shr	ax, 1		; odd. massage fat value and keep
  7064                                  					; the highest 12 bits.
  7065                                  		shr	ax, 1
  7066                                  		shr	ax, 1
  7067                                  		shr	ax, 1
  7068                                  havclus:				
  7069                                  		mov	bx, ax		; now bx = new fat entry.
  7070                                  		and	bx, 0FFFh	; keep low 12 bits.
  7071                                  		jmp	short unpackx
  7072                                  ; ---------------------------------------------------------------------------
  7073                                  
  7074                                  unpack16:				
  7075                                  		push	dx
  7076                                  		xor	dx, dx
  7077                                  		shl	si, 1		; extend to 32 bit offset
  7078                                  		adc	dx, 0
  7079                                  		call	get_fat_sector
  7080                                  		pop	dx
  7081                                  		mov	bx, [bx]	;
  7082                                  					; bx = new fat entry.
  7083                                  unpackx:				
  7084                                  		pop	si		; restore old bx value into si
  7085                                  		pop	ax		; restore logical sector (low)
  7086                                  		pop	ds
  7087                                  		sub	si, bx
  7088                                  		cmp	si, -1		; one apart?
  7089                                  		jnz	short getcl2
  7090                                  		add	[cs:doscnt], cx
  7091                                  		jmp	short unpack
  7092                                  ; ---------------------------------------------------------------------------
  7093                                  
  7094                                  getcl2:					
  7095                                  		push	bx
  7096                                  		push	dx		; sector to read (high)
  7097                                  		push	ax		; sector to read (low)
  7098                                  		mov	ax, [cs:drvfat]	; get drive and	fat spec
  7099                                  		mov	cx, [cs:doscnt]
  7100                                  		pop	dx		; sector to read for diskrd (low)
  7101                                  		pop	word [cs:start_sec_h]
  7102                                  					; sector to read for diskrd (high)
  7103                                  		push	ds
  7104                                  		push	cs
  7105                                  		pop	ds
  7106                                  		push	cs		; simulate far call
  7107                                  		; 17/10/2022
  7108                                  		mov	bp, DISKRD	; 8E5h
  7109                                  		;mov	bp, 8E5h	; offset diskrd
  7110                                  					; 2C7h:8E5h = 70h:2E55h
  7111                                  		call	call_bios_code	; read the clusters
  7112                                  		pop	ds
  7113                                  		pop	bx
  7114                                  		pop	di
  7115                                  		mov	ax, [cs:doscnt]	; get number of	sectors	read
  7116                                  		xchg	ah, al		; multiply by 256
  7117                                  		shl	ax, 1		; times	2 equal	512
  7118                                  		add	di, ax		; update load location
  7119                                  		pop	cx		; restore sectors/cluster
  7120                                  		retn
  7121                                  
  7122                                  ; =============== S U B	R O U T	I N E =======================================
  7123                                  
  7124                                  
  7125                                  ;function: find and read the corresponding fat sector into ds:0
  7126                                  ;
  7127                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7128                                  ;     ds - fatloc segment
  7129                                  ;     cs:drvfat - logical drive number, fat id
  7130                                  ;     cs:md_sectorsize
  7131                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7132                                  ;
  7133                                  ;out). corresponding fat sector read in.
  7134                                  ;      bx = offset value from fatlog segment.
  7135                                  ;      other registera saved.
  7136                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7137                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7138                                  ;      should save this byte, and read the next fat sector to get the rest
  7139                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7140                                  
  7141                                  		; 17/10/2022
  7142                                  get_fat_sector:	
  7143                                  		push	ax
  7144                                  		push	cx
  7145                                  		push	di
  7146                                  		push	si
  7147                                  		push	es
  7148                                  		push	ds
  7149                                  		mov	ax, si
  7150                                  		mov	cx, [cs:md_sectorsize] ; 512
  7151                                  		div	cx		; ax=sector number, dx = offset
  7152                                  		nop
  7153                                  
  7154                                  		; Get rid of the assumption that
  7155                                  		; there	is only	one reserved sector
  7156                                  
  7157                                  		push	es
  7158                                  		push	ds
  7159                                  		push	di
  7160                                  		push	ax
  7161                                  		push	cs
  7162                                  		pop	ds
  7163                                  
  7164                                  		mov	ax, [cs:drvfat]	; get drive # and FAT id
  7165                                  		mov	bp, SETDRIVE
  7166                                  		;mov	bp, 4D7h	; setdrive
  7167                                  					; at 2C7h:4D7h = 70h:2A47h
  7168                                  		push	cs		; simulate far call
  7169                                  		call	call_bios_code	; get bds for drive
  7170                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7171                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7172                                  					; add #reserved_sectors
  7173                                  		pop	di
  7174                                  		pop	ds
  7175                                  		pop	es
  7176                                  		cmp	ax, [cs:last_fat_sec_num]
  7177                                  		jz	short gfs_split_chk ; don't need to read it again.
  7178                                  		mov	[cs:last_fat_sec_num], ax 
  7179                                  					; sector number
  7180                                  					; (in the partition, without hidden sectors)
  7181                                  		push	dx
  7182                                  		mov	word [cs:start_sec_h], 0 
  7183                                  					; prepare to read the fat sector
  7184                                  					; start_sec_h is always	0 for fat sector.
  7185                                  		mov	dx, ax
  7186                                  		mov	cx, 1		; 1 sector read
  7187                                  		mov	ax, [cs:drvfat]
  7188                                  		push	ds
  7189                                  		pop	es
  7190                                  		xor	di, di		; es:di	-> fatloc segment:0
  7191                                  		push	ds
  7192                                  		push	cs
  7193                                  		pop	ds
  7194                                  		push	cs		; simulate far call
  7195                                  		mov	bp, DISKRD	; 8E5h
  7196                                  		;mov	bp, 8E5h	; offset diskrd
  7197                                  					; 2C7h:8E5h = 70h:2E55h
  7198                                  		call	call_bios_code
  7199                                  		pop	ds
  7200                                  		pop	dx
  7201                                  		mov	cx, [cs:md_sectorsize] ; 512
  7202                                  
  7203                                  gfs_split_chk:				
  7204                                  		dec	cx		; 511
  7205                                  		cmp	dx, cx		; if offset points to the
  7206                                  					; last byte of this sector,
  7207                                  					; then splitted	entry.
  7208                                  		mov	bx, dx		; set bx to dx
  7209                                  		pop	ds
  7210                                  		pop	es
  7211                                  		pop	si
  7212                                  		pop	di
  7213                                  		pop	cx
  7214                                  		pop	ax
  7215                                  		retn
  7216                                  
  7217                                  ; 15/10/2022
  7218                                  ;Bios_Data_Init	ends
  7219                                  
  7220                                  %endif
  7221                                  ; ---------------------------------------------------------------------------
  7222                                  ; ---------------------------------------------------------------------------
  7223                                  
  7224                                  		; 09/12/2022
  7225                                  		;db 0
  7226                                  
  7227                                  numbertodiv	equ ($-BData_start)
  7228                                  numbertomod	equ (numbertodiv % 16)
  7229                                  
  7230                                  %if numbertomod>0 & numbertomod<16
  7231 00002307 00<rep 9h>              		times (16-numbertomod) db 0
  7232                                  %endif
  7233                                  
  7234                                  ;align 16
  7235                                  
  7236                                  ; 09/12/2022
  7237                                  IOSYSCODESEGOFF	equ $ - BData_start
  7238                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7239                                  
  7240                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7241                                  ; ---------------------------------------------------------------------------
  7242                                  		;db 4 dup(0)
  7243                                  ; 09/12/2022		
  7244                                  ;		times 4 db 0	; 19/10/2022
  7245                                  ; ---------------------------------------------------------------------------
  7246                                  
  7247                                  ;============================================================================
  7248                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7249                                  ;============================================================================
  7250                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7251                                  
  7252                                  section .BIOSCODE vstart=0  
  7253                                  
  7254                                  BCode_start:	 ; 09/12/2022
  7255                                   
  7256                                  ; 02/10/2022
  7257                                  
  7258                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7259                                  ;----------------------------------------------------------------------------
  7260                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7261                                  ;----------------------------------------------------------------------------
  7262                                  
  7263                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7264 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7265 00000030 7000                    BiosDataWord:	dw 70h
  7266                                  
  7267                                  ; 15/10/2022
  7268                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7269                                  ; 09/12/2022
  7270                                  BIOSDATAWORD	equ BiosDataWord
  7271                                  
  7272                                  ; ---------------------------------------------------------------------------
  7273                                  
  7274                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7275                                  
  7276                                  ;************************************************************************
  7277                                  ;*									*
  7278                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7279                                  ;*	  trashes di, cx, es						*
  7280                                  ;*									*
  7281                                  ;*	cas -- should be made disposable!				*
  7282                                  ;*									*
  7283                                  ;************************************************************************
  7284                                  
  7285                                  _seg_reinit:
  7286 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7287                                  					; at 2C7h:30h or 70h:25A0h
  7288                                  		;mov	di, (offset cdev+2)
  7289 00000037 BF[E006]                		mov	di, cdev+2	; 19/10/2022
  7290 0000003A B90400                  		mov	cx, 4		; (end_BC_entries - cdev)/4
  7291                                  
  7292                                  _seg_reinit_1:				
  7293 0000003D AB                      		stosw			; modify Bios_Code entry points
  7294 0000003E 47                      		inc	di
  7295 0000003F 47                      		inc	di
  7296 00000040 E2FB                    		loop	_seg_reinit_1
  7297 00000042 CB                      		retf
  7298                                  
  7299                                  ; ---------------------------------------------------------------------------
  7300                                  
  7301                                  ; 15/10/2022
  7302                                  
  7303                                  ;************************************************************************
  7304                                  ;*									*
  7305                                  ;*	chardev_entry - main device driver dispatch routine		*
  7306                                  ;*	   called with a dummy parameter block on the stack		*
  7307                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  7308                                  ;*									*
  7309                                  ;*	will eventually take care of doing the transitions in		*
  7310                                  ;*	   out of Bios_Code						*
  7311                                  ;*									*
  7312                                  ;************************************************************************
  7313                                  
  7314                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  7315 00000043 56                      		push	si
  7316 00000044 50                      		push	ax
  7317 00000045 51                      		push	cx
  7318 00000046 52                      		push	dx
  7319 00000047 57                      		push	di
  7320 00000048 55                      		push	bp
  7321 00000049 1E                      		push	ds
  7322 0000004A 06                      		push	es
  7323 0000004B 53                      		push	bx
  7324 0000004C 89E5                    		mov	bp, sp
  7325 0000004E 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  7326                                  		;;mov	ds, word [cs:0030h]
  7327                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7328 00000051 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7329 00000056 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  7330 00000059 A2[2100]                		mov	[auxnum], al
  7331 0000005C 8826[E704]              		mov	[printdev], ah
  7332 00000060 8B34                    		mov	si, [si]	; point	to the device dispatch table
  7333 00000062 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  7334 00000066 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  7335 0000006A 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  7336 0000006E 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  7337 00000072 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  7338                                  		; 17/10/2022
  7339 00000076 81FE[9604]              		cmp	si, DSKTBL
  7340                                  		;cmp	si, 4A2h	; dsktbl
  7341                                  					; at 2C7h:4A2h = 70h:2A12h
  7342 0000007A 7517                    		jnz	short no_sector32_mapping
  7343                                  
  7344                                  ; Special case for 32-bit start sector number:
  7345                                  ;   if (si==dsktbl) /* if this is a disk device call */
  7346                                  ;      set high 16 bits of secnum to 0
  7347                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  7348                                  ;
  7349                                  ; pass high word of sector number in start_sec_h, low word in dx
  7350                                  ;
  7351                                  ; note: start_l and start_h are the offsets within the io_request packet
  7352                                  ;	  which contain the low and hi words of the 32 bit start sector if
  7353                                  ;	  it has been used.
  7354                                  ;
  7355                                  ; note: remember not to destroy the registers which have been set up before
  7356                                  
  7357                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  7358 0000007C C706[2B05]0000          		mov	word [start_sec_h], 0
  7359 00000082 83FAFF                  		cmp	dx, 0FFFFh
  7360 00000085 750C                    		jnz	short no_sector32_mapping
  7361 00000087 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  7362                                  					; 32 bits dsk req
  7363                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  7364 0000008B 8916[2B05]              		mov	[start_sec_h], dx
  7365 0000008F 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  7366                                  					; dx = packet.start_l
  7367                                  no_sector32_mapping:			
  7368 00000093 97                      		xchg	ax, di
  7369 00000094 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  7370 00000098 2E3A04                  		cmp	al, cs:[si]
  7371 0000009B 732C                    		jnb	short command_error
  7372 0000009D 98                      		cbw			; note that al <= 15 means ok
  7373 0000009E D1E0                    		shl	ax, 1
  7374 000000A0 01C6                    		add	si, ax
  7375 000000A2 97                      		xchg	ax, di
  7376 000000A3 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  7377 000000A7 FC                      		cld
  7378                                  		; 17/10/2022
  7379 000000A8 2EFF5401                		call	near [cs:si+1]
  7380                                  		;call	word ptr cs:si+1
  7381 000000AC 7202                    		jb	short already_got_ah_status
  7382 000000AE B401                    		mov	ah, 1
  7383                                  already_got_ah_status:
  7384                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  7385                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7386                                  					; cas note: shouldn't be needed!
  7387 000000B0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7388                                  		;lds	bx, ds:ptrsav
  7389 000000B5 C51E[1200]              		lds	bx, [ptrsav]
  7390 000000B9 894703                  		mov	[bx+3],	ax	; [bx+status]
  7391                                  					; mark operation complete
  7392 000000BC 5B                      		pop	bx
  7393 000000BD 07                      		pop	es
  7394 000000BE 1F                      		pop	ds
  7395 000000BF 5D                      		pop	bp
  7396 000000C0 5F                      		pop	di
  7397 000000C1 5A                      		pop	dx
  7398 000000C2 59                      		pop	cx
  7399 000000C3 58                      		pop	ax
  7400 000000C4 5E                      		pop	si
  7401 000000C5 83C402                  		add	sp, 2		; get rid of fake return address
  7402                                  	
  7403                                  		; fall through into bc_retf
  7404                                  ; ---------------------------------------------------------------------------	
  7405                                  bc_retf:
  7406 000000C8 CB                      		retf
  7407                                  ; ---------------------------------------------------------------------------
  7408                                  
  7409                                  command_error:				
  7410 000000C9 E80900                  		call	bc_cmderr
  7411 000000CC EBE2                    		jmp	short already_got_ah_status
  7412                                  ; 15/10/2022
  7413                                  ; 01/05/2019
  7414                                  
  7415                                  ;----------------------------------------------------------------------------
  7416                                  ; The following piece of hack is for supporting CP/M compatibility
  7417                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  7418                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  7419                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  7420                                  ; high.
  7421                                  ;----------------------------------------------------------------------------
  7422                                  
  7423                                  		;db 7 dup(0)
  7424                                  
  7425                                  		; 15/10/2022
  7426                                  
  7427 000000CE 0000                    		dw 0		; pad to bring offset to 0D0h
  7428                                  
  7429 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  7430                                  				;  which is the CP/M call 5 entry point
  7431                                  		
  7432                                  
  7433                                  ; ---------------------------------------------------------------------------
  7434                                  
  7435                                  ;	exit - all routines return through this path
  7436                                  
  7437                                  bc_cmderr:				
  7438 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  7439                                  					; unknown command error
  7440                                  
  7441                                  ; =============== S U B	R O U T	I N E =======================================
  7442                                  
  7443                                  ;	now zero the count field by subtracting its current value,
  7444                                  ;	  which is still in cx, from itself.
  7445                                  
  7446                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  7447                                  ;	  in order to return the number actually complete
  7448                                  
  7449                                  bc_err_cnt:	
  7450                                  		;les	bx, ds:ptrsav
  7451                                  		; 19/10/2022
  7452 000000D7 C41E[1200]              		les	bx, [ptrsav]
  7453 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  7454                                  					; # of successful i/o's
  7455 000000DF B481                    		mov	ah, 81h		; mark error return
  7456 000000E1 F9                      		stc			; indicate abnormal end
  7457 000000E2 C3                      		retn
  7458                                  
  7459                                  ; 15/10/2022
  7460                                  
  7461                                  ;Bios_Code ends
  7462                                  
  7463                                  ;----------------------------------------------------------------------------
  7464                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  7465                                  ;----------------------------------------------------------------------------
  7466                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7467                                  ; 10/01/2019 - Retro DOS v4.0
  7468                                  
  7469                                  ; 30/04/2019
  7470                                  
  7471                                  ;title	mschar - character and clock devices
  7472                                  
  7473                                  ;MODE_CTRLBRK	equ	0FFh
  7474                                  
  7475                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  7476                                  
  7477                                  ;************************************************************************
  7478                                  ;*									*
  7479                                  ;*	device driver dispatch tables					*
  7480                                  ;*									*
  7481                                  ;*	each table starts with a byte which lists the number of		*
  7482                                  ;*	legal functions, followed by that number of words. Each		*
  7483                                  ;*	word represents an offset of a routine in Bios_Code which	*
  7484                                  ;*	handles the function. The functions are terminated with		*
  7485                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  7486                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  7487                                  ;*	returned as abnormal completion status. Notice that ds		*
  7488                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  7489                                  ;*									*
  7490                                  ;************************************************************************
  7491                                  
  7492                                  		; 13/12/2022
  7493                                  		;db 0
  7494                                  
  7495                                  		; 13/12/202
  7496 000000E3 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  7497                                  					; 2C7h:0E4h = 70h:2654h
  7498 000000E4 [F901]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7499                                  					; 00 init
  7500 000000E6 [F901]                  		dw bc_exvec  ; 1FBh	; 01
  7501 000000E8 [F901]                  		dw bc_exvec  ; 1FBh	; 02
  7502 000000EA [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  7503                                  					; 03
  7504 000000EC [5B01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  7505                                  					; 04
  7506 000000EE [9E01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  7507                                  					; 05
  7508 000000F0 [F901]                  		dw bc_exvec  ; 1FBh	; 06
  7509 000000F2 [0702]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  7510                                  					; 07
  7511 000000F4 [FB01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  7512                                  					; 08
  7513 000000F6 [FB01]                  		dw con_writ  ; 1FDh	; 09
  7514 000000F8 [F901]                  		dw bc_exvec  ; 1FBh	; 0A
  7515                                  con_table_end:
  7516 000000FA 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  7517                                  					; 2C7h:0FBh = 70h:266Bh
  7518 000000FB [F901]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  7519 000000FD [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7520 000000FF [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7521 00000101 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  7522 00000103 [1802]                  		dw prn_input  ;	21Ah	; prn_input
  7523                                  					; 04 indicate zero chars read
  7524 00000105 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7525                                  					; 05 read non-destructive
  7526 00000107 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7527 00000109 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7528 0000010B [1D02]                  		dw prn_writ   ;	21Fh	; prn_writ
  7529 0000010D [1D02]                  		dw prn_writ   ; 21Fh	; 09
  7530 0000010F [4E02]                  		dw prn_stat   ; 251h	; prn_stat
  7531 00000111 [F901]                  		dw bc_exvec   ; 1FBh	; 0B
  7532 00000113 [F901]                  		dw bc_exvec   ; 1FBh	; 0C
  7533 00000115 [F901]                  		dw bc_exvec   ; 1FBh	; 0D
  7534 00000117 [F901]                  		dw bc_exvec   ; 1FBh	; 0E
  7535 00000119 [F901]                  		dw bc_exvec   ; 1FBh	; 0F
  7536 0000011B [8802]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  7537 0000011D [F901]                  		dw bc_exvec   ; 1FBh	; 11
  7538 0000011F [F901]                  		dw bc_exvec   ; 1FBh	; 12
  7539 00000121 [B602]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  7540 00000123 [F901]                  		dw bc_exvec   ; 1FBh	; 14
  7541 00000125 [F901]                  		dw bc_exvec   ; 1FBh	; 15
  7542 00000127 [F901]                  		dw bc_exvec   ; 1FBh	; 16
  7543 00000129 [F901]                  		dw bc_exvec   ; 1FBh	; 17
  7544 0000012B [F901]                  		dw bc_exvec   ; 1FBh	; 18
  7545 0000012D [EB02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  7546                                  prn_table_end:
  7547 0000012F 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  7548                                  					; 2C7h:130h = 70h:26A0h
  7549 00000130 [F901]                  		dw bc_exvec   ; 1FBh	; 00 - init
  7550 00000132 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7551 00000134 [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7552 00000136 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7553 00000138 [0603]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  7554 0000013A [2D03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  7555 0000013C [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7556 0000013E [6303]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  7557 00000140 [6A03]                  		dw aux_writ   ;	374h	; aux_writ
  7558 00000142 [6A03]                  		dw aux_writ   ;	374h	; 09
  7559 00000144 [4D03]                  		dw aux_wrst   ;	355h	; aux_wrst
  7560                                  aux_table_end:
  7561 00000146 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  7562                                  					; 2C7h:147h = 70h:26B7h
  7563 00000147 [F901]                  		dw bc_exvec   ; 1FBh	; 00
  7564 00000149 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7565 0000014B [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7566 0000014D [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7567 0000014F [2904]                  		dw tim_read   ;	435h	; tim_read
  7568 00000151 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7569 00000153 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7570 00000155 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7571 00000157 [D003]                  		dw tim_writ   ; 3DBh	; tim_writ
  7572 00000159 [D003]                  		dw tim_writ   ; 3DBh	; 09
  7573                                  tim_table_end:
  7574                                  
  7575                                  ; ---------------------------------------------------------------------------
  7576                                  
  7577                                  ;************************************************************************
  7578                                  ;*									*
  7579                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  7580                                  ;*									*
  7581                                  ;************************************************************************
  7582                                  
  7583                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  7584                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  7585 0000015B E306                    		jcxz	con_exit	; 19/10/2022
  7586                                  con_loop:				
  7587 0000015D E80500                  		call	chrin		; get char in al
  7588 00000160 AA                      		stosb			; store	char at	es:di
  7589 00000161 E2FA                    		loop	con_loop
  7590                                  con_exit:				
  7591 00000163 F8                      		clc
  7592 00000164 C3                      		retn
  7593                                  
  7594                                  ; =============== S U B	R O U T	I N E =======================================
  7595                                  
  7596                                  ;************************************************************************
  7597                                  ;*									*
  7598                                  ;*	chrin - input single char from keyboard into al			*
  7599                                  ;*									*
  7600                                  ;*	  we are going to issue extended keyboard function, if		*
  7601                                  ;*	  supported. the returning value of the extended keystroke	*
  7602                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  7603                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  7604                                  ;*	  this creates a conflict when the user entered real		*
  7605                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  7606                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  7607                                  ;*	  in the following manner:					*
  7608                                  ;*									*
  7609                                  ;*	      ah = 16h							*
  7610                                  ;*	      int 16h							*
  7611                                  ;*	      if al == 0, then extended code (in ah)			*
  7612                                  ;*	      else if al == 0E0h, then					*
  7613                                  ;*	      if ah <> 0, then extended code (in ah)			*
  7614                                  ;*		else greek_alpha character.				*
  7615                                  ;*									*
  7616                                  ;*	also, for compatibility reason, if an extended code is		*
  7617                                  ;*	  detected, then we are going to change the value in al		*
  7618                                  ;*	  from 0E0h to 00h.						*
  7619                                  ;*									*
  7620                                  ;************************************************************************
  7621                                  
  7622                                  		; 19/10/2022
  7623                                  chrin:		
  7624 00000165 8A26[E504]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  7625 00000169 30C0                    		xor	al, al
  7626 0000016B 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  7627 0000016F 08C0                    		or	al, al
  7628 00000171 752A                    		jnz	short keyret
  7629 00000173 CD16                    		int	16h		; KEYBOARD -
  7630 00000175 09C0                    		or	ax, ax
  7631 00000177 74EC                    		jz	short chrin
  7632 00000179 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7633 0000017C 7504                    		jnz	short alt_ext_chk
  7634 0000017E B010                    		mov	al, 10h
  7635 00000180 EB1B                    		jmp	short keyret
  7636                                  ; ---------------------------------------------------------------------------
  7637                                  
  7638                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  7639                                  ;    if character read was 0E0h then
  7640                                  ;      if extended byte was zero (i.e. ah == 0) then
  7641                                  ;	 goto keyret
  7642                                  ;      else
  7643                                  ;	 set al to zero
  7644                                  ;	 goto alt_save
  7645                                  ;      endif
  7646                                  ;    endif
  7647                                  ;  endif
  7648                                  
  7649                                  alt_ext_chk:
  7650 00000182 803E[E504]00            		cmp	byte [keyrd_func], 0
  7651 00000187 740C                    		jz	short not_ext
  7652 00000189 3CE0                    		cmp	al, 0E0h
  7653 0000018B 7508                    		jnz	short not_ext
  7654 0000018D 08E4                    		or	ah, ah
  7655 0000018F 740C                    		jz	short keyret
  7656 00000191 30C0                    		xor	al, al
  7657 00000193 EB04                    		jmp	short alt_save
  7658                                  ; ---------------------------------------------------------------------------
  7659                                  
  7660                                  not_ext:				
  7661 00000195 08C0                    		or	al, al		; special case?
  7662 00000197 7504                    		jnz	short keyret
  7663                                  alt_save:				
  7664 00000199 8826[0C00]              		mov	[altah], ah	; store	special	key
  7665                                  keyret:					
  7666 0000019D C3                      		retn
  7667                                  
  7668                                  ; ---------------------------------------------------------------------------
  7669                                  
  7670                                  ;************************************************************************
  7671                                  ;*									*
  7672                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  7673                                  ;*									*
  7674                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  7675                                  ;*	in the status word of the request packet, and there is no	*
  7676                                  ;*	character in the input buffer, the driver issues a system	*
  7677                                  ;*	wait request to the rom. on return from the rom, it returns	*
  7678                                  ;*	a 'char-not-found' to the dos.					*
  7679                                  ;*									*
  7680                                  ;************************************************************************
  7681                                  
  7682                                  		; 19/10/2022
  7683                                  con_rdnd:				
  7684 0000019E A0[0C00]                		mov	al, [altah]
  7685 000001A1 08C0                    		or	al, al
  7686 000001A3 754C                    		jnz	short rdexit
  7687 000001A5 8A26[E604]              		mov	ah, [keysts_func]
  7688 000001A9 CD16                    		int	16h		; KEYBOARD -
  7689 000001AB 751D                    		jnz	short gotchr
  7690 000001AD 803E[7900]00            		cmp	byte [fhavek09], 0
  7691 000001B2 7412                    		jz	short z_bus_exit
  7692 000001B4 C41E[1200]              		les	bx, [ptrsav]
  7693                                  		; 12/12/2022
  7694 000001B8 26F6470404              		test	byte [es:bx+4], 04h
  7695                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  7696 000001BD 7407                    		jz	short z_bus_exit
  7697 000001BF B80041                  		mov	ax, 4100h
  7698 000001C2 30DB                    		xor	bl, bl
  7699 000001C4 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  7700                                  					; AL = condition type, BH = condition compare or mask value
  7701                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  7702                                  					; DX = I/O port	address	if AL bit 4 set
  7703                                  z_bus_exit:				
  7704 000001C6 F9                      		stc			; 2C7h:1C8h = 70h:2738h
  7705 000001C7 B403                    		mov	ah, 3		; indicate busy	status
  7706 000001C9 C3                      		retn
  7707                                  ; ---------------------------------------------------------------------------
  7708                                  
  7709                                  gotchr:					
  7710 000001CA 09C0                    		or	ax, ax
  7711 000001CC 7508                    		jnz	short notbrk	; check	for null after break
  7712 000001CE 8A26[E504]              		mov	ah, [keyrd_func] ; issue keyboard read function
  7713 000001D2 CD16                    		int	16h		; KEYBOARD -
  7714 000001D4 EBC8                    		jmp	short con_rdnd	; get a	real status
  7715                                  ; ---------------------------------------------------------------------------
  7716                                  
  7717                                  notbrk:					
  7718 000001D6 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7719 000001D9 7504                    		jnz	short rd_ext_chk
  7720 000001DB B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  7721 000001DD EB12                    		jmp	short rdexit
  7722                                  ; ---------------------------------------------------------------------------
  7723                                  
  7724                                  rd_ext_chk:				
  7725 000001DF 803E[E504]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  7726 000001E4 740B                    		jz	short rdexit
  7727 000001E6 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  7728 000001E8 7507                    		jnz	short rdexit
  7729 000001EA 80FC00                  		cmp	ah, 0		; scan code exist?
  7730 000001ED 7402                    		jz	short rdexit	; yes. greek alpha char.
  7731 000001EF B000                    		mov	al, 0		; no. extended key stroke.
  7732                                  					; change it for	compatibility
  7733                                  rdexit:					
  7734 000001F1 C41E[1200]              		les	bx, [ptrsav]
  7735 000001F5 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  7736                                  					; return keyboard character here
  7737                                  bc_exvec:				
  7738 000001F9 F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7739                                  					; indicate normal termination
  7740 000001FA C3                      		retn
  7741                                  ; ---------------------------------------------------------------------------
  7742                                  
  7743                                  ;************************************************************************
  7744                                  ;*									*
  7745                                  ;*	con_write - console write routine				*
  7746                                  ;*									*
  7747                                  ;*	entry:	es:di -> buffer						*
  7748                                  ;*		cx    =  count						*
  7749                                  ;*									*
  7750                                  ;************************************************************************
  7751                                  
  7752                                  con_writ:
  7753                                  		;jcxz	short bc_exvec
  7754 000001FB E3FC                    		jcxz	bc_exvec	; 19/10/2022
  7755                                  		; 12/12/2022
  7756                                  		;jcxz	cc_ret
  7757                                  con_lp:					
  7758 000001FD 268A05                  		mov	al, [es:di]
  7759 00000200 47                      		inc	di
  7760 00000201 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  7761                                  					; AL = character to display
  7762 00000203 E2F8                    		loop	con_lp
  7763                                  cc_ret:					
  7764 00000205 F8                      		clc
  7765 00000206 C3                      		retn
  7766                                  
  7767                                  ; =============== S U B	R O U T	I N E =======================================
  7768                                  
  7769                                  ;************************************************************************
  7770                                  ;*									*
  7771                                  ;*	con_flush - flush out keyboard queue				*
  7772                                  ;*									*
  7773                                  ;************************************************************************
  7774                                  
  7775                                  con_flush:
  7776 00000207 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  7777                                  flloop:					; while	(charavail()) charread();	
  7778 0000020C B401                    		mov	ah, 1
  7779 0000020E CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  7780                                  					; Return: ZF clear if character	in buffer
  7781                                  					; AH = scan code, AL = character
  7782                                  					; ZF set if no character in buffer
  7783 00000210 74F3                    		jz	short cc_ret
  7784 00000212 30E4                    		xor	ah, ah
  7785 00000214 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  7786                                  					; Return: AH = scan code, AL = character
  7787 00000216 EBF4                    		jmp	short flloop
  7788                                  
  7789                                  ; ---------------------------------------------------------------------------
  7790                                  
  7791                                  ; 15/10/2022
  7792                                  
  7793                                  ;************************************************************************
  7794                                  ;*									*
  7795                                  ;*	some equates for rom bios printer i/o				*
  7796                                  ;*									*
  7797                                  ;************************************************************************
  7798                                  
  7799                                  ; ibm rom status bits (i don't trust them, neither should you)
  7800                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  7801                                  ; whole slew of bits, only one of which is correct.
  7802                                  
  7803                                  ;notbusystatus	equ 10000000b		; not busy
  7804                                  ;nopaperstatus	equ 00100000b		; no more paper
  7805                                  ;prnselected	equ 00010000b		; printer selected
  7806                                  ;ioerrstatus	equ 00001000b		; some kinda error
  7807                                  ;timeoutstatus	equ 00000001b		; time out.
  7808                                  ;
  7809                                  ;noprinter	equ 00110000b		; no printer attached
  7810                                  
  7811                                  ; 18/03/2019 - Retro DOS v4.0
  7812                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  7813                                  
  7814                                  ; ---------------------------------------------------------------------------
  7815                                  
  7816                                  ;************************************************************************
  7817                                  ;*									*
  7818                                  ;*	prn_input - return with no error but zero chars read		*
  7819                                  ;*									*
  7820                                  ;*	enter with cx = number of characters requested			*
  7821                                  ;*									*
  7822                                  ;************************************************************************
  7823                                  
  7824                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  7825 00000218 E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  7826                                  					; (sub reqpkt.count,cx)
  7827                                  		; 12/12/2022
  7828                                  prn_done:
  7829 0000021B F8                      		clc			; but return with carry	reset for no error
  7830 0000021C C3                      		retn
  7831                                  ; ---------------------------------------------------------------------------
  7832                                  
  7833                                  ;************************************************************************
  7834                                  ;*									*
  7835                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  7836                                  ;*									*
  7837                                  ;*	auxnum has printer number					*
  7838                                  ;*									*
  7839                                  ;************************************************************************
  7840                                  
  7841                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  7842                                  		;jcxz	short prn_done	; no chars to output
  7843 0000021D E3FC                    		jcxz	prn_done	; 19/10/2022
  7844                                  prn_loop:				
  7845 0000021F BB0200                  		mov	bx, 2		; retry	count
  7846                                  prn_out:				
  7847 00000222 E83600                  		call	prnstat		; get status
  7848 00000225 751D                    		jnz	short TestPrnError
  7849 00000227 268A05                  		mov	al, [es:di]	; get character	to print
  7850 0000022A 30E4                    		xor	ah, ah
  7851 0000022C E82E00                  		call	prnop		; print	to printer
  7852 0000022F 7419                    		jz	short prn_con	; no error - continue
  7853 00000231 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  7854 00000234 7509                    		jnz	short _prnwf
  7855 00000236 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  7856 00000238 C606[0C00]00            		mov	byte [altah], 0
  7857 0000023D EB08                    		jmp	short pmessg
  7858                                  ; ---------------------------------------------------------------------------
  7859                                  
  7860                                  _prnwf:					
  7861 0000023F F6C401                  		test	ah, 1		; timeoutstatus
  7862 00000242 7406                    		jz	short prn_con
  7863                                  TestPrnError:				
  7864 00000244 4B                      		dec	bx		; retry	until count is exhausted.
  7865 00000245 75DB                    		jnz	short prn_out
  7866                                  pmessg:					
  7867 00000247 E98DFE                  		jmp	bc_err_cnt
  7868                                  ; ---------------------------------------------------------------------------
  7869                                  
  7870                                  prn_con:				
  7871 0000024A 47                      		inc	di		; point	to next	char and continue
  7872 0000024B E2D2                    		loop	prn_loop
  7873                                  ;prn_done:				
  7874                                  		; 12/12/2022
  7875                                  prn_done2:
  7876                                  		;clc
  7877                                  		; cf=0
  7878 0000024D C3                      		retn
  7879                                  ; ---------------------------------------------------------------------------
  7880                                  
  7881                                  ;************************************************************************
  7882                                  ;*									*
  7883                                  ;*	prn_stat - device driver entry to return printer status		*
  7884                                  ;*									*
  7885                                  ;************************************************************************
  7886                                  
  7887                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  7888 0000024E E80A00                  		call	prnstat		; device in dx
  7889 00000251 75F4                    		jnz	short pmessg
  7890 00000253 F6C480                  		test	ah, 80h		; notbusystatus
  7891                                  		;jnz	short prn_done
  7892                                  		; 12/12/2022
  7893 00000256 75F5                    		jnz	short prn_done2 ; cf=0
  7894 00000258 E96BFF                  		jmp	z_bus_exit
  7895                                  ; ---------------------------------------------------------------------------
  7896                                  
  7897                                  ;************************************************************************
  7898                                  ;*									*
  7899                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  7900                                  ;*		 printer status. Return meaningful error code		*
  7901                                  ;*									*
  7902                                  ;************************************************************************
  7903                                  
  7904                                  prnstat:				
  7905 0000025B B402                    		mov	ah, 2		; set command for get status
  7906                                  
  7907                                  ; =============== S U B	R O U T	I N E =======================================
  7908                                  
  7909                                  ;************************************************************************
  7910                                  ;*									*
  7911                                  ;*	prnop - call ROM BIOS printer function in ah			*
  7912                                  ;*		return zero true if no error				*
  7913                                  ;*		return zero false if error, al = error code		*
  7914                                  ;*									*
  7915                                  ;************************************************************************
  7916                                  
  7917                                  prnop:	
  7918 0000025D 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  7919 00000261 CD17                    		int	17h		; PRINTER - GET	STATUS
  7920                                  					; DX = printer port (0-3)
  7921                                  					; Return: AH = status
  7922                                  
  7923                                  	; This check was added to see if this is a case of no
  7924                                  	; printer being installed. This tests checks to be sure
  7925                                  	; the error is noprinter (30h)
  7926                                  
  7927 00000263 50                      		push	ax
  7928 00000264 80E430                  		and	ah, 30h
  7929 00000267 80FC30                  		cmp	ah, 30h		; noprinter
  7930 0000026A 58                      		pop	ax
  7931 0000026B 7506                    		jnz	short NextTest
  7932 0000026D 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  7933 00000270 80CC08                  		or	ah, 8		; ioerrstatus
  7934                                  
  7935                                  ; examine the status bits to see if an error occurred. unfortunately, several
  7936                                  ; of the bits are set so we have to pick and choose. we must be extremely
  7937                                  ; careful about breaking basic.
  7938                                  
  7939                                  NextTest:				
  7940 00000273 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  7941                                  					; i/o error?
  7942 00000276 740A                    		jz	short checknotready ; no, try not ready
  7943                                  
  7944                                  ; at this point, we know we have an error. the converse is not true
  7945                                  
  7946 00000278 B009                    		mov	al, 9		; error_I24_out_of_paper
  7947                                  					; first, assume	out of paper
  7948 0000027A F6C420                  		test	ah, 20h		; out of paper set?
  7949 0000027D 7502                    		jnz	short ret1	; yes, error is	set
  7950 0000027F FEC0                    		inc	al		; return al=10 (i/o error)
  7951                                  ret1:					
  7952 00000281 C3                      		retn
  7953                                  ; ---------------------------------------------------------------------------
  7954                                  
  7955                                  checknotready:				
  7956 00000282 B002                    		mov	al, 2		; assume not-ready
  7957 00000284 F6C401                  		test	ah, 1
  7958 00000287 C3                      		retn
  7959                                  
  7960                                  ; ---------------------------------------------------------------------------
  7961                                  
  7962                                  ;************************************************************************
  7963                                  ;*									*
  7964                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  7965                                  ;*		     this entry point should never block waiting for	*
  7966                                  ;*		     device to come ready.				*
  7967                                  ;*									*
  7968                                  ;*	inputs:	cx = count, es:di -> buffer				*
  7969                                  ;*	outputs: set the number of bytes transferred in the		*
  7970                                  ;*		 device driver request packet				*
  7971                                  ;*									*
  7972                                  ;************************************************************************
  7973                                  
  7974                                  		; 19/10/2022
  7975                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  7976 00000288 89FE                    		mov	si, di		; everything is	set for	lodsb
  7977                                  prn_tilbloop:				
  7978 0000028A 51                      		push	cx
  7979 0000028B 53                      		push	bx
  7980 0000028C 30FF                    		xor	bh, bh
  7981 0000028E 8A1E[E704]              		mov	bl, [printdev]
  7982 00000292 D1E3                    		shl	bx, 1
  7983                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  7984 00000294 8B8F[E804]              		mov	cx, [wait_count+bx]
  7985 00000298 5B                      		pop	bx
  7986                                  prn_getstat:				
  7987 00000299 E8BFFF                  		call	prnstat		; get status
  7988 0000029C 7514                    		jnz	short prn_bperr	; error
  7989 0000029E F6C480                  		test	ah, 80h		; ready	yet?
  7990 000002A1 E1F6                    		loope	prn_getstat	; no, go for more
  7991 000002A3 59                      		pop	cx		; get original count
  7992 000002A4 740D                    		jz	short prn_berr	; still	not ready => done
  7993 000002A6 26                      		es
  7994 000002A7 AC                      		lodsb
  7995                                  		;lods	byte ptr es:[si] ; es
  7996                                  					; lodsb
  7997 000002A8 30E4                    		xor	ah, ah
  7998 000002AA E8B0FF                  		call	prnop
  7999 000002AD 7504                    		jnz	short prn_berr	; error
  8000 000002AF E2D9                    		loop	prn_tilbloop
  8001                                  		; 12/12/2022
  8002                                  		; cf=0 (prnop)
  8003                                  		;clc			; normal no-error return
  8004 000002B1 C3                      		retn			;   from device driver
  8005                                  
  8006                                  ; ---------------------------------------------------------------------------
  8007                                  
  8008                                  prn_bperr:				
  8009 000002B2 59                      		pop	cx		; restore transfer count from stack
  8010                                  prn_berr:				
  8011 000002B3 E921FE                  		jmp	bc_err_cnt
  8012                                  ; ---------------------------------------------------------------------------
  8013                                  
  8014                                  ; 15/10/2022
  8015                                  
  8016                                  ;************************************************************************
  8017                                  ;*									*
  8018                                  ;*	prn_genioctl - get/set printer retry count			*
  8019                                  ;*									*
  8020                                  ;************************************************************************
  8021                                  
  8022                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8023                                  ; 11/01/2019
  8024                                  
  8025                                  ;********************************;*
  8026                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8027                                  ;********************************;*
  8028                                  
  8029                                  ;;RAWIO SUB-FUNCTIONS
  8030                                  ;;get_retry_count equ 65h
  8031                                  ;;set_retry_count equ 45h
  8032                                  
  8033                                  ;;struc A_RETRYCOUNT
  8034                                  ;;.rc_count: resw 1
  8035                                  ;;endstruc
  8036                                  
  8037                                  ;ioc_pc equ 5
  8038                                  
  8039                                  ; ---------------------------------------------------------------------------
  8040                                  
  8041                                  		; 19/10/2022
  8042                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8043 000002B6 C43E[1200]              		les	di, [ptrsav]
  8044 000002BA 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8045                                  					; ioc_pc
  8046 000002BF 7403                    		jz	short prnfunc_ok
  8047                                  
  8048                                  prnfuncerr:				
  8049 000002C1 E911FE                  		jmp	bc_cmderr
  8050                                  ; ---------------------------------------------------------------------------
  8051                                  
  8052                                  prnfunc_ok:				
  8053 000002C4 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8054 000002C8 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8055 000002CC 30FF                    		xor	bh, bh
  8056                                  		;mov	bl, ds:printdev	; get index into retry counts
  8057 000002CE 8A1E[E704]              		mov	bl, [printdev]
  8058 000002D2 D1E3                    		shl	bx, 1
  8059                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8060 000002D4 8B8F[E804]              		mov	cx, [wait_count+bx]
  8061 000002D8 3C65                    		cmp	al, 65h		; get_retry_count
  8062 000002DA 7407                    		jz	short prngetcount
  8063 000002DC 3C45                    		cmp	al, 45h		; set_retry_count
  8064 000002DE 75E1                    		jnz	short prnfuncerr
  8065 000002E0 268B0D                  		mov	cx, [es:di]
  8066                                  prngetcount:				
  8067                                  		;mov	ds:wait_count[bx], cx
  8068 000002E3 898F[E804]              		mov	[wait_count+bx], cx
  8069 000002E7 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8070                                  					; return current retry count
  8071                                  		; 12/12/2022
  8072                                  		; cf=0
  8073                                  		;clc
  8074 000002EA C3                      		retn
  8075                                  ; ---------------------------------------------------------------------------
  8076                                  
  8077                                  ;************************************************************************
  8078                                  ;*									*
  8079                                  ;*  prn_ioctl_query							*
  8080                                  ;*									*
  8081                                  ;*  Added for 5.00							*
  8082                                  ;************************************************************************
  8083                                  
  8084                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8085 000002EB C43E[1200]              		les	di, [ptrsav]
  8086 000002EF 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8087                                  					; ioc_pc
  8088 000002F4 750D                    		jnz	short prn_query_err
  8089 000002F6 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8090 000002FA 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8091 000002FC 7404                    		jz	short IOCtlSupported
  8092 000002FE 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8093 00000300 7501                    		jnz	short prn_query_err
  8094                                  IOCtlSupported:	
  8095                                  		; 12/12/2022
  8096                                  		; cf=0		
  8097                                  		;clc
  8098 00000302 C3                      		retn
  8099                                  ; ---------------------------------------------------------------------------
  8100                                  
  8101                                  prn_query_err:
  8102                                  		; 12/12/2022				
  8103                                  		;stc
  8104 00000303 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8105                                  ; ---------------------------------------------------------------------------
  8106                                  
  8107                                  ;************************************************************************
  8108                                  ;*									*
  8109                                  ;*	aux port driver code -- "aux" == "com1"				*
  8110                                  ;*									*
  8111                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8112                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8113                                  ;*									*
  8114                                  ;************************************************************************
  8115                                  
  8116                                  ;	values in ah, requesting function of int 14h in rom bios
  8117                                  
  8118                                  ;auxfunc_send	 equ	1	;transmit
  8119                                  ;auxfunc_receive equ	2	;read
  8120                                  ;auxfunc_status	 equ	3	;request status
  8121                                  
  8122                                  ;	error flags, reported by int 14h, reported in ah:
  8123                                  
  8124                                  ;flag_data_ready equ	01h	;data ready
  8125                                  ;flag_overrun	 equ	02h	;overrun error
  8126                                  ;flag_parity	 equ	04h	;parity error
  8127                                  ;flag_frame	 equ	08h	;framing error
  8128                                  ;flag_break	 equ	10h	;break detect
  8129                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8130                                  ;flag_timeout	 equ	80h	;timeout
  8131                                  
  8132                                  ;	these flags reported in al:
  8133                                  
  8134                                  ;flag_cts	 equ	10h	;clear to send
  8135                                  ;flag_dsr	 equ	20h	;data set ready
  8136                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8137                                  
  8138                                  ; ---------------------------------------------------------------------------
  8139                                  
  8140                                  ;************************************************************************
  8141                                  ;*									*
  8142                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8143                                  ;*		   at es:di						*
  8144                                  ;*									*
  8145                                  ;************************************************************************
  8146                                  
  8147                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8148                                  		;jcxz	short exvec2
  8149 00000306 E311                    		jcxz	exvec2		; 19/10/2022
  8150 00000308 E87700                  		call	getbx		; put address of auxbuf	in bx
  8151 0000030B 30C0                    		xor	al, al
  8152 0000030D 8607                    		xchg	al, [bx]
  8153 0000030F 08C0                    		or	al, al
  8154 00000311 7503                    		jnz	short aux2
  8155                                  aux1:					
  8156 00000313 E80500                  		call	auxin		; get character	from port
  8157                                  					; won't return if error
  8158                                  aux2:					
  8159 00000316 AA                      		stosb
  8160 00000317 E2FA                    		loop	aux1		; if more characters, go around	again
  8161                                  exvec2:					
  8162 00000319 F8                      		clc			; all done, successful exit
  8163                                  auxin_retn:	; 18/12/2022
  8164 0000031A C3                      		retn
  8165                                  ; ---------------------------------------------------------------------------
  8166                                  
  8167                                  ;************************************************************************
  8168                                  ;*									*
  8169                                  ;*	auxin - call rom bios to read character from aux port		*
  8170                                  ;*		if error occurs, map the error and return one		*
  8171                                  ;*		level up to device driver exit code, setting		*
  8172                                  ;*		the number of bytes transferred appropriately		*
  8173                                  ;*									*
  8174                                  ;************************************************************************
  8175                                  
  8176                                  auxin:					
  8177 0000031B B402                    		mov	ah, 2		; auxfunc_receive
  8178 0000031D E83C00                  		call	auxop
  8179 00000320 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8180                                  		;jnz	short arbad	; skip if any error bits set
  8181                                  		;retn
  8182                                  		; 18/12/2022
  8183 00000323 75F5                    		jnz	short auxin_retn
  8184                                  ; ---------------------------------------------------------------------------
  8185                                  
  8186                                  arbad:					
  8187 00000325 58                      		pop	ax		; remove return	address	(near call)
  8188 00000326 30C0                    		xor	al, al
  8189 00000328 0CB0                    		or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8190 0000032A E9AAFD                  		jmp	bc_err_cnt
  8191                                  
  8192                                  ; ---------------------------------------------------------------------------
  8193                                  
  8194                                  ;************************************************************************
  8195                                  ;*									*
  8196                                  ;*	aux_rdnd - non-destructive aux port read			*
  8197                                  ;*									*
  8198                                  ;************************************************************************
  8199                                  
  8200                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8201 0000032D E85200                  		call	getbx
  8202 00000330 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8203 00000332 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8204 00000334 7511                    		jnz	short auxdrx	; then return character
  8205 00000336 E82100                  		call	auxstat		; if not, get status of	aux device
  8206 00000339 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8207 0000033C 740C                    		jz	short auxbus	; then device is busy (not ready)
  8208 0000033E A820                    		test	al, 20h		; flag_dsr - test data set ready
  8209 00000340 7408                    		jz	short auxbus	; then device is busy (not ready)
  8210 00000342 E8D6FF                  		call	auxin		; else aux is ready, get character
  8211 00000345 8807                    		mov	[bx], al
  8212                                  auxdrx:					
  8213 00000347 E9A7FE                  		jmp	rdexit		; return busy status
  8214                                  ; ---------------------------------------------------------------------------
  8215                                  
  8216                                  auxbus:					
  8217 0000034A E979FE                  		jmp	z_bus_exit
  8218                                  ; ---------------------------------------------------------------------------
  8219                                  
  8220                                  ;************************************************************************
  8221                                  ;*									*
  8222                                  ;*	aux_wrst - return aux port write status				*
  8223                                  ;*									*
  8224                                  ;************************************************************************
  8225                                  
  8226                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8227 0000034D E80A00                  		call	auxstat		; get status of	aux in ax
  8228 00000350 A820                    		test	al, 20h		; test data set	ready
  8229 00000352 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8230 00000354 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8231 00000357 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8232                                  		; 12/12/2022
  8233                                  		; cf=0	; (test instruction resets cf)
  8234                                  		;clc
  8235 00000359 C3                      		retn
  8236                                  ; ---------------------------------------------------------------------------
  8237                                  
  8238                                  ;************************************************************************
  8239                                  ;*									*
  8240                                  ;*	auxstat - call rom bios to determine aux port status		*
  8241                                  ;*									*
  8242                                  ;*	exit:	ax = status						*
  8243                                  ;*		dx = [auxnum]						*
  8244                                  ;*									*
  8245                                  ;************************************************************************
  8246                                  
  8247                                  auxstat:				
  8248 0000035A B403                    		mov	ah, 3		; auxfunc_status
  8249                                  
  8250                                  		; fall into auxop
  8251                                  
  8252                                  ; =============== S U B	R O U T	I N E =======================================
  8253                                  
  8254                                  ;************************************************************************
  8255                                  ;*									*
  8256                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8257                                  ;*									*
  8258                                  ;*	entry:	ah = int 14h function number				*
  8259                                  ;*	exit:	ax = results						*
  8260                                  ;*		dx = [auxnum]						*
  8261                                  ;*									*
  8262                                  ;************************************************************************
  8263                                  
  8264                                  auxop:		; proc near		
  8265 0000035C 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8266                                  					; 0=init, 1=send, 2=receive, 3=status
  8267                                  					; get port number
  8268 00000360 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8269                                  					; DX = port number (0-3)
  8270                                  					; Return: AX = port status code
  8271 00000362 C3                      		retn
  8272                                  
  8273                                  ; ---------------------------------------------------------------------------
  8274                                  
  8275                                  ;************************************************************************
  8276                                  ;*									*
  8277                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8278                                  ;*		   auxbuf [auxnum] to zero				*
  8279                                  ;*									*
  8280                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8281                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8282                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8283                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8284                                  ;*									*
  8285                                  ;************************************************************************
  8286                                  
  8287                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8288 00000363 E81C00                  		call	getbx		; flush	aux input buffer
  8289 00000366 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8290                                  					; zero out buffer
  8291                                  		;clc			; all done, successful return
  8292                                  		; 12/12/2022
  8293                                  		; cf=0 ('add' instruction in 'getbx')
  8294 00000369 C3                      		retn
  8295                                  ; ---------------------------------------------------------------------------
  8296                                  
  8297                                  ;************************************************************************
  8298                                  ;*									*
  8299                                  ;*	aux_writ - write to aux device					*
  8300                                  ;*									*
  8301                                  ;************************************************************************
  8302                                  
  8303                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  8304                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  8305 0000036A E3AD                    		jcxz	exvec2		; 19/10/2022
  8306                                  aux_loop:				
  8307 0000036C 268A05                  		mov	al, [es:di]	; get character	to be written
  8308                                  					; move di pointer to next character
  8309 0000036F 47                      		inc	di
  8310 00000370 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  8311 00000372 E8E7FF                  		call	auxop		; send character over aux port
  8312 00000375 F6C480                  		test	ah, 80h		; check	for error
  8313 00000378 7405                    		jz	short awok	; then no error
  8314 0000037A B00A                    		mov	al, 10		; else indicate	write fault
  8315 0000037C E958FD                  		jmp	bc_err_cnt	; call error routines
  8316                                  ; ---------------------------------------------------------------------------
  8317                                  
  8318                                  awok:					
  8319 0000037F E2EB                    		loop	aux_loop	; if cx	is non-zero,
  8320                                  					; still	more character to print
  8321                                  		;clc			; all done, successful return
  8322                                  		; 12/12/2022
  8323                                  		; cf=0 (test instruction above)	
  8324 00000381 C3                      		retn
  8325                                  
  8326                                  ; =============== S U B	R O U T	I N E =======================================
  8327                                  
  8328                                  ;************************************************************************
  8329                                  ;*									*
  8330                                  ;*	getbx - return bx -> single byte input buffer for		*
  8331                                  ;*		selected aux port ([auxnum])				*
  8332                                  ;*									*
  8333                                  ;************************************************************************
  8334                                  
  8335                                  getbx:	
  8336 00000382 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  8337                                  					; for selected aux port	([auxnum])
  8338                                  		;add	bx, offset auxbuf
  8339 00000386 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  8340                                  		; 12/12/2022
  8341                                  		; cf=0 (if [uaxnum] is valid number) 
  8342 0000038A C3                      		retn
  8343                                  
  8344                                  ; ---------------------------------------------------------------------------
  8345                                  
  8346                                  ; 15/10/2022
  8347                                  
  8348                                  ;----------------------------------------------------------------
  8349                                  ;								:
  8350                                  ;		    clock device driver 			:
  8351                                  ;								:
  8352                                  ;								:
  8353                                  ;   this file contains the clock device driver. 		:
  8354                                  ;								:
  8355                                  ;   the routines in this files are:				:
  8356                                  ;								:
  8357                                  ;	routine 		function			:
  8358                                  ;	------- 		--------			:
  8359                                  ;	tim_writ		set the current time		:
  8360                                  ;	tim_read		read the current time		:
  8361                                  ;	time_to_ticks		convert time to corresponding	:
  8362                                  ;				  number of clock ticks 	:
  8363                                  ;								:
  8364                                  ; the clock ticks at the rate of:				:
  8365                                  ;								:
  8366                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  8367                                  ; see each routine for information on the use.			:
  8368                                  ;								:
  8369                                  ;----------------------------------------------------------------
  8370                                  
  8371                                  ; convert time to ticks
  8372                                  ; input : time in cx and dx
  8373                                  ; ticks returned in cx:dx
  8374                                  
  8375                                  ;19/07/2019
  8376                                  ;09/03/2019
  8377                                  
  8378                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  8379                                  
  8380                                  ; first convert from hour,min,sec,hund. to
  8381                                  ; total number of 100th of seconds
  8382                                  
  8383 0000038B B03C                    		mov	al, 60
  8384 0000038D F6E5                    		mul	ch		; hours	to minutes
  8385 0000038F B500                    		mov	ch, 0
  8386 00000391 01C8                    		add	ax, cx		; total	minutes
  8387 00000393 B97017                  		mov	cx, 6000	; 60*100
  8388 00000396 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  8389 00000398 F7E1                    		mul	cx		; convert to 1/100 sec
  8390 0000039A 89C1                    		mov	cx, ax
  8391 0000039C B064                    		mov	al, 100
  8392 0000039E F6E7                    		mul	bh		; convert seconds to 1/100 sec
  8393 000003A0 01C1                    		add	cx, ax		; combine seconds with hours and min
  8394 000003A2 83D200                  		adc	dx, 0		; ripple carry
  8395 000003A5 B700                    		mov	bh, 0
  8396 000003A7 01D9                    		add	cx, bx		; combine 1/100	sec
  8397 000003A9 83D200                  		adc	dx, 0
  8398                                  
  8399                                  	; dx:cx is time in 1/100 sec
  8400                                  
  8401 000003AC 92                      		xchg	ax, dx
  8402 000003AD 91                      		xchg	ax, cx		; now time is in cx:ax
  8403 000003AE BB0BE9                  		mov	bx, 59659
  8404 000003B1 F7E3                    		mul	bx		; multiply low half
  8405 000003B3 87D1                    		xchg	dx, cx
  8406 000003B5 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  8407 000003B6 F7E3                    		mul	bx		; multiply high	half
  8408 000003B8 01C8                    		add	ax, cx		; combine overlapping products
  8409 000003BA 83D200                  		adc	dx, 0
  8410 000003BD 92                      		xchg	ax, dx		; ax:dx=time*59659
  8411 000003BE BB0500                  		mov	bx, 5
  8412 000003C1 F6F3                    		div	bl		; divide high half by 5
  8413 000003C3 88C1                    		mov	cl, al
  8414 000003C5 B500                    		mov	ch, 0
  8415 000003C7 88E0                    		mov	al, ah		; remainder of divide-by-5
  8416 000003C9 98                      		cbw
  8417 000003CA 92                      		xchg	ax, dx		; use it to extend low half
  8418 000003CB F7F3                    		div	bx		; divide low half by 5
  8419 000003CD 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  8420 000003CF CB                      		retf			; far return
  8421                                  
  8422                                  ; ---------------------------------------------------------------------------
  8423                                  
  8424                                  ; 17/10/2022
  8425                                  ; 15/10/2022
  8426                                  
  8427                                  ;--------------------------------------------------------------------
  8428                                  ;
  8429                                  ; tim_writ sets the current time
  8430                                  ;
  8431                                  ; on entry es:[di] has the current time:
  8432                                  ;
  8433                                  ;	number of days since 1-1-80	(word)
  8434                                  ;	minutes (0-59)			(byte)
  8435                                  ;	hours (0-23)			(byte)
  8436                                  ;	hundredths of seconds (0-99)	(byte)
  8437                                  ;	seconds (0-59)			(byte)
  8438                                  ;
  8439                                  ; each number has been checked for the correct range.
  8440                                  ;
  8441                                  ;	NOTE: Any changes in this routine probably require corresponding
  8442                                  ;	changes in the version that is built with the power manager driver.
  8443                                  ;	See ptime.asm.
  8444                                  ;
  8445                                  ;--------------------------------------------------------------------
  8446                                  
  8447                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  8448 000003D0 268B05                  		mov	ax, [es:di]
  8449 000003D3 50                      		push	ax		; daycnt. we need to set this at the very
  8450                                  					; end to avoid tick windows.
  8451 000003D4 803E[F304]00            		cmp	byte [havecmosclock], 0
  8452                                  		;cmp	ds:havecmosclock, 0
  8453 000003D9 7426                    		jz	short no_cmos_1
  8454 000003DB 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  8455                                  					; get binary hours
  8456                                  					; convert to bcd
  8457 000003DF FF1E[0205]              		call	far [bintobcd]
  8458                                  		;call	ds:bintobcd	; call far [bintobcd]
  8459 000003E3 88C5                    		mov	ch, al		; ch = bcd hours
  8460 000003E5 268A4502                		mov	al, [es:di+2]	; get binary minutes
  8461 000003E9 FF1E[0205]              		call	far [bintobcd]
  8462                                  		;call	ds:bintobcd	; convert to bcd
  8463 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  8464 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  8465 000003F3 FF1E[0205]              		call	far [bintobcd]
  8466                                  		;call	ds:bintobcd
  8467 000003F7 88C6                    		mov	dh, al		; dh = bcd seconds
  8468 000003F9 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  8469 000003FB FA                      		cli
  8470 000003FC B403                    		mov	ah, 3
  8471 000003FE CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8472                                  					; CH = hours in	BCD, CL	= minutes in BCD
  8473                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  8474                                  					; Return: CMOS clock set
  8475 00000400 FB                      		sti
  8476                                  no_cmos_1:				
  8477 00000401 268B4D02                		mov	cx, [es:di+2]
  8478 00000405 268B5504                		mov	dx, [es:di+4]
  8479                                  		; 17/10/2022
  8480 00000409 FF1E[E206]              		call	far [ttticks]
  8481                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  8482                                  					; convert time to ticks
  8483                                  					; cx:dx	now has	time in	ticks
  8484 0000040D FA                      		cli			; turn off timer
  8485 0000040E B401                    		mov	ah, 1
  8486 00000410 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  8487                                  					; CX:DX	= clock	count
  8488                                  					; Return: time of day set
  8489                                  		;pop	ds:daycnt
  8490 00000412 8F06[F004]              		pop	word [daycnt]
  8491 00000416 FB                      		sti
  8492                                  		;cmp	ds:havecmosclock, 0
  8493 00000417 803E[F304]00            		cmp	byte [havecmosclock], 0
  8494 0000041C 740A                    		jz	short no_cmos_2
  8495 0000041E FF1E[0605]              		call	far [daycnttoday]
  8496                                  		;call	ds:daycnttoday	; call far [daycnttoday]
  8497                                  					; convert to bcd format
  8498 00000422 FA                      		cli
  8499 00000423 B405                    		mov	ah, 5
  8500 00000425 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8501                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  8502                                  					; CH = century (19h or 20h)
  8503                                  					; Return: CMOS clock set
  8504 00000427 FB                      		sti
  8505                                  no_cmos_2:
  8506                                  		; 12/12/2022
  8507                                  		; cf=0				
  8508                                  		;clc
  8509 00000428 C3                      		retn
  8510                                  
  8511                                  ; ---------------------------------------------------------------------------
  8512                                  
  8513                                  ; 15/10/2022
  8514                                  
  8515                                  ;----------------------------------------------------------------------------
  8516                                  ; gettime reads date and time
  8517                                  ; and returns the following information:
  8518                                  ;
  8519                                  ;	es:[di]  =count of days since 1-1-80
  8520                                  ;	es:[di+2]=hours
  8521                                  ;	es:[di+3]=minutes
  8522                                  ;	es:[di+4]=seconds
  8523                                  ;	es:[di+5]=hundredths of seconds
  8524                                  ;
  8525                                  ;	NOTE:  Any changes in this routine probably require corresponding
  8526                                  ;	changes in the version that is built with the power manager driver.
  8527                                  ;	See ptime.asm.
  8528                                  ;----------------------------------------------------------------------------
  8529                                  
  8530                                  tim_read:				; 2C7h:435h = 70h:29A5h
  8531 00000429 E84E00                  		call	GetTickCnt
  8532 0000042C 8B36[F004]              		mov	si, [daycnt]
  8533                                  
  8534                                  ; we now need to convert the time in tick to the time in 100th of
  8535                                  ; seconds. the relation between tick and seconds is:
  8536                                  ;
  8537                                  ;		 65,536 seconds
  8538                                  ;	       ----------------
  8539                                  ;		1,193,180 tick
  8540                                  ;
  8541                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  8542                                  ;
  8543                                  ;	ticks from clock  * 65,536 * 100
  8544                                  ;      --------------------------------- = time in 100th of seconds
  8545                                  ;		1,193,180
  8546                                  ;
  8547                                  ; fortunately this formula simplifies to:
  8548                                  ;
  8549                                  ;	ticks from clock * 5 * 65,536
  8550                                  ;      --------------------------------- = time in 100th of seconds
  8551                                  ;		59,659
  8552                                  ;
  8553                                  ; the calculation is done by first multipling tick by 5. next we divide by
  8554                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  8555                                  ; my 16 bits to the left.
  8556                                  ;
  8557                                  ; start with ticks in cx:dx
  8558                                  ; multiply by 5
  8559                                  
  8560 00000430 89C8                    		mov	ax, cx
  8561 00000432 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  8562                                  					; multiply by 5
  8563 00000434 D1E2                    		shl	dx, 1
  8564 00000436 D1D1                    		rcl	cx, 1		; times	2
  8565 00000438 D1E2                    		shl	dx, 1
  8566 0000043A D1D1                    		rcl	cx, 1		; times	4
  8567 0000043C 01DA                    		add	dx, bx
  8568 0000043E 11C8                    		adc	ax, cx		; times	5
  8569 00000440 92                      		xchg	ax, dx
  8570                                  
  8571                                  ; now have ticks * 5 in	dx:ax
  8572                                  ; we now need to multiply by 65536 and divide by 59659 d.
  8573                                  
  8574 00000441 B90BE9                  		mov	cx, 59659	; get divisor
  8575 00000444 F7F1                    		div	cx		; dx now has remainder
  8576                                  					; ax has high word of final quotient
  8577 00000446 89C3                    		mov	bx, ax		; put high word	in safe	place
  8578 00000448 31C0                    		xor	ax, ax		; this is the multiply by 65536
  8579 0000044A F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  8580                                  
  8581                                  ; rounding based on the	remainder may be added here
  8582                                  ; the result in	bx:ax is time in 1/100 second.
  8583                                  
  8584 0000044C 89DA                    		mov	dx, bx		
  8585 0000044E B9C800                  		mov	cx, 200		;extract 1/100's
  8586                                  
  8587                                  ; division by 200 is necessary to ensure no overflow--max result
  8588                                  ; is number of seconds in a day/2 = 43200.
  8589                                  
  8590 00000451 F7F1                    		div	cx
  8591 00000453 80FA64                  		cmp	dl, 100		; remainder over 100?
  8592 00000456 7203                    		jb	short noadj
  8593 00000458 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  8594                                  noadj:					
  8595 0000045B F5                      		cmc			; if we	subtracted 100,	carry is now set
  8596 0000045C 88D3                    		mov	bl, dl		; save 1/100's
  8597                                  
  8598                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  8599                                  ; by two, shifting a one in if the remainder had exceeded 100.
  8600                                  
  8601 0000045E D1D0                    		rcl	ax, 1		
  8602 00000460 B200                    		mov	dl, 0
  8603 00000462 D1D2                    		rcl	dx, 1
  8604 00000464 B93C00                  		mov	cx, 60		; divide out seconds
  8605 00000467 F7F1                    		div	cx
  8606 00000469 88D7                    		mov	bh, dl		; save the seconds
  8607 0000046B F6F1                    		div	cl		; break	into hours and minutes
  8608 0000046D 86C4                    		xchg	al, ah
  8609                                  
  8610                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  8611                                  
  8612 0000046F 50                      		push	ax
  8613 00000470 89F0                    		mov	ax, si		; daycnt
  8614 00000472 AB                      		stosw
  8615 00000473 58                      		pop	ax
  8616 00000474 AB                      		stosw
  8617 00000475 89D8                    		mov	ax, bx
  8618 00000477 AB                      		stosw
  8619 00000478 F8                      		clc
  8620 00000479 C3                      		retn
  8621                                  
  8622                                  ; =============== S U B	R O U T	I N E =======================================
  8623                                  
  8624                                  ; 15/10/2022
  8625                                  
  8626                                  ;----------------------------------------------------------------------------
  8627                                  ;
  8628                                  ; procedure : GetTickCnt
  8629                                  ;
  8630                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  8631                                  ;		of rollover [except when power management driver is in use]. 
  8632                                  ;		Uses the following logic for updating Daycnt
  8633                                  ;
  8634                                  ;		if ( rollover ) {
  8635                                  ;			if ( t_switch )
  8636                                  ;				daycnt++ ;
  8637                                  ;			else
  8638                                  ;				daycnt += rollover ;
  8639                                  ;		}
  8640                                  ;
  8641                                  ; USES : AX
  8642                                  ;
  8643                                  ; RETURNS : CX:DX - tick count
  8644                                  ; MODIFIES : daycnt
  8645                                  ;
  8646                                  ;----------------------------------------------------------------------------
  8647                                  
  8648                                  		; 17/10/2022
  8649                                  GetTickCnt:	
  8650 0000047A 30E4                    		xor	ah, ah
  8651 0000047C CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  8652                                  					; Return: CX:DX	= clock	count
  8653                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  8654                                  					; midnight
  8655                                  					; Otherwise, AL	> 0
  8656 0000047E 803E[F204]00            		cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  8657 00000483 7507                    		jnz	short inc_case	; old method assumes  that Int 1Ah returns rollover flag
  8658 00000485 30E4                    		xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  8659                                  					; and not flag
  8660 00000487 0106[F004]              		add	[daycnt], ax
  8661 0000048B C3                      		retn
  8662                                  ; ---------------------------------------------------------------------------
  8663                                  
  8664                                  inc_case:				
  8665 0000048C 08C0                    		or	al, al
  8666 0000048E 7404                    		jz	short no_rollover
  8667 00000490 FF06[F004]              		inc	word [daycnt]
  8668                                  no_rollover:				
  8669 00000494 C3                      		retn
  8670                                  
  8671                                  ;----------------------------------------------------------------------------
  8672                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  8673                                  ;----------------------------------------------------------------------------
  8674                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  8675                                  ; 09/03/2019 - Retro DOS v4.0
  8676                                  
  8677                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  8678                                  ; 26/05/2018 - Retro DOS v3.0
  8679                                  ; 23/03/2018 - Retro DOS v2.0
  8680                                  
  8681                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  8682                                  
  8683                                  ;struc BPB_TYPE
  8684                                  ;.SECSIZE:	resw 1
  8685                                  ;.SECALL:	resb 1
  8686                                  ;.RESNUM:	resw 1
  8687                                  ;.FATNUM:	resb 1
  8688                                  ;.DIRNUM:	resw 1
  8689                                  ;.SECNUM:	resw 1
  8690                                  ;.FATID:	resb 1
  8691                                  ;.FATSIZE:	resw 1
  8692                                  ;.SLIM:		resw 1
  8693                                  ;.HLIM:		resw 1
  8694                                  ;.HIDDEN:	resw 1
  8695                                  ;.size:
  8696                                  ;endstruc
  8697                                  
  8698                                  ;-----------------------------------------------------------------
  8699                                  ;	disk interface routines
  8700                                  ;-----------------------------------------------------------------
  8701                                  
  8702                                  ; device attribute bits:
  8703                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  8704                                  
  8705                                  ;MAXERR		equ	5
  8706                                  ;MAX_HD_FMT_ERR	equ	2
  8707                                  
  8708                                  ;LSTDRV	equ 504h
  8709                                  
  8710                                  ; some floppies do not have changeline. as a result, media-check would
  8711                                  ; normally return i-don't-know, the dos would continually reread the fat and
  8712                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  8713                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  8714                                  ; the time of the last successful disk operation and compare it with the current
  8715                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  8716                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  8717                                  ; since we cannot trust the timer to be always available, we record the number 
  8718                                  ; of media checks that have occurred when no apparent time has elapsed. while
  8719                                  ; this number is < a given threshold, we say no change. when it exceeds that
  8720                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  8721                                  ; the time of last successful access, if we see that time has passed too,
  8722                                  ; we reset the counter.
  8723                                  
  8724                                  accessmax	equ	5
  8725                                  
  8726                                  ; due to various bogosities, we need to continually adjust what the head
  8727                                  ; settle time is.  the following algorithm is used:
  8728                                  ;
  8729                                  ;   get the current head settle value.
  8730                                  ;   if it is 0, then
  8731                                  ;	set slow = 15
  8732                                  ;   else
  8733                                  ;	set slow = value
  8734                                  ;   ...
  8735                                  ;*********************************************
  8736                                  ;************ old algorithm ******************
  8737                                  ;*   if we are seeking and writing then
  8738                                  ;*	 use slow
  8739                                  ;*   else
  8740                                  ;*	 use fast
  8741                                  ;*********************************************
  8742                                  ;*********** ibm's requested logic ***********
  8743                                  ;   if we are seeking and writing and not on an at then
  8744                                  ;	use slow
  8745                                  ;   else
  8746                                  ;	use fast
  8747                                  ;   ...
  8748                                  ;   restore current head settle value
  8749                                  ;
  8750                                  ;
  8751                                  ;---------------------------------------
  8752                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  8753                                  					; it on after handling config.sys file as a
  8754                                  					; default value, if multrk_flag = multrk_off1.
  8755                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  8756                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  8757                                  
  8758                                  ; close data segment, open Bios_Code segment
  8759                                  
  8760                                  ; 15/10/2022
  8761                                  
  8762                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  8763                                  
  8764                                  ;-----------------------------------------------------------------
  8765                                  ;	command jump table
  8766                                  ;-----------------------------------------------------------------
  8767                                  
  8768 00000495 00                      		db 0
  8769                                  
  8770                                  ; 11/12/2022
  8771                                  %if 0
  8772                                  
  8773                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  8774                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  8775                                  		dw 1742h		; dsk_init
  8776                                  		dw 4EBh			; media_chk
  8777                                  		dw 592h			; get_bpb
  8778                                  		dw 0D5h			; bc_cmderr
  8779                                  		dw 857h			; dsk_read
  8780                                  		dw 83Dh			; x_bus_exit
  8781                                  		dw 558h			; ret_carry_clear
  8782                                  		dw 558h			; ret_carry_clear
  8783                                  		dw 849h			; dsk_writ
  8784                                  		dw 841h			; dsk_writv
  8785                                  		dw 558h			; ret_carry_clear
  8786                                  		dw 558h			; ret_carry_clear
  8787                                  		dw 0D5h			; bc_cmderr
  8788                                  		dw 80Ah			; dsk_open
  8789                                  		dw 81Ah			; dsk_close
  8790                                  		dw 831h			; dsk_rem
  8791                                  		dw 558h			; ret_carry_clear
  8792                                  		dw 558h			; ret_carry_clear
  8793                                  		dw 558h			; ret_carry_clear
  8794                                  		dw 0C6Bh		; do_generic_ioctl
  8795                                  		dw 558h			; ret_carry_clear
  8796                                  		dw 558h			; ret_carry_clear
  8797                                  		dw 558h			; ret_carry_clear
  8798                                  		dw 1124h		; ioctl_getown
  8799                                  		dw 1142h		; ioctl_setown
  8800                                  		dw 129Ah		; ioctl_support_query
  8801                                  
  8802                                  ;dtbl_siz equ $-dsktbl
  8803                                  
  8804                                  %endif
  8805                                  		; 11/12/2022
  8806 00000496 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  8807 00000497 [E816]                  		dw dsk_init
  8808 00000499 [DF04]                  		dw media_chk
  8809 0000049B [8505]                  		dw get_bpb
  8810 0000049D [D500]                  		dw bc_cmderr
  8811 0000049F [3608]                  		dw dsk_read
  8812 000004A1 [1C08]                  		dw x_bus_exit
  8813 000004A3 [4B05]                  		dw ret_carry_clear
  8814 000004A5 [4B05]                  		dw ret_carry_clear
  8815 000004A7 [2808]                  		dw dsk_writ
  8816 000004A9 [2008]                  		dw dsk_writv
  8817 000004AB [4B05]                  		dw ret_carry_clear
  8818 000004AD [4B05]                  		dw ret_carry_clear
  8819 000004AF [D500]                  		dw bc_cmderr
  8820 000004B1 [EC07]                  		dw dsk_open
  8821 000004B3 [FB07]                  		dw dsk_close
  8822 000004B5 [1108]                  		dw dsk_rem
  8823 000004B7 [4B05]                  		dw ret_carry_clear
  8824 000004B9 [4B05]                  		dw ret_carry_clear
  8825 000004BB [4B05]                  		dw ret_carry_clear
  8826 000004BD [450C]                  		dw do_generic_ioctl
  8827 000004BF [4B05]                  		dw ret_carry_clear
  8828 000004C1 [4B05]                  		dw ret_carry_clear
  8829 000004C3 [4B05]                  		dw ret_carry_clear
  8830 000004C5 [EB10]                  		dw ioctl_getown
  8831 000004C7 [0811]                  		dw ioctl_setown
  8832 000004C9 [5712]                  		dw ioctl_support_query
  8833                                  
  8834                                  dtbl_siz equ $-dsktbl
  8835                                  
  8836                                  ; =============== S U B	R O U T	I N E =======================================
  8837                                  
  8838                                  ; ---------------------------------------------------------------------------
  8839                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  8840                                  ; the one that belongs to the drive specified. carry is set if none exists
  8841                                  ; for the drive. Pointer is returned in es:[di]
  8842                                  ;
  8843                                  ;  AL contains the logical drive number.
  8844                                  ; ---------------------------------------------------------------------------
  8845                                  
  8846                                  SetDrive:	
  8847                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  8848 000004CB C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  8849                                  X_Scan_Loop:				
  8850 000004CF 26384505                		cmp	[es:di+5], al	
  8851 000004D3 7409                    		jz	short X_SetDrv
  8852 000004D5 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  8853 000004D8 83FFFF                  		cmp	di, 0FFFFh
  8854 000004DB 75F2                    		jnz	short X_Scan_Loop
  8855 000004DD F9                      		stc
  8856                                  X_SetDrv:				
  8857 000004DE C3                      		retn
  8858                                  
  8859                                  ; ---------------------------------------------------------------------------
  8860                                  
  8861                                  ; 15/10/2022
  8862                                  
  8863                                  ; ---------------------------------------------------------------------
  8864                                  ; if id is f9, have a 96tpi disk else
  8865                                  ; if bit 2 is 0 then media is not removable and could not have changed
  8866                                  ;  otherwise if within 2 secs of last disk operation media could not
  8867                                  ;    have changed, otherwise dont know if media has changed
  8868                                  ; ---------------------------------------------------------------------
  8869                                  
  8870                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  8871 000004DF E8E9FF                  		call	SetDrive
  8872 000004E2 BE0100                  		mov	si, 1
  8873 000004E5 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  8874                                  					; fchanged_by_format
  8875 000004EA 7416                    		jz	short WeAreNotFakingIt
  8876                                  		; 12/12/2022
  8877 000004EC 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  8878                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  8879                                  					; ~fchanged_by_format ;	reset flag
  8880 000004F1 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  8881                                  					; Ensure that we ask the rom if media has changed
  8882 000004F6 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  8883                                  					; fnon_removable
  8884 000004FB 740C                    		jz	short wehaveafloppy
  8885 000004FD BEFFFF                  		mov	si, 0FFFFh	; Indicate media changed
  8886 00000500 EB2C                    		jmp	short Media_Done ; Media_Done
  8887                                  ; ---------------------------------------------------------------------------
  8888                                  
  8889                                  WeAreNotFakingIt:
  8890                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  8891 00000502 26F6452301              		test	byte [es:di+23h], 1
  8892 00000507 7525                    		jnz	short Media_Done
  8893                                  wehaveafloppy:				
  8894 00000509 31F6                    		xor	si, si		; Presume "I don't know"
  8895                                  
  8896                                  		; If we have a floppy with changeline support, we ask the ROM
  8897                                  		; to determine if media has changed. We do not perform the
  8898                                  		; 2 second check for these drives.
  8899                                  
  8900 0000050B 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  8901 00000510 740A                    		jz	short mChk_NoChangeLine	; Brif not
  8902 00000512 E89E12                  		call	mediacheck	;  Call	into removable routine
  8903 00000515 7236                    		jb	short err_exitj
  8904 00000517 E8F613                  		call	haschange
  8905 0000051A 7512                    		jnz	short Media_Done
  8906                                  mChk_NoChangeLine:
  8907                                  		; If we come here, we have a floppy with no changeline support
  8908                                  			
  8909 0000051C BE0100                  		mov	si, 1		; Presume no change
  8910 0000051F A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  8911 00000522 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  8912                                  					; Is drive of last access the same?
  8913 00000526 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  8914 00000528 E82800                  		call	Check_Time_Of_Access
  8915 0000052B EB01                    		jmp	short Media_Done
  8916                                  ; ---------------------------------------------------------------------------
  8917                                  
  8918                                  Media_Unk:				
  8919 0000052D 4E                      		dec	si		; ; Return "I don't know"
  8920                                  
  8921                                  		; SI now contains the correct value for media change.
  8922                                  		; Clean up the left overs
  8923                                  Media_Done:	
  8924                                  		; 19/10/2022			
  8925 0000052E 06                      		push	es
  8926 0000052F C41E[1200]              		les	bx, [ptrsav]
  8927 00000533 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  8928 00000537 07                      		pop	es
  8929 00000538 09F6                    		or	si, si
  8930 0000053A 790F                    		jns	short ret_carry_clear ;	volidok
  8931 0000053C 803E[7700]00            		cmp	byte [fhave96], 0
  8932 00000541 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  8933 00000543 E85613                  		call	media_set_vid
  8934                                  mChk1_NoChangeLine:			
  8935 00000546 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  8936                                  					; Make sure we ask rom for media check
  8937                                  ret_carry_clear:			
  8938 0000054B F8                      		clc			; volidok
  8939 0000054C C3                      		retn
  8940                                  ; ---------------------------------------------------------------------------
  8941                                  
  8942                                  err_exitj:				
  8943 0000054D E88006                  		call	maperror	; guaranteed to	set carry
  8944                                  ret81:					
  8945 00000550 B481                    		mov	ah, 81h		; return error status
  8946 00000552 C3                      		retn			; return with carry set
  8947                                  
  8948                                  ; =============== S U B	R O U T	I N E =======================================
  8949                                  
  8950                                  ; ---------------------------------------------------------------------------
  8951                                  ; perform a check on the time passed since the last access for this physical
  8952                                  ; drive.
  8953                                  ; we are accessing the same drive. if the time of last successful access was
  8954                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  8955                                  ; returns in si:
  8956                                  ;	0 - if time of last access was >= 2 seconds
  8957                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  8958                                  ; registers affected ax,cx,dx, flags.
  8959                                  ;
  8960                                  ;	assume es:di -> bds, ds->Bios_Data
  8961                                  ; ---------------------------------------------------------------------------
  8962                                  
  8963                                  		; 19/10/2022
  8964                                  Check_Time_Of_Access:
  8965 00000553 BE0100                  		mov	si, 1		; presume no change.
  8966 00000556 E821FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  8967 00000559 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  8968                                  					; get stored time
  8969 0000055D 29C2                    		sub	dx, ax
  8970 0000055F 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  8971 00000563 19C1                    		sbb	cx, ax
  8972 00000565 751A                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  8973 00000567 09D2                    		or	dx, dx		; time must pass
  8974 00000569 7511                    		jnz	short timepassed ; yes, examine max value
  8975 0000056B FE06[1D01]              		inc	byte [accesscount]
  8976 0000056F 803E[1D01]05            		cmp	byte [accesscount], 5 
  8977                                  					; if count is less than threshold, ok
  8978 00000574 720C                    		jb	short timecheck_ret
  8979 00000576 FE0E[1D01]              		dec	byte [accesscount] ; don't let the count wrap
  8980 0000057A EB05                    		jmp	short timecheck_unk ; "i don't know" if media changed
  8981                                  ; ---------------------------------------------------------------------------
  8982                                  
  8983                                  timepassed:				
  8984 0000057C 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  8985                                  					; min elapsed time? (2 seconds)
  8986 0000057F 7601                    		jbe	short timecheck_ret ; yes, presume no change
  8987                                  
  8988                                  		; everything indicates that we do not know what has happened.
  8989                                  timecheck_unk:				
  8990 00000581 4E                      		dec	si		; presume i don't know
  8991                                  timecheck_ret:				
  8992 00000582 C3                      		retn
  8993                                  
  8994                                  ; ---------------------------------------------------------------------------
  8995                                  ; 15/10/2022
  8996                                  Err_Exitj2:
  8997 00000583 EBC8                    		jmp	short err_exitj
  8998                                  
  8999                                  ; ---------------------------------------------------------------------------
  9000                                  
  9001                                  ; 15/10/2022
  9002                                  
  9003                                  ; ==========================================================================
  9004                                  ; Build a valid bpb for the disk in the drive.
  9005                                  ; ==========================================================================
  9006                                  
  9007                                  		; 19/10/2022
  9008                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9009 00000585 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9010 00000588 E840FF                  		call	SetDrive	; get the correct bds for the drive
  9011 0000058B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9012                                  					; fnon_removable
  9013 00000590 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9014                                  
  9015                                  		; let's set the default value for volid,vol_serial,
  9016                                  		; filesys_id in bds table
  9017                                  
  9018 00000592 E83700                  		call	clear_ids
  9019                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9020 00000595 C606[0A05]01            		mov	byte [set_id_flag], 1
  9021 0000059A E85A00                  		call	GetBp		; build	a bpb if necessary
  9022 0000059D 72B1                    		jb	short ret81
  9023                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9024 0000059F 803E[0A05]02            		cmp	byte [set_id_flag], 2
  9025                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9026 000005A4 C606[0A05]00            		mov	byte [set_id_flag], 0
  9027 000005A9 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9028                                  					; otherwise, conventional boot record
  9029                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9030 000005AB 803E[7700]00            		cmp	byte [fhave96], 0
  9031 000005B0 7403                    		jz	short already_gotbpb ; brif not
  9032 000005B2 E86113                  		call	set_volume_id
  9033                                  already_gotbpb:				
  9034 000005B5 83C706                  		add	di, 6		; BDS.BPB
  9035                                  					; return the bpb from the current bds
  9036                                  
  9037                                  ;		 fall into setptrsav, es:di -> result
  9038                                  
  9039                                  ; ---------------------------------------------------------------------------
  9040                                  
  9041                                  ; 15/10/2022
  9042                                  
  9043                                  ; ==========================================================================
  9044                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9045                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9046                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9047                                  ;It fails, for instance, when we install an external drive using driver.sys
  9048                                  ;because then the BDS segment is no longer Bios_Data. 
  9049                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9050                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9051                                  ;restored before returning to the caller.
  9052                                  ; ==========================================================================
  9053                                  
  9054                                  		; 19/10/2022
  9055                                  SetPtrSav:	; return point for dsk_init				
  9056 000005B8 8CC1                    		mov	cx, es		; save es
  9057                                  		;les	bx, ds:ptrsav
  9058 000005BA C41E[1200]              		les	bx, [ptrsav]
  9059 000005BE 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9060 000005C2 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9061 000005C6 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9062 000005CA F8                      		clc
  9063 000005CB C3                      		retn
  9064                                  
  9065                                  ; =============== S U B	R O U T	I N E =======================================
  9066                                  
  9067                                  ; 15/10/2022
  9068                                  
  9069                                  ; -----------------------------------------------------
  9070                                  ; clear ids in bds table. only applied for floppies.
  9071                                  ;input:  es:di -> bds table
  9072                                  ;	assumes ds: -> Bios_Data
  9073                                  ;output: volid set to "NO NAME    "
  9074                                  ;	 vol_serial set to 0.
  9075                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9076                                  ;	   depending on the flag fatsize in bds.
  9077                                  ;
  9078                                  ;	trashes si, cx
  9079                                  ; -----------------------------------------------------
  9080                                  
  9081                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9082                                  ;size_of_EXT_SYSTEM_ID equ 8
  9083                                  
  9084                                  clear_ids:		
  9085 000005CC 57                      		push	di
  9086 000005CD 31C9                    		xor	cx, cx		; no serial number
  9087 000005CF 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9088 000005D3 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9089                                  
  9090                                  		; BUGBUG - there's a lot in common here and with
  9091                                  		; mov_media_ids.. see if we can save some space by
  9092                                  		; merging them... jgl
  9093                                  
  9094                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9095                                  		; 10/12/2022
  9096 000005D7 B10B                    		mov	cl, 11 ; cx = 11		
  9097                                  
  9098                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9099 000005D9 BE[1D05]                		mov	si, vol_no_name	; 19/10/2022
  9100 000005DC 83C74B                  		add	di, 75		; BDS.volid
  9101 000005DF F3A4                    		rep movsb
  9102                                  		;test	byte [es:di+BDS.fatsiz], fbig
  9103 000005E1 26F6451F40              		test	byte [es:di+1Fh], 40h
  9104                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9105 000005E6 BE[1405]                		mov	si, fat_16_id	; 19/10/2022
  9106 000005E9 7503                    		jnz	short ci_bigfat
  9107                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9108 000005EB BE[0B05]                		mov	si, fat_12_id	 ; 19/10/2022
  9109                                  ci_bigfat:				
  9110                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9111                                  		; 10/12/2022
  9112 000005EE B108                    		mov	cl, 8 ; cx = 8 
  9113 000005F0 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9114                                  					; filesys_id field
  9115 000005F3 F3A4                    		rep movsb
  9116 000005F5 5F                      		pop	di		; restore bds pointer
  9117 000005F6 C3                      		retn
  9118                                  
  9119                                  ; =============== S U B	R O U T	I N E =======================================
  9120                                  
  9121                                  ; 15/10/2022
  9122                                  
  9123                                  ; ---------------------------------------------------------------------------
  9124                                  ;	getbp - return bpb from the drive specified by the bds.
  9125                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9126                                  ;	    note that we never come here for fixed disks.
  9127                                  ;	    for all other cases,
  9128                                  ;	      - it reads boot sector to pull out the bpb
  9129                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9130                                  ;		to get the fat id byte to build the bpb from there.
  9131                                  ;
  9132                                  ;   inputs:	es:di point to correct bds.
  9133                                  ;
  9134                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9135                                  ;		carry set, and al=7 if invalid disk.
  9136                                  ;		carry set and error code in al if other error.
  9137                                  ;		if failed to recognize the boot record, then will set the
  9138                                  ;		set_id_flag to 0.
  9139                                  ;		this routine will only work for a floppy diskette.
  9140                                  ;		     for a fixed disk, it will just return.
  9141                                  ;
  9142                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9143                                  ;	  segment definitions. It should be migrated towards.
  9144                                  ;	   now es:di has the bds, ds: has Bios_Data
  9145                                  ; ---------------------------------------------------------------------------
  9146                                  
  9147                                  GetBp:		; if returning fake bpb then return bpb as is.
  9148                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
  9149 000005F7 26F6452305              		test	byte [es:di+23h], 5
  9150 000005FC 7403                    		jz	short getbp1	; getbp1
  9151 000005FE E99500                  		jmp	getret_exit
  9152                                  ; ---------------------------------------------------------------------------
  9153                                  
  9154                                  getbp1:					
  9155 00000601 51                      		push	cx
  9156 00000602 52                      		push	dx
  9157 00000603 53                      		push	bx
  9158                                  
  9159                                  		; attempt to read in boot sector and determine bpb.
  9160                                  		; we assume that the 2.x and greater dos disks all
  9161                                  		; have a valid boot sector.
  9162                                  
  9163 00000604 E8A400                  		call	readbootsec
  9164 00000607 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9165 00000609 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9166 0000060B 7508                    		jnz	short dofatbpb
  9167 0000060D E8F000                  		call	movbpb		; move bpb into	registers
  9168 00000610 EB57                    		jmp	short Has1
  9169                                  ; ---------------------------------------------------------------------------
  9170                                  
  9171                                  getbp_err_ret_brdg:			
  9172 00000612 E98200                  		jmp	getbp_err_ret
  9173                                  ; ---------------------------------------------------------------------------
  9174                                  
  9175                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9176                                  		; and fill in bpb from there.
  9177                                  dofatbpb:				
  9178 00000615 E85401                  		call	readfat		; puts media descriptor	byte in	ah
  9179 00000618 72F8                    		jb	short getbp_err_ret_brdg
  9180                                  		;cmp	ds:fhave96, 0	;  changeline support available?
  9181 0000061A 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9182 0000061F 7403                    		jz	short bpb_nochangeline ; brif not
  9183 00000621 E88D12                  		call	hidensity	; may not return! May add sp, 2	and
  9184                                  					; jump to has1!!!!!! or	has720K
  9185                                  bpb_nochangeline:		; test for a valid 3.5" medium			
  9186 00000624 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9187                                  					; ffSmall
  9188 00000629 7515                    		jnz	short is_floppy
  9189 0000062B 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9190 0000062E 7571                    		jnz	short got_unknown_medium
  9191                                  Has720K:				
  9192                                  		;mov	bx, offset sm92 ; pointer to correct bpb
  9193 00000630 BB[DE04]                		mov	bx, sm92	; 19/10/2022
  9194                                  
  9195                                  		; es points to segment of bds. the following should be modified
  9196                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9197                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9198                                  
  9199                                  		; 10/12/2022
  9200                                  		;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9201                                  		; 21/12/2022
  9202 00000633 8A07                    		mov	al, [bx]
  9203 00000635 8B4F03                  		mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9204 00000638 8B5705                  		mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9205 0000063B 8B5F01                  		mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9206                                  		; 19/10/2022 - Temporary !
  9207                                  		;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9208                                  		;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9209                                  		;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9210                                  		;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]	
  9211                                  
  9212 0000063E EB29                    		jmp	short Has1
  9213                                  ; ---------------------------------------------------------------------------
  9214                                  
  9215                                  is_floppy:			; must be a 5.25" floppy if we come here
  9216 00000640 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9217 00000643 725C                    		jb	short got_unknown_medium
  9218 00000645 B001                    		mov	al, 1		; set number of	fat sectors
  9219 00000647 BB0840                  		mov	bx, 16392	; 64*256+8
  9220                                  					; set dir entries and sector max
  9221 0000064A B94001                  		mov	cx, 320		; 40*8
  9222                                  					; set size of drive
  9223 0000064D BA0101                  		mov	dx, 257		; 01*256+1
  9224                                  					; set head limit and sec/all unit
  9225 00000650 F6C402                  		test	ah, 2		; test for 8 or	9 sector
  9226 00000653 7507                    		jnz	short has8	; nz = has 8 sectors
  9227 00000655 FEC0                    		inc	al		; inc number of	fat sectors
  9228 00000657 FEC3                    		inc	bl		; inc sector max
  9229                                  		;add	cx, 40		; increase size	(to 360)
  9230                                  		; 18/12/2022
  9231 00000659 80C128                  		add	cl, 40
  9232                                  has8:					
  9233 0000065C F6C401                  		test	ah, 1		; test for 1 or	2 heads
  9234 0000065F 7408                    		jz	short Has1	; jz = 1 head
  9235 00000661 01C9                    		add	cx, cx		; double size of disk
  9236 00000663 B770                    		mov	bh, 112		; increase number of directory entries
  9237 00000665 FEC6                    		inc	dh		; inc sec/all unit
  9238 00000667 FEC2                    		inc	dl		; inc head limit
  9239                                  Has1:					
  9240 00000669 26887508                		mov	[es:di+8], dh	; [es:di+BDS.secperclus]
  9241 0000066D 26887D0C                		mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
  9242 00000671 26894D0E                		mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
  9243 00000675 26886510                		mov	[es:di+10h], ah	; [es:di+BDS.media]
  9244 00000679 26884511                		mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
  9245 0000067D 26885D13                		mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
  9246 00000681 26885515                		mov	[es:di+15h], dl	; [es:di+BDS.heads]
  9247                                  
  9248                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
  9249                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
  9250                                  		; to 0 since this code is for floppies
  9251                                  
  9252                                  		; 18/12/2022
  9253                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
  9254                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
  9255                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
  9256                                  		; 18/12/2022
  9257 00000685 29C9                    		sub	cx, cx
  9258 00000687 26894D19                		mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
  9259 0000068B 26894D17                		mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
  9260 0000068F 26894D1D                		mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
  9261                                  getret:					
  9262 00000693 5B                      		pop	bx
  9263 00000694 5A                      		pop	dx
  9264 00000695 59                      		pop	cx
  9265                                  getret_exit:				
  9266 00000696 C3                      		retn
  9267                                  ; ---------------------------------------------------------------------------
  9268                                  
  9269                                  getbp_err_ret:	; before doing anything else, set set_id_flag	to 0.			
  9270                                  		;mov	ds:set_id_flag,	0
  9271                                  		; 19/10/2022
  9272 00000697 C606[0A05]00            		mov	byte [set_id_flag], 0
  9273 0000069C E83105                  		call	maperror
  9274 0000069F EBF2                    		jmp	short getret
  9275                                  ; ---------------------------------------------------------------------------
  9276                                  
  9277                                  		; we have a 3.5" diskette for	which we cannot	build a	bpb.
  9278                                  		; we do	not assume any type of bpb for this medium.
  9279                                  
  9280                                  got_unknown_medium:			
  9281                                  		;mov	ds:set_id_flag,	0 
  9282 000006A1 C606[0A05]00            		mov	byte [set_id_flag], 0
  9283 000006A6 B007                    		mov	al, 7
  9284 000006A8 F9                      		stc
  9285 000006A9 EBE8                    		jmp	short getret
  9286                                  
  9287                                  ; =============== S U B	R O U T	I N E =======================================
  9288                                  
  9289                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
  9290                                  
  9291                                  ; ----------------------------------------------------------------
  9292                                  ; read in the boot sector. set carry if error in reading sector.
  9293                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
  9294                                  ;
  9295                                  ;	assumes es:di -> bds, ds-> Bios_Data
  9296                                  ; ----------------------------------------------------------------
  9297                                  
  9298                                  ; 10/03/2019 - Retro DOS v4.0
  9299                                  
  9300                                  readbootsec:	
  9301 000006AB B600                    		mov	dh, 0		; head 0
  9302 000006AD B90100                  		mov	cx, 1		; cylinder 0, sector 1
  9303 000006B0 E8C600                  		call	read_sector
  9304 000006B3 724A                    		jb	short err_ret
  9305 000006B5 31DB                    		xor	bx, bx		; assume valid boot sector
  9306                                  
  9307                                  		; put a sanity check for the boot sector in here to detect
  9308                                  		; boot sectors that do not have valid bpbs. we examine the
  9309                                  		; first two bytes - they must contain a long jump (69h) or a
  9310                                  		; short jump (EBh) followed by a nop (90h), or a short jump
  9311                                  		; (E9h). if this test is passed, we further check by examining
  9312                                  		; the signature at the end of the boot sector for the word
  9313                                  		; AA55h. if the signature is not present, we examine the media
  9314                                  		; descriptor byte to see if it is valid. for dos 3.3, this
  9315                                  		; logic is modified a little bit. we are not going to check
  9316                                  		; signature. instead we are going to sanity check the media
  9317                                  		; byte in bpb regardless of the validity of signature. this is
  9318                                  		; to save the already developed commercial products that have
  9319                                  		; good jump instruction and signature but with the false bpb
  9320                                  		; informations
  9321                                  
  9322                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
  9323                                  
  9324                                  		; 19/10/2022
  9325 000006B7 803E[4E01]69            		cmp	byte [disksector], 69h ; is it a direct jump?
  9326 000006BC 7415                    		jz	short check_bpb_mediabyte ; don't need to find a nop
  9327 000006BE 803E[4E01]E9            		cmp	byte [disksector], 0E9h ; dos 2.0 jump?
  9328 000006C3 740E                    		jz	short check_bpb_mediabyte ; no need for	nop
  9329 000006C5 803E[4E01]EB            		cmp	byte [disksector], 0EBh ; how about a short jump?
  9330 000006CA 7531                    		jnz	short invalidbootsec
  9331 000006CC 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
  9332 000006D1 752A                    		jnz	short invalidbootsec
  9333                                  
  9334                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9335                                  ;
  9336                                  ;; 10/03/2019
  9337                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
  9338                                  ;;
  9339                                  ;; Don't have to perform the following signature check since
  9340                                  ;; we need to check the media byte even with the good signatured diskette.
  9341                                  ;;
  9342                                  ;;check_signature:
  9343                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
  9344                                  ;;							 ; disk or 1.x media.
  9345                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
  9346                                  ;;					       ; may need some special handling
  9347                                  
  9348                                  ; check for non-ibm disks which do not have the signature AA55h at the
  9349                                  ; end of the boot sector, but still have a valid boot sector. this is done
  9350                                  ; by examining the media descriptor in the boot sector.
  9351                                  
  9352                                  		; 19/10/2022
  9353                                  check_bpb_mediabyte:			
  9354 000006D3 A0[6301]                		mov	al, [disksector+15h]
  9355                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9356 000006D6 24F0                    		and	al, 0F0h
  9357 000006D8 3CF0                    		cmp	al, 0F0h	; allow	for strange media
  9358 000006DA 7521                    		jnz	short invalidbootsec
  9359                                  
  9360                                  ; there were some (apparently a lot of them) diskettes that had been formatted
  9361                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
  9362                                  ; sectors. these are specifically diskettes that were formatted in drives
  9363                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
  9364                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
  9365                                  ; in dos. in order to support them, we have to introduce a "hack" that will
  9366                                  ; help our build bpb routine to recognise these specific cases, and to
  9367                                  ; set up out copy of the bpb accordingly.
  9368                                  ; we do this by checking to see if the boot sector is off a diskette that
  9369                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
  9370                                  ; sec/clus field to 1. if not, we carry on as normal.
  9371                                  
  9372                                  checksinglesided:
  9373 000006DC A0[6301]                		mov	al, [disksector+15h]
  9374 000006DF 3CF0                    		cmp	al, 0F0h
  9375 000006E1 741B                    		jz	short gooddsk
  9376 000006E3 A801                    		test	al, 1
  9377 000006E5 7517                    		jnz	short gooddsk
  9378 000006E7 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
  9379 000006ED 7507                    		jnz	short mustbeearlier
  9380 000006EF 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
  9381 000006F4 7308                    		jnb	short gooddsk
  9382                                  
  9383                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
  9384                                  
  9385                                  mustbeearlier:				
  9386 000006F6 C606[5B01]01            		mov	byte [disksector+0Dh], 1
  9387                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9388 000006FB EB01                    		jmp	short gooddsk
  9389                                  ; ---------------------------------------------------------------------------
  9390                                  
  9391                                  invalidbootsec:				
  9392 000006FD 43                      		inc	bx		; indicate that boot sector invalid
  9393                                  		; 10/12/2022
  9394                                  movbpb_ret:
  9395                                  gooddsk:				
  9396 000006FE F8                      		clc
  9397                                  err_ret:
  9398 000006FF C3                      		retn
  9399                                  ; ---------------------------------------------------------------------------
  9400                                  
  9401                                  		; 10/12/2022
  9402                                  ;err_ret:				
  9403                                  		;retn
  9404                                  
  9405                                  ; =============== S U B	R O U T	I N E =======================================
  9406                                  
  9407                                  ; 15/10/2022
  9408                                  ; ---------------------------------------------------------------------------
  9409                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
  9410                                  ; getbp routine at has1
  9411                                  ;
  9412                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
  9413                                  ; serial number, volume label, file system id in bds according to
  9414                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
  9415                                  ; to signal that volume label is set already from the extended boot record
  9416                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
  9417                                  ; the volume label in the root directory.)
  9418                                  ; ---------------------------------------------------------------------------
  9419                                  
  9420                                  ; 10/03/2019 - Retro DOS v4.0
  9421                                  
  9422                                  		; 19/10/2022
  9423                                  movbpb:	
  9424 00000700 8A36[5B01]              		mov	dh, [disksector+0Dh]
  9425                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9426                                  					; sectors per unit
  9427 00000704 8A3E[5F01]              		mov	bh, [disksector+11h]
  9428                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
  9429                                  					; number of directory entries
  9430 00000708 8B0E[6101]              		mov	cx, [disksector+13h]
  9431                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
  9432                                  					; size of drive
  9433 0000070C 8A26[6301]              		mov	ah, [disksector+15h]
  9434                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9435                                  					; media	descriptor
  9436 00000710 A0[6401]                		mov	al, [disksector+16h];
  9437                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
  9438                                  					; number of fat	sectors
  9439 00000713 8A1E[6601]              		mov	bl, [disksector+18h]
  9440                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
  9441                                  					; sectors per track
  9442 00000717 8A16[6801]              		mov	dl, [disksector+1Ah]
  9443                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
  9444                                  					; number of heads
  9445 0000071B 803E[0A05]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
  9446 00000720 75DC                    		jnz	short movbpb_ret
  9447 00000722 E81200                  		call	mov_media_ids
  9448 00000725 7205                    		jb	short movbpb_conv ; conventional boot record?
  9449 00000727 C606[0A05]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
  9450                                  movbpb_conv:				
  9451 0000072C 803E[7700]01            		cmp	byte [fhave96], 1
  9452 00000731 75CB                    		jnz	short movbpb_ret
  9453 00000733 E8D411                  		call	resetchanged	; reset	flags in bds to	not fchanged.
  9454                                  		; 10/12/2022
  9455                                  		; cf = 0
  9456                                  ;movbpb_ret:				
  9457                                  		;clc
  9458 00000736 C3                      		retn
  9459                                  
  9460                                  ; =============== S U B	R O U T	I N E =======================================
  9461                                  
  9462                                  ;copy the boot_serial number, volume id, and filesystem id from the
  9463                                  ;***extended boot record*** in ds:disksector to the bds table pointed
  9464                                  ;by es:di.
  9465                                  
  9466                                  ;in.) es:di -> bds
  9467                                  ;     ds:disksector = valid extended boot record.
  9468                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
  9469                                  ;      the boot record information.
  9470                                  ;     carry flag set if not an extended bpb.
  9471                                  ;     all registers saved except the flag.
  9472                                  
  9473                                  		; 19/10/2022
  9474                                  mov_media_ids:		
  9475 00000737 803E[7401]29            		cmp	byte [disksector+26h], 29h
  9476                                  					; [disksector+EXT_BOOT.SIG],
  9477                                  					; EXT_BOOT_SIGNATURE
  9478 0000073C 752C                    		jnz	short mmi_not_ext
  9479 0000073E 51                      		push	cx
  9480 0000073F 8B0E[7501]              		mov	cx, [disksector+27h]
  9481                                  					; [disksector+EXT_BOOT.SERIAL]
  9482 00000743 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9483 00000747 8B0E[7701]              		mov	cx, [disksector+29h]
  9484                                  					; [disksector+EXT_BOOT.SERIAL+2]
  9485 0000074B 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9486 0000074F 57                      		push	di
  9487 00000750 56                      		push	si
  9488 00000751 B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9489 00000754 BE[7901]                		mov	si, disksector+2Bh
  9490                                  		;mov	si, (offset disksector+2Bh) ;
  9491                                  					; disksector+EXT_BOOT.VOL_LABEL
  9492 00000757 83C74B                  		add	di, 75		; BDS.volid
  9493 0000075A F3A4                    		rep movsb
  9494                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9495                                  		; 10/12/2022
  9496 0000075C B108                    		mov	cl, 8 ; cx = 8
  9497 0000075E BE[8401]                		mov	si, disksector+36h
  9498                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
  9499 00000761 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9500 00000764 F3A4                    		rep movsb
  9501 00000766 5E                      		pop	si
  9502 00000767 5F                      		pop	di
  9503 00000768 59                      		pop	cx
  9504                                  		; 10/12/2022
  9505                                  		; cf = 0
  9506                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
  9507                                  				; (20/09/2022)
  9508 00000769 C3                      		retn
  9509                                  ; ---------------------------------------------------------------------------
  9510                                  
  9511                                  mmi_not_ext:				
  9512 0000076A F9                      		stc
  9513 0000076B C3                      		retn
  9514                                  
  9515                                  ; =============== S U B	R O U T	I N E =======================================
  9516                                  
  9517                                  ; 15/10/2022
  9518                                  ; --------------------------------------------------------------
  9519                                  ; read in the fat sector and get the media byte from it.
  9520                                  ; input : es:di -> bds
  9521                                  ; output:
  9522                                  ;	  carry set if an error occurs, ax contains error code.
  9523                                  ;	  otherwise, ah contains media byte on exit
  9524                                  ; --------------------------------------------------------------
  9525                                  
  9526                                  readfat:	
  9527                                  		;mov	dh, 0
  9528                                  		; 10/12/2022
  9529 0000076C 30F6                    		xor	dh, dh
  9530 0000076E B90200                  		mov	cx, 2		; head 0
  9531                                  					; cylinder 0, sector 2
  9532 00000771 E80500                  		call	read_sector
  9533 00000774 7202                    		jb	short bad_fat_ret
  9534 00000776 8A27                    		mov	ah, [bx]	; media	byte
  9535                                  bad_fat_ret:				
  9536 00000778 C3                      		retn
  9537                                  
  9538                                  ; =============== S U B	R O U T	I N E =======================================
  9539                                  
  9540                                  ; 15/10/2022
  9541                                  
  9542                                  ; ---------------------------------------------------------------------------
  9543                                  ; read a single sector into the temp buffer.
  9544                                  ; perform three retries in case of error.
  9545                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
  9546                                  ;		cx has sector and cylinder
  9547                                  ;		dh has head
  9548                                  ;		es:di has bds
  9549                                  ;		ds has Bios_Data
  9550                                  ;
  9551                                  ;   outputs:	carry clear
  9552                                  ;		    Bios_Data:bx point to sector
  9553                                  ;		       (note: some callers assume location of buffer)
  9554                                  ;
  9555                                  ;		carry set
  9556                                  ;		    ax has rom error code
  9557                                  ;
  9558                                  ; register bp is preserved.
  9559                                  ; ---------------------------------------------------------------------------
  9560                                  
  9561                                  ; 10/03/2019 - Retro DOS v4.0
  9562                                  
  9563                                  		; 19/10/2022
  9564                                  read_sector:	
  9565 00000779 55                      		push	bp
  9566 0000077A BD0300                  		mov	bp, 3		; make 3 attempts
  9567 0000077D 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
  9568 00000781 BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
  9569                                  rd_ret:					
  9570 00000784 06                      		push	es
  9571 00000785 1E                      		push	ds
  9572 00000786 07                      		pop	es
  9573 00000787 B80102                  		mov	ax, 201h
  9574 0000078A CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9575                                  					; AL = number of sectors to read, CH = track, CL = sector
  9576                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9577                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9578 0000078C 07                      		pop	es
  9579 0000078D 734A                    		jnb	short okret2
  9580                                  rd_rty:					
  9581 0000078F E87604                  		call	again		; reset	disk, decrement	bp, preserve ax
  9582 00000792 7442                    		jz	short err_rd_ret
  9583 00000794 26F6452301              		test	byte [es:di+23h], 1
  9584                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
  9585                                  					; fnon_removable
  9586 00000799 75E9                    		jnz	short rd_ret
  9587 0000079B 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9588 000007A0 7510                    		jnz	short rd_skip1_dpt
  9589 000007A2 50                      		push	ax
  9590 000007A3 1E                      		push	ds		; for retry, set the head settle time to 0Fh
  9591 000007A4 C536[2D01]              		lds	si, [dpt]
  9592                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9593                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
  9594                                  		;			; NORMSETTLE
  9595                                  		; 12/12/2022
  9596 000007A8 B00F                    		mov	al, 15
  9597 000007AA 864409                  		xchg	al, [si+9]
  9598                                  		; 
  9599 000007AD 1F                      		pop	ds
  9600 000007AE A2[2A01]                		mov	[save_head_sttl], al
  9601 000007B1 58                      		pop	ax
  9602                                  rd_skip1_dpt:				
  9603 000007B2 06                      		push	es
  9604 000007B3 1E                      		push	ds
  9605 000007B4 07                      		pop	es
  9606 000007B5 B80102                  		mov	ax, 201h
  9607 000007B8 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9608                                  					; AL = number of sectors to read, CH = track, CL = sector
  9609                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9610                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9611 000007BA 07                      		pop	es
  9612 000007BB 9C                      		pushf
  9613 000007BC 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9614 000007C1 750E                    		jnz	short rd_skip2_dpt
  9615 000007C3 50                      		push	ax
  9616 000007C4 A0[2A01]                		mov	al, [save_head_sttl]
  9617 000007C7 1E                      		push	ds
  9618 000007C8 C536[2D01]              		lds	si, [dpt]
  9619 000007CC 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9620 000007CF 1F                      		pop	ds
  9621 000007D0 58                      		pop	ax
  9622                                  rd_skip2_dpt:				
  9623 000007D1 9D                      		popf
  9624 000007D2 7305                    		jnb	short okret2
  9625 000007D4 EBB9                    		jmp	short rd_rty
  9626                                  ; ---------------------------------------------------------------------------
  9627                                  
  9628                                  err_rd_ret:				
  9629 000007D6 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
  9630                                  					; return error
  9631 000007D8 F9                      		stc
  9632                                  
  9633                                  ; update information pertaining to last drive accessed, time of access, last
  9634                                  ; track accessed in that drive.
  9635                                  
  9636                                  okret2:					
  9637 000007D9 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
  9638 000007DD 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
  9639 000007E1 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
  9640                                  					; save last track accessed on this drive
  9641                                  					; preserve flags in case error occurred
  9642 000007E5 9C                      		pushf
  9643 000007E6 E8FF03                  		call	set_tim
  9644 000007E9 9D                      		popf			; restore flags
  9645 000007EA 5D                      		pop	bp
  9646 000007EB C3                      		retn
  9647                                  
  9648                                  ;----------------------------------------------------------------------------
  9649                                  ;	disk open/close routines
  9650                                  ;----------------------------------------------------------------------------
  9651                                  
  9652                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
  9653 000007EC 803E[7700]00            		cmp	byte [fhave96], 0
  9654 000007F1 7407                    		jz	short dsk_open_exit ; done if no changeline support
  9655 000007F3 E8D5FC                  		call	SetDrive	; get bds for drive
  9656 000007F6 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
  9657                                  dsk_open_exit:	
  9658                                  		; 10/12/2022
  9659                                  		; cf = 0			
  9660                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9661                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9662 000007FA C3                      		retn
  9663                                  ; ---------------------------------------------------------------------------
  9664                                  
  9665                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
  9666 000007FB 803E[7700]00            		cmp	byte [fhave96], 0
  9667 00000800 740E                    		jz	short exitjx	; done if no changeline	support
  9668 00000802 E8C6FC                  		call	SetDrive	; get bds for drive
  9669 00000805 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
  9670 0000080A 7404                    		jz	short exitjx	; watch	out for	wrap
  9671 0000080C 26FF4D20                		dec	word [es:di+20h]
  9672                                  exitjx:					
  9673                                  		; 10/12/2022
  9674                                  		; cf = 0
  9675                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9676                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9677 00000810 C3                      		retn
  9678                                  
  9679                                  ;----------------------------------------------------------------------------
  9680                                  ;		disk removable routine
  9681                                  ;----------------------------------------------------------------------------
  9682                                  
  9683                                  		; al is	unit #
  9684                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
  9685 00000811 E8B7FC                  		call	SetDrive	; get bds for this drive
  9686                                  		;test	byte [es:di+BDS.flags], fnon_removable
  9687 00000814 26F6452301              		test	byte [es:di+23h], 1
  9688                                  		;jnz	short x_bus_exit ; non_rem
  9689 00000819 7501                    		jnz	short non_rem	; 15/10/2022
  9690                                  		; 10/12/2022
  9691                                  		; cf = 0
  9692                                  		;clc			; CF is already ZERO here
  9693                                  					; 15/10/2022
  9694 0000081B C3                      		retn
  9695                                  ; ---------------------------------------------------------------------------
  9696                                  
  9697                                  non_rem:
  9698                                  x_bus_exit:				
  9699 0000081C B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
  9700                                  					; return busy status
  9701 0000081E F9                      		stc
  9702                                  dsk_ret:				
  9703 0000081F C3                      		retn
  9704                                  
  9705                                  ;----------------------------------------------------------------------------
  9706                                  ;		disk i/o routines
  9707                                  ;----------------------------------------------------------------------------
  9708                                  
  9709                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
  9710                                  		;mov	word [wrtverify], 103h
  9711                                  		; 19/10/2022
  9712 00000820 C706[2001]0301          		mov	word [rflag], 103h
  9713                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
  9714 00000826 EB06                    		jmp	short dsk_cl
  9715                                  ; ---------------------------------------------------------------------------
  9716                                  
  9717                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
  9718                                  		;mov	word [wrtverify], 3
  9719                                  		; 19/10/2022
  9720 00000828 C706[2001]0300          		mov	word [rflag], 3
  9721                                  		;mov	word ptr ds:rflag, 3 ; romwrite
  9722                                  
  9723                                  dsk_cl:					
  9724 0000082E E89800                  		call	diskio		; romwrite
  9725                                  ; ---------------------------------------------------------------------------
  9726                                  
  9727                                  dsk_io:					
  9728 00000831 73EC                    		jnb	short dsk_ret
  9729 00000833 E9A1F8                  		jmp	bc_err_cnt
  9730                                  ; ---------------------------------------------------------------------------
  9731                                  
  9732                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
  9733 00000836 E88B00                  		call	diskrd
  9734 00000839 EBF6                    		jmp	short dsk_io
  9735                                  
  9736                                  ; =============== S U B	R O U T	I N E =======================================
  9737                                  
  9738                                  ; 15/10/2022
  9739                                  ; 10/03/2019 - Retro DOS v4.0
  9740                                  
  9741                                  ;-----------------------------------------------------------
  9742                                  ; miscellaneous odd jump routines. 
  9743                                  ; moved out of mainline for speed.
  9744                                  
  9745                                  ; if we have a system where we have virtual drives, we need 
  9746                                  ; to prompt the user to place the correct disk in the drive.
  9747                                  ;
  9748                                  ;	assume es:di -> bds, ds:->Bios_Data
  9749                                  ;-----------------------------------------------------------
  9750                                  
  9751                                  		; 19/10/2022
  9752                                  checksingle:		
  9753 0000083B 50                      		push	ax
  9754 0000083C 53                      		push	bx
  9755 0000083D 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
  9756                                  
  9757                                  ; if hard drive, cannot change disk.
  9758                                  ; if current owner of physical drive, no need to change diskette.
  9759                                  
  9760 00000841 F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
  9761 00000844 7573                    		jnz	short singleret
  9762 00000846 F6C310                  		test	bl, 10h		; fi_am_mult
  9763                                  					; is there a drive sharing this	physical drive?
  9764 00000849 746E                    		jz	short singleret
  9765                                  
  9766                                  
  9767                                  ; look for the previous owner of this physical drive
  9768                                  ; and reset its ownership flag.
  9769                                  
  9770 0000084B 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
  9771                                  					; get physical drive number
  9772 0000084F 06                      		push	es		; preserve pointer to current bds
  9773 00000850 57                      		push	di
  9774 00000851 C43E[1901]              		les	di, [start_bds] ; get first bds
  9775                                  scan_list:				
  9776 00000855 26384504                		cmp	[es:di+4], al
  9777 00000859 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
  9778 0000085B B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
  9779 0000085D 26845D23                		test	[es:di+23h], bl
  9780 00000861 744B                    		jz	short scan_skip	; he doesn't own it either. continue
  9781 00000863 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
  9782 00000867 5F                      		pop	di		; restore pointer to current bds
  9783 00000868 07                      		pop	es
  9784 00000869 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
  9785                                  
  9786                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
  9787                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
  9788                                  ; in this case.
  9789 0000086D 803E[7A00]01            		cmp	byte [fsetowner], 1
  9790 00000872 7517                    		jnz	short not_fsetowner
  9791                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
  9792 00000874 26807D0400              		cmp	byte [es:di+4], 0
  9793 00000879 753E                    		jnz	short singleret
  9794 0000087B 268A4505                		mov	al, [es:di+5]
  9795                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
  9796                                  					; get the DOS drive letter
  9797 0000087F 06                      		push	es
  9798 00000880 8E06[1A00]              		mov	es, [zeroseg]
  9799 00000884 26A20405                		mov	[es:LSTDRV], al
  9800                                  		;mov	es:504h, al	; [es:LSTDRV]
  9801                                  					; set up sdsb
  9802 00000888 07                      		pop	es		; restore bds pointer
  9803 00000889 EB2E                    		jmp	short singleret
  9804                                  ; ---------------------------------------------------------------------------
  9805                                  
  9806                                  ; to support "backward" compatibility with ibm's "single drive status byte"
  9807                                  ; we now check to see if we are in a single drive system and the application
  9808                                  ; has "cleverly" diddled the sdsb
  9809                                  
  9810                                  not_fsetowner:				
  9811 0000088B 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
  9812 00000890 7517                    		jnz	short ignore_sdsb
  9813 00000892 50                      		push	ax
  9814 00000893 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
  9815 00000897 88C4                    		mov	ah, al
  9816 00000899 06                      		push	es
  9817 0000089A 8E06[1A00]              		mov	es, [zeroseg]
  9818 0000089E 2686060405              		xchg	al, [es:LSTDRV]
  9819                                  		;xchg	al, es:504h	; [es:LSTDRV]
  9820                                  					; then swap(curr_drv,req_drv)
  9821 000008A3 07                      		pop	es
  9822 000008A4 38C4                    		cmp	ah, al		; else
  9823 000008A6 58                      		pop	ax		; swap(curr_drv,req_drv)
  9824 000008A7 7410                    		jz	short singleret	; issue	swap_dsk_msg
  9825                                  ignore_sdsb:				
  9826 000008A9 E8800E                  		call	swpdsk
  9827 000008AC EB0B                    		jmp	short singleret
  9828                                  ; ---------------------------------------------------------------------------
  9829                                  
  9830                                  scan_skip:	
  9831 000008AE 26C43D                  		les	di, [es:di]			
  9832                                  		;les	di, es:[di]	; [es:di+BDS.link]
  9833                                  					; go to	next bds
  9834 000008B1 83FFFF                  		cmp	di, 0FFFFh	; end of list?
  9835 000008B4 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
  9836 000008B6 F9                      		stc
  9837 000008B7 5F                      		pop	di		; restore current bds
  9838 000008B8 07                      		pop	es
  9839                                  
  9840                                  singleret:				
  9841 000008B9 5B                      		pop	bx
  9842 000008BA 58                      		pop	ax
  9843 000008BB C3                      		retn
  9844                                  
  9845                                  ; ---------------------------------------------------------------------------
  9846                                  
  9847                                  baddrive:				
  9848 000008BC B008                    		mov	al, 8		; sector not found
  9849 000008BE EB02                    		jmp	short baddrive_ret
  9850                                  ; ---------------------------------------------------------------------------
  9851                                  
  9852                                  unformatteddrive:				
  9853 000008C0 B007                    		mov	al, 7		; unknown media
  9854                                  baddrive_ret:				
  9855 000008C2 F9                      		stc
  9856                                  ; ---------------------------------------------------------------------------
  9857                                  
  9858                                  ioret:		
  9859 000008C3 C3                      		retn
  9860                                  
  9861                                  ; ---------------------------------------------------------------------------
  9862                                  
  9863                                  ; 15/10/52022
  9864                                  
  9865                                  ; ---------------------------------------------------------------------------
  9866                                  ;	disk i/o handler
  9867                                  ;
  9868                                  ;	al = drive number (0-6)
  9869                                  ;	ah = media descriptor
  9870                                  ;	cx = sector count
  9871                                  ;	dx = first sector (low)
  9872                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
  9873                                  ;	ds = cs
  9874                                  ;	es:di = transfer address
  9875                                  ;	[rflag]=operation (2=read, 3=write)
  9876                                  ;	[verify]=1 for verify after write
  9877                                  ;
  9878                                  ;	if successful carry flag = 0
  9879                                  ;	  else cf=1 and al contains error code
  9880                                  ; ---------------------------------------------------------------------------
  9881                                  
  9882                                  diskrd:	
  9883                                  		;mov	ds:rflag, 2	; romread
  9884                                  		; 19/10/2022
  9885 000008C4 C606[2001]02            		mov	byte [rflag], 2 ; romread
  9886                                  
  9887                                  ; =============== S U B	R O U T	I N E =======================================
  9888                                  
  9889                                  		; 19/10/2022
  9890                                  diskio:
  9891 000008C9 89FB                    		mov	bx, di		; es:bx	= transfer address
  9892 000008CB 8C06[3705]              		mov	[xfer_seg], es	; save transfer	segment
  9893 000008CF E8F9FB                  		call	SetDrive
  9894 000008D2 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
  9895 000008D6 A2[1F01]                		mov	[medbyt], al
  9896                                  		;jcxz	short ioret
  9897 000008D9 E3E8                    		jcxz	ioret
  9898                                  
  9899                                  ; see if the media is formatted or not by checking the flags field in
  9900                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
  9901                                  ; go to the error exit at label unformatteddrive.
  9902                                  
  9903 000008DB 26F6452402              		test	byte [es:di+24h], 2
  9904                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
  9905                                  					; unformatted_media
  9906 000008E0 75DE                    		jnz	short unformatteddrive
  9907 000008E2 890E[2201]              		mov	[seccnt], cx	; save sector count
  9908 000008E6 8926[3501]              		mov	[spsav], sp	; save sp
  9909                                  
  9910                                  ; ensure that we are trying to access valid sectors on the drive
  9911                                  
  9912 000008EA 89D0                    		mov	ax, dx
  9913 000008EC 31F6                    		xor	si, si
  9914 000008EE 01CA                    		add	dx, cx
  9915 000008F0 83D600                  		adc	si, 0
  9916 000008F3 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
  9917                                  					; > 32 bit sector ?
  9918 000008F8 740D                    		jz	short sanity32
  9919 000008FA 83FE00                  		cmp	si, 0
  9920 000008FD 75BD                    		jnz	short baddrive
  9921 000008FF 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  9922 00000903 77B7                    		ja	short baddrive
  9923 00000905 EB12                    		jmp	short sanityok
  9924                                  ; ---------------------------------------------------------------------------
  9925                                  
  9926                                  sanity32:				
  9927 00000907 0336[2B05]              		add	si, [start_sec_h]
  9928 0000090B 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  9929 0000090F 7208                    		jb	short sanityok
  9930 00000911 77A9                    		ja	short baddrive
  9931 00000913 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  9932 00000917 77A3                    		ja	short baddrive
  9933                                  
  9934                                  sanityok:				
  9935 00000919 8B16[2B05]              		mov	dx, [start_sec_h]
  9936 0000091D 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
  9937 00000921 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
  9938                                  
  9939                                  ; now dx;ax have the physical first sector.
  9940                                  ; since the following procedures is going to destroy ax, let's
  9941                                  ; save it temporarily to saved_word.
  9942                                  
  9943 00000925 A3[2D05]                		mov	[saved_word], ax ; save the sector number (low)
  9944                                  
  9945                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
  9946                                  ; will do it because we will skip the set up stuff with hard disks.
  9947                                  
  9948 00000928 06                      		push	es
  9949 00000929 8E06[1A00]              		mov	es, [zeroseg]
  9950 0000092D 26C4367800              		les	si, [es:DSKADR]
  9951                                  		;les	si, es:78h	; [es:DSKADR]
  9952                                  					; current disk parm table
  9953 00000932 8936[2D01]              		mov	[dpt], si
  9954 00000936 8C06[2F01]              		mov	[dpt+2], es
  9955 0000093A 07                      		pop	es
  9956 0000093B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9957                                  					; fnon_removable
  9958 00000940 7510                    		jnz	short skip_setup
  9959 00000942 E8F6FE                  		call	checksingle
  9960                                  
  9961                                  ; check to see if we have previously noted a change line. the routine
  9962                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
  9963                                  ; the proper error code.
  9964                                  
  9965 00000945 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
  9966 0000094A 7403                    		jz	short diskio_nochangeline ; brif not
  9967 0000094C E8AB0E                  		call	checklatchio	; will do a sneaky pop stack return
  9968                                  					; if a disk error occurs
  9969                                  diskio_nochangeline:			
  9970 0000094F E84700                  		call	iosetup		; set up tables	and variables for i/o
  9971                                  
  9972                                  ; now the settle values are correct for the following code
  9973                                  
  9974                                  skip_setup:
  9975                                  
  9976                                  ; 32 bit sector calculation.
  9977                                  ; dx:[saved_word] = starting sector number.
  9978                                  				
  9979 00000952 89D0                    		mov	ax, dx
  9980 00000954 31D2                    		xor	dx, dx
  9981 00000956 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
  9982                                  					 ; divide by sec per track
  9983 0000095A A3[2905]                		mov	[temp_h], ax
  9984 0000095D A1[2D05]                		mov	ax, [saved_word]
  9985 00000960 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
  9986                                  					; now, [temp_h]:ax = track #, dx = sector
  9987                                  		;inc	dl		; sector number	is 1 based.
  9988                                  		; 18/12/2022
  9989 00000964 42                      		inc	dx
  9990 00000965 8816[3101]              		mov	[cursec], dl	; save current sector
  9991 00000969 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
  9992                                  					; get number of	heads
  9993 0000096D 50                      		push	ax
  9994 0000096E 31D2                    		xor	dx, dx
  9995 00000970 A1[2905]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
  9996 00000973 F7F1                    		div	cx
  9997 00000975 A3[2905]                		mov	[temp_h], ax
  9998 00000978 58                      		pop	ax
  9999 00000979 F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10000 0000097B 833E[2905]00            		cmp	word [temp_h], 0
 10001 00000980 7714                    		ja	short baddrive_brdg
 10002 00000982 3D0004                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 10003 00000985 770F                    		ja	short baddrive_brdg
 10004 00000987 8816[3201]              		mov	[curhd], dl	; save current head
 10005 0000098B A3[3301]                		mov	[curtrk], ax	; save current track
 10006                                  
 10007                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10008                                  ; violations here. not true. we perform the operation as if everything is
 10009                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10010                                  
 10011 0000098E A1[2201]                		mov	ax, [seccnt]
 10012 00000991 E88400                  		call	block		; (cas - call/ret)
 10013                                  		;call	done
 10014                                  		;retn
 10015                                  		; 18/12/2022
 10016 00000994 EB4B                    		jmp	done
 10017                                  
 10018                                  ; ---------------------------------------------------------------------------
 10019                                  
 10020                                  baddrive_brdg:				
 10021 00000996 E923FF                  		jmp	baddrive
 10022                                  
 10023                                  ; =============== S U B	R O U T	I N E =======================================
 10024                                  
 10025                                  ;--------------------------------------------------------------
 10026                                  ; set the drive-last-accessed flag for diskette only. 
 10027                                  ; we know that the hard disk will not be removed.
 10028                                  ; es:di -> current bds.
 10029                                  ; ds -> Bios_Data
 10030                                  ; ax,cx,si are destroyed.
 10031                                  ;--------------------------------------------------------------
 10032                                  
 10033                                  		; 19/10/2022
 10034                                  iosetup:	
 10035 00000999 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10036 0000099D A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10037                                  
 10038                                  ; determine proper head settle values
 10039                                  
 10040 000009A0 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10041 000009A5 7539                    		jnz	short skip_dpt_setting
 10042 000009A7 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10043 000009AA 1E                      		push	ds
 10044 000009AB C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10045 000009AF 884404                  		mov	[si+4],	al
 10046 000009B2 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10047 000009B5 8A6404                  		mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10048 000009B8 1F                      		pop	ds
 10049 000009B9 A2[2601]                		mov	[motorstartup], al
 10050 000009BC 8826[2B01]              		mov	[save_eot], ah
 10051                                  
 10052                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10053                                  ; motor start time to 4. this checking for every i/o is going to affect
 10054                                  ; performance across the board, but is necessary!!
 10055                                  
 10056 000009C0 1E                      		push	ds
 10057 000009C1 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10058 000009C5 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10059                                  					; ffSmall
 10060 000009CA 7505                    		jnz	short motor_start_ok
 10061 000009CC B004                    		mov	al, 4
 10062 000009CE 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10063                                  motor_start_ok:
 10064                                  
 10065                                  ; ds:si now points to disk parameter table.
 10066                                  ; get current settle and set fast settle
 10067                                  				
 10068                                  		;xor	al, al
 10069                                  		;inc	al		; ibm wants fast settle	to be 1
 10070                                  		; 18/12/2022
 10071 000009D1 31C0                    		xor	ax, ax
 10072 000009D3 40                      		inc	ax
 10073 000009D4 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10074                                  					; get settle and set up	for fast
 10075 000009D7 1F                      		pop	ds
 10076 000009D8 A2[2701]                		mov	[settlecurrent], al
 10077 000009DB B00F                    		mov	al, 15		; NORMSETTLE
 10078                                  					; someone has diddled the settle
 10079 000009DD A2[2801]                		mov	[settleslow], al
 10080                                  skip_dpt_setting:			
 10081 000009E0 C3                      		retn
 10082                                  
 10083                                  ; =============== S U B	R O U T	I N E =======================================
 10084                                  
 10085                                  ;--------------------------------------------------------------
 10086                                  ; set time of last access, and reset default values in the dpt.
 10087                                  ;
 10088                                  ;	  note: trashes (at least) si
 10089                                  ;--------------------------------------------------------------
 10090                                  
 10091                                  		; 19/10/2022
 10092                                  done:
 10093 000009E1 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10094                                  					; fnon_removable
 10095 000009E6 752F                    		jnz	short ddbx	; do not set for non-removable media
 10096 000009E8 E8FD01                  		call	set_tim
 10097                                  ;diddleback:
 10098                                  ; 09/12/2022
 10099                                  diddle_back:				
 10100 000009EB 9C                      		pushf
 10101 000009EC 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10102 000009F1 7523                    		jnz	short nodiddleback
 10103 000009F3 50                      		push	ax
 10104 000009F4 06                      		push	es
 10105 000009F5 C436[2D01]              		les	si, [dpt]
 10106 000009F9 A0[2B01]                		mov	al, [save_eot]
 10107 000009FC 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10108 00000A00 A0[2701]                		mov	al, [settlecurrent]
 10109 00000A03 8A26[2601]              		mov	ah, [motorstartup]
 10110 00000A07 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10111 00000A0B 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10112 00000A10 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10113 00000A14 07                      		pop	es
 10114 00000A15 58                      		pop	ax
 10115                                  nodiddleback:				
 10116 00000A16 9D                      		popf
 10117                                  ddbx:					
 10118 00000A17 C3                      		retn
 10119                                  
 10120                                  ; =============== S U B	R O U T	I N E =======================================
 10121                                  
 10122                                  ;--------------------------------------------------------------
 10123                                  ;read the number of sectors specified in ax, 
 10124                                  ;handling track boundaries
 10125                                  ;es:di -> bds for this drive
 10126                                  ;--------------------------------------------------------------
 10127                                  
 10128                                  		 ; 19/10/2022
 10129                                  block:	
 10130 00000A18 09C0                    		or	ax, ax
 10131 00000A1A 74FB                    		jz	short ddbx
 10132 00000A1C 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10133                                  					; fnon_removable
 10134 00000A21 740D                    		jz	short block_floppy ;
 10135                                  
 10136                                  ; check	to see if multi	track operation	is allowed. if not
 10137                                  ; we have to go	to the block_floppy below to break up the operation.
 10138                                  
 10139 00000A23 F606[2F05]80            		test	byte [multrk_flag], 80h
 10140                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 10141 00000A28 7406                    		jz	short block_floppy
 10142 00000A2A E82900                  		call	Disk
 10143 00000A2D 31C0                    		xor	ax, ax
 10144 00000A2F C3                      		retn
 10145                                  ; ---------------------------------------------------------------------------
 10146                                  
 10147                                  block_floppy:
 10148                                  
 10149                                  ; read at most 1 track worth. perform minimization at sector / track
 10150                                  				
 10151 00000A30 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 10152 00000A34 FEC1                    		inc	cl
 10153 00000A36 2A0E[3101]              		sub	cl, [cursec]
 10154 00000A3A 30ED                    		xor	ch, ch
 10155 00000A3C 39C8                    		cmp	ax, cx
 10156 00000A3E 7302                    		jnb	short gotmin
 10157 00000A40 89C1                    		mov	cx, ax
 10158                                  
 10159                                  gotmin:
 10160                                  
 10161                                  ; ax is the requested number of sectors to read
 10162                                  ; cx is the number that we can do on this track
 10163                                  					
 10164 00000A42 50                      		push	ax
 10165 00000A43 51                      		push	cx
 10166 00000A44 89C8                    		mov	ax, cx
 10167 00000A46 E80D00                  		call	Disk
 10168 00000A49 59                      		pop	cx
 10169 00000A4A 58                      		pop	ax
 10170                                  
 10171                                  ; cx is the number of sectors just transferred
 10172                                  
 10173 00000A4B 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 10174 00000A4D D0E1                    		shl	cl, 1
 10175 00000A4F 00CF                    		add	bh, cl		; adjust transfer address
 10176 00000A51 EBC5                    		jmp	short block
 10177                                  dskerr_brdg:				
 10178 00000A53 E9EC00                  		jmp	dskerr
 10179                                  
 10180                                  ; =============== S U B	R O U T	I N E =======================================
 10181                                  
 10182                                  ; 15/10/2022
 10183                                  
 10184                                  ;--------------------------------------------------------------
 10185                                  ;perform disk i/o with retries
 10186                                  ; al = number of sectors (1-8, all on one track)
 10187                                  ; es:di point to drive parameters
 10188                                  ; xfer_seg:bx = transfer address 
 10189                                  ;		(must not cross a 64k physical boundary)
 10190                                  ; [rflag] = 2 if read, 3 if write
 10191                                  ; [verify] = 0 for normal, 1 for verify after write
 10192                                  ;--------------------------------------------------------------
 10193                                  
 10194                                  		 ; 19/10/2022
 10195                                  Disk:
 10196                                  
 10197                                  ; Check for hard disk format and
 10198                                  ; if TRUE then set max error count to 2
 10199                                  
 10200 00000A56 BD0500                  		mov	bp, 5		; MAXERR
 10201                                  					; set up retry count
 10202 00000A59 26F6452301              		test	byte [es:di+23h], 1	;
 10203                                  					; [es:di+BDS.flags], fnon_removable
 10204 00000A5E 7408                    		jz	short GetRdWrInd
 10205 00000A60 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 10206 00000A63 7403                    		jz	short GetRdWrInd
 10207 00000A65 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 10208                                  GetRdWrInd:				
 10209 00000A68 892E[3205]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 10210 00000A6C 892E[3405]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 10211 00000A70 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 10212                                  ;retry:
 10213                                  ; 09/12/2022
 10214                                  _retry:					
 10215 00000A74 50                      		push	ax
 10216 00000A75 8B16[3301]              		mov	dx, [curtrk]
 10217 00000A79 26F6452301              		test	byte [es:di+23h], 1
 10218 00000A7E 740B                    		jz	short disk_not_mini
 10219 00000A80 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 10220                                  					; is this a mini disk? ((logical dos partition))
 10221 00000A85 7504                    		jnz	short disk_not_mini ; no. continue to next.
 10222 00000A87 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 10223                                  					; add hidden trks.
 10224                                  disk_not_mini:				
 10225 00000A8B D0CE                    		ror	dh, 1
 10226 00000A8D D0CE                    		ror	dh, 1
 10227 00000A8F 0A36[3101]              		or	dh, [cursec]
 10228 00000A93 89D1                    		mov	cx, dx
 10229 00000A95 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 10230 00000A97 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 10231 00000A9B 268A5504                		mov	dl, [es:di+4]	; physical drive number
 10232                                  					; [es:di+BDS.drivenum]
 10233 00000A9F 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 10234 00000AA4 7413                    		jz	short do_fast	; hard files use fast speed
 10235                                  
 10236                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 10237                                  ; this helps when we have just done a reset disk operation and the head has
 10238                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 10239                                  
 10240 00000AA6 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 10241 00000AAB 740A                    		jz	short do_writej
 10242 00000AAD 80FC02                  		cmp	ah, 2		; romread
 10243 00000AB0 7407                    		jz	short do_fast
 10244 00000AB2 80FC04                  		cmp	ah, 4		; romverify
 10245 00000AB5 7402                    		jz	short do_fast
 10246                                  do_writej:	
 10247                                  
 10248                                  ; reads always fast, unless we have just done a disk reset operation
 10249                                  			
 10250 00000AB7 EB56                    		jmp	short do_write	; reads	always fast
 10251                                  ; ---------------------------------------------------------------------------
 10252                                  
 10253                                  do_fast:				
 10254 00000AB9 E8FC00                  		call	fastspeed	; change settle	mode
 10255                                  
 10256                                  testerr:				
 10257 00000ABC 7295                    		jb	short dskerr_brdg
 10258                                  
 10259                                  ; set drive and track of last access
 10260                                  
 10261 00000ABE 8816[7600]              		mov	[step_drv], dl
 10262 00000AC2 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10263                                  no_set:
 10264                                  		;cmp	word [wrtverify], 103h
 10265 00000AC6 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 10266 00000ACC 7452                    		jz	short doverify
 10267                                  noverify:				
 10268 00000ACE 58                      		pop	ax
 10269                                  
 10270                                  ; check the flags word in the bds to see if the drive is non removable
 10271                                  ; if not we needn't do anything special
 10272                                  ; if it is a hard disk then check to see if multi-track operation
 10273                                  ; is specified. if specified we don't have to calculate for the next
 10274                                  ; track since we are already done. so we can go to the exit of this routine.
 10275                                  
 10276 00000ACF 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10277                                  					; fnon_removable
 10278 00000AD4 7407                    		jz	short its_removable
 10279 00000AD6 F606[2F05]80            		test	byte [multrk_flag], 80h ; multrk_on
 10280 00000ADB 7530                    		jnz	short disk_ret
 10281                                  its_removable:				
 10282 00000ADD 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 10283 00000AE0 30E4                    		xor	ah, ah
 10284 00000AE2 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 10285 00000AE6 00C1                    		add	cl, al
 10286 00000AE8 880E[3101]              		mov	[cursec], cl
 10287 00000AEC 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 10288                                  					; see if sector/track limit reached
 10289 00000AF0 761B                    		jbe	short disk_ret
 10290 00000AF2 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 10291 00000AF7 8A36[3201]              		mov	dh, [curhd]
 10292 00000AFB FEC6                    		inc	dh
 10293 00000AFD 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 10294 00000B01 7206                    		jb	short noxor
 10295 00000B03 30F6                    		xor	dh, dh
 10296 00000B05 FF06[3301]              		inc	word [curtrk]
 10297                                  noxor:					
 10298 00000B09 8836[3201]              		mov	[curhd], dh
 10299                                  disk_ret:				
 10300 00000B0D F8                      		clc
 10301 00000B0E C3                      		retn
 10302                                  ; ---------------------------------------------------------------------------
 10303                                  
 10304                                  ; 15/10/2022
 10305                                  
 10306                                  ;--------------------------------------------------------------
 10307                                  ; the request is for write. determine if we are talking about
 10308                                  ; the same track and drive. if so, use the fast speed.
 10309                                  ;--------------------------------------------------------------
 10310                                  
 10311                                  do_write:				
 10312 00000B0F 3A16[7600]              		cmp	dl, [step_drv]
 10313 00000B13 7506                    		jnz	short do_norm	; we have changed drives
 10314 00000B15 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 10315 00000B19 749E                    		jz	short do_fast	; we are still on the same track
 10316                                  
 10317                                  do_norm:				
 10318 00000B1B E87500                  		call	normspeed
 10319 00000B1E EB9C                    		jmp	short testerr
 10320                                  ; ---------------------------------------------------------------------------
 10321                                  
 10322                                  ;--------------------------------------------------------------
 10323                                  ; we have a verify request also. get state info and go verify
 10324                                  ;--------------------------------------------------------------
 10325                                  
 10326                                  doverify:				
 10327 00000B20 58                      		pop	ax
 10328 00000B21 50                      		push	ax
 10329 00000B22 B404                    		mov	ah, 4
 10330 00000B24 E89100                  		call	fastspeed
 10331 00000B27 73A5                    		jnb	short noverify
 10332                                  
 10333                                  ; check the error returned in ah to see if it is a soft ecc error.
 10334                                  ; if it is not we needn't do anything special. if it is a soft
 10335                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 10336                                  ; this retry count becomes 0 then we just ignore the error and go to
 10337                                  ; no_verify but if we can still try then we call the routine to reset
 10338                                  ; the disk and go to dskerr1 to retry the operation.
 10339                                  
 10340 00000B29 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 10341 00000B2C 750B                    		jnz	short not_softecc_err
 10342 00000B2E FF0E[3405]              		dec	word [soft_ecc_cnt]
 10343 00000B32 749A                    		jz	short noverify	; no more retry
 10344 00000B34 E84405                  		call	ResetDisk	; reset	disk
 10345 00000B37 EB3E                    		jmp	short dskerr1	; retry
 10346                                  ; ---------------------------------------------------------------------------
 10347                                  
 10348                                  not_softecc_err:			; other error.			
 10349 00000B39 E83F05                  		call	ResetDisk
 10350 00000B3C FF0E[3205]              		dec	word [vretry_cnt]
 10351 00000B40 EB1C                    		jmp	short dskerr0
 10352                                  ; ---------------------------------------------------------------------------
 10353                                  
 10354                                  ;--------------------------------------------------------------
 10355                                  ; need to special case the change-line error ah=06h.
 10356                                  ; if we get this, we need to return it.
 10357                                  ;--------------------------------------------------------------
 10358                                  
 10359                                  dskerr:					
 10360 00000B42 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 10361 00000B47 7403                    		jz	short dskerr_nochangeline ; brif not
 10362 00000B49 E8220D                  		call	checkio
 10363                                  dskerr_nochangeline:			
 10364 00000B4C 803E[3605]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 10365 00000B51 7508                    		jnz	short dochkagain ; no more retry.
 10366 00000B53 BD0100                  		mov	bp, 1
 10367 00000B56 C606[3605]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 10368                                  dochkagain:				
 10369 00000B5B E8AA00                  		call	again
 10370                                  dskerr0:				
 10371 00000B5E 7420                    		jz	short harderr
 10372 00000B60 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10373                                  					; fnon_removable
 10374 00000B65 7505                    		jnz	short skip_timeout_chk
 10375 00000B67 80FC80                  		cmp	ah, 80h		; timeout?
 10376 00000B6A 7414                    		jz	short harderr
 10377                                  skip_timeout_chk:			
 10378 00000B6C 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 10379 00000B6F 740A                    		jz	short write_fault_err ;	then, don't retry.
 10380 00000B71 C706[3405]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 10381                                  					; set soft_ecc_cnt back	to maxerr
 10382                                  dskerr1:				
 10383 00000B77 58                      		pop	ax		; restore sector count
 10384                                  		;jmp	retry
 10385                                  		; 09/12/2022
 10386 00000B78 E9F9FE                  		jmp	_retry
 10387                                  ; ---------------------------------------------------------------------------
 10388                                  
 10389                                  write_fault_err:			
 10390 00000B7B BD0100                  		mov	bp, 1		; just retry only once
 10391                                  					; for write fault error.
 10392 00000B7E EBF7                    		jmp	short dskerr1
 10393                                  
 10394                                  		; fall into harderr
 10395                                  ; ---------------------------------------------------------------------------
 10396                                  
 10397                                  ; entry point for routines that call maperror themselves
 10398                                  
 10399                                  harderr:				
 10400 00000B80 E84D00                  		call	maperror
 10401                                  harderr2:				
 10402 00000B83 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 10403                                  					; force a media check through rom
 10404 00000B88 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 10405 00000B8C 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 10406                                  
 10407                                  ; since we are performing a non-local goto, restore the disk parameters
 10408                                  
 10409                                  		;jmp	diddleback
 10410                                  		; 09/12/2022
 10411 00000B90 E958FE                  		jmp	diddle_back
 10412                                  
 10413                                  ; =============== S U B	R O U T	I N E =======================================
 10414                                  
 10415                                  ; change settle value from settlecurrent to whatever is appropriate
 10416                                  ; note that this routine is never called for a fixed disk.
 10417                                  
 10418                                  		; 19/10/2022
 10419                                  normspeed:
 10420 00000B93 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10421 00000B98 751E                    		jnz	short fastspeed
 10422 00000B9A 06                      		push	es
 10423 00000B9B 50                      		push	ax
 10424 00000B9C A0[2801]                		mov	al, [settleslow]
 10425 00000B9F C436[2D01]              		les	si, [dpt]	; current disk parm table
 10426 00000BA3 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10427 00000BA7 58                      		pop	ax
 10428 00000BA8 07                      		pop	es
 10429 00000BA9 E80C00                  		call	fastspeed
 10430 00000BAC 06                      		push	es
 10431 00000BAD C436[2D01]              		les	si, [dpt]
 10432 00000BB1 26C6440901              		mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10433                                  					; 1 is fast settle value
 10434 00000BB6 07                      		pop	es
 10435 00000BB7 C3                      		retn
 10436                                  
 10437                                  ; =============== S U B	R O U T	I N E =======================================
 10438                                  
 10439                                  ; if the drive has been marked as too big (i.e. starting sector of the
 10440                                  ; partition is > 16 bits, then always return drive not ready.
 10441                                  
 10442                                  fastspeed:		
 10443 00000BB8 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 10444                                  					; ftoobig
 10445 00000BBD 750D                    		jnz	short notready
 10446 00000BBF 06                      		push	es
 10447 00000BC0 8E06[3705]              		mov	es, [xfer_seg]
 10448 00000BC4 CD13                    		int	13h		; DISK -
 10449 00000BC6 8C06[3705]              		mov	[xfer_seg], es
 10450 00000BCA 07                      		pop	es
 10451 00000BCB C3                      		retn
 10452                                  ; ---------------------------------------------------------------------------
 10453                                  
 10454                                  notready:				
 10455 00000BCC F9                      		stc
 10456 00000BCD B480                    		mov	ah, 80h
 10457 00000BCF C3                      		retn
 10458                                  
 10459                                  ; =============== S U B	R O U T	I N E =======================================
 10460                                  
 10461                                  ; map error returned by rom in ah into corresponding code to be returned to
 10462                                  ; dos in al. trashes di. guaranteed to set carry.
 10463                                  
 10464                                  maperror:	
 10465 00000BD0 51                      		push	cx
 10466 00000BD1 06                      		push	es
 10467 00000BD2 1E                      		push	ds		; set es=Bios_Data
 10468 00000BD3 07                      		pop	es
 10469 00000BD4 88E0                    		mov	al, ah		; put error code in al
 10470 00000BD6 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 10471 00000BD9 B90900                  		mov	cx, 9		; numerr (= errout-errin)
 10472                                  					; number of possible error conditions
 10473 00000BDC BF[3C01]                		mov	di, errin	; point to error conditions
 10474 00000BDF F2AE                    		repne scasb
 10475                                  		; 10/12/2022
 10476 00000BE1 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 10477                                  					; get translation
 10478                                  		; 19/10/2022 - Temporary ! 
 10479                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 10480 00000BE4 07                      		pop	es
 10481 00000BE5 59                      		pop	cx
 10482 00000BE6 F9                      		stc			; flag error condition
 10483 00000BE7 C3                      		retn
 10484                                  
 10485                                  ; =============== S U B	R O U T	I N E =======================================
 10486                                  
 10487                                  ; set the time of last access for this drive.
 10488                                  ; this is done only for removable media. es:di -> bds
 10489                                  
 10490                                  set_tim:		
 10491 00000BE8 50                      		push	ax
 10492 00000BE9 E88EF8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 10493                                  
 10494                                  ; we have the new time. if we see that the time has passed,
 10495                                  ; then we reset the threshold counter...
 10496                                  
 10497 00000BEC 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 10498 00000BF0 7506                    		jnz	short setaccess
 10499 00000BF2 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 10500                                  		;jz	short done_set
 10501                                  		; 12/12/2022
 10502 00000BF6 740E                    		je	short done_set2
 10503                                  setaccess:				
 10504 00000BF8 C606[1D01]00            		mov	byte [accesscount], 0
 10505 00000BFD 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 10506 00000C01 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 10507                                  done_set:				
 10508 00000C05 F8                      		clc
 10509                                  done_set2:		; 12/12/2022
 10510 00000C06 58                      		pop	ax
 10511 00000C07 C3                      		retn
 10512                                  
 10513                                  ; =============== S U B	R O U T	I N E =======================================
 10514                                  
 10515                                  ; this routine is called if an error occurs while formatting or verifying.
 10516                                  ; it resets the drive,and decrements the retry count.
 10517                                  ; on entry - ds:di - points to bds for the drive
 10518                                  ;	     bp    - contains retry count
 10519                                  ; on exit    flags indicate result of decrementing retry count
 10520                                  
 10521                                  again:	
 10522 00000C08 E87004                  		call	ResetDisk
 10523 00000C0B 80FC06                  		cmp	ah, 6
 10524 00000C0E 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 10525                                  					; do not decrement retry count.
 10526 00000C10 4D                      		dec	bp		; decrement retry count
 10527 00000C11 C3                      		retn
 10528                                  ; ---------------------------------------------------------------------------
 10529                                  
 10530                                  dont_dec_retry_count:			
 10531 00000C12 08E4                    		or	ah, ah
 10532 00000C14 C3                      		retn
 10533                                  
 10534                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 10535                                  
 10536                                  ;----------------------------------------------------------------------------
 10537                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 10538                                  ;----------------------------------------------------------------------------
 10539                                  ; 11/03/2019 - Retro DOS v4.0
 10540                                  
 10541                                  ; 18/03/2019
 10542                                  
 10543                                  ; ==========================================================================
 10544                                  ;
 10545                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 10546                                  ;
 10547                                  ;      This function is intended to give the user to control the
 10548                                  ;      bds table flags of unformatted_media bit.
 10549                                  ;      GetAccessFlag will show the status -
 10550                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 10551                                  ;						1 disk i/o allowed
 10552                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 10553                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 10554                                  ;						1 disallow disk i/o
 10555                                  ; ==========================================================================
 10556                                  
 10557                                  		; generic ioctl dispatch tables
 10558                                  
 10559                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 10560                                  
 10561                                  ; ---------------------------------------------------------------------------
 10562 00000C15 00                      		db 0
 10563                                  
 10564                                  ; 09/12/2022 
 10565                                  %if 0
 10566                                  
 10567                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 10568                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 10569                                  		dw 0EE8h	; 61h	; ReadTrack
 10570                                  		dw 0E86h	; 62h	; VerifyTrack
 10571                                  		dw 0CA3h	 	; Cmd_Error_Proc
 10572                                  		dw 0CA3h		; Cmd_Error_Proc
 10573                                  		dw 0CA3h		; Cmd_Error_Proc
 10574                                  		dw 119Ah	; 66h	; GetMediaId
 10575                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 10576                                  		dw 12C1h	; 68h	; SenseMediaType
 10577                                  
 10578                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 10579                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 10580                                  		dw 0EEFh	; 41h	; WriteTrack
 10581                                  		dw 0DC1h	; 42h	; FormatTrack
 10582                                  		dw 0CA3h		; Cmd_Error_Proc
 10583                                  		dw 0CA3h		; Cmd_Error_Proc
 10584                                  		dw 0CA3h		; Cmd_Error_Proc
 10585                                  		dw 11D2h	; 46h	; SetMediaId
 10586                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 10587                                  
 10588                                  %endif
 10589                                  
 10590                                  		; 09/12/2022
 10591 00000C16 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 10592 00000C17 [810C]                  		dw GetDeviceParameters	; 60h
 10593 00000C19 [BC0E]                  		dw ReadTrack		; 61h
 10594 00000C1B [5C0E]                  		dw VerifyTrack		; 62h
 10595 00000C1D [7D0C]                  		dw Cmd_Error_Proc
 10596 00000C1F [7D0C]                  		dw Cmd_Error_Proc
 10597 00000C21 [7D0C]                  		dw Cmd_Error_Proc
 10598 00000C23 [5D11]                  		dw GetMediaId		; 66h
 10599 00000C25 [2912]                  		dw GetAccessFlag	; 67h ; unpublished function
 10600 00000C27 [7B12]                  		dw SenseMediaType	; 68h
 10601                                  
 10602 00000C29 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 10603 00000C2A [CC0C]                  		dw SetDeviceParameters	; 40h
 10604 00000C2C [C30E]                  		dw WriteTrack		; 41h
 10605 00000C2E [970D]                  		dw FormatTrack		; 42h
 10606 00000C30 [7D0C]                  		dw Cmd_Error_Proc
 10607 00000C32 [7D0C]                  		dw Cmd_Error_Proc
 10608 00000C34 [7D0C]                  		dw Cmd_Error_Proc
 10609 00000C36 [9311]                  		dw SetMediaId		; 46h
 10610 00000C38 [3F12]                  		dw SetAccessFlag	; 47h ; unpublished function
 10611                                  
 10612                                  ; ==========================================================================
 10613                                  ; IOC_DC_Table
 10614                                  ;
 10615                                  ; This table contains all of the valid generic IOCtl Minor codes for
 10616                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 10617                                  ; Added for 5.00
 10618                                  ; ==========================================================================
 10619                                  
 10620 00000C3A 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 10621 00000C3B 40                      		db 40h			; SET_DEVICE_PARAMETERS
 10622 00000C3C 61                      		db 61h			; READ_TRACK
 10623 00000C3D 41                      		db 41h			; WRITE_TRACK
 10624 00000C3E 62                      		db 62h			; VERIFY_TRACK
 10625 00000C3F 42                      		db 42h			; FORMAT_TRACK
 10626 00000C40 66                      		db 66h			; GET_MEDIA_ID
 10627 00000C41 46                      		db 46h			; SET_MEDIA_ID
 10628 00000C42 67                      		db 67h			; GET_ACCESS_FLAG
 10629 00000C43 47                      		db 47h			; SET_ACCESS_FLAG
 10630 00000C44 68                      		db 68h			; SENSE_MEDIA_TYPE
 10631                                  
 10632                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 10633                                  
 10634                                  ; ---------------------------------------------------------------------------
 10635                                  
 10636                                  ; 16/10/2022
 10637                                  
 10638                                  ; ==========================================================================
 10639                                  ; Do_Generic_IOCtl: perform generic ioctl request
 10640                                  ;
 10641                                  ;    input: AL contains logical drive
 10642                                  ;
 10643                                  ;	functions are dispatched through a call. On return, carry indicates
 10644                                  ;	error code in al. Note::bES:b& ds undefined on return from
 10645                                  ;	subfunctions.
 10646                                  ;
 10647                                  ; ==========================================================================
 10648                                  
 10649                                  ; 11/03/2019
 10650                                  		; 19/10/2022
 10651                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 10652 00000C45 E883F8                  		call	SetDrive	; ES:DI	Points to bds for drive
 10653 00000C48 06                      		push	es
 10654 00000C49 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 10655 00000C4D 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 10656                                  					; RAWIO
 10657 00000C52 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 10658 00000C56 07                      		pop	es
 10659 00000C57 7525                    		jnz	short IoctlFuncErr
 10660                                  
 10661                                  		; cas note: Could do the above two blocks in reverse order.
 10662                                  		; Would have to preserve al for SetDrive
 10663                                  
 10664                                  		; 10/12/2022
 10665 00000C59 BE[160C]                		mov	si, IoReadJumpTable
 10666                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 10667                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 10668 00000C5C A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 10669 00000C5E 7503                    		jnz	short NotGenericWrite ; function is a read.
 10670                                  		; 10/12/2022
 10671 00000C60 BE[290C]                		mov	si, IoWriteJumpTable
 10672                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 10673                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 10674                                  NotGenericWrite:			
 10675 00000C63 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 10676 00000C65 2C40                    		sub	al, 40h		; offset for base function
 10677 00000C67 2E3A04                  		cmp	al, [cs:si]
 10678 00000C6A 7712                    		ja	short IoctlFuncErr
 10679 00000C6C 98                      		cbw
 10680 00000C6D D1E0                    		shl	ax, 1
 10681 00000C6F 46                      		inc	si
 10682 00000C70 01C6                    		add	si, ax
 10683 00000C72 2EFF14                  		call	near [cs:si]
 10684                                  		;call	word ptr cs:[si]
 10685 00000C75 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10686                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10687                                  					; 2C7h:30h = 70h:25A0h
 10688 00000C7A B481                    		mov	ah, 81h		; Return this status in	case of	carry
 10689 00000C7C C3                      		retn			; Pass carry flag through to exit code
 10690                                  ; ---------------------------------------------------------------------------
 10691                                  
 10692                                  		; Cmd_Error_Proc is called as a procedure and also use
 10693                                  		; as a fall through from above
 10694                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 10695 00000C7D 5A                      		pop	dx
 10696                                  
 10697                                  IoctlFuncErr:				
 10698 00000C7E E954F4                  		jmp	bc_cmderr
 10699                                  ; ---------------------------------------------------------------------------
 10700                                  
 10701                                  ; 16/10/2022
 10702                                  
 10703                                  ; ==========================================================================
 10704                                  ;**	GetDeviceParameters:
 10705                                  ;
 10706                                  ;	GetDeviceParameters implements the generic ioctl function:
 10707                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 10708                                  ;
 10709                                  ;	ENTRY	(ES:di) = BDS for drive
 10710                                  ;		PtrSav = long pointer to request header
 10711                                  ;	EXIT	??? BUGBUG
 10712                                  ;	USES	??? BUGBUG
 10713                                  ; ==========================================================================
 10714                                  
 10715                                  		; 19/10/2022
 10716                                  GetDeviceParameters:
 10717                                  		; Copy info from bds to the device parameters packet
 10718                                  
 10719 00000C81 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10720 00000C85 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10721                                  					; (DS:BX) = return buffer
 10722 00000C88 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 10723 00000C8C 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10724 00000C8F 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 10725 00000C93 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 10726                                  					; Mask off other bits
 10727 00000C96 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10728 00000C99 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 10729 00000C9D 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10730 00000CA0 30C0                    		xor	al, al		; Set media type to default
 10731 00000CA2 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 10732                                  					
 10733                                  		; copy recommended bpb
 10734 00000CA5 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 10735 00000CA8 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10736                                  					; BUILD_DEVICE_BPB
 10737 00000CAB 7412                    		jz	short UseBpbPresent
 10738 00000CAD 1E                      		push	ds		; Save request packet segment
 10739 00000CAE 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10740                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10741                                  					; 2C7h:30h = 70h:25A0h
 10742                                  					; Point back to Bios_Data
 10743 00000CB3 E885FB                  		call	checksingle
 10744 00000CB6 E83EF9                  		call	GetBp		; Build	the bpb	from scratch
 10745 00000CB9 1F                      		pop	ds		; Restore request packet segment
 10746 00000CBA 720F                    		jb	short GetParmRet
 10747 00000CBC 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 10748                                  					; Use this subfield of bds instead
 10749                                  UseBpbPresent:				
 10750 00000CBF 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 10751                                  					; This is where	the result goes
 10752 00000CC2 B91900                  		mov	cx, 25		; A_BPB.size - 6
 10753                                  					; For now use 'small' bpb
 10754 00000CC5 1E                      		push	ds		; reverse segments for copy
 10755 00000CC6 06                      		push	es
 10756 00000CC7 1F                      		pop	ds
 10757 00000CC8 07                      		pop	es
 10758 00000CC9 F3A4                    		rep movsb
 10759                                  		
 10760                                  		; 12/12/2022
 10761                                  		; cf=0 (test instruction -above- resets cf) 	
 10762                                  		;clc
 10763                                  GetParmRet:				
 10764 00000CCB C3                      		retn
 10765                                  ; ---------------------------------------------------------------------------
 10766                                  
 10767                                  ; 17/10/2022
 10768                                  ; 16/10/2022
 10769                                  
 10770                                  ; ==========================================================================
 10771                                  ; SetDeviceParameters:
 10772                                  ;
 10773                                  ; input: ES:di points to bds for drive
 10774                                  ; ==========================================================================
 10775                                  
 10776                                  		; 19/10/2022
 10777                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 10778 00000CCC C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10779 00000CD0 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10780 00000CD3 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 10781                                  					; fchanged_by_format|fchanged
 10782 00000CD9 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10783                                  					; ONLY_SET_TRACKLAYOUT
 10784 00000CDC 7579                    		jnz	short setTrackTable
 10785 00000CDE 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10786 00000CE1 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 10787 00000CE5 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10788 00000CE8 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 10789 00000CEC 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10790 00000CEF 1E                      		push	ds
 10791                                  		; 17/10/2022
 10792 00000CF0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10793                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10794                                  					; 2C7h:30h = 70h:25A0h
 10795                                  		;cmp	byte [fhave96], 0
 10796 00000CF5 803E[7700]00            		cmp	byte [fhave96], 0
 10797 00000CFA 1F                      		pop	ds
 10798 00000CFB 7502                    		jnz	short HaveChange ; we have changeline support
 10799                                  		; 10/12/2022
 10800 00000CFD 24FD                    		and	al, 0FDh
 10801                                  		;and	ax, 0FFFDh	; ~fchangeline
 10802                                  
 10803                                  		; Ignore all bits except non_removable and changeline
 10804                                  HaveChange:				
 10805 00000CFF 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 10806 00000D02 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 10807 00000D06 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 10808 00000D0A 09C8                    		or	ax, cx
 10809 00000D0C 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 10810 00000D10 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 10811                                  					; Set media type
 10812 00000D13 1E                      		push	ds
 10813 00000D14 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10814                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10815 00000D19 A2[3706]                		mov	[mediatype], al
 10816                                  		;mov	ds:mediatype, al
 10817 00000D1C 1F                      		pop	ds
 10818                                  
 10819                                  		; The media changed (maybe) so we will have to do a set dasd
 10820                                  		; the next time we format a track
 10821                                  
 10822                                  		; 10/12/2022
 10823 00000D1D 26804D2380              		or	byte [es:di+35], 80h
 10824                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 10825                                  					; set_dasd_true
 10826 00000D22 57                      		push	di		; Save bds pointer
 10827                                  
 10828                                  		; Figure out what we are supposed to do with the bpb
 10829                                  		; were we asked to install a fake bpb?
 10830                                  
 10831 00000D23 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10832                                  					; INSTALL_FAKE_BPB
 10833 00000D26 7514                    		jnz	short InstallFakeBpb
 10834                                  
 10835                                  		; were we returning a fake bpb when asked to build a bpb?
 10836                                  
 10837                                  		; 10/12/2022
 10838 00000D28 26F6452304              		test	byte [es:di+35], 4
 10839                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 10840                                  					; return_fake_bpb
 10841 00000D2D 7405                    		jz	short InstallRecommendedBpb
 10842                                  
 10843                                  		; we were returning a fake bpb but we can stop now
 10844                                  
 10845                                  		; 10/12/2022
 10846 00000D2F 26806523FB              		and	byte [es:di+35], 0FBh
 10847                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 10848                                  					; ~return_fake_bpb
 10849                                  InstallRecommendedBpb:			
 10850 00000D34 B91F00                  		mov	cx, 31		; A_BPB.size
 10851 00000D37 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 10852 00000D3A EB0B                    		jmp	short CopyTheBpb
 10853                                  ; ---------------------------------------------------------------------------
 10854                                  
 10855                                  InstallFakeBpb:
 10856                                  		; 10/12/2022
 10857 00000D3C 26804D2304              		or	byte [es:di+35], 4				
 10858                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 10859                                  					; return_fake_bpb
 10860 00000D41 B91900                  		mov	cx, 25		; A_BPB.size - 6
 10861                                  					; move 'smaller' bpb
 10862 00000D44 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 10863                                  
 10864                                  CopyTheBpb:				
 10865 00000D47 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 10866 00000D4A F3A4                    		rep movsb
 10867 00000D4C 1E                      		push	ds		; Save packet segment
 10868                                  		; 17/10/2022
 10869 00000D4D 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10870                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10871                                  					; Setup	for ds -> Bios_Data
 10872 00000D52 E8DA03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 10873 00000D55 1F                      		pop	ds		; Restore packet segment
 10874 00000D56 5F                      		pop	di		; Restore bds pointer
 10875                                  setTrackTable:				
 10876 00000D57 8B4F26                  		mov	cx, [bx+38]
 10877 00000D5A 1E                      		push	ds
 10878 00000D5B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10879 00000D60 890E[3905]              		mov	[sectorspertrack], cx
 10880 00000D64 1F                      		pop	ds
 10881                                  		; 10/12/2022
 10882 00000D65 26806523F7              		and	byte [es:di+35], 0F7h
 10883                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 10884                                  					; ~good_tracklayout
 10885 00000D6A F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10886                                  					; TRACKLAYOUT_IS_GOOD
 10887 00000D6D 7405                    		jz	short UglyTrackLayOut
 10888                                  		; 10/12/2022
 10889 00000D6F 26804D2308              		or	byte [es:di+35], 8
 10890                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 10891                                  					; good_tracklayout
 10892                                  UglyTrackLayOut:			
 10893 00000D74 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 10894 00000D77 771A                    		ja	short TooManyPerTrack
 10895                                  		;jcxz	short SectorInfoSaved
 10896 00000D79 E316                    		jcxz	SectorInfoSaved	; 19/10/2022
 10897 00000D7B BF[3B05]                		mov	di, tracktable
 10898 00000D7E 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 10899                                  		; 17/10/2022
 10900 00000D81 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 10901                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10902                                  					; Trash	our bds	pointer
 10903                                  StoreSectorInfo:			
 10904 00000D86 47                      		inc	di
 10905 00000D87 47                      		inc	di		; Skip over cylinder and head
 10906 00000D88 AD                      		lodsw			; Get sector id
 10907 00000D89 AA                      		stosb			; Copy it
 10908 00000D8A AD                      		lodsw			; Get sector size
 10909 00000D8B E8E301                  		call	SectSizeToSectIndex
 10910 00000D8E AA                      		stosb			; Store	sector SIZE index
 10911 00000D8F E2F5                    		loop	StoreSectorInfo
 10912                                  SectorInfoSaved:			
 10913 00000D91 F8                      		clc
 10914 00000D92 C3                      		retn
 10915                                  ; ---------------------------------------------------------------------------
 10916                                  
 10917                                  TooManyPerTrack:			
 10918 00000D93 B00C                    		mov	al, 0Ch
 10919 00000D95 F9                      		stc
 10920 00000D96 C3                      		retn
 10921                                  ; ---------------------------------------------------------------------------
 10922                                  
 10923                                  ; 16/10/2022
 10924                                  
 10925                                  ; ==========================================================================
 10926                                  ; FormatTrack:
 10927                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 10928                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 10929                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 10930                                  ;
 10931                                  ; input: ES:di points to bds for drive
 10932                                  ;
 10933                                  ; output:
 10934                                  ;	for status call:
 10935                                  ;	specialfunction byte set to:
 10936                                  ;		0 - rom support + legal combination
 10937                                  ;		1 - no rom support
 10938                                  ;		2 - illegal combination
 10939                                  ;		3 - no media present
 10940                                  ;	carry cleared.
 10941                                  ;
 10942                                  ;	for format track:
 10943                                  ;		carry set if error
 10944                                  ;
 10945                                  ; ==========================================================================
 10946                                  
 10947                                  ; 16/03/2019
 10948                                  
 10949                                  		; 19/10/2022
 10950                                  FormatTrack:
 10951 00000D97 C51E[1200]              		lds	bx, [ptrsav]
 10952 00000D9B C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 10953 00000D9E F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10954                                  					; STATUS_FOR_FORMAT
 10955 00000DA1 740E                    		jz	short DoFormatTrack
 10956 00000DA3 1E                      		push	ds
 10957                                  		; 17/10/2022
 10958 00000DA4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10959                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10960 00000DA9 E83902                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 10961 00000DAC 1F                      		pop	ds
 10962 00000DAD 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10963 00000DAF F8                      		clc
 10964 00000DB0 C3                      		retn
 10965                                  ; ---------------------------------------------------------------------------
 10966                                  
 10967                                  DoFormatTrack:				
 10968 00000DB1 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 10969                                  					; DEV_HARDDISK
 10970 00000DB6 7508                    		jnz	short DoFormatDiskette
 10971                                  		; 17/10/2022
 10972 00000DB8 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10973                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10974                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 10975 00000DBD E99C00                  		jmp	VerifyTrack
 10976                                  ; ---------------------------------------------------------------------------
 10977                                  
 10978                                  DoFormatDiskette:			
 10979 00000DC0 8B4F01                  		mov	cx, [bx+1]
 10980 00000DC3 8B5703                  		mov	dx, [bx+3]
 10981 00000DC6 F60702                  		test	byte [bx], 2
 10982                                  		; 17/10/2022
 10983 00000DC9 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10984                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10985                                  					; Setup	ds-> Bios_Data for verify
 10986 00000DCE 7403                    		jz	short DoFormatDiskette_1
 10987 00000DD0 E9E400                  		jmp	VerifyTrack_Err
 10988                                  ; ---------------------------------------------------------------------------
 10989                                  
 10990                                  DoFormatDiskette_1:			
 10991 00000DD3 E80F02                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 10992 00000DD6 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 10993 00000DD8 7406                    		jz	short NeedToSetDasd ; Old rom
 10994 00000DDA 3C03                    		cmp	al, 3		; Time out error?
 10995 00000DDC 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 10996                                  					; about	the illegal combination)
 10997 00000DDE EB67                    		jmp	short FormatFailed
 10998                                  ; ---------------------------------------------------------------------------
 10999                                  
 11000                                  NeedToSetDasd:				
 11001 00000DE0 52                      		push	dx
 11002 00000DE1 E8A001                  		call	SetDasd		; INT 13h, AH=17h
 11003 00000DE4 5A                      		pop	dx
 11004                                  NoSetDasd:				
 11005 00000DE5 E853FA                  		call	checksingle	; Do any needed	diskette swapping
 11006 00000DE8 89D0                    		mov	ax, dx		; Get track from packet
 11007 00000DEA A3[3901]                		mov	[trknum], ax
 11008 00000DED 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11009 00000DF1 88CC                    		mov	ah, cl
 11010 00000DF3 BB[3B05]                		mov	bx, tracktable
 11011 00000DF6 8B0E[3905]              		mov	cx, [sectorspertrack]
 11012                                  
 11013                                  StoreCylinderHead:			
 11014 00000DFA 8907                    		mov	[bx], ax	; Store	into TrackTable
 11015 00000DFC 83C304                  		add	bx, 4		; Skip to next sector field
 11016 00000DFF E2F9                    		loop	StoreCylinderHead
 11017 00000E01 B90500                  		mov	cx, 5		; MAXERR - Set up retry	count
 11018                                  FormatRetry:				
 11019 00000E04 51                      		push	cx
 11020 00000E05 BB[3B05]                		mov	bx, tracktable
 11021 00000E08 A0[3905]                		mov	al, [sectorspertrack]
 11022 00000E0B B405                    		mov	ah, 5		; romformat
 11023 00000E0D 8C1E[3705]              		mov	[xfer_seg], ds
 11024 00000E11 E87F02                  		call	ToRom
 11025 00000E14 59                      		pop	cx
 11026 00000E15 7216                    		jb	short FormatError
 11027 00000E17 51                      		push	cx		; Now verify the sectors just formatted.
 11028                                  					; NOTE:	because	of bug in some BIOSes we have to
 11029                                  					;	set ES:BX to 00:00
 11030 00000E18 53                      		push	bx
 11031 00000E19 31DB                    		xor	bx, bx
 11032 00000E1B 891E[3705]              		mov	[xfer_seg], bx
 11033 00000E1F A0[3905]                		mov	al, [sectorspertrack]
 11034 00000E22 B404                    		mov	ah, 4		; romverify
 11035 00000E24 B101                    		mov	cl, 1
 11036 00000E26 E86A02                  		call	ToRom
 11037 00000E29 5B                      		pop	bx
 11038 00000E2A 59                      		pop	cx
 11039 00000E2B 7329                    		jnb	short FormatOk
 11040                                  FormatError:				
 11041 00000E2D E84B02                  		call	ResetDisk
 11042 00000E30 C606[3906]01            		mov	byte [had_format_error], 1
 11043 00000E35 50                      		push	ax
 11044 00000E36 51                      		push	cx
 11045 00000E37 52                      		push	dx
 11046 00000E38 E8AA01                  		call	SetMediaForFormat
 11047 00000E3B 3C01                    		cmp	al, 1
 11048 00000E3D 7503                    		jnz	short WhileErr
 11049 00000E3F E84201                  		call	SetDasd
 11050                                  WhileErr:				
 11051 00000E42 5A                      		pop	dx
 11052 00000E43 59                      		pop	cx
 11053 00000E44 58                      		pop	ax
 11054 00000E45 E2BD                    		loop	FormatRetry
 11055                                  FormatFailed:				
 11056 00000E47 C606[3906]01            		mov	byte [had_format_error], 1
 11057                                  					; Set the format error flag
 11058 00000E4C 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11059 00000E4F 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11060 00000E51 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11061                                  DoMapIt:				
 11062 00000E53 E97AFD                  		jmp	maperror
 11063                                  ; ---------------------------------------------------------------------------
 11064                                  
 11065                                  FormatOk:				
 11066 00000E56 C606[3906]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11067 00000E5B C3                      		retn
 11068                                  ; ---------------------------------------------------------------------------
 11069                                  
 11070                                  ; 16/10/2022
 11071                                  
 11072                                  ; ==========================================================================
 11073                                  ;
 11074                                  ; VerifyTrack:
 11075                                  ;
 11076                                  ; input: ES:di points to bds for drive
 11077                                  ; ==========================================================================
 11078                                  
 11079                                  VerifyTrack:				
 11080 00000E5C 1E                      		push	ds
 11081 00000E5D C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11082 00000E61 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11083                                  
 11084                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11085                                  
 11086 00000E64 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11087 00000E67 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11088 00000E6A 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11089 00000E6D 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11090                                  					; Get option flag word
 11091 00000E6F 1F                      		pop	ds
 11092 00000E70 C606[2001]04            		mov	byte [rflag], 4	; romverify
 11093 00000E75 890E[3301]              		mov	[curtrk], cx
 11094 00000E79 A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 11095 00000E7C 8B0E[3905]              		mov	cx, [sectorspertrack]
 11096                                  
 11097                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 11098                                  		; specified if not we should go to the normal track verification
 11099                                  		; routine. If fast format has been specified we should get the
 11100                                  		; number of tracks to be verified and check it to see if it is
 11101                                  		; > 255. If it is then it is an error and we should go to
 11102                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 11103                                  		; sectors per track to get the total number of sectors to be
 11104                                  		; verified. This should also be less than equal to 255
 11105                                  		; otherwise we go to same error exit. If everything is okay
 11106                                  		; we initalise cx to the total sectors. use ax as a temporary
 11107                                  		; register.
 11108                                  
 11109                                  					; Special function requested?	
 11110 00000E80 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 11111 00000E83 7421                    		jz	short NormVerifyTrack
 11112 00000E85 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 11113 00000E87 08E4                    		or	ah, ah
 11114 00000E89 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 11115 00000E8B F6E1                    		mul	cl
 11116 00000E8D 08E4                    		or	ah, ah
 11117 00000E8F 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 11118 00000E91 89C1                    		mov	cx, ax
 11119                                  		; 10/12/2022
 11120 00000E93 26F6452301              		test	byte [es:di+35], 1
 11121                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11122                                  					; fnon_removable
 11123 00000E98 740C                    		jz	short NormVerifyTrack
 11124                                  					; Multitrack operation = on?
 11125                                  		; 10/12/2022
 11126                                  		; 19/10/2022
 11127 00000E9A F606[2F05]80            		test	byte [multrk_flag], 80h
 11128                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11129                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 11130 00000E9F 7405                    		jz	short NormVerifyTrack
 11131 00000EA1 C606[3605]01            		mov	byte [multitrk_format_flag], 1
 11132                                  NormVerifyTrack:			
 11133 00000EA6 31C0                    		xor	ax, ax		; 1st sector
 11134 00000EA8 31DB                    		xor	bx, bx
 11135 00000EAA 891E[3705]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 11136 00000EAE E83F00                  		call	TrackIo
 11137 00000EB1 C606[3605]00            		mov	byte [multitrk_format_flag], 0
 11138 00000EB6 C3                      		retn
 11139                                  ; ---------------------------------------------------------------------------
 11140                                  
 11141                                  VerifyTrack_Err:			
 11142 00000EB7 B401                    		mov	ah, 1
 11143 00000EB9 E914FD                  		jmp	maperror
 11144                                  ; ---------------------------------------------------------------------------
 11145                                  
 11146                                  ; 16/10/2022
 11147                                  
 11148                                  ; ==========================================================================
 11149                                  ;
 11150                                  ; ReadTrack:
 11151                                  ;
 11152                                  ; input: ES:di points to bds for drive
 11153                                  ;
 11154                                  ; ==========================================================================
 11155                                  
 11156                                  ReadTrack:				
 11157 00000EBC C606[2001]02            		mov	byte [rflag], 2	; romread
 11158 00000EC1 EB05                    		jmp	short ReadWriteTrack
 11159                                  ; ---------------------------------------------------------------------------
 11160                                  
 11161                                  WriteTrack:
 11162                                  
 11163                                  ; ==========================================================================
 11164                                  ;
 11165                                  ; WriteTrack:
 11166                                  ;
 11167                                  ; input: ES:di points to bds for drive
 11168                                  ;
 11169                                  ; ==========================================================================
 11170                                  				
 11171 00000EC3 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11172                                  
 11173                                  		; Fall into ReadWriteTrack
 11174                                  
 11175                                  ; ==========================================================================
 11176                                  ;
 11177                                  ; readWriteTrack:
 11178                                  ;
 11179                                  ; input:
 11180                                  ;    ES:di points to bds for drive
 11181                                  ;    rFlag - 2 for read,3 for write
 11182                                  ;
 11183                                  ; ==========================================================================
 11184                                  
 11185                                  ReadWriteTrack:	
 11186                                  		; save bds pointer segment so we can use it to access
 11187                                  		; our packet. Notice that this is not the standard register
 11188                                  		; assignment for accessing packets
 11189                                  		
 11190                                  		; 19/10/2022	
 11191 00000EC8 06                      		push	es
 11192 00000EC9 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 11193 00000ECD 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11194 00000ED1 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 11195 00000ED5 A3[3301]                		mov	[curtrk], ax
 11196 00000ED8 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 11197 00000EDC A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 11198 00000EDF 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 11199 00000EE3 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 11200 00000EE7 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 11201                                  					; Get transfer address
 11202                                  
 11203                                  		; we just trashed our packet address, but we no longer care
 11204                                  
 11205 00000EEB 8C06[3705]              		mov	[xfer_seg], es	; Pass transfer	segment
 11206 00000EEF 07                      		pop	es
 11207                                  
 11208                                  		; Fall into TrackIo
 11209                                  
 11210                                  ; =============== S U B	R O U T	I N E =======================================
 11211                                  
 11212                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11213                                  
 11214                                  ; ==========================================================================
 11215                                  ;
 11216                                  ; TrackIo:
 11217                                  ;    performs track read/write/verify
 11218                                  ;
 11219                                  ;   input:
 11220                                  ;      rFlag	- 2 = read
 11221                                  ;		  3 = write
 11222                                  ;		  4 = verify
 11223                                  ;      AX	- Index into track table of first sector to io
 11224                                  ;      CX	- Number of sectors to io
 11225                                  ;      Xfer_Seg:BX - Transfer address
 11226                                  ;      ES:DI	- Pointer to bds
 11227                                  ;      CurTrk	- Current cylinder
 11228                                  ;      CurHd	- Current head
 11229                                  ;
 11230                                  ; ==========================================================================
 11231                                  
 11232                                  ; 16/03/2019 - Retro DOS v4.0
 11233                                  		
 11234                                  		; 19/10/2022
 11235                                  TrackIo:	
 11236                                  					; Procedure `disk' will pop stack to
 11237 00000EF0 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 11238 00000EF4 E844F9                  		call	checksingle	; Ensure correct disk is in drv
 11239 00000EF7 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11240                                  					; See if we have already set	disk
 11241 00000EFC 7407                    		jz	short Dptalreadyset ; base table
 11242 00000EFE 50                      		push	ax		; set up tables	and variables for i/o
 11243 00000EFF 51                      		push	cx
 11244 00000F00 E896FA                  		call	iosetup
 11245 00000F03 59                      		pop	cx
 11246 00000F04 58                      		pop	ax
 11247                                  Dptalreadyset:				; Point si at the table entry of the			
 11248 00000F05 BE[3B05]                		mov	si, tracktable	; first sector to be io'd
 11249 00000F08 D1E0                    		shl	ax, 1
 11250 00000F0A D1E0                    		shl	ax, 1
 11251 00000F0C 01C6                    		add	si, ax
 11252                                  
 11253                                  		; WE WANT:
 11254                                  		; CX to	be the number of times we have to loop
 11255                                  		; DX to	be the number of sectors we read on each iteration
 11256                                  		
 11257 00000F0E BA0100                  		mov	dx, 1
 11258                                  		; 12/12/2022
 11259 00000F11 26F6452308              		test	byte [es:di+23h], 8
 11260                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 11261                                  					; good_tracklayout
 11262 00000F16 7402                    		jz	short ionextsector
 11263                                  		
 11264 00000F18 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 11265                                  ionextsector:				
 11266 00000F1A 51                      		push	cx
 11267 00000F1B 52                      		push	dx
 11268 00000F1C 46                      		inc	si
 11269 00000F1D 46                      		inc	si		; Skip over the	cylinder and head in
 11270                                  					; the track table
 11271 00000F1E AC                      		lodsb			; Get sector ID	from track table
 11272 00000F1F A2[3101]                		mov	[cursec], al
 11273                                  
 11274                                  		; assumptions for a fixed disk multi-track disk	i/o
 11275                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 11276                                  		;     only CL is valid.
 11277                                  		; 2). Sector size should be set	to 512 bytes.
 11278                                  		; 3). Good track layout
 11279                                  		
 11280                                  		; 12/12/2022
 11281 00000F22 26F6452301              		test	byte [es:di+23h], 1
 11282                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11283                                  					; fnon_removable ; Fixed disk?
 11284 00000F27 7414                    		jz	short IoRemovable ; No
 11285                                  		; 12/12/2022
 11286 00000F29 F606[2F05]80            		test	byte [multrk_flag], 80h
 11287                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11288                                  						; Allow multi-track operation?
 11289 00000F2E 740D                    		jz	short IoRemovable ; No,don't do that.
 11290 00000F30 8916[2201]              		mov	[seccnt], dx
 11291 00000F34 89D0                    		mov	ax, dx
 11292 00000F36 E81DFB                  		call	Disk
 11293 00000F39 5A                      		pop	dx
 11294 00000F3A 59                      		pop	cx
 11295 00000F3B F8                      		clc
 11296 00000F3C C3                      		retn
 11297                                  ; ---------------------------------------------------------------------------
 11298                                  
 11299                                  IoRemovable:				
 11300 00000F3D AC                      		lodsb			; Get sector size index	from track
 11301                                  					; table	and save it
 11302 00000F3E 50                      		push	ax
 11303 00000F3F 56                      		push	si
 11304 00000F40 1E                      		push	ds		; Save Bios_Data
 11305 00000F41 50                      		push	ax
 11306 00000F42 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 11307                                  					; Fetch	EOT while ds-> Bios_Data
 11308 00000F46 C536[2D01]              		lds	si, [dpt]
 11309 00000F4A 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 11310 00000F4D 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 11311 00000F50 58                      		pop	ax
 11312 00000F51 1F                      		pop	ds
 11313 00000F52 88D0                    		mov	al, dl
 11314 00000F54 A3[2201]                		mov	[seccnt], ax
 11315 00000F57 E8FCFA                  		call	Disk
 11316 00000F5A 5E                      		pop	si		; Advance buffer pointer by adding
 11317                                  					; sector size
 11318 00000F5B 58                      		pop	ax
 11319 00000F5C E81D00                  		call	SectorSizeIndexToSectorSize
 11320 00000F5F 01C3                    		add	bx, ax
 11321 00000F61 5A                      		pop	dx
 11322 00000F62 59                      		pop	cx
 11323 00000F63 E2B5                    		loop	ionextsector
 11324 00000F65 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11325                                  		;jz	short NoNeedDone
 11326                                  		; 12/12/2022
 11327 00000F6A 7404                    		je	short NoNeedDone2
 11328 00000F6C E872FA                  		call	done		; set time of last access, and reset
 11329                                  					; entries in Dpt.
 11330                                  NoNeedDone:				
 11331 00000F6F F8                      		clc
 11332                                  NoNeedDone2:
 11333 00000F70 C3                      		retn
 11334                                  
 11335                                  ; =============== S U B	R O U T	I N E =======================================
 11336                                  
 11337                                  ; ---------------------------------------------------------------------------
 11338                                  ;
 11339                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 11340                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 11341                                  ; are permissible.
 11342                                  ;
 11343                                  ; On Input   AX contains sector size in bytes
 11344                                  ; On Output  AL Contains index
 11345                                  ; All other registers preserved
 11346                                  ;
 11347                                  ; ---------------------------------------------------------------------------
 11348                                  
 11349                                  SectSizeToSectIndex:	
 11350 00000F71 80FC02                  		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11351                                  					; examine upper	byte only
 11352 00000F74 7703                    		ja	short OneK
 11353 00000F76 88E0                    		mov	al, ah		; value	in AH is the index!
 11354 00000F78 C3                      		retn
 11355                                  ; ---------------------------------------------------------------------------
 11356                                  
 11357                                  OneK:					
 11358 00000F79 B003                    		mov	al, 3
 11359 00000F7B C3                      		retn
 11360                                  
 11361                                  ; =============== S U B	R O U T	I N E =======================================
 11362                                  
 11363                                  
 11364                                  SectorSizeIndexToSectorSize:
 11365 00000F7C 88C1                    		mov	cl, al
 11366 00000F7E B88000                  		mov	ax, 128
 11367 00000F81 D3E0                    		shl	ax, cl
 11368 00000F83 C3                      		retn
 11369                                  
 11370                                  ; =============== S U B	R O U T	I N E =======================================
 11371                                  
 11372                                  ; 16/10/2022
 11373                                  
 11374                                  ; ---------------------------------------------------------------------------
 11375                                  ;
 11376                                  ; SetDASD
 11377                                  ;
 11378                                  ; Set up the rom for formatting.
 11379                                  ; we have to tell the rom bios what type of disk is in the drive.
 11380                                  ;
 11381                                  ; On Input   - ES:di - Points to bds
 11382                                  ;
 11383                                  ; ---------------------------------------------------------------------------
 11384                                  
 11385                                  		; 19/10/2022
 11386                                  SetDasd:	
 11387 00000F84 803E[3906]01            		cmp	byte [had_format_error], 1 ;
 11388                                  					; See if we've previously set dasd type
 11389 00000F89 740C                    		jz	short DoSetDasd
 11390                                  		; 10/12/2022
 11391 00000F8B 26F6452380              		test	byte [es:di+23h], 80h
 11392                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 11393                                  					; set_dasd_true
 11394 00000F90 744A                    		jz	short DasdHasBeenSet
 11395                                  		; 10/12/2022
 11396 00000F92 268065237F              		and	byte [es:di+23h], 7Fh
 11397                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 11398                                  					; ~set_dasd_true
 11399                                  DoSetDasd:				
 11400 00000F97 C606[3906]00            		mov	byte [had_format_error], 0 ; Reset it
 11401 00000F9C C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 11402 00000FA1 B004                    		mov	al, 4
 11403 00000FA3 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11404                                  					; DEV_3INCH720KB
 11405 00000FA8 741A                    		jz	short DoSet
 11406 00000FAA 26807D2201              		cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 11407                                  					; DEV_5INCH96TPI
 11408 00000FAF 7404                    		jz	short GotBig
 11409 00000FB1 B001                    		mov	al, 1
 11410 00000FB3 EB0F                    		jmp	short DoSet
 11411                                  ; ---------------------------------------------------------------------------
 11412                                  
 11413                                  GotBig:					
 11414 00000FB5 B002                    		mov	al, 2		; 160/320k in a	1.2 meg	drive
 11415 00000FB7 803E[3706]00            		cmp	byte [mediatype], 0
 11416 00000FBC 7506                    		jnz	short DoSet
 11417                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 11418                                  		; 10/12/2022
 11419                                  		;inc	al  ; al = 3
 11420                                  		; 18/12/2022
 11421 00000FBE 40                      		inc	ax  ; al = 3
 11422 00000FBF C606[3B01]54            		mov	byte [gap_patch], 54h
 11423                                  DoSet:					
 11424 00000FC4 1E                      		push	ds
 11425 00000FC5 56                      		push	si
 11426 00000FC6 8E1E[1A00]              		mov	ds, [zeroseg]	; Point	to interrupt vectors
 11427                                  
 11428 00000FCA C5367800                		lds	si, [DSKADR]
 11429                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 11430                                  		;;lds	si, ds:78h		
 11431                                  
 11432 00000FCE C644090F                		mov	byte [si+9], 0Fh ;
 11433                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 11434 00000FD2 5E                      		pop	si
 11435 00000FD3 1F                      		pop	ds
 11436 00000FD4 B417                    		mov	ah, 17h
 11437 00000FD6 268A5504                		mov	dl, [es:di+4]
 11438 00000FDA CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 11439                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 11440                                  DasdHasBeenSet:				
 11441 00000FDC 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 11442 00000FE0 8826[3701]              		mov	[formt_eot], ah
 11443 00000FE4 C3                      		retn
 11444                                  
 11445                                  ; =============== S U B	R O U T	I N E =======================================
 11446                                  
 11447                                  ; 16/10/2022
 11448                                  
 11449                                  ; ---------------------------------------------------------------------------
 11450                                  ;
 11451                                  ; Set Media Type for Format
 11452                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 11453                                  ; BPB area in the BDS can be handled by the rom.
 11454                                  ; On Input, ES:DI -> current BDS.
 11455                                  ; The status of the operation is returned in AL
 11456                                  ;
 11457                                  ;	- 0 - if the support is available,and the combination is valid.
 11458                                  ;	- 1 - no rom support
 11459                                  ;	- 2 - illegal combination
 11460                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 11461                                  ;
 11462                                  ; Flags also may be altered. All other registers preserved.
 11463                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 11464                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 11465                                  ; to the one returned. the original pointer to the disk base table is stored
 11466                                  ; in TempDpt, until it is restored.
 11467                                  ;
 11468                                  ; ---------------------------------------------------------------------------
 11469                                  
 11470                                  		; 19/10/2022
 11471                                  SetMediaForFormat:	
 11472 00000FE5 51                      		push	cx
 11473 00000FE6 52                      		push	dx
 11474                                  
 11475                                  		; If we have a format error, then do not change Dpt, TempDpt.
 11476                                  		; but we need to call int 13h, ah=18h again.
 11477                                  
 11478 00000FE7 803E[3906]01            		cmp	byte [had_format_error], 1
 11479 00000FEC 7425                    		jz	short SkipSaveDskAdr
 11480 00000FEE 30C0                    		xor	al, al		; If already done return 0
 11481 00000FF0 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11482 00000FF5 7502                    		jnz	short DoSetMediaForFormat
 11483 00000FF7 EB7F                    		jmp	SetMediaRet	; Media	already	set
 11484                                  ; ---------------------------------------------------------------------------
 11485                                  
 11486                                  DoSetMediaForFormat:			
 11487 00000FF9 06                      		push	es
 11488 00000FFA 56                      		push	si
 11489 00000FFB 8E06[1A00]              		mov	es, [zeroseg]	; Point to interrupt vectors
 11490 00000FFF 26C4367800              		les	si, [es:DSKADR]
 11491                                  		;les	si, es:78h	; [es:DSKADR]
 11492                                  					; Get pointer to disk base table
 11493 00001004 8936[2D01]              		mov	[dpt], si
 11494 00001008 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11495                                  
 11496                                  		; Initialize the head settle time to 0Fh. See the offsets
 11497                                  		; given in dskprm.inc.
 11498                                  
 11499 0000100C 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11500 00001011 5E                      		pop	si
 11501 00001012 07                      		pop	es
 11502                                  
 11503                                  SkipSaveDskAdr:				
 11504 00001013 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 11505 00001017 49                      		dec	cx
 11506 00001018 80E503                  		and	ch, 3
 11507 0000101B D0CD                    		ror	ch, 1
 11508 0000101D D0CD                    		ror	ch, 1
 11509 0000101F 86E9                    		xchg	ch, cl
 11510 00001021 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 11511 00001025 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 11512 00001029 06                      		push	es
 11513 0000102A 1E                      		push	ds
 11514 0000102B 56                      		push	si
 11515 0000102C 57                      		push	di
 11516 0000102D B418                    		mov	ah, 18h
 11517 0000102F CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 11518                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 11519 00001031 7233                    		jb	short FormaStatErr
 11520 00001033 803E[3906]01            		cmp	byte [had_format_error], 1
 11521 00001038 7425                    		jz	short skip_disk_base_setting
 11522 0000103A 06                      		push	es		; Save segment returned	by the rom
 11523 0000103B 8E06[1A00]              		mov	es, [zeroseg]	; Point	to interrupt vector segment
 11524 0000103F 26C4367800              		les	si, [es:DSKADR]
 11525                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 11526                                  					; Get current disk base	table
 11527 00001044 8936[3A06]              		mov	[tempdpt], si
 11528 00001048 8C06[3C06]              		mov	[tempdpt+2], es ; Save it
 11529 0000104C 8E06[1A00]              		mov	es, [zeroseg]
 11530                                  		;mov	es:78h,	di
 11531 00001050 26893E7800              		mov	[es:DSKADR], di
 11532                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 11533 00001055 268F067A00              		pop	word [es:DSKADR+2]
 11534 0000105A C606[3806]01            		mov	byte [media_set_for_format], 1
 11535                                  skip_disk_base_setting:			
 11536 0000105F 30C0                    		xor	al, al		; Legal	combination + rom support code
 11537                                  		;mov	ds:had_format_error, al	; Reset	the flag
 11538 00001061 A2[3906]                		mov	[had_format_error], al
 11539 00001064 EB0E                    		jmp	short PopStatRet
 11540                                  ; ---------------------------------------------------------------------------
 11541                                  
 11542                                  FormaStatErr:
 11543                                  		; 10/12/2022
 11544 00001066 B003                    		mov	al, 3
 11545                                  				
 11546 00001068 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 11547                                  					; Illegal combination =	0Ch
 11548 0000106B 7406                    		jz	short FormatStatIllegalComb
 11549 0000106D 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 11550 00001070 7402                    		jz	short FormatStatTimeOut
 11551                                  		; 10/12/2022
 11552                                  		;dec	al
 11553                                  		; 18/12/2022
 11554 00001072 48                      		dec	ax
 11555                                  		; al = 2
 11556                                  		;mov	al, 1		; Function not supported.
 11557                                  		;jmp	short PopStatRet
 11558                                  ; ---------------------------------------------------------------------------
 11559                                  
 11560                                  FormatStatIllegalComb:
 11561                                  		; 10/12/2022
 11562                                  		;dec	al	; 3 -> 2 or 2 -> 1
 11563                                  		; 18/12/2022
 11564 00001073 48                      		dec	ax
 11565                                  		; al = 2				
 11566                                  		;mov	al, 2		; Function supported, but
 11567                                  					; Illegal sect/trk,trk combination.
 11568                                  		; 10/12/2022
 11569                                  		;jmp	short PopStatRet
 11570                                  ; ---------------------------------------------------------------------------
 11571                                  
 11572                                  FormatStatTimeOut:			
 11573                                  		; 10/12/2022
 11574                                  		; al = 3
 11575                                  		;mov	al, 3		; Function supported, but
 11576                                  					; Media	not present.
 11577                                  PopStatRet:				
 11578 00001074 5F                      		pop	di
 11579 00001075 5E                      		pop	si
 11580 00001076 1F                      		pop	ds
 11581 00001077 07                      		pop	es
 11582                                  SetMediaRet:				
 11583 00001078 5A                      		pop	dx
 11584 00001079 59                      		pop	cx
 11585 0000107A C3                      		retn
 11586                                  
 11587                                  ; =============== S U B	R O U T	I N E =======================================
 11588                                  
 11589                                  ; 16/10/2022
 11590                                  
 11591                                  ; ---------------------------------------------------------------------------
 11592                                  ;
 11593                                  ; RESET THE DRIVE
 11594                                  ;
 11595                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 11596                                  ; slow head settle time for the next operation. this is because the reset
 11597                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 11598                                  ; time around - there is a problem with 3.5" drives in that the head does
 11599                                  ; not settle down in time,even for read operations!!
 11600                                  ;
 11601                                  ; ---------------------------------------------------------------------------
 11602                                  
 11603                                  ResetDisk:	
 11604 0000107B 50                      		push	ax
 11605 0000107C 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11606                                  					; Reset while formatting?
 11607 00001081 7505                    		jnz	short ResetDisk_cont
 11608                                  					; Then verify operation in "fmt & vrfy"
 11609 00001083 C606[3906]01            		mov	byte [had_format_error], 1 ; Might have failed.
 11610                                  ResetDisk_cont:				
 11611 00001088 30E4                    		xor	ah, ah		; So signals that we had a format error
 11612 0000108A CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 11613                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 11614 0000108C C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 11615                                  					; Zap up the speed
 11616 00001091 58                      		pop	ax
 11617 00001092 C3                      		retn
 11618                                  
 11619                                  ; =============== S U B	R O U T	I N E =======================================
 11620                                  
 11621                                  ; 16/10/2022
 11622                                  
 11623                                  ; ---------------------------------------------------------------------------
 11624                                  ;
 11625                                  ; This routine sets up the drive parameter table with the values needed for
 11626                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 11627                                  ;
 11628                                  ; on entry  -	ES:DI - points to bds for the drive
 11629                                  ;		Xfer_Seg:BX - points to trkbuf
 11630                                  ;		AL    - number of sectors
 11631                                  ;		AH    - int 13 function code
 11632                                  ;		CL    - sector number for verify
 11633                                  ;		DS    - Bios_Data
 11634                                  ;
 11635                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 11636                                  ;		AX and flags are the results of the int 13
 11637                                  ;
 11638                                  ; ---------------------------------------------------------------------------
 11639                                  
 11640                                  		; 19/10/2022
 11641                                  ToRom:	
 11642 00001093 53                      		push	bx
 11643 00001094 56                      		push	si
 11644                                  
 11645                                  		; Compaq bug fix - check whether we are using new ROM
 11646                                  		; functionality to set up format, not merely if it exists.
 11647                                  		; This was formerly a check against [new_rom]
 11648                                  
 11649 00001095 F606[3806]01            		test	byte [media_set_for_format], 1
 11650 0000109A 7536                    		jnz	short GotValidDpt
 11651 0000109C 50                      		push	ax
 11652 0000109D 06                      		push	es		; Save bds segment
 11653 0000109E 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11654                                  					; ffSmall ; is it a 3.5" drive?
 11655 000010A3 9C                      		pushf			; (Save	the cmp	result)
 11656 000010A4 8E06[1A00]              		mov	es, [zeroseg]
 11657                                  		;les	si, es:78h	; Get pointer to disk base table
 11658 000010A8 26C4367800              		les	si, [es:DSKADR]
 11659                                  		;mov	word ptr ds:dpt, si
 11660                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 11661 000010AD 8936[2D01]              		mov	[dpt], si
 11662 000010B1 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11663                                  		
 11664 000010B5 A0[3701]                		mov	al, [formt_eot]
 11665 000010B8 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 11666 000010BC A0[3B01]                		mov	al, [gap_patch]
 11667 000010BF 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 11668                                  					; Important for	format
 11669 000010C3 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11670                                  					; Assume we are	doing a	seek operation
 11671                                  					; Setup	motor start correctly for 3.5" drives
 11672 000010C8 9D                      		popf			; Get result of	earlier	cmp
 11673 000010C9 7505                    		jnz	short MotorStrtOK
 11674 000010CB 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 11675                                  MotorStrtOK:				
 11676 000010D0 07                      		pop	es		; Restore bds segment
 11677 000010D1 58                      		pop	ax
 11678                                  GotValidDpt:				
 11679 000010D2 8B16[3901]              		mov	dx, [trknum]	; Set track number
 11680 000010D6 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 11681 000010D8 268A5504                		mov	dl, [es:di+4]	; Set drive number
 11682 000010DC 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 11683 000010E0 06                      		push	es		; Save bds segment
 11684 000010E1 8E06[3705]              		mov	es, [xfer_seg]
 11685 000010E5 CD13                    		int	13h		; DISK -
 11686 000010E7 07                      		pop	es		; Restore bds segment
 11687 000010E8 5E                      		pop	si
 11688 000010E9 5B                      		pop	bx
 11689 000010EA C3                      		retn
 11690                                  
 11691                                  ; ---------------------------------------------------------------------------
 11692                                  
 11693                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11694                                  
 11695                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 11696                                  
 11697                                  ; ==========================================================================
 11698                                  ;
 11699                                  ; get the owner of the physical drive represented by the logical drive in al.
 11700                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 11701                                  ; if this is not the case, the system may hang, just following the linked list.
 11702                                  ;
 11703                                  ; ==========================================================================
 11704                                  
 11705                                  		; 19/10/2022
 11706                                  ioctl_getown:
 11707 000010EB E8DDF3                  		call	SetDrive
 11708 000010EE 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 11709                                  					; Get physical drive number
 11710 000010F2 C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 11711                                  ownloop:				
 11712 000010F6 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 11713 000010FA 7507                    		jnz	short getnextBDS
 11714                                  		; 10/12/2022
 11715 000010FC 26F6452320              		test	byte [es:di+23h], 20h
 11716                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 11717                                  					; fi_own_physical
 11718 00001101 7515                    		jnz	short exitown
 11719                                  getnextBDS:				
 11720 00001103 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 11721 00001106 EBEE                    		jmp	short ownloop
 11722                                  ; ---------------------------------------------------------------------------
 11723                                  
 11724                                  ; ==========================================================================
 11725                                  ;
 11726                                  ; set the ownership of the physical drive represented by the logical drive
 11727                                  ; in al to al.
 11728                                  ;
 11729                                  ; ==========================================================================
 11730                                  
 11731                                  		; 19/10/2022
 11732                                  ioctl_setown:
 11733 00001108 E8C0F3                  		call	SetDrive
 11734 0000110B C606[7A00]01            		mov	byte [fsetowner], 1
 11735                                  					; set flag for CheckSingle to look at.
 11736 00001110 E828F7                  		call	checksingle
 11737 00001113 C606[7A00]00            		mov	byte [fsetowner], 0
 11738                                  					; set ownership	of drive reset flag
 11739                                  		; Fall into ExitOwn
 11740                                  
 11741                                  ; ==========================================================================
 11742                                  ;
 11743                                  ; if there is only one logical drive assigned to this physical drive, return
 11744                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 11745                                  ;
 11746                                  ; ==========================================================================
 11747                                  
 11748                                  exitown:				
 11749 00001118 30C9                    		xor	cl, cl
 11750                                  		; 12/12/2022
 11751 0000111A 26F6452310              		test	byte [es:di+23h], 10h
 11752                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 11753                                  					; fi_am_mult
 11754 0000111F 7406                    		jz	short exitnomult
 11755 00001121 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 11756                                  					; Get logical drive number
 11757                                  					; Get it 1-based
 11758 00001125 FEC1                    		inc	cl
 11759                                  exitnomult:				
 11760 00001127 C51E[1200]              		lds	bx, [ptrsav]
 11761 0000112B 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 11762                                  					; Exit normal termination
 11763                                  		; 12/12/2022
 11764                                  		; cf=0
 11765                                  		;clc
 11766 0000112E C3                      		retn
 11767                                  
 11768                                  ; =============== S U B	R O U T	I N E =======================================
 11769                                  
 11770                                  ; 16/10/2022
 11771                                  
 11772                                  ; ---------------------------------------------------------------------------
 11773                                  ;
 11774                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 11775                                  ; only if the first byte of TempDpt is not -1.
 11776                                  ; all registers (including flags) are preserved.
 11777                                  ;
 11778                                  ; ---------------------------------------------------------------------------
 11779                                  
 11780                                  		; 19/10/2022
 11781                                  RestoreOldDpt:
 11782                                  		; if we have already restored the disk base table earlier,
 11783                                  		; do not do it again.
 11784                                  	
 11785 0000112F 50                      		push	ax
 11786 00001130 30C0                    		xor	al, al
 11787 00001132 A2[3906]                		mov	[had_format_error], al	; Reset flag and 
 11788 00001135 8606[3806]              		xchg	al, [media_set_for_format] ; get current flag setting
 11789 00001139 08C0                    		or	al, al
 11790 0000113B 741E                    		jz	short DontRestore
 11791 0000113D 56                      		push	si
 11792 0000113E 1E                      		push	ds
 11793 0000113F 06                      		push	es
 11794 00001140 C536[3A06]              		lds	si, [tempdpt]
 11795                                  
 11796                                  		; 17/10/2022
 11797 00001144 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11798                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11799 00001149 268E06[1A00]            		mov	es, [es:zeroseg]
 11800                                  		;mov	es, es:zeroseg	; CAS -- bleeeech!
 11801                                  
 11802                                  		;mov	es:78h,	si	; [es:DSKADR]
 11803 0000114E 2689367800              		mov	[es:DSKADR], si
 11804                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 11805 00001153 268C1E7A00              		mov	[es:DSKADR+2], ds
 11806 00001158 07                      		pop	es
 11807 00001159 1F                      		pop	ds
 11808 0000115A 5E                      		pop	si
 11809                                  DontRestore:				
 11810 0000115B 58                      		pop	ax
 11811                                  		; 12/12/2022
 11812                                  		; cf=0
 11813                                  		;clc			;  Clear carry
 11814 0000115C C3                      		retn
 11815                                  
 11816                                  ; ---------------------------------------------------------------------------
 11817                                  
 11818                                  ; 16/10/2022
 11819                                  
 11820                                  ; ==========================================================================
 11821                                  ;	get media id
 11822                                  ; ==========================================================================
 11823                                  ;
 11824                                  ; FUNCTION: get the volume label,the system id and the serial number from
 11825                                  ;	    the media that has the extended boot record.
 11826                                  ;	    for the conventional media,this routine will return "unknown
 11827                                  ;	    media type" error to dos.
 11828                                  ;
 11829                                  ; INPUT :   ES:di -> bds table for this drive.
 11830                                  ;
 11831                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 11832                                  ;	    if carry set,then al contains the device driver error number
 11833                                  ;	    that will be returned to dos.
 11834                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 11835                                  ;
 11836                                  ; SUBROUTINES TO BE CALLED:
 11837                                  ;	BootIo:NEAR
 11838                                  ;
 11839                                  ; LOGIC:
 11840                                  ;	to recognize the extended boot record,this logic will actually
 11841                                  ;	access the boot sector even if it is a hard disk.
 11842                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 11843                                  ;	field of bpb and the extended boot signature.
 11844                                  ;
 11845                                  ; {
 11846                                  ;	get logical drive number from bds table;
 11847                                  ;	rFlag = read operation;
 11848                                  ;	BootIo;		 /*get the media boot record into the buffer
 11849                                  ;	if (no error) then
 11850                                  ;	     if (extended boot record) then
 11851                                  ;		{ set volume label,volume serial number and system id
 11852                                  ;		  of the request packet to those of the boot record;
 11853                                  ;		};
 11854                                  ;	     else		  /*not an extended bpb */
 11855                                  ;		{ set register al to "unknown media.." error code;
 11856                                  ;		  set carry bit;
 11857                                  ;		};
 11858                                  ;	else
 11859                                  ;	     ret;	/*already error code is set in the register al
 11860                                  ;
 11861                                  ; ==========================================================================
 11862                                  
 11863                                  ;size_of_EXT_BOOT_SERIAL equ 4
 11864                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 11865                                  ;;size_of_EXT_SYSTEM_ID equ 8
 11866                                  
 11867                                  		; 19/10/2022
 11868                                  GetMediaId:
 11869 0000115D E89F00                  		call	ChangeLineChk
 11870 00001160 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 11871 00001164 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 11872 00001169 E87B00                  		call	BootIo		; Read boot sector into	DiskSector
 11873 0000116C 7224                    		jb	short IOCtl_If1
 11874                                  					; Valid? (0F0h-0FFh?)
 11875 0000116E 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 11876                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 11877 00001173 721A                    		jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 11878                                  		; 10/12/2022
 11879 00001175 BE[7401]                		mov	si, disksector+26h
 11880 00001178 803C29                  		cmp	byte [si], 29h
 11881                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 11882                                  					; EXT_BOOT_SIGNATURE
 11883 0000117B 7512                    		jnz	short IOCtl_If2	; not extended boot record
 11884 0000117D C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 11885 00001181 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11886                                  		; 10/12/2022
 11887 00001185 46                      		inc	si
 11888                                  		; si = disksector+27h 
 11889                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 11890 00001186 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 11891 00001189 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 11892                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 11893                                  					; +size_of_EXT_SYSTEM_ID
 11894 0000118C F3A4                    		rep movsb		; Move from Bios_Data into request packet
 11895                                  	
 11896                                  		; 10/12/2022
 11897                                  		; cf = 0
 11898                                  		;clc
 11899                                  
 11900 0000118E C3                      		retn
 11901                                  ; ---------------------------------------------------------------------------
 11902                                  
 11903                                  IOCtl_If2:				
 11904 0000118F B007                    		mov	al, 7		; error_unknown_media
 11905 00001191 F9                      		stc
 11906                                  IOCtl_If1:				
 11907 00001192 C3                      		retn
 11908                                  ; ---------------------------------------------------------------------------
 11909                                  
 11910                                  ; 16/10/2022
 11911                                  
 11912                                  ; ==========================================================================
 11913                                  ;  set media id
 11914                                  ; ==========================================================================
 11915                                  
 11916                                  ; function: set the volume label, the system id and the serial number of
 11917                                  ;	    the media that has the extended boot record.
 11918                                  ;	    for the conventional media, this routine will return "unknown
 11919                                  ;	    media.." error to dos.
 11920                                  ;	    this routine will also set the corresponding informations in
 11921                                  ;	    the bds table.
 11922                                  ;
 11923                                  ; input :   ES:di -> bds table for this drive.
 11924                                  ;
 11925                                  ; output:   the extended boot record in the media will be set according to
 11926                                  ;	    the request packet.
 11927                                  ;	    if carry set, then al contains the device driver error number
 11928                                  ;	    that will be returned to dos.
 11929                                  ;
 11930                                  ; subroutines to be called:
 11931                                  ;	BootIo:NEAR
 11932                                  ;
 11933                                  ; logic:
 11934                                  ;
 11935                                  ; {
 11936                                  ;	get drive_number from bds;
 11937                                  ;	rFlag = "read operation";
 11938                                  ;	BootIo;
 11939                                  ;	if (no error) then
 11940                                  ;	     if (extended boot record) then
 11941                                  ;		{ set volume label,volume serial number and system id
 11942                                  ;		  of the boot record to those of the request packet;
 11943                                  ;		  rFlag = "write operation";
 11944                                  ;		  get drive number from bds;
 11945                                  ;		  BootIo;	  /*write it back*/
 11946                                  ;		};
 11947                                  ;	     else		  /*not an extended bpb */
 11948                                  ;		{ set register al to "unknown media.." error code;
 11949                                  ;		  set carry bit;
 11950                                  ;		  ret;	 /*return back to caller */
 11951                                  ;		};
 11952                                  ;	else
 11953                                  ;	     ret;		 /*already error code is set */
 11954                                  ;
 11955                                  ; ==========================================================================
 11956                                  
 11957                                  		; 19/10/2022
 11958                                  SetMediaId:
 11959 00001193 E86900                  		call	ChangeLineChk
 11960 00001196 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 11961                                  					; Logical drive	number
 11962 0000119A 88C2                    		mov	dl, al
 11963 0000119C C606[2001]02            		mov	byte [rflag], 2	; romread
 11964 000011A1 52                      		push	dx
 11965 000011A2 E84200                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 11966 000011A5 5A                      		pop	dx
 11967 000011A6 723E                    		jb	short IOCtl_If6
 11968                                  					; Valid? (0F0h-0FFh?)
 11969 000011A8 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 11970                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 11971 000011AD 7234                    		jb	short IOCtl_If7	; Brif not
 11972 000011AF 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 11973                                  					; EXT_BOOT_SIGNATURE
 11974 000011B4 752D                    		jnz	short IOCtl_If7	; not extended boot record
 11975 000011B6 06                      		push	es		; Save BDS pointer
 11976 000011B7 57                      		push	di
 11977 000011B8 1E                      		push	ds		; Point	ES To boot record
 11978 000011B9 07                      		pop	es
 11979 000011BA BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 11980 000011BD C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 11981 000011C1 C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 11982 000011C4 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 11983 000011C7 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 11984                                  					; +size_of_EXT_BOOT_VOL_LABEL
 11985                                  					; +size_of_EXT_SYSTEM_ID
 11986 000011CA F3A4                    		rep movsb
 11987 000011CC 06                      		push	es		; point	ds back	to Bios_Data
 11988 000011CD 1F                      		pop	ds
 11989 000011CE 5F                      		pop	di		; restore bds pointer
 11990 000011CF 07                      		pop	es
 11991 000011D0 E864F5                  		call	mov_media_ids	; update the bds media id info.
 11992 000011D3 88D0                    		mov	al, dl
 11993 000011D5 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11994 000011DA E80A00                  		call	BootIo		; write	it back.
 11995 000011DD C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 11996                                  					; make sure chk_media check the driver
 11997                                  					; return with error code from BootIo
 11998 000011E2 C3                      		retn
 11999                                  ; ---------------------------------------------------------------------------
 12000                                  
 12001                                  IOCtl_If7:				
 12002 000011E3 B007                    		mov	al, 7		; error_unknown_media
 12003 000011E5 F9                      		stc
 12004                                  IOCtl_If6:				
 12005 000011E6 C3                      		retn
 12006                                  
 12007                                  ; =============== S U B	R O U T	I N E =======================================
 12008                                  
 12009                                  ; 16/10/2022
 12010                                  
 12011                                  ; ---------------------------------------------------------------------------
 12012                                  ;	BootIo
 12013                                  ; ---------------------------------------------------------------------------
 12014                                  ;
 12015                                  ; function: read/write the boot record into boot sector.
 12016                                  ;
 12017                                  ; input :
 12018                                  ;	    al=logical drive number
 12019                                  ;	    rFlag = operation (read/write)
 12020                                  ;
 12021                                  ; output:   for read operation,the boot record of the drive specified in bds
 12022                                  ;	    be read into the DiskSector buffer.
 12023                                  ;	    for write operation,the DiskSector buffer image will be written
 12024                                  ;	    to the drive specified in bds.
 12025                                  ;	    if carry set,then al contains the device driver error number
 12026                                  ;	    that will be returned to dos.
 12027                                  ;	    AX,CX,DX register destroyed.
 12028                                  ;	    if carry set,then al will contain the error code from DiskIO.
 12029                                  ;
 12030                                  ; subroutines to be called:
 12031                                  ;	DiskIO:NEAR
 12032                                  ;
 12033                                  ; logic:
 12034                                  ;
 12035                                  ; {
 12036                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 12037                                  ;	sectorcount = 1;	 /*read 1 sector only */
 12038                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 12039                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 12040                                  ; }
 12041                                  ; ==========================================================================
 12042                                  
 12043                                  		; 19/10/2022
 12044                                  BootIo:	
 12045 000011E7 06                      		push	es
 12046 000011E8 57                      		push	di
 12047 000011E9 53                      		push	bx
 12048 000011EA 1E                      		push	ds
 12049 000011EB 07                      		pop	es		; Point ES: to Bios_Data
 12050                                  
 12051                                  		; Call DiskIO to read/write the boot sec. The parameters which
 12052                                  		; need to be initialized for this subroutine out here are
 12053                                  		; - Transfer address to Bios_Data:DiskSector
 12054                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 12055                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 12056                                  		; - Number of sectors <-- 1
 12057                                  
 12058 000011EC BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 12059 000011EF 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 12060 000011F1 8916[2B05]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 12061 000011F5 B90100                  		mov	cx, 1
 12062 000011F8 E8CEF6                  		call	diskio
 12063 000011FB 5B                      		pop	bx
 12064 000011FC 5F                      		pop	di
 12065 000011FD 07                      		pop	es
 12066 000011FE C3                      		retn
 12067                                  
 12068                                  ; =============== S U B	R O U T	I N E =======================================
 12069                                  
 12070                                  ; 16/10/2022
 12071                                  
 12072                                  ; ---------------------------------------------------------------------------
 12073                                  ;	ChangeLineChk
 12074                                  ; ---------------------------------------------------------------------------
 12075                                  ;
 12076                                  ; when the user calls get/set media id call before dos establishes the media
 12077                                  ; by calling "media_chk",the change line activity of the drive is going to be
 12078                                  ; lost.	this routine will check the change line activity and will save the
 12079                                  ; history in the flags.
 12080                                  ;
 12081                                  ; FUNCTION: check the change line error activity
 12082                                  ;
 12083                                  ; INPUT :  ES:di -> bds table.
 12084                                  ;
 12085                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 12086                                  ;
 12087                                  ; SUBROUTINES TO BE CALLED:
 12088                                  ;	Set_Changed_DL
 12089                                  ;
 12090                                  ; ---------------------------------------------------------------------------
 12091                                  
 12092                                  ChangeLineChk:	
 12093 000011FF 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12094 00001203 08D2                    		or	dl, dl		; Fixed	disk?
 12095 00001205 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 12096                                  		; 12/12/2022
 12097 00001207 26F6452304              		test	byte [es:di+23h], 4
 12098                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 12099                                  					; return_fake_bpb
 12100 0000120C 751A                    		jnz	short ChangeLnChkRet
 12101 0000120E 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 12102 00001213 7513                    		jnz	short ChangeLnChkRet
 12103 00001215 E8F806                  		call	haschange	; This drive support change line?
 12104 00001218 740E                    		jz	short ChangeLnChkRet ; Do nothing
 12105                                  
 12106                                  		; Execute the rom disk interrupt to check changeline activity.
 12107                                  
 12108 0000121A B416                    		mov	ah, 16h
 12109 0000121C CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 12110                                  					; DL = drive to	check
 12111                                  					; Return: AH = disk change status
 12112 0000121E 7308                    		jnb	short ChangeLnChkRet
 12113 00001220 53                      		push	bx
 12114 00001221 BB4000                  		mov	bx, 40h		; fchanged
 12115                                  					; Update flag in BDS for this
 12116                                  					; physical drive
 12117 00001224 E8C206                  		call	set_changed_dl
 12118 00001227 5B                      		pop	bx
 12119                                  ChangeLnChkRet:				
 12120 00001228 C3                      		retn
 12121                                  
 12122                                  ; ---------------------------------------------------------------------------
 12123                                  
 12124                                  ; 16/10/2022
 12125                                  
 12126                                  ; ==========================================================================
 12127                                  ;	GetAccessFlag
 12128                                  ; ==========================================================================
 12129                                  ;
 12130                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 12131                                  ;
 12132                                  ; INPUT :
 12133                                  ;	    ES:di -> bds table
 12134                                  ;
 12135                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 12136                                  ;						 = 1 if disk i/o allowed.
 12137                                  ; ==========================================================================
 12138                                  
 12139                                  		; 19/10/2022
 12140                                  GetAccessFlag:				
 12141 00001229 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 12142 0000122D C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12143                                  		;mov	al, 0		; Assume result	is unformatted
 12144                                  		; 10/12/2022
 12145 00001230 28C0                    		sub	al, al
 12146                                  		; 10/12/2022
 12147 00001232 26F6452402              		test	byte [es:di+36], 02h
 12148                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 12149                                  					; unformatted_media
 12150 00001237 7502                    		jnz	short GafDone	; Done if unformatted
 12151 00001239 FEC0                    		inc	al		; Return true for formatted
 12152                                  
 12153                                  GafDone:				
 12154 0000123B 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12155 0000123E C3                      		retn
 12156                                  ; ---------------------------------------------------------------------------
 12157                                  
 12158                                  ; 16/10/2022
 12159                                  
 12160                                  ; ==========================================================================
 12161                                  ;	SetAccessFlag
 12162                                  ; ==========================================================================
 12163                                  ;
 12164                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 12165                                  ;
 12166                                  ; input :
 12167                                  ;	    ES:di -> bds table
 12168                                  ;
 12169                                  ; output:   unformtted_media bit modified according to the user request
 12170                                  ; ==========================================================================
 12171                                  
 12172                                  		; 19/10/2022
 12173                                  SetAccessFlag:				
 12174 0000123F C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 12175 00001243 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12176                                  		; 10/12/2022
 12177 00001246 26806524FD              		and	byte [es:di+36], 0FDh
 12178                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 12179                                  					; ~unformatted_media
 12180 0000124B 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12181 0000124F 7505                    		jnz	short saf_Done
 12182                                  		; 10/12/2022
 12183 00001251 26804D2402              		or	byte [es:di+36], 02h
 12184                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 12185                                  					; unformatted_media
 12186                                  saf_Done:				
 12187 00001256 C3                      		retn
 12188                                  ; ---------------------------------------------------------------------------
 12189                                  
 12190                                  ; 16/10/2022
 12191                                  
 12192                                  ; ==========================================================================
 12193                                  ; Ioctl_Support_Query
 12194                                  ; ==========================================================================
 12195                                  ;
 12196                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 12197                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 12198                                  ; device attributes specifies if this function is supported.
 12199                                  ;
 12200                                  ; ==========================================================================
 12201                                  
 12202                                  		; 19/10/2022
 12203                                  ioctl_support_query:
 12204 00001257 06                      		push	es
 12205 00001258 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 12206 0000125C 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 12207                                  					; AL ==	Major, AH == Minor
 12208 00001260 3C08                    		cmp	al, 8		; IOC_DC
 12209                                  					; See if major code is 8
 12210 00001262 7513                    		jnz	short nosupport
 12211 00001264 0E                      		push	cs
 12212 00001265 07                      		pop	es
 12213 00001266 B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 12214                                  		; 10/12/2022
 12215 00001269 BF[3A0C]                		mov	di, IOC_DC_Table
 12216                                  		;mov	di, 0C60h	; IOC_DC_Table
 12217                                  					; at 2C7h:0C60h	= 70h:31D0h
 12218 0000126C 86C4                    		xchg	al, ah		; Put minor code in AL
 12219 0000126E F2AE                    		repne scasb		; Scan for minor code in AL
 12220 00001270 7505                    		jnz	short nosupport	; it was not found
 12221 00001272 B80001                  		mov	ax, 100h
 12222                                  		; 10/12/2022
 12223                                  		; (jump to ioctlsupexit is not required)
 12224                                  		;jmp	short $+2	; ioctlsupexit
 12225                                  					; Signal ioctl is supported
 12226                                  		;;jmp	short ioctlsupexit
 12227                                  ; ---------------------------------------------------------------------------
 12228                                  ioctlsupexit:				
 12229 00001275 07                      		pop	es
 12230                                  		; 10/12/2022
 12231                                  		; cf = 0
 12232                                  		;clc
 12233 00001276 C3                      		retn
 12234                                  ; ---------------------------------------------------------------------------
 12235                                  nosupport:				
 12236 00001277 07                      		pop	es
 12237 00001278 E95AEE                  		jmp	bc_cmderr
 12238                                  ; ---------------------------------------------------------------------------
 12239                                  
 12240                                  ; 16/10/2022
 12241                                  
 12242                                  ; ==========================================================================
 12243                                  ;	GetMediaSenseStatus
 12244                                  ; ==========================================================================
 12245                                  ;
 12246                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 12247                                  ;	    diskette drive and whether the media is the default type
 12248                                  ;	    for that drive. (default type means the max size for that
 12249                                  ;	    drive)
 12250                                  ;
 12251                                  ; INPUT :   ES:DI -> BDS table
 12252                                  ; OUTPUT:   If carry clear
 12253                                  ;	    DS:BX -> Updated IOCtlPacket
 12254                                  ;
 12255                                  ;			 Special Function at offset 0:
 12256                                  ;				0	- Media detected is not default type
 12257                                  ;				1	- Media detected is default type
 12258                                  ;
 12259                                  ;			 Device Type at offset 1:
 12260                                  ;				2       - 720K 3.5" 80 tracks
 12261                                  ;				7	- 1.44M 3.5" 80 tracks
 12262                                  ;				9	- 2.88M 3.5" 80 tracks
 12263                                  ;
 12264                                  ; Error Codes returned in AX if carry set:
 12265                                  ;
 12266                                  ; 8102 - Drive not ready	- No disk is in the drive.
 12267                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 12268                                  ;				  the media is really unkown, any error
 12269                                  ;				  other than "media not present"
 12270                                  ; 
 12271                                  ; ==========================================================================
 12272                                  
 12273                                  		; 19/10/2022
 12274                                  SenseMediaType:				
 12275 0000127B C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 12276 0000127F C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12277                                  		; 10/10/2022
 12278                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 12279 00001282 31D2                    		xor	dx, dx
 12280 00001284 8917                    		mov	[bx], dx ; 0
 12281                                  		;
 12282 00001286 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12283                                  					; Get int 13h drive number from	BDS
 12284                                  		; 10/12/2022
 12285                                  		;xor	dh, dh		; DX = physical	drive number
 12286 0000128A B420                    		mov	ah, 20h		; Get Media Type function
 12287                                  					; If no	carry media type in AL
 12288 0000128C CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 12289 0000128E 7216                    		jb	short MediaSenseEr ; error code	in AH
 12290 00001290 FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 12291                                  DetermineMediaType:			
 12292 00001292 FEC8                    		dec	al
 12293 00001294 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 12294 00001296 740A                    		jz	short GotMediaType
 12295 00001298 0404                    		add	al, 4
 12296 0000129A 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 12297 0000129C 7404                    		jz	short GotMediaType
 12298 0000129E 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 12299 000012A0 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 12300                                  GotMediaType:				
 12301 000012A2 884701                  		mov	[bx+1],	al	; Save the return value
 12302                                  		; 10/12/2022
 12303                                  		; cf = 0
 12304                                  		;clc			; Signal success
 12305 000012A5 C3                      		retn
 12306                                  ; ---------------------------------------------------------------------------
 12307                                  
 12308                                  MediaSenseEr:				
 12309 000012A6 80FC32                  		cmp	ah, 32h		; See if not default media error
 12310 000012A9 74E7                    		jz	short DetermineMediaType ; Not really an error
 12311 000012AB B002                    		mov	al, 2		; Now assume drive not ready
 12312 000012AD 80FC31                  		cmp	ah, 31h		; See if media was present
 12313 000012B0 7402                    		jz	short SenseErrExit ; Return drive not ready
 12314                                  UnknownMediaType:			
 12315 000012B2 B007                    		mov	al, 7		; Just don't know the media type
 12316                                  SenseErrExit:				
 12317 000012B4 B481                    		mov	ah, 81h		; Signal error return
 12318 000012B6 F9                      		stc
 12319 000012B7 C3                      		retn
 12320                                  
 12321                                  ; ---------------------------------------------------------------------------
 12322                                  		; 10/12/2022
 12323                                  		;db    0
 12324                                  ; ---------------------------------------------------------------------------
 12325                                  
 12326                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12327                                  
 12328                                  ;-----------------------------------------------------------------------------
 12329                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 12330                                  ;-----------------------------------------------------------------------------
 12331                                  ; 16/03/2019 - Retro DOS v4.0
 12332                                  
 12333                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 12334                                  ;	after booting. this allows testing and implementation of custom int_13
 12335                                  ;	handlers, without giving up ms-dos error recovery
 12336                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 12337                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 12338                                  ;	exit:	orig13	== address of new int_13 handler
 12339                                  ;		ds:dx	== old orig13 value
 12340                                  ;		es:bx	== old old13  value
 12341                                  ;
 12342                                  ; int 2f handler for external block drivers to communicate with the internal
 12343                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 12344                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 12345                                  ; dsk_entry, the entry point for all disk requests.
 12346                                  ;
 12347                                  ; on exit from this driver, we will return to the external driver
 12348                                  ; that issued this int 2f, and can then remove the flags from the stack.
 12349                                  ; this scheme allows us to have a small external device driver, and makes
 12350                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 12351                                  ; since we only need to make changes in one place (most of the time).
 12352                                  ;
 12353                                  ;   ax=800h - check for installed handler - reserved
 12354                                  ;   ax=801h - install the bds into the linked list
 12355                                  ;   ax=802h - dos request
 12356                                  ;   ax=803h - return bds table starting pointer in ds:di
 12357                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 12358                                  ;	    problem. bds table is going to be used to get head/sector
 12359                                  ;	    informations without calling generic ioctl get device parm call.)
 12360                                  
 12361                                  ;BIOSSEGMENT equ 70h
 12362                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 12363                                  
 12364                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 12365                                  
 12366                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 12367 000012B8 80FC13                  		cmp	ah, 13h
 12368 000012BB 7413                    		jz	short int2f_replace_int13
 12369 000012BD 80FC08                  		cmp	ah, 8
 12370 000012C0 743B                    		jz	short mine
 12371                                  
 12372                                  ; Check for WIN386 startup and return the BIOS instance data
 12373                                  
 12374 000012C2 80FC16                  		cmp	ah, 16h		; MultWin386
 12375 000012C5 7479                    		jz	short win386call
 12376 000012C7 80FC4A                  		cmp	ah, 4Ah		; multMULT
 12377 000012CA 7503                    		jnz	short i2f_handler_iret
 12378 000012CC E9A500                  		jmp	handle_multmult
 12379                                  ; ---------------------------------------------------------------------------
 12380                                  
 12381                                  i2f_handler_iret:			
 12382 000012CF CF                      		iret
 12383                                  ; ---------------------------------------------------------------------------
 12384                                  
 12385                                  int2f_replace_int13:			
 12386 000012D0 50                      		push	ax	; free up a register for caller's ds
 12387 000012D1 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 12388                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 12389                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 12390                                  					; = [02C7h:0030h] = [0070h:25A0h]
 12391 000012D3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 12392                                  		; 19/10/2022
 12393                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 12394                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 12395                                  		;push	word ptr ds:Old13	; return them to caller
 12396                                  		;push	word ptr ds:Old13+2
 12397 000012D8 FF36[B400]              		push	word [Orig13]
 12398 000012DC FF36[B600]              		push	word [Orig13+2]
 12399 000012E0 FF36[0601]              		push	word [Old13]
 12400 000012E4 FF36[0801]              		push	word [Old13+2]
 12401                                  
 12402                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 12403                                  		;mov	word ptr ds:Orig13+2, ax
 12404                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 12405                                  		;mov	word ptr ds:Old13+2, es
 12406 000012E8 8916[B400]              		mov	[Orig13], dx
 12407 000012EC A3[B600]                		mov	[Orig13+2], ax
 12408 000012EF 891E[0601]              		mov	[Old13], bx
 12409 000012F3 8C06[0801]              		mov	[Old13+2], es
 12410                                  
 12411 000012F7 07                      		pop	es			; es:bx := old old13 vector
 12412 000012F8 5B                      		pop	bx
 12413 000012F9 1F                      		pop	ds			; ds:dx := old orig13 vector
 12414 000012FA 5A                      		pop	dx
 12415 000012FB 58                      		pop	ax
 12416                                  i2f_iret:				
 12417 000012FC CF                      		iret
 12418                                  ; ---------------------------------------------------------------------------
 12419                                  
 12420                                  mine:					
 12421 000012FD 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 12422 000012FF 73FB                    		jnb	short i2f_iret
 12423 00001301 08C0                    		or	al, al			; a get installed state request?
 12424 00001303 7504                    		jnz	short disp_func
 12425 00001305 B0FF                    		mov	al, 0FFh
 12426 00001307 EBF3                    		jmp	short i2f_iret
 12427                                  ; ---------------------------------------------------------------------------
 12428                                  
 12429                                  disp_func:				
 12430 00001309 3C01                    		cmp	al, 1			; request for installing bds?
 12431 0000130B 7418                    		jz	short do_subfun_01
 12432 0000130D 3C03                    		cmp	al, 3			; get bds vector?
 12433 0000130F 7424                    		jz	short do_get_bds_vector
 12434                                  
 12435                                  ; set up pointer to request packet
 12436                                  
 12437 00001311 1E                      		push	ds
 12438 00001312 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 12439                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12440                                  					; = [0070h:25A0h] = [02C7h:0030h]
 12441                                  		; 19/10/2022
 12442                                  		;mov	word ptr ds:ptrsav, bx
 12443                                  		;mov	word ptr ds:ptrsav+2, es
 12444 00001317 891E[1200]              		mov	[ptrsav], bx
 12445 0000131B 8C06[1400]              		mov	[ptrsav+2], es
 12446 0000131F 1F                      		pop	ds
 12447                                  		;jmp	far ptr	i2f_dskentry
 12448                                  		; 17/10/2022
 12449                                  		;jmp	far DOSBIOSSEG:dsk_entry		
 12450 00001320 EA[9608]7000            		jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 12451                                  					; NOTE: jump to a FAR function, not an
 12452                                  					;  IRET type function. Callers of
 12453                                  					;  this int2f subfunction will have
 12454                                  					;  to be careful to do a popf
 12455                                  
 12456                                  ; ---------------------------------------------------------------------------
 12457                                  
 12458                                  do_subfun_01:				
 12459 00001325 06                      		push	es
 12460 00001326 1E                      		push	ds
 12461 00001327 1E                      		push	ds
 12462 00001328 07                      		pop	es
 12463                                  		; 17/10/2022
 12464 00001329 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 12465                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12466                                  					; point	ds: -> Bios_Data
 12467 0000132E E8C303                  		call	install_bds
 12468 00001331 1F                      		pop	ds
 12469 00001332 07                      		pop	es
 12470 00001333 EBC7                    		jmp	short i2f_iret
 12471                                  ; ---------------------------------------------------------------------------
 12472                                  
 12473                                  do_get_bds_vector:
 12474                                  		; 17/10/2022
 12475 00001335 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 12476                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12477 0000133A C53E[1901]              		lds	di, [start_bds]
 12478                                  		;lds	di, ds:start_bds
 12479                                  ;ii2f_iret:	; 10/12/2022				
 12480 0000133E EBBC                    		jmp	short i2f_iret
 12481                                  ; ---------------------------------------------------------------------------
 12482                                  
 12483                                  ; 17/10/2022
 12484                                  ; 16/10/2022
 12485                                  
 12486                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 12487                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 12488                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 12489                                  
 12490                                  win386call:				
 12491 00001340 1E                      		push	ds
 12492 00001341 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12493                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12494                                  					; at 2C7h:30h =	70h:25A0h
 12495 00001346 3C05                    		cmp	al, 5		; Win386_Init
 12496                                  					; is it	win386 initializing?
 12497 00001348 7410                    		jz	short Win386Init
 12498 0000134A 3C06                    		cmp	al, 6		; Win386_Exit
 12499                                  					; is it	win386 exiting?
 12500 0000134C 7523                    		jnz	short win_iret	; if not, continue int2f chain
 12501                                  		; 12/12/2022
 12502 0000134E F6C201                  		test	dl, 1
 12503                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 12504 00001351 751E                    		jnz	short win_iret	; if not win386, then continue
 12505                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 12506 00001353 8026[CE08]00            		and	byte [IsWin386], 0 
 12507 00001358 EB17                    		jmp	short win_iret
 12508                                  ; ---------------------------------------------------------------------------
 12509                                  
 12510                                  Win386Init:	
 12511                                  		; 12/12/2022
 12512 0000135A F6C201                  		test	dl, 1			
 12513                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 12514 0000135D 7512                    		jnz	short win_iret	; if not win386, then continue
 12515                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 12516 0000135F 800E[CE08]01            		or	byte [IsWin386], 1
 12517                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 12518                                  		;mov	word ptr ds:SI_Next+2, es
 12519 00001364 891E[9C08]              		mov	[SI_Next], bx
 12520 00001368 8C06[9E08]              		mov	[SI_Next+2], es
 12521                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 12522 0000136C BB[9A08]                		mov	bx, Win386_SI	; 19/10/2022
 12523 0000136F 1E                      		push	ds
 12524 00001370 07                      		pop	es
 12525                                  win_iret:				
 12526 00001371 1F                      		pop	ds
 12527                                  ii2f_iret:	; 10/12/2022	
 12528 00001372 EB88                    		jmp	short i2f_iret	; return back up the chain
 12529                                  ; ---------------------------------------------------------------------------
 12530                                  
 12531                                  handle_multmult:			
 12532 00001374 3C01                    		cmp	al, 1
 12533 00001376 7515                    		jnz	short try_2
 12534 00001378 1E                      		push	ds
 12535 00001379 E84700                  		call	HMAPtr		; get offset of free HMA
 12536                                  		; 10/12/2022
 12537                                  		;xor	bx, bx
 12538                                  		;dec	bx
 12539 0000137C BBFFFF                  		mov	bx, 0FFFFh
 12540 0000137F 8EC3                    		mov	es, bx		; seg of HMA
 12541 00001381 89FB                    		mov	bx, di
 12542 00001383 F7D3                    		not	bx
 12543 00001385 09DB                    		or	bx, bx
 12544 00001387 7401                    		jz	short try_1
 12545 00001389 43                      		inc	bx
 12546                                  try_1:					
 12547 0000138A 1F                      		pop	ds
 12548 0000138B EBE5                    		jmp	short ii2f_iret
 12549                                  ; ---------------------------------------------------------------------------
 12550                                  
 12551                                  try_2:					
 12552 0000138D 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 12553 0000138F 7530                    		jnz	short try_3
 12554 00001391 1E                      		push	ds
 12555                                  		; 10/12/2022
 12556                                  		;xor	di, di
 12557                                  		;dec	di
 12558 00001392 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 12559 00001395 8EC7                    		mov	es, di
 12560 00001397 E82900                  		call	HMAPtr		; get offset of free HMA
 12561 0000139A 83FFFF                  		cmp	di, 0FFFFh
 12562 0000139D 7421                    		jz	short InsuffHMA
 12563 0000139F F7DF                    		neg	di		; free space in HMA
 12564 000013A1 39FB                    		cmp	bx, di
 12565 000013A3 7605                    		jbe	short try_4
 12566                                  		; 10/12/2022
 12567                                  		;sub	di, di
 12568                                  		;dec	di
 12569 000013A5 BFFFFF                  		mov	di, 0FFFFh
 12570 000013A8 EB16                    		jmp	short InsuffHMA
 12571                                  ; ---------------------------------------------------------------------------
 12572                                  
 12573                                  try_4:					
 12574                                  		;mov	di, ds:FreeHMAPtr
 12575 000013AA 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12576 000013AE 83C30F                  		add	bx, 15
 12577                                  		;and	bx, 0FFF0h
 12578                                  		; 10/12/2022
 12579 000013B1 80E3F0                  		and	bl, 0F0h
 12580                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 12581 000013B4 011E[F508]              		add	[FreeHMAPtr], bx
 12582 000013B8 7506                    		jnz	short InsuffHMA
 12583 000013BA C706[F508]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 12584                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 12585                                  					; no more HMA if we have wrapped
 12586                                  InsuffHMA:				
 12587 000013C0 1F                      		pop	ds
 12588                                  		; 10/12/2022
 12589                                  try_3:		
 12590 000013C1 EBAF                    		jmp	short ii2f_iret
 12591                                  ; ---------------------------------------------------------------------------
 12592                                  
 12593                                  		; 10/12/2022
 12594                                  ;try_3:					
 12595                                  		;jmp	ii2f_iret
 12596                                  
 12597                                  ; =============== S U B	R O U T	I N E =======================================
 12598                                  
 12599                                  ; 16/10/2022
 12600                                  
 12601                                  ;--------------------------------------------------------------------------
 12602                                  ;
 12603                                  ; procedure : HMAPtr
 12604                                  ;
 12605                                  ;		Gets the offset of the free HMA area ( with respect to
 12606                                  ;							seg ffff )
 12607                                  ;		If DOS has not moved high, tries to move DOS high.
 12608                                  ;		In the course of doing this, it will allocate all the HMA
 12609                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 12610                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 12611                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 12612                                  ;
 12613                                  ;	RETURNS : offset of free HMA in DI
 12614                                  ;		  BIOS_DATA, seg in DS
 12615                                  ;
 12616                                  ;--------------------------------------------------------------------------
 12617                                  
 12618                                  		; 17/10/2022
 12619                                  HMAPtr:
 12620 000013C3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12621                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12622 000013C8 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12623                                  		;mov	di, ds:FreeHMAPtr
 12624 000013CC 83FFFF                  		cmp	di, 0FFFFh
 12625 000013CF 750F                    		jnz	short HMAPtr_retn
 12626 000013D1 803E[FB08]00            		cmp	byte [SysinitPresent], 0
 12627                                  		;cmp	ds:SysinitPresent, 0
 12628 000013D6 7408                    		jz	short HMAPtr_retn
 12629 000013D8 FF1E[F708]              		call	far [MoveDOSIntoHMA]
 12630                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 12631 000013DC 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12632                                  		;mov	di, ds:FreeHMAPtr
 12633                                  HMAPtr_retn:				
 12634 000013E0 C3                      		retn
 12635                                  
 12636                                  ; =============== S U B	R O U T	I N E =======================================
 12637                                  
 12638                                  ; 16/10/2022
 12639                                  
 12640                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 12641                                  ; but go ahead and update direction flag, si, & di
 12642                                  
 12643                                  move_sector:
 12644                                  
 12645                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 12646                                  ; any segment to be a fault. Theoretically, this could be handled
 12647                                  ; by the fault handler and the behavior of an 8086 could be emulated
 12648                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 12649                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 12650                                  ; also handles the fault incorrectly in their ROM BIOS for real
 12651                                  ; mode. Their fault handler was only designed to deal with one
 12652                                  ; special case which occurred in a magazine benchmark, but didn't
 12653                                  ; handle the general case worth beans.
 12654                                  ;
 12655                                  ; Simply changing this code to do a byte loop would work okay but
 12656                                  ; would involve a general case performance hit. Therefore, we'll
 12657                                  ; check for either source or destination offsets being within one
 12658                                  ; sector of the end of their segments and only in that case fall
 12659                                  ; back to a byte move.
 12660                                  
 12661 000013E1 FC                      		cld
 12662 000013E2 51                      		push	cx
 12663 000013E3 B90001                  		mov	cx, 256
 12664 000013E6 81FE00FE                		cmp	si, 0FE00h
 12665 000013EA 770A                    		ja	short movsec_bytes
 12666 000013EC 81FF00FE                		cmp	di, 0FE00h
 12667 000013F0 7704                    		ja	short movsec_bytes
 12668 000013F2 F3A5                    		rep movsw
 12669 000013F4 59                      		pop	cx
 12670 000013F5 C3                      		retn
 12671                                  ; ---------------------------------------------------------------------------
 12672                                  
 12673                                  movsec_bytes:				
 12674 000013F6 D1E1                    		shl	cx, 1
 12675 000013F8 F3A4                    		rep movsb
 12676 000013FA 59                      		pop	cx
 12677 000013FB C3                      		retn
 12678                                  
 12679                                  ; =============== S U B	R O U T	I N E =======================================
 12680                                  
 12681                                  ; 16/10/2022
 12682                                  
 12683                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 12684                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 12685                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 12686                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 12687                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 12688                                  ; but we break down a request when we get an ecc or dma error into several
 12689                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 12690                                  ; number of sectors on a track on the medium, and the request would fail.
 12691                                  ;
 12692                                  ; input conditions:
 12693                                  ;	all registers set up for an int 13 request.
 12694                                  ;
 12695                                  ; output:
 12696                                  ;	dh - contains starting head number for request
 12697                                  ;	cx - contains starting sector and cylinder numbers
 12698                                  ;	(the above may or may not have been changed, and are 0-based)
 12699                                  ;	all other registers preserved.
 12700                                  
 12701                                  check_wrap:	
 12702 000013FC 50                      		push	ax
 12703 000013FD 53                      		push	bx
 12704 000013FE 06                      		push	es
 12705 000013FF 57                      		push	di
 12706 00001400 E86E00                  		call	find_bds	; get pointer to bds for drive in dl
 12707 00001403 7260                    		jb	short no_wrap	; finished if DOS doesn't use it
 12708                                  		; 12/12/2022
 12709 00001405 26F6452301              		test	byte [es:di+23h], 1
 12710                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 12711 0000140A 7459                    		jz	short no_wrap	; no wrapping for removable media
 12712 0000140C 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 12713 00001410 89C8                    		mov	ax, cx
 12714 00001412 83E03F                  		and	ax, 3Fh		; extract sector number
 12715 00001415 39D8                    		cmp	ax, bx		; are we going to wrap?
 12716 00001417 764C                    		jbe	short no_wrap
 12717 00001419 F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 12718                                  
 12719                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 12720                                  ; last sector on that track.
 12721                                  
 12722 0000141B 08E4                    		or	ah, ah
 12723 0000141D 7503                    		jnz	short not_on_bound
 12724                                  		; 18/12/2022
 12725 0000141F 48                      		dec	ax ; *
 12726 00001420 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 12727                                  					; if on	boundary
 12728                                  		;dec	al ; *		; also decrement # of head wraps
 12729                                  not_on_bound:				
 12730 00001422 80E1C0                  		and	cl, 0C0h	; zero out sector #
 12731 00001425 08E1                    		or	cl, ah		; or in	new sector #
 12732 00001427 30E4                    		xor	ah, ah		; ax = # of head wraps
 12733 00001429 40                      		inc	ax
 12734 0000142A 00F0                    		add	al, dh		; add in starting head #
 12735 0000142C 80D400                  		adc	ah, 0		; catch	any carry
 12736 0000142F 263B4515                		cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 12737                                  					; are we going to wrap around a	head?
 12738 00001433 7636                    		jbe	short no_wrap_head ; do	not lose new head number!!
 12739 00001435 52                      		push	dx		; preserve drive number and head number
 12740 00001436 31D2                    		xor	dx, dx
 12741 00001438 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 12742 0000143C F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 12743                                  
 12744                                  ; careful here! if new head # is 0, then we are on the last head.
 12745                                  
 12746 0000143E 09D2                    		or	dx, dx
 12747 00001440 7507                    		jnz	short no_head_bound
 12748 00001442 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 12749                                  
 12750                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 12751                                  
 12752 00001444 09C0                    		or	ax, ax
 12753 00001446 7401                    		jz	short no_head_bound
 12754 00001448 48                      		dec	ax		; reduce number	of cylinder wraps
 12755                                  no_head_bound:				
 12756 00001449 88D7                    		mov	bh, dl		; bh has new head number
 12757 0000144B 5A                      		pop	dx		; restore drive number and head number
 12758 0000144C FECF                    		dec	bh		; get it 0-based
 12759 0000144E 88FE                    		mov	dh, bh		; set up new head number in dh
 12760 00001450 88CF                    		mov	bh, cl
 12761 00001452 80E73F                  		and	bh, 3Fh		; preserve sector number
 12762 00001455 B306                    		mov	bl, 6
 12763 00001457 86CB                    		xchg	cl, bl
 12764 00001459 D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 12765 0000145B 00C5                    		add	ch, al		; add in cylinder wrap
 12766 0000145D 10E3                    		adc	bl, ah		; add in high byte
 12767 0000145F D2E3                    		shl	bl, cl		; move up to ms	end
 12768 00001461 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 12769 00001463 08F9                    		or	cl, bh		; or in	sector number
 12770                                  no_wrap:				
 12771 00001465 F8                      		clc
 12772 00001466 5F                      		pop	di
 12773 00001467 07                      		pop	es
 12774 00001468 5B                      		pop	bx
 12775 00001469 58                      		pop	ax
 12776 0000146A C3                      		retn
 12777                                  ; ---------------------------------------------------------------------------
 12778                                  
 12779                                  no_wrap_head:				
 12780 0000146B 88C6                    		mov	dh, al		; do not lose new head number
 12781 0000146D FECE                    		dec	dh		; get it 0-based
 12782 0000146F EBF4                    		jmp	short no_wrap
 12783                                  
 12784                                  ; =============== S U B	R O U T	I N E =======================================
 12785                                  
 12786                                  ; 16/10/2022
 12787                                  
 12788                                  ; this is a special version of the bds lookup code which is
 12789                                  ; based on physical drives rather than the usual logical drives
 12790                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 12791                                  ; otherwise carry is clear
 12792                                  ;
 12793                                  ; guaranteed to trash no registers except es:di
 12794                                  
 12795                                  		; 19/10/2022
 12796                                  find_bds:	
 12797 00001471 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 12798                                  fbds_1:					
 12799 00001475 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 12800 00001479 7409                    		jz	short fdbs_2
 12801 0000147B 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12802                                  					; go to next bds
 12803 0000147E 83FFFF                  		cmp	di, 0FFFFh
 12804 00001481 75F2                    		jnz	short fbds_1
 12805 00001483 F9                      		stc
 12806                                  fdbs_2:					
 12807 00001484 C3                      		retn
 12808                                  
 12809                                  ; =============== S U B	R O U T	I N E =======================================
 12810                                  
 12811                                  ; 16/10/2022
 12812                                  		; 17/10/2022
 12813                                  doint:
 12814                                  		; 10/12/2022
 12815 00001485 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 12816                                  					; get physical drive number
 12817                                  		; 19/10/2022 - Temporary !
 12818                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 12819                                  		
 12820 00001488 30E4                    		xor	ah, ah
 12821 0000148A 08C0                    		or	al, al
 12822 0000148C 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 12823                                  		; 10/12/2022
 12824 0000148E 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 12825                                  					; get request code
 12826                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 12827 00001491 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 12828                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 12829 00001494 9D                      		popf
 12830                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 12831                                  		; 17/10/2022
 12832 00001495 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 12833                                  		;;call	call_orig13	; call far 70h:797h
 12834                                  					; call far KERNEL_SEGMENT:call_orig13
 12835 0000149A 9C                      		pushf
 12836                                  		; 10/12/2022
 12837 0000149B 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 12838                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 12839                                  dointdone:				
 12840 0000149E C3                      		retn
 12841                                  
 12842                                  ;----------------------------------------------------------------------------
 12843                                  
 12844                                  ; 16/10/2022
 12845                                  
 12846                                  ; this is the true int 13 handler. we parse the request to see if there is
 12847                                  ; a dma violation. if so, depending on the function, we:
 12848                                  ;   read/write break the request into three pieces and move the middle one
 12849                                  ;	       into our internal buffer.
 12850                                  ;
 12851                                  ;   format     copy the format table into the buffer
 12852                                  ;   verify     point the transfer address into the buffer
 12853                                  ;
 12854                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 12855                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 12856                                  ; the offending sector into the buffer below and do the i/o from there.
 12857                                  
 12858                                  ;struc INT13FRAME
 12859                                  ;.oldbp: resw
 12860                                  ;.oldax: resw 
 12861                                  ;.oldbx: resw
 12862                                  ;.oldcx: resw
 12863                                  ;.olddx: resw
 12864                                  ;.oldds: resw	; now we save caller's ds, too
 12865                                  ;.olddd: resd
 12866                                  ;.oldf:	resw
 12867                                  ;end struc
 12868                                  
 12869                                  ;----------------------------------------------------------------------------
 12870                                  
 12871                                  ;   entry conditions:
 12872                                  ;	ah = function
 12873                                  ;	al = number of sectors
 12874                                  ;	es:bx = dma address
 12875                                  ;	cx = packed track and sector
 12876                                  ;	dx = head and drive
 12877                                  ;   output conditions:
 12878                                  ;	no dma violation.
 12879                                  
 12880                                  ;	use extreme caution when working with this code. In general,
 12881                                  ;	  all registers are hot at all times.
 12882                                  ;
 12883                                  ;	question:  does this code handle cases where dma errors
 12884                                  ;	  occur during ecc retries, and where ecc errors occur during
 12885                                  ;	  dma breakdowns???? Hmmmmm.
 12886                                  
 12887                                  ;----------------------------------------------------------------------------
 12888                                  
 12889                                  ; ---------------------------------------------------------------------------
 12890                                  
 12891 0000149F 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 12892                                  
 12893                                  ; 17/10/2022
 12894                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 12895                                  ; 09/12/2022
 12896                                  DTYPEARRAY equ dtype_array
 12897                                  
 12898                                  ; ---------------------------------------------------------------------------
 12899                                  
 12900                                  ; stick some special stuff out of mainline
 12901                                  
 12902                                  ; we know we're doing a format command. if we have changeline
 12903                                  ; support, then flag some special changed stuff and set changed
 12904                                  ; by format bit for all logical drives using this physical drive
 12905                                  
 12906                                  format_special_stuff:			
 12907 000014A3 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 12908 000014A8 7459                    		jz	short format_special_stuff_done ; brif not
 12909 000014AA 53                      		push	bx
 12910 000014AB BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 12911 000014AE E83804                  		call	set_changed_dl	; indicate that media changed by format
 12912 000014B1 5B                      		pop	bx
 12913 000014B2 EB4F                    		jmp	short format_special_stuff_done
 12914                                  ; ---------------------------------------------------------------------------
 12915                                  
 12916                                  ; 16/10/2022
 12917                                  
 12918                                  ; we know we've got ec35's on the system. Now see if we're doing
 12919                                  ; a floppy. If so, create a mask and see if this particular
 12920                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 12921                                  
 12922                                  		; 19/10/2022
 12923                                  ec35_special_stuff:			
 12924 000014B4 84D2                    		test	dl, dl		; floppy or hard disk?
 12925 000014B6 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 12926 000014B8 50                      		push	ax		; see if this PARTICULAR drive is ec35
 12927 000014B9 51                      		push	cx
 12928 000014BA 88D1                    		mov	cl, dl		; turn drive number into bit map
 12929 000014BC B001                    		mov	al, 1		; assume drive 0
 12930 000014BE D2E0                    		shl	al, cl		; shift	over correct number of times
 12931 000014C0 8406[3105]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 12932 000014C4 59                      		pop	cx
 12933 000014C5 58                      		pop	ax
 12934 000014C6 7442                    		jz	short ec35_special_stuff_done
 12935                                  					; done if this floppy is not an	ec35
 12936 000014C8 53                      		push	bx		; free up a far	pointer	(es:bx)
 12937 000014C9 06                      		push	es
 12938                                  		; 17/10/2022
 12939 000014CA 2EC41E[9F14]            		les	bx, [cs:DTYPEARRAY]
 12940                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 12941                                  					; 0070h:3A65h =	2C7h:14F5h
 12942 000014CF 00D3                    		add	bl, dl
 12943 000014D1 80D700                  		adc	bh, 0		; find entry for this drive
 12944 000014D4 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 12945                                  					; (360k	disk in	360k drive,
 12946                                  					; no double-stepping, 250 kbs transfer rate)
 12947 000014D8 07                      		pop	es
 12948 000014D9 5B                      		pop	bx
 12949 000014DA EB2E                    		jmp	short ec35_special_stuff_done
 12950                                  ; ---------------------------------------------------------------------------
 12951                                  
 12952                                  ; 16/10/2022
 12953                                  
 12954                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 12955                                  ; this function does not reset the common buses after the execution.
 12956                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 12957                                  ; will issue ah=1 (read status) call to reset the buses.
 12958                                  
 12959                                  ps2_special_stuff:			
 12960 000014DC 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 12961                                  					; read driver parm ?
 12962 000014E1 7407                    		jz	short ps2_30_problem
 12963 000014E3 803E[1E00]15            		cmp	byte [prevoper], 15h
 12964                                  					; apparently function 15h fails, too
 12965 000014E8 752D                    		jnz	short ps2_special_stuff_done
 12966                                  ps2_30_problem:				
 12967 000014EA 50                      		push	ax
 12968 000014EB B401                    		mov	ah, 1
 12969                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 12970                                  		; 17/10/2022
 12971 000014ED 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 12972                                  		;call	call_orig13	; call far 70:797h
 12973                                  					; call far KERNEL_SEGMENT:call_orig13
 12974 000014F2 58                      		pop	ax
 12975 000014F3 EB22                    		jmp	short ps2_special_stuff_done
 12976                                  ; ---------------------------------------------------------------------------
 12977                                  
 12978                                  ; 17/10/2022
 12979                                  ; 16/10/2022
 12980                                  
 12981                                  ; here is the actual int13 handler
 12982                                  
 12983                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 12984                                  
 12985                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 12986                                  ; vectoring up here from Bios_Data
 12987                                  
 12988                                  		; 19/10/2022
 12989 000014F5 1E                      		push	ds		; save caller's ds register first thing
 12990                                  		;;mov	ds, word [cs:0030h]
 12991                                  					; and set up our own ds -> Bios_Data
 12992 000014F6 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12993                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 12994                                  					; = [02C7h:0030h] = [0070h:25A0h]
 12995                                  
 12996                                  ; let the operation proceed. if there is a dma violation, then we do things
 12997                                  
 12998 000014FB A3[1E00]                		mov	[prevoper], ax	; save request
 12999 000014FE 80FC05                  		cmp	ah, 5		; romformat
 13000 00001501 74A0                    		jz	short format_special_stuff
 13001                                  					; go do special stuff for format
 13002                                   format_special_stuff_done:		
 13003 00001503 803E[3105]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 13004 00001508 75AA                    		jnz	short ec35_special_stuff
 13005                                  					; go handle it out of line if so
 13006                                  ec35_special_stuff_done:
 13007                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h		
 13008 0000150A 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13009                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13010                                  		
 13011 0000150F 9C                      		pushf			; save result flags
 13012                                  		
 13013 00001510 803E[3E06]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 13014                                  					; mdl_ps2_30
 13015 00001515 74C5                    		jz	short ps2_special_stuff
 13016                                  					; exit mainline to address special
 13017                                  ps2_special_stuff_done:			; ps2/30 problem if so		
 13018 00001517 9D                      		popf
 13019 00001518 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 13020                                  ret_from_i13:				
 13021 0000151A 1F                      		pop	ds
 13022 0000151B CA0200                  		retf	2		; restore ds &	iret w/flags
 13023                                  ; ---------------------------------------------------------------------------
 13024                                  
 13025                                  ; most of our code exits through here. If carry isn't set, then
 13026                                  ; just do a simple exit. Else doublecheck that we aren't getting
 13027                                  ; a changeline error.
 13028                                  
 13029                                  i13ret_ck_chglinerr:			
 13030 0000151E 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 13031                                  i13_ret_error:				
 13032 00001520 80FC06                  		cmp	ah, 6		; did i	see a change event?
 13033 00001523 7513                    		jnz	short int13b	; skip if wrong	error
 13034 00001525 08D2                    		or	dl, dl		; is this for the hard disk?
 13035 00001527 780F                    		js	short int13b	; yes, ignore
 13036 00001529 803E[7700]00            		cmp	byte [fhave96], 0
 13037 0000152E 7408                    		jz	short int13b	; just in case ROM returned this
 13038                                  					; error	even though it told us it
 13039                                  					; never	would
 13040 00001530 53                      		push	bx
 13041 00001531 BB4000                  		mov	bx, 40h		; fchanged
 13042 00001534 E8B203                  		call	set_changed_dl
 13043 00001537 5B                      		pop	bx
 13044                                  int13b:					
 13045 00001538 F9                      		stc			; now return the error
 13046 00001539 EBDF                    		jmp	short ret_from_i13
 13047                                  ; ---------------------------------------------------------------------------
 13048                                  
 13049                                  ; some kind of error occurred. see if it is dma violation
 13050                                  
 13051                                  goterr13:				
 13052 0000153B 80FC09                  		cmp	ah, 9		; dma error?
 13053 0000153E 747C                    		jz	short gotdmaerr
 13054                                  goterr13_xxxx:				
 13055 00001540 80FC11                  		cmp	ah, 11h		; ecc error?
 13056 00001543 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 13057 00001545 803E[3806]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 13058 0000154A 74D4                    		jz	short i13_ret_error
 13059                                  
 13060 0000154C 803E[1F00]02            		cmp	byte [prevoper+1], 2
 13061                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 13062                                  					; (2 = romread)
 13063                                  					; ECC correction only applies to reads
 13064 00001551 75CD                    		jnz	short i13_ret_error
 13065                                  
 13066 00001553 30E4                    		xor	ah, ah
 13067                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 13068                                  		; 17/10/2022
 13069 00001555 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13070                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13071                                  					; call far 70:797h
 13072 0000155A A1[1E00]                		mov	ax, [prevoper]
 13073 0000155D 30E4                    		xor	ah, ah		; return code =	no error
 13074 0000155F 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 13075 00001561 74B7                    		jz	short ret_from_i13 ; return with carry clear
 13076 00001563 53                      		push	bx
 13077 00001564 51                      		push	cx
 13078 00001565 52                      		push	dx
 13079 00001566 A2[2000]                		mov	[number_of_sec], al
 13080                                  loop_ecc:				
 13081 00001569 B80102                  		mov	ax, 201h	; read one sector
 13082                                  
 13083                                  ; we do reads one sector at a time. this ensures that we will eventually
 13084                                  ; finish the request since ecc errors on one sector do read in that sector.
 13085                                  ;
 13086                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 13087                                  ; that attempt to read more sectors than are available on a particular
 13088                                  ; track.
 13089                                  ;
 13090                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 13091                                  ; this request.
 13092                                  ;
 13093                                  ; at this point, all registers are set up for the call to orig13, except
 13094                                  ; that there may be a starting sector number that is bigger than the number
 13095                                  ; of sectors on a track.
 13096                                  ;
 13097 0000156C E88DFE                  		call	check_wrap	; get correct parameters for int 13
 13098                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 13099                                  		; 17/10/2022
 13100 0000156F 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13101                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13102 00001574 730C                    		jnb	short ok11_op
 13103 00001576 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 13104 00001579 741B                    		jz	short handle_dma_during_ecc
 13105 0000157B 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 13106 0000157E 7510                    		jnz	short ok11_exit_err
 13107                                  		; 10/12/2022
 13108                                  		; xor ax ax -> ah = 0
 13109                                  		;mov	ah, 0		; ecc error. reset the system again.
 13110 00001580 31C0                    		xor	ax, ax		; clear	the error code so that if this
 13111                                  					; was the last sector, no error	code
 13112                                  					; will be returned for the corrected
 13113                                  					; read.	(clear carry too.)
 13114                                  ok11_op:				
 13115 00001582 FE0E[2000]              		dec	byte [number_of_sec]
 13116 00001586 7409                    		jz	short ok11_exit	; all done?
 13117 00001588 FEC1                    		inc	cl		; advance sector number
 13118                                  					; add 200h to address
 13119 0000158A FEC7                    		inc	bh
 13120 0000158C FEC7                    		inc	bh
 13121 0000158E EBD9                    		jmp	short loop_ecc
 13122                                  ; ---------------------------------------------------------------------------
 13123                                  
 13124                                  ; locate error returns centrally
 13125                                  
 13126                                  ok11_exit_err:				
 13127 00001590 F9                      		stc			; set carry bit again.
 13128                                  ok11_exit:				
 13129 00001591 5A                      		pop	dx
 13130 00001592 59                      		pop	cx
 13131 00001593 5B                      		pop	bx
 13132 00001594 EB88                    		jmp	short i13ret_ck_chglinerr
 13133                                  ; ---------------------------------------------------------------------------
 13134                                  
 13135                                  ; do the single sector read again, this time into our temporary
 13136                                  ; buffer, which is guaranteed not to have a DMA error, then
 13137                                  ; move the data to its proper location and proceed
 13138                                  
 13139                                  handle_dma_during_ecc:			
 13140 00001596 06                      		push	es
 13141 00001597 53                      		push	bx
 13142 00001598 BB[4E01]                		mov	bx, disksector
 13143 0000159B 1E                      		push	ds
 13144 0000159C 07                      		pop	es		; point es:bx to buffer
 13145 0000159D B80102                  		mov	ax, 201h	; read one sector
 13146                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 13147                                  		; 17/10/2022
 13148 000015A0 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13149                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13150 000015A5 5B                      		pop	bx
 13151 000015A6 07                      		pop	es
 13152 000015A7 7305                    		jnb	short handle_dma_during_ecc_noerr
 13153 000015A9 80FC11                  		cmp	ah, 11h
 13154 000015AC 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 13155                                  
 13156                                  ; now we're kosher. Copy the data to where it belongs and resume
 13157                                  ; the ECC looping code.
 13158                                  
 13159                                  handle_dma_during_ecc_noerr:		
 13160 000015AE 56                      		push	si
 13161 000015AF 57                      		push	di
 13162 000015B0 89DF                    		mov	di, bx
 13163 000015B2 BE[4E01]                		mov	si, disksector
 13164 000015B5 E829FE                  		call	move_sector
 13165 000015B8 5F                      		pop	di
 13166 000015B9 5E                      		pop	si
 13167 000015BA EBC6                    		jmp	short ok11_op
 13168                                  ; ---------------------------------------------------------------------------
 13169                                  
 13170                                  ; we truly have a dma violation. restore register ax and retry the
 13171                                  ; operation as best we can.
 13172                                  
 13173                                  gotdmaerr:				
 13174 000015BC A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 13175 000015BF FB                      		sti
 13176 000015C0 80FC02                  		cmp	ah, 2		; romread
 13177 000015C3 723B                    		jb	short i13_done_dmaerr
 13178                                  					; just pass dma error thru for
 13179                                  					; functions we don't handle
 13180 000015C5 80FC04                  		cmp	ah, 4		; romverify
 13181 000015C8 743C                    		jz	short intverify
 13182 000015CA 80FC05                  		cmp	ah, 5		; romformat
 13183 000015CD 7448                    		jz	short intformat
 13184 000015CF 772F                    		ja	short i13_done_dmaerr
 13185                                  
 13186                                  ; we are doing a read/write call. check for dma problems
 13187                                  
 13188                                  ;	******** set up stack frame here!!! ********
 13189                                  
 13190 000015D1 52                      		push	dx
 13191 000015D2 51                      		push	cx
 13192 000015D3 53                      		push	bx
 13193 000015D4 50                      		push	ax
 13194 000015D5 55                      		push	bp
 13195 000015D6 89E5                    		mov	bp, sp
 13196 000015D8 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 13197 000015DA D1E2                    		shl	dx, 1
 13198 000015DC D1E2                    		shl	dx, 1
 13199 000015DE D1E2                    		shl	dx, 1
 13200 000015E0 D1E2                    		shl	dx, 1		; segment converted to absolute	address
 13201 000015E2 01DA                    		add	dx, bx		; combine with offset
 13202 000015E4 81C2FF01                		add	dx, 511		; simulate a transfer
 13203                                  
 13204                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 13205                                  ; we skip the first transfer and perform the remaining buffering and transfer
 13206                                  
 13207 000015E8 7303                    		jnb	short no_skip_first
 13208 000015EA E98300                  		jmp	bufferx		; restore dh=head & do buffer
 13209                                  ; ---------------------------------------------------------------------------
 13210                                  
 13211                                  no_skip_first:				
 13212 000015ED D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 13213 000015EF B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 13214 000015F1 28F4                    		sub	ah, dh
 13215                                  
 13216                                  ; ah is now the number of sectors that we can successfully write in this
 13217                                  ; segment. if this number is above or equal to the requested number, then we
 13218                                  ; continue the operation as normal. otherwise, we break it into pieces.
 13219                                  ;
 13220                                  ; wait a sec. this is goofy. the whole reason we got here in the
 13221                                  ; first place is because we got a dma error. so it's impossible
 13222                                  ; for the whole block to fit, unless the dma error was returned
 13223                                  ; in error.
 13224                                  
 13225 000015F3 38C4                    		cmp	ah, al		; can we fit it	in?
 13226 000015F5 7236                    		jb	short doblock	; no, perform blocking.
 13227                                  
 13228                                  ; yes, the request fits. let it happen.
 13229                                  
 13230 000015F7 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13231                                  					; set up head number
 13232 000015FA E888FE                  		call	doint
 13233 000015FD E9D900                  		jmp	bad13		; and return from this place
 13234                                  ; ---------------------------------------------------------------------------
 13235                                  
 13236                                  i13_done_dmaerr:			
 13237 00001600 B409                    		mov	ah, 9		; pass dma error thru to caller
 13238 00001602 F9                      		stc
 13239 00001603 E914FF                  		jmp	ret_from_i13	; return with error,
 13240                                  					; we know it's not a changeline error
 13241                                  ; ---------------------------------------------------------------------------
 13242                                  
 13243                                  ; verify the given sectors. place the buffer pointer into our space.
 13244                                  
 13245                                  intverify:				
 13246 00001606 06                      		push	es		; save caller's dma address
 13247 00001607 53                      		push	bx
 13248 00001608 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 13249 00001609 07                      		pop	es
 13250                                  dosimple:				
 13251 0000160A BB[4E01]                		mov	bx, disksector
 13252                                  					; do the i/o from Bios_Data:disksector
 13253                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 13254                                  		; 17/10/2022
 13255 0000160D 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13256                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13257 00001612 5B                      		pop	bx
 13258 00001613 07                      		pop	es
 13259 00001614 E907FF                  		jmp	i13ret_ck_chglinerr
 13260                                  ; ---------------------------------------------------------------------------
 13261                                  
 13262                                  ; format operation. copy the parameter table into Bios_Data:disksector
 13263                                  
 13264                                  intformat:				
 13265 00001617 06                      		push	es
 13266 00001618 53                      		push	bx
 13267 00001619 56                      		push	si
 13268 0000161A 57                      		push	di
 13269 0000161B 1E                      		push	ds
 13270                                  
 13271                                  ; point ds to the caller's dma buffer, es to Bios_Data
 13272                                  ; in other words, swap (ds, es)
 13273                                  
 13274 0000161C 06                      		push	es
 13275 0000161D 1E                      		push	ds
 13276 0000161E 07                      		pop	es
 13277 0000161F 1F                      		pop	ds
 13278 00001620 89DE                    		mov	si, bx
 13279 00001622 BF[4E01]                		mov	di, disksector
 13280 00001625 E8B9FD                  		call	move_sector	; user's data into Bios_Data:disksector
 13281 00001628 1F                      		pop	ds
 13282 00001629 5F                      		pop	di
 13283 0000162A 5E                      		pop	si		; do the i/o from
 13284 0000162B EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 13285                                  ; ---------------------------------------------------------------------------
 13286                                  
 13287                                  ; we can't fit the request into the entire block. perform the operation on
 13288                                  ; the first block.
 13289                                  ;
 13290                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 13291                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 13292                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 13293                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 13294                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 13295                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 13296                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 13297                                  ; doblock will handle the first block of requested sectors within the
 13298                                  ; boundary of this safe value.
 13299                                  
 13300                                  doblock:
 13301                                  
 13302                                  ; try to get the # of sectors/track from bds via rom drive number.
 13303                                  ; for any mini disks installed, here we have to pray that they have the
 13304                                  ; same # of sector/track as the main dos partition disk drive.
 13305                                  				
 13306 0000162D 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 13307                                  					; get head #, drive #
 13308 00001630 51                      		push	cx
 13309 00001631 06                      		push	es
 13310 00001632 57                      		push	di		; ah - # of sectors before dma boundary
 13311                                  					; al - requested # of sectors for i/o.
 13312 00001633 E83BFE                  		call	find_bds
 13313 00001636 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13314                                  		; 12/12/2022
 13315 0000163A 26F6452301              		test	byte [es:di+23h], 1
 13316                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13317 0000163F 5F                      		pop	di
 13318 00001640 07                      		pop	es
 13319 00001641 88E0                    		mov	al, ah		; set al=ah for	floppies
 13320 00001643 7404                    		jz	short doblockflop ; they are track by track operation
 13321 00001645 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 13322 00001647 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 13323                                  doblockflop:				
 13324 00001649 59                      		pop	cx
 13325                                  doblockcontinue:			
 13326 0000164A 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 13327 0000164C 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 13328 0000164E 50                      		push	ax
 13329 0000164F 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 13330 00001651 EB03                    		jmp	short doblockdoint
 13331                                  ; ---------------------------------------------------------------------------
 13332                                  
 13333                                  doblocklast:				
 13334 00001653 88C4                    		mov	ah, al
 13335 00001655 50                      		push	ax
 13336                                  doblockdoint:				; let ah = al =	# of sectors for this shot	
 13337 00001656 E82CFE                  		call	doint
 13338 00001659 727E                    		jb	short bad13	; something happened, bye!
 13339 0000165B 58                      		pop	ax
 13340 0000165C 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 13341                                  					; decrement by the successful operation
 13342 0000165F 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 13343 00001661 00E7                    		add	bh, ah		; advance dma addres
 13344 00001663 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 13345 00001665 38C4                    		cmp	ah, al		; check	the previous value
 13346 00001667 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 13347                                  					; then we are done already.
 13348 00001669 28E0                    		sub	al, ah		; otherwise,
 13349                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 13350 0000166B E88EFD                  		call	check_wrap	; get new cx, dh for the next operation.
 13351 0000166E EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 13352                                  ; ---------------------------------------------------------------------------
 13353                                  
 13354                                  bufferx:				
 13355 00001670 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13356                                  					; set up head number
 13357                                  buffer:					
 13358 00001673 53                      		push	bx
 13359 00001674 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13360 00001677 80FC03                  		cmp	ah, 3		; romwrite
 13361 0000167A 7525                    		jnz	short doread	;
 13362                                  					
 13363                                  ; copy the offending sector into local buffer
 13364                                  
 13365 0000167C 06                      		push	es
 13366 0000167D 1E                      		push	ds
 13367 0000167E 56                      		push	si
 13368 0000167F 57                      		push	di
 13369 00001680 1E                      		push	ds		; exchange segment registers
 13370 00001681 06                      		push	es
 13371 00001682 1F                      		pop	ds
 13372 00001683 07                      		pop	es
 13373 00001684 BF[4E01]                		mov	di, disksector	; where to move
 13374 00001687 57                      		push	di		; save it
 13375 00001688 89DE                    		mov	si, bx		; source
 13376 0000168A E854FD                  		call	move_sector	; move sector into local buffer
 13377 0000168D 5B                      		pop	bx		; new transfer address
 13378                                  					; (es:bx = Bios_Data:diskbuffer)
 13379 0000168E 5F                      		pop	di		; restore caller's di & si
 13380 0000168F 5E                      		pop	si
 13381 00001690 1F                      		pop	ds		; restore Bios_Data
 13382                                  
 13383                                  ; see if we are wrapping around a track or head
 13384                                  
 13385 00001691 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 13386                                  					; get drive number
 13387 00001693 8A5608                  		mov	dl, [bp+8]
 13388 00001696 E863FD                  		call	check_wrap	; sets up registers if wrap-around
 13389                                  					;
 13390                                  					; ah is	function
 13391                                  					; al is	1 for single sector transfer
 13392                                  					; es:bx	is local transfer addres
 13393                                  					; cx is	track/sector number
 13394                                  					; dx is	head/drive number
 13395                                  					; si,di	unchanged
 13396 00001699 E8E9FD                  		call	doint
 13397 0000169C 07                      		pop	es		; restore caller's dma segment
 13398 0000169D 723A                    		jb	short bad13	; go clean up
 13399 0000169F EB22                    		jmp	short dotail
 13400                                  ; ---------------------------------------------------------------------------
 13401                                  
 13402                                  ; reading a sector. do int first, then move things around
 13403                                  
 13404                                  doread:					
 13405 000016A1 06                      		push	es
 13406 000016A2 53                      		push	bx
 13407 000016A3 1E                      		push	ds		; es = Bios_Code
 13408 000016A4 07                      		pop	es
 13409 000016A5 BB[4E01]                		mov	bx, disksector
 13410 000016A8 B001                    		mov	al, 1
 13411 000016AA 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13412                                  					; get drive number
 13413 000016AD E84CFD                  		call	check_wrap	;
 13414                                  					; ah = function
 13415                                  					; al = 1 for single sector
 13416                                  					; es:bx	points to local	buffer
 13417                                  					; cx, dx are track/sector, head/drive
 13418 000016B0 E8D2FD                  		call	doint
 13419 000016B3 5B                      		pop	bx
 13420 000016B4 07                      		pop	es
 13421 000016B5 7222                    		jb	short bad13
 13422 000016B7 56                      		push	si
 13423 000016B8 57                      		push	di
 13424 000016B9 89DF                    		mov	di, bx
 13425 000016BB BE[4E01]                		mov	si, disksector
 13426 000016BE E820FD                  		call	move_sector
 13427 000016C1 5F                      		pop	di
 13428 000016C2 5E                      		pop	si
 13429                                  
 13430                                  ; note the fact that we've done 1 more sector
 13431                                  
 13432                                  dotail:					
 13433 000016C3 5B                      		pop	bx		; retrieve new dma area
 13434 000016C4 80C702                  		add	bh, 2		; advance over sector
 13435 000016C7 41                      		inc	cx
 13436 000016C8 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 13437 000016CB F8                      		clc
 13438 000016CC FEC8                    		dec	al
 13439 000016CE 7409                    		jz	short bad13	; no more i/o
 13440                                  
 13441                                  ; see if we wrap around a track or head boundary with starting sector
 13442                                  ; we already have the correct head number to pass to check_wrap
 13443                                  
 13444 000016D0 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13445 000016D3 E826FD                  		call	check_wrap
 13446 000016D6 E8ACFD                  		call	doint
 13447                                  
 13448                                  ; we are done. ax has the final code; we throw away what we got before
 13449                                  
 13450                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 13451                                  ;	   or we've finished. If carry is set now, our only
 13452                                  ;	   hope for salvation is that it was a read operation
 13453                                  ;	   and the error code is ECC error. In that case, we'll
 13454                                  ;	   just pop the registers and go do the old ECC thing.
 13455                                  ;	   When the DMA error that got us here in the first
 13456                                  ;	   place occurs, it'll handle it.
 13457                                  
 13458                                  bad13:					
 13459 000016D9 89EC                    		mov	sp, bp
 13460 000016DB 5D                      		pop	bp
 13461 000016DC 5B                      		pop	bx
 13462 000016DD 5B                      		pop	bx
 13463 000016DE 59                      		pop	cx
 13464 000016DF 5A                      		pop	dx
 13465 000016E0 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 13466 000016E2 E935FE                  		jmp	ret_from_i13	; non-error exit
 13467                                  ; ---------------------------------------------------------------------------
 13468                                  
 13469                                  xgoterr13_xxxx:				
 13470 000016E5 E958FE                  		jmp	goterr13_xxxx
 13471                                  
 13472                                  ; ---------------------------------------------------------------------------
 13473                                  		; 10/12/2022
 13474                                  		;db 	0
 13475                                  ; ---------------------------------------------------------------------------
 13476                                  
 13477                                  ;Bios_Code ends
 13478                                  
 13479                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13480                                  
 13481                                  ;-----------------------------------------------------------------------------
 13482                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 13483                                  ;-----------------------------------------------------------------------------
 13484                                  ; 17/03/2019 - Retro DOS v4.0
 13485                                  
 13486                                  		; 19/10/2022
 13487                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 13488 000016E8 8A26[7500]              		mov	ah, [drvmax]
 13489 000016EC BF[8706]                		mov	di, dskdrvs
 13490 000016EF 1E                      		push	ds		; pass result in es:di
 13491 000016F0 07                      		pop	es
 13492 000016F1 E9C4EE                  		jmp	SetPtrSav
 13493                                  
 13494                                  ; =============== S U B	R O U T	I N E =======================================
 13495                                  
 13496                                  ;---------------------------------------------------------------------------
 13497                                  ; install_bds installs a bds at location es:di into the current linked list of
 13498                                  ; bds maintained by this device driver. it places the bds at the end of the
 13499                                  ; list. Trashes (at least) ax, bx, di, si
 13500                                  ;---------------------------------------------------------------------------
 13501                                  
 13502                                  install_bds:		
 13503 000016F4 1E                      		push	ds		; save Bios_Data segment
 13504 000016F5 BE[1901]                		mov	si, start_bds	; beginning of chain
 13505                                  
 13506                                  		; ds:si now points to link to first bds
 13507                                  		; assume bds list is non-empty
 13508                                  loop_next_bds:				
 13509 000016F8 C534                    		lds	si, [si]	; [si+BDS.link]
 13510                                  					; fetch	next bds
 13511 000016FA 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 13512 000016FE 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 13513                                  					; drive	with new one?
 13514 00001701 7518                    		jnz	short next_bds
 13515 00001703 B310                    		mov	bl, 10h		; fi_am_mult
 13516 00001705 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13517                                  					; set both of them to i_am_mult	if so
 13518 00001709 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 13519 0000170C 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 13520                                  					; we don't own it
 13521 00001711 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 13522                                  					; determine if changeline available
 13523 00001714 80E302                  		and	bl, 2		; fchangeline
 13524 00001717 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13525                                  next_bds:				
 13526 0000171B 833CFF                  		cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 13527                                  					; are we at end	of list?
 13528 0000171E 75D8                    		jnz	short loop_next_bds
 13529 00001720 8C4402                  		mov	word [si+2], es ; [si+BDS.link+2],es
 13530                                  					; install bds
 13531 00001723 893C                    		mov	[si], di
 13532 00001725 26C705FFFF              		mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 13533                                  					; set next pointer to null
 13534 0000172A 1F                      		pop	ds
 13535                                  
 13536                                  ; 16/10/2022 (MSDOS 6.0 Code)
 13537                                  ;
 13538                                  ; **** If the new drive has a higher EOT value, we must alter the
 13539                                  ;      'eot' variable appropriately.
 13540                                  ;
 13541                                  ;		; 01/06/2019
 13542                                  ;		;mov	al,[es:di+52]
 13543                                  ;		mov	al,[es:di+BDS.rsecpertrack]
 13544                                  ;
 13545                                  ;		cmp	al,[eot]
 13546                                  ;		jbe	short _eot_ok
 13547                                  ;		mov	[eot],al
 13548                                  
 13549 0000172B C3                      		retn
 13550                                  
 13551                                  ; ---------------------------------------------------------------------------
 13552                                  
 13553                                  ; 17/10/2022
 13554                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 13555                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 13556                                  ; 09/12/2022
 13557                                  DRVLET equ drvlet
 13558                                  SNGMSG equ sngmsg
 13559                                  
 13560                                  ; 16/10/2022
 13561                                  
 13562                                  ;---------------------------------------------------------------------------
 13563                                  ;  ask to swap the disk in drive a:
 13564                                  ;	es:di -> bds
 13565                                  ;	ds -> Bios_Data
 13566                                  ;---------------------------------------------------------------------------
 13567                                  
 13568                                  		; 19/10/2022
 13569 0000172C F606[CE08]01            swpdsk:		test	byte [IsWin386], 1			
 13570                                  		;test	ds:IsWin386, 1	; Is win386 present?
 13571 00001731 7405                    		jz	short no_win386	; no, skip SetFocus
 13572                                  		
 13573                                  		; set focus to the correct VM
 13574                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 13575                                  		; 17/10/2022
 13576 00001733 9A[CF08]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 13577                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 13578                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 13579                                  no_win386:				
 13580 00001738 51                      		push	cx
 13581 00001739 52                      		push	dx
 13582 0000173A 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 13583                                  					; get the drive	letter
 13584                                  
 13585                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 13586                                  ;           then existing dsk is drive A & vice versa
 13587                                  
 13588 0000173E 88D6                    		mov	dh, dl
 13589 00001740 80F601                  		xor	dh, 1
 13590 00001743 29C9                    		sub	cx, cx		; nobody has handled swap disk
 13591 00001745 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 13592                                  					; broad	cast code for swap disk
 13593                                  					; Broadcast it
 13594 00001748 CD2F                    		int	2Fh	
 13595 0000174A 41                      		inc	cx		; cx == -1 ?
 13596 0000174B 741E                    		jz	short swpdsk9	; somebody has handled it
 13597                                  
 13598                                  ; using a different drive in a one drive system so request the user change disks
 13599                                  
 13600 0000174D 80C241                  		add	dl, 'A'
 13601                                  		; 17/10/2022
 13602 00001750 2E8816[8A17]            		mov	[cs:DRVLET], dl
 13603                                  		; 16/10/2022
 13604                                  		;;mov	byte [cs:drvlet], dl
 13605                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 13606                                  					; 0070h:3D54h =	2C7h:17E4h
 13607 00001755 BE[6E17]                		mov	si, SNGMSG
 13608                                  		;mov	si, 17C8h	; sngmsg
 13609                                  					; 0070h:3D38h =	2C7h:17C8h
 13610 00001758 53                      		push	bx
 13611 00001759 2E                      		cs
 13612 0000175A AC                      		lodsb			; get the next character of the message
 13613                                  		;lods	byte ptr cs:[si]
 13614                                  wrmsg_loop:				
 13615 0000175B CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 13616                                  					; AL = character to display
 13617 0000175D 2E                      		cs
 13618 0000175E AC                      		lodsb
 13619                                  		;lods	byte ptr cs:[si] ; cs lodsb
 13620                                  					; get the next character of the	message
 13621 0000175F 08C0                    		or	al, al
 13622 00001761 75F8                    		jnz	short wrmsg_loop
 13623 00001763 E8A1EA                  		call	con_flush	; flush out keyboard queue
 13624                                  					; call rom-bios
 13625 00001766 30E4                    		xor	ah, ah
 13626 00001768 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 13627                                  					; Return: AH = scan code, AL = character
 13628 0000176A 5B                      		pop	bx
 13629                                  swpdsk9:				
 13630 0000176B 5A                      		pop	dx
 13631 0000176C 59                      		pop	cx
 13632 0000176D C3                      		retn
 13633                                  
 13634                                  ; ---------------------------------------------------------------------------
 13635                                  
 13636                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13637                                  
 13638                                  ;--------------------------------------------------------
 13639                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 13640                                  ;--------------------------------------------------------
 13641                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 13642                                  ;--------------------------------------------------------
 13643                                  ; 17/03/2019 - Retro DOS v4.0
 13644                                  
 13645                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 13646 0000176E 0D0A                    sngmsg:		db 0Dh,0Ah
 13647 00001770 496E73657274206469-     		db 'Insert diskette for drive '
 13647 00001779 736B6574746520666F-
 13647 00001782 7220647269766520   
 13648                                  
 13649                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 13650 0000178A 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 13650 00001793 65737320616E79206B-
 13650 0000179C 6579207768656E2072-
 13650 000017A5 656164790D0A       
 13651 000017AB 0A00                    		db 0Ah,0
 13652                                  
 13653                                  ; =============== S U B	R O U T	I N E =======================================
 13654                                  
 13655                                  ;---------------------------------------------------------------------------
 13656                                  ; input : es:di points to current bds for drive.
 13657                                  ; return : zero set if no open files
 13658                                  ;	   zero reset if open files
 13659                                  ;---------------------------------------------------------------------------
 13660                                  
 13661                                  chkopcnt:		
 13662 000017AD 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 13663 000017B2 C3                      		retn
 13664                                  
 13665                                  ; =============== S U B	R O U T	I N E =======================================
 13666                                  
 13667                                  ;---------------------------------------------------------------------------
 13668                                  ; at media check time, we need to really get down and check what the change is.
 13669                                  ; this is guaranteed to be expensive.
 13670                                  ;
 13671                                  ;	es:di -> bds, ds -> Bios_Data
 13672                                  ;---------------------------------------------------------------------------
 13673                                  
 13674                                  mediacheck:	
 13675 000017B3 E885F0                  		call	checksingle	; make sure correct disk is in place
 13676 000017B6 31F6                    		xor	si, si
 13677 000017B8 E85501                  		call	haschange
 13678 000017BB 742F                    		jz	short mediaret
 13679 000017BD E84401                  		call	checkromchange
 13680 000017C0 752B                    		jnz	short mediadovolid
 13681 000017C2 50                      		push	ax
 13682 000017C3 52                      		push	dx
 13683 000017C4 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13684                                  					; set logical drive number
 13685 000017C8 B416                    		mov	ah, 16h
 13686 000017CA CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 13687                                  					; DL = drive to	check
 13688                                  					; Return: AH = disk change status
 13689 000017CC 5A                      		pop	dx
 13690 000017CD 58                      		pop	ax
 13691 000017CE 721D                    		jb	short mediadovolid
 13692 000017D0 BE0100                  		mov	si, 1		; signal no change
 13693                                  
 13694                                  ; there are some drives with changeline that "lose" the changeline indication
 13695                                  ; if a different drive is accessed after the current one. in order to avoid
 13696                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 13697                                  ; is not active and we are accessing a different drive from the last one.
 13698                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 13699                                  ; status.
 13700                                  		; 19/10/2022
 13701 000017D3 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 13702 000017D7 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 13703                                  					; (If the last drive accessed is not current drive
 13704                                  					; media	change status may be incorrect.	So,
 13705                                  					; "I don't now" will be returned even if it is indicated
 13706                                  					; as media is not changed.)
 13707 000017DB 740F                    		jz	short mediaret	; (same	drive,
 13708                                  					; media	changeline indication is reliable)
 13709                                  
 13710                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 13711                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 13712                                  ; "not changed" here since the 2 second test said no change.)
 13713                                  
 13714 000017DD 50                      		push	ax
 13715 000017DE 51                      		push	cx
 13716 000017DF 52                      		push	dx
 13717 000017E0 E870ED                  		call	Check_Time_Of_Access
 13718 000017E3 5A                      		pop	dx
 13719 000017E4 59                      		pop	cx
 13720 000017E5 58                      		pop	ax
 13721 000017E6 09F6                    		or	si, si
 13722 000017E8 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 13723                                  					; (volume id will be checked)
 13724 000017EA 31F6                    		xor	si, si		; return "i don't know"
 13725                                  mediaret:				
 13726 000017EC C3                      		retn
 13727                                  ; ---------------------------------------------------------------------------
 13728                                  
 13729                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 13730                                  ; because this may be different since we only set medbyt when doing a read
 13731                                  ; or write.
 13732                                  
 13733                                  mediadovolid:				
 13734 000017ED E807EE                  		call	GetBp		; build	a new bpb in current bds
 13735 000017F0 72FA                    		jb	short mediaret
 13736 000017F2 E82D00                  		call	check_vid
 13737 000017F5 73F5                    		jnb	short mediaret
 13738 000017F7 E9D6F3                  		jmp	maperror	; fix up al for	return to dos
 13739                                  ; ---------------------------------------------------------------------------
 13740                                  
 13741                                  ; simple, quick check of latched change. if no indication, then return
 13742                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 13743                                  ; return and set al = 15 (for invalid media change) which will be returned to
 13744                                  ; dos.
 13745                                  ;
 13746                                  ; for dos 3.3, this will work only for the drive that has changeline.
 13747                                  
 13748                                  ;	call with es:di -> bds, ds -> Bios_Data
 13749                                  ;	***** warning:  this routine will return one level up on the stack
 13750                                  ;			if an error occurs!
 13751                                  
 13752                                  checklatchio:	
 13753                                  
 13754                                  ; if returning fake bpb then assume the disk has not changed
 13755                                  			
 13756 000017FA E8B0FF                  		call	chkopcnt
 13757 000017FD 741B                    		jz	short checkret	; done if zero
 13758                                  
 13759                                  ; check for past rom indications. if no rom change indicated, then return ok.
 13760                                  
 13761 000017FF E80201                  		call	checkromchange
 13762 00001802 7416                    		jz	short checkret
 13763                                  
 13764                                  ; we now see that a change line has been seen in the past. let's do the
 13765                                  ; expensive verification.
 13766                                  
 13767 00001804 E8F0ED                  		call	GetBp		; build	bpb in current bds
 13768 00001807 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 13769 00001809 E81600                  		call	check_vid
 13770 0000180C 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 13771 0000180E 09F6                    		or	si, si		; is changed for sure?
 13772 00001810 7908                    		jns	short checkret
 13773 00001812 E87D00                  		call	returnvid
 13774                                  checklatchret:				
 13775 00001815 E8B8F3                  		call	maperror	; fix up al for	return to dos
 13776                                  ret_no_error_map:			
 13777 00001818 F9                      		stc
 13778 00001819 5E                      		pop	si		; pop off return address
 13779                                  checkret:				
 13780 0000181A C3                      		retn
 13781                                  ; ---------------------------------------------------------------------------
 13782                                  
 13783                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 13784                                  ; only if there was a disk error. return that error code in ax.
 13785                                  ;
 13786                                  ;	called with es:di -> bds, ds -> Bios_Data
 13787                                  
 13788                                  checkfatvid:				
 13789 0000181B E8CD01                  		call	fat_check	; check	the fat	and the	vid
 13790 0000181E 09F6                    		or	si, si
 13791 00001820 7827                    		js	short changed_drv ;
 13792                                  
 13793                                  ; the fat was the same. fall into check_vid and check volume id.
 13794                                  
 13795                                  		; fall into check_vid
 13796                                  
 13797                                  ; =============== S U B	R O U T	I N E =======================================
 13798                                  
 13799                                  ; now with the extended boot record, the logic should be enhanced.
 13800                                  ;
 13801                                  ; if it is the extended boot record, then we check the volume serial
 13802                                  ; number instead of volume id. if it is different, then set si to -1.
 13803                                  ;
 13804                                  ; if it is same, then si= 1 (no change).
 13805                                  ;
 13806                                  ; if it is not the extended boot record, then just follows the old
 13807                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 13808                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 13809                                  ; should have already covered by extended boot structure checking.
 13810                                  ; so, we will return "i don't know" by setting si to 0.
 13811                                  ;
 13812                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 13813                                  ; (this will be gauranteed by a successful getbp call right before this
 13814                                  ; routine.)
 13815                                  ;
 13816                                  ;	called with es:di -> bds, ds -> bds
 13817                                  
 13818                                  		; 19/10/2022
 13819                                  check_vid:
 13820                                  
 13821                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 13822                                  ; boot signature. if it is set then go to do the extended
 13823                                  ; id check otherwise continue with code below
 13824                                  
 13825 00001822 803E[7401]29            		cmp	byte [disksector+26h], 29h
 13826                                  					; [disksector+EXT_BOOT.SIG],
 13827                                  					; EXT_BOOT_SIGNATURE
 13828 00001827 7427                    		jz	short do_ext_check_id
 13829 00001829 E8E400                  		call	haschange
 13830 0000182C 74EC                    		jz	short checkret
 13831 0000182E 31F6                    		xor	si, si
 13832 00001830 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 13833                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 13834 00001835 7411                    		jz	short checkfatret ; don't read vol id
 13835                                  					; if not fat system
 13836 00001837 E8F600                  		call	read_volume_id
 13837 0000183A 720C                    		jb	short checkfatret
 13838 0000183C E89B01                  		call	check_volume_id
 13839 0000183F BEFFFF                  		mov	si, 0FFFFh	; -1
 13840                                  					; definitely changed
 13841 00001842 7505                    		jnz	short changed_drv
 13842                                  
 13843 00001844 46                      		inc	si		; not changed
 13844                                  vid_no_changed:				
 13845 00001845 E8C200                  		call	resetchanged
 13846                                  		; 12/12/2022
 13847                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 13848                                  		;clc
 13849                                  checkfatret:				
 13850 00001848 C3                      		retn
 13851                                  ; ---------------------------------------------------------------------------
 13852                                  
 13853                                  		; 12/12/2022
 13854                                  changed_drv:
 13855 00001849 F8                      		clc			; cas -- return	no error
 13856 0000184A C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 13857                                  					; ensure that we ask rom for media
 13858 0000184F C3                      		retn			; check	next time round
 13859                                  ; ---------------------------------------------------------------------------
 13860                                  
 13861                                  ; extended id check
 13862                                  
 13863                                  ; 16/10/2022
 13864                                  
 13865                                  ; the code to check extended id is basically a check to see if the
 13866                                  ; volume serial number is still the same. the volume serial number
 13867                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 13868                                  ; ds:di points to the bds of the drive under consideration.
 13869                                  ; the bds has fields containing the high and low words 
 13870                                  ; of the volume serial number of the media in the drive.
 13871                                  ; compare these fields to the fields mentioned above. if these fields
 13872                                  ; do not match the media has changed and so we should jump to the code
 13873                                  ; starting at ext_changed else return "i don't know" status
 13874                                  ; in the register used for the changeline status and continue executing
 13875                                  ; the code given below. for temporary storage use the register which
 13876                                  ; has been saved and restored around this block.
 13877                                  ;
 13878                                  ; bds fields in inc\msbds.inc
 13879                                  
 13880                                  		; 19/10/2022
 13881                                  do_ext_check_id:			
 13882 00001850 50                      		push	ax
 13883                                  		;mov	ax, word ptr ds:disksector+27h
 13884                                  					; [DiskSector+EXT_BOOT.SERIAL]
 13885 00001851 A1[7501]                		mov	ax, [disksector+27h]
 13886 00001854 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 13887 00001858 750E                    		jnz	short ext_changed
 13888 0000185A A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 13889 0000185D 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 13890 00001861 7505                    		jnz	short ext_changed
 13891 00001863 31F6                    		xor	si, si		; 0
 13892                                  					; don't know
 13893 00001865 58                      		pop	ax
 13894 00001866 EBDD                    		jmp	short vid_no_changed
 13895                                  					; reset the flag
 13896                                  ; ---------------------------------------------------------------------------
 13897                                  
 13898                                  ext_changed:				
 13899 00001868 58                      		pop	ax
 13900 00001869 BEFFFF                  		mov	si, 0FFFFh	; -1
 13901                                  					; disk changed!
 13902                                  		; 12/12/2022
 13903                                  		; ('changed_drv' clears cf)
 13904                                  		;clc
 13905 0000186C EBDB                    		jmp	short changed_drv
 13906                                  
 13907                                  ; ---------------------------------------------------------------------------
 13908                                  
 13909                                  ; at i/o time, we detected the error. now we need to determine whether the
 13910                                  ; media was truly changed or not. we return normally if media change unknown.
 13911                                  ; and we pop off the call and jmp to harderr if we see an error.
 13912                                  ;
 13913                                  ; es:di -> bds
 13914                                  
 13915                                  checkio:				
 13916 0000186E 80FC06                  		cmp	ah, 6
 13917 00001871 75D5                    		jnz	short checkfatret
 13918 00001873 E837FF                  		call	chkopcnt
 13919 00001876 74D0                    		jz	short checkfatret
 13920 00001878 E87CED                  		call	GetBp
 13921 0000187B 7212                    		jb	short no_error_map
 13922 0000187D E89BFF                  		call	checkfatvid
 13923 00001880 7209                    		jb	short checkioret ; disk	error trying to	read in.
 13924 00001882 09F6                    		or	si, si		; is changed for sure?
 13925 00001884 7802                    		js	short checkioerr ; yes changed
 13926 00001886 45                      		inc	bp		; allow	a retry
 13927 00001887 C3                      		retn
 13928                                  ; ---------------------------------------------------------------------------
 13929                                  
 13930                                  checkioerr:				
 13931 00001888 E80700                  		call	returnvid
 13932                                  
 13933                                  checkioret:				
 13934 0000188B F9                      		stc			; make sure carry gets passed through
 13935 0000188C E9F1F2                  		jmp	harderr
 13936                                  ; ---------------------------------------------------------------------------
 13937                                  
 13938                                  no_error_map:				
 13939 0000188F E9F1F2                  		jmp	harderr2
 13940                                  
 13941                                  ; =============== S U B	R O U T	I N E =======================================
 13942                                  
 13943                                  ; return vid sets up the vid for a return to dos.
 13944                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 13945                                  ;  **** trashes si! ****
 13946                                  
 13947                                  returnvid:		
 13948 00001892 BE1600                  		mov	si, 22		; extra
 13949                                  					; offset into pointer to return	value
 13950 00001895 E80700                  		call	vid_into_packet
 13951 00001898 B406                    		mov	ah, 6
 13952 0000189A F9                      		stc
 13953 0000189B C3                      		retn
 13954                                  
 13955                                  ; ---------------------------------------------------------------------------
 13956                                  
 13957                                  ; moves the pointer to the volid for the drive into the original request packet
 13958                                  ; no attempt is made to preserve registers.
 13959                                  ;
 13960                                  ; assumes es:di -> bds
 13961                                  ; **trashes si**
 13962                                  
 13963                                  media_set_vid:				
 13964 0000189C BE0F00                  		mov	si, 15		; trans+1
 13965                                  					; return the value here	in packet
 13966                                  
 13967                                  		; fall into vid_into_packet
 13968                                  
 13969                                  ; =============== S U B	R O U T	I N E =======================================
 13970                                  
 13971                                  ; return pointer to vid in bds at es:di in packet[si]
 13972                                  
 13973                                  		; 19/10/2022
 13974                                  vid_into_packet:
 13975 0000189F 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 13976 000018A0 C51E[1200]              		lds	bx, [ptrsav]
 13977 000018A4 83C74B                  		add	di, 75		; BDS.volid
 13978 000018A7 8938                    		mov	[bx+si], di
 13979 000018A9 83EF4B                  		sub	di, 75		; BDS.volid
 13980 000018AC 8C4002                  		mov	[bx+si+2], es
 13981 000018AF 1F                      		pop	ds
 13982                                  dofloppy:	; 18/12/2022
 13983 000018B0 C3                      		retn
 13984                                  
 13985                                  ; ---------------------------------------------------------------------------
 13986                                  
 13987                                  ;----------------------------------------------------------------------------
 13988                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 13989                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 13990                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 13991                                  ;   of getbp. for 3.5" media, we just return.
 13992                                  ;
 13993                                  ;   inputs:	es:di point to correct bds for this drive
 13994                                  ;		ah has media byte
 13995                                  ;
 13996                                  ;   outputs:	carry clear
 13997                                  ;		    no registers modified
 13998                                  ;		carry set
 13999                                  ;		    al = sectors/fat
 14000                                  ;		    bh = number of root directory entries
 14001                                  ;		    bl = sectors per track
 14002                                  ;		    cx = number of sectors
 14003                                  ;		    dh = sectors per allocation unit
 14004                                  ;		    dl = number of heads
 14005                                  ;
 14006                                  ;----------------------------------------------------------------------------
 14007                                  
 14008                                  hidensity:
 14009                                  
 14010                                  ; check for correct drive
 14011                                  		
 14012                                  		; 12/12/2022
 14013 000018B1 26F6452302              		test	byte [es:di+23h], 2		
 14014                                  		;test	word [es:di+23h], 2 ; is it special?	
 14015                                  					; [es:di+BDS.flags], fchangeline
 14016 000018B6 74F8                    		jz	short dofloppy	; no, do normal floppy test
 14017                                  
 14018                                  ; we have a media byte that is pretty complex. examine drive information
 14019                                  ; table to see what kind it is.
 14020                                  
 14021 000018B8 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 14022 000018BD 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 14023                                  					; yes, use fatid...
 14024                                  ; 96 tpi drive?
 14025 000018BF 80FCF9                  		cmp	ah, 0F9h
 14026 000018C2 75EC                    		jnz	short dofloppy
 14027                                  
 14028                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 14029                                  ;------ a 720K diskette
 14030                                  
 14031 000018C4 26807D2207              		cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 14032                                  					; ffOther
 14033 000018C9 7418                    		jz	short Is720K
 14034 000018CB 26807D2209              		cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 14035                                  					; ff288
 14036 000018D0 7411                    		jz	short Is720K
 14037 000018D2 B007                    		mov	al, 7		; seven	sectors	/ fat
 14038 000018D4 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 14039                                  					; 224 root dir entries
 14040                                  					; & 0Fh sector max
 14041 000018D7 B96009                  		mov	cx, 2400	; 80*15*2
 14042                                  					; 80 tracks, 15 sectors/track,
 14043                                  					; 2 sides
 14044 000018DA BA0201                  		mov	dx, 258		; 1*256+2
 14045                                  					; sectors/allocation unit
 14046                                  					; & head max
 14047 000018DD 83C402                  		add	sp, 2		; pop off return address
 14048 000018E0 E986ED                  		jmp	Has1		; return to tail of getbp
 14049                                  ; ---------------------------------------------------------------------------
 14050                                  
 14051                                  Is720K:					
 14052 000018E3 83C402                  		add	sp, 2		; pop off return address
 14053 000018E6 E947ED                  		jmp	Has720K		; return to 720K code
 14054                                  ; ---------------------------------------------------------------------------
 14055                                  
 14056                                  		; 18/12/2022
 14057                                  ;dofloppy:				
 14058                                  		;retn
 14059                                  
 14060                                  ; =============== S U B	R O U T	I N E =======================================
 14061                                  
 14062                                  ; 16/10/2022
 14063                                  
 14064                                  ;---------------------------------------------------------------------------
 14065                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 14066                                  ;		   essentially used to indicate changeline, or format.
 14067                                  ;
 14068                                  ;   inputs:	dl contains physical drive number
 14069                                  ;		bx contains bits to set in the flag field in the bdss
 14070                                  ;   outputs:	none
 14071                                  ;   registers modified: flags
 14072                                  ;
 14073                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 14074                                  ;
 14075                                  ; in the virtual drive system we *must* flag the other drives as being changed
 14076                                  ;---------------------------------------------------------------------------
 14077                                  
 14078                                  set_changed_dl:	
 14079 000018E9 06                      		push	es
 14080 000018EA 57                      		push	di
 14081                                  		;les	di, ds:start_bds
 14082                                  		; 19/10/2022
 14083 000018EB C43E[1901]              		les	di, [start_bds]
 14084                                  
 14085                                  ; note: we assume that the list is non-empty
 14086                                  
 14087                                  scan_bds:				
 14088 000018EF 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 14089 000018F3 7504                    		jnz	short get_next_bds
 14090                                  
 14091                                  ; someone may complain, but this *always* must be done when a disk change is
 14092                                  ; noted. there are *no* other compromising circumstances.
 14093                                  
 14094 000018F5 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 14095                                  					; signal change	on other drive
 14096                                  get_next_bds:				
 14097 000018F9 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 14098                                  					; go to	next bds
 14099 000018FC 83FFFF                  		cmp	di, 0FFFFh
 14100 000018FF 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 14101 00001901 5F                      		pop	di
 14102 00001902 07                      		pop	es
 14103 00001903 C3                      		retn
 14104                                  
 14105                                  ; =============== S U B	R O U T	I N E =======================================
 14106                                  
 14107                                  ;---------------------------------------------------------------------------
 14108                                  ; checkromchange - see if external program has diddled rom change line.
 14109                                  ;
 14110                                  ;   inputs:	es:di points to current bds.
 14111                                  ;   outputs:	zero set - no change
 14112                                  ;		zero reset - change
 14113                                  ;   registers modified: none
 14114                                  ;---------------------------------------------------------------------------
 14115                                  
 14116                                  checkromchange:	
 14117                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 14118                                  		; 10/12/2022
 14119 00001904 26F6452340              		test	byte [es:di+23h], 40h
 14120                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 14121                                  					; fchanged
 14122 00001909 C3                      		retn
 14123                                  
 14124                                  ; =============== S U B	R O U T	I N E =======================================
 14125                                  
 14126                                  ;---------------------------------------------------------------------------
 14127                                  ; resetchanged - restore value of change line
 14128                                  ;
 14129                                  ;   inputs:	es:di points to current bds
 14130                                  ;   outputs:	none
 14131                                  ;   registers modified: none
 14132                                  ;---------------------------------------------------------------------------
 14133                                  
 14134                                  resetchanged:	
 14135                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 14136                                  		; 10/12/2022
 14137 0000190A 26806523BF              		and	byte [es:di+23h], 0BFh
 14138                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 14139                                  					; ~fchanged
 14140 0000190F C3                      		retn
 14141                                  
 14142                                  ; =============== S U B	R O U T	I N E =======================================
 14143                                  
 14144                                  ;---------------------------------------------------------------------------
 14145                                  ; haschange - see if drive can supply change line
 14146                                  ;
 14147                                  ;   inputs:	es:di points to current bds
 14148                                  ;   outputs:	zero set - no change line available
 14149                                  ;		zero reset - change line available
 14150                                  ;   registers modified: none
 14151                                  ;---------------------------------------------------------------------------
 14152                                  
 14153                                  haschange:
 14154                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 14155                                  		; 10/12/2022
 14156 00001910 26F6452302              		test	byte [es:di+23h], 2		
 14157                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 14158                                  					; fchangeline
 14159 00001915 C3                      		retn
 14160                                  
 14161                                  ; ---------------------------------------------------------------------------
 14162                                  
 14163                                  ; 16/10/2022
 14164                                  
 14165                                  ;-------------------------------------------------------------------------
 14166                                  ; set_volume_id      -	main routine, calls other routines.
 14167                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 14168                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 14169                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 14170                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 14171                                  ;-------------------------------------------------------------------------
 14172                                  
 14173                                  ; set_volume_id
 14174                                  ;   if drive has changeline support, read in and set the volume_id
 14175                                  ; and the last fat_id byte. if no change line support then do nothing.
 14176                                  ;
 14177                                  ;   on entry:
 14178                                  ;	es:di points to the bds for this disk.
 14179                                  ;	ah contains media byte
 14180                                  ;
 14181                                  ;   on exit:
 14182                                  ;	carry clear:
 14183                                  ;	   successful call
 14184                                  ;	carry set
 14185                                  ;	   error and ax has error code
 14186                                  
 14187                                  set_volume_id:				
 14188 00001916 52                      		push	dx		; save registers
 14189 00001917 50                      		push	ax
 14190 00001918 E8F5FF                  		call	haschange	; does drive have changeline support?
 14191 0000191B 740B                    		jz	short setvret	; no, get out
 14192 0000191D E81000                  		call	read_volume_id
 14193 00001920 7209                    		jb	short seterr
 14194 00001922 E8A200                  		call	transfer_volume_id ; copy the volume id	to special drive
 14195 00001925 E8E2FF                  		call	resetchanged	; restore value	of change line
 14196                                  setvret:				
 14197                                  		; 10/12/2022
 14198                                  		; cf = 0
 14199                                  		;clc			; no error, clear carry flag
 14200 00001928 58                      		pop	ax		; restore registers
 14201 00001929 5A                      		pop	dx
 14202 0000192A C3                      		retn
 14203                                  ; ---------------------------------------------------------------------------
 14204                                  
 14205                                  seterr:					
 14206 0000192B 5A                      		pop	dx		; pop stack but don't overwrite ax
 14207 0000192C 5A                      		pop	dx		; restore dx
 14208 0000192D C3                      		retn
 14209                                  ; ---------------------------------------------------------------------------
 14210 0000192E 0000                    root_sec:	dw 0			; root sector #
 14211                                  
 14212                                  ; 16/10/2022
 14213                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 14214                                  ; 09/12/2022
 14215                                  ROOTSEC equ root_sec
 14216                                  
 14217                                  ; =============== S U B	R O U T	I N E =======================================
 14218                                  
 14219                                  ; 16/10/2022
 14220                                  
 14221                                  ; read_volume_id read the volume id and tells if it has been changed.
 14222                                  ;
 14223                                  ;   on entry:
 14224                                  ;	es:di points to current bds for drive.
 14225                                  ;
 14226                                  ;   on exit:
 14227                                  ;	carry clear
 14228                                  ;	    si = 1  no change
 14229                                  ;	    si = 0  ?
 14230                                  ;	    si = -1 change
 14231                                  ;
 14232                                  ;	carry set:
 14233                                  ;	    error and ax has error code.
 14234                                  
 14235                                  read_volume_id:
 14236 00001930 52                      		push	dx		; preserve registers
 14237 00001931 51                      		push	cx
 14238 00001932 53                      		push	bx
 14239 00001933 50                      		push	ax
 14240 00001934 06                      		push	es		; stack the bds last
 14241 00001935 57                      		push	di
 14242 00001936 1E                      		push	ds		; point es to Bios_Data
 14243 00001937 07                      		pop	es
 14244 00001938 BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14245 0000193B BE[FE08]                		mov	si, nul_vid	; "NO NAME	 "
 14246 0000193E B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 14247 00001941 F3A4                    		rep movsb
 14248 00001943 5F                      		pop	di
 14249 00001944 07                      		pop	es
 14250 00001945 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 14251                                  					; # of fats
 14252 00001949 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 14253                                  					; sectors / fat
 14254 0000194D F6E1                    		mul	cl		; size taken by	fats
 14255 0000194F 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 14256                                  					; add on reserved sectors
 14257                                  					;
 14258                                  					; ax is	now sector # (0	based)
 14259                                  		; 17/10/2022
 14260 00001953 2EA3[2E19]              		mov	[cs:ROOTSEC], ax
 14261                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 14262                                  					; 0070h:3EFFh =	2C7h:198Fh
 14263 00001957 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 14264                                  					; # root dir entries
 14265 0000195B B104                    		mov	cl, 4		; 16 entries/sector
 14266 0000195D D3E8                    		shr	ax, cl		; divide by 16
 14267 0000195F 89C1                    		mov	cx, ax		; cx is	# of sectors to	scan
 14268                                  next_sec:				
 14269 00001961 51                      		push	cx		; save outer loop counter
 14270 00001962 2EA1[2E19]              		mov	ax, [cs:ROOTSEC]
 14271                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 14272                                  					; get sector #
 14273 00001966 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 14274                                  					; sectors / track
 14275 0000196A 31D2                    		xor	dx, dx
 14276 0000196C F7F1                    		div	cx
 14277                                  
 14278                                  ; set up registers for call to read_sector
 14279                                  
 14280 0000196E 42                      		inc	dx		; dx= sectors into track
 14281                                  					; ax= track count from 0
 14282 0000196F 88D1                    		mov	cl, dl		; sector to read
 14283 00001971 31D2                    		xor	dx, dx
 14284 00001973 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 14285                                  					; # heads on this disc
 14286 00001977 88D6                    		mov	dh, dl		; head number
 14287 00001979 88C5                    		mov	ch, al		; track	#
 14288 0000197B E8FBED                  		call	read_sector	; get first sector of the root directory,
 14289                                  					; ds:bx	-> directory sector
 14290 0000197E 7243                    		jb	short readviderr
 14291 00001980 B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 14292 00001983 B008                    		mov	al, 8		; volume label bit
 14293                                  fvid_loop:				
 14294 00001985 803F00                  		cmp	byte [bx], 0 ; end of dir?
 14295 00001988 7436                    		jz	short no_vid	; yes, no vol id
 14296 0000198A 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 14297 0000198D 7405                    		jz	short ent_loop	; yes, skip
 14298 0000198F 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 14299 00001992 7511                    		jnz	short found_vid	; jmp yes
 14300                                  ent_loop:				
 14301 00001994 83C320                  		add	bx, 32		; add length of	directory entry
 14302 00001997 E2EC                    		loop	fvid_loop
 14303 00001999 59                      		pop	cx		; outer loop
 14304 0000199A 2EFF06[2E19]            		inc	word [cs:ROOTSEC]
 14305                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 14306                                  					; next sector
 14307 0000199F E2C0                    		loop	next_sec	; continue
 14308                                  notfound:				
 14309 000019A1 31F6                    		xor	si, si
 14310 000019A3 EB16                    		jmp	short fvid_ret
 14311                                  ; ---------------------------------------------------------------------------
 14312                                  
 14313                                  found_vid:				
 14314 000019A5 59                      		pop	cx		; clean stack of outer loop counter
 14315 000019A6 89DE                    		mov	si, bx		; point	to volume_id
 14316 000019A8 06                      		push	es		; preserve current bds
 14317 000019A9 57                      		push	di
 14318 000019AA 1E                      		push	ds
 14319 000019AB 07                      		pop	es		; point es to Bios_Data
 14320 000019AC BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14321 000019AF B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 14322                                  					; length of string minus nul
 14323 000019B2 F3A4                    		rep movsb		; mov volume label to tmp_vid
 14324 000019B4 30C0                    		xor	al, al
 14325 000019B6 AA                      		stosb			; null terminate
 14326 000019B7 31F6                    		xor	si, si
 14327 000019B9 5F                      		pop	di		; restore current bds
 14328 000019BA 07                      		pop	es
 14329                                  fvid_ret:				
 14330 000019BB 58                      		pop	ax
 14331                                  		; 10/12/2022
 14332                                  		; cf = 0
 14333                                  		;clc
 14334                                  rvidret:				
 14335 000019BC 5B                      		pop	bx		; restore registers
 14336 000019BD 59                      		pop	cx
 14337 000019BE 5A                      		pop	dx
 14338 000019BF C3                      		retn
 14339                                  ; ---------------------------------------------------------------------------
 14340                                  
 14341                                  no_vid:					
 14342 000019C0 59                      		pop	cx		; clean stack of outer loop counter
 14343 000019C1 EBDE                    		jmp	short notfound	; not found
 14344                                  ; ---------------------------------------------------------------------------
 14345                                  
 14346                                  readviderr:				
 14347 000019C3 5E                      		pop	si		; trash the outer loop counter
 14348 000019C4 5E                      		pop	si		; caller's ax, return error code instead 
 14349 000019C5 EBF5                    		jmp	short rvidret
 14350                                  
 14351                                  ; =============== S U B	R O U T	I N E =======================================
 14352                                  
 14353                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 14354                                  ;
 14355                                  ; inputs:	es:di has current bds
 14356                                  ; outputs:	bds for drive has volume id from tmp
 14357                                  
 14358                                  transfer_volume_id:	
 14359 000019C7 57                      		push	di		; copy the volume id from tmp to special drive
 14360 000019C8 56                      		push	si
 14361 000019C9 51                      		push	cx
 14362 000019CA BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14363                                  		;add	di, BDS.volid
 14364 000019CD 83C74B                  		add	di, 75		; BDS.volid
 14365                                  		;mov	cx, VOLID_SIZ
 14366 000019D0 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14367 000019D3 FC                      		cld
 14368 000019D4 F3A4                    		rep movsb
 14369 000019D6 59                      		pop	cx
 14370 000019D7 5E                      		pop	si
 14371 000019D8 5F                      		pop	di
 14372 000019D9 C3                      		retn
 14373                                  
 14374                                  ; =============== S U B	R O U T	I N E =======================================
 14375                                  
 14376                                  ;  check_volume_id - compare volume id in tmp area with
 14377                                  ;		     one expected for drive
 14378                                  ;
 14379                                  ;   inputs:	es:di has current bds for drive
 14380                                  ;   outputs:	zero true means it matched
 14381                                  
 14382                                  check_volume_id:	
 14383 000019DA 57                      		push	di
 14384 000019DB 51                      		push	cx
 14385 000019DC BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14386                                  		;add	di, BDS.volid
 14387 000019DF 83C74B                  		add	di, 75		; BDS.volid
 14388                                  		;mov	cx, VOLID_SIZ
 14389 000019E2 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14390 000019E5 FC                      		cld
 14391 000019E6 F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 14392 000019E8 59                      		pop	cx
 14393 000019E9 5F                      		pop	di
 14394 000019EA C3                      		retn
 14395                                  
 14396                                  ; =============== S U B	R O U T	I N E =======================================
 14397                                  
 14398                                  ;   fat_check - see of the fatid has changed in the specified drive.
 14399                                  ;	      - uses the fat id obtained from the boot sector.
 14400                                  ;
 14401                                  ;   inputs:	medbyt is expected fat id
 14402                                  ;		es:di points to current bds
 14403                                  ;
 14404                                  ;   output:	si = -1 if fat id different,
 14405                                  ;		si = 0 otherwise
 14406                                  ;
 14407                                  ;   no other registers changed.
 14408                                  
 14409                                  fat_check:		
 14410 000019EB 50                      		push	ax
 14411 000019EC 31F6                    		xor	si, si		; say fat id's are same.
 14412 000019EE A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 14413 000019F1 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 14414                                  					; compare it with the bds medbyte
 14415 000019F5 7401                    		jz	short okret1	; carry	clear
 14416 000019F7 4E                      		dec	si
 14417                                  okret1:					
 14418 000019F8 58                      		pop	ax
 14419 000019F9 C3                      		retn
 14420                                  
 14421                                  ; ---------------------------------------------------------------------------
 14422                                  
 14423                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 14424                                  		;times 7 db 0
 14425                                  
 14426                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 14427                                  
 14428                                  		; 09/12/2022
 14429                                  		;times 4 db 0	; 17/10/2022
 14430                                  		;db 4 dup(0)	; times 4 db 0
 14431                                  
 14432                                  ; ---------------------------------------------------------------------------
 14433                                  
 14434                                  		; 09/12/2022
 14435                                  		;db 0
 14436                                  
 14437                                  number2div	equ ($-BCode_start)
 14438                                  number2mod	equ (number2div % 16)
 14439                                  
 14440                                  %if number2mod>0 & number2mod<16
 14441 000019FA 00<rep 6h>              		times (16-number2mod) db 0
 14442                                  %endif
 14443                                  
 14444                                  ;align 16
 14445                                  
 14446                                  ; 09/12/2022
 14447                                  BCODE_END	equ $ - BCode_start
 14448                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 14449                                  ; 13/12/2022
 14450                                  SYSINITOFFSET	equ BCODE_END
 14451                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 14452                                  
 14453                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 14454                                  
 14455                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14456                                  ; 01/05/2019 - Retro DOS v4.0 
 14457                                  ; ============================================================================
 14458                                  ; end of BIOSCODE
 14459                                  
 14460                                  ; ----------------------------------------------------------------------------
 14461                                  ; %include sysinit5.s	; 09/12/2022
 14462                                  ; ----------------------------------------------------------------------------
 14463                                  
 14464                                  ;=============================================================================
 14465                                  ; (IO.SYS) SYSINIT SEGMENT 
 14466                                  ;=============================================================================
 14467                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14468                                  
 14469                                  section .SYSINIT vstart=0
 14470                                  
 14471                                  ; ****************************************************************************
 14472                                  ; SYSINIT.BIN (MSDOS 5.0 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 14473                                  ; ----------------------------------------------------------------------------
 14474                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 31/12/2022))
 14475                                  ; ----------------------------------------------------------------------------
 14476                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 14477                                  ; ----------------------------------------------------------------------------
 14478                                  ; Assembler: NASM version 2.15
 14479                                  ; ----------------------------------------------------------------------------
 14480                                  ;	   ((nasm sysinit5.s -l sysinit5.lst -o SYSINIT5.BIN -Z error.txt)) 	
 14481                                  ; ----------------------------------------------------------------------------
 14482                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 14483                                  ; ----------------------------------------------------------------------------
 14484                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 14485                                  ; source code by Microsoft, 1991 
 14486                                  ; ----------------------------------------------------------------------------
 14487                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 14488                                  ; by Microsoft, 12/10/1983
 14489                                  ; ****************************************************************************
 14490                                  ; main file: 'retrodos4.s'
 14491                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 14492                                  
 14493                                  ; 21/10/2022
 14494                                  ; ----------------------------------------------------------------------------
 14495                                  ; This source code (version) is based on SYSINIT source code of disassembled
 14496                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 14497                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 14498                                  ; ----------------------------------------------------------------------------
 14499                                  ; Binary file splitter & joiner: FFSJ v3.3
 14500                                  
 14501                                  ;--------------------------------------------------------------
 14502                                  ; SYSINIT.TXT (27/01/1983)
 14503                                  ;--------------------------------------------------------------
 14504                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 14505                                  ;over  the  system  initialization  after  the  OEM  bios   has
 14506                                  ;performed any  initialization  it  needs  to  do.   Control is
 14507                                  ;transfered with a long jump to the external  variable  SYSINIT
 14508                                  ;
 14509                                  ;
 14510                                  ;   The OEM  has  the  following  variables declared external:
 14511                                  ;
 14512                                  ;   CURRENT_DOS_LOCATION    WORD
 14513                                  ;
 14514                                  ;This word  contains  the  segment  number of the DOS before it
 14515                                  ;is relocated.  The OEM bios must set this value.
 14516                                  ;
 14517                                  ;   FINAL_DOS_LOCATION      WORD
 14518                                  ;
 14519                                  ;This word contains the segment number of the DOS after SYSINIT
 14520                                  ;moves it.  The OEM bios must set this value.
 14521                                  ;
 14522                                  ;   DEVICE_LIST             DWORD
 14523                                  ;
 14524                                  ;This  double  word  pointer  points  to  the  linked  list  of
 14525                                  ;character and block device drivers.  The  OEM  must  set  this
 14526                                  ;value.
 14527                                  ;
 14528                                  ;   MEMORY_SIZE             WORD
 14529                                  ;
 14530                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 14531                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 14532                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 14533                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 14534                                  ;and read it back until it gets a mismatch.
 14535                                  ;
 14536                                  ;   DEFAULT_DRIVE           BYTE
 14537                                  ;
 14538                                  ;This is  the initial default drive when the system first comes
 14539                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 14540                                  ;it then drive a is assumed.
 14541                                  ;
 14542                                  ;   BUFFERS                 BYTE
 14543                                  ;
 14544                                  ;This is  the  default  number of buffers for the system.  This
 14545                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14546                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 14547                                  ;
 14548                                  ;   FILES                   BYTE
 14549                                  ;
 14550                                  ;This is  the  default  number  of  files for the system.  This
 14551                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14552                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 14553                                  ;
 14554                                  ;   SYSINIT                 FAR
 14555                                  ;
 14556                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 14557                                  ;this label at the end of its INIT code.
 14558                                  ;
 14559                                  ;   The OEM  has  the  following  variables declared public:
 14560                                  ;
 14561                                  ;   RE_INIT                 FAR
 14562                                  ;
 14563                                  ;This is an entry point which allows the BIOS to do some INIT
 14564                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 14565                                  ;PRESERVED.  On entry DS points to the first available memory
 14566                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 14567                                  ;prefix which represents  the  "program"  currently  running.
 14568                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 14569                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 14570                                  ;that  no  memory  is  allocated to it, it is running in free
 14571                                  ;memory.
 14572                                  ;NOTES:
 14573                                  ;     At the time this routine is called SYSINIT occupies the
 14574                                  ;highest 10K of memory ("highest" is determined by the  value
 14575                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 14576                                  ;     Since this is called AFTER DOS is initialized, you can
 14577                                  ;make system calls.  This also implies that the code for this
 14578                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 14579                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 14580                                  ;     If you don't want  anything done just set this to point
 14581                                  ;at a FAR RET instruction.
 14582                                  
 14583                                  ; ----------------------------------------------------------------------
 14584                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 14585                                  ; ----------------------------------------------------------------------
 14586                                  
 14587                                  ;include version.inc
 14588                                  ; ----------------------------------------------------------------------
 14589                                  
 14590                                  ;FALSE   EQU     0
 14591                                  ;TRUE    EQU     0FFFFh
 14592                                  
 14593                                  ;IBMVER	    EQU     TRUE
 14594                                  ;IBMCOPYRIGHT EQU   FALSE
 14595                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 14596                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 14597                                  ;MSVER      EQU     FALSE
 14598                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 14599                                  ;KANJI      EQU     FALSE
 14600                                  
 14601                                  ;(MSDOS 6.0, versiona.inc, 1991)
 14602                                  ; ----------------------------------------------------------------------
 14603                                  ;MAJOR_VERSION  EQU	6
 14604                                  ;;MINOR_VERSION	EQU	0	;6.00
 14605                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 14606                                  
 14607                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 14608                                  ; ----------------------------------------------------------------------
 14609                                  MAJOR_VERSION   EQU	5
 14610                                  MINOR_VERSION   EQU	0
 14611                                  
 14612                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 14613                                  
 14614                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 14615                                  				; currently 0.
 14616                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 14617                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 14618                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 14619                                  
 14620                                  ;      if1
 14621                                  ;      %OUT  ... for DOS Version 5.00 ...
 14622                                  ;      endif
 14623                                  
 14624                                         ;******************************
 14625                                         ;Each assembler program should:
 14626                                         ;  mov ah,030h                   ;DOS Get Version function
 14627                                         ;  int 021h                      ;Version ret. in AX,minor version first
 14628                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 14629                                         ;  jne error_handler             ; EXACT version match.
 14630                                         ;******************************
 14631                                  
 14632                                  ; ----------------------------------------------------------------------
 14633                                  ; device definitions
 14634                                  
 14635                                  ;Attribute bit masks
 14636                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 14637                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 14638                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 14639                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 14640                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 14641                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 14642                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 14643                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 14644                                  
 14645                                  ; The device table list has the form:
 14646                                  struc	SYSDEV
 14647 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 14648 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 14649 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 14650 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 14651 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 14652                                  .size:
 14653                                  endstruc
 14654                                  
 14655                                  ;Static Reguest Header
 14656                                  struc	SRHEAD
 14657 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 14658 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 14659 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 14660 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 14661 00000005 ????????????????                	resb 8		;Reserved for queue links
 14662                                  .size:
 14663                                  endstruc
 14664                                  
 14665                                  ;Status word masks
 14666                                  STERR   EQU     8000H           ;Bit 15 - Error
 14667                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 14668                                  STDON   EQU     0100H           ;Bit 8 - Done
 14669                                  STECODE EQU     00FFH           ;Error code
 14670                                  WRECODE EQU     0
 14671                                  
 14672                                  ;Function codes
 14673                                  DEVINIT EQU     0               ;Initialization
 14674                                  DINITHL EQU     26              ;Size of init header
 14675                                  DEVMDCH EQU     1               ;Media check
 14676                                  DMEDHL  EQU     15              ;Size of media check header
 14677                                  DEVBPB  EQU     2               ;Get BPB
 14678                                  DEVRDIOCTL EQU  3               ;IOCTL read
 14679                                  DBPBHL  EQU     22              ;Size of Get BPB header
 14680                                  DEVRD   EQU     4               ;Read
 14681                                  DRDWRHL EQU     22              ;Size of RD/WR header
 14682                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 14683                                  DRDNDHL EQU     14              ;Size of non destructive read header
 14684                                  DEVIST  EQU     6               ;Input status
 14685                                  DSTATHL EQU     13              ;Size of status header
 14686                                  DEVIFL  EQU     7               ;Input flush
 14687                                  DFLSHL  EQU     15              ;Size of flush header
 14688                                  DEVWRT  EQU     8               ;Write
 14689                                  DEVWRTV EQU     9               ;Write with verify
 14690                                  DEVOST  EQU     10              ;Output status
 14691                                  DEVOFL  EQU     11              ;Output flush
 14692                                  DEVWRIOCTL EQU  12              ;IOCTL write
 14693                                  
 14694                                  ; ----------------------------------------------------------------------
 14695                                  struc	SYS_FCB
 14696 00000000 ??                      .fcb_drive:	resb 1
 14697 00000001 ????????????????        .fcb_name:	resb 8
 14698 00000009 ??????                  .fcb_ext:	resb 3
 14699 0000000C ????                    .fcb_EXTENT:	resw 1
 14700 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 14701 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 14702                                                          ; word
 14703 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 14704 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 14705 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 14706 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 14707                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 14708                                                          ; If file, bit 6=0 if dirty
 14709                                                          ; If I/O device, bit 6=0 if EOF (input)
 14710                                                          ;               Bit 5=1 if Raw mode
 14711                                                          ;               Bit 0=1 if console input device
 14712                                                          ;               Bit 1=1 if console output device
 14713                                                          ;               Bit 2=1 if null device
 14714                                                          ;               Bit 3=1 if clock device
 14715 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 14716 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 14717 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 14718 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 14719 00000020 ??                      .fcb_NR:	resb 1	; Next record
 14720 00000021 ????????                .fcb_RR:	resb 4	; Random record
 14721                                  .size:
 14722                                  endstruc
 14723                                  
 14724                                  ; ----------------------------------------------------------------------
 14725                                  ; Field definition for I/O buffer information
 14726                                  
 14727                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 14728                                  
 14729                                  struc buffinfo
 14730 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 14731 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 14732 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 14733                                  			; SFT table index (bit 7 = 1)
 14734                                  			; = FFh if buffer free
 14735 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 14736                                  			;	= 0 if Local device buffer
 14737                                  			; Bit 6 = 1 if buffer dirty
 14738                                  			; Bit 5 = Reserved
 14739                                  			; Bit 4 = Search bit (bit 7 = 1)
 14740                                  			; Bit 3 = 1 if buffer is DATA
 14741                                  			; Bit 2 = 1 if buffer is DIR
 14742                                  			; Bit 1 = 1 if buffer is FAT
 14743                                  			; Bit 0 = Reserved
 14744 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 14745                                  ; The next two items are often refed as a word (bit 7 = 0)
 14746 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 14747 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 14748 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 14749 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 14750 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 14751                                  .size:
 14752                                  endstruc
 14753                                  
 14754                                  %define buf_offset	dword [buf_sector]
 14755                                  			;For bit 7 = 1, this is the byte
 14756                                  			;offset of the start of the buffer in
 14757                                  			;the file pointed to by buf_ID.  Thus
 14758                                  			;the buffer starts at location
 14759                                  			;buf_offset in the file and contains
 14760                                  			;buf_fill bytes.
 14761                                  
 14762                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 14763                                  
 14764                                  
 14765                                  buf_Free	equ	0FFh		; buf_id of free buffer
 14766                                  
 14767                                  ;Flag byte masks
 14768                                  buf_isnet	EQU	10000000B
 14769                                  buf_dirty	EQU	01000000B
 14770                                  ;***
 14771                                  buf_visit	EQU	00100000B
 14772                                  ;***
 14773                                  buf_snbuf	EQU	00010000B
 14774                                  
 14775                                  buf_isDATA	EQU	00001000B
 14776                                  buf_isDIR	EQU	00000100B
 14777                                  buf_isFAT	EQU	00000010B
 14778                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 14779                                  
 14780                                  buf_NetID	EQU	bufinsiz
 14781                                  
 14782                                  ; ----------------------------------------------------------------------
 14783                                  
 14784                                  ; ----------------------------------------------------------------------
 14785                                  ;**	DPB - Drive Parameter Block
 14786                                  
 14787                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 14788                                  
 14789                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 14790                                  ;	possibly inaccurate deductions from code study... - jgl
 14791                                  ;
 14792                                  ;	The DPB is DOS's main structure for describing block devices.
 14793                                  ;	It contains info about the "Drive" intermingled with info about
 14794                                  ;	the FAT file system which is presumably on the drive.  I don't know
 14795                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 14796                                  ;
 14797                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 14798                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 14799                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 14800                                  
 14801                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 14802                                  
 14803                                  ; 12/05/2019 - Retro DOS v4.0
 14804                                  
 14805                                  struc	DPB
 14806 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 14807 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 14808 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 14809 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 14810 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 14811 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 14812 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 14813 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 14814 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 14815 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 14816                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 14817 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 14818 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 14819 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 14820 00000017 ??                      .MEDIA:		resb 1		; Media byte
 14821 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 14822                                  				; check the first time this DPB is used
 14823 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 14824 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 14825 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 14826                                  .size:
 14827                                  endstruc
 14828                                  
 14829                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 14830                                  
 14831                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 14832                                  
 14833                                  ; ----------------------------------------------------------------------
 14834                                  ; 26/03/2018
 14835                                  
 14836                                  ; IOCTL SUB-FUNCTIONS
 14837                                  IOCTL_GET_DEVICE_INFO	EQU	0
 14838                                  IOCTL_SET_DEVICE_INFO	EQU	1
 14839                                  IOCTL_READ_HANDLE	EQU	2
 14840                                  IOCTL_WRITE_HANDLE	EQU	3
 14841                                  IOCTL_READ_DRIVE	EQU	4
 14842                                  IOCTL_WRITE_DRIVE	EQU	5
 14843                                  IOCTL_GET_INPUT_STATUS	EQU	6
 14844                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 14845                                  IOCTL_CHANGEABLE?	EQU	8
 14846                                  IOCTL_SHARING_RETRY	EQU	11
 14847                                  GENERIC_IOCTL_HANDLE	EQU	12
 14848                                  GENERIC_IOCTL		EQU	13
 14849                                  
 14850                                  ; GENERIC IOCTL SUB-FUNCTIONS
 14851                                  RAWIO			EQU	8
 14852                                  
 14853                                  ; RAWIO SUB-FUNCTIONS
 14854                                  GET_DEVICE_PARAMETERS	EQU	60H
 14855                                  SET_DEVICE_PARAMETERS	EQU	40H
 14856                                  READ_TRACK		EQU	61H
 14857                                  WRITE_TRACK		EQU	41H
 14858                                  VERIFY_TRACK		EQU	62H
 14859                                  FORMAT_TRACK		EQU	42H
 14860                                  
 14861                                  ; DEVICETYPE VALUES
 14862                                  MAX_SECTORS_IN_TRACK	EQU	63
 14863                                  DEV_5INCH		EQU	0
 14864                                  DEV_5INCH96TPI		EQU	1
 14865                                  DEV_3INCH720KB		EQU	2
 14866                                  DEV_8INCHSS		EQU	3
 14867                                  DEV_8INCHDS		EQU	4
 14868                                  DEV_HARDDISK		EQU	5
 14869                                  DEV_OTHER		EQU	7
 14870                                  ;DEV_3INCH1440KB	EQU	7
 14871                                  DEV_3INCH2880KB		EQU	9
 14872                                  ; Retro DOS v2.0 - 26/03/2018
 14873                                  ;;DEV_TAPE		EQU	6
 14874                                  ;;DEV_ERIMO		EQU	8
 14875                                  ;DEV_3INCH2880KB	EQU	9
 14876                                  DEV_3INCH1440KB		EQU	10
 14877                                  
 14878                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 14879                                  					; CURRENTLY SUPPORT.
 14880                                  MAX_DEV_TYPE		EQU	10
 14881                                  
 14882                                  struc A_SECTORTABLE
 14883 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 14884 00000002 ????                    .ST_SECTORSIZE:		resw	1
 14885                                  .size:
 14886                                  endstruc
 14887                                  
 14888                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 14889                                  
 14890                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 14891                                  ;
 14892                                  ;	The BPB contains information about the disk structure.  It dates
 14893                                  ;	back to the earliest FAT systems and so FAT information is
 14894                                  ;	intermingled with physical driver information.
 14895                                  ;
 14896                                  ;	A boot sector contains a BPB for its device; for other disks
 14897                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 14898                                  ;	information in the DPB.
 14899                                  ;
 14900                                  ;	The BDS structure contains a BPB within it.
 14901                                  
 14902                                  struc A_BPB
 14903 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 14904 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 14905 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 14906 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 14907 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 14908 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 14909 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 14910 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 14911 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 14912 0000000F ????                    .BPB_HEADS:		resw	1
 14913 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 14914 00000013 ????                    			resw	1
 14915 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 14916 00000017 ????                    			resw	1
 14917 00000019 ????????????            			resb	6	; NOTE:  many times these
 14918                                  ;					; 	 6 bytes are omitted
 14919                                  ;					;	 when BPB manipulations
 14920                                  ;					;	 are performed!
 14921                                  .size:
 14922                                  endstruc
 14923                                  
 14924                                  struc A_DEVICEPARAMETERS
 14925 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 14926 00000001 ??                      .DP_DEVICETYPE:		resb	1
 14927 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 14928 00000004 ????                    .DP_CYLINDERS:		resw	1
 14929 00000006 ??                      .DP_MEDIATYPE:		resb	1
 14930 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 14931 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 14932 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 14933                                  endstruc
 14934                                  
 14935                                  ; ----------------------------------------------------------------------
 14936                                  ; structure, equates for devmark for mem command.
 14937                                  
 14938                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 14939                                  
 14940                                  struc devmark
 14941 00000000 ??                       .id:	    resb 1
 14942 00000001 ????                     .seg:	    resw 1
 14943 00000003 ????                     .size:	    resw 1
 14944 00000005 ??????                   .dum:	    resb 3
 14945 00000008 ????????????????         .filename: resb 8
 14946                                  endstruc
 14947                                  
 14948                                  devmark_stk	equ	'S'
 14949                                  devmark_device	equ	'D'
 14950                                  devmark_ifs	equ	'I'
 14951                                  devmark_buf	equ	'B'
 14952                                  devmark_cds	equ	'L' ; lastdrive
 14953                                  devmark_files	equ	'F'
 14954                                  devmark_fcbs	equ	'X'
 14955                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 14956                                  devmark_ems_stub equ	'E'
 14957                                  
 14958                                  setbrkdone	equ	00000001b
 14959                                  for_devmark	equ	00000010b
 14960                                  not_for_devmark equ	11111101b
 14961                                  
 14962                                  ; ----------------------------------------------------------------------
 14963                                  ; Memory arena structure
 14964                                  
 14965                                  ; 24/03/2019 - Retro DOS v4.0 
 14966                                  ; (MSDOS 6.0, ARENA.INC)
 14967                                  
 14968                                  ;** Arena Header
 14969                                  
 14970                                  struc ARENA
 14971 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 14972 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 14973 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 14974 00000005 ??????                  .RESERVED	resb 3		; reserved
 14975 00000008 ????????????????        .NAME:		resb 8		; owner file name
 14976                                  endstruc
 14977                                  
 14978                                  ; 12/04/2019
 14979                                  
 14980                                  arena_owner_system	EQU 0	; free block indication
 14981                                  
 14982                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 14983                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 14984                                  
 14985                                  ; ----------------------------------------------------------------------
 14986                                  ; Process data block (otherwise known as program header)
 14987                                  
 14988                                  ; 23/03/2019 - Retro DOS v4.0
 14989                                  
 14990                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 14991                                  
 14992                                  FILPERPROC	EQU     20
 14993                                  
 14994                                  struc PDB	; Process_data_block
 14995 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 14996 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 14997 00000004 ??                                      resb 1
 14998 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 14999 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 15000 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 15001 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 15002 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 15003 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 15004 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 15005 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 15006 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 15007 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 15008 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 15009 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 15010 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 15011 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 15012 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 15013 00000042 <res Eh>                .PAD1:		resb 14		; 	
 15014 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 15015 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 15016 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 15017 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 15018 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 15019 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 15020                                  ;.size:
 15021                                  endstruc
 15022                                  
 15023                                  ; ----------------------------------------------------------------------
 15024                                  ; <system call definitions>
 15025                                  
 15026                                  ; 23/03/2019 - Retro DOS v4.0
 15027                                  
 15028                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 15029                                  
 15030                                  ABORT                           EQU 0   ;  0      0
 15031                                  STD_CON_INPUT                   EQU 1   ;  1      1
 15032                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 15033                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 15034                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 15035                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 15036                                  RAW_CON_IO                      EQU 6   ;  6      6
 15037                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 15038                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 15039                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 15040                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 15041                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 15042                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 15043                                  DISK_RESET                      EQU 13  ; 13      D
 15044                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 15045                                  FCB_OPEN                        EQU 15  ; 15      F
 15046                                  FCB_CLOSE                       EQU 16  ; 16     10
 15047                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 15048                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 15049                                  FCB_DELETE                      EQU 19  ; 19     13
 15050                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 15051                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 15052                                  FCB_CREATE                      EQU 22  ; 22     16
 15053                                  FCB_RENAME                      EQU 23  ; 23     17
 15054                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 15055                                  SET_DMA                         EQU 26  ; 26     1A
 15056                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 15057                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 15058                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 15059                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 15060                                  GET_FCB_POSITION                EQU 36  ; 36     24
 15061                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 15062                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 15063                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 15064                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 15065                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 15066                                  GET_DATE                        EQU 42  ; 42     2A
 15067                                  SET_DATE                        EQU 43  ; 43     2B
 15068                                  GET_TIME                        EQU 44  ; 44     2C
 15069                                  SET_TIME                        EQU 45  ; 45     2D
 15070                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 15071                                  ; Extended functionality group
 15072                                  GET_DMA                         EQU 47  ; 47     2F
 15073                                  GET_VERSION                     EQU 48  ; 48     30
 15074                                  KEEP_PROCESS                    EQU 49  ; 49     31
 15075                                  GET_DPB                         EQU 50  ; 50     32
 15076                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 15077                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 15078                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 15079                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 15080                                  CHAR_OPER                       EQU 55  ; 55     37
 15081                                  INTERNATIONAL                   EQU 56  ; 56     38
 15082                                  ;   Directory Group
 15083                                  MKDIR                           EQU 57  ; 57     39
 15084                                  RMDIR                           EQU 58  ; 58     3A
 15085                                  CHDIR                           EQU 59  ; 59     3B
 15086                                  ;   File Group
 15087                                  CREAT                           EQU 60  ; 60     3C
 15088                                  OPEN                            EQU 61  ; 61     3D
 15089                                  CLOSE                           EQU 62  ; 62     3E
 15090                                  READ                            EQU 63  ; 63     3F
 15091                                  WRITE                           EQU 64  ; 64     40
 15092                                  UNLINK                          EQU 65  ; 65     41
 15093                                  LSEEK                           EQU 66  ; 66     42
 15094                                  CHMOD                           EQU 67  ; 67     43
 15095                                  IOCTL                           EQU 68  ; 68     44
 15096                                  XDUP                            EQU 69  ; 69     45
 15097                                  XDUP2                           EQU 70  ; 70     46
 15098                                  CURRENT_DIR                     EQU 71  ; 71     47
 15099                                  ;    Memory Group
 15100                                  ALLOC                           EQU 72  ; 72     48
 15101                                  DEALLOC                         EQU 73  ; 73     49
 15102                                  SETBLOCK                        EQU 74  ; 74     4A
 15103                                  ;    Process Group
 15104                                  EXEC                            EQU 75  ; 75     4B
 15105                                  EXIT                            EQU 76  ; 76     4C
 15106                                  WAITPROCESS			EQU 77  ; 77     4D
 15107                                  FIND_FIRST                      EQU 78  ; 78     4E
 15108                                  ;   Special Group
 15109                                  FIND_NEXT                       EQU 79  ; 79     4F
 15110                                  ; SPECIAL SYSTEM GROUP
 15111                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 15112                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 15113                                  GET_IN_VARS                     EQU 82  ; 82     52
 15114                                  SETDPB                          EQU 83  ; 83     53
 15115                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 15116                                  DUP_PDB                         EQU 85  ; 85     55
 15117                                  RENAME                          EQU 86  ; 86     56
 15118                                  FILE_TIMES                      EQU 87  ; 87     57
 15119                                  ;
 15120                                  ALLOCOPER			EQU 88	; 88     58	
 15121                                  ; Network extention system calls
 15122                                  GetExtendedError		EQU 89	; 89	 59
 15123                                  CreateTempFile			EQU 90	; 90	 5A
 15124                                  CreateNewFile			EQU 91	; 91	 5B
 15125                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 15126                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 15127                                  					;	    CloseByName, CloseUser,
 15128                                  					;	    CloseUserProcess,
 15129                                  					;	    GetOpenFileList
 15130                                  UserOper			EQU 94	; 94	 5E Get and Set
 15131                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 15132                                  xNameTrans			EQU 96	; 96	 60
 15133                                  PathParse			EQU 97	; 97	 61
 15134                                  GetCurrentPSP			EQU 98	; 98	 62
 15135                                  Hongeul 			EQU 99	; 99	 63
 15136                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 15137                                  Set_Printer_Flag		EQU 100 ; 100	 64
 15138                                  GetExtCntry			EQU 101 ; 101	 65
 15139                                  GetSetCdPg			EQU 102 ; 102	 66
 15140                                  ExtHandle			EQU 103 ; 103	 67
 15141                                  Commit				EQU 104 ; 104	 68
 15142                                  GetSetMediaID			EQU 105 ; 105	 69
 15143                                  IFS_IOCTL			EQU 107 ; 107	 6B
 15144                                  ExtOpen 			EQU 108 ; 108	 6C
 15145                                  ;
 15146                                  ;ifdef ROMEXEC
 15147                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 15148                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 15149                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 15150                                  ;endif
 15151                                  ;
 15152                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 15153                                  OEM_C1				EQU 249 ; 249	 F9
 15154                                  OEM_C2				EQU 250 ; 250	 FA
 15155                                  OEM_C3				EQU 251 ; 251	 FB
 15156                                  OEM_C4				EQU 252 ; 252	 FC
 15157                                  OEM_C5				EQU 253 ; 253	 FD
 15158                                  OEM_C6				EQU 254 ; 254	 FE
 15159                                  OEM_C7				EQU 255 ; 255	 FF
 15160                                  
 15161                                  ; ----------------------------------------------------------------------
 15162                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 15163                                  ; ----------------------------------------------------------------------
 15164                                  
 15165                                  ;;	IF	STACKSW
 15166                                  
 15167                                  ;;
 15168                                  ;; Internal Stack Parameters
 15169                                  ;EntrySize		equ	8
 15170                                  ;
 15171                                  ;MinCount		equ	8
 15172                                  ;DefaultCount		equ	9
 15173                                  ;MaxCount		equ	64
 15174                                  ;
 15175                                  ;MinSize 		equ	32
 15176                                  ;DefaultSize		equ	128
 15177                                  ;MaxSize 		equ	512
 15178                                  
 15179                                  ;;	ENDIF
 15180                                  
 15181                                  ; ----------------------------------------------------------------------
 15182                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 15183                                  ; ----------------------------------------------------------------------
 15184                                  					  ;;Rev 3.30 Modification
 15185                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 15186                                  									  
 15187                                  ;*******************************					  
 15188                                  ;System Service call ( Int 15h )					  
 15189                                  ;*******************************					  
 15190                                  ;Function AH = 0C0h, Return system configuration			  
 15191                                  ;For PC and PCJR on return:						  
 15192                                  ;	(AH)	= 80h							  
 15193                                  ;	(CY)	= 1							  
 15194                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 15195                                  ;	(AH)	= 86h							  
 15196                                  ;	(CY)	= 1							  
 15197                                  ;For all others:							  
 15198                                  ;	(AH)	= 0							  
 15199                                  ;	(CY)	= 0							  
 15200                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 15201                                  ; System descriptor :							  
 15202                                  ;	DW	xxxx		length of descriptor in bytes,		  
 15203                                  ;				minimum length = 8			  
 15204                                  ;	DB	xx		model byte				  
 15205                                  ;				0FFh	= PC				  
 15206                                  ;				0FEh	= PC/XT, Portable		  
 15207                                  ;				0FDh	= PC/JR 			  
 15208                                  ;				0FCh	= PC/AT				  
 15209                                  ;				0F9h	= Convertable			  
 15210                                  ;				0F8h	= Model 80			  
 15211                                  ;				0E0 thru 0EFh = reserved		  
 15212                                  ;									  
 15213                                  ;	DB	xx		secondary model byte			  
 15214                                  ;				000h	= PC1				  
 15215                                  ;				000h	= PC/XT, Portable		  
 15216                                  ;				000h	= PC/JR 			  
 15217                                  ;				000h	= PC/AT 			  
 15218                                  ;				001h	= PC/AT Model 339		  
 15219                                  ;				003h	= PC/RT				  
 15220                                  ;				000h	= Convertable			  
 15221                                  ;									  
 15222                                  ;	DB	xx		bios revision level			  
 15223                                  ;				00 for first release, subsequent release  
 15224                                  ;				of code with same model byte and	  
 15225                                  ;				secondary model byte require revison level
 15226                                  ;				to increase by one.			  
 15227                                  ;									  
 15228                                  ;	DB	xx		feature information byte 1		  
 15229                                  ;				X0000000 = 1, bios use DMA channel 3	  
 15230                                  ;					 = 0, DMA channel 3 not used	  
 15231                                  ;									  
 15232                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 15233                                  ;					 = 0, 2nd Interrupt chip not present
 15234                                  ;									  
 15235                                  ;				00X00000 = 1, Real Time Clock present	  
 15236                                  ;					 = 0, Real Time Clock not present 
 15237                                  ;									  
 15238                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 15239                                  ;						called in keyboard interrupt
 15240                                  ;						(Int 09h).		  
 15241                                  ;					 = 0, Keyboard escape sequence not
 15242                                  ;						called. 		  
 15243                                  ;				0000XXXX reserved			  
 15244                                  ;									  
 15245                                  ;	DB	xx		feature information byte 2 - reserved	  
 15246                                  ;									  
 15247                                  ;	DB	xx		feature information byte 2 - reserved	  
 15248                                  ;									  
 15249                                  ;	DB	xx		feature information byte 2 - reserved	  
 15250                                  ;									  
 15251                                  ;	DB	xx		feature information byte 2 - reserved	  
 15252                                  ;									  
 15253                                  
 15254                                  ; 22/03/2019									  
 15255                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 15256 00000000 ????                    .bios_sd_leng:		resw 1				  
 15257 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 15258                                  .bios_sd_scnd_modelbyte: 
 15259 00000003 ??                      			resb 1					  
 15260 00000004 ??                      			resb 1					  
 15261 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 15262 00000006 ????????                			resb 4					  
 15263                                  endstruc					  
 15264                                  									  
 15265                                  ;FeatureByte1	bit map equates 					  
 15266                                  DMAchannel3		equ 10000000b					  
 15267                                  ScndIntController	equ 01000000b					  
 15268                                  RealTimeClock		equ 00100000b					  
 15269                                  KeyEscapeSeq		equ 00010000b					  
 15270                                  					;;End of Modification
 15271                                  
 15272                                  ; ----------------------------------------------------------------------
 15273                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 15274                                  ; ----------------------------------------------------------------------
 15275                                  ; 22/03/2019 - Retro DOS v4.0
 15276                                  
 15277                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 15278                                  
 15279                                  struc SysInitVars
 15280                                  ; MSDOS 3.3
 15281 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 15282 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 15283 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 15284 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 15285 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 15286 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 15287 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 15288 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 15289 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 15290 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 15291 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 15292 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 15293                                  ; MSDOS 6.0
 15294 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 15295 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 15296 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 15297 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 15298                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 15299 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 15300 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 15301 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 15302 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 15303 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 15304 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 15305 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 15306                                  .size:
 15307                                  endstruc
 15308                                  
 15309                                  ;This is added for more information exchage between DOS, BIOS.
 15310                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 15311                                  
 15312                                  ; 22/03/2019
 15313                                  struc SysInitVars_Ext
 15314 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 15315 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 15316                                  endstruc
 15317                                  
 15318                                  ; 09/06/2018
 15319                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 15320                                  SYSI_DPB    equ	0
 15321                                  SYSI_SFT    equ 4
 15322                                  SYSI_CLOCK  equ 8
 15323                                  SYSI_CON    equ 12
 15324                                  SYSI_MAXSEC equ 16
 15325                                  SYSI_BUF    equ 18 		
 15326                                  SYSI_CDS    equ 22
 15327                                  SYSI_FCB    equ 26
 15328                                  SYSI_KEEP   equ 30
 15329                                  SYSI_NUMIO  equ	32
 15330                                  SYSI_NCDS   equ	33
 15331                                  SYSI_DEV    equ 34
 15332                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 15333                                  SYSI_ATTR	  equ 38
 15334                                  SYSI_STRAT	  equ 40
 15335                                  SYSI_INTER	  equ 42
 15336                                  SYSI_NAME	  equ 44
 15337                                  SYSI_SPLICE	  equ 52
 15338                                  SYSI_IBMDOS_SIZE  equ 53
 15339                                  SYSI_IFS_DOSCALL@ equ 55
 15340                                  SYSI_IFS	  equ 59
 15341                                  SYSI_BUFFERS	  equ 63
 15342                                  SYSI_BOOT_DRIVE   equ 67
 15343                                  SYSI_DWMOVE	  equ 68
 15344                                  SYSI_EXT_MEM	  equ 69
 15345                                  
 15346                                  ;The SYSI_BUF of SysInitVars points to the following structure
 15347                                  
 15348                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 15349                                  
 15350                                  struc BUFFINF 	; BUFFINFO
 15351 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 15352 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 15353 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 15354 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 15355                                  
 15356 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 15357                                  				; are in HMA
 15358 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 15359                                  				;  used to read/write on disks
 15360 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 15361 00000015 ????                    .UU_EMS_NPA640:		resw 1
 15362 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 15363 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 15364 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 15365 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 15366 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 15367 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 15368 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 15369                                  .size:
 15370                                  endstruc
 15371                                  
 15372                                  ; ----------------------------------------------------------------------
 15373                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 15374                                  ; ----------------------------------------------------------------------
 15375                                  ; 22/03/2019 - Retro DOS v4.0
 15376                                  
 15377                                  ;**	CDS - Current Directory Structure
 15378                                  ;
 15379                                  ; CDS items are used bu the internal routines to store cluster numbers and
 15380                                  ; network identifiers for each logical name.  The ID field is used dually,
 15381                                  ; both as net ID and for a cluster number for local devices. In the case
 15382                                  ; of local devices, the cluster number will be -1 if there is a potential
 15383                                  ; of the disk being changed or if the path must be recracked.
 15384                                  ;
 15385                                  ;	Some pathnames have special preambles, such as
 15386                                  ;
 15387                                  ;		\\machine\sharename\...
 15388                                  ;	For these pathnames we can't allow ".." processing to back us
 15389                                  ;	up into the special front part of the name.  The CURDIR_END field
 15390                                  ;	holds the address of the seperator character which marks
 15391                                  ;	the split between the special preamble and the regular
 15392                                  ;	path list; ".." processing isn't allowed to back us up past
 15393                                  ;	(i.e., before) CURDIR_END
 15394                                  ;	For the root, it points at the leading /. For net
 15395                                  ;	assignments it points at the end (nul) of the initial assignment:
 15396                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 15397                                  ;	  ^		 ^		     ^
 15398                                  
 15399                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 15400                                  TEMPLEN 	EQU	DIRSTRLEN*2
 15401                                  
 15402                                  struc 		curdir_list
 15403                                  ; MSDOS 3.3
 15404 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 15405 00000043 ????                    .cdir_flags	resw	1		; various flags
 15406 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 15407 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 15408 0000004D ????                    .cdir_usr_word	resw	1
 15409 0000004F ????                    .cdir_end	resw	1		; end of assignment
 15410                                  ; MSDOS 6.0
 15411 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 15412 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 15413 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 15414                                  .size:
 15415                                  endstruc
 15416                                  
 15417                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 15418                                  						; ASM87 which doesn't allow
 15419                                  						; Size directive as a macro
 15420                                  						; argument
 15421                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 15422                                  
 15423                                  ;**	Flag values for CURDIR_FLAGS
 15424                                  
 15425                                  ;Flag word masks
 15426                                  curdir_isnet	EQU	1000000000000000B
 15427                                  curdir_isifs	EQU	1000000000000000B
 15428                                  curdir_inuse	EQU	0100000000000000B
 15429                                  curdir_splice	EQU	0010000000000000B
 15430                                  curdir_local	EQU	0001000000000000B
 15431                                  
 15432                                  ; ----------------------------------------------------------------------
 15433                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 15434                                  ; ----------------------------------------------------------------------
 15435                                  ; 25/03/2019 - Retro DOS v4.0
 15436                                  
 15437                                  ; system file table
 15438                                  
 15439                                  ;**	System File Table SuperStructure
 15440                                  ;
 15441                                  ;	The system file table entries are allocated in contiguous groups.
 15442                                  ;	There may be more than one such groups; the SF "superstructure"
 15443                                  ;	tracks the groups.
 15444                                  
 15445                                  struc	SF
 15446 00000000 ????????                .SFLink:	resd	1
 15447 00000004 ????                    .SFCount:	resw	1		; number of entries
 15448 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 15449                                  .size:
 15450                                  endstruc
 15451                                  
 15452                                  ;**	System file table entry
 15453                                  ;
 15454                                  ;	These are the structures which are at SFTABLE in the SF structure.
 15455                                  
 15456                                  struc	SF_ENTRY
 15457 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 15458                                  					;   if FCB then ref count
 15459 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 15460 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 15461 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 15462                                  					; Bit 15 = 1 if remote file
 15463                                  					;	 = 0 if local file or device
 15464                                  					; Bit 14 = 1 if date/time is not to be
 15465                                  					;   set from clock at CLOSE.  Set by
 15466                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 15467                                  					;   other reseters of the dirty bit
 15468                                  					;   (WRITE)
 15469                                  					; Bit 13 = Pipe bit (reserved)
 15470                                  					;
 15471                                  					; Bits 0-7 (old FCB_devid bits)
 15472                                  					; If remote file or local file, bit
 15473                                  					; 6=0 if dirty Device ID number, bits
 15474                                  					; 0-5 if local file.
 15475                                  					; bit 7=0 for local file, bit 7
 15476                                  					;      =1 for local I/O device
 15477                                  					; If local I/O device, bit 6=0 if EOF (input)
 15478                                  					;		Bit 5=1 if Raw mode
 15479                                  					;		Bit 0=1 if console input device
 15480                                  					;		Bit 1=1 if console output device
 15481                                  					;		Bit 2=1 if null device
 15482                                  					;		Bit 3=1 if clock device
 15483 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 15484                                  					; to device header if local device,
 15485                                  					; points to net device header if
 15486                                  					; remote
 15487 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 15488                                  ;.sf_lstclus:	resw	1 ; *	
 15489 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 15490 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 15491 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 15492 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 15493                                  ;
 15494                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 15495                                  ; ID
 15496                                  ;
 15497 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 15498 0000001B ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
 15499 0000001D ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 15500                                  ;
 15501                                  ; End of 7 bytes of file-system specific info.
 15502                                  ;
 15503 0000001E <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 15504                                  					; directory entry.  This is used by
 15505                                  					; close to detect file deleted and
 15506                                  					; disk changed errors.
 15507                                  ; SHARING INFO
 15508 00000029 ????????                .sf_chain:	resd	1		; link to next SF
 15509 0000002D ????                    .sf_UID:	resw	1
 15510 0000002F ????                    .sf_PID:	resw	1
 15511 00000031 ????                    .sf_MFT:	resw	1
 15512 00000033 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 15513 00000035 ????????                .sf_IFS_HDR:	resd 	1 ; **
 15514                                  .size:
 15515                                  endstruc
 15516                                  
 15517                                  ; ----------------------------------------------------------------------
 15518                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 15519                                  ; ----------------------------------------------------------------------
 15520                                  ; 11/06/2018 - Retro DOS v3.0
 15521                                  
 15522                                  ;Equates for COUNTRY INFORMATION.
 15523                                  SetCountryInfo		EQU	1	;country info
 15524                                  SetUcase		EQU	2	;uppercase table
 15525                                  SetLcase		EQU	3	;lowercase table (Reserved)
 15526                                  SetUcaseFile		EQU	4	;uppercase file spec table
 15527                                  SetFileList		EQU	5	;valid file character list
 15528                                  SetCollate		EQU	6	;collating sequence
 15529                                  SetDBCS 		EQU	7	;double byte character set
 15530                                  SetALL			EQU	-1	;all the entries
 15531                                  
 15532                                  ;DOS country and code page information table structure.
 15533                                  ;Internally, IBMDOS gives a pointer to this table.
 15534                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 15535                                  ;this structure.
 15536                                  
 15537                                  struc country_cdpg_info ; DOS_country_cdpg_info
 15538 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 15539 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 15540 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 15541 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 15542 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 15543 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 15544                                  
 15545 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 15546 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 15547                                  
 15548 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 15549 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 15550                                  
 15551 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 15552 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 15553                                  
 15554 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 15555 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 15556 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 15557 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 15558 00000067 ????                    .ccDFormat:		resw	1	;date format
 15559 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 15560                                  					;5 byte of (currency symbol+0)
 15561 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 15562 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 15563 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 15564 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 15565 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 15566 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 15567 00000078 ??                      .ccTFormat:		resb	1	;time format
 15568 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 15569 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 15570 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 15571                                  .size:
 15572                                  endstruc
 15573                                  
 15574                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 15575                                  
 15576                                  ; ======================================================================
 15577                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 15578                                  ; ======================================================================
 15579                                  ; 21/03/2019 - Retro DOS v4.0
 15580                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15581                                  
 15582                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 15583                                  ; 21/10/2022
 15584                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 15585                                  ; 22/10/2022
 15586                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 15587                                  ; 09/12/2022
 15588                                  DOSBIOCODESEG equ IOSYSCODESEG
 15589                                  
 15590                                  ; Note: These offset addresses must be chanqed when the code 
 15591                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 15592                                  
 15593                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 15594                                  
 15595                                  ; 09/12/2022
 15596                                  %if 0
 15597                                  
 15598                                  ; 13/05/2019
 15599                                  
 15600                                  ;IsWin386         equ 08CFh
 15601                                  ;V86_Crit_SetFocus equ 08D0h
 15602                                  ; 21/10/2022
 15603                                  IsWin386          equ 08D0h
 15604                                  V86_Crit_SetFocus equ 08D1h 
 15605                                  
 15606                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 15607                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15608                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 15609                                  
 15610                                  ;SysinitPresent	  equ 08FCh
 15611                                  ; 21/10/2022
 15612                                  SysinitPresent	  equ 08FDh
 15613                                  
 15614                                  inHMA		  equ 000Dh
 15615                                  xms		  equ 000Eh
 15616                                  ;FreeHMAPtr	  equ 08F6h
 15617                                  ;multrk_flag	  equ 0533h
 15618                                  ;ec35_flag	  equ 0535h
 15619                                  ;EOT		  equ 012Eh
 15620                                  ; 21/10/2022
 15621                                  FreeHMAPtr	  equ 08F7h
 15622                                  multrk_flag	  equ 052Fh
 15623                                  ec35_flag	  equ 0531h
 15624                                  EOT		  equ 012Ch
 15625                                  
 15626                                  ;NextStack	  equ 08BFh
 15627                                  ;IT_StackLoc	  equ 08C5h
 15628                                  ;IT_StackSize	  equ 08C9h
 15629                                  ; 21/10/2022
 15630                                  NextStack	  equ 08C0h
 15631                                  IT_StackLoc	  equ 08C6h
 15632                                  IT_StackSize	  equ 08CAh
 15633                                  
 15634                                  ;MoveDOSIntoHMA	  equ 08F8h
 15635                                  ; 21/10/2022
 15636                                  MoveDOSIntoHMA	  equ 08F9h
 15637                                  
 15638                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 15639                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 15640                                  ; 21/10/2022
 15641                                  INT19SEM equ 0640h ; (iosys5.txt)
 15642                                  I19_LST  equ 0641h ; (iosys5.txt)
 15643                                  
 15644                                  %endif
 15645                                  
 15646                                  ; 09/12/2022
 15647                                  seg_reinit equ _seg_reinit
 15648                                  ec35_flag  equ ec35flag		
 15649                                  INT19SEM   equ int19sem
 15650                                  I19_LST    equ i19_lst
 15651                                  
 15652                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 15653                                  INT19OLD08 equ I19_LST+6
 15654                                  INT19OLD09 equ I19_LST+11
 15655                                  INT19OLD0A equ I19_LST+16
 15656                                  INT19OLD0B equ I19_LST+21
 15657                                  INT19OLD0C equ I19_LST+26
 15658                                  INT19OLD0D equ I19_LST+31
 15659                                  INT19OLD0E equ I19_LST+36
 15660                                  INT19OLD70 equ I19_LST+41
 15661                                  INT19OLD72 equ I19_LST+46
 15662                                  INT19OLD73 equ I19_LST+51
 15663                                  INT19OLD74 equ I19_LST+56
 15664                                  INT19OLD76 equ I19_LST+61
 15665                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 15666                                  
 15667                                  ; 09/12/2022
 15668                                  %if 0
 15669                                  
 15670                                  ;keyrd_func	equ 04E9h
 15671                                  ;keysts_func	equ 04EAh
 15672                                  ;t_switch	equ 04F6h
 15673                                  ; 21/10/2022
 15674                                  keyrd_func	equ 04E5h
 15675                                  keysts_func	equ 04E6h
 15676                                  t_switch	equ 04F2h
 15677                                  
 15678                                  ; 22/10/2022
 15679                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 15680                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 15681                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 15682                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 15683                                  
 15684                                  %endif
 15685                                  
 15686                                  ; 09/12/2022
 15687                                  BCODESTART	equ BIOSDATAWORD
 15688                                  RE_INIT		equ re_init
 15689                                  
 15690                                  ; ----------------------------------------------------------------------
 15691                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 15692                                  ; ----------------------------------------------------------------------
 15693                                  ; 15/04/2019 - Retro DOS v4.0
 15694                                  
 15695                                  CONFIG_BEGIN        equ  '['
 15696                                  CONFIG_BREAK        equ  'C'
 15697                                  CONFIG_BUFFERS      equ  'B'
 15698                                  CONFIG_COMMENT      equ  'Y'
 15699                                  CONFIG_COUNTRY      equ  'Q'
 15700                                  CONFIG_DEVICE       equ  'D'
 15701                                  CONFIG_DEVICEHIGH   equ  'U'
 15702                                  CONFIG_DOS          equ  'H'
 15703                                  CONFIG_DRIVPARM     equ  'P'
 15704                                  CONFIG_FCBS         equ  'X'
 15705                                  CONFIG_FILES        equ  'F'
 15706                                  CONFIG_INCLUDE      equ  'J'
 15707                                  CONFIG_INSTALL      equ  'I'
 15708                                  CONFIG_INSTALLHIGH  equ  'W'
 15709                                  CONFIG_LASTDRIVE    equ  'L'
 15710                                  CONFIG_MENUCOLOR    equ  'R'
 15711                                  CONFIG_MENUDEFAULT  equ  'A'
 15712                                  CONFIG_MENUITEM     equ  'E'
 15713                                  CONFIG_MULTITRACK   equ  'M'
 15714                                  CONFIG_NUMLOCK      equ  'N'
 15715                                  CONFIG_REM          equ  '0'
 15716                                  CONFIG_SEMICOLON    equ  ';'
 15717                                  CONFIG_SET          equ  'V'
 15718                                  CONFIG_SHELL        equ  'S'
 15719                                  CONFIG_STACKS       equ  'K'
 15720                                  CONFIG_SUBMENU      equ  'O'
 15721                                  CONFIG_SWITCHES     equ  '1'
 15722                                  
 15723                                  CONFIG_UNKNOWN      equ  'Z'
 15724                                  
 15725                                  CONFIG_OPTION_QUERY equ 80h
 15726                                  
 15727                                  ; ----------------------------------------------------------------------
 15728                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 15729                                  ; ----------------------------------------------------------------------
 15730                                  ; 21/03/2019 - Retro DOS v4.0
 15731                                  
 15732                                  true	equ	0FFFFh
 15733                                  false	equ	0
 15734                                  cr	equ	13
 15735                                  lf	equ	10
 15736                                  tab	equ	9
 15737                                  
 15738                                  multMULT	   equ	4Ah
 15739                                  multMULTGETHMAPTR  equ	1
 15740                                  multMULTALLOCHMA   equ	2
 15741                                  
 15742                                  ;NOEXEC    equ	FALSE
 15743                                  
 15744                                  stacksw    equ	true	;include switchable hardware stacks
 15745                                  mycds_size equ	88	;size of curdir_list. if it is not
 15746                                  			;the same, then will generate compile error.
 15747                                  
 15748                                  entrysize   equ     8
 15749                                  
 15750                                  mincount    equ     8
 15751                                  defaultcount equ    9
 15752                                  maxcount    equ     64
 15753                                  
 15754                                  minsize     equ     32
 15755                                  defaultsize equ     128
 15756                                  maxsize     equ     512
 15757                                  
 15758                                  ;%define allocbyte  byte [es:bp+0]
 15759                                  ;%define intlevel   byte [es:bp+1]
 15760                                  ;%define savedsp    word [es:bp+2]
 15761                                  ;%define savedss    word [es:bp+4]
 15762                                  ;%define newsp	    word [es:bp+6]
 15763                                  
 15764                                  allocbyte   equ     0
 15765                                  intlevel    equ     1
 15766                                  savedsp     equ     2
 15767                                  savedss     equ     4
 15768                                  newsp       equ     6
 15769                                  
 15770                                  free	    equ     0
 15771                                  allocated   equ     1
 15772                                  overflowed  equ     2
 15773                                  clobbered   equ     3
 15774                                  
 15775                                  ;---------------------------------------
 15776                                  ; external variable defined in ibmbio module for multi-track
 15777                                  
 15778                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 15779                                  			  ; it on after handling config.sys file as a
 15780                                  			  ; default value,if multrk_flag = multrk_off1.
 15781                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 15782                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 15783                                  
 15784                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 15785                                  
 15786                                  SYSINIT$:
 15787                                  	;IF	STACKSW 
 15788                                  	; include MSSTACK.INC	;Main stack program and data definitions
 15789                                  	; include STKMES.INC	;Fatal stack error message
 15790                                  	;   public Endstackcode
 15791                                  ;Endstackcode	label byte
 15792                                  	;ENDIF
 15793                                  
 15794                                  ; 05/07/2018
 15795                                  ; ----------------------------------------------------------------------
 15796                                  ; 04/06/2018 - Retro DOS v3.0
 15797                                  
 15798                                  ; ----------------------------------------------------------------------
 15799                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 15800                                  ; ----------------------------------------------------------------------
 15801                                  
 15802                                  ;	MSStack.inc
 15803                                  ;
 15804                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 15805                                  ;	should follow the standard Interrupt Sharing Scheme which has
 15806                                  ;	a standard header structure.
 15807                                  ;	Fyi, the following shows the relations between
 15808                                  ;	the interrupt vector and interrupt level.
 15809                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 15810                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 15811                                  ;	MSSTACK module modifies the following interrupt vectors
 15812                                  ;	to meet the standard Interrupt Sharing standard;
 15813                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 15814                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 15815                                  ;	should be initialized to indicat whether this interrupt handler is
 15816                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 15817                                  ;	program header is initialized in STKINIT.INC module.
 15818                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 15819                                  ;
 15820                                  
 15821                                  ;  User specifies the number of stack elements - default = 9
 15822                                  ;						 minimum = 8
 15823                                  ;						 maximum = 64
 15824                                  ;
 15825                                  ;  Intercepts Asynchronous Hardware Interrupts only
 15826                                  ;
 15827                                  ;  Picks a stack from pool of stacks and switches to it
 15828                                  ;
 15829                                  ;  Calls the previously saved interrupt vector after pushing flags
 15830                                  ;
 15831                                  ;  On return, returns the stack to the stack pool
 15832                                  ;
 15833                                  
 15834                                  ; This is a modification of STACKS:
 15835                                  ; 1. To fix a bug which was causing the program to take up too much space.
 15836                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 15837                                  ;    . Clobbers the stack that got too big instead of innocent stack
 15838                                  ;    . Allows system to work if the only stack that got too big was the most
 15839                                  ;      deeply nested one
 15840                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 15841                                  ; 4. Does not intercept any interupts on a PCjr.
 15842                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 15843                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 15844                                  
 15845                                  		;EVEN
 15846                                  ;align 2
 15847                                  		; 21/10/2022
 15848                                  
 15849 00000000 0000                    		dw	0	; spare field but leave these in order
 15850 00000002 0000                    stackcount:	dw	0
 15851 00000004 0000                    stackat: 	dw	0
 15852 00000006 0000                    stacksize:	dw	0
 15853 00000008 0000                    stacks:		dw	0
 15854 0000000A 0000                    		dw	0
 15855                                  
 15856 0000000C [0800]                  firstentry:	dw	stacks
 15857 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 15858 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 15859                                  
 15860                                  ;***********************************************************************
 15861                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 15862                                  
 15863                                  ; ----------------------------------------------------------------------
 15864                                  
 15865 00000012 00000000                old02:	dd	0
 15866                                  
 15867                                  int02:
 15868                                  
 15869                                  ; *********************************************************************
 15870                                  ;
 15871                                  ; this is special support for the pc convertible / nmi handler
 15872                                  ;
 15873                                  ;	on the pc convertible, there is a situation where an nmi can be 
 15874                                  ;	caused by using the "out" instructions to certain ports. when this
 15875                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 15876                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 15877                                  ;	includes other type of interrupts (hardware and software), and
 15878                                  ;	also includes other type of nmi's. when any nmi has occured,
 15879                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 15880                                  ;	the software takes specific steps to allow further interrupting.
 15881                                  ;
 15882                                  ;	for pc convertible, the situation where the nmi is generated by the
 15883                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 15884                                  ;	otherwords, it is actually a "restartable exception". in this
 15885                                  ;	case, the software handler must be able to get to the stack in
 15886                                  ;	order to figure out what instruction caused the problem, where
 15887                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 15888                                  ;	we will not switch stacks in this situation. this situation is
 15889                                  ;	detected by interrogating port 62h, and checking for a bit value
 15890                                  ;	of 80h. if set, *****do not switch stacks*****.
 15891                                  ;
 15892                                  ; *********************************************************************
 15893                                  
 15894 00000016 50                      	push	ax
 15895 00000017 06                      	push	es
 15896 00000018 B800F0                  	mov	ax,0F000h
 15897 0000001B 8EC0                    	mov	es,ax
 15898                                  	; 02/11/2022
 15899 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 15900 00000023 07                      	pop	es
 15901 00000024 750C                    	jne	short normal02
 15902                                  
 15903 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 15904                                  				; 0-3: values of DIP switches
 15905                                  				; 5: 1=Timer 2 channel out
 15906                                  				; 6: 1=I/O channel check
 15907                                  				; 7: 1=RAM parity check error occurred.
 15908 00000028 A880                    	test	al,80h
 15909 0000002A 7406                    	jz	short normal02
 15910                                  special02:
 15911 0000002C 58                      	pop	ax
 15912 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 15913                                  normal02:
 15914 00000032 58                      	pop	ax
 15915 00000033 E81101                  	call	do_int_stacks
 15916 00000036 [1200]                  	dw	old02
 15917                                  
 15918                                  ; ----------------------------------------------------------------------
 15919                                  
 15920 00000038 00000000                old08:	dd	0
 15921                                  
 15922                                  int08:
 15923 0000003C E80801                  	call	do_int_stacks
 15924 0000003F [3800]                  	dw	old08
 15925                                  
 15926                                  ; ----------------------------------------------------------------------
 15927                                  
 15928 00000041 00000000                old09:	dd	0
 15929                                  
 15930                                  int09:
 15931                                  
 15932                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 15933                                  ; as its first instruction for compatibility reasons
 15934                                  
 15935 00000045 EB02                    	jmp	short keyboard_lbl
 15936 00000047 90                      	nop
 15937 00000048 00                      	db	0
 15938                                  
 15939                                  keyboard_lbl:
 15940 00000049 E8FB00                  	call	do_int_stacks
 15941 0000004C [4100]                  	dw	old09
 15942                                  
 15943                                  ; ----------------------------------------------------------------------
 15944                                  
 15945 0000004E 00000000                old70:	dd	0
 15946                                  
 15947                                  int70:
 15948 00000052 E8F200                  	call	do_int_stacks
 15949 00000055 [4E00]                  	dw	old70
 15950                                  
 15951                                  ; ----------------------------------------------------------------------
 15952                                  
 15953                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 15954                                  ;public	int&a
 15955                                  ;public	old&a
 15956                                  ;public	firstflag&a
 15957                                  ;int&a	proc	far
 15958                                  ;	jmp	short entry_int&a&_stk
 15959                                  ;old&a	dd	  0		;forward pointer
 15960                                  ;	dw	  424bh 	;compatible signature for int. sharing
 15961                                  ;firstflag&a db   0		;the firstly hooked.
 15962                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 15963                                  ;	db	7 dup (0)	;reserved for future.
 15964                                  ;entry_int&a&_stk:
 15965                                  ;	call	do_int_stacks
 15966                                  ;	dw	old&a
 15967                                  ;intret_&a:
 15968                                  ;	iret
 15969                                  ;int&a	endp
 15970                                  ;	endm
 15971                                  
 15972                                  ; ----------------------------------------------------------------------
 15973                                  
 15974                                  int0A:
 15975 00000057 EB10                    	jmp	short entry_int0A_stk
 15976 00000059 00000000                old0A:	dd	0	
 15977 0000005D 4B42                    	dw	424Bh
 15978                                  firstflag0A:
 15979 0000005F 00                      	db	0
 15980 00000060 EB0C                    	jmp	short intret_0A
 15981 00000062 00<rep 7h>              	times	7 db 0
 15982                                  
 15983                                  entry_int0A_stk:
 15984 00000069 E8DB00                  	call	do_int_stacks
 15985 0000006C [5900]                  	dw	old0A
 15986                                  intret_0A:
 15987 0000006E CF                      	iret
 15988                                  
 15989                                  ; ----------------------------------------------------------------------
 15990                                  
 15991                                  int0B:
 15992 0000006F EB10                    	jmp	short entry_int0B_stk
 15993 00000071 00000000                old0B:	dd	0	
 15994 00000075 4B42                    	dw	424Bh
 15995                                  firstflag0B:
 15996 00000077 00                      	db	0
 15997 00000078 EB0C                    	jmp	short intret_0B
 15998 0000007A 00<rep 7h>              	times	7 db 0
 15999                                  
 16000                                  entry_int0B_stk:
 16001 00000081 E8C300                  	call	do_int_stacks
 16002 00000084 [7100]                  	dw	old0B
 16003                                  intret_0B:
 16004 00000086 CF                      	iret
 16005                                  
 16006                                  ; ----------------------------------------------------------------------
 16007                                  
 16008                                  int0C:
 16009 00000087 EB10                    	jmp	short entry_int0C_stk
 16010 00000089 00000000                old0C:	dd	0	
 16011 0000008D 4B42                    	dw	424Bh
 16012                                  firstflag0C:
 16013 0000008F 00                      	db	0
 16014 00000090 EB0C                    	jmp	short intret_0C
 16015 00000092 00<rep 7h>              	times	7 db 0
 16016                                  
 16017                                  entry_int0C_stk:
 16018 00000099 E8AB00                  	call	do_int_stacks
 16019 0000009C [8900]                  	dw	old0C
 16020                                  intret_0C:
 16021 0000009E CF                      	iret
 16022                                  
 16023                                  ; ----------------------------------------------------------------------
 16024                                  
 16025                                  int0D:
 16026 0000009F EB10                    	jmp	short entry_int0D_stk
 16027 000000A1 00000000                old0D:	dd	0	
 16028 000000A5 4B42                    	dw	424Bh
 16029                                  firstflag0D:
 16030 000000A7 00                      	db	0
 16031 000000A8 EB0C                    	jmp	short intret_0D
 16032 000000AA 00<rep 7h>              	times	7 db 0
 16033                                  
 16034                                  entry_int0D_stk:
 16035 000000B1 E89300                  	call	do_int_stacks
 16036 000000B4 [A100]                  	dw	old0D
 16037                                  intret_0D:
 16038 000000B6 CF                      	iret
 16039                                  
 16040                                  ; ----------------------------------------------------------------------
 16041                                  
 16042                                  int0E:
 16043 000000B7 EB10                    	jmp	short entry_int0E_stk
 16044 000000B9 00000000                old0E:	dd	0	
 16045 000000BD 4B42                    	dw	424Bh
 16046                                  firstflag0E:
 16047 000000BF 00                      	db	0
 16048 000000C0 EB0C                    	jmp	short intret_0E
 16049 000000C2 00<rep 7h>              	times	7 db 0
 16050                                  
 16051                                  entry_int0E_stk:
 16052 000000C9 E87B00                  	call	do_int_stacks
 16053 000000CC [B900]                  	dw	old0E
 16054                                  intret_0E:
 16055 000000CE CF                      	iret
 16056                                  
 16057                                  ; ----------------------------------------------------------------------
 16058                                  
 16059                                  int72:
 16060 000000CF EB10                    	jmp	short entry_int72_stk
 16061 000000D1 00000000                old72:	dd	0	
 16062 000000D5 4B42                    	dw	424Bh
 16063                                  firstflag72:
 16064 000000D7 00                      	db	0
 16065 000000D8 EB0C                    	jmp	short intret_72
 16066 000000DA 00<rep 7h>              	times	7 db 0
 16067                                  
 16068                                  entry_int72_stk:
 16069 000000E1 E86300                  	call	do_int_stacks
 16070 000000E4 [D100]                  	dw	old72
 16071                                  intret_72:
 16072 000000E6 CF                      	iret
 16073                                  
 16074                                  ; ----------------------------------------------------------------------
 16075                                  
 16076                                  int73:
 16077 000000E7 EB10                    	jmp	short entry_int73_stk
 16078 000000E9 00000000                old73:	dd	0	
 16079 000000ED 4B42                    	dw	424Bh
 16080                                  firstflag73:
 16081 000000EF 00                      	db	0
 16082 000000F0 EB0C                    	jmp	short intret_73
 16083 000000F2 00<rep 7h>              	times	7 db 0
 16084                                  
 16085                                  entry_int73_stk:
 16086 000000F9 E84B00                  	call	do_int_stacks
 16087 000000FC [E900]                  	dw	old73
 16088                                  intret_73:
 16089 000000FE CF                      	iret
 16090                                  
 16091                                  ; ----------------------------------------------------------------------
 16092                                  
 16093                                  int74:
 16094 000000FF EB10                    	jmp	short entry_int74_stk
 16095 00000101 00000000                old74:	dd	0	
 16096 00000105 4B42                    	dw	424Bh
 16097                                  firstflag74:
 16098 00000107 00                      	db	0
 16099 00000108 EB0C                    	jmp	short intret_74
 16100 0000010A 00<rep 7h>              	times	7 db 0
 16101                                  
 16102                                  entry_int74_stk:
 16103 00000111 E83300                  	call	do_int_stacks
 16104 00000114 [0101]                  	dw	old74
 16105                                  intret_74:
 16106 00000116 CF                      	iret
 16107                                  
 16108                                  ; ----------------------------------------------------------------------
 16109                                  
 16110                                  int76:
 16111 00000117 EB10                    	jmp	short entry_int76_stk
 16112 00000119 00000000                old76:	dd	0	
 16113 0000011D 4B42                    	dw	424Bh
 16114                                  firstflag76:
 16115 0000011F 00                      	db	0
 16116 00000120 EB0C                    	jmp	short intret_76
 16117 00000122 00<rep 7h>              	times	7 db 0
 16118                                  
 16119                                  entry_int76_stk:
 16120 00000129 E81B00                  	call	do_int_stacks
 16121 0000012C [1901]                  	dw	old76
 16122                                  intret_76:
 16123 0000012E CF                      	iret
 16124                                  
 16125                                  ; ----------------------------------------------------------------------
 16126                                  
 16127                                  int77:
 16128 0000012F EB10                    	jmp	short entry_int77_stk
 16129 00000131 00000000                old77:	dd	0	
 16130 00000135 4B42                    	dw	424Bh
 16131                                  firstflag77:
 16132 00000137 00                      	db	0
 16133 00000138 EB0C                    	jmp	short intret_77
 16134 0000013A 00<rep 7h>              	times	7 db 0
 16135                                  
 16136                                  entry_int77_stk:
 16137 00000141 E80300                  	call	do_int_stacks
 16138 00000144 [3101]                  	dw	old77
 16139                                  intret_77:
 16140 00000146 CF                      	iret
 16141                                  
 16142                                  ; ----------------------------------------------------------------------
 16143                                  
 16144                                  ;********************************************************************
 16145                                  ;common routines
 16146                                  ;********************************************************************
 16147                                  
 16148                                  ; do interrupt stack switching. the fake return address holds
 16149                                  ; a pointer to the far-pointer of the actual interrupt
 16150                                  ; service routine
 16151                                  
 16152                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 16153                                  ; 21/03/2019 - Retro DOS v4.0
 16154                                  
 16155                                  ;allocbyte   equ 0
 16156                                  ;intlevel    equ 1
 16157                                  ;savedsp     equ 2
 16158                                  ;savedss     equ 4
 16159                                  ;newsp       equ 6
 16160                                  
 16161                                  do_int_stacks:
 16162 00000147 50                      	push	ax
 16163 00000148 55                      	push	bp
 16164 00000149 06                      	push	es
 16165 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 16166 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 16167 00000154 B001                    	mov	al,allocated ; 1
 16168                                  	; 21/10/2022
 16169                                  	;xchg	[es:bp+allocbyte],al 
 16170                                  	; 11/12/2022
 16171 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 16172 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 16173 0000015C 754F                    	jne	short notfree02
 16174                                  
 16175 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 16176                                  
 16177                                  found02:
 16178 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 16179 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 16180                                  
 16181 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 16182                                  
 16183 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 16184                                  	; 21/10/2022
 16185                                  	;mov	bp,[es:bp+6]
 16186                                  	; 11/12/2022
 16187                                  	;cmp	[es:bp+0],ax	
 16188 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 16189 00000176 7542                    	jne	short foundbad02
 16190                                  
 16191                                  	;mov	ax,es			; point ss,sp to the new stack
 16192                                  	;mov	es,bp
 16193                                  	;mov	bp,sp
 16194                                  	;mov	bp,[bp+6]
 16195                                  	;mov	ss,ax
 16196                                  	;mov	sp,es
 16197                                  	;mov	es,ax
 16198                                  	;mov	bp,[cs:bp]
 16199                                  
 16200                                  	; 21/10/2022 (MSDOS 5.0 code SYSINIT code)
 16201 00000178 55                      	push    bp
 16202 00000179 89E5                    	mov     bp,sp
 16203 0000017B 8B4608                  	mov     ax,[bp+8]
 16204 0000017E 5D                      	pop     bp
 16205 0000017F 06                      	push    es
 16206 00000180 17                      	pop     ss
 16207 00000181 89EC                    	mov     sp,bp
 16208 00000183 89C5                    	mov     bp,ax
 16209                                  	; 11/12/2022
 16210                                  	;mov	bp,[cs:bp+0]	
 16211 00000185 2E8B6E00                	mov	bp,[cs:bp]	
 16212                                  
 16213 00000189 9C                      	pushf				; go execute the real interrupt handler
 16214                                  	; 11/12/2022
 16215 0000018A 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 16216                                  	; 21/10/2022
 16217                                  	;call	far [cs:bp+0]
 16218                                  
 16219 0000018E 89E5                    	mov	bp,sp			; retrieve the table offset for us
 16220                                  	; 11/12/2022
 16221 00000190 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 16222                                  	; 21/10/2022
 16223                                  	;mov	bp,[es:bp+0]
 16224 00000194 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 16225 00000198 268B6602                	mov	sp,[es:bp+savedsp]
 16226                                  
 16227                                  	; 11/12/2022
 16228                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 16229                                  	; 21/10/2022
 16230 0000019C 26C6460000              	mov	byte [es:bp],free ; 0
 16231 000001A1 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 16232                                  
 16233 000001A6 07                      	pop	es
 16234 000001A7 5D                      	pop	bp			; saved on entry
 16235 000001A8 58                      	pop	ax			; saved on entry
 16236 000001A9 83C402                  	add	sp,2
 16237 000001AC CF                      	iret				; done with this interrupt
 16238                                  
 16239                                  notfree02:
 16240 000001AD 3C01                    	cmp	al,allocated		; error flag
 16241 000001AF 7404                    	je	short findnext02	;  no, continue
 16242                                  	; 11/12/2022
 16243                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 16244                                  	; 21/10/2022
 16245 000001B1 26864600                	xchg	[es:bp],al
 16246                                  
 16247                                  findnext02:
 16248 000001B5 E81200                  	call	longpath
 16249 000001B8 EBAA                    	jmp	short found02
 16250                                  
 16251                                  foundbad02:
 16252 000001BA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16253 000001BF 72F4                    	jc	short findnext02
 16254 000001C1 89C5                    	mov	bp,ax			; flag this entry
 16255                                  	; 11/12/2022
 16256                                  	;mov	byte [es:bp+allocbyte],clobbered
 16257                                  	; 21/10/2022
 16258 000001C3 26C6460003              	mov	byte [es:bp],clobbered ; 3
 16259 000001C8 EBEB                    	jmp	short findnext02	; keep looking
 16260                                  
 16261                                  ; ----------------------------------------------------------------------
 16262                                  
 16263                                  ; Common routines
 16264                                  
 16265                                  longpath:
 16266                                  	; 21/03/2019
 16267 000001CA 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 16268                                  lploopp:
 16269                                  	; 11/12/2022
 16270                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 16271                                  	; 21/10/2022
 16272 000001CF 26807E0000              	cmp	byte [es:bp],free
 16273 000001D4 7512                    	jne	short inuse		;  no, try next one
 16274                                  
 16275 000001D6 B001                    	mov	al,allocated
 16276                                  	; 11/12/2022
 16277                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 16278                                  	; 21/10/2022
 16279 000001D8 26864600                	xchg	[es:bp],al
 16280 000001DC 3C00                    	cmp	al,free 		; is it still free?
 16281 000001DE 7414                    	je	short found		;  yes, go use it
 16282                                  
 16283 000001E0 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 16284 000001E2 7404                    	je	short inuse		;  no, check the next one
 16285                                  
 16286                                  	; 11/12/2022
 16287                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 16288                                  	; 21/10/2022
 16289 000001E4 26884600                	mov	[es:bp],al
 16290                                  inuse:
 16291 000001E8 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16292 000001ED 7406                    	je	short fatal
 16293 000001EF 83ED08                  	sub	bp,entrysize
 16294 000001F2 EBDB                    	jmp	short lploopp
 16295                                  found:
 16296 000001F4 C3                      	retn
 16297                                  fatal:
 16298 000001F5 1E                      	push	ds
 16299 000001F6 B800F0                  	mov	ax,0F000h		;look at the model byte
 16300 000001F9 8ED8                    	mov	ds,ax
 16301 000001FB 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 16302 00000200 1F                      	pop	ds
 16303 00000201 7504                    	jne	short skip_nmis
 16304                                  
 16305 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
 16306 00000205 E672                    	out	72h,al
 16307                                  
 16308                                  skip_nmis:
 16309 00000207 FA                      	cli				; disable and mask
 16310 00000208 B0FF                    	mov	al,0FFh			;   all other ints
 16311 0000020A E621                    	out	021h,al
 16312 0000020C E6A1                    	out	0A1h,al
 16313                                  
 16314 0000020E 8CCE                    	mov	si,cs
 16315 00000210 8EDE                    	mov	ds,si
 16316 00000212 BE[3902]                	mov	si,fatal_msg
 16317                                  ;SR;
 16318                                  ;   We set all foci to this VM to issue the stack failure message
 16319                                  ;
 16320 00000215 50                      	push	ax
 16321 00000216 1E                      	push	ds
 16322                                  	;;mov	ax,Bios_Data ; 0070h
 16323                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16324                                  	; 21/10/2022
 16325 00000217 B87000                  	mov	ax,DOSBIODATASEG
 16326 0000021A 8ED8                    	mov	ds,ax
 16327                                  
 16328                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 16329 0000021C F606[CE08]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 16330 00000221 1F                      	pop	ds
 16331 00000222 58                      	pop	ax
 16332 00000223 7405                    	jz	short fatal_loop	; win386 not present, continue
 16333                                  
 16334                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 16335                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 16336                                  	; 21/10/2022
 16337 00000225 9A[CF08]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 16338                                  ;
 16339                                  ;SR; We do not bother about the returned status of this call. 
 16340                                  ;
 16341                                  fatal_loop:
 16342 0000022A AC                      	lodsb
 16343 0000022B 3C24                    	cmp	al,'$'
 16344 0000022D 7408                    	je	short fatal_done
 16345                                  
 16346 0000022F B307                    	mov	bl,7
 16347 00000231 B40E                    	mov	ah,14
 16348 00000233 CD10                    	int	10h			; whoops, this enables ints
 16349 00000235 EBF3                    	jmp	short fatal_loop
 16350                                  
 16351                                  fatal_done:
 16352 00000237 EBFE                    	jmp	short fatal_done
 16353                                  
 16354                                  
 16355                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 16356                                  ; ----------------------------------------------------------------------
 16357                                  ;	include msbio.cl5		; fatal stack error message
 16358                                  
 16359                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 16360                                  
 16361                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 16362                                  ; ----------------------------------------------------------------------
 16363                                  ; 04/06/2018 - Retro DOS v3.0
 16364                                  
 16365                                  fatal_msg:
 16366 00000239 0D0A                    	db	0Dh,0Ah
 16367 0000023B 070D0A                  	db	7,0Dh,0Ah
 16368 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 16368 00000247 737461636B206F7665-
 16368 00000250 72666C6F770D0A     
 16369 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 16369 00000260 6C7465640D0A24     
 16370                                  
 16371                                  endstackcode:
 16372                                  
 16373                                  ; ----------------------------------------------------------------------
 16374                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 16375                                  ; ----------------------------------------------------------------------
 16376                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 16377                                  
 16378                                  ; 22/03/2019 - Retro DOS v4.0
 16379                                  
 16380                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 16381                                  
 16382                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 16383                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 16384                                  
 16385                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16386                                  ; ----------------------------------------------------------------------
 16387                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 16388                                  
 16389                                  SYSINIT:	
 16390 00000267 E91C02                          JMP	GOINIT
 16391                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 16392                                  
 16393                                  ; ----------------------------------------------------------------------
 16394                                  
 16395                                  struc DDHighInfo
 16396 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 16397 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 16398 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 16399                                  endstruc
 16400                                  
 16401                                  ; 22/03/2019 - Retro DOS v4.0
 16402                                  
 16403 0000026A 00                      runhigh: db	0
 16404                                  
 16405                                  ; 02/11/2022
 16406                                  ;align 4
 16407                                  
 16408                                  DOSINFO: 
 16409 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 16410                                  ;MSDOS:
 16411                                  dos_temp_location: ; dword ; MSDOS 6.0
 16412                                  dosinit:		; MSDOS 6.0
 16413 0000026F 0000                    	dw	0
 16414                                  
 16415                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16416                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 16417                                  ;	dw	0
 16418                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 16419                                  
 16420                                  CURRENT_DOS_LOCATION:
 16421 00000271 0000                    	dw	0
 16422                                  
 16423                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 16424                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 16425                                  
 16426                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16427                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 16428                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16429                                  
 16430                                  DEVICE_LIST:
 16431 00000273 00000000                	dd	0
 16432                                  
 16433                                  ; 04/06/2018 - Retro DOS v3.0
 16434                                  ; 28/03/2018
 16435                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 16436                                  ;
 16437                                  sysi_country:	
 16438 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 16439                                  
 16440                                  ; MSDOS 6.0
 16441 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 16442                                  
 16443 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 16444 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 16445                                  
 16446 00000283 0000                    def_php:	dw	0
 16447                                  
 16448                                  ; M022--
 16449                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 16450                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 16451                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 16452                                  ;  the new home.
 16453                                  
 16454                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 16455                                  ; 21/10/2022
 16456                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 16457                                  
 16458                                  ; 22/10/2022
 16459                                  seg_reinit_ptr:	; label dword
 16460 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 16461                                  temp_bcode_seg:
 16462                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 16463                                  		; 22/10/2022
 16464 00000287 A102                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 16465                                  
 16466                                  fake_floppy_drv:
 16467 00000289 00                      		db	0	; set to 1 if this machine
 16468                                  				; does not have any floppies!!!
 16469                                  
 16470                                  ; Internal Stack Parameters
 16471                                  
 16472 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 16473 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 16474 0000028E 00000000                stack_addr:	dd	0	
 16475                                  
 16476                                  ; 05/06/2018 - Retro DOS v3.0
 16477                                  
 16478                                  ; various default values
 16479                                  
 16480 00000292 0100                    MEMORY_SIZE:	dw	1
 16481                                  
 16482                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 16483                                  
 16484 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 16485 00000296 00                      DEFAULT_DRIVE:	db	0	;initialized by ibminit.
 16486 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 16487 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 16488 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 16489                                  
 16490 0000029D 08                      FILES:	db	8	; enough files for pipe
 16491 0000029E 04                      FCBS:	db	4	; performance for recycling
 16492 0000029F 00                      KEEP:	db	0	; keep original set
 16493 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 16494                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 16495                                  ;CONFBOT: dw	0
 16496                                  ;ALLOCLIM: dw	0
 16497                                  CONFBOT: ; 02/11/2022
 16498 000002A1 0000                    top_of_cdss: dw 0
 16499                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 16500 000002A3 0000                    ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 16501                                  
 16502 000002A5 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 16503                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SAYSINIT compatibility)
 16504                                  ; (SYSINIT:02A9h)
 16505                                  command_line:
 16506 000002A9 0200                    	db	2,0
 16507 000002AB 50                      	db	'P'
 16508 000002AC 00                      	db	0
 16509 000002AD 00<rep 7Ch>             	times	124 db 0 ; db 124 dup(0)	
 16510                                  ; (SYSINIT:0329h)
 16511 00000329 00                      ZERO:	db	0
 16512 0000032A 00                      sepchr:	db	0
 16513 0000032B 0000                    linecount: dw	0			; line count in config.sys
 16514 0000032D 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 16515 00000335 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 16516                                  
 16517 00000337 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 16518 00000338 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 16519                                  
 16520 00000339 0000                    buf_prev_off:	dw	0
 16521                                  
 16522                                          ;IF      NOT NOEXEC
 16523                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 16524                                          ;ENDIF
 16525                                  
 16526                                  ; 01/05/2018
 16527                                  COMEXE:
 16528 0000033B 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 16529 0000033D [A902]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 16530 0000033F 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16531 00000341 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 16532 00000343 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16533 00000345 [2903]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 16534 00000347 0000                    		dw	0
 16535                                  
 16536                                  ; variables for install= command.
 16537                                  
 16538 00000349 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 16539                                  					;  indicating the pass number
 16540                                  					; 0 - do scan for DOS=HIGH/LOW
 16541                                  					; 1 - load device drivers
 16542                                  					; 2 - was to load IFS
 16543                                  					;      now it is unused
 16544                                  					; 3 - do install=
 16545                                  					; >3 - nop
 16546 0000034A 0000                    install_flag:	dw	0
 16547                                  
 16548                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 16549                                  has_installed	equ	00000010b	; sysinit_base installed.
 16550                                  
 16551 0000034C 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 16552 0000034E 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 16553 00000352 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 16554 00000356 0000                    checksum:	dw	0		; used by sum_up
 16555                                  
 16556 00000358 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 16557 0000036C 00                      ldexec_line:	db	0		;# of parm characters
 16558 0000036D 20                      ldexec_start:	db	' '
 16559 0000036E 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 16560                                  
 16561                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 16562                                  
 16563                                  instexe:
 16564 000003BE 0000                    iexec.environ:	dw	0		; seg addr of environment
 16565 000003C0 [6C03]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 16566 000003C2 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16567 000003C4 [5803]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 16568 000003C6 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16569 000003C8 [5803]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 16570 000003CA 0000                    		dw	0
 16571                                  
 16572                                  ; variables for comment=
 16573                                  
 16574 000003CC 00                      com_level:	db	0		; level of " " in command line
 16575 000003CD 00                      cmmt:		db	0		; length of comment string token
 16576 000003CE 00                      cmmt1:		db	0		; token
 16577 000003CF 00                      cmmt2:		db	0		; token
 16578 000003D0 00                      cmd_indicator:	db	0
 16579 000003D1 00                      donotshownum:	db	0
 16580                                  
 16581 000003D2 0000                    count:		dw	0
 16582 000003D4 0000                    org_count:	dw	0
 16583 000003D6 0000                    chrptr:		dw	0
 16584 000003D8 0000                    cntryfilehandle: dw	0
 16585 000003DA 0000                    old_area:	dw	0
 16586 000003DC 0000                    impossible_owner_size: dw 0		; paragraph
 16587                                  
 16588                                  bucketptr: ; label dword
 16589                                  bufptr:	   ; label dword		; leave this stuff in order!
 16590 000003DE 0000                    memlo:	dw	0
 16591                                  prmblk:	   ; label word
 16592 000003E0 0000                    memhi:	dw	0
 16593 000003E2 0000                    ldoff:	dw	0
 16594 000003E4 0000                    area:	dw	0
 16595                                  
 16596                                  ; Following is the request packet used to call INIT routines for 
 16597                                  ; all device drivers. Some fields may be accessed individually in
 16598                                  ; the code, and hence have individual labels, but they should not
 16599                                  ; be separated.
 16600                                  
 16601 000003E6 18                      packet:	db	24			; was 22
 16602 000003E7 00                      	db	0
 16603 000003E8 00                      	db	0			; initialize code
 16604 000003E9 0000                    	dw	0
 16605 000003EB 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 16606                                  
 16607 000003F3 00                      unitcount:	db	0
 16608 000003F4 00000000                break_addr:	dd	0
 16609 000003F8 00000000                bpb_addr:	dd	0
 16610                                  drivenumber:	; 22/10/2022
 16611 000003FC 00                      devdrivenum:	db	0 
 16612 000003FD 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 16613                                  
 16614                                  ; end of request packet
 16615                                  
 16616                                  ;drivenumber:	db	0  ; 22/03/2019
 16617                                  
 16618                                  toomanydrivesflag:
 16619 000003FF 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 16620                                  align 2
 16621                                  
 16622                                  BCodeSeg:	; 21/10/2022
 16623 00000400 A102                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 16624                                  	;dw	Bios_Code ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 16625                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 16626                                  
 16627                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16628                                  ;; 19/04/2019
 16629                                  ;_timer_lw_:
 16630                                  ;	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 16631                                  	
 16632                                  ;SR;
 16633                                  ; This is the communication block between the DOS and the BIOS. It starts at
 16634                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 16635                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 16636                                  ;is passed to DOS as part of the DOSINIT call.
 16637                                  ;
 16638                                  
 16639                                  BiosComBlock:
 16640                                  	;dd	Bios_Data:SysinitPresent 
 16641                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 16642 00000402 [FB08]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 16643                                  	;dw	KERNEL_SEGMENT ; 0070h
 16644                                  	; 21/10/2022
 16645 00000404 7000                    	dw	DOSBIODATASEG ; 0070h
 16646                                  
 16647                                  ;align 2
 16648                                  
 16649                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 16650                                  tempstack:	
 16651 00000406 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 16652                                  
 16653                                  ; ----------------------------------------------------------------------------
 16654                                  
 16655                                  	; 22/10/2022 - Retro DOS v4.0
 16656                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 16657                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 16658                                  	; 12/12/2022
 16659                                  	; 22/03/2019 - Retro DOS v4.0
 16660                                  	; 06/07/2018
 16661                                  	; 04/06/2018 - Retro DOS v3.0
 16662                                  ; before doing anything else, let's set the model byte
 16663 00000486 B4C0                    	mov	ah,0C0h 		; get system configuration
 16664 00000488 CD15                    	int	15h			; *
 16665 0000048A 7217                    	jc	short no_rom_config
 16666                                  
 16667 0000048C 80FC00                  	cmp	ah,0			; double check
 16668 0000048F 7512                    	jne	short no_rom_config
 16669 00000491 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 16670 00000495 2EA2[3703]              	mov	[cs:sys_model_byte],al 
 16671 00000499 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 16672 0000049D 2EA2[3803]              	mov	[cs:sys_scnd_model_byte],al
 16673                                  	;jmp	short SYSIN
 16674                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16675 000004A1 EB2D                    	jmp	short move_myself
 16676                                  
 16677                                  no_rom_config:				; Old ROM
 16678 000004A3 B800F0                  	mov	ax,0F000h
 16679 000004A6 8ED8                    	mov	ds,ax
 16680 000004A8 A0FEFF                  	mov	al,[0FFFEh]
 16681 000004AB 2EA2[3703]              	mov	[cs:sys_model_byte],al	; set the model byte.
 16682                                  
 16683                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 16684                                  ; execute the equipment determination interrupt and then
 16685                                  ; check the returned value to see if we have any floppy drives
 16686                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 16687                                  ; see the at tech ref bios listings for help on the equipment
 16688                                  ; flag interrupt (11h)	
 16689                                  
 16690                                  	; 22/10/2022
 16691                                  check_for_fake_floppy:			; entry point for rom_config above
 16692 000004AF CD11                    	int	11h			; check equipment flag
 16693                                  
 16694                                  	; 12/12/2022
 16695 000004B1 A801                    	test	al,1		
 16696                                  	;test	ax,1			; have any floppies?
 16697 000004B3 751B                    	jnz	short move_myself	; yes,normal system
 16698                                  
 16699                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 16700                                  ; whether it is an old ROM BIOS or a new one
 16701                                  ;
 16702                                  ; WARNING !!!
 16703                                  ;
 16704                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 16705                                  ; here will require an equivalent modification in MSINIT.ASM also
 16706                                  
 16707 000004B5 06                      	push	es
 16708                                  
 16709 000004B6 30C9                    	xor	cl,cl	
 16710 000004B8 B408                    	mov	ah,8			; get disk parameters
 16711 000004BA B200                    	mov	dl,0			; of drive 0
 16712 000004BC CD13                    	int	13h
 16713                                  
 16714 000004BE 07                      	pop	es
 16715                                  
 16716 000004BF 720F                    	jc	short move_myself	; if error lets assume that the
 16717                                  					;  ROM BIOS lied
 16718 000004C1 80F900                  	cmp	cl,0			; double check (max sec no cannot be 0)
 16719 000004C4 740A                    	je	short move_myself
 16720                                  
 16721 000004C6 08D2                    	or	dl,dl			; number of flp drvs == 0?
 16722 000004C8 7506                    	jnz	short move_myself
 16723                                  
 16724 000004CA 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 16725                                  
 16726                                  move_myself:
 16727 000004D0 FC                      	cld				; set up move
 16728 000004D1 31F6                    	xor	si,si
 16729 000004D3 89F7                    	mov	di,si
 16730                                  
 16731                                  	; 12/12/2022
 16732 000004D5 0E                      	push	cs
 16733 000004D6 1F                      	pop	ds
 16734                                  
 16735                                  	;mov	cx,[cs:MEMORY_SIZE]
 16736 000004D7 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 16737                                  
 16738                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16739                                  ;;;	if	msver
 16740                                  ;	cmp	cx,1		; 1 means do scan
 16741                                  ;	jnz	short noscan
 16742                                  ;	mov	cx,2048		; start scanning at 32k boundary
 16743                                  ;	xor	bx,bx
 16744                                  ;
 16745                                  ;memscan:inc	cx
 16746                                  ;	jz	setend
 16747                                  ;	mov	ds,cx
 16748                                  ;	mov	al,[bx]
 16749                                  ;	not	al
 16750                                  ;	mov	[bx],al
 16751                                  ;	cmp	al,[bx]
 16752                                  ;	not	al
 16753                                  ;	mov	[bx],al
 16754                                  ;	jz	short memscan
 16755                                  ;setend:
 16756                                  ;	mov	cs:[memory_size],cx
 16757                                  ;;;	endif
 16758                                  
 16759                                  ;noscan: 				; cx is mem size in para
 16760                                  ;;
 16761                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 16762                                  ;;		  before we try to run.
 16763                                  ;;	       b) in any case, we should check for sufficient memory and give
 16764                                  ;;		  an appropriate error diagnostic if there isn't enough
 16765                                  ;
 16766                                  ;	push	cs
 16767                                  ;	pop	ds
 16768                                  ;
 16769                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 16770                                  ;;	  that way it would be easier to slide them down home in a minimal
 16771                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 16772                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 16773                                  ;;	  temporary home and the final one.  the problem with doing that
 16774                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 16775                                  ;
 16776                                  ;	dec	cx			; one para for an arena at end of mem
 16777                                  ;					; in case of UMBs
 16778                                  
 16779                                  	; 22/10/2022
 16780                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 16781                                  
 16782                                  	; 12/12/2022
 16783                                  	;push	cs
 16784                                  	;pop	ds
 16785                                  
 16786 000004DB 49                      	dec	cx
 16787                                  
 16788                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 16789                                  
 16790 000004DC 31DB                    	xor	bx,bx
 16791 000004DE 8EC3                    	mov	es,bx
 16792 000004E0 268B1EBC00              	mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 16793 000004E5 268E06BE00              	mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 16794 000004EA 26817F035250            	cmp	word [es:bx+3],'RP'
 16795 000004F0 751B                    	jne	short NoRPL
 16796 000004F2 26807F054C              	cmp	byte [es:bx+5],'L'
 16797 000004F7 7514                    	jne	short NoRPL
 16798                                  
 16799 000004F9 89CA                    	mov	dx,cx			; get TOM into DX
 16800 000004FB 52                      	push	dx
 16801 000004FC B8064A                  	mov	ax,4A06h
 16802                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 16803 000004FF CD2F                    	int	2Fh			; Get new TOM from any RPL
 16804 00000501 58                      	pop	ax
 16805 00000502 89D1                    	mov	cx,dx
 16806 00000504 39C2                    	cmp	dx,ax
 16807 00000506 7405                    	je	short NoRPL
 16808                                  	
 16809                                  	; 11/12/2022
 16810                                  	; ds = cs
 16811 00000508 8916[9402]              	mov	[RPLMemTop],dx
 16812                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16813                                  	;mov	[cs:RPLMemTop],dx
 16814                                  	
 16815 0000050C 49                      	dec	cx
 16816                                  NoRPL:
 16817 0000050D B8[F038]                	mov	ax,SI_end		; need this much room for sysinit
 16818                                  					; (SI_end == sysinit code size)
 16819 00000510 E8BB06                  	call	off_to_para
 16820 00000513 29C1                    	sub	cx,ax
 16821                                  
 16822                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 16823                                  ; code above sysinit in memory
 16824                                  ;
 16825 00000515 81E9000A                	sub	cx,DOSSIZE/16		; leave this much room for DOS
 16826                                  
 16827 00000519 B8001A                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 16828 0000051C E8AF06                  	call	off_to_para		; leave this much room for BIOS code
 16829 0000051F 29C1                    	sub	cx,ax
 16830 00000521 8EC1                    	mov	es,cx			; offset where sysinit will be located
 16831                                  
 16832 00000523 B9[F038]                	mov	cx,SI_end		; (sysinit code size)
 16833 00000526 D1E9                    	shr	cx,1			; divide by 2 to get words
 16834 00000528 F3A5                    	rep	movsw			; relocate sysinit
 16835                                  
 16836 0000052A 06                      	push	es			; push relocated segment
 16837 0000052B B8[3005]                	mov	ax,SYSIN
 16838 0000052E 50                      	push	ax			; push relocated entry point
 16839                                  
 16840 0000052F CB                      	retf				; far jump to relocated sysinit
 16841                                  
 16842                                  ; ----------------------------------------------------------------------------
 16843                                  
 16844                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 16845                                  
 16846                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 16847                                  	; (SYSINIT:0533h)
 16848                                  SYSIN:
 16849                                  	; Retro DOS 4.0 - 22/03/2019
 16850                                  	; Retro DOS 2.0 - 25/02/2018
 16851                                  
 16852                                  	; 23/04/2019
 16853                                  	;;mov	ax,Bios_Data
 16854                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16855                                  	; 21/10/2022
 16856 00000530 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 16857 00000533 8ED8                    	mov	ds,ax
 16858 00000535 8C0E[F908]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 16859 00000539 C606[FB08]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 16860                                  
 16861                                  ; first move the MSDOS.SYS image up to a harmless place 
 16862                                  ; on top of our new sysinitseg
 16863                                  
 16864                                  	; 22/10/2022
 16865 0000053E B8[F038]                	mov	ax,SI_end		; how big is sysinitseg?
 16866 00000541 E88A06                  	call	off_to_para
 16867 00000544 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 16868 00000546 01C8                    	add	ax,cx
 16869 00000548 8EC0                    	mov	es,ax
 16870                                  	
 16871 0000054A 31F6                    	xor	si,si
 16872 0000054C 89F7                    	mov	di,si
 16873                                  
 16874 0000054E 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 16875                                  
 16876                                  	;mov	ax,cs	
 16877                                  	;mov	ds,ax
 16878                                  
 16879                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 16880                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 16881                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 16882                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 16883                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 16884                                  
 16885                                  	; 22/10/2022
 16886 00000553 B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 16887 00000556 F3A5                    	rep     movsw
 16888 00000558 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 16889                                  
 16890                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 16891                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 16892                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 16893                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 16894                                  
 16895                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 16896                                  	;mov	ax,cs
 16897                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 16898                                  	;mov	ds,ax
 16899                                  
 16900                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 16901                                  
 16902                                  ;	; 24/04/2019 
 16903                                  ;;ifndef ROMDOS
 16904                                  ;	mov	ax,[es:3] 		; get offset of dos
 16905                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 16906                                  ;	mov	[dosinit],ax		; that's the entry point offset
 16907                                  ;	call	off_to_para		; subtract this much from segment
 16908                                  ;	; 23/04/2019
 16909                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 16910                                  ;	sub	[FINAL_DOS_LOCATION],ax
 16911                                  ;;else
 16912                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 16913                                  ;;
 16914                                  ;;endif ; ROMDOS
 16915                                  
 16916                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 16917                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 16918                                  
 16919                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 16920                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 16921                                  
 16922                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 16923                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 16924 0000055D A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 16925                                  
 16926 00000560 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 16927                                  	; 02/11/2022
 16928 00000564 E86706                  	call	off_to_para		; subtract this much from segment
 16929 00000567 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 16930                                  
 16931                                  	; Current DOSCODE start address = dword [dosinit]
 16932                                  
 16933                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 16934                                  ;; until it is determined whether it will be running in HIMEM or not.
 16935                                  
 16936                                  ;ifndef ROMDOS
 16937                                  
 16938                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 16939                                  
 16940                                  	; 22/10/2022
 16941 0000056C 8CC0                    	mov	ax,es
 16942 0000056E 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 16943 00000571 8EC0                    	mov	es,ax
 16944 00000573 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 16945 00000578 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 16946                                  
 16947                                  	;mov	si,BCODE_START ; mov si,30h
 16948                                  	; 09/12/2022
 16949 0000057A BE[3000]                	mov	si,BCODESTART
 16950                                  	; 02/11/2022
 16951 0000057D 89F7                    	mov	di,si
 16952 0000057F B9001A                  	mov	cx,BCODE_END   ; mov cx,1A60h
 16953 00000582 29F1                    	sub	cx,si
 16954 00000584 D1E9                    	shr	cx,1
 16955 00000586 F3A5                    	rep	movsw			; move Bios_Code into place
 16956                                  
 16957 00000588 8CC0                    	mov	ax,es			; tell it what segment it's in
 16958 0000058A 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 16959                                  
 16960                                  ;endif	; not ROMDOS
 16961                                  
 16962                                  ; now call dosinit while it's in its temporary home
 16963                                  
 16964                                  	;mov	ax,cs
 16965                                  	;mov	ds,ax	 
 16966                                  
 16967                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 16968                                  
 16969                                  	; 22/10/2022
 16970                                  
 16971 0000058F 2EC43E[0204]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 16972                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 16973 00000594 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 16974                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 16975                                  
 16976 00000599 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 16977                                  
 16978 0000059E FA                      	cli
 16979 0000059F 8CC8                    	mov	ax,cs
 16980 000005A1 8ED0                    	mov	ss,ax
 16981                                  
 16982                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 16983                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 16984                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 16985                                  ;SYSINIT:0532h:
 16986                                  
 16987                                  ; 22/10/2022
 16988                                  ; ----------------------------------------------------------------------------
 16989                                  ;SYSINIT:05A6h:
 16990                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 16991                                  
 16992                                  	;mov	sp, 05A6h
 16993 000005A3 BCA205                  	mov     sp,locstack		; set stack
 16994                                  
 16995 000005A6 FB                      	sti
 16996                                  
 16997                                  ;align 2
 16998                                  	; 30/03/2018
 16999                                  ;LOCSTACK:
 17000                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 17001                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 17002                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 17003                                  
 17004                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17005                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 17006                                  
 17007                                  ; This call to DOSINIT will relocate the DOS data from its present location
 17008                                  ; at the top of memory, to its final location in low memory just above the
 17009                                  ; BIOS data. It will then build important DOS data structures in low 
 17010                                  ; memory following the DOS data. It returns (among many other things) the
 17011                                  ; new starting address of free memory.
 17012                                  
 17013 000005A7 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 17014                                  			 ; es:di -> sysinitvars_ext
 17015                                  
 17016 000005AC 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 17017                                  	
 17018                                  	; 11/12/2022
 17019                                  	; 22/03/2019
 17020 000005B1 0E                      	push	cs
 17021 000005B2 1F                      	pop	ds
 17022                                  	; 22/10/2022
 17023 000005B3 A3[8102]                	mov	[hi_doscod_size],ax
 17024 000005B6 890E[7F02]              	mov	[lo_doscod_size],cx
 17025 000005BA 8916[7B02]              	mov	[dos_segreinit],dx
 17026                                  	
 17027                                  	; 11/12/2022
 17028                                  	; ds = cs
 17029                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 17030                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 17031                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 17032                                  
 17033                                  	; 05/06/2018 - Retro DOS v3.0
 17034                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 17035                                  
 17036                                  	; 11/12/2022
 17037                                  	; ds = cs
 17038                                  	; 22/10/2022
 17039                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 17040 000005BE 268B05                  	mov	ax,[es:di] ; 22/03/2019
 17041                                  	;mov	[cs:DOSINFO],ax
 17042 000005C1 A3[6B02]                	mov	[DOSINFO],ax
 17043                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 17044 000005C4 268B4502                	mov	ax,[es:di+2]
 17045                                  	;mov	[cs:DOSINFO+2],ax
 17046 000005C8 A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 17047                                  
 17048                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 17049 000005CB 268B4504                	mov	ax,[es:di+4]
 17050                                  	;mov	[cs:sysi_country],ax
 17051 000005CF A3[7702]                	mov	[sysi_country],ax
 17052                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 17053 000005D2 268B4506                	mov	ax,[es:di+6]
 17054                                  	;mov	[cs:sysi_country+2],ax
 17055 000005D6 A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 17056                                  
 17057                                  	; 20/04/2019
 17058                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 17059                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 17060                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 17061                                  	; 22/10/2022
 17062                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 17063                                  	;;;mov	[dos_segreinit+2],es
 17064                                  	;;mov	[dos_segreinit+2],ax
 17065                                  	;mov	[cs:dos_segreinit+2],ax
 17066                                  	; 11/12/2022
 17067                                  	; ds = cs
 17068 000005D9 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17069 000005DD 8C06[7D02]              	mov	[dos_segreinit+2],es
 17070                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17071                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 17072                                  	;mov	[cs:dos_segreinit+2],es
 17073                                  
 17074                                  ; ----------------------------------------------------------------------------
 17075                                  
 17076                                  ;SYSINIT:0577h:
 17077                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 17078                                  ;SYSINIT:05D1h:	; NoRPLArena 
 17079                                  
 17080                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17081                                  ;------ Cover up RPL code with an arena
 17082                                  ;SYSINIT:05EBh:
 17083                                  	; 11/12/2022
 17084                                  	; ds = cs
 17085 000005E1 31DB                    	xor	bx,bx
 17086 000005E3 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 17087                                  	;cmp	word [RPLMemTop],0
 17088                                  	;;cmp	word [cs:RPLMemTop],0
 17089 000005E7 7450                    	je	short NoRPLArena
 17090                                  
 17091                                  ;------ alloc all memory
 17092                                  
 17093                                  	; 11/12/2022
 17094                                  	;mov	bx,0FFFFh
 17095 000005E9 4B                      	dec	bx
 17096                                  	; bx = 0FFFFh
 17097 000005EA B448                    	mov	ah,48h
 17098 000005EC CD21                    	int	21h
 17099                                  			; DOS - 2+ - ALLOCATE MEMORY
 17100                                  			; BX = number of 16-byte paragraphs desired
 17101 000005EE B448                    	mov	ah,48h
 17102 000005F0 CD21                    	int	21h
 17103                                  
 17104 000005F2 8EC0                    	mov	es,ax			; get it into ES and save it
 17105 000005F4 06                      	push	es
 17106                                  
 17107                                  ;------ resize upto RPL mem
 17108                                  
 17109                                  	; 11/12/2022
 17110                                  	; ds = cs
 17111                                  	;sub	ax,[cs:RPLMemTop]
 17112 000005F5 2B06[9402]              	sub	ax,[RPLMemTop]
 17113 000005F9 F7D8                    	neg	ax
 17114 000005FB 48                      	dec	ax
 17115 000005FC 89C3                    	mov	bx,ax
 17116 000005FE B44A                    	mov	ah,4Ah
 17117 00000600 CD21                    	int	21h
 17118                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17119                                  			; ES = segment address of block to change
 17120                                  			; BX = new size in paragraphs
 17121                                  
 17122                                  ;------ allocate the free (RPL MEM)
 17123                                  
 17124 00000602 BBFFFF                  	mov	bx,0FFFFh
 17125 00000605 B448                    	mov	ah,48h
 17126 00000607 CD21                    	int	21h
 17127 00000609 B448                    	mov	ah,48h
 17128 0000060B CD21                    	int	21h
 17129                                  
 17130                                  ;----- mark that it belongs to RPL
 17131                                  
 17132 0000060D 48                      	dec	ax
 17133 0000060E 8EC0                    	mov	es,ax
 17134                                  	;mov	word [es:arena_owner],8
 17135 00000610 26C70601000800          	mov	word [es:1],8
 17136                                  	;mov	word [es:arena_name],'RP'
 17137 00000617 26C70608005250          	mov	word [es:8],'RP'
 17138                                  	;mov	word [es:arena_name+2],'L'
 17139 0000061E 26C7060A004C00          	mov	word [es:10],'L'
 17140                                  	;mov	word [es:arena_name+4],0
 17141 00000625 26C7060C000000          	mov	word [es:12],0
 17142                                  	;mov	word [es:arena_name+6],0
 17143 0000062C 26C7060E000000          	mov	word [es:14],0	
 17144                                  
 17145 00000633 07                              pop     es                      ; get back ptr to first block
 17146 00000634 B449                            mov     ah,49h	; Dealloc	; and free it
 17147 00000636 CD21                    	int	21h		
 17148                                  					; DOS - 2+ - FREE MEMORY
 17149                                  					; ES = segment address of area to be freed
 17150                                  	; 11/12/2022
 17151 00000638 F8                      	clc
 17152                                  
 17153                                  ; ----------------------------------------------------------------------------
 17154                                  
 17155                                  NoRPLArena:
 17156                                  	; 11/12/2022
 17157                                  	; ds = cs
 17158                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 17159 00000639 C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 17160                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17161                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 17162                                  
 17163                                  	; 11/12/2022
 17164                                  	;clc				; get the extended memory size
 17165                                  
 17166                                  ;	execute the get extended memory size subfunction in the bios int 15h
 17167                                  ;	if the function reports an error do nothing else store the extended
 17168                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 17169                                  ;	currently pointed to by es:di. use the offsets specified in the
 17170                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 17171                                  
 17172 0000063D B488                    	mov	ah,88h
 17173 0000063F CD15                    	int	15h			; check extended memory size
 17174 00000641 720B                    	jc	short no_ext_memory
 17175                                  			; Get Extended Memory Size
 17176                                  			; Return: CF clear on success
 17177                                  			; AX = size of memory above 1M in K	
 17178                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 17179                                  	; 22/10/2022
 17180 00000643 26894545                	mov	[es:di+45h],ax ; save extended memory size
 17181 00000647 09C0                    	or	ax,ax
 17182 00000649 7403                    	jz	short no_ext_memory
 17183 0000064B E8F604                  	call	ClrVDISKHeader
 17184                                  no_ext_memory:
 17185                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 17186 0000064E 268B4510                	mov	ax,[es:di+10h]
 17187                                  	;add	ax,bufinsiz
 17188 00000652 83C014                  	add	ax,20			; size of buffer header
 17189                                  	; 11/12/2022
 17190                                  	; ds = cs
 17191 00000655 A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 17192                                  	;mov	[cs:singlebuffersize],ax	
 17193                                  	; 11/12/2022
 17194 00000658 A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 17195                                  	;mov	al,[cs:DEFAULT_DRIVE]
 17196                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 17197 0000065B 26884543                	mov	[es:di+43h],al
 17198                                  
 17199                                  ; determine if 386 system...
 17200                                  
 17201                                  	;get_cpu_type			; macro to determine cpu type
 17202                                  
 17203                                  get_cpu_type:
 17204                                  	; 11/12/2022
 17205 0000065F 9C                      	pushf
 17206                                  	;push	bx
 17207                                  	;xor	bx,bx
 17208                                  	; 11/12/2022
 17209                                  	;xor	cx,cx
 17210                                  	;
 17211 00000660 31C0                    	xor	ax,ax
 17212                                  	; ax = 0
 17213 00000662 50                      	push    ax
 17214 00000663 9D                      	popf
 17215 00000664 9C                      	pushf
 17216 00000665 58                      	pop	ax
 17217 00000666 2500F0                  	and	ax,0F000h
 17218                                  	;cmp	ax,0F000h
 17219 00000669 80FCF0                  	cmp	ah,0F0h 
 17220 0000066C 7410                    	je	short cpu_8086
 17221                                  	;mov	ax,0F000h
 17222 0000066E B4F0                    	mov	ah,0F0h
 17223                                  	; ax = 0F000h
 17224 00000670 50                      	push	ax
 17225 00000671 9D                      	popf
 17226 00000672 9C                      	pushf
 17227 00000673 58                      	pop	ax
 17228                                  	;and	ax,0F000h
 17229 00000674 80E4F0                  	and	ah,0F0h
 17230 00000677 7405                    	jz	short cpu_286
 17231                                  cpu_386:
 17232                                  	; 11/12/2022
 17233                                  	;;inc	bx
 17234                                  	;inc	cx
 17235                                  	; 11/12/2022
 17236                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 17237 00000679 26C6454401              	mov	byte [es:di+44h],1
 17238                                  cpu_286:
 17239                                  	;;;inc	bx
 17240                                  	;;inc	cx
 17241                                  cpu_8086:
 17242                                  	; 11/12/2022
 17243                                  	;;mov	ax,bx	
 17244                                  	;pop	bx
 17245 0000067E 9D                      	popf
 17246                                  
 17247                                  	;...
 17248                                  
 17249                                  	; 11/12/2022
 17250                                  	;or	cl,cl
 17251                                  	;jz	short not_386_system
 17252                                  	; 11/12/202
 17253                                  	;cmp	cl,2
 17254                                  	;;cmp	ax,2			; is it a 386?
 17255                                  	;jne	short not_386_system	; no: don't mess with flag
 17256                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 17257                                  	; 11/12/2022
 17258                                  	; 22/10/2022
 17259                                  	;mov	byte [es:di+44h],1
 17260                                  not_386_system:
 17261                                  	;mov	al,[es:di+SYSI_NUMIO]
 17262 0000067F 268A4520                	mov	al,[es:di+20h]
 17263                                  	; 11/12/2022
 17264                                  	; ds = cs
 17265 00000683 A2[FC03]                	mov	[drivenumber],al	; save start of installable block drvs
 17266                                  	;mov	[cs:drivenumber],al
 17267                                  
 17268 00000686 8CC8                    	mov	ax,cs
 17269 00000688 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 17270                                  	; 11/12/2022
 17271                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 17272                                  	;;mov	cx,[cs:singlebuffersize]
 17273                                  	;shr	cx,1			
 17274                                  	;shr	cx,1			; divide size by 16...
 17275                                  	;shr	cx,1
 17276                                  	;shr	cx,1			; ...to get paragraphs...
 17277                                  	;inc	cx			; ... and round up
 17278                                  	; 11/12/2022
 17279 0000068B 8B1E[9B02]              	mov	bx,[singlebuffersize]
 17280 0000068F B104                    	mov	cl,4
 17281 00000691 D3EB                    	shr	bx,cl
 17282 00000693 43                      	inc	bx
 17283                                  
 17284                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 17285                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 17286                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 17287                                  ;	  it is probably safe to assume that the sector size always will be.
 17288                                  ;
 17289                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 17290                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 17291                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 17292                                  ;	  other code from ever causing a problem???
 17293                                  
 17294                                  	; 11/12/2022
 17295 00000694 29D8                    	sub	ax,bx
 17296                                  	;sub	ax,cx
 17297 00000696 A3[A102]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 17298                                  	; 22/10/2022
 17299                                  	;mov	[cs:top_of_cdss],ax
 17300                                  
 17301                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 17302                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 17303                                  ;	for allocating memory for MagicDrv.
 17304                                  
 17305 00000699 06                      	push	es			; preserve pointer to dosinfo
 17306 0000069A 57                      	push	di
 17307                                  
 17308                                  	; 22/10/2022
 17309                                  ;	mov	cx,ax			; save pointer for buffer
 17310                                  ;
 17311                                  ;;	now allocate space for 26 CDSs
 17312                                  ;
 17313                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 17314                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 17315                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 17316                                  
 17317                                  ; setup and initialize the temporary buffer at cx
 17318                                  
 17319                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 17320 0000069B 26C47D12                	les	di,[es:di+12h]
 17321                                  	; 11/12/2022
 17322 0000069F 31DB                    	xor	bx,bx
 17323                                  	;xor	ax,ax
 17324                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 17325                                  	;mov	word [es:di+4],0
 17326 000006A1 26895D04                	mov	[es:di+4],bx ; 0
 17327                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 17328                                  	;mov	word [es:di],0
 17329 000006A5 26891D                  	mov	[es:di],bx ; 0
 17330                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss]
 17331                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss]
 17332 000006A8 26894502                	mov	[es:di+2],ax
 17333                                  
 17334                                  	;mov	es,cx
 17335 000006AC 8EC0                    	mov	es,ax	; [top_of_cdss] = [CONFBOT]
 17336                                  
 17337                                  	; 11/12/2022
 17338                                  	;xor	ax,ax
 17339                                  	;mov	di,ax			; es:di -> single buffer
 17340 000006AE 89DF                    	mov	di,bx
 17341                                  	; di = 0
 17342                                  
 17343                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 17344                                  	; 11/12/2022
 17345                                  	;mov	[es:di],ax ; 0
 17346 000006B0 26891D                  	mov	[es:di],bx ; 0
 17347                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 17348                                  	; 11/12/2022
 17349                                  	;mov	[es:di+2],ax ; 0
 17350 000006B3 26895D02                	mov	[es:di+2],bx ; 0 
 17351                                  
 17352                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 17353                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 17354                                  
 17355                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 17356 000006B7 26C74504FF00            	mov	word [es:di+4],00FFh
 17357                                  ;SYSINIT:06E6h
 17358                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 17359                                  	;mov	word [es:di+6],0
 17360                                  	; 11/12/2022
 17361                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 17362 000006BD 26895D06                	mov	[es:di+6],bx ; 0
 17363                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 17364                                  	;mov	word [es:di+8],0
 17365                                  	; 11/12/2022
 17366                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 17367 000006C1 26895D08                	mov	[es:di+8],bx ; 0
 17368                                  
 17369 000006C5 5F                      	pop	di			; restore pointer to DOSINFO data
 17370 000006C6 07                      	pop	es
 17371                                  
 17372                                  	; 11/12/2022
 17373                                  	; ds = cs
 17374                                  	; 22/10/2022
 17375                                  	;push	cs
 17376                                  	;pop	ds
 17377                                  
 17378 000006C7 E80D05                  	call	TempCDS 		; set up cdss so re_init and sysinit
 17379                                  					;  can make disk system calls
 17380                                  					; tempcds trashes ds
 17381                                  	; 10/05/2019
 17382 000006CA 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 17383                                  
 17384                                  	;if not ibmjapver
 17385                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 17386                                  	;endif
 17387                                  
 17388                                  	; 22/10/2022
 17389                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 17390                                  	;call	far ptr 70h:89Bh
 17391 000006CF 9A[9908]7000            	call	DOSBIODATASEG:RE_INIT
 17392                                  
 17393 000006D4 FB                      	sti				; ints ok
 17394 000006D5 FC                      	cld				; make sure
 17395                                  
 17396                                  ; 23/03/2019
 17397                                  
 17398                                  ;SYSINIT:069Ch
 17399                                  
 17400                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 17401                                  ; of the way by putting it just below sysinit at end of memory.
 17402                                  
 17403 000006D6 8CCB                    	mov	bx,cs
 17404 000006D8 83EB10                  	sub	bx,10h
 17405 000006DB 8EC3                    	mov	es,bx
 17406 000006DD 31F6                    	xor	si,si
 17407 000006DF 89F7                    	mov	di,si
 17408 000006E1 B98000                  	mov	cx,128
 17409 000006E4 F3A5                    	rep	movsw
 17410                                  
 17411                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 17412                                  	; 22/10/2022
 17413 000006E6 268C063600              	mov	[es:36h],es
 17414                                  
 17415                                   	; Set Process Data Block - Program Segment Prefix address
 17416                                  	; BX = PDB/PSP segment
 17417 000006EB B450                            mov	ah,50h ; SET_CURRENT_PDB
 17418 000006ED CD21                    	int	21h			; tell DOS we moved it
 17419                                  			; DOS - 2+ internal - SET PSP SEGMENT
 17420                                  			; BX = segment address of new PSP
 17421                                  	; 22/10/2022
 17422                                  	; 27/03/2019
 17423 000006EF 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 17424                                  
 17425 000006F0 0E                      	push	cs	
 17426 000006F1 1F                      	pop	ds
 17427                                  
 17428                                  	; set up temp. critical error handler
 17429 000006F2 BA[AD33]                	mov	dx,int24		; set up int 24 handler
 17430                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 17431                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 17432 000006F5 B82425                  	mov	ax,2524h
 17433 000006F8 CD21                    	int	21h
 17434                                  
 17435 000006FA 803E[FF03]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 17436 000006FF 7405                            je      short no_err		   ;  N: continue            M029
 17437 00000701 BA[AC38]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 17438                                          ; 22/10/2022
 17439                                  	;call	print 			   ;		             M029
 17440                                  	; 12/12/2022
 17441 00000704 EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 17442                                  no_err:
 17443                                  	; 12/05/2019
 17444                                  	;----------------------------------------------
 17445                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 17446                                  	; 22/10/2022 - Retro DOS v4.0
 17447                                  	; 12/12/2022
 17448 00000706 BA[B133]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 17449                                  p_dosinit_msg:
 17450 00000709 E87C2C                  	call	print			; Print message
 17451                                  	;----------------------------------------------
 17452                                  	
 17453                                  	; 11/12/2022
 17454                                  	; 22/10/2022
 17455                                  	; 23/03/2019 - Retro DOS v4.0
 17456                                  	;pop	ds			; start of free memory
 17457                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 17458                                  	
 17459                                  	; 11/12/2022
 17460                                  	; 27/03/2019
 17461 0000070C 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 17462 00000710 1F                      	pop	ds ; */
 17463                                  
 17464 00000711 08D2                    	or	dl,dl
 17465                                  	;jz	short nodrvset		; bios didn't say
 17466 00000713 7405                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 17467                                  	;dec	dl			; A = 0
 17468                                  	; 18/12/2022
 17469 00000715 4A                      	dec	dx
 17470 00000716 B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 17471 00000718 CD21                    	int	21h			; select the disk
 17472                                  			; DOS - SELECT DISK
 17473                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 17474                                  			; Return: AL = number of logical drives
 17475                                  nodrvset:
 17476                                  	;ifdef	dblspace_hooks
 17477                                  	;	....
 17478                                  	;	....
 17479                                  	;endif	
 17480                                  
 17481                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 17482                                  
 17483                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 17484                                  ; ----------------------------------------------------------------------------
 17485                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17486                                  
 17487                                  ProcessConfig:
 17488                                  	;; ds = cs ; 27/03/2019
 17489                                  	; 11/12/2022
 17490                                  	; ds <> cs	
 17491                                  
 17492                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 17493                                  
 17494 0000071A E80018                  	call	doconf			; do pre-scan for dos=high/low
 17495                                  
 17496                                  	; 11/12/2022
 17497                                  	; 27/03/2019
 17498                                  	; ds = cs (at return from doconf)
 17499                                  
 17500                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 17501                                  ; It will either be relocated to low memory, above the DOS data structures,
 17502                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 17503                                  ; code entry points will be located in low memory. Dos_segreinit is used
 17504                                  ; to tell the DOS data where the code has been placed, and to install the
 17505                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 17506                                  ; must first initialize it in its present location and load the installable
 17507                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 17508                                  ; relocate the DOS code into HiMem.
 17509                                  ;
 17510                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 17511                                  ; to install the low memory stub (this must be done before allowing any
 17512                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 17513                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 17514                                  ; been patched.
 17515                                  
 17516                                  	; 22/10/2022 - Retro DOS v4.0
 17517                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 17518                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 17519                                  	; 11/12/2022
 17520 0000071D 803E[6A02]00            	cmp	byte [runhigh],0
 17521 00000722 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 17522                                  
 17523                                  ;------ user chose to load high
 17524                                  
 17525                                  	; 22/10/2022
 17526                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 17527                                  	; 11/12/2022
 17528                                  	; ds = cs
 17529 00000724 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17530                                  
 17531                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17532                                  	; 27/03/2019
 17533                                  	;;mov	es,[FINAL_DOS_LOCATION]
 17534                                  
 17535 00000728 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 17536                                  	; 11/12/2022
 17537                                  	; ds = cs
 17538                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 17539 0000072A FF1E[7B02]              	call	far [dos_segreinit]
 17540                                  
 17541 0000072E EB10                    	jmp	short do_multi_pass
 17542                                  
 17543                                  ;------ User chose to load dos low
 17544                                  
 17545                                  dont_install_stub:
 17546                                  	; 22/10/2022
 17547 00000730 31DB                    	xor	bx,bx			; M012
 17548                                  					; don't use int 21 call to alloc mem
 17549 00000732 E8D701                  	call	MovDOSLo		; move it !
 17550                                  
 17551 00000735 B80100                  	mov	ax,1			; dont install stub
 17552                                  	; 11/12/2022
 17553                                  	; ds = cs
 17554 00000738 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17555                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 17556                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17557                                  	; 27/03/2019
 17558                                  ;do_multi_pass:
 17559                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 17560                                  
 17561                                  	; 11/12/2022
 17562                                  	; ds =cs
 17563                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 17564 0000073C FF1E[7B02]              	call	far [dos_segreinit]
 17565                                  do_multi_pass:
 17566 00000740 E81301                  	call	AllocFreeMem		; allocate all the free mem
 17567                                  					; & update [memhi] & [area]
 17568                                  					; start of free memory.
 17569                                  	;ifdef	dblspace_hooks
 17570                                  	;mov	bx,0			; magic backdoor to place int hooks
 17571                                  	;call	cs:MagicBackdoor
 17572                                  	;endif
 17573                                  
 17574                                  ; Now, process config.sys some more.  
 17575                                  ; Load the device drivers and install programs
 17576                                  
 17577                                  	; 22/10/2022
 17578                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 17579                                  	; 11/12/2022
 17580                                  	; ds = cs
 17581 00000743 FE06[4903]              	inc	byte [multi_pass_id]
 17582 00000747 E86618                  	call	multi_pass		; load device drivers
 17583 0000074A E82A25                  	call	ShrinkUMB
 17584 0000074D E85025                  	call	UnlinkUMB		; unlink all UMBs	;M002
 17585                                  	; 02/11/2022
 17586                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 17587                                  	; 11/12/2022
 17588                                  	; ds = cs
 17589 00000750 FE06[4903]              	inc	byte [multi_pass_id]
 17590 00000754 E85918                  	call	multi_pass		; was load ifs (now does nothing)
 17591                                  
 17592                                  	;ifdef	dblspace_hooks
 17593                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 17594                                  	;endif
 17595                                  
 17596                                  	; ds = cs
 17597                                  	
 17598 00000757 E81505                  	call	endfile			; setup fcbs, files, buffers etc
 17599                                  
 17600                                  	;ifdef	dblspace_hooks
 17601                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 17602                                  	;endif
 17603                                  
 17604                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 17605                                  ;to device drivers. This has been moved up to this point to avoid problems 
 17606                                  ;with overlays called from installed programs
 17607                                  
 17608                                  	; 11/12/2022
 17609                                  	; ds = cs
 17610                                  
 17611                                  	;;mov	ax,Bios_Data ; 0070h
 17612                                  	;mov	ax,KERNEL_SEGMENT
 17613                                  	; 21/10/2022
 17614 0000075A B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17615 0000075D 8EC0                    	mov	es,ax			; point ES to bios data
 17616                                  
 17617 0000075F 26C606[FB08]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 17618                                  
 17619                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17620                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 17621                                  	;test	byte [cs:install_flag],1
 17622                                  	; 11/12/2022
 17623                                  	; ds = cs
 17624 00000765 F606[4A03]01            	test	byte [install_flag],1
 17625                                  	;test	byte [cs:install_flag],have_install_cmd
 17626                                  					; are there install commands?
 17627 0000076A 7407                    	jz	short dolast		; no, no need for further processing
 17628                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 17629                                  	; 11/12/2022
 17630                                  	; ds =cs
 17631 0000076C FE06[4903]              	inc	byte [multi_pass_id]
 17632 00000770 E83D18                  	call	multi_pass		; execute install= commands
 17633                                  
 17634                                  dolast:
 17635                                  	
 17636                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 17637                                  ;  free the confbot area used for config.sys and sysinit itself.
 17638                                  
 17639                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 17640                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 17641                                  ; anything, but just set up the ROM area for suballocation (or print
 17642                                  ; a message if HiMem is not available).
 17643                                  ;
 17644                                  ; There is also this little hack for CPM style DOS calls that needs to
 17645                                  ; be done when A20 is set...
 17646                                  
 17647                                  	; 11/12/2022
 17648                                  	; ds = cs
 17649                                  
 17650                                  	; 22/10/2022
 17651                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 17652                                  	; 11/12/2022
 17653 00000773 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 17654 00000778 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 17655 0000077A E83E01                  	call	LoadDOSHiOrLo
 17656                                  _@@_:
 17657                                  	;cmp	byte [cs:runhigh],0	; are we running low
 17658                                  	; 11/12/2022
 17659                                  	; ds = cs
 17660 0000077D 803E[6A02]00            	cmp	byte [runhigh],0
 17661                                  	;je	short _@@@
 17662 00000782 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 17663 00000784 E83104                  	call	CPMHack			; make ffff:d0 same as 0:c0
 17664                                  _@@@:
 17665                                  
 17666                                  ; We are now done with CONFIG.SYS processing
 17667                                  
 17668                                  ConfigDone:
 17669                                  	; 12/12/2022
 17670                                  	; 22/10/2022
 17671                                  	;mov	byte [cs:donotshownum],1 
 17672                                  					; done with config.sys.
 17673                                  					; do not show line number message.
 17674                                  	;mov	es,[cs:area]
 17675                                  	; 12/12/2022
 17676                                  	; ds = cs
 17677                                  	; 27/03/2019
 17678 00000787 C606[D103]01            	mov	byte [donotshownum],1
 17679 0000078C 8E06[E403]              	mov	es,[area]
 17680                                  
 17681 00000790 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 17682 00000792 CD21                    	int	21h
 17683                                  			; DOS - 2+ - FREE MEMORY
 17684                                  			; ES = segment address of area to be freed
 17685                                  
 17686                                  	; 22/10/2022
 17687                                  	;test	word [cs:install_flag],2
 17688                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 17689                                  	;test	byte [cs:install_flag],has_installed
 17690                                  	; 11/12/2022
 17691                                  	; ds = cs
 17692 00000794 F606[4A03]02            	test	byte [install_flag],2 ; has_installed
 17693                                  	;test	byte [install_flag],has_installed
 17694 00000799 741F                    	jz	short skip_free_sysinitbase ; no.
 17695                                  
 17696                                  ; set block from the old_area with impossible_owner_size.
 17697                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 17698                                  ; handle install= command.
 17699                                  
 17700                                  	; 12/12/2022
 17701                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 17702                                  	;push	bx
 17703                                  	
 17704                                  	; 22/10/2022
 17705                                  	;mov	es,[cs:old_area]
 17706                                  	;mov	bx,[cs:impossible_owner_size]
 17707                                  	; 12/12/2022
 17708                                  	; ds = cs
 17709 0000079B 8E06[DA03]              	mov	es,[old_area]
 17710 0000079F 8B1E[DC03]              	mov	bx,[impossible_owner_size]
 17711                                  	
 17712 000007A3 B44A                    	mov	ah,4Ah ; SETBLOCK
 17713 000007A5 CD21                    	int	21h
 17714                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17715                                  			; ES = segment address of block to change
 17716                                  			; BX = new size in paragraphs
 17717 000007A7 8CC0                    	mov	ax,es
 17718 000007A9 48                      	dec	ax
 17719 000007AA 8EC0                    	mov	es,ax			; point to arena
 17720                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 17721 000007AC 26C70601000800          	mov	word [es:1],8
 17722                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 17723 000007B3 26C70608005344          	mov	word [es:8],'SD'
 17724                                  	
 17725                                  	; 12/12/2022
 17726                                  	;pop	bx
 17727                                          ;pop     es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 17728                                  
 17729                                  skip_free_sysinitbase:
 17730                                  	; 22/10/2022
 17731                                  	;cmp	byte [cs:runhigh],0
 17732                                  	; 12/12/2022
 17733                                  	; ds = cs
 17734 000007BA 803E[6A02]00            	cmp	byte [runhigh],0	
 17735 000007BF 7403                    	je	short _@@@@
 17736                                  
 17737 000007C1 E8D602                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 17738                                  
 17739                                  ; ----------------------------------------------------------------------------
 17740                                  
 17741                                  _@@@@:
 17742                                  	; 12/12/2022
 17743                                  	; ds = cs
 17744                                  	; 22/10/2022
 17745                                  	; 27/03/2019
 17746                                  	;push	cs
 17747                                  	;pop	ds			; point DS to sysinitseg
 17748                                  
 17749                                  ; set up the parameters for command
 17750                                  
 17751                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17752                                  ;;ifdef  MULTI_CONFIG
 17753                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 17754                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 17755                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 17756                                  ;	; !!!
 17757                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 17758                                  ;       ; !!!
 17759                                  ;	call    disable_autoexec        ; no, we should disable it
 17760                                  ;process_autoexec:
 17761                                  ;;endif	; !!!
 17762                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 17763                                  ;	; !!!
 17764                                  
 17765                                  	; 22/10/2022 
 17766                                  	;mov     cl,[command_line]
 17767                                          ;mov     ch,0
 17768                                          ;inc     cx
 17769                                          ;mov     si,command_line	
 17770                                  	;add     si,cx
 17771                                          ;mov     byte [si],cr	; cr-terminate command line
 17772                                  
 17773                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17774                                  	; (SYSINIT:0809h)
 17775                                  	
 17776                                  	;mov	si,(offset command_line+1)
 17777 000007C4 BE[AA02]                	mov	si,command_line+1
 17778 000007C7 1E                      	push    ds
 17779 000007C8 07                      	pop     es
 17780 000007C9 89F7                    	mov     di,si
 17781 000007CB B1FF                    	mov     cl,0FFh ; -1
 17782                                  _@_loop:
 17783 000007CD FEC1                    	inc     cl ; +1
 17784 000007CF AC                      	lodsb
 17785 000007D0 AA                      	stosb
 17786 000007D1 08C0                    	or      al,al
 17787 000007D3 75F8                    	jnz     short _@_loop
 17788 000007D5 4F                      	dec     di
 17789 000007D6 B00D                    	mov     al,0Dh
 17790 000007D8 AA                      	stosb			; cr-terminate command line
 17791 000007D9 880E[A902]              	mov     [command_line],cl ; command line length (except CR)
 17792                                  
 17793                                  ; ----------------------------------------------------------------------------
 17794                                  
 17795                                  ;   Once we get to this point, the above code, which is below "retry"
 17796                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 17797                                  ;   which follow....)
 17798                                  
 17799                                  retry:
 17800 000007DD BA[5E34]                	mov	dx,commnd	; now pointing to file description
 17801                                  
 17802                                  ; we are going to open the command interpreter and size it as is done in
 17803                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 17804                                  ; there is not enough room for the command interpreter,exec will probably
 17805                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 17806                                  ; here to catch it. this code is not perfect (for instance .exe command
 17807                                  ; interpreters are possible) because it does its sizing based on the
 17808                                  ; assumption that the file being loaded is a .com file. it is close enough to
 17809                                  ; correctness to be usable.
 17810                                  
 17811                                  ; first, find out where the command interpreter is going to go.
 17812                                  
 17813 000007E0 52                      	push	dx		; save pointer to name
 17814 000007E1 BBFFFF                  	mov	bx,0FFFFh
 17815 000007E4 B448                    	mov	ah,48h	; ALLOC
 17816 000007E6 CD21                            int     21h             ; get biggest piece
 17817 000007E8 B448                    	mov	ah,48h	; ALLOC
 17818 000007EA CD21                    	int	21h		; second time gets it
 17819 000007EC 7243                    	jc	short memerrjx	; oooops
 17820                                  
 17821 000007EE 8EC0                    	mov	es,ax
 17822 000007F0 B449                    	mov	ah,49h	; DEALLOC
 17823 000007F2 CD21                    	int	21h		; give it right back
 17824 000007F4 89DD                    	mov	bp,bx
 17825                                  
 17826                                  ; es:0 points to block,and bp is the size of the block in para.
 17827                                  
 17828                                  ; we will now adjust the size in bp down by the size of sysinit.
 17829                                  ; we need to do this because exec might get upset if some of the exec
 17830                                  ; data in sysinit is overlayed during the exec.
 17831                                  
 17832                                  	; 22/10/2022
 17833                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 17834 000007F6 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 17835 000007FA 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 17836                                  
 17837                                  ; Note that the "config_wrkseg" environment data is a segment in
 17838                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 17839                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 17840                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 17841                                  ; we need to make sure that there's no way Exec will stomp on that data
 17842                                  ; before it can copy it, and one way to do that is to make the available
 17843                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 17844                                  ; from the "memory_size" segment value (which is typically A000h) instead
 17845                                  ; of the current sysinit CS....
 17846                                  ;
 17847                                  ; The reason I use the term "paranoid" is because this code should have
 17848                                  ; slid the data required by Exec up to the very top of memory, because as
 17849                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 17850                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 17851                                  ; consumes). Now it's just a little worse (65K or more, depending on
 17852                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 17853                                  ; is determined by the size of CONFIG.SYS.... -JTP
 17854                                  
 17855                                  	; 22/10/2022
 17856                                  	;mov	cx,[config_envlen]
 17857                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 17858                                          ;mov	ax,[config_wrkseg]
 17859                                  ;no_env:
 17860                                  	; 22/10/2022
 17861                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 17862 000007FC 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 17863 000007FE 83C311                  	add	bx,11h		; add the sysinit php
 17864 00000801 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 17865 00000803 722C                    	jc	short memerrjx	; if there isn't even this much memory, give up
 17866                                  
 17867                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 17868 00000805 B8003D                          mov	ax,3D00h
 17869 00000808 F9                      	stc                     ; in case of int 24
 17870 00000809 CD21                    	int	21h
 17871 0000080B 7241                    	jc	short comerr	; ooops
 17872                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 17873                                  			; DS:DX -> ASCIZ filename
 17874                                  			; AL = access mode
 17875                                  			; 0 - read
 17876                                  	; 22/10/2022
 17877                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 17878 0000080D 89C3                            mov     bx,ax           ; handle in bx
 17879                                  
 17880                                  ;   If the standard command interpreter is being used, verify it is correct
 17881                                  
 17882                                  	; 22/10/2022
 17883                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 17884                                  	;jne	short skip_validation ; yes
 17885                                  	;mov	dx,retry-4
 17886                                  	;mov	cx,4		;
 17887                                  	;mov	ah,READ		;
 17888                                  	;int	21h		;
 17889                                  	;cmp	byte [retry-4],0E9h
 17890                                  	;jne	short comerr
 17891                                  	;; 20/04/2019 - Retro DOS v4.0
 17892                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 17893                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 17894                                  	;jne	short comerr	;
 17895                                  
 17896                                  ;skip_validation:
 17897                                  	; 22/10/2022
 17898                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 17899 0000080F 31C9                    	xor	cx,cx
 17900 00000811 31D2                    	xor	dx,dx
 17901                                  	;mov	ax,(LSEEK<<8)|2
 17902 00000813 B80242                  	mov	ax,4202h
 17903 00000816 F9                      	stc			;in case of int 24
 17904 00000817 CD21                    	int	21h		; get file size in dx:ax
 17905 00000819 7233                    	jc	short comerr
 17906                                  				; convert size in dx:ax to para in ax
 17907 0000081B 83C00F                  	add	ax,15		; round up size for conversion to para
 17908 0000081E 83D200                  	adc	dx,0
 17909 00000821 E8AA03                  	call	off_to_para
 17910 00000824 B10C                    	mov	cl,12
 17911 00000826 D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 17912 00000828 09D0                    	or	ax,dx		; ax is now # of para for file
 17913 0000082A 83C010                  	add	ax,10h		; 100h byte php
 17914 0000082D 39E8                    	cmp	ax,bp		; will command fit in available mem?
 17915 0000082F 7203                    	jb	short okld	; jump if yes.
 17916                                  
 17917                                  	; 22/10/2022
 17918                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 17919                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 17920                                  	; 02/11/2022
 17921                                  	;jmp	mem_err
 17922                                  	; 11/12/2022
 17923                                  	; ds = cs
 17924 00000831 E9D828                  	jmp	mem_err2
 17925                                  
 17926                                  ;memerrjx:
 17927                                  ;	mov	dx,badmem
 17928                                  ;	call	print
 17929                                  ;       jmp     short continue
 17930                                  
 17931                                  okld:
 17932 00000834 B43E                    	mov	ah,3Eh ; CLOSE
 17933 00000836 CD21                    	int	21h		; close file
 17934                                  
 17935                                  	; 22/10/2022
 17936 00000838 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 17937                                  
 17938                                  	; 24/03/2019
 17939                                  
 17940 00000839 0E                      	push	cs		; point es to sysinitseg
 17941 0000083A 07                      	pop	es
 17942 0000083B BB[3B03]                        mov     bx,COMEXE	; point to exec block
 17943                                  	; 22/10/2022
 17944                                  	;pop	dx              ; recover pointer to name
 17945                                  
 17946                                  ;;ifdef	MULTI_CONFIG
 17947                                  
 17948                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 17949                                  ;   there will be data if there were any valid SET commands and/or if a menu
 17950                                  ;   selection was made (in which case the CONFIG environment variable will be
 17951                                  ;   set to that selection).
 17952                                  
 17953                                  	; 23/10/2022
 17954                                  	;mov	cx,[config_envlen]
 17955                                  	;jcxz	no_envdata
 17956                                          ;mov	cx,[config_wrkseg]
 17957                                  ;no_envdata:
 17958                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 17959                                  	;mov	[bx],cx
 17960                                  
 17961                                  ;;endif	;MULTI_CONFIG
 17962                                  
 17963                                  	; 23/10/2022
 17964                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 17965                                  
 17966                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 17967 0000083E 8C4F04                  	mov	[bx+4],cs
 17968                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 17969 00000841 8C4F08                  	mov	[bx+8],cs
 17970                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 17971 00000844 8C4F0C                  	mov	[bx+12],cs
 17972                                  
 17973                                  	;mov	ax,(EXEC<<8) + 0
 17974                                  	; 23/10/2022
 17975 00000847 31C0                    	xor	ax,ax
 17976 00000849 B44B                    	mov	ah,4Bh        
 17977                                  
 17978 0000084B F9                      	stc                     ; in case of int 24
 17979 0000084C CD21                            int     21h             ; go start up command
 17980                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 17981                                  			; DS:DX -> ASCIZ filename
 17982                                  			; ES:BX -> parameter block
 17983                                  			; AL = subfunc: load & execute program
 17984                                  	;push	cs
 17985                                  	;pop	ds
 17986                                  
 17987                                  	; 23/10/2022
 17988                                  	;push	dx		; push to balance fall-through pop
 17989                                  
 17990                                  ; note fall through if exec returns (an error)
 17991                                  comerr:
 17992                                  	; 23/10/2022
 17993                                  ;;ifdef	MULTI_CONFIG
 17994                                  	;cmp	byte [commnd4],0
 17995                                  	;je	short comerr2	; all defaults exhausted, print err msg
 17996                                  	;cmp	byte [newcmd],0
 17997                                  	;je	short continue	; don't print err msg for defaults just yet
 17998                                  ;comerr2:
 17999                                  ;;endif
 18000 0000084E BA[AF37]                        mov     dx,badcom	; want to print command error
 18001 00000851 E8082B                  	call	badfil
 18002                                  continue:
 18003                                  	; 23/10/2022
 18004                                  	;pop	dx
 18005                                  
 18006                                  ;;ifndef MULTI_CONFIG
 18007                                  	;jmp	stall
 18008                                  	; 24/10/2022
 18009                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 18010 00000854 EBFE                    	jmp	short stall
 18011                                  ;;else
 18012                                  	; 23/10/2022
 18013                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 18014                                  	;int	21h             ;
 18015                                  	;add	al,'A'          ;
 18016                                  	;mov	dl,al           ; DL == default drive letter
 18017                                  	;mov	si,commnd2
 18018                                  	;cmp	byte [newcmd],0 ; if a SHELL= was given
 18019                                  	;jne	short do_def2	; then try the 2nd alternate;
 18020                                  	;mov	byte [si],0	; otherwise, the default SHELL= was tried,
 18021                                  	;jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 18022                                  ;do_def2:			
 18023                                  	;cmp	byte [si],0	; has 2nd alternate been tried?
 18024                                          ;jne	short do_alt    ; no
 18025                                  ;do_def3:
 18026                                  	;mov	si,commnd3
 18027                                  	;cmp	byte [si],0	; has 3rd alternate been tried?
 18028                                  	;jne	short do_alt	; no
 18029                                  	;mov	si,commnd4
 18030                                  	;cmp	byte [si],0	; has 4th alternate been tried?
 18031                                  	;jne	short do_alt	; no
 18032                                  	;push	dx              ;
 18033                                  	;mov	dx,badcomprmpt
 18034                                  	;call	print		;
 18035                                  	;pop	dx              ; recover default drive letter in DL
 18036                                  ;request_input:			;
 18037                                  	;mov	ah,STD_CON_OUTPUT
 18038                                  	;int	21h             ;
 18039                                  	;push	dx              ;
 18040                                  	;mov	dl,'>'          ;
 18041                                  	;int	21h             ;
 18042                                  	;mov	bl,[tmplate+1]	;
 18043                                  	;mov	bh,0            ;
 18044                                  	;mov	byte [commnd+bx],0Dh
 18045                                  	;mov	dx,tmplate
 18046                                  	;mov	ah,STD_CON_STRING_INPUT
 18047                                  	;int	21h             ; read a line of input
 18048                                  	;mov	dx,crlfm	;
 18049                                  	;call	print           ;
 18050                                  	;pop	dx              ;
 18051                                  	;mov	bl,[tmplate+1]	;
 18052                                  	;or	bl,bl           ; was anything typed?
 18053                                  	;jz	short request_input ;
 18054                                  	;mov	byte [newcmd],1 ; disable validation for user-specified binaries
 18055                                  	;mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 18056                                  	;mov	word [command_line],0D00h
 18057                                  	;jmp	short do_exec   ;
 18058                                  ;do_alt:
 18059                                  	;push	ds
 18060                                  	;pop	es
 18061                                  	;mov	byte [newcmd],0 ; force validation for alternate binaries
 18062                                  	;mov	di,commnd	;
 18063                                  ;do_alt1:
 18064                                  	;lodsb			; copy the alternate, zapping it as we go,
 18065                                  	;mov	byte [si-1],0	; so that we know it's been tried
 18066                                  	;stosb 			;
 18067                                  	;or	al,al		;
 18068                                  	;jnz	short do_alt1	;
 18069                                  	;mov	di,command_line
 18070                                  	;cmp	byte [si+2],':'
 18071                                  	;jne	short do_alt2	;
 18072                                  	;mov	[si+1],dl	; stuff default drive into alt. command line
 18073                                  ;do_alt2:			;
 18074                                  	;lodsb			;
 18075                                  	;stosb			;
 18076                                  	;or	al,al           ;
 18077                                  	;jnz	short do_alt2   ;
 18078                                  	;mov	byte [di-1],cr
 18079                                  
 18080                                  ;;   Last but not least, see if we need to call disable_autoexec
 18081                                  
 18082                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 18083                                  	;;cmp	[command_line-1],0
 18084                                          ;;jne	short do_exec   ;
 18085                                          ;;mov	[command_line-1],'/'
 18086                                  	;;call	disable_autoexec ;
 18087                                  
 18088                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 18089                                  	;mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 18090                                  	;call	disable_autoexec
 18091                                  	;call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 18092                                  ;do_exec:
 18093                                  	;jmp     retry		;
 18094                                  
 18095                                  ;;endif	;MULTI_CONFIG
 18096                                  
 18097                                  ; 24/03/2019 - Retro DOS v4.0
 18098                                  
 18099                                  ; ----------------------------------------------------------------------
 18100                                  ; procedure : AllocFreeMem
 18101                                  ;
 18102                                  ; Allocate Max memory from DOS to find out where to load DOS.
 18103                                  ; DOS is at temporary location when this call is being made
 18104                                  ;
 18105                                  ; Inputs : None
 18106                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 18107                                  ;	   [area] & [memhi] set to the para value of the start of the
 18108                                  ;	   free memory.
 18109                                  ;
 18110                                  ; Uses   : AX, BX
 18111                                  ;
 18112                                  ; ----------------------------------------------------------------------
 18113                                  
 18114                                  	; 23/10/2022
 18115                                  AllocFreeMem:
 18116 00000856 BBFFFF                  	mov	bx,0FFFFh
 18117 00000859 B448                    	mov	ah,48h ; ALLOC
 18118 0000085B CD21                    	int	21h			; first time fails
 18119 0000085D B448                    	mov	ah,48h ; ALLOC
 18120 0000085F CD21                    	int	21h			; second time gets it
 18121                                  	; 11/12/2022
 18122                                  	; ds = cs
 18123                                  	;mov	[cs:area],ax
 18124                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 18125 00000861 A3[E403]                	mov	[area],ax
 18126 00000864 A3[E003]                	mov	[memhi],ax		; memhi:memlo now points to			
 18127 00000867 C3                      	retn				; start of free memory
 18128                                  				
 18129                                  	; include msbio.cl6
 18130                                  ; ----------------------------------------------------------------------
 18131                                  DOSLOMSG:
 18132 00000868 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 18132 00000871 7661696C61626C653A-
 18132 0000087A 204C6F6164696E6720-
 18132 00000883 444F53206C6F770D0A-
 18132 0000088C 24                 
 18133                                  FEmsg:
 18134 0000088D 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 18134 00000896 6F723A2043616E6E6F-
 18134 0000089F 7420616C6C6F636174-
 18134 000008A8 65204D656D6F727920-
 18134 000008B1 666F7220444F530D0A-
 18134 000008BA 24                 
 18135                                  
 18136                                  ; ----------------------------------------------------------------------
 18137                                  ;
 18138                                  ; procedure : LoadDOSHiOrLo
 18139                                  ;
 18140                                  ;		Tries to move DOS into HMA. If it fails then loads
 18141                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 18142                                  ;		moved; this just tries to allocate the HMA, and prints
 18143                                  ;		a message if this is not possible.
 18144                                  ;
 18145                                  ; ----------------------------------------------------------------------
 18146                                  
 18147                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18148                                  LoadDOSHiOrLo:
 18149                                  	; 27/03/2019 - Retro DOS v4.0
 18150                                  	; ds = cs
 18151 000008BB E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 18152                                  	;jc	short LdngLo		; If that don't work...
 18153                                  	;retn
 18154                                  	; 18/12/2022
 18155 000008BE 731C                    	jnc	short LoadDosHi_ok
 18156                                  LdngLo:
 18157                                  	; 23/10/2022
 18158                                  	;push	cs
 18159                                  	;pop	ds
 18160                                  	; 11/12/2022
 18161                                  	; ds = cs
 18162 000008C0 B409                    	mov	ah,9
 18163 000008C2 BA[6808]                	mov	dx,DOSLOMSG		; inform user that we are
 18164 000008C5 CD21                    	int	21h			; loading low
 18165                                  
 18166                                  ;ifndef ROMDOS
 18167                                  	; actually move the dos, and reinitialize it.
 18168                                  
 18169 000008C7 BB0100                  	mov	bx,1				; M012
 18170                                  						;  use int 21 alloc for mem
 18171 000008CA E83F00                  	call	MovDOSLo
 18172                                  	; 11/12/2022
 18173                                  	; ds = cs
 18174                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 18175                                  	; 23/10/2022
 18176 000008CD 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18177                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 18178                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 18179 000008D1 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 18180                                  	; 11/12/2022
 18181                                  	; ds = cs
 18182                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 18183 000008D3 FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 18184                                  	
 18185                                  ;endif ; ROMDOS
 18186                                  	; 23/10/2022
 18187                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 18188                                  	; 11/12/2022
 18189                                  	; ds = cs
 18190 000008D7 C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 18191                                  LoadDosHi_ok:	; 18/12/2022
 18192 000008DC C3                      	retn
 18193                                  
 18194                                  ; ----------------------------------------------------------------------
 18195                                  ;
 18196                                  ; procedure : TryToMovDOSHi
 18197                                  ;
 18198                                  ;		This tries to move DOS into HMA.
 18199                                  ;		Returns CY if it failed.
 18200                                  ;		If it succeeds returns with carry cleared.
 18201                                  ;
 18202                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 18203                                  ;		the A20 switching code in the low mem stub to be installed.
 18204                                  ; 
 18205                                  ; ----------------------------------------------------------------------
 18206                                  
 18207                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18208                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 18209                                  TryToMovDOSHi:
 18210                                  	; 11/12/2022
 18211                                  	; 27/03/2019 - Retro DOS v4.0
 18212                                  	; ds = cs
 18213 000008DD E81300                  	call	MovDOSHi
 18214 000008E0 7210                    	jc	short ttldhx
 18215                                  
 18216                                  ;ifndef ROMDOS
 18217                                  	; 23/10/2022
 18218                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 18219                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 18220                                  	; 11/12/2022
 18221                                  	; ds = cs
 18222 000008E2 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18223                                  ;else
 18224                                  ;	..
 18225                                  ;endif ; ROMDOS
 18226                                  
 18227                                  	; 11/12/2022
 18228                                  	; ds = cs
 18229 000008E6 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 18230                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18231 000008E8 FF1E[7B02]              	call	far [dos_segreinit]
 18232                                  	;mov	byte [cs:runhigh],1
 18233 000008EC C606[6A02]01            	mov	byte [runhigh],1
 18234 000008F1 F8                      	clc
 18235                                  ttldhx:
 18236 000008F2 C3                      	retn
 18237                                  
 18238                                  ; ----------------------------------------------------------------------
 18239                                  ;
 18240                                  ; procedure : MovDOSHi
 18241                                  ;
 18242                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 18243                                  ;		For ROMDOS, the code is not actually moved, but the
 18244                                  ;		HMA is allocated and prepared for sub-allocation.
 18245                                  ;
 18246                                  ;		Returns : CY if it failed
 18247                                  ;
 18248                                  ; ----------------------------------------------------------------------
 18249                                  
 18250                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18251                                  MovDOSHi:
 18252                                  	; 14/05/2019
 18253                                  	; 27/03/2019 - Retro DOS v4.0
 18254                                  	; ds = cs
 18255 000008F3 E8D800                  	call	AllocHMA
 18256 000008F6 7213                    	jc	short mdhx			; did we get HMA?
 18257 000008F8 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 18258 000008FB 8EC0                    	mov	es,ax
 18259                                  
 18260                                  ;ifndef ROMDOS
 18261                                  	; actually move the BIOS and DOS
 18262                                  
 18263                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18264                                  	; 24/03/2019
 18265                                  	
 18266                                  	; 23/10/2022
 18267 000008FD E83400                  	call	MovBIOS				; First move BIOS into HMA
 18268                                  
 18269                                  	; ES:DI points to free HMA after BIOS
 18270                                  	
 18271                                  	; 14/05/2019
 18272                                  	; 24/03/2019 - Retro DOS v4.0
 18273                                  	;xor	di,di
 18274                                  	
 18275                                  	; 23/10/2022
 18276                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 18277                                  	; 11/12/2022
 18278                                  	; ds = cs
 18279 00000900 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 18280 00000904 E81100                  	call	MovDOS				; and move it
 18281                                  
 18282                                  	; ES:DI points to free HMA after DOS
 18283                                  ;else
 18284                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 18285                                  ;
 18286                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 18287                                  ;
 18288                                  ;endif ; ROMDOS
 18289                                  
 18290 00000907 E86202                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 18291 0000090A F8                      	clc
 18292                                  mdhx:
 18293 0000090B C3                      	retn
 18294                                  
 18295                                  ; ----------------------------------------------------------------------
 18296                                  ;
 18297                                  ; procedure : MovDOSLo
 18298                                  ;
 18299                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 18300                                  ;
 18301                                  ; ----------------------------------------------------------------------
 18302                                  
 18303                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18304                                  
 18305                                  ;ifndef ROMDOS
 18306                                  
 18307                                  MovDOSLo:
 18308                                  	; 14/05/2019
 18309                                  	; 27/03/2019 - Retro DOS v4.0
 18310                                  	; ds = cs
 18311 0000090C E84800                  	call	AllocMemForDOS			; incestuosly!!!
 18312                                  	
 18313                                  	; 23/10/2022
 18314                                  	; 14/05/2019
 18315                                  	;inc	ax  ; skip MCB
 18316                                  	
 18317 0000090F 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 18318                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18319                                  	; 24/03/2019
 18320                                  	
 18321                                  	; 23/10/2022
 18322 00000911 E82000                  	call	MovBIOS
 18323                                  
 18324                                  ;------ ES:DI points memory immediately after BIOS
 18325                                  
 18326                                  	; 14/05/2019
 18327                                  	; NOTE: 
 18328                                  	;     Order of (RETRO) DOS kernel sections at memory:
 18329                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 18330                                  
 18331                                  	; 24/03/2019 - Retro DOS v4.0
 18332                                  	;xor	di,di	
 18333                                  
 18334                                  	; 23/10/2022
 18335                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 18336                                  	; 11/12/2022
 18337                                  	; ds = cs
 18338 00000914 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 18339                                  	;call	MovDOS
 18340                                  	;retn
 18341                                  	; 11/12/2022
 18342                                  	;jmp	short MovDOS
 18343                                  
 18344                                  ;endif ; ROMDOS
 18345                                  
 18346                                  ; 11/12/2022
 18347                                  
 18348                                  ; ----------------------------------------------------------------------
 18349                                  ;
 18350                                  ; procedure : MovDOS
 18351                                  ;
 18352                                  ;		Moves DOS code into requested area
 18353                                  ;
 18354                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18355                                  ;	     CX    - size of DOS code to be moved
 18356                                  ;
 18357                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18358                                  ;
 18359                                  ; ----------------------------------------------------------------------
 18360                                  
 18361                                  	; 11/12/2022
 18362                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18363                                  
 18364                                  ;ifndef ROMDOS
 18365                                  
 18366                                  MovDOS:
 18367                                  	; 14/05/2019
 18368                                  	; 27/03/2019 - Retro DOS v4.0
 18369                                  
 18370                                  	; 11/12/2022
 18371                                  	; ds = cs
 18372                                  
 18373                                  	; 23/10/2022
 18374                                  	;push	ds ; *//
 18375                                  	
 18376 00000918 06                      	push	es
 18377 00000919 57                      	push	di
 18378                                  
 18379                                  	; 11/12/2022
 18380 0000091A 1E                      	push	ds ; *// ; 11/12/202
 18381                                  
 18382                                  	; 29/04/2019
 18383 0000091B C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 18384                                  	; 23/10/2022
 18385                                  	;lds	si,[cs:dosinit]
 18386                                  	;;mov	ax,si
 18387                                  
 18388 0000091F F3A4                    	rep	movsb
 18389                                  
 18390 00000921 1F                      	pop	ds ; *// ; 11/12/2022
 18391                                  
 18392 00000922 5B                      	pop	bx				; get back offset into which
 18393                                  						;  DOS was moved
 18394                                  
 18395 00000923 2EA1[6F02]              	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18396                                  						;  wants to run
 18397 00000927 29D8                    	sub	ax,bx
 18398 00000929 E8A202                  	call	off_to_para
 18399 0000092C 5B                      	pop	bx				; get the segment at which
 18400                                  						;  we moved DOS into
 18401 0000092D 29C3                    	sub	bx,ax				; Adjust segment
 18402                                  	
 18403                                  	; 11/12/2022
 18404                                  	; 23/10/2022
 18405                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18406                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18407                                  	; 11/12/2022
 18408 0000092F 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 18409                                  		
 18410                                  	; 27/03/2019
 18411                                  	;pop	ds ; *//
 18412                                  	; ds = cs
 18413                                  	;mov	[FINAL_DOS_LOCATION],bx
 18414                                  
 18415 00000933 C3                      	retn
 18416                                  
 18417                                  ;endif ;ROMDOS
 18418                                  
 18419                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18420                                  ; 24/03/2019
 18421                                  ; ----------------------------------------------------------------------
 18422                                  ;
 18423                                  ; procedure : MovBIOS
 18424                                  ;
 18425                                  ;		Moves BIOS code into requested segment
 18426                                  ;
 18427                                  ;	In : ES - segment to which BIOS is to be moved
 18428                                  ;		  ( it moves always into offset BCode_Start)
 18429                                  ;
 18430                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 18431                                  ;
 18432                                  ; ----------------------------------------------------------------------
 18433                                  
 18434                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18435                                  
 18436                                  ;ifndef ROMDOS
 18437                                  
 18438                                  MovBIOS: ; proc	near
 18439                                  	; 11/12/2022
 18440 00000934 1E                      	push	ds ; ds = cs	
 18441                                  	;
 18442                                  	; 23/10/2022
 18443 00000935 2E8E1E[8702]            	mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 18444                                  	;mov	si,BCODE_START ; mov si,30h
 18445                                  	; 09/12/2022
 18446 0000093A BE[3000]                	mov	si,BCODESTART
 18447 0000093D 89F7                    	mov	di,si
 18448 0000093F B9001A                  	mov	cx,BCODE_END ; mov cx,1A60h
 18449 00000942 29F1                    	sub	cx,si				; size of BIOS
 18450 00000944 D1E9                    	shr	cx,1				; Both the labels are para
 18451                                  						;  aligned
 18452 00000946 F3A5                    	rep	movsw
 18453                                  	
 18454                                  	; 11/12/2022
 18455 00000948 1F                      	pop	ds ; ds = cs
 18456                                  	;
 18457 00000949 06                      	push	es
 18458 0000094A 57                      	push	di				; save end of BIOS
 18459 0000094B 8CC0                    	mov	ax,es
 18460                                  	;
 18461                                  	; 11/12/2022
 18462                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 18463                                  	;;call	dword ptr cs:_seg_reinit_ptr
 18464                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 18465                                  	; ds = cs
 18466 0000094D A3[0004]                	mov	[BCodeSeg],ax
 18467 00000950 FF1E[8502]              	call	far [seg_reinit_ptr]
 18468                                  	;
 18469 00000954 5F                      	pop	di
 18470 00000955 07                      	pop	es				; get back end of BIOS
 18471 00000956 C3                      	retn
 18472                                  
 18473                                  ;MovBIOS endp
 18474                                  
 18475                                  ;endif ; ROMDOS
 18476                                  
 18477                                  ; 11/12/2022
 18478                                  %if 0
 18479                                  
 18480                                  ; 24/03/2019
 18481                                  
 18482                                  ; ----------------------------------------------------------------------
 18483                                  ;
 18484                                  ; procedure : MovDOS
 18485                                  ;
 18486                                  ;		Moves DOS code into requested area
 18487                                  ;
 18488                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18489                                  ;	     CX    - size of DOS code to be moved
 18490                                  ;
 18491                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18492                                  ;
 18493                                  ; ----------------------------------------------------------------------
 18494                                  
 18495                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18496                                  
 18497                                  ;ifndef ROMDOS
 18498                                  
 18499                                  MovDOS:
 18500                                  	; 14/05/2019
 18501                                  	; 27/03/2019 - Retro DOS v4.0
 18502                                  
 18503                                  	; 11/12/2022
 18504                                  	; ds = cs
 18505                                  
 18506                                  	; 23/10/2022
 18507                                  	;push	ds ; *//
 18508                                  	
 18509                                  	push	es
 18510                                  	push	di
 18511                                  
 18512                                  	; 11/12/2022
 18513                                  	push	ds ; *// ; 11/12/202
 18514                                  
 18515                                  	; 29/04/2019
 18516                                  	lds	si,[dosinit] ; 11/12/2022
 18517                                  	; 23/10/2022
 18518                                  	;lds	si,[cs:dosinit]
 18519                                  	;;mov	ax,si
 18520                                  
 18521                                  	rep	movsb
 18522                                  
 18523                                  	pop	ds ; *// ; 11/12/2022
 18524                                  
 18525                                  	pop	bx				; get back offset into which
 18526                                  						;  DOS was moved
 18527                                  
 18528                                  	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18529                                  						;  wants to run
 18530                                  	sub	ax,bx
 18531                                  	call	off_to_para
 18532                                  	pop	bx				; get the segment at which
 18533                                  						;  we moved DOS into
 18534                                  	sub	bx,ax				; Adjust segment
 18535                                  	
 18536                                  	; 11/12/2022
 18537                                  	; 23/10/2022
 18538                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18539                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18540                                  	; 11/12/2022
 18541                                  	mov	[CURRENT_DOS_LOCATION],bx
 18542                                  		
 18543                                  	; 27/03/2019
 18544                                  	;pop	ds ; *//
 18545                                  	; ds = cs
 18546                                  	;mov	[FINAL_DOS_LOCATION],bx
 18547                                  
 18548                                  	retn
 18549                                  
 18550                                  ;endif ;ROMDOS
 18551                                  
 18552                                  %endif
 18553                                  
 18554                                  ; ----------------------------------------------------------------------
 18555                                  ;
 18556                                  ; procedure : AllocMemForDOS
 18557                                  ;
 18558                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 18559                                  ;
 18560                                  ;	Out : AX - seg of allocated memoryblock
 18561                                  ;
 18562                                  ; ----------------------------------------------------------------------
 18563                                  
 18564                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18565                                  
 18566                                  ;ifndef ROMDOS
 18567                                  
 18568                                  AllocMemForDOS:
 18569                                  	; 11/12/2022
 18570                                  	; 14/05/2019
 18571                                  	; 27/03/2019 - Retro DOS v4.0
 18572                                  	; ds = cs
 18573                                  	;mov	ax,BCode_end
 18574                                  	;sub	ax,BCode_start		; BIOS code size
 18575                                  	; 23/10/2022
 18576 00000957 B8001A                  	mov	ax,BCODE_END ; 1A60h
 18577                                  	;sub	ax,BCODE_START ; 30h
 18578                                  	; 09/12/2022
 18579 0000095A 2D[3000]                	sub	ax,BCODESTART 
 18580                                  	; 24/03/2019 - Retro DOS v4.0 
 18581                                  	; 02/11/2022
 18582                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 18583                                  	; 11/12/2022
 18584                                  	; ds = cs
 18585 0000095D 0306[7F02]              	add	ax,[lo_doscod_size]
 18586 00000961 83C00F                  	add	ax,15
 18587 00000964 E86702                  	call	off_to_para			; convert to para
 18588                                  	; 23/10/2022
 18589                                  	; 14/05/2019
 18590                                  	;inc	ax ; + 1 paragraph for MCB
 18591 00000967 09DB                    	or	bx,bx				; M012
 18592 00000969 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 18593 0000096B 741A                    	jz	short update_arena		; M012
 18594 0000096D B448                    	mov	ah,48h				; request DOS
 18595 0000096F CD21                    	int	21h
 18596 00000971 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 18597                                   	; 23/10/2022
 18598                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 18599 00000973 83E803                  	sub	ax,3				; Take care ORG 30h of
 18600                                  						;  BIOS code
 18601 00000976 8EC0                    	mov	es,ax
 18602                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 18603                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 18604                                  	; 14/05/2019
 18605                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 18606                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 18607                                  	; 23/10/2022
 18608 00000978 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 18609 0000097F 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 18610                                  
 18611 00000986 C3                      	retn
 18612                                  
 18613                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 18614                                  ;	  using DOS itself causes an arena to be generated.
 18615                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 18616                                  ;	  assume that the device drivers are loaded into
 18617                                  ;	  the first arena. For this reason, MagicDrv's
 18618                                  ;	  main device driver header arena is manually
 18619                                  ;	  truncated from the arena chain, and the space
 18620                                  ;	  for DOS is allocated using the following
 18621                                  ;	  simple code, which also assumes that the
 18622                                  ;	  first arena is the free one where DOS's low
 18623                                  ;	  stub will go.
 18624                                  ;
 18625                                  ; M012 : BEGIN
 18626                                  
 18627                                  	; 23/10/2022
 18628                                  update_arena:
 18629 00000987 1E                      	push	ds ; ds = cs
 18630 00000988 57                      	push	di
 18631 00000989 51                      	push	cx
 18632 0000098A 52                      	push	dx
 18633                                  	; 23/10/2022
 18634                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 18635                                  	; 11/12/2022
 18636                                  	; ds = cs 
 18637 0000098B C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 18638 0000098F 4F                      	dec	di
 18639 00000990 4F                      	dec	di				; Arena head is immediately
 18640                                  						;  before sysvar
 18641 00000991 8E05                    	mov	es,[di]				; es = arena head
 18642                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 18643 00000993 268B0E0300              	mov	cx,[es:3]
 18644 00000998 39D9                    	cmp	cx,bx				; is it sufficient ?
 18645 0000099A 7227                    	jb	short FatalErr			; no, fatal error
 18646                                  
 18647                                  	;mov	dl,[es:ARENA.SIGNATURE]
 18648 0000099C 268A160000              	mov	dl,[es:0]
 18649 000009A1 8CC0                    	mov	ax,es
 18650 000009A3 01D8                    	add	ax,bx				; ax = new arena head
 18651 000009A5 8905                    	mov	[di],ax				; store it in DOS data area
 18652 000009A7 8ED8                    	mov	ds,ax
 18653                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 18654 000009A9 88160000                	mov	[0],dl
 18655                                  	;mov	word [ARENA.OWNER],0		; free
 18656 000009AD C70601000000            	mov	word [1],0
 18657 000009B3 29D9                    	sub	cx,bx				; size of the new block
 18658                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 18659 000009B5 890E0300                	mov	[3],cx
 18660 000009B9 8CC0                    	mov	ax,es				; return seg to the caller
 18661                                  	; 23/10/2022
 18662                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 18663 000009BB 83E803                  	sub	ax,3				;  BIOS code
 18664 000009BE 5A                      	pop	dx
 18665 000009BF 59                      	pop	cx
 18666 000009C0 5F                      	pop	di
 18667 000009C1 1F                      	pop	ds ; ds = cs
 18668 000009C2 C3                      	retn
 18669                                  ;
 18670                                  ; M012 : END
 18671                                  ;
 18672                                  FatalErr:
 18673 000009C3 0E                      	push	cs
 18674 000009C4 1F                      	pop	ds
 18675 000009C5 BA[8D08]                	mov	dx,FEmsg
 18676 000009C8 B409                    	mov	ah,9
 18677 000009CA CD21                    	int	21h 		; DOS - PRINT STRING
 18678                                  				; DS:DX -> string terminated by "$"
 18679                                          ;jmp	stall
 18680                                  	; 23/10/2022
 18681 000009CC FA                      	cli
 18682 000009CD F4                      	hlt
 18683                                  
 18684                                  ;endif ;ROMDOS
 18685                                  
 18686                                  ; 25/03/2019 - Retro DOS v4.0
 18687                                  
 18688                                  ; ----------------------------------------------------------------------
 18689                                  ;
 18690                                  ; procedure : AllocHMA
 18691                                  ;
 18692                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 18693                                  ;	  up there. If it gets any sort of error, it will return with
 18694                                  ;	  carry set so that we can resort to running low.
 18695                                  ;
 18696                                  ;	It also returns ES: -> 0ffffh if it returns success
 18697                                  ;
 18698                                  ; ----------------------------------------------------------------------
 18699                                  
 18700                                  AllocHMA:
 18701                                  ;	cas note:  The pre-286 check is no longer needed here since the
 18702                                  ;		   presence of XMS is sufficient. However, this code hasn't
 18703                                  ;		   been deleted because it can be recycled for skipping the
 18704                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 18705                                  ;		   in the case of a pre-286.
 18706                                  
 18707                                  ;;	see if we're running on a pre-286. If not, force low.
 18708                                  ;
 18709                                  ;	xor	ax,ax
 18710                                  ;	pushf			; save flags (like int)
 18711                                  ;	push	ax
 18712                                  ;	popf
 18713                                  ;	pushf
 18714                                  ;	pop	ax
 18715                                  ;	popf			; restore original flags (like int)
 18716                                  ;	and	ax,0F000h
 18717                                  ;	cmp	ax,0F000h	; 8088/8086?
 18718                                  ;	jz	short grab_hma_error
 18719                                  
 18720                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18721                                  	; (SYSINIT:0A26h)
 18722                                  
 18723 000009CE 1E                      	push	ds
 18724                                  	;;mov	ax,Bios_Data
 18725                                  	;mov	ax,KERNEL_SEGMENT
 18726                                  	; 21/10/2022
 18727 000009CF B87000                  	mov	ax,DOSBIODATASEG
 18728 000009D2 8ED8                    	mov	ds,ax
 18729                                  
 18730 000009D4 E84A00                  	call	IsXMSLoaded
 18731 000009D7 7545                    	jnz	short grabhma_error
 18732                                  
 18733 000009D9 B81043                  	mov	ax,4310h
 18734 000009DC CD2F                    	int	2Fh		; get the vector into es:bx
 18735                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 18736                                  		; Return: ES:BX -> driver entry point
 18737                                  
 18738 000009DE 891E[0E00]              	mov	[xms],bx
 18739                                  	;mov	[0Eh], bx
 18740 000009E2 8C06[1000]              	mov	[xms+2],es
 18741                                  	;mov	[10h],es
 18742                                  
 18743 000009E6 B401                    	mov	ah,1		; request HMA
 18744 000009E8 BAFFFF                  	mov	dx,0FFFFh
 18745                                  	;call	dword ptr ds:0Eh
 18746 000009EB FF1E[0E00]              	call	far [xms]
 18747 000009EF 48                      	dec	ax
 18748 000009F0 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 18749                                  
 18750                                  ;------ Himem may be lying because it has allocated mem for int 15
 18751                                  
 18752 000009F2 B488                    	mov	ah,88h
 18753 000009F4 CD15                    	int	15h
 18754                                  		; Get Extended Memory Size
 18755                                  		; Return: CF clear on success
 18756                                  		; AX = size of memory above 1M in K
 18757 000009F6 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 18758                                  	;jb	short grabhma_error
 18759                                  	; 11/12/2022
 18760 000009F9 7224                    	jb	short grabhma_err ; cf=1
 18761                                  allocHMA_1:
 18762 000009FB B405                    	mov	ah,5		; localenableA20
 18763                                  	;call	dword ptr ds:0Eh
 18764 000009FD FF1E[0E00]              	call	far [xms]
 18765 00000A01 48                      	dec	ax
 18766 00000A02 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 18767                                  
 18768 00000A04 E88901                  	call	IsVDiskInstalled
 18769 00000A07 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 18770                                  
 18771 00000A09 B8FFFF                  	mov	ax,0FFFFh
 18772 00000A0C 8EC0                    	mov	es,ax
 18773 00000A0E 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 18774 00000A15 26813E10003412          	cmp	word [es:10h],1234h
 18775                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 18776                                  	; 11/12/2022
 18777 00000A1C 7401                    	je	short allocHMA_ok	
 18778                                  
 18779                                  ; 11/12/2022
 18780                                  ;	; 11/12/2022
 18781                                  ;	; cf=0
 18782                                  ;	;clc
 18783                                  ;	pop	ds
 18784                                  ;	retn
 18785                                  
 18786                                  grabhma_error:
 18787 00000A1E F9                      	stc
 18788                                  	; 11/12/022
 18789                                  grabhma_err:	; cf=1
 18790                                  allocHMA_ok:	; cf=0
 18791 00000A1F 1F                      	pop	ds
 18792 00000A20 C3                      	retn
 18793                                  
 18794                                  ; ----------------------------------------------------------------------
 18795                                  ;
 18796                                  ; procedure : IsXMSLoaded
 18797                                  ;
 18798                                  ;             Checks whether a XMS driver is loaded
 18799                                  ;
 18800                                  ; Returns : Z flag set if XMS driver loaded
 18801                                  ;           Z flag reset if no XMS drivers are present
 18802                                  ;
 18803                                  ; ----------------------------------------------------------------------
 18804                                  
 18805                                  IsXMSLoaded:
 18806 00000A21 B80043                  	mov	ax,4300h
 18807 00000A24 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 18808                                  				; Return: AL = 80h XMS driver installed
 18809                                  				; AL <> 80h no driver
 18810 00000A26 3C80                    	cmp	al,80h		; XMS installed?
 18811 00000A28 C3                      	retn
 18812                                  
 18813                                  ; ----------------------------------------------------------------------
 18814                                  ; procedure : FTryToMovDOSHi
 18815                                  ;
 18816                                  ;		Called from HMA suballoc calls
 18817                                  ;	
 18818                                  ; ----------------------------------------------------------------------
 18819                                  
 18820                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18821                                  	; (SYSINIT:0A84h)
 18822                                  
 18823                                  FTryToMovDOSHi:	; proc	far
 18824                                  
 18825 00000A29 50                      	push	ax
 18826 00000A2A 53                      	push	bx
 18827 00000A2B 51                      	push	cx
 18828 00000A2C 52                      	push	dx
 18829 00000A2D 56                      	push	si
 18830 00000A2E 57                      	push	di
 18831 00000A2F 1E                      	push	ds
 18832 00000A30 06                      	push	es
 18833                                  
 18834                                  	; 23/10/2022
 18835                                  	; 27/03/2019 - Retro DOS v4.0
 18836                                  	; 11/12/2022
 18837 00000A31 0E                      	push	cs
 18838 00000A32 1F                      	pop	ds
 18839                                  
 18840                                  	;cmp	byte [cs:runhigh],0FFh
 18841                                  	; 11/12/2022
 18842 00000A33 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 18843 00000A38 7503                    	jne	short _ftymdh_1
 18844                                  
 18845                                  	; ds = cs
 18846 00000A3A E8A0FE                  	call	TryToMovDOSHi
 18847                                  _ftymdh_1:
 18848 00000A3D 07                      	pop	es
 18849 00000A3E 1F                      	pop	ds
 18850 00000A3F 5F                      	pop	di
 18851 00000A40 5E                      	pop	si
 18852 00000A41 5A                      	pop	dx
 18853 00000A42 59                      	pop	cx
 18854 00000A43 5B                      	pop	bx
 18855 00000A44 58                      	pop	ax
 18856                                  
 18857 00000A45 CB                      	retf
 18858                                  
 18859                                  ; ----------------------------------------------------------------------
 18860                                  ;
 18861                                  ; following piece of code will be moved into a para boundary. And the para
 18862                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 18863                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 18864                                  ; to determine free extended memory.
 18865                                  ;
 18866                                  ; For more details read "power programming" column by Ray Duncan in the
 18867                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 18868                                  ;
 18869                                  ; ----------------------------------------------------------------------
 18870                                  
 18871                                  StartVDHead:
 18872                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 18873                                  
 18874 00000A46 00000000                	dd	0		; link to next device driver
 18875 00000A4A 0080                    	dw	8000h		; device attribute
 18876 00000A4C 0000                    	dw	0		; strategy routine offset
 18877 00000A4E 0000                    	dw	0		; interrupt routine offset
 18878 00000A50 01                      	db	1		; number of units
 18879                                  	;db	7 dup(0) 
 18880 00000A51 00<rep 7h>              	times	7 db 0 		; reserved area
 18881                                  VDiskSig1:
 18882 00000A58 564449534B              	db	'VDISK'
 18883                                  
 18884                                  VLEN1	equ	($-VDiskSig1)
 18885                                  
 18886 00000A5D 202056332E33            	db	'  V3.3'	; vdisk label
 18887                                  	;db	15 dup (0)	; pad
 18888 00000A63 00<rep Fh>              	times	15 db 0
 18889 00000A72 0000                    	dw	0		; bits 0-15 of free HMA
 18890 00000A74 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 18891                                  VDInt19:
 18892 00000A75 EA                      	db	0EAh		; jmp to old vector
 18893                                  OldVDInt19:
 18894 00000A76 00000000                	dd	0		; Saved int 19 vector
 18895                                  
 18896                                  EndVDHead: ; label byte
 18897                                  
 18898                                  VDiskHMAHead:	
 18899 00000A7A 000000                  	db	0,0,0		; non-bootable disk
 18900                                  VDiskSig2:
 18901 00000A7D 564449534B              	db	'VDISK'
 18902                                  
 18903                                  VLEN2	equ	($-VDiskSig2)
 18904                                  
 18905 00000A82 332E33                  	db	'3.3'		; OEM - signature
 18906 00000A85 8000                    	dw	128		; number of bytes/sector
 18907 00000A87 01                      	db	1		; sectors/cluster
 18908 00000A88 0100                    	dw	1		; reserved sectors
 18909 00000A8A 01                      	db	1		; number of FAT copies
 18910 00000A8B 4000                    	dw	64		; number of root dir entries
 18911 00000A8D 0002                    	dw	512		; number of sectors
 18912 00000A8F FE                      	db	0FEh		; media descriptor
 18913 00000A90 0600                    	dw	6		; number of sectors/FAT
 18914 00000A92 0800                    	dw	8		; sectors per track
 18915 00000A94 0100                    	dw	1		; number of heads
 18916 00000A96 0000                    	dw	0		; number of hidden sectors
 18917 00000A98 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 18918                                  
 18919                                  EndVDiskHMAHead: ; label byte
 18920                                  
 18921                                  ; ----------------------------------------------------------------------
 18922                                  ;
 18923                                  ; procedure : InstVDiskHeader
 18924                                  ;
 18925                                  ;             Installs the VDISK header to reserve the 64k of HMA
 18926                                  ;	      It puts a 32 byte header at 10000:0 and
 18927                                  ;	      another header at (seg of int19):0
 18928                                  ;
 18929                                  ; Inputs : None
 18930                                  ;
 18931                                  ; Outputs : None
 18932                                  ;
 18933                                  ; USES : DS,SI,AX,CX,DX
 18934                                  ;
 18935                                  ; ----------------------------------------------------------------------
 18936                                  
 18937                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18938                                  
 18939                                  InstVDiskHeader:
 18940 00000A9A 31C0                    	xor	ax,ax
 18941 00000A9C 8ED8                    	mov	ds,ax			; seg of int vect table
 18942                                  
 18943                                  ;-------------- save old int 19 vector
 18944                                  
 18945                                  	; 23/10/2022
 18946 00000A9E A16400                  	mov	ax,[19h*4]
 18947                                  	;mov	[OldVDInt19],ax
 18948 00000AA1 2EA3[760A]              	mov	[cs:OldVDInt19],ax
 18949 00000AA5 A16600                  	mov	ax,[19h*4+2]
 18950                                  	;mov	[OldVDInt19+2],ax
 18951 00000AA8 2EA3[780A]              	mov	[cs:OldVDInt19+2],ax
 18952                                  
 18953                                  ;-------------- calculate seg of new int 19 handler
 18954                                  
 18955 00000AAC B448                    	mov	ah,48h			; allocate memory
 18956                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 18957                                  	; 23/10/2022
 18958 00000AAE BB0400                  	mov	bx,4
 18959 00000AB1 CD21                    	int	21h
 18960                                  
 18961                                  ;	if carry, fatal hanging error!!!!!
 18962                                  
 18963 00000AB3 48                      	dec	ax			; point to arena
 18964 00000AB4 8EC0                    	mov	es,ax
 18965                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 18966 00000AB6 26C70601000800          	mov	word [es:1],8
 18967                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 18968 00000ABD 26C70608005343          	mov	word [es:8],'SC'
 18969 00000AC4 40                      	inc	ax
 18970 00000AC5 8EC0                    	mov	es,ax			; get back to allocated memory
 18971                                  
 18972                                  ;-------------- install new int 19 vector
 18973                                  
 18974 00000AC7 FA                      	cli				; no reboots at this time
 18975                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 18976 00000AC8 C70664002F00            	mov	word [19h*4],47
 18977 00000ACE A36600                  	mov	[19h*4+2],ax
 18978                                  
 18979                                  ;-------------- move the code into proper place
 18980                                  
 18981                                  	;mov	cx,(EndVDHead-StartVDHead)
 18982 00000AD1 B93400                  	mov	cx,52
 18983 00000AD4 BE[460A]                	mov	si,StartVDHead
 18984 00000AD7 31FF                    	xor	di,di
 18985 00000AD9 0E                      	push	cs
 18986 00000ADA 1F                      	pop	ds
 18987 00000ADB FC                      	cld
 18988 00000ADC F3A4                    	rep	movsb
 18989 00000ADE FB                      	sti				; BUGBUG is sti OK now?
 18990                                  
 18991                                  ;-------------- mov the HMA VDisk head into HMA
 18992                                  
 18993                                  	; 23/10/2022
 18994 00000ADF 57                      	push	di
 18995 00000AE0 06                      	push	es
 18996                                  
 18997 00000AE1 B8FFFF                  	mov	ax,0FFFFh
 18998 00000AE4 8EC0                    	mov	es,ax
 18999 00000AE6 BF1000                  	mov	di,10h
 19000                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 19001 00000AE9 B92000                  	mov	cx,32
 19002 00000AEC BE[7A0A]                	mov	si,VDiskHMAHead
 19003 00000AEF F3A4                    	rep	movsb			; ds already set to cs
 19004                                  
 19005 00000AF1 5F                      	pop	di
 19006 00000AF2 07                      	pop	es
 19007                                  
 19008 00000AF3 C3                      	retn
 19009                                  
 19010                                  ; ----------------------------------------------------------------------
 19011                                  ; procedure : ClrVDISKHeader
 19012                                  ;
 19013                                  ;		Clears the first 32 bytes at 1MB boundary
 19014                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 19015                                  ;		left by previous DOS=HIGH session
 19016                                  ;
 19017                                  ; ----------------------------------------------------------------------
 19018                                  
 19019                                  struc desc
 19020 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 19021 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 19022 00000004 ??                       .hi_byte:	resb 	1		; address
 19023 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 19024 00000006 ????                     .reserved:	resw	1		;
 19025                                   .size:
 19026                                  endstruc
 19027                                  
 19028                                  		; 23/10/2022
 19029                                  bmove:		;label byte
 19030                                  
 19031                                  dummy:		;times desc.size db 0	; desc	<>
 19032 00000AF4 00<rep 8h>              		times 8 db 0		 
 19033                                  gdt:		;times desc.size db 0	; desc	<>
 19034 00000AFC 00<rep 8h>              		times 8 db 0
 19035 00000B04 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 19036 00000B06 0000                    		dw	0
 19037 00000B08 00                      		db	0
 19038 00000B09 93                      		db	93h
 19039 00000B0A 0000                    		dw	0
 19040 00000B0C FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 19041 00000B0E 0000                    		dw	0
 19042 00000B10 10                      		db	10h
 19043 00000B11 93                      		db	93h
 19044 00000B12 0000                    		dw	0
 19045                                  
 19046                                  rombios_code:	;times desc.size db 0	; desc	<>
 19047 00000B14 00<rep 8h>              		times 8 db 0
 19048                                  temp_stack:	;times desc.size db 0	; desc	<>
 19049 00000B1C 00<rep 8h>              		times 8 db 0
 19050                                  
 19051 00000B24 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 19052                                  
 19053                                  
 19054                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIt1.ASM)
 19055                                  
 19056                                  ClrVDISKHeader:	; proc	near
 19057                                  
 19058                                  ;;-----------------------------------------------------------	      ;I070
 19059                                  ;; The following workaround get around a problem with the	      ;I070
 19060                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 19061                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 19062                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 19063                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 19064                                  ;; move crashes the system. We can do this because these	      ;I070
 19065                                  ;; systems clear all of memory on a cold boot.			      ;I070
 19066                                  ;								      ;I070
 19067                                  ;               in      al,64h         ; Test for password servr mode ;I070
 19068                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 19069                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 19070                                  ;                                      ; Check for Tortugas...	      ;I070
 19071                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 19072                                  ;               je      short ClrVDISKno                              ;I070
 19073                                  ;                                      ; Check for mod 30-286	      ;I070
 19074                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 19075                                  ;               jne     short ClrVDISKok			      ;I070
 19076                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 19077                                  ;								      ;I070
 19078                                  ;ClrVDISKok:							      ;I070
 19079                                  ;-----------------------------------------------------------	      ;I070
 19080                                  
 19081                                  	; 12/12/2022
 19082                                  	; ds = cs
 19083                                  
 19084 00000B44 06                      	push	es
 19085 00000B45 8CC8                    	mov	ax,cs
 19086 00000B47 89C2                    	mov	dx,ax
 19087 00000B49 B10C                    	mov	cl,12
 19088 00000B4B D3EA                    	shr	dx,cl
 19089 00000B4D B104                    	mov	cl,4
 19090 00000B4F D3E0                    	shl	ax,cl
 19091 00000B51 05[240B]                	add	ax,ClrdVDISKHead
 19092 00000B54 80D200                  	adc	dl,0
 19093                                  
 19094                                  	;; 23/10/2022
 19095                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 19096                                  	;mov	[cs:src_desc+2],ax
 19097                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 19098                                  	;mov	[cs:src_desc+4],dl
 19099                                  	; 12/12/2022
 19100                                  	;mov	[src_desc+desc.lo_word],ax
 19101 00000B57 A3[060B]                	mov	[src_desc+2],ax
 19102                                  	;mov	[src_desc+desc.hi_byte],dl
 19103 00000B5A 8816[080B]              	mov	[src_desc+4],dl
 19104                                  
 19105 00000B5E B91000                  	mov	cx,16	; 16 words
 19106 00000B61 0E                      	push	cs
 19107 00000B62 07                      	pop	es
 19108 00000B63 BE[F40A]                	mov	si,bmove
 19109 00000B66 B487                    	mov	ah,87h
 19110 00000B68 CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 19111                                  			; CX = number of words to move 
 19112                                  			; ES:SI -> global descriptor table
 19113                                  			; Return: CF set on error, AH = status
 19114 00000B6A 07                      	pop	es
 19115 00000B6B C3                      	retn
 19116                                  
 19117                                  ; ----------------------------------------------------------------------
 19118                                  ;
 19119                                  ; procedure : SaveFreeHMAPtr
 19120                                  ;
 19121                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 19122                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 19123                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 19124                                  ;		the offset.
 19125                                  ;
 19126                                  ; Inputs : ES:DI - pointer to free HMA
 19127                                  ; Output : FreeHMAPtr in BIOS data segment updated
 19128                                  ;
 19129                                  ; ----------------------------------------------------------------------
 19130                                  
 19131                                  SaveFreeHMAPtr:
 19132 00000B6C 8CC3                    	mov	bx,es
 19133 00000B6E B8FFFF                  	mov	ax,0FFFFh		; HMA segment
 19134 00000B71 29D8                    	sub	ax,bx
 19135 00000B73 83C70F                  	add	di,15			; para round
 19136 00000B76 83E7F0                  	and	di,0FFF0h
 19137 00000B79 B104                    	mov	cl,4
 19138 00000B7B D3E0                    	shl	ax,cl
 19139 00000B7D 29C7                    	sub	di,ax
 19140 00000B7F 1E                      	push	ds
 19141                                  	;;mov	ax,Bios_Data ; 0070h
 19142                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19143                                  	; 21/10/2022
 19144 00000B80 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19145 00000B83 8ED8                    	mov	ds,ax
 19146 00000B85 893E[F508]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 19147 00000B89 C606[0D00]FF            	mov	byte [inHMA],0FFh  ; (ds:0Dh)
 19148 00000B8E 1F                      	pop	ds
 19149 00000B8F C3                      	retn
 19150                                  
 19151                                  ; ----------------------------------------------------------------------
 19152                                  ;
 19153                                  ; procedure : IsVDiskInstalled
 19154                                  ;
 19155                                  ;		Checks for the presence of VDISK header at 1MB boundary
 19156                                  ;		& INT 19 vector
 19157                                  ;
 19158                                  ; Inputs  : A20 flag should be ON
 19159                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 19160                                  ;
 19161                                  ; ----------------------------------------------------------------------
 19162                                  
 19163                                  IsVDiskInstalled:
 19164 00000B90 31C0                    	xor	ax,ax
 19165 00000B92 8ED8                    	mov	ds,ax
 19166 00000B94 8E1E4E00                	mov	ds,[19*4+2]
 19167                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 19168                                  	; 23/10/2022
 19169 00000B98 BE1200                  	mov	si,18
 19170                                  	;mov	cx,VLEN1 ; 5
 19171 00000B9B B90500                  	mov	cx,5
 19172 00000B9E 0E                      	push	cs
 19173 00000B9F 07                      	pop	es
 19174 00000BA0 BF[580A]                	mov	di,VDiskSig1
 19175 00000BA3 F3A6                    	rep	cmpsb
 19176 00000BA5 7410                    	je	short ivdins_retn
 19177 00000BA7 B8FFFF                  	mov	ax,0FFFFh
 19178 00000BAA 8ED8                    	mov	ds,ax
 19179                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 19180 00000BAC BE1300                  	mov	si,13h
 19181 00000BAF BF[7D0A]                	mov	di,VDiskSig2
 19182                                  	;mov	cx,VLEN2  ; 5
 19183 00000BB2 B90500                  	mov	cx,5
 19184 00000BB5 F3A6                    	rep	cmpsb
 19185                                  ivdins_retn: 
 19186 00000BB7 C3                      	retn			; returns the Zero flag
 19187                                  
 19188                                  ; ----------------------------------------------------------------------
 19189                                  ;
 19190                                  ; procedure : CPMHack
 19191                                  ;
 19192                                  ;		Copies the code from 0:c0 into ffff:0d0h
 19193                                  ;		for CPM compatibility
 19194                                  ;
 19195                                  ; ----------------------------------------------------------------------
 19196                                  
 19197                                  	; 11/12/2022
 19198                                  CPMHack:
 19199 00000BB8 1E                      	push	ds
 19200 00000BB9 B9FFFF                  	mov	cx,0FFFFh
 19201 00000BBC 8EC1                    	mov	es,cx		; ES = FFFF
 19202                                  	;xor	cx,cx
 19203                                  	; 11/12/2022
 19204 00000BBE 41                      	inc	cx  ; cx = 0
 19205 00000BBF 8ED9                    	mov	ds,cx		; DS = 0
 19206 00000BC1 BEC000                  	mov	si,0C0h
 19207 00000BC4 BFD000                  	mov	di,0D0h
 19208                                  	;mov	cx,5
 19209 00000BC7 B105                    	mov	cl,5
 19210 00000BC9 FC                      	cld
 19211 00000BCA F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 19212 00000BCC 1F                      	pop	ds
 19213 00000BCD C3                      	retn
 19214                                  
 19215                                  ; ----------------------------------------------------------------------
 19216                                  ;
 19217                                  ; procedure : off_to_para
 19218                                  ;
 19219                                  ; ----------------------------------------------------------------------
 19220                                  off_to_para:
 19221 00000BCE D1E8                    	shr	ax,1
 19222 00000BD0 D1E8                    	shr	ax,1
 19223 00000BD2 D1E8                    	shr	ax,1
 19224 00000BD4 D1E8                    	shr	ax,1
 19225 00000BD6 C3                      	retn
 19226                                  
 19227                                  ; ----------------------------------------------------------------------
 19228                                  ;**	TempCDS - Create (Temporary?) CDS
 19229                                  ;
 19230                                  ;	ENTRY	?? BUGBUG
 19231                                  ;		(DS) = SysInitSeg
 19232                                  ;	EXIT	?? BUGBUG
 19233                                  ;	USES	?? BUGBUG
 19234                                  ; ----------------------------------------------------------------------
 19235                                  
 19236                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19237                                  TempCDS:
 19238 00000BD7 C43E[6B02]              	les	di,[DOSINFO]
 19239 00000BDB 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 19240                                  	;mov	cl,[es:di+20h]
 19241 00000BDF 30ED                    	xor	ch,ch			; (cx) = # of block devices
 19242                                  
 19243 00000BE1 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 19244                                  	;mov	[es:di+21h],cl	
 19245                                  
 19246 00000BE5 88C8                    	mov	al,cl
 19247 00000BE7 B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 19248                                  	;mov	ah,88
 19249 00000BE9 F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 19250 00000BEB E8D304                  	call	ParaRound		; (ax) = paragraph size for CDSs
 19251 00000BEE 8B36[A102]              	mov	si,[top_of_cdss] ; mov si,[CONFBOT]
 19252                                  
 19253                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 19254                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 19255                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 19256                                  ;		   variable which has the top of free memory for
 19257                                  ;		   device driver loads, etc.
 19258                                  
 19259 00000BF2 29C6                    	sub	si,ax
 19260                                  
 19261                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 19262                                  ;		that automatically updates alloclim every time we
 19263                                  ;		set up some new CDSs. Instead, I've added code
 19264                                  ;		which pre-allocates space for 26 CDSs. This
 19265                                  ;	        way we've got room for worst case CDSs before
 19266                                  ;		we place MagicDrv.sys
 19267                                  ;
 19268                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 19269                                  
 19270                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19271                                  	; (SYSINIT:0C52h)
 19272 00000BF4 8936[A302]              	mov	[ALLOCLIM],si
 19273                                  
 19274 00000BF8 26897518                	mov	[es:di+SYSI_CDS+2],si
 19275                                  	;mov	[es:di+18h],si
 19276 00000BFC 89F0                    	mov	ax,si
 19277 00000BFE 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 19278                                  	;mov	[word es:di+16h],0
 19279                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 19280 00000C04 26C535                  	lds	si,[es:di]
 19281 00000C07 8EC0                    	mov	es,ax
 19282 00000C09 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 19283                                  
 19284                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 19285                                  ;	info from the corresponding DPB.
 19286                                  ;
 19287                                  ;	(cx) = count of CDSs left to process
 19288                                  ;	(es:di) = address of next CDS
 19289                                  
 19290                                  fooset:
 19291                                  	; 23/10/2022
 19292 00000C0B 2EA1[A502]              	mov	ax,[cs:DirStrng] ; "A:"
 19293 00000C0F AB                      	stosw				; setup the root as the curdir
 19294                                  
 19295                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 19296                                  
 19297                                  ;	(ds:si) = address of DPB
 19298                                  ;		 (si) = -1 if no drive
 19299                                  
 19300 00000C10 2EA1[A702]              	mov	ax,[cs:DirStrng+2] ; "\",0
 19301 00000C14 AB                      	stosw
 19302 00000C15 2EFE06[A502]            	inc	byte [cs:DirStrng]
 19303 00000C1A 31C0                    	xor	ax,ax
 19304 00000C1C 51                      	push	cx
 19305                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 19306 00000C1D B93F00                  	mov	cx,63	; 23/10/2022
 19307 00000C20 F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 19308                                  
 19309                                  ;	should handle the system that does not have any floppies.
 19310                                  ;	in this case,we are going to pretended there are two dummy floppies
 19311                                  ;	in the system. still they have dpb and cds,but we are going to
 19312                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 19313                                  ;	"invalid drive specification" message when the user try to
 19314                                  ;	access them.
 19315                                  ;
 19316                                  ;	(ax) = 0
 19317                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19318                                  ;	(ds:si) = Next DPB (-1 if none)
 19319                                  
 19320 00000C22 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 19321 00000C25 7414                    	je	short fooset_zero	; don't have any physical drive.
 19322                                  
 19323                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 19324                                  ;	if we are faking floppy drives then see if this cds being initialised
 19325                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 19326                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 19327                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 19328                                  ;	for dpb offsets look at inc\dpb.inc.
 19329                                  
 19330 00000C27 2E803E[8902]01          	cmp	byte [cs:fake_floppy_drv],1
 19331 00000C2D 7513                    	jne	short normcds 		; machine has floppy drives
 19332                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 19333 00000C2F 803C01                  	cmp	byte [si],1
 19334 00000C32 770E                    	ja	short normcds
 19335 00000C34 B103                    	mov	cl,3			; the next dbp pointer
 19336                                  					; AX should be zero here
 19337 00000C36 F3AB                    	rep	stosw
 19338 00000C38 59                      	pop	cx
 19339 00000C39 EB18                    	jmp	short get_next_dpb
 19340                                  
 19341                                  ;	(ax) = 0
 19342                                  
 19343                                  fooset_zero:
 19344 00000C3B B103                    	mov	cl,3
 19345 00000C3D F3AB                    	rep	stosw
 19346 00000C3F 59                      	pop	cx
 19347 00000C40 EB14                    	jmp	short fincds
 19348                                  
 19349                                  ;*	We have a "normal" DPB and thus a normal CDS.
 19350                                  ;
 19351                                  ;	(ax) = 0
 19352                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19353                                  ;	(ds:si) = Next DPB (-1 if none)
 19354                                  
 19355                                  normcds:
 19356 00000C42 59                      	pop	cx
 19357                                  
 19358                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 19359                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 19360                                  ;	this media is a non-fat based one.
 19361                                  
 19362                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 19363                                  	; 23/10/2022
 19364 00000C43 807C0800                	cmp	byte [si+8],0
 19365 00000C47 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 19366 00000C49 B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 19367                                  	;mov	ax,4000h
 19368                                  setnormcds:
 19369 00000C4C AB                      	stosw				; curdir_flags
 19370 00000C4D 89F0                    	mov	ax,si
 19371 00000C4F AB                      	stosw				; curdir_devptr
 19372 00000C50 8CD8                    	mov	ax,ds
 19373 00000C52 AB                      	stosw
 19374                                  
 19375                                  get_next_dpb:				; entry point for fake_fooset_zero
 19376                                  	; 23/10/2022
 19377 00000C53 C57419                  	lds	si,[si+19h]
 19378                                  	;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19379                                  fincds:
 19380 00000C56 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 19381 00000C59 AB                      	stosw				; curdir_id
 19382 00000C5A AB                      	stosw				; curdir_id
 19383 00000C5B AB                      	stosw				; curdir_user_word
 19384 00000C5C B80200                  	mov	ax,2
 19385 00000C5F AB                      	stosw				; curdir_end
 19386 00000C60 B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 19387 00000C62 AA                      	stosb
 19388 00000C63 AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 19389 00000C64 AB                      	stosw
 19390 00000C65 AB                      	stosw
 19391                                  
 19392 00000C66 E2A3                    	loop	fooset
 19393                                  	
 19394 00000C68 2EC606[A502]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 19395                                  	
 19396 00000C6E C3                      	retn
 19397                                  
 19398                                  ; ----------------------------------------------------------------------
 19399                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 19400                                  ;
 19401                                  ;	entry:
 19402                                  ;	   al == ASCII CAPS drive letter
 19403                                  ;
 19404                                  ;	exit:
 19405                                  ;	   ds:si -> DPB, or si = -1 if not found
 19406                                  ; ----------------------------------------------------------------------
 19407                                  
 19408                                  ;	; 23/10/2022 (get_dpb_for_drive_al
 19409                                  ;
 19410                                  ;get_dpb_for_drive_al:
 19411                                  ;	lds	si,[cs:DOSINFO]		; point to first DPB
 19412                                  ;	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 19413                                  ;	lds	si,[si]
 19414                                  ;	sub	al,'A'
 19415                                  ;
 19416                                  ;get_dpb_for_drive_1:
 19417                                  ;	;cmp	al,[si+DPB.DRIVE]	; match?
 19418                                  ;	cmp	al,[si]
 19419                                  ;	je	short got_dpb_for_drive	;  done if so
 19420                                  ;
 19421                                  ;	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19422                                  ;	cmp	si,-1
 19423                                  ;	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 19424                                  ;
 19425                                  ;got_dpb_for_drive:
 19426                                  ;	retn
 19427                                  
 19428                                  ;=======================================================================
 19429                                  
 19430                                  ;**	EndFile - Build DOS structures
 19431                                  ;
 19432                                  ; This procedure is called after the config.sys has been processed and
 19433                                  ; installable device drivers have been loaded (but before "install="
 19434                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 19435                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 19436                                  ; to allow for the safe EXECing of "install=" programs. All memory
 19437                                  ; above these structures is deallocated back to DOS.
 19438                                  ;
 19439                                  ;	ENTRY	?? BUGBUG
 19440                                  ;	EXIT	?? BUGBUG
 19441                                  ;	USES	?? BUGBUG
 19442                                  
 19443                                  ;=======================================================================
 19444                                  ; allocate files
 19445                                  ; ----------------------------------------------------------------------
 19446                                  
 19447                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19448                                  	; (SYSINIT:0CCDh)
 19449                                  
 19450                                  endfile:
 19451                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 19452                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 19453                                  ; to confbot.
 19454                                  
 19455                                  ;	if this procedure has been called to take care of install= command,
 19456                                  ;	   then we have to save es,si registers.
 19457                                  
 19458                                  	; 11/12/2022
 19459                                  	; ds = cs
 19460                                  
 19461                                  	; 23/10/2022
 19462                                  	; 31/03/2019
 19463 00000C6F 1E                      	push	ds
 19464                                  
 19465                                  	;;mov	ax,Bios_Data ; 0070h
 19466                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19467                                  	; 21/10/2022
 19468 00000C70 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19469 00000C73 8ED8                    	mov	ds,ax
 19470                                  
 19471                                  	;cmp	word [052Fh],0
 19472 00000C75 833E[2F05]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 19473 00000C7A 7505                    	jne	short multrk_flag_done
 19474                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19475                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 19476                                  	; 12/12/2022
 19477 00000C7C 800E[2F05]80            	or	byte [multrk_flag],multrk_on ; 80h
 19478                                  multrk_flag_done:
 19479                                  	; 23/10/2022
 19480                                  	; 31/03/2019
 19481 00000C81 1F                      	pop	ds
 19482                                  
 19483                                  	; 11/12/2022
 19484                                  	; ds = cs
 19485 00000C82 A1[A102]                	mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 19486 00000C85 A3[A302]                	mov	[ALLOCLIM],ax
 19487                                  	; 23/10/2022
 19488                                  	;mov	ax, [cs:top_of_cdss]
 19489                                  	;mov	[cs:ALLOCLIM], ax 
 19490                                  
 19491                                  	; 11/12/2022
 19492                                  	; ds = cs
 19493                                  	;push	cs
 19494                                  	;pop	ds
 19495                                  	
 19496                                  	;mov	ax,[CONFBOT]
 19497                                  	;mov	[ALLOCLIM],ax
 19498                                  
 19499 00000C88 E83E24                  	call	round
 19500                                  	; 11/12/2022
 19501                                  	; ds = cs
 19502 00000C8B A0[9D02]                	mov	al,[FILES]
 19503                                  	; 23/10/2022
 19504                                  	;mov	al,[cs:FILES]
 19505 00000C8E 2C05                    	sub	al,5
 19506 00000C90 764B                    	jbe	short dofcbs
 19507                                  
 19508 00000C92 50                      	push	ax
 19509                                  	;mov	al,devmark_files ; 'F'
 19510 00000C93 B046                    	mov	al,'F'
 19511 00000C95 E87B07                  	call	setdevmark		; set devmark for sfts (files)
 19512 00000C98 58                      	pop	ax
 19513 00000C99 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19514                                  					;  it does sign extend.
 19515                                  	; 11/12/2022
 19516                                  	; ds = cs
 19517 00000C9B 8B1E[DE03]              	mov	bx,[memlo]
 19518 00000C9F 8B16[E003]              	mov	dx,[memhi]
 19519 00000CA3 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19520                                  	; 23/10/2022
 19521                                  	;mov	bx,[cs:memlo]
 19522                                  	;mov	dx,[cs:memhi]
 19523                                  	;lds	di,[cs:DOSINFO]		
 19524                                  
 19525                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 19526 00000CA7 C57D04                  	lds	di,[di+4]
 19527                                  
 19528                                  	;mov	[di+SF.SFLink],bx
 19529 00000CAA 891D                    	mov	[di],bx
 19530 00000CAC 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 19531                                  
 19532 00000CAF 0E                      	push	cs
 19533 00000CB0 1F                      	pop	ds
 19534                                  
 19535                                  	; 11/12/2022
 19536                                  	; ds = cs
 19537 00000CB1 C43E[DE03]              	les	di,[memlo]		;point to new sft
 19538                                  	; 23/10/2022
 19539                                  	;les	di,[cs:memlo]
 19540                                  
 19541                                  	;mov	word [es:di+SF.SFLink],-1
 19542 00000CB5 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 19543                                  	;mov	[es:di+SF.SFCount],ax
 19544 00000CBA 26894504                	mov	[es:di+4],ax
 19545                                  	;mov	bl,SF_ENTRY.size ; 59
 19546 00000CBE B33B                    	mov	bl,59
 19547 00000CC0 F6E3                    	mul	bl			;ax = number of bytes to clear
 19548 00000CC2 89C1                    	mov	cx,ax
 19549                                  	; 11/12/2022
 19550                                  	; ds = cs
 19551 00000CC4 0106[DE03]              	add	[memlo],ax		;allocate memory
 19552                                  	; 23/10/2022
 19553                                  	;add	[cs:memlo],ax
 19554 00000CC8 B80600                  	mov	ax,6
 19555                                  	; 11/12/2022
 19556 00000CCB 0106[DE03]              	add	[memlo],ax		;remember the header too
 19557                                  	;add	[cs:memlo],ax
 19558                                  	; 11/12/2022
 19559 00000CCF 800E[3614]02            	or	byte [setdevmarkflag],for_devmark ; 2
 19560                                  	; 23/10/2022
 19561                                  	;or	byte [cs:setdevmarkflag],2
 19562 00000CD4 E8F223                  	call	round			; check for mem error before the stosb
 19563 00000CD7 01C7                    	add	di,ax
 19564 00000CD9 31C0                    	xor	ax,ax
 19565 00000CDB F3AA                    	rep	stosb			;clean out the stuff
 19566                                  
 19567                                  ; allocate fcbs
 19568                                  ; ----------------------------------------------------------------------
 19569                                  
 19570                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19571                                  	; (SYSINIT:0D48h)
 19572                                  dofcbs:
 19573                                  	; 11/12/2022
 19574                                  	; ds = cs
 19575                                  	;push	cs
 19576                                  	;pop	ds
 19577 00000CDD E8E923                  	call	round
 19578                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 19579 00000CE0 B058                    	mov	al,'X'
 19580 00000CE2 E82E07                  	call	setdevmark
 19581                                  	; 11/12/2022
 19582                                  	; ds = cs
 19583 00000CE5 A0[9E02]                	mov	al,[FCBS]
 19584                                  	;mov	al,[cs:FCBS]
 19585 00000CE8 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19586                                  					;  it does sign extend.
 19587                                  	; 11/12/2022
 19588 00000CEA 8B1E[DE03]              	mov	bx,[memlo]
 19589 00000CEE 8B16[E003]              	mov	dx,[memhi]
 19590 00000CF2 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19591                                  	; 23/10/2022
 19592                                  	;mov	bx,[cs:memlo]
 19593                                  	;mov	dx,[cs:memhi]
 19594                                  	;lds	di,[cs:DOSINFO]
 19595                                  
 19596                                  	;mov	[di+SYSI_FCB],bx
 19597                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 19598                                  	; 23/10/2022
 19599 00000CF6 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 19600 00000CF9 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 19601                                  
 19602 00000CFC 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 19603 00000D01 30FF                    	xor	bh,bh
 19604                                  	;mov	[di+SYSI_KEEP],bx
 19605 00000D03 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 19606                                  
 19607 00000D06 0E                      	push	cs
 19608 00000D07 1F                      	pop	ds
 19609                                  	
 19610 00000D08 C43E[DE03]              	les	di,[memlo]		;point to new table
 19611                                  	;mov	word [es:di+SF.SFLink],-1
 19612 00000D0C 26C705FFFF              	mov	word [es:di],-1
 19613                                  	;mov	[es:di+SF.SFCount],ax
 19614                                  	; 02/11/2022
 19615 00000D11 26894504                	mov	[es:di+4],ax
 19616 00000D15 B339                    	mov	bl,SF_ENTRY.size ; 59
 19617 00000D17 89C1                    	mov	cx,ax
 19618 00000D19 F6E3                    	mul	bl			;ax = number of bytes to clear
 19619 00000D1B 0106[DE03]              	add	[memlo],ax		;allocate memory
 19620                                  	;mov	ax,6
 19621 00000D1F B80600                  	mov	ax,SF.size-2 ; 6
 19622 00000D22 0106[DE03]              	add	[memlo],ax		;remember the header too
 19623                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 19624 00000D26 800E[3614]02            	or	byte [setdevmarkflag],2
 19625 00000D2B E89B23                  	call	round			; check for mem error before the stosb
 19626 00000D2E 01C7                    	add	di,ax			;skip over header
 19627 00000D30 B041                    	mov	al,'A'
 19628                                  fillloop:
 19629 00000D32 51                      	push	cx			; save count
 19630 00000D33 B93900                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 19631 00000D36 FC                      	cld
 19632 00000D37 F3AA                    	rep	stosb			; filled
 19633                                  
 19634                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 19635                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 19636                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 19637                                  
 19638                                  	; 18/12/2022
 19639                                  	;cx = 0
 19640 00000D39 26894DC7                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 19641 00000D3D 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 19642 00000D41 26894DDE                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 19643                                  	
 19644                                  	; 23/10/2022	
 19645                                  	;mov     word [es:di-3Bh],0
 19646                                  	;mov     word [es:di-26h],0
 19647                                  	;mov     word [es:di-24h],0
 19648                                  
 19649 00000D45 59                      	pop	cx
 19650 00000D46 E2EA                    	loop	fillloop
 19651                                  
 19652                                  ; allocate buffers
 19653                                  ; ----------------------------------------------------------------------
 19654                                  
 19655                                  ; search through the list of media supported and allocate 3 buffers if the
 19656                                  ; capacity of the drive is > 360kb
 19657                                  
 19658                                  	; 18/12/2022
 19659                                  	; cx = 0
 19660 00000D48 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 19661 00000D4D 7403                    	je	short dodefaultbuff
 19662 00000D4F E98700                  	jmp	dobuff			; the user entered the buffers=.
 19663                                  
 19664                                  dodefaultbuff:
 19665                                  	; 18/12/2022
 19666 00000D52 890E[9902]              	mov	[h_buffers],cx ; 0
 19667 00000D56 41                      	inc	cx
 19668 00000D57 41                      	inc	cx
 19669 00000D58 890E[9702]              	mov	[buffers],cx ; 2	
 19670                                  	
 19671                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 19672                                  	;mov	word [buffers],2	; default to 2 buffers
 19673                                  
 19674                                  	; 23/10/2022	
 19675 00000D5C 50                      	push	ax
 19676 00000D5D 1E                      	push	ds ; 26/03/2019
 19677                                  	;les	bp,[DOSINFO]		; search through the dpb's
 19678 00000D5E 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 19679                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 19680                                  	; 11/12/2022
 19681 00000D63 26C46E00                	les	bp,[es:bp]
 19682                                  	; 23/10/2022
 19683                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 19684                                  
 19685 00000D67 0E                      	push	cs
 19686 00000D68 1F                      	pop	ds
 19687                                  ;SYSINIT:0DE2h:
 19688                                  nextdpb:				; test if the drive supports removeable media
 19689                                  	;mov	bl,[es:bp+DPB.drive]
 19690                                  	; 11/12/2022
 19691 00000D69 268A5E00                	mov	bl,[es:bp]
 19692                                  	; 23/10/2022
 19693                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 19694                                  
 19695                                  	;inc	bl
 19696                                  	; 18/12/2022
 19697 00000D6D 43                      	inc	bx
 19698                                  
 19699                                  	;mov	ax,(IOCTL<<8)|8
 19700 00000D6E B80844                  	mov	ax,4408h
 19701 00000D71 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 19702                                  
 19703                                  ; ignore fixed disks
 19704                                  
 19705 00000D73 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 19706 00000D75 7534                    	jnz	short nosetbuf
 19707                                  
 19708                                  ; get parameters of drive
 19709                                  
 19710 00000D77 31DB                    	xor	bx,bx
 19711                                  	;;mov	bl,[es:bp+DPB.drive]
 19712                                  	; 11/12/2022
 19713 00000D79 268A5E00                	mov	bl,[es:bp]
 19714                                  	; 23/10/2022
 19715                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 19716                                  	
 19717                                  	;inc	bl
 19718                                  	; 18/12/2022
 19719 00000D7D 43                      	inc	bx
 19720                                  
 19721 00000D7E BA[6F35]                	mov	dx,deviceparameters
 19722                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 19723 00000D81 B80D44                  	mov	ax,440Dh
 19724                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 19725 00000D84 B96008                  	mov	cx,860h
 19726 00000D87 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 19727 00000D89 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 19728                                  					; generic ioctl
 19729                                  ; determine capacity of drive
 19730                                  ; media capacity = #sectors * bytes/sector
 19731                                  
 19732                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 19733                                  	; 23/10/2022
 19734 00000D8B 8B1E[7E35]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 19735                                  	
 19736                                  ; to keep the magnitude of the media capacity within a word,
 19737                                  ; scale the sector size
 19738                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 19739                                  
 19740                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 19741                                  	; 23/10/2022
 19742 00000D8F A1[7635]                	mov	ax, [deviceparameters+7] ; bytes per sector
 19743 00000D92 31D2                    	xor	dx,dx
 19744 00000D94 B90002                  	mov	cx,512
 19745 00000D97 F7F1                    	div	cx			; scale sector size in factor of
 19746                                  					; 512 bytes
 19747 00000D99 F7E3                    	mul	bx			; ax = #sectors * size factor
 19748 00000D9B 09D2                    	or	dx,dx			; just in case of large floppies
 19749 00000D9D 7505                    	jnz	short setbuf
 19750 00000D9F 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 19751 00000DA2 7607                    	jbe	short nosetbuf
 19752                                  setbuf:
 19753                                  	; 18/12/2022
 19754                                  	; word [buffers] = 2
 19755 00000DA4 C606[9702]03            	mov	byte [buffers],3
 19756                                  	;mov	word [buffers],3
 19757 00000DA9 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 19758                                  					; for default buffer count
 19759                                  nosetbuf:
 19760                                  	; 23/10/2022
 19761                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 19762 00000DAB 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 19763 00000DB0 7406                    	je	short chk_memsize_for_buffers
 19764                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 19765 00000DB2 26C46E19                	les	bp,[es:bp+19h]
 19766 00000DB6 EBB1                    	jmp	short nextdpb
 19767                                  
 19768                                  ;from dos 3.3,the default number of buffers will be changed according to the
 19769                                  ;memory size too.
 19770                                  ; default buffers = 2
 19771                                  ; if diskette media > 360 kb,then default buffers = 3
 19772                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 19773                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 19774                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 19775                                  
 19776                                  chk_memsize_for_buffers:
 19777                                  	; 18/12/2022
 19778                                  	;cmp	word [MEMORY_SIZE],2000h
 19779                                  	;jbe	short bufset
 19780                                  	;mov	word [buffers],5
 19781                                  	;cmp	word [MEMORY_SIZE],4000h
 19782                                  	;jbe	short bufset
 19783                                  	;mov	word [buffers],10
 19784                                  	;cmp	word [MEMORY_SIZE],8000h
 19785                                  	;jbe	short bufset
 19786                                  	;mov	word [buffers],15
 19787                                  
 19788                                  	; 18/12/2022
 19789                                  	; word [buffers] = 3 or 2
 19790 00000DB8 BB[9702]                	mov	bx,buffers
 19791 00000DBB A1[9202]                	mov	ax,[MEMORY_SIZE]
 19792 00000DBE 48                      	dec	ax	; [MEMORY_SIZE] - 1
 19793                                  
 19794 00000DBF 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 19795 00000DC2 7213                    	jb	short bufset
 19796 00000DC4 C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 19797 00000DC7 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 19798 00000DCA 730B                    	jnb	short bufset
 19799 00000DCC C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 19800 00000DCF 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 19801 00000DD2 7303                    	jnb	short bufset
 19802 00000DD4 C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 19803                                  bufset:
 19804                                  	; 23/10/2022
 19805                                  	; 26/03/2019
 19806 00000DD7 1F                      	pop	ds
 19807 00000DD8 58                      	pop	ax
 19808                                  
 19809                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 19810                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 19811                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 19812                                  
 19813                                  ; 26/03/2019
 19814                                  
 19815                                  ;*******************************************************************************
 19816                                  ;									       *
 19817                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 19818                                  ; input :								       *
 19819                                  ;    memhi:memlo - start of the next available memory			       *
 19820                                  ;    buffers = number of buffers					       *
 19821                                  ;    h_buffers = number of secondary buffers				       *
 19822                                  ;									       *
 19823                                  ; output:								       *
 19824                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 19825                                  ;	buffinfo set.							       *
 19826                                  ;	bufferqueue set.						       *
 19827                                  ;									       *
 19828                                  ; subroutines to be called:						       *
 19829                                  ;									       *
 19830                                  ;*******************************************************************************
 19831                                  
 19832                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19833                                  	; (SYSINIT:0E60h)
 19834                                  dobuff:
 19835                                  	; ds = cs ; 31/03/2019
 19836                                  	; 23/10/2022
 19837 00000DD9 2EC51E[6B02]            	lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 19838                                  	;mov	ax,[buffers] ; 31/03/2019
 19839                                  	;lds	bx,[DOSINFO]
 19840 00000DDE 2EA1[9702]              	mov	ax,[cs:buffers]	; set sysi_buffers
 19841                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 19842 00000DE2 89473F                  	mov	[bx+3Fh],ax
 19843 00000DE5 2EA1[9902]              	mov	ax,[cs:h_buffers]
 19844                                  	;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 19845 00000DE9 894741                  	mov	[bx+41h],ax
 19846 00000DEC C55F12                  	lds	bx,[bx+12h]
 19847                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 19848 00000DEF E8D722                  	call	round		; get [memhi]:[memlo]
 19849                                  	;mov	al,devmark_buf	; ='B'
 19850 00000DF2 B042                    	mov	al,'B'	
 19851 00000DF4 E81C06                  	call	setdevmark
 19852                                  
 19853                                  ;allocate buffers
 19854                                  
 19855 00000DF7 1E                      	push	ds			; save buffer info. ptr.
 19856 00000DF8 53                      	push	bx
 19857                                  
 19858 00000DF9 E85203                  	call	set_buffer
 19859                                  
 19860 00000DFC 5B                      	pop	bx
 19861 00000DFD 1F                      	pop	ds
 19862                                  
 19863                                  ;now set the secondary buffer if specified.
 19864                                  
 19865 00000DFE 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 19866 00000E04 742D                    	je	short xif16
 19867 00000E06 E8C022                  	call	round
 19868                                  	; 23/10/2022
 19869 00000E09 2E8B0E[DE03]            	mov	cx,[cs:memlo]
 19870                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 19871 00000E0E 894F06                  	mov	[bx+6],cx
 19872 00000E11 2E8B0E[E003]            	mov	cx,[cs:memhi]
 19873                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 19874 00000E16 894F08                  	mov	[bx+8],cx
 19875 00000E19 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 19876                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 19877 00000E1E 894F0A                  	mov	[bx+10],cx
 19878 00000E21 B80002                  	mov	ax,512			; 512 byte
 19879 00000E24 F7E1                    	mul	cx
 19880 00000E26 2EA3[DE03]              	mov	[cs:memlo],ax
 19881                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 19882 00000E2A 2E800E[3614]02          	or	byte [cs:setdevmarkflag],2
 19883 00000E30 E89622                  	call	round
 19884                                  xif16:
 19885                                  
 19886                                  ; ----------------------------------------------------------------------
 19887                                  ; allocate cdss
 19888                                  ; ----------------------------------------------------------------------
 19889                                  
 19890                                  buf1:
 19891 00000E33 E89322                  	call	round
 19892                                  
 19893 00000E36 50                      	push	ax
 19894                                  	; 23/10/2022
 19895                                  	;mov	ax,devmark_cds		;='L'
 19896 00000E37 B84C00                  	mov	ax, 'L'
 19897 00000E3A E8D605                  	call	setdevmark
 19898 00000E3D 58                      	pop	ax
 19899                                  
 19900 00000E3E 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 19901                                  	;mov	cl,[es:di+SYSI_NUMIO]
 19902 00000E43 268A4D20                	mov	cl,[es:di+20h]
 19903 00000E47 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 19904 00000E4C 7305                    	jae	short gotncds 		; user setting must be at least numio
 19905 00000E4E 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 19906                                  gotncds:
 19907 00000E53 30ED                    	xor	ch,ch
 19908                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 19909 00000E55 26884D21                	mov	[es:di+21h],cl
 19910 00000E59 2EA1[E003]              	mov	ax,[cs:memhi]
 19911                                  	;mov	[es:di+SYSI_CDS+2],ax
 19912 00000E5D 26894518                	mov	[es:di+18h],ax
 19913 00000E61 2EA1[DE03]              	mov	ax,[cs:memlo]
 19914                                  	;mov	[es:di+SYSI_CDS],ax
 19915 00000E65 26894516                	mov	[es:di+16h],ax
 19916 00000E69 88C8                    	mov	al,cl
 19917                                  	;mov	ah,curdirlen ; curdir_list.size
 19918 00000E6B B458                    	mov	ah,88
 19919 00000E6D F6E4                    	mul	ah
 19920 00000E6F E84F02                  	call	ParaRound
 19921 00000E72 2E0106[E003]            	add	[cs:memhi],ax
 19922                                  
 19923                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 19924 00000E77 2E800E[3614]02          	or	byte [cs:setdevmarkflag],2
 19925 00000E7D E84922                  	call	round			; check for mem error before initializing
 19926                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 19927 00000E80 26C535                  	lds	si,[es:di]
 19928                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 19929 00000E83 26C47D16                	les	di,[es:di+16h]
 19930 00000E87 E881FD                  	call	fooset
 19931                                  
 19932                                  ; ----------------------------------------------------------------------
 19933                                  ; allocate space for internal stack
 19934                                  ; ----------------------------------------------------------------------
 19935                                  
 19936 00000E8A 0E                      	push	cs
 19937 00000E8B 1F                      	pop	ds
 19938                                  
 19939                                  ;	if the user did not entered stacks= command, as a default, do not install
 19940                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 19941                                  ;	otherwise,install it to the user specified value or to the default
 19942                                  ;	value of 9,128 for other systems.
 19943                                  
 19944 00000E8C 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 19945 00000E91 740E                    	je	short doinstallstack	; then install as specified by the user
 19946 00000E93 803E[3803]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 19947 00000E98 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 19948 00000E9A 803E[3703]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 19949 00000E9F 736D                    	jae	short skipstack
 19950                                  doinstallstack:
 19951 00000EA1 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 19952 00000EA4 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 19953 00000EA6 7466                    	jz	short skipstack		; don't install stack.
 19954                                  
 19955                                  ;	dynamic relocation of stack code.
 19956                                  
 19957 00000EA8 E81E22                  	call	round			;[memhi] = seg. for stack code
 19958                                  					;[memlo] = 0
 19959                                  
 19960                                  ; set devmark block into memory for mem command
 19961                                  ; devmark_id = 's' for stack
 19962                                  
 19963                                  	;mov	al,devmark_stk	;='S'
 19964                                  	; 23/10/2022
 19965 00000EAB B053                    	mov	al,'S'
 19966 00000EAD E86305                  	call	setdevmark
 19967                                  
 19968 00000EB0 A1[E003]                	mov	ax,[memhi]
 19969 00000EB3 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 19970                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19971                                  	; 11/12/2022
 19972                                  	; ds = cs
 19973                                  	;push	cs
 19974                                  	;pop	ds
 19975 00000EB5 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 19976 00000EB7 31FF                    	xor	di,di
 19977 00000EB9 B9[6702]                	mov	cx,endstackcode
 19978 00000EBC 890E[DE03]              	mov	[memlo],cx
 19979 00000EC0 E80622                  	call	round		;have enough space for relocation?
 19980 00000EC3 F3A4                    	rep	movsb
 19981                                  
 19982 00000EC5 1E                      	push	ds		; stick the location of the NextStack entry
 19983                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 19984                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 19985                                  	; 21/10/2022
 19986 00000EC6 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19987 00000EC9 8ED8                    	mov	ds,ax
 19988 00000ECB C706[BE08][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 19989 00000ED1 8C06[C008]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 19990                                  
 19991 00000ED5 2EA1[DE03]              	mov	ax,[cs:memlo]
 19992 00000ED9 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 19993 00000EDD A3[C408]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 19994 00000EE0 2EA1[E003]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 19995 00000EE4 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 19996 00000EE8 A3[C608]                	mov	[IT_StackLoc+2],ax
 19997                                  
 19998                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 19999                                  
 20000                                  	;mov	ax,entrysize ; mov ax,8
 20001                                  	; 23/10/2022
 20002 00000EEB B80800                  	mov	ax,8
 20003 00000EEE 2E0306[8C02]            	add	ax,[cs:stack_size]
 20004 00000EF3 2EF726[8A02]            	mul	word [cs:stack_count]
 20005                                  
 20006 00000EF8 A3[C808]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 20007                                  
 20008 00000EFB 1F                      	pop	ds		; no more need to access Instance Table
 20009                                  
 20010 00000EFC E8C201                  	call	ParaRound	; convert size to paragraphs
 20011                                  	
 20012                                  	; 11/12/2022
 20013                                  	; ds = cs
 20014                                  	;add	[cs:memhi],ax
 20015 00000EFF 0106[E003]              	add	[memhi],ax
 20016                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20017                                  	;or	byte [cs:setdevmarkflag],2
 20018 00000F03 800E[3614]02            	or	byte [setdevmarkflag],2
 20019                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20020                                  				;to set the devmark_size for stack by round routine.
 20021 00000F08 E8BE21                  	call	round		; check for memory error before
 20022                                  				; continuing
 20023 00000F0B E8E902                  	call	stackinit	; initialize hardware stack. 
 20024                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 20025                                  skipstack:
 20026                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20027                                  	; (SYSINIT:0F99h)
 20028                                  
 20029                                  	; 11/12/2022
 20030                                  	; ds = cs
 20031                                  	;push	cs
 20032                                  	;pop	ds
 20033                                  
 20034 00000F0E A0[9D02]                	mov	al,[FILES]
 20035 00000F11 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 20036                                  				;  it does sign extend.
 20037 00000F13 89C1                    	mov	cx,ax
 20038 00000F15 31DB                    	xor	bx,bx		;close standard input
 20039 00000F17 B43E                    	mov	ah,3Eh ; CLOSE
 20040 00000F19 CD21                    	int	21h
 20041 00000F1B BB0200                  	mov	bx,2
 20042                                  rcclloop:			;close everybody but standard output
 20043 00000F1E B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 20044 00000F20 CD21                    	int	21h		; in case we can't get new one open.
 20045 00000F22 43                      	inc	bx
 20046 00000F23 E2F9                    	loop	rcclloop
 20047                                  
 20048 00000F25 BA[F933]                	mov	dx,condev
 20049 00000F28 B002                    	mov	al,2
 20050 00000F2A B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 20051 00000F2C F9                      	stc			; set for possible int 24
 20052 00000F2D CD21                    	int	21h
 20053 00000F2F 7305                    	jnc	short goaux
 20054 00000F31 E82824                  	call	badfil
 20055 00000F34 EB13                    	jmp	short goaux2
 20056                                  goaux:	
 20057 00000F36 50                      	push	ax
 20058 00000F37 BB0100                  	mov	bx,1		;close standard output
 20059 00000F3A B43E                    	mov	ah,3Eh ; CLOSE
 20060 00000F3C CD21                    	int	21h
 20061 00000F3E 58                      	pop	ax
 20062                                  
 20063 00000F3F 89C3                    	mov	bx,ax		;new device handle
 20064 00000F41 B445                    	mov	ah,45h ; XDUP
 20065 00000F43 CD21                    	int	21h		;dup to 1,stdout
 20066 00000F45 B445                    	mov	ah,45h ; XDUP
 20067 00000F47 CD21                    	int	21h		;dup to 2,stderr
 20068                                  goaux2: 
 20069 00000F49 BA[FD33]                	mov	dx,auxdev
 20070 00000F4C B002                    	mov	al,2		;read/write access
 20071 00000F4E E83C24                  	call	open_dev
 20072                                  
 20073 00000F51 BA[0134]                	mov	dx,prndev
 20074 00000F54 B001                    	mov	al,1		;write only
 20075 00000F56 E83424                  	call	open_dev
 20076                                  
 20077                                  ;global rearm command for shared interrupt devices attached in the system;
 20078                                  ;shared interrupt attachment has some problem when it issues interrupt
 20079                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 20080                                  ;no further interrupts on that level will be presented until a global rearm
 20081                                  ;is issued. by the request of the system architecture group, msbio will
 20082                                  ;issue a global rearm after every device driver is loaded.
 20083                                  ;to issue a global rearm:	;for pc1,xt,palace
 20084                                  ;
 20085                                  ;			  out 02f2h,xx  ; interrupt level 2
 20086                                  ;			  out 02f3h,xx  ; interrupt level 3
 20087                                  ;			  out 02f4h,xx  ; interrupt level 4
 20088                                  ;			  out 02f5h,xx  ; interrupt level 5
 20089                                  ;			  out 02f6h,xx  ; interrupt level 6
 20090                                  ;			  out 02f7h,xx  ; interrupt level 7
 20091                                  ;
 20092                                  ;	for pc at,in addition to the above commands,
 20093                                  ;	need to handle the secondary interrupt handler
 20094                                  ;
 20095                                  ;			  out 06f2h,xx  ; interrupt level 10
 20096                                  ;			  out 06f3h,xx  ; interrupt level 11
 20097                                  ;			  out 06f4h,xx  ; interrupt level 12
 20098                                  ;			  out 06f6h,xx  ; interrupt level 14
 20099                                  ;			  out 06f7h,xx  ; interrupt level 15
 20100                                  ;
 20101                                  ;	for round-up machine
 20102                                  ;
 20103                                  ;			  none.
 20104                                  
 20105                                  ; where xx stands for any value.
 20106                                  ;
 20107                                  ; for your information,after naples level machine,the system service bios
 20108                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 20109                                  
 20110                                  	; 24/10/2022
 20111                                  
 20112 00000F59 50                      	push	ax
 20113 00000F5A 53                      	push	bx
 20114 00000F5B 52                      	push	dx
 20115 00000F5C 06                      	push	es
 20116                                  
 20117 00000F5D B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 20118 00000F5F BAF202                  	mov	dx,2F2h 		;get starting address
 20119 00000F62 EE                      	out	dx,al			; out 02f2h,0ffh
 20120 00000F63 42                      	inc	dx
 20121 00000F64 EE                      	out	dx,al			; out 02f3h,0ffh
 20122 00000F65 42                      	inc	dx
 20123 00000F66 EE                      	out	dx,al			; out 02f4h,0ffh
 20124 00000F67 42                      	inc	dx
 20125 00000F68 EE                      	out	dx,al			; out 02f5h,0ffh
 20126 00000F69 42                      	inc	dx
 20127 00000F6A EE                      	out	dx,al			; out 02f6h,0ffh
 20128 00000F6B 42                      	inc	dx
 20129 00000F6C EE                      	out	dx,al			; out 02f7h,0ffh
 20130                                  
 20131                                  ;sb secondary global rearm
 20132                                  
 20133 00000F6D B800F0                  	mov	ax,0F000h		;get machine type
 20134 00000F70 8EC0                    	mov	es,ax
 20135 00000F72 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 20136 00000F78 740D                    	je	short startrearm	; *if at no need to check
 20137                                  
 20138 00000F7A B4C0                    	mov	ah,0C0h 		;get system configuration
 20139 00000F7C CD15                    	int	15h			; *
 20140 00000F7E 7216                    	jc	short finishrearm	; *jmp if old rom
 20141                                  
 20142                                  ; test feature byte for secondary interrupt controller
 20143                                  
 20144 00000F80 26F6470540              	test	byte [es:bx+5],40h
 20145                                  	; 24/10/2022
 20146                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 20147 00000F85 740F                    	je	short finishrearm	;jmp if it is there
 20148                                  
 20149                                  startrearm:
 20150 00000F87 B0FF                    	mov	al,0FFh 		;write any pattern to port
 20151 00000F89 BAF206                  	mov	dx,6F2h 		;get starting address
 20152 00000F8C EE                      	out	dx,al			;out 06f2h,0ffh
 20153 00000F8D 42                      	inc	dx			;bump address
 20154 00000F8E EE                      	out	dx,al			;out 06f3h,0ffh
 20155 00000F8F 42                      	inc	dx			;bump address
 20156 00000F90 EE                      	out	dx,al			;out 06f4h,0ffh
 20157 00000F91 42                      	inc	dx			;bump address
 20158 00000F92 42                      	inc	dx			;bump address
 20159 00000F93 EE                      	out	dx,al			;out 06f6h,0ffh
 20160 00000F94 42                      	inc	dx			;bump address
 20161 00000F95 EE                      	out	dx,al			;out 06f7h,0ffh
 20162                                  
 20163                                  finishrearm:
 20164 00000F96 07                      	pop	es
 20165 00000F97 5A                      	pop	dx
 20166 00000F98 5B                      	pop	bx
 20167 00000F99 58                      	pop	ax
 20168                                  
 20169                                  ;    global rearm end *******************
 20170                                  
 20171                                  ; ----------------------------------------------------------------------
 20172                                  ; allocate sysinit_base for install= command
 20173                                  ; ----------------------------------------------------------------------
 20174                                  ; sysinit_base allocation.
 20175                                  ;   check if endfile has been called to handle install= command.
 20176                                  
 20177                                  set_sysinit_base:
 20178                                  
 20179                                  ; ----------------------------------------------------------------------
 20180                                  ;sysinit_base will be established in the secure area of
 20181                                  ;lower memory when it handles the first install= command.
 20182                                  ;sysinit_base is the place where the actual exec function will be called and
 20183                                  ;will check sysinit module in high memory if it is damaged by the application
 20184                                  ;program.  if sysinit module has been broken,then "memory error..." message
 20185                                  ;is displayed by sysinit_base.
 20186                                  ; ----------------------------------------------------------------------
 20187                                  
 20188                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 20189                                  	; (SYSINIT:1028h)
 20190                                  
 20191                                  	; 11/12/2022
 20192                                  	; ds = cs
 20193 00000F9A 50                      	push	ax			; set devmark for mem command
 20194 00000F9B A1[E003]                	mov	ax,[memhi]
 20195 00000F9E 2B06[E403]              	sub	ax,[area]
 20196 00000FA2 A3[DC03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 20197                                  	;mov	al,devmark_inst ; 'T'
 20198 00000FA5 B054                    	mov	al,'T'
 20199 00000FA7 E86904                  	call	setdevmark
 20200 00000FAA 58                      	pop	ax
 20201                                  
 20202 00000FAB 8B3E[E003]              	mov	di,[memhi]
 20203 00000FAF 8EC7                    	mov	es,di
 20204 00000FB1 893E[5003]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 20205 00000FB5 31FF                    	xor	di,di
 20206 00000FB7 893E[4E03]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 20207 00000FBB BE[CD10]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 20208 00000FBE B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 20209                                  	; 24/10/2022 
 20210                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 20211 00000FC1 010E[DE03]              	add	[memlo],cx
 20212                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 20213                                  	; 11/12/2022
 20214                                  	; ds = cs
 20215                                  	;or	byte [cs:setdevmarkflag],2
 20216 00000FC5 800E[3614]02            	or	byte [setdevmarkflag],2
 20217                                  	;or	byte [setdevmarkflag],for_devmark
 20218 00000FCA E8FC20                  	call	round			; check mem error. also,readjust memhi for the next use.
 20219 00000FCD F3A4                    	rep	movsb			; reallocate it.
 20220                                  
 20221 00000FCF C706[5203][A610]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 20222 00000FD5 8C0E[5403]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 20223                                  	;or	word [install_flag],has_installed ; set the flag.
 20224                                  	;or	byte [install_flag],has_installed ; 2
 20225                                  	; 11/12/2022
 20226 00000FD9 800E[4A03]02            	or	byte [install_flag],2
 20227                                  	; 24/10/2022
 20228                                  	;or	word [install_flag],2	
 20229                                  
 20230                                  ; ----------------------------------------------------------------------
 20231                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 20232                                  ; the top of the memory will be allocated for sysinit and config.sys if
 20233                                  ; have_install_cmd.
 20234                                  ; ----------------------------------------------------------------------
 20235                                  
 20236 00000FDE E8E820                  	call	round
 20237 00000FE1 8B1E[E003]              	mov	bx,[memhi]
 20238 00000FE5 A1[E403]                	mov	ax,[area]
 20239 00000FE8 A3[DA03]                	mov	[old_area],ax		; save [area]
 20240 00000FEB 8EC0                    	mov	es,ax			;calc what we needed
 20241 00000FED 29C3                    	sub	bx,ax
 20242                                  	; 24/10/2022
 20243 00000FEF B44A                    	mov	ah,4Ah ; SETBLOCK
 20244 00000FF1 CD21                    	int	21h			;give the rest back
 20245                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20246                                  		; ES = segment address of block to change
 20247                                  		; BX = new size in paragraphs
 20248 00000FF3 06                      	push	es
 20249 00000FF4 8CC0                    	mov	ax,es
 20250 00000FF6 48                      	dec	ax
 20251 00000FF7 8EC0                    	mov	es,ax			;point to arena
 20252                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 20253                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 20254                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 20255                                  	; 24/10/2022
 20256 00000FF9 26C70601000800          	mov	word [es:1],8		;set impossible owner
 20257 00001000 26C70608005344          	mov	word [es:8],'SD'	; System Data
 20258 00001007 07                      	pop	es
 20259                                  
 20260 00001008 BBFFFF                  	mov	bx,0FFFFh
 20261 0000100B B448                    	mov	ah,48h ; ALLOC
 20262 0000100D CD21                    	int	21h
 20263 0000100F B448                    	mov	ah,48h ; ALLOC
 20264 00001011 CD21                    	int	21h			; allocate the rest of the memory
 20265                                  		; DOS - 2+ - ALLOCATE MEMORY
 20266                                  		; BX = number of 16-byte paragraphs desired
 20267 00001013 A3[E003]                	mov	[memhi],ax		; start of the allocated memory
 20268 00001016 C706[DE03]0000          	mov	word [memlo],0		;  to be used next.
 20269                                  
 20270                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 20271                                  ;;;; allocated.
 20272                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 20273                                  ;;;; this time) to the top-of-the memory),here we are going to
 20274                                  ;;;; 1). "setblock" from memhi to confbot.
 20275                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 20276                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 20277                                  
 20278                                  ;memory allocation for sysinit,confbot module.
 20279                                  
 20280 0000101C 8EC0                    	mov	es,ax
 20281                                  	;mov	bx,[CONFBOT]
 20282                                  	; 24/10/2022
 20283 0000101E 8B1E[A102]              	mov	bx,[top_of_cdss]
 20284 00001022 29C3                    	sub	bx,ax			; confbot - memhi
 20285 00001024 4B                      	dec	bx			; make a room for the memory block id.
 20286 00001025 4B                      	dec	bx			; make sure!!!.
 20287 00001026 B44A                    	mov	ah,4Ah ; SETBLOCK
 20288 00001028 CD21                    	int	21h			; this will free (confbot to top of memory)
 20289                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20290                                  		; ES = segment address of block to change
 20291                                  		; BX = new size in paragraphs
 20292 0000102A BBFFFF                  	mov	bx,0FFFFh
 20293 0000102D B448                    	mov	ah,48h ; ALLOC
 20294 0000102F CD21                    	int	21h
 20295 00001031 B448                    	mov	ah,48h ; ALLOC
 20296 00001033 CD21                    	int	21h			; allocate (confbot to top of memory)
 20297                                  		; DOS - 2+ - ALLOCATE MEMORY
 20298                                  		; BX = number of 16-byte paragraphs desired
 20299 00001035 A3[E403]                	mov	[area],ax		; save allocated memory segment.
 20300                                  					; need this to free this area for command.com.
 20301 00001038 8E06[E003]              	mov	es,[memhi]
 20302 0000103C B449                    	mov	ah,49h			; free allocated memory.
 20303 0000103E CD21                    	int	21h			; free (memhi to confbot(=area))
 20304                                  		; DOS - 2+ - FREE MEMORY
 20305                                  		; ES = segment address of area to be freed
 20306                                  endfile_ret:
 20307 00001040 C3                      	retn
 20308                                  
 20309                                  ; End of "EndFile" DOS structure configuration.
 20310                                  
 20311                                  ; ----------------------------------------------------------------------
 20312                                  ; 26/03/2019 - Retro DOS v4.0
 20313                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 20314                                  ; ----------------------------------------------------------------------
 20315                                  ; Do_Install_Exec
 20316                                  ;
 20317                                  ; This procedure is used to EXEC a program being loaded via the 
 20318                                  ; "install=" mechanism in config.sys. It does this by setting up
 20319                                  ; the parameters, and then jumping to sysinit_base, which has been
 20320                                  ; setup in low memory. When complete, sysinit_base will jump back
 20321                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 20322                                  ; program).
 20323                                  
 20324                                  ;SYSINIT:10CFh:
 20325                                  
 20326                                  do_install_exec:			; now,handles install= command.
 20327                                  
 20328 00001041 56                      	push	si			; save si for config.sys again.
 20329                                  
 20330                                  ; we are going to call load/exec function.
 20331                                  ; set es:bx to the parameter block here;;;;;;;
 20332                                  ; set ds:dx to the asciiz string. remember that we already has 0
 20333                                  ; after the filename. so parameter starts after that. if next
 20334                                  ; character is a line feed (i.e. 10),then assume that the 0
 20335                                  ; we already encountered used to be a carrage return. in this
 20336                                  ; case,let's set the length to 0 which will be followed by
 20337                                  ; carridge return.
 20338                                  
 20339                                  ; es:si -> command line in config.sys. points to the first non blank
 20340                                  ;character after =.
 20341                                  
 20342 00001042 06                      	push	es
 20343 00001043 1E                      	push	ds
 20344 00001044 07                      	pop	es
 20345 00001045 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 20346 00001046 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 20347                                  
 20348 00001048 31C9                    	xor	cx,cx
 20349 0000104A FC                      	cld
 20350 0000104B 2EC606[6D03]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 20351 00001051 BF[6E03]                	mov	di,ldexec_parm
 20352                                  installfilename:			; skip the file name
 20353 00001054 AC                      	lodsb				; al = ds:si; si++
 20354 00001055 3C00                    	cmp	al,0
 20355 00001057 7402                    	je	short got_installparm
 20356 00001059 EBF9                    	jmp	short installfilename
 20357                                  got_installparm:			; copy the parameters to ldexec_parm
 20358 0000105B AC                      	lodsb
 20359 0000105C 268805                  	mov	[es:di],al
 20360 0000105F 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 20361 00001061 7405                    	je	short done_installparm
 20362 00001063 FEC1                    	inc	cl			; # of char. in the parm.
 20363 00001065 47                      	inc	di
 20364 00001066 EBF3                    	jmp	short got_installparm
 20365                                  done_installparm:
 20366 00001068 2E880E[6C03]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 20367 0000106D 80F900                  	cmp	cl,0			; if no parm,then
 20368 00001070 7506                    	jne	short install_seg_set 	; let the parm area
 20369 00001072 2EC606[6D03]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 20370                                  					; starts with cr.
 20371                                  install_seg_set:
 20372 00001078 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 20373 0000107F 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 20374                                  
 20375                                  ;---------------------------------------------------M067----------------
 20376                                  ;
 20377                                  ; 	the environment pointer is made 0. so the current environment ptr.
 20378                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 20379                                  ;
 20380                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 20381                                  ;
 20382                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 20383                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 20384                                  ; 	was fixed. 
 20385                                  ;
 20386                                  ; ----------------------------------------------------------------------
 20387                                  
 20388                                  ;;ifdef   MULTI_CONFIG
 20389                                  
 20390                                  ; If there's any environment data in "config_wrkseg", pass to app
 20391                                  
 20392                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20393                                          ;mov     cx,ax
 20394                                          ;cmp     word [cs:config_envlen],0
 20395                                          ;je      short no_envdata2
 20396                                          ;mov     cx,[cs:config_wrkseg]
 20397                                  ;no_envdata2:
 20398                                  ;;endif  ;MULTI_CONFIG
 20399                                  
 20400                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 20401                                  	; 24/10/2022
 20402                                  	;mov	[cs:iexec.environ],cx
 20403                                  	; 02/11/2022
 20404 00001081 2EA3[BE03]              	mov	[cs:iexec.environ],ax	
 20405                                  
 20406                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 20407 00001085 2EA3[C203]              	mov	[cs:iexec.ldexec_line+2],ax
 20408                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 20409 00001089 2EA3[C603]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 20410                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 20411 0000108D 2EA3[CA03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 20412 00001091 E86E00                  	call	sum_up
 20413 00001094 26A3[5603]              	mov	[es:checksum],ax	; save the value of the sum
 20414 00001098 31C0                    	xor	ax,ax
 20415 0000109A B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 20416 0000109C BB[BE03]                	mov	bx,instexe		; es:bx -> parm block.
 20417 0000109F 06                      	push	es			; save es,ds for load/exec
 20418 000010A0 1E                      	push	ds			; these registers will be restored in sysinit_base.
 20419 000010A1 2EFF2E[4E03]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 20420                                  					; load/exec function and check sum.
 20421                                  
 20422                                  ;----------------------------------------
 20423                                  
 20424                                  ;j.k. this is the returning address from sysinit_base.
 20425                                  
 20426                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20427                                  
 20428                                  sysinitptr:				; returning far address from sysinit_base
 20429 000010A6 5E                      	pop	si			; restore si for config.sys file.
 20430 000010A7 06                      	push	es
 20431 000010A8 1E                      	push	ds
 20432 000010A9 07                      	pop	es
 20433 000010AA 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 20434 000010AB 7306                            jnc     short install_exit_ret
 20435                                  
 20436 000010AD 56                      	push	si			; error in loading the file for install=.
 20437 000010AE E8AF22                  	call	badload 		; es:si-> path,filename,0.
 20438 000010B1 5E                      	pop	si
 20439                                  
 20440                                  	; 24/10/2022
 20441                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 20442                                  	; 11/12/2022
 20443                                  	; ds = cs
 20444 000010B2 C3                      	retn
 20445                                  
 20446                                  install_exit_ret:
 20447                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 20448                                  
 20449                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 20450                                  ;SYSINIT:1142h:
 20451 000010B3 B44D                    	mov     ah,4Dh
 20452 000010B5 CD21                    	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 20453 000010B7 80FC03                  	cmp     ah,3
 20454 000010BA 7404                    	jz      short sysinitptr_retn
 20455 000010BC E89316                  	call    error_line
 20456 000010BF F9                      	stc
 20457                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 20458 000010C0 C3                      	retn		
 20459                                  
 20460                                  ; ----------------------------------------------------------------------
 20461                                  
 20462                                  ;**	ParaRound - Round Up length to paragraph multiple
 20463                                  ;
 20464                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 20465                                  ;	by 16 yielding a "length in paragraphs" value.
 20466                                  ;
 20467                                  ;	ENTRY	(ax) = byte length
 20468                                  ;	EXIT	(ax) = rounded up length in paragraphs
 20469                                  ;	USES	ax, flags
 20470                                  
 20471                                  ParaRound:
 20472 000010C1 83C00F                  	add	ax,15
 20473 000010C4 D1D8                    	rcr	ax,1
 20474 000010C6 D1E8                    	shr	ax,1
 20475 000010C8 D1E8                    	shr	ax,1
 20476 000010CA D1E8                    	shr	ax,1
 20477 000010CC C3                      	retn
 20478                                  
 20479                                  ; ----------------------------------------------------------------------
 20480                                  ; sysinit_base module.
 20481                                  ;
 20482                                  ; This module is relocated by the routine EndFile to a location in low
 20483                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 20484                                  ; that are being loaded by the "install=" command. After the EXEC call
 20485                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 20486                                  ; top of memory) to be sure that the EXECed program did not damage it.
 20487                                  ; If it did, then this module will print an error message and stop the
 20488                                  ; system. Otherwise, it returns control to SYSINIT.
 20489                                  ;
 20490                                  ;in: after relocation,
 20491                                  ;    ax = 4b00h - load and execute the program dos function.
 20492                                  ;    ds = confbot. segment of config.sys file image
 20493                                  ;    es = sysinitseg. segment of sysinit module itself.
 20494                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 20495                                  ;    es:bx = pointer to a parameter block for load.
 20496                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 20497                                  ;    bigsize (word) - # of word from confbot to SI_end.
 20498                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 20499                                  ;			word boundary moduler form.
 20500                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 20501                                  ;
 20502                                  ;note: sysinit should save necessary registers and when the control is back
 20503                                  
 20504                                  	; 24/10/2022
 20505                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 20506                                  sysinit_base:				
 20507 000010CD 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 20508 000010D2 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 20509 000010D7 CD21                    	int	21h			; load/exec dos call.
 20510 000010D9 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 20511 000010DE 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 20512 000010E3 1F                      	pop	ds			; restore confbot seg
 20513 000010E4 07                      	pop	es			; restore sysinitseg
 20514 000010E5 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 20515                                  					; at this time,i don't have to worry about
 20516                                  					; that sysinit module has been broken or not.
 20517 000010E7 E81800                  	call	sum_up			; otherwise,check if it is good.
 20518 000010EA 263906[5603]            	cmp	[es:checksum],ax
 20519 000010EF 740C                    	je	short sysinit_base_end
 20520                                  
 20521                                  ;	memory broken. show "memory allocation error" message and stall.
 20522                                  
 20523 000010F1 B409                    	mov	ah,9
 20524 000010F3 0E                      	push	cs
 20525 000010F4 1F                      	pop	ds
 20526 000010F5 BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 20527 000010F8 CD21                    	int	21h
 20528                                  		; DOS - PRINT STRING
 20529                                  		; DS:DX -> string terminated by "$"
 20530                                  	; 24/10/2022
 20531                                  _stall: 
 20532                                  	; 11/12/2022
 20533 000010FA F4                      	hlt 
 20534                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20535                                  	;hlt				;use HLT to minimize energy consumption
 20536 000010FB EBFD                            jmp	short _stall
 20537                                  
 20538                                  sysinit_base_end: 
 20539 000010FD 26FF2E[5203]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 20540                                  
 20541                                  ;-------------------------------------
 20542                                  
 20543                                  sum_up:
 20544                                  
 20545                                  ;in:   es - sysinitseg.
 20546                                  ;out:  ax - result
 20547                                  ;
 20548                                  ;remark: since this routine will only check starting from "locstack" to the end of
 20549                                  ;	 sysinit segment,the data area, and the current stack area are not
 20550                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 20551                                  ;	 gaurantee to be safe.
 20552                                  ;
 20553                                  ;first sum up confbot seg.
 20554                                  
 20555 00001102 1E                      	push	ds
 20556                                  	;mov	ax,[es:CONFBOT]
 20557                                  	; 24/10/2022
 20558 00001103 26A1[A102]              	mov	ax,[es:top_of_cdss]
 20559 00001107 8ED8                    	mov	ds,ax
 20560 00001109 31F6                    	xor	si,si
 20561 0000110B 31C0                    	xor	ax,ax
 20562 0000110D 268B0E[4C03]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 20563                                  					;whole test better fail.
 20564 00001112 D1E9                    	shr	cx,1			; make it a word count
 20565 00001114 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 20566                                  sum1:
 20567 00001116 0304                    	add	ax,[si]
 20568 00001118 46                      	inc	si
 20569 00001119 46                      	inc	si
 20570 0000111A E2FA                    	loop	sum1
 20571                                  ;now,sum up sysinit module.
 20572                                  sum_sys_code:
 20573                                  	; 24/10/2022
 20574 0000111C BE1C11                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 20575                                  				        ; starting after the stack.  M069
 20576                                  					;  this does not cover the possible stack code!!!
 20577                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 20578                                  	; 02/11/2022
 20579                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 20580                                  	; 30/12/2022 (BugFix)
 20581                                  	; (SI_End is 39D0h for this -Retro DOS v4.0- IO.SYS)
 20582 0000111F B9[F038]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 20583 00001122 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 20584 00001124 D1E9                    	shr	cx,1
 20585                                  sum2:
 20586 00001126 260304                  	add	ax,[es:si]
 20587 00001129 46                      	inc	si
 20588 0000112A 46                      	inc	si
 20589 0000112B E2F9                    	loop	sum2
 20590 0000112D 1F                      	pop	ds
 20591 0000112E C3                      	retn
 20592                                  
 20593                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20594                                  
 20595                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 20596                                  ;SYSINIT:11BDh:
 20597 0000112F 0000                    	dw	0
 20598                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 20599                                  ;SYSINIT:11BFh:
 20600 00001131 0000                    	dw	0
 20601                                  
 20602                                  mem_alloc_err_msgx:
 20603                                  
 20604                                         ;include msbio.cl4		; memory allocation error message
 20605                                  
 20606                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 20607 00001133 0D0A                    	db	0Dh,0Ah
 20608 00001135 4D656D6F727920616C-     	db 	'Memory allocation error $'
 20608 0000113E 6C6F636174696F6E20-
 20608 00001147 6572726F722024     
 20609                                  
 20610                                  end_sysinit_base: ; label byte
 20611                                  	; 24/10/2022
 20612                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 20613                                  
 20614                                  ; ----------------------------------------------------------------------
 20615                                  ; Set_Buffer
 20616                                  ;
 20617                                  ;function: set buffers in the real memory.				  
 20618                                  ;	   lastly set the memhi,memlo for the next available free address.
 20619                                  ;
 20620                                  ;input:    ds:bx -> buffinfo.
 20621                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 20622                                  ;	   singlebuffersize = buffer header size + sector size		  
 20623                                  ;
 20624                                  ;output:   buffers Queue established.	       				   
 20625                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 20626                                  ; ----------------------------------------------------------------------
 20627                                  
 20628                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20629                                  	; (SYSINIT:11DCh)
 20630                                  
 20631                                  set_buffer:
 20632 0000114E 30D2                    	xor	dl,dl				; assume buffers not in HMA
 20633 00001150 E85500                  	call	GetBufferAddr
 20634 00001153 7402                    	jz	short set_buff_1
 20635 00001155 B201                    	mov	dl,1				; buffers in HMA
 20636                                  set_buff_1:
 20637                                  	; 25/10/2022
 20638                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 20639 00001157 893F                    	mov	[bx],di
 20640                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 20641 00001159 8C4702                  	mov	[bx+2],es
 20642                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 20643 0000115C C747040000              	mov	word [bx+4],0
 20644                                  
 20645 00001161 89F8                    	mov	ax,di
 20646 00001163 2E8B0E[9702]            	mov	cx,[cs:buffers]
 20647 00001168 57                      	push	di				; remember first buffer
 20648                                  
 20649                                  ;	for each buffer
 20650                                  
 20651                                  nxt_buff:
 20652 00001169 E86300                  	call	set_buffer_info 		; set buf_link,buf_id...
 20653 0000116C 89C7                    	mov	di,ax
 20654 0000116E E2F9                    	loop	nxt_buff
 20655                                  
 20656 00001170 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 20657                                  
 20658 00001175 59                      	pop	cx				; get first buffer
 20659                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 20660 00001176 26890D                  	mov	[es:di],cx
 20661 00001179 87CF                    	xchg	cx,di
 20662                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 20663                                  	; 25/10/2022
 20664 0000117B 26894D02                	mov	[es:di+2],cx
 20665                                  
 20666 0000117F 08D2                    	or	dl,dl				; In HMa ?
 20667 00001181 7417                    	jz	short set_buff_2		; no
 20668                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 20669 00001183 C6470C01                	mov	byte [bx+12],1
 20670 00001187 2EA1[E003]              	mov	ax,[cs:memhi]			; seg of scratch buff
 20671                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 20672 0000118B C7470D0000              	mov	word [bx+13],0
 20673                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 20674 00001190 89470F                  	mov	word [bx+15],ax
 20675 00001193 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 20676                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 20677 00001197 83E814                  	sub	ax,20
 20678                                  set_buff_2:
 20679 0000119A 2E0106[DE03]            	add	[cs:memlo],ax
 20680                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20681 0000119F 2E800E[3614]02          	or	byte [cs:setdevmarkflag],2
 20682                                  	;call	round
 20683                                  	;retn
 20684                                  	; 12/12/2022
 20685 000011A5 E9211F                  	jmp	round
 20686                                  
 20687                                  ; ----------------------------------------------------------------------
 20688                                  ; procedure : GetBufferAddr
 20689                                  ;
 20690                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 20691                                  ;
 20692                                  ; returns in es:di the buffer adress
 20693                                  ; returns NZ if allocated in HMA
 20694                                  ; ----------------------------------------------------------------------
 20695                                  
 20696                                  	; 25/10/2022 
 20697                                  GetBufferAddr:
 20698 000011A8 53                      	push	bx
 20699 000011A9 52                      	push	dx
 20700 000011AA 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 20701 000011AE 2EF726[9702]            	mul	word [cs:buffers]
 20702                                  	;add	ax,0Fh
 20703 000011B3 83C00F                  	add	ax,15 
 20704                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20705                                  	;and	ax,~15	; 0FFF0h	; para round
 20706                                  	; 12/12/2022
 20707 000011B6 24F0                    	and	al,~15	; 0F0h
 20708 000011B8 89C3                    	mov	bx,ax
 20709 000011BA B8024A                  	mov	ax,4A02h
 20710                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 20711 000011BD CD2F                    	int	2Fh
 20712 000011BF 83FFFF                  	cmp	di,0FFFFh
 20713 000011C2 7508                    	jne	short got_hma
 20714 000011C4 BF0000                  	mov	di,0			; dont xor di,di Z flag needed
 20715                                  	;zf=1
 20716                                  	;xor	di,di	; 25/10/2022
 20717                                  	;zf=1
 20718 000011C7 2E8E06[E003]            	mov	es,[cs:memhi]
 20719                                  got_hma:
 20720 000011CC 5A                      	pop	dx
 20721 000011CD 5B                      	pop	bx
 20722 000011CE C3                      	retn
 20723                                  
 20724                                  ; ----------------------------------------------------------------------
 20725                                  
 20726                                  set_buffer_info:
 20727                                  
 20728                                  ;function: set buf_link,buf_id,buf_sector
 20729                                  ;
 20730                                  ;in: es:di -> buffer header to be set.
 20731                                  ;    ax = di
 20732                                  ;
 20733                                  ;out:
 20734                                  ;    above entries set.
 20735                                  
 20736                                  	; 25/10/2022 
 20737 000011CF 2EFF36[3903]            	push	word [cs:buf_prev_off]
 20738                                  	;pop	word [es:di+buffinfo.buf_prev]
 20739 000011D4 268F4502                	pop	word [es:di+2]
 20740 000011D8 2EA3[3903]              	mov	[cs:buf_prev_off],ax
 20741 000011DC 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 20742                                  	;mov	[es:di+buffinfo.buf_next],ax
 20743 000011E1 268905                  	mov	[es:di],ax
 20744                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 20745 000011E4 26C74504FF00            	mov	word [es:di+4],00FFh
 20746                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 20747 000011EA 26C745060000            	mov	word [es:di+6],0
 20748                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 20749 000011F0 26C745080000            	mov	word [es:di+8],0
 20750 000011F6 C3                      	retn
 20751                                  
 20752                                  ; ======================================================================
 20753                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 20754                                  ; ----------------------------------------------------------------------
 20755                                  ; 27/03/2019 - Retro DOS v4.0
 20756                                  
 20757                                  ; ----------------------------------------------------------------------
 20758                                  ; ibmstack initialization routine.
 20759                                  ;
 20760                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 20761                                  ;	has been modified. this initialization routine also has to
 20762                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 20763                                  ;	should be set to signal that this interrupt handler is the
 20764                                  ;	first handler hooked to this interrupt vector.
 20765                                  ;	we determine this by looking at the instruction pointed by
 20766                                  ;	this vector. if it is iret, then this handler should be the
 20767                                  ;	first one. in our case, only the interrupt vector 77h is the
 20768                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 20769                                  ;
 20770                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 20771                                  ;	some design changes are needed to the above interrupt sharing
 20772                                  ;	method. the above sharing scheme assumes that 1). interrupt
 20773                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 20774                                  ;	interrupts would only be generated on levels 7 and 15.
 20775                                  ;	these assumptions are not true any more. we have to use the firstflag
 20776                                  ;	for every level of interrupt. we will set the firstflag on the following
 20777                                  ;	conditions:
 20778                                  ;
 20779                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 20780                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 20781                                  ;	 c. else if cs:ip points to an iret, then "first"
 20782                                  ;	 d. else if cs:ip points to dummy, then "first"
 20783                                  ;
 20784                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 20785                                  ;	be equal to the value at f000:ff01. this location is the initial value
 20786                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 20787                                  ;	the bioses for all of the machines.
 20788                                  ;
 20789                                  ;	system design group requests bios to handle the phantom interrupts.
 20790                                  ;
 20791                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 20792                                  ;	produced by the bogus adapter card even without interrupt request is
 20793                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 20794                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 20795                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 20796                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 20797                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 20798                                  ;	interrupt line.
 20799                                  ;
 20800                                  ;	to handle those "phantom" interrupts, the main stack code will check
 20801                                  ;	the own firstflag, and if it is not "first" (which means the forward
 20802                                  ;	pointer points to the legal shared interrupt handler), then pass the
 20803                                  ;	control. if it is the first, then the following action should be
 20804                                  ;	taken. we don't have to implement skack logic in this case.
 20805                                  ;
 20806                                  ;	to implement this logic, we rather choose a simple method.
 20807                                  ;	if ont of the above "firstflag" conditions is met, we are not
 20808                                  ;	going to hook this interrupt vector. the reason is if the original
 20809                                  ;	vector points to "iret" and do nothing, we don't need
 20810                                  ;	to implement the stack logic for it. this will simplify implementation
 20811                                  ;	while maintaining compatibility with the old version of dos.
 20812                                  ;	this implies that in the main stack code, there might be a stack code
 20813                                  ;	that will never be used, a dead code.
 20814                                  ;
 20815                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 20816                                  
 20817                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20818                                  	; (SYSINIT:1287h)
 20819                                  
 20820                                  	; 14/12/2022
 20821                                  stackinit:
 20822 000011F7 50                      	push	ax
 20823 000011F8 1E                      	push	ds
 20824 000011F9 06                      	push	es
 20825 000011FA 53                      	push	bx
 20826 000011FB 51                      	push	cx
 20827 000011FC 52                      	push	dx
 20828 000011FD 57                      	push	di
 20829 000011FE 56                      	push	si
 20830 000011FF 55                      	push	bp
 20831                                  
 20832                                  ;currently es -> stack code area
 20833                                  
 20834                                  	; 12/12/2022
 20835                                  	; ds = cs
 20836 00001200 A1[8A02]                	mov	ax,[stack_count]
 20837 00001203 89C1                    	mov	cx,ax  ; *!*!*  
 20838                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20839                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 20840                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 20841 00001205 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 20842                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 20843 00001209 A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 20844 0000120C 26A3[0600]              	mov	[es:stacksize],ax
 20845                                  	; 12/12/2022
 20846 00001210 A1[8E02]                	mov	ax,[stack_addr]			; offset
 20847                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20848                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 20849                                  	;mov	ax,[cs:stack_addr]  ; !!
 20850 00001213 26A3[0800]              	mov	[es:stacks],ax
 20851                                  	; 12/12/2022
 20852 00001217 89C5                    	mov	bp,ax ; *!*
 20853 00001219 A1[9002]                	mov	ax,[stack_addr+2]
 20854                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20855                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 20856                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 20857 0000121C 26A3[0A00]              	mov	[es:stacks+2],ax
 20858                                  
 20859                                  ; initialize the data fields with the parameters
 20860                                  
 20861                                  ; "firstentry" will always be at stacks
 20862                                  
 20863                                  	;mov	bp,[es:stacks]			; get offset of stack
 20864                                  	; 12/12/2022
 20865                                  	; bp = [es:stacks] ; *!*
 20866 00001220 26892E[0C00]            	mov	[es:firstentry],bp
 20867                                  
 20868                                  ; the stacks will always immediately follow the table entries
 20869                                  
 20870 00001225 B80800                  	mov	ax,entrysize ; 8
 20871                                  	;mov	cx,[es:stackcount]
 20872                                  	; 12/12/2022
 20873                                  	; cx = [es:stackcount] ; *!*!*
 20874 00001228 F7E1                    	mul	cx
 20875 0000122A 01E8                    	add	ax,bp
 20876 0000122C 26A3[0400]              	mov	[es:stackat],ax
 20877 00001230 89C3                    	mov	bx,ax
 20878 00001232 83EB02                  	sub	bx,2
 20879                                  
 20880                                  ; zero the entire stack area to start with
 20881                                  
 20882 00001235 268B3E[0400]            	mov	di,[es:stackat]
 20883 0000123A 26A1[0600]              	mov	ax,[es:stacksize]
 20884 0000123E F7E1                    	mul	cx
 20885 00001240 89C1                    	mov	cx,ax
 20886 00001242 31C0                    	xor	ax,ax
 20887 00001244 06                      	push	es
 20888 00001245 1F                      	pop	ds				;ds = relocated stack code seg.
 20889                                  
 20890                                  ;now, ds -> stack code area
 20891                                  
 20892 00001246 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 20893 0000124A FC                      	cld
 20894 0000124B F3AA                    	rep	stosb
 20895                                  
 20896 0000124D 8B0E[0200]              	mov	cx,[stackcount]
 20897                                  
 20898                                  ; loop for "count" times, building a table entry
 20899                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 20900                                  ;  cx = number of entries
 20901                                  ;  es:bp => base of stacks - 2
 20902                                  ;  es:bx => first table entry
 20903                                  
 20904                                  buildloop:
 20905                                  	; 11/12/2022
 20906                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 20907                                  	; 25/10/2022
 20908 00001251 26C6460000              	mov	byte [es:bp],free
 20909 00001256 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 20910                                  	;mov	[es:bp+1],al
 20911 0000125A 26894602                	mov	[es:bp+savedsp],ax
 20912                                  	;mov	[es:bp2],ax
 20913 0000125E 26894604                	mov	[es:bp+savedss],ax
 20914                                  	;mov	[es:bp+4],ax
 20915 00001262 031E[0600]              	add	bx,[stacksize]
 20916 00001266 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 20917                                  	;mov	[es:bp+6],bx
 20918 0000126A 26892F                  	mov	[es:bx],bp
 20919 0000126D 83C508                  	add	bp,entrysize ; 8
 20920                                  
 20921 00001270 E2DF                    	loop	buildloop
 20922                                  
 20923 00001272 83ED08                  	sub	bp,entrysize ; 8
 20924 00001275 892E[0E00]              	mov	[lastentry],bp
 20925 00001279 892E[1000]              	mov	[nextentry],bp
 20926                                  
 20927 0000127D 1E                      	push	ds
 20928 0000127E B800F0                  	mov	ax,0F000h		;look at the model byte
 20929 00001281 8ED8                    	mov	ds,ax
 20930 00001283 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
 20931 00001288 1F                      	pop	ds
 20932 00001289 7504                    	jne	short skip_disablenmis
 20933                                  
 20934 0000128B B007                    	mov	al,07h			; disable convertible nmis
 20935 0000128D E672                    	out	72h,al
 20936                                  
 20937                                  skip_disablenmis:
 20938 0000128F 31C0                    	xor	ax,ax
 20939 00001291 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 20940                                  					;ds - relocated stack code segment
 20941 00001293 FA                      	cli
 20942                                  
 20943                                  	;irp	aa,<02,08,09,70>
 20944                                  	;
 20945                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 20946                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 20947                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 20948                                  	;mov	dx,offset int&aa	;pass where new handler is
 20949                                  	;call	new_init_loop		;adjust the vector to new handler,
 20950                                  	;				;saving pointer to original owner
 20951                                  	;endm
 20952                                  
 20953                                  stkinit_02:
 20954 00001294 BE0800                  	mov	si,02h*4 ; 8
 20955 00001297 BF[4206]                	mov	di,INT19OLD02
 20956 0000129A BB[1200]                	mov	bx,old02
 20957 0000129D BA[1600]                	mov	dx,int02
 20958 000012A0 E84901                  	call	new_init_loop
 20959                                  stkinit_08:
 20960 000012A3 BE2000                  	mov	si,08h*4 ; 32
 20961 000012A6 BF[4706]                	mov	di,INT19OLD08
 20962 000012A9 BB[3800]                	mov	bx,old08
 20963 000012AC BA[3C00]                	mov	dx,int08
 20964 000012AF E83A01                  	call	new_init_loop
 20965                                  stkinit_09:
 20966 000012B2 BE2400                  	mov	si,09h*4 ; 36
 20967 000012B5 BF[4C06]                	mov	di,INT19OLD09
 20968 000012B8 BB[4100]                	mov	bx,old09
 20969 000012BB BA[4500]                	mov	dx,int09
 20970 000012BE E82B01                  	call	new_init_loop
 20971                                  stkinit_70:
 20972 000012C1 BEC001                  	mov	si,70h*4 ; 448
 20973 000012C4 BF[6A06]                	mov	di,INT19OLD70
 20974 000012C7 BB[4E00]                	mov	bx,old70
 20975 000012CA BA[5200]                	mov	dx,int70
 20976 000012CD E81C01                  	call	new_init_loop
 20977                                  
 20978                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 20979                                  	;
 20980                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 20981                                  	;push	ds			;save relocated stack code segment
 20982                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 20983                                  	;push	ds
 20984                                  	;pop	dx			;dx = segment value
 20985                                  	;	
 20986                                  	;cmp	dx,0
 20987                                  	;jz	int&aa&_first
 20988                                  	;
 20989                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 20990                                  	;jz	int&aa&_first
 20991                                  	;
 20992                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 20993                                  	;jz	int&aa&_not_first
 20994                                  	;
 20995                                  	;cmp	dx,0f000h		;rom bios segment
 20996                                  	;jnz	int&aa&_not_first
 20997                                  	;
 20998                                  	;push	es
 20999                                  	;push	dx
 21000                                  	;mov	dx,0f000h
 21001                                  	;mov	es,dx
 21002                                  	;cmp	bx,word ptr es:0ff01h
 21003                                         	;pop	dx
 21004                                  	;pop	es
 21005                                  	;jz	int&aa&_first
 21006                                  	;
 21007                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 21008                                  	;pop	ds
 21009                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 21010                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 21011                                  	;mov	dx, offset int&aa	;pass where new handler is
 21012                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 21013                                  	;				;pointer to original owner.
 21014                                  	;jmp	short int&aa&_end
 21015                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 21016                                  	;pop	ds
 21017                                  ;int&aa&_end:
 21018                                  	;
 21019                                  	;endm
 21020                                  
 21021                                  stkinit_0A:
 21022 000012D0 BE2800                  	mov	si,0Ah*4 ; 40
 21023                                  	
 21024                                  ; 14/12/2022
 21025                                  %if 0	
 21026                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21027                                  	push	ds
 21028                                  	
 21029                                  	lds	bx,[es:si]
 21030                                  	push	ds
 21031                                  	pop	dx
 21032                                  		
 21033                                  	cmp	dx,0
 21034                                  	je	short int_0A_first
 21035                                  	
 21036                                  	cmp	byte [bx],0CFh
 21037                                  	je	short int_0A_first
 21038                                  	
 21039                                  	cmp	word [bx+6],424Bh
 21040                                  	je	short int_0A_not_first
 21041                                  	
 21042                                  	cmp	dx,0F000h
 21043                                  	jne	short int_0A_not_first
 21044                                  	
 21045                                  	push	es
 21046                                  	push	dx
 21047                                  	mov	dx,0F000h
 21048                                  	mov	es,dx
 21049                                  	cmp	bx,[es:0FF01h]
 21050                                         	pop	dx
 21051                                  	pop	es
 21052                                  	je	short int_0A_first
 21053                                  %Endif
 21054                                  
 21055                                  	; 14/12/2022
 21056                                  	; 25/10/2022
 21057 000012D3 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21058 000012D6 730C                    	jnc	short int_0A_first
 21059                                  	
 21060                                  int_0A_not_first:
 21061                                  	; 14/12/2022
 21062                                  	; 25/10/2022
 21063                                  	;pop	ds
 21064 000012D8 BF[5106]                	mov	di,INT19OLD0A
 21065 000012DB BB[5900]                	mov	bx,old0A
 21066 000012DE BA[5700]                	mov	dx,int0A
 21067 000012E1 E80801                  	call	new_init_loop
 21068                                  	
 21069                                  	; 14/12/2022	
 21070                                  	;jmp	short int_0A_end
 21071                                  ;int_0A_first:
 21072                                  	; 25/10/2022
 21073                                  	;pop	ds
 21074                                  
 21075                                  	; 14/12/2022
 21076                                  int_0A_first:
 21077                                  int_0A_end:
 21078                                  
 21079                                  stkinit_0B:
 21080 000012E4 BE2C00                  	mov	si,0Bh*4 ; 44
 21081                                  	
 21082                                  	; 14/12/2022
 21083                                  	; 25/10/2022
 21084 000012E7 E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21085 000012EA 730C                    	jnc	short int_0B_end ; int_0B_first
 21086                                  
 21087                                  ; 14/12/2022
 21088                                  %if 0	
 21089                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21090                                  	push	ds
 21091                                  	lds	bx,[es:si]
 21092                                  	push	ds
 21093                                  	pop	dx
 21094                                  		
 21095                                  	cmp	dx,0
 21096                                  	je	short int_0B_first
 21097                                  
 21098                                  	cmp	byte [bx],0CFh
 21099                                  	je	short int_0B_first
 21100                                  	
 21101                                  	cmp	word [bx+6],424Bh
 21102                                  	je	short int_0B_not_first
 21103                                  	
 21104                                  	cmp	dx,0F000h
 21105                                  	jne	short int_0B_not_first
 21106                                  
 21107                                  	push	es
 21108                                  	push	dx
 21109                                  	mov	dx,0F000h
 21110                                  	mov	es,dx
 21111                                  	cmp	bx,[es:0FF01h]
 21112                                  	pop	dx
 21113                                  	pop	es
 21114                                  	je	short int_0B_first
 21115                                  %endif
 21116                                  
 21117                                  int_0B_not_first:
 21118                                  	; 14/12/2022
 21119                                  	; 25/10/2022
 21120                                  	;pop	ds
 21121 000012EC BF[5606]                	mov	di,INT19OLD0B
 21122 000012EF BB[7100]                	mov	bx,old0B
 21123 000012F2 BA[6F00]                	mov	dx,int0B
 21124 000012F5 E8F400                  	call	new_init_loop
 21125                                  
 21126                                  	; 14/12/2022
 21127                                  	;jmp	short int_0B_end
 21128                                  ;int_0B_first:
 21129                                  	; 25/10/2022
 21130                                  	;pop	ds
 21131                                  
 21132                                  int_0B_end:
 21133                                  	
 21134                                  stkinit_0C:
 21135 000012F8 BE3000                  	mov	si,0Ch*4 ; 48
 21136                                  	
 21137                                  	; 14/12/2022
 21138                                  	; 25/10/2022
 21139 000012FB E8C300                  	call	int_xx_first_check
 21140 000012FE 730C                    	jnc	short int_0C_end ; int_0C_first
 21141                                  
 21142                                  ; 14/12/2022
 21143                                  %if 0	
 21144                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21145                                  	push	ds
 21146                                  	lds	bx,[es:si]
 21147                                  	push	ds
 21148                                  	pop	dx
 21149                                  		
 21150                                  	cmp	dx,0
 21151                                  	je	short int_0C_first
 21152                                  
 21153                                  	cmp	byte [bx],0CFh
 21154                                  	je	short int_0C_first
 21155                                  	
 21156                                  	cmp	word [bx+6],424Bh
 21157                                  	je	short int_0C_not_first
 21158                                  	
 21159                                  	cmp	dx,0F000h
 21160                                  	jne	short int_0C_not_first
 21161                                  
 21162                                  	push	es
 21163                                  	push	dx
 21164                                  	mov	dx,0F000h
 21165                                  	mov	es,dx
 21166                                  	cmp	bx,[es:0FF01h]
 21167                                  	pop	dx
 21168                                  	pop	es
 21169                                  	je	short int_0C_first
 21170                                  %endif
 21171                                  	
 21172                                  int_0C_not_first:
 21173                                  	; 14/12/2022
 21174                                  	; 25/10/2022
 21175                                  	;pop	ds
 21176 00001300 BF[5B06]                	mov	di,INT19OLD0C
 21177 00001303 BB[8900]                	mov	bx,old0C
 21178 00001306 BA[8700]                	mov	dx,int0C
 21179 00001309 E8E000                  	call	new_init_loop
 21180                                  
 21181                                  	; 14/12/2022
 21182                                  	;jmp	short int_0C_end
 21183                                  ;int_0C_first:
 21184                                  	; 25/10/2022
 21185                                  	;pop	ds
 21186                                  
 21187                                  int_0C_end:
 21188                                  
 21189                                  stkinit_0D:
 21190 0000130C BE3400                  	mov	si,0Dh*4 ; 52
 21191                                  
 21192                                  	; 14/12/2022	
 21193                                  	; 25/10/2022
 21194 0000130F E8AF00                  	call	int_xx_first_check
 21195 00001312 730C                    	jnc	short int_0D_end ; int_0D_first
 21196                                  
 21197                                  ; 14/12/2022
 21198                                  %if 0	
 21199                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21200                                  	push	ds
 21201                                  	lds	bx,[es:si]
 21202                                  	push	ds
 21203                                  	pop	dx
 21204                                  		
 21205                                  	cmp	dx,0
 21206                                  	je	short int_0D_first
 21207                                  
 21208                                  	cmp	byte [bx],0CFh
 21209                                  	je	short int_0D_first
 21210                                  	
 21211                                  	cmp	word [bx+6],424Bh
 21212                                  	je	short int_0D_not_first
 21213                                  	
 21214                                  	cmp	dx,0F000h
 21215                                  	jne	short int_0D_not_first
 21216                                  
 21217                                  	push	es
 21218                                  	push	dx
 21219                                  	mov	dx,0F000h
 21220                                  	mov	es,dx
 21221                                  	cmp	bx,[es:0FF01h]
 21222                                  	pop	dx
 21223                                  	pop	es
 21224                                  	je	short int_0D_first
 21225                                  %endif
 21226                                  	
 21227                                  int_0D_not_first:
 21228                                  	; 14/12/2022
 21229                                  	; 25/10/2022
 21230                                  	;pop	ds
 21231 00001314 BF[6006]                	mov	di,INT19OLD0D
 21232 00001317 BB[A100]                	mov	bx,old0D
 21233 0000131A BA[9F00]                	mov	dx,int0D
 21234 0000131D E8CC00                  	call	new_init_loop
 21235                                  
 21236                                  	; 14/12/2022
 21237                                  	;jmp	short int_0D_end
 21238                                  	; 02/11/2022
 21239                                  ;int_0D_first:
 21240                                  	;pop	ds
 21241                                  
 21242                                  int_0D_end:
 21243                                  
 21244                                  stkinit_0E:
 21245 00001320 BE3800                  	mov	si,0Eh*4 ; 56
 21246                                  
 21247                                  	; 14/12/2022	
 21248                                  	; 25/10/2022
 21249 00001323 E89B00                  	call	int_xx_first_check
 21250 00001326 730C                    	jnc	short int_0E_end ; int_0E_first
 21251                                  
 21252                                  ; 14/12/2022
 21253                                  %if 0	
 21254                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21255                                  	push	ds
 21256                                  	lds	bx,[es:si]
 21257                                  	push	ds
 21258                                  	pop	dx
 21259                                  		
 21260                                  	cmp	dx,0
 21261                                  	je	short int_0E_first
 21262                                  
 21263                                  	cmp	byte [bx],0CFh
 21264                                  	je	short int_0E_first
 21265                                  	
 21266                                  	cmp	word [bx+6],424Bh
 21267                                  	je	short int_0E_not_first
 21268                                  	
 21269                                  	cmp	dx,0F000h
 21270                                  	jne	short int_0E_not_first
 21271                                  
 21272                                  	push	es
 21273                                  	push	dx
 21274                                  	mov	dx,0F000h
 21275                                  	mov	es,dx
 21276                                  	cmp	bx,[es:0FF01h]
 21277                                  	pop	dx
 21278                                  	pop	es
 21279                                  	je	short int_0E_first
 21280                                  %endif
 21281                                  	
 21282                                  int_0E_not_first:
 21283                                  	; 14/12/2022
 21284                                  	; 25/10/2022
 21285                                  	;pop	ds
 21286 00001328 BF[6506]                	mov	di,INT19OLD0E
 21287 0000132B BB[B900]                	mov	bx,old0E
 21288 0000132E BA[B700]                	mov	dx,int0E
 21289 00001331 E8B800                  	call	new_init_loop
 21290                                  
 21291                                  	; 14/12/2022
 21292                                  	;jmp	short int_0E_end
 21293                                  ;int_0E_first:
 21294                                  	; 25/10/2022
 21295                                  	;pop	ds	
 21296                                  
 21297                                  int_0E_end:
 21298                                  
 21299                                  stkinit_72:
 21300 00001334 BEC801                  	mov	si,72h*4 ; 456
 21301                                  	
 21302                                  	; 14/12/2022
 21303                                  	; 25/10/2022
 21304 00001337 E88700                  	call	int_xx_first_check
 21305 0000133A 730C                    	jnc	short int_72_end ; int_72_first
 21306                                  
 21307                                  ; 14/12/2022
 21308                                  %if 0	
 21309                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21310                                  	push	ds
 21311                                  	lds	bx,[es:si]
 21312                                  	push	ds
 21313                                  	pop	dx
 21314                                  		
 21315                                  	cmp	dx,0
 21316                                  	je	short int_72_first
 21317                                  
 21318                                  	cmp	byte [bx],0CFh
 21319                                  	je	short int_72_first
 21320                                  	
 21321                                  	cmp	word [bx+6],424Bh
 21322                                  	je	short int_72_not_first
 21323                                  	
 21324                                  	cmp	dx,0F000h
 21325                                  	jne	short int_72_not_first
 21326                                  
 21327                                  	push	es
 21328                                  	push	dx
 21329                                  	mov	dx,0F000h
 21330                                  	mov	es,dx
 21331                                  	cmp	bx,[es:0FF01h]
 21332                                  	pop	dx
 21333                                  	pop	es
 21334                                  	je	short int_72_first
 21335                                  %endif
 21336                                  	
 21337                                  int_72_not_first:
 21338                                  	; 14/12/2022
 21339                                  	; 25/10/2022
 21340                                  	;pop	ds
 21341 0000133C BF[6F06]                	mov	di,INT19OLD72
 21342 0000133F BB[D100]                	mov	bx,old72
 21343 00001342 BA[CF00]                	mov	dx,int72
 21344 00001345 E8A400                  	call	new_init_loop
 21345                                  
 21346                                  	; 14/12/2022
 21347                                  	;jmp	short int_72_end
 21348                                  ;int_72_first:
 21349                                  	; 25/10/2022
 21350                                  	;pop	ds
 21351                                  
 21352                                  int_72_end:
 21353                                  
 21354                                  stkinit_73:
 21355 00001348 BECC01                  	mov	si,73h*4 ; 460
 21356                                  	
 21357                                  	; 14/12/2022
 21358                                  	; 25/10/2022
 21359 0000134B E87300                  	call	int_xx_first_check
 21360 0000134E 730C                    	jnc	short int_73_end ; int_73_first
 21361                                  
 21362                                  ; 14/12/2022
 21363                                  %if 0	
 21364                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21365                                  	push	ds
 21366                                  	lds	bx,[es:si]
 21367                                  	push	ds
 21368                                  	pop	dx
 21369                                  		
 21370                                  	cmp	dx,0
 21371                                  	je	short int_73_first
 21372                                  
 21373                                  	cmp	byte [bx],0CFh
 21374                                  	je	short int_73_first
 21375                                  	
 21376                                  	cmp	word [bx+6],424Bh
 21377                                  	je	short int_73_not_first
 21378                                  	
 21379                                  	cmp	dx,0F000h
 21380                                  	jne	short int_73_not_first
 21381                                  
 21382                                  	push	es
 21383                                  	push	dx
 21384                                  	mov	dx,0F000h
 21385                                  	mov	es,dx
 21386                                  	cmp	bx,[es:0FF01h]
 21387                                  	pop	dx
 21388                                  	pop	es
 21389                                  	je	short int_73_first
 21390                                  %endif	
 21391                                  	
 21392                                  int_73_not_first:
 21393                                  	; 14/12/2022
 21394                                  	; 25/10/2022
 21395                                  	;pop	ds
 21396 00001350 BF[7406]                	mov	di,INT19OLD73
 21397 00001353 BB[E900]                	mov	bx,old73
 21398 00001356 BA[E700]                	mov	dx,int73
 21399 00001359 E89000                  	call	new_init_loop
 21400                                  
 21401                                  	; 14/12/2022
 21402                                  	;jmp	short int_73_end
 21403                                  ;int_73_first:
 21404                                  	; 25/10/2022
 21405                                  	;pop	ds
 21406                                  
 21407                                  int_73_end:
 21408                                  
 21409                                  stkinit_74:
 21410 0000135C BED001                  	mov	si,74h*4 ; 464
 21411                                  	
 21412                                  	; 14/12/2022
 21413                                  	; 25/10/2022
 21414 0000135F E85F00                  	call	int_xx_first_check
 21415 00001362 730C                    	jnc	short int_74_end ; int_74_first
 21416                                  
 21417                                  ; 14/12/2022
 21418                                  %if 0		
 21419                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21420                                  	push	ds
 21421                                  	lds	bx,[es:si]
 21422                                  	push	ds
 21423                                  	pop	dx
 21424                                  		
 21425                                  	cmp	dx,0
 21426                                  	je	short int_74_first
 21427                                  
 21428                                  	cmp	byte [bx],0CFh
 21429                                  	je	short int_74_first
 21430                                  	
 21431                                  	cmp	word [bx+6],424Bh
 21432                                  	je	short int_74_not_first
 21433                                  	
 21434                                  	cmp	dx,0F000h
 21435                                  	jne	short int_74_not_first
 21436                                  
 21437                                  	push	es
 21438                                  	push	dx
 21439                                  	mov	dx,0F000h
 21440                                  	mov	es,dx
 21441                                  	cmp	bx,[es:0FF01h]
 21442                                  	pop	dx
 21443                                  	pop	es
 21444                                  	je	short int_74_first
 21445                                  %endif
 21446                                  
 21447                                  int_74_not_first:
 21448                                  	; 14/12/2022
 21449                                  	; 25/10/2022
 21450                                  	;pop	ds
 21451 00001364 BF[7906]                	mov	di,INT19OLD74
 21452 00001367 BB[0101]                	mov	bx,old74
 21453 0000136A BA[FF00]                	mov	dx,int74
 21454 0000136D E87C00                  	call	new_init_loop
 21455                                  	
 21456                                  	; 14/12/2022
 21457                                  	;jmp	short int_74_end
 21458                                  ;int_74_first:
 21459                                  	; 25/10/2022
 21460                                  	;pop	ds
 21461                                  
 21462                                  int_74_end:
 21463                                  
 21464                                  stkinit_76:
 21465 00001370 BED801                  	mov	si,76h*4 ; 472
 21466                                  	
 21467                                  	; 14/12/2022
 21468                                  	; 25/10/2022
 21469 00001373 E84B00                  	call	int_xx_first_check
 21470 00001376 730E                    	jnc	short int_76_end ; int_76_first
 21471                                  
 21472                                  ; 14/12/2022
 21473                                  %if 0	
 21474                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21475                                  	push	ds
 21476                                  	lds	bx,[es:si]
 21477                                  	push	ds
 21478                                  	pop	dx
 21479                                  		
 21480                                  	cmp	dx,0
 21481                                  	je	short int_76_first
 21482                                  
 21483                                  	cmp	byte [bx],0CFh
 21484                                  	je	short int_76_first
 21485                                  	
 21486                                  	cmp	word [bx+6],424Bh
 21487                                  	je	short int_76_not_first
 21488                                  	
 21489                                  	cmp	dx,0F000h
 21490                                  	jne	short int_76_not_first
 21491                                  
 21492                                  	push	es
 21493                                  	push	dx
 21494                                  	mov	dx,0F000h
 21495                                  	mov	es,dx
 21496                                  	cmp	bx,[es:0FF01h]
 21497                                  	pop	dx
 21498                                  	pop	es
 21499                                  	je	short int_76_first
 21500                                  %endif
 21501                                  	
 21502                                  int_76_not_first:
 21503                                  	; 14/12/2022
 21504                                  	; 25/10/2022
 21505                                  	;pop	ds
 21506 00001378 BF[7E06]                	mov	di,INT19OLD76
 21507 0000137B BB[1901]                	mov	bx,old76
 21508 0000137E BA[1701]                	mov	dx,int76
 21509 00001381 E86800                  	call	new_init_loop
 21510                                  
 21511                                  	; 14/12/2022
 21512 00001384 EB00                    	jmp	short int_76_end
 21513                                  ;int_76_first:
 21514                                  	; 25/10/2022
 21515                                  	;pop	ds
 21516                                  
 21517                                  int_76_end:
 21518                                  
 21519                                  stkinit_77:
 21520 00001386 BEDC01                  	mov	si,77h*4 ; 476
 21521                                  	
 21522                                  	; 14/12/2022
 21523                                  	; 25/10/2022
 21524 00001389 E83500                  	call	int_xx_first_check
 21525 0000138C 730C                    	jnc	short int_77_end ; int_77_first
 21526                                  
 21527                                  ; 14/12/2022
 21528                                  %if 0	
 21529                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21530                                  	push	ds
 21531                                  	lds	bx,[es:si]
 21532                                  	push	ds
 21533                                  	pop	dx
 21534                                  		
 21535                                  	cmp	dx,0
 21536                                  	je	short int_77_first
 21537                                  
 21538                                  	cmp	byte [bx],0CFh
 21539                                  	je	short int_77_first
 21540                                  	
 21541                                  	cmp	word [bx+6],424Bh
 21542                                  	je	short int_77_not_first
 21543                                  	
 21544                                  	cmp	dx,0F000h
 21545                                  	jne	short int_77_not_first
 21546                                  
 21547                                  	push	es
 21548                                  	push	dx
 21549                                  	mov	dx,0F000h
 21550                                  	mov	es,dx
 21551                                  	cmp	bx,[es:0FF01h]
 21552                                  	pop	dx
 21553                                  	pop	es
 21554                                  	je	short int_77_first
 21555                                  %endif
 21556                                  	
 21557                                  int_77_not_first:
 21558                                  	; 14/12/2022
 21559                                  	; 25/10/2022
 21560                                  	;pop	ds
 21561 0000138E BF[8306]                	mov	di,INT19OLD77
 21562 00001391 BB[3101]                	mov	bx,old77
 21563 00001394 BA[2F01]                	mov	dx,int77
 21564 00001397 E85200                  	call	new_init_loop
 21565                                  
 21566                                  	; 14/12/2022
 21567                                  	;jmp	short int_77_end
 21568                                  ;int_77_first:
 21569                                  	; 25/10/2022
 21570                                  	;pop	ds
 21571                                  
 21572                                  int_77_end:
 21573 0000139A 1E                      	push	ds
 21574 0000139B B800F0                  	mov	ax,0F000h		; look at the model byte
 21575 0000139E 8ED8                    	mov	ds,ax
 21576 000013A0 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 21577 000013A5 1F                      	pop	ds
 21578 000013A6 7504                    	jne	short skip_enablenmis
 21579                                  
 21580 000013A8 B027                    	mov	al,27h			; enable convertible nmis
 21581 000013AA E672                    	out	72h,al
 21582                                  
 21583                                  ; 25/10/2022
 21584                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 21585                                  
 21586                                  skip_enablenmis:
 21587 000013AC FB                      	sti
 21588                                  	;;mov	ax,Bios_Data ; 70h
 21589                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21590                                  	; 21/10/2022
 21591 000013AD B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21592 000013B0 8ED8                    	mov	ds,ax
 21593                                  
 21594                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 21595                                  
 21596 000013B2 C606[4006]01            	mov	byte [INT19SEM],1	; indicate that int 19
 21597                                  					; initialization is complete
 21598                                  
 21599 000013B7 5D                      	pop	bp			; restore all
 21600 000013B8 5E                      	pop	si
 21601 000013B9 5F                      	pop	di
 21602 000013BA 5A                      	pop	dx
 21603 000013BB 59                      	pop	cx
 21604 000013BC 5B                      	pop	bx
 21605 000013BD 07                      	pop	es
 21606 000013BE 1F                      	pop	ds
 21607 000013BF 58                      	pop	ax
 21608 000013C0 C3                      	retn
 21609                                  
 21610                                  ; 14/12/2022
 21611                                  ; ----------------------------------------------------------------------
 21612                                  
 21613                                  	; 14/12/2022
 21614                                  	; 25/10/2022
 21615                                  ;%if 0
 21616                                  	; 27/03/2019 - Retro DOS v4.0
 21617                                  int_xx_first_check:
 21618 000013C1 1E                      	push	ds
 21619 000013C2 26C51C                  	lds	bx,[es:si]
 21620 000013C5 1E                      	push	ds
 21621 000013C6 5A                      	pop	dx
 21622                                  		
 21623 000013C7 83FA00                  	cmp	dx,0
 21624 000013CA 741E                    	je	short int_xx_first
 21625                                  	
 21626 000013CC 803FCF                  	cmp	byte [bx],0CFh
 21627 000013CF 7419                    	je	short int_xx_first
 21628                                  	
 21629 000013D1 817F064B42              	cmp	word [bx+6],424Bh
 21630 000013D6 7411                    	je	short int_xx_not_first
 21631                                  	
 21632 000013D8 81FA00F0                	cmp	dx,0F000h
 21633 000013DC 750B                    	jne	short int_xx_not_first
 21634                                  
 21635 000013DE 06                      	push	es
 21636                                  	;push	dx
 21637                                  	;mov	dx,0F000h
 21638 000013DF 8EC2                    	mov	es,dx
 21639 000013E1 263B1E01FF              	cmp	bx,[es:0FF01h]
 21640                                        	;pop	dx
 21641 000013E6 07                      	pop	es
 21642 000013E7 7401                    	je	short int_xx_first
 21643                                  
 21644                                  int_xx_not_first:
 21645 000013E9 F9                      	stc
 21646                                  int_xx_first:
 21647 000013EA 1F                      	pop	ds
 21648 000013EB C3                      	retn
 21649                                  
 21650                                  ;%endif
 21651                                  
 21652                                  ; ----------------------------------------------------------------------
 21653                                  ; 27/03/2019 - Retro DOS v4.0
 21654                                  
 21655                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21656                                  ; (SYSINIT:1610h)
 21657                                  
 21658                                  new_init_loop:
 21659                                  
 21660                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 21661                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 21662                                  ;	dx=ds:offset of intxx, the new interrupt handler
 21663                                  ;	di=offset value of int19old&aa variable in bios.
 21664                                  ;	es=zero, segid of vector table
 21665                                  ;	ds=relocated stack code segment
 21666                                  
 21667 000013EC 268B04                  	mov	ax,[es:si]		;remember offset in vector
 21668 000013EF 8907                    	mov	[bx],ax			; to original owner in ds
 21669 000013F1 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 21670 000013F5 894702                  	mov	[bx+2],ax		; to original owner in ds
 21671                                  
 21672 000013F8 1E                      	push	ds
 21673                                  	;;mov	ax,Bios_Data ; 70h
 21674                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21675                                  	; 21/10/2022
 21676 000013F9 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21677 000013FC 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 21678 000013FE 268B04                  	mov	ax,[es:si]		;int 19 handler
 21679 00001401 8905                    	mov	[di],ax
 21680 00001403 268B4402                	mov	ax,[es:si+2]
 21681 00001407 894502                  	mov	word [di+2],ax
 21682 0000140A 1F                      	pop	ds
 21683                                  
 21684 0000140B 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 21685 0000140E 268C5C02                	mov	[es:si+2],ds
 21686 00001412 C3                      	retn
 21687                                  
 21688                                  ; End of STACK initialization routine
 21689                                  ; ----------------------------------------------------------------------
 21690                                  
 21691                                  ; ----------------------------------------------------------------------
 21692                                  ;set the devmark for mem command.
 21693                                  ;in: [memhi] - the address to place devmark
 21694                                  ;    [memlo] = 0
 21695                                  ;    al = id for devmark_id
 21696                                  ;out: devmark established.
 21697                                  ;     the address saved in cs:[devmark_addr]
 21698                                  ;     [memhi] increase by 1.
 21699                                  ; ----------------------------------------------------------------------
 21700                                  
 21701                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21702                                  ; (SYSINIT:1637h)
 21703                                  
 21704                                  setdevmark:
 21705                                  
 21706 00001413 06                      	push	es
 21707 00001414 51                      	push	cx
 21708                                  
 21709 00001415 2E8B0E[E003]            	mov	cx,[cs:memhi]
 21710 0000141A 2E890E[3414]            	mov	[cs:devmark_addr],cx
 21711 0000141F 8EC1                    	mov	es,cx
 21712                                  	; 25/10/2022
 21713                                  	;mov	[es:devmark.id],al
 21714 00001421 26A20000                	mov	[es:0],al
 21715 00001425 41                      	inc	cx
 21716                                  	;mov	[es:devmark.seg],cx
 21717 00001426 26890E0100              	mov	[es:1],cx
 21718                                  
 21719 0000142B 59                      	pop	cx
 21720 0000142C 07                      	pop	es
 21721 0000142D 2EFF06[E003]            	inc	word [cs:memhi]
 21722 00001432 C3                      	retn
 21723                                  
 21724                                  ; ----------------------------------------------------------------------
 21725                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 21726                                  ; ----------------------------------------------------------------------
 21727                                  ; 27/03/2019 - Retro DOS v4.0
 21728                                  
 21729                                  ;MULTI_CONFIG	equ 1
 21730                                  
 21731                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 21732                                                                          ; allocation strategy call
 21733                                  
 21734                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 21735                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 21736                                  
 21737                                  default_filenum equ 8
 21738                                  
 21739                                  ;stacksw	equ true		; include switchable hardware stacks
 21740                                  
 21741                                  ; external variable defined in ibmbio module for multi-track
 21742                                  
 21743                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 21744                                  					; it on after handling config.sys file as a
 21745                                  					; default value,if multrk_flag = multrk_off1.
 21746                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 21747                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 21748                                  
 21749                                  ; if stacksw
 21750                                  
 21751                                  ; internal stack parameters
 21752                                  
 21753                                  ;entrysize	equ 8
 21754                                  
 21755                                  ;mincount	equ 8
 21756                                  ;defaultcount	equ 9
 21757                                  ;maxcount	equ 64
 21758                                  
 21759                                  ;minsize 	equ 32
 21760                                  ;defaultsize	equ 128
 21761                                  ;maxsize 	equ 512
 21762                                  
 21763                                  DOS_FLAG_OFFSET	equ 86h
 21764                                  
 21765                                  ;ifdef MULTI_CONFIG
 21766                                  ;
 21767                                  ;   config_envlen must immediately precede config_wrkseg, because they
 21768                                  ;   may be loaded as a dword ptr
 21769                                  
 21770                                  ; 25/10/2022
 21771                                  ;config_envlen:	dw  0  			; when config_wrkseg is being used as
 21772                                  ;               			;  a scratch env, this is its length
 21773                                  ;config_wrkseg:	dw  0			; config work area (above confbot)
 21774                                  ;                   			;  segment of work area
 21775                                  ;
 21776                                  ;config_cmd:	db  0  			; current config cmd
 21777                                  ;                 			;  (with CONFIG_OPTION_QUERY bit intact)
 21778                                  ;config_multi:	db  0                   ; non-zero if multi-config config.sys
 21779                                  
 21780                                  ;endif ; MULTI_CONFIG
 21781                                  
 21782 00001433 00                      multdeviceflag:	db  0
 21783                                  
 21784 00001434 0000                    devmark_addr:	dw  0			;segment address for devmark.
 21785                                  
 21786 00001436 00                      setdevmarkflag: db  0			;flag used for devmark
 21787                                  
 21788                                  ; 12/12/2022
 21789                                  ;driver_units:	db  0			;total unitcount for driver
 21790                                  
 21791                                  ; 12/12/2022
 21792                                  ;ems_stub_installed:
 21793                                  ;		db  0
 21794                                  
 21795                                  ; 12/12/2022	
 21796                                  ;align 2
 21797                                  
 21798                                  badparm_ptr:	; label	dword
 21799 00001437 0000                    badparm_off:	dw  0
 21800 00001439 0000                    badparm_seg:	dw  0
 21801                                  
 21802                                  ;******************************************************************************
 21803                                  ;take care of config.sys file.
 21804                                  ;system parser data and code.
 21805                                  ;******************************************************************************
 21806                                  
 21807                                  ;*******************************************************************
 21808                                  ; parser options set for msbio sysconf module
 21809                                  ;*******************************************************************
 21810                                  ;
 21811                                  ;**** default assemble swiches definition **************************
 21812                                  
 21813                                  ;farsw	equ 0		; near call expected
 21814                                  ;datesw	equ 0		; check date format
 21815                                  ;timesw	equ 0		; check time format
 21816                                  ;filesw	equ 1		; check file specification
 21817                                  ;capsw	equ 0		; perform caps if specified
 21818                                  ;cmpxsw	equ 0		; check complex list
 21819                                  ;numsw	equ 1		; check numeric value
 21820                                  ;keysw	equ 0		; support keywords
 21821                                  ;swsw	equ 1		; support switches
 21822                                  ;val1sw	equ 1		; support value definition 1
 21823                                  ;val2sw	equ 0		; support value definition 2
 21824                                  ;val3sw	equ 1		; support value definition 3
 21825                                  ;drvsw	equ 1		; support drive only format
 21826                                  ;qussw	equ 0		; support quoted string format
 21827                                  
 21828                                  ; psdata_seg equ cs
 21829                                  
 21830                                  	;.xlist
 21831                                  	;include parse.asm		;together with psdata.inc
 21832                                  	;.list
 21833                                  
 21834                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 21835                                  ; ======================================================================
 21836                                  ; 27/03/2019 - Retro DOS v4.0
 21837                                  
 21838                                  ; 30/03/2019
 21839                                  ; VERSION.INC (MSDOS 6.0) 
 21840                                  ; Set DBCS Blank constant
 21841                                  
 21842                                  ; ifndef DBCS
 21843                                  DB_SPACE EQU 2020h
 21844                                  DB_SP_HI EQU 20h
 21845                                  DB_SP_LO EQU 20h
 21846                                  ; else
 21847                                  
 21848                                  ;*******************************************************************
 21849                                  ; Parser include file
 21850                                  ;*******************************************************************
 21851                                  
 21852                                  ;**** Equation field
 21853                                  ;-------- Character code definition
 21854                                  
 21855                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 21856                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 21857                                  _$P_Period	   equ	"."             ;AN020;
 21858                                  _$P_Slash	   equ	"/"             ;AN020;
 21859                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 21860                                  _$P_Comma	   equ	","             ;AN000;
 21861                                  _$P_Switch	   equ	"/"             ;AN000;
 21862                                  _$P_Keyword	   equ	"="             ;AN000;
 21863                                  _$P_Colon	   equ	":"             ;AN000;
 21864                                  _$P_Plus 	   equ	"+"             ;AN000;
 21865                                  _$P_Minus	   equ	"-"             ;AN000;
 21866                                  _$P_Rparen	   equ	")"             ;AN000;
 21867                                  _$P_Lparen	   equ	"("             ;AN000;
 21868                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 21869                                  _$P_DQuote	   equ	'"'             ;AN000;
 21870                                  _$P_NULL 	   equ	0		;AN000;
 21871                                  _$P_TAB		   equ	9		;AN000;
 21872                                  _$P_CR		   equ	0Dh		;AN000;
 21873                                  _$P_LF		   equ	0Ah		;AN000;
 21874                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 21875                                  
 21876                                  ;-------- Masks
 21877                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 21878                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 21879                                  
 21880                                  ;-------- DOS function call related equs
 21881                                  
 21882                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 21883                                  					; by this call, following information
 21884                                  struc _$P_CDI	
 21885 00000000 ????                     .DateF: resw 1
 21886 00000002 ??????????               .Money: resb 5
 21887 00000007 ????                     .1000:	 resb 2
 21888 00000009 ????                     .Dec:	 resb 2
 21889 0000000B ????                     .DateS: resb 2
 21890 0000000D ????                     .TimeS: resb 2
 21891 0000000F ??                          	 resb 1
 21892 00000010 ??                      	 resb 1
 21893 00000011 ??                       .TimeF: resb 1	 
 21894 00000012 ????????                	 resw 2
 21895 00000016 ????                    	 resb 2
 21896 00000018 <res Ah>                	 resw 5
 21897                                   .size:
 21898                                  endstruc
 21899                                  
 21900                                  _$P_Date_MDY	   equ	0		;AN000;
 21901                                  _$P_Date_DMY	   equ	1		;AN000;
 21902                                  _$P_Date_YMD	   equ	2		;AN000;
 21903                                  ;-------------
 21904                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 21905                                  					;AN000; DS:SI will points to DBCS EV
 21906                                  ;-------------
 21907                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 21908                                  					;AN000; following parameters are set
 21909                                  					;AN000; to get casemap table.
 21910                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 21911                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 21912                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 21913                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 21914                                  					; By this call following information
 21915                                  					; is returned.
 21916                                  struc _$P_DOS_TBL
 21917 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 21918 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 21919 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 21920                                  endstruc
 21921                                  
 21922                                  ; ----------------------------------------------------------------------------
 21923                                  ; PARMS 	LABEL	BYTE
 21924                                  ;		DW	PARMSX
 21925                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 21926                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 21927                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 21928                                  ;					; TYPICAL ARE ";", "="
 21929                                  ;					; "," & WHITESPACE ALWAYS
 21930                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 21931                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 21932                                  ; ----------------------------------------------------------------------------
 21933                                  
 21934                                  ;-------------------------------- PARMS block structure
 21935                                  struc _$P_PARMS_Blk
 21936 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 21937 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 21938 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 21939                                  endstruc
 21940                                  
 21941                                  _$P_Len_PARMS	   equ	4		;AN000;
 21942                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 21943                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 21944                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 21945                                  
 21946                                  ; ----------------------------------------------------------------------------
 21947                                  ; PARMSX	LABEL	BYTE
 21948                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 21949                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 21950                                  ;		:			; REPEATS maxp-1 TIMES
 21951                                  ;		DB	maxs		; # OF SWITCHES
 21952                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 21953                                  ;		:			; REPEATS maxs-1 TIMES
 21954                                  ;		DB	maxk		; # OF KEYWORD
 21955                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 21956                                  ;		:			; REPEATS maxk-1 TIMES
 21957                                  ; ----------------------------------------------------------------------------
 21958                                  
 21959                                  ;-------------------------------- PARMSX block structure
 21960                                  struc _$P_PARMSX_Blk		;AN000;
 21961 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 21962 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 21963 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 21964                                  endstruc
 21965                                  
 21966                                  ; ----------------------------------------------------------------------------
 21967                                  ; << Control field definition  >>
 21968                                  ;
 21969                                  ;
 21970                                  ;CONTROL   LABEL   BYTE
 21971                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 21972                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 21973                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 21974                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 21975                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 21976                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 21977                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 21978                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 21979                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 21980                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 21981                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 21982                                  ;				   ; 0002H=REPEATS ALLOWED
 21983                                  ;				   ; 0001H=OPTIONAL
 21984                                  ;	   DW	   FUNCTION_FLAGS
 21985                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 21986                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 21987                                  ;				   ; 0010H=REMOVE ":" AT END
 21988                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 21989                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 21990                                  ;	   DW	   VALUES	   ; VALUE LISTS
 21991                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 21992                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 21993                                  ;	   :
 21994                                  ;
 21995                                  ;Note:
 21996                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 21997                                  ;      DATE bit simalteniously.
 21998                                  ;
 21999                                  ;      The parser examins each bit along with the following priority.
 22000                                  ;
 22001                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 22002                                  ;      FILE SPEC -> SIMPLE STRING.
 22003                                  ;
 22004                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 22005                                  ;      in the result buffer is capitalized.
 22006                                  ;
 22007                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 22008                                  ;
 22009                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 22010                                  ;      switch, for example, '/A', then STRING points to;
 22011                                  ;
 22012                                  ;			DB    1 	; number of following synonyms
 22013                                  ;			DB   '/A',0
 22014                                  ;
 22015                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 22016                                  ;
 22017                                  ;			DB    1 	; number of following synonyms
 22018                                  ;			DB   'CODEPAGE=',0
 22019                                  ;
 22020                                  ;    - "..." must consist of upper case characters only because the parser
 22021                                  ;      performs pattern matching after converting input to upper case (by
 22022                                  ;      using the current country upper case table)
 22023                                  ;
 22024                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 22025                                  ;      example /A and /B, the format will be;
 22026                                  ;
 22027                                  ;			DB    2 	; number of following synonyms
 22028                                  ;			DB    '/A',0
 22029                                  ;			DB    '/B',0
 22030                                  ; ----------------------------------------------------------------------------
 22031                                  
 22032                                  ;**** Match_Flags
 22033                                  
 22034                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 22035                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 22036                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 22037                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 22038                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 22039                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 22040                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 22041                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 22042                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 22043                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 22044                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 22045                                  _$P_Optional	   equ	0001h		;AN000; Optional
 22046                                  
 22047                                  ;**** Function flags
 22048                                  
 22049                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 22050                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 22051                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 22052                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 22053                                  
 22054                                  ;-------------------------------- Control block structure
 22055                                  struc _$P_Control_Blk
 22056 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 22057 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 22058 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 22059 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 22060 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 22061 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 22062                                  endstruc
 22063                                  
 22064                                  ; ----------------------------------------------------------------------------
 22065                                  ; << Value List Definition >>
 22066                                  ;
 22067                                  ;VALUES 	LABEL	BYTE
 22068                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 22069                                  ;	     +-
 22070                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 22071                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 22072                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 22073                                  ;	     |	:
 22074                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 22075                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 22076                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 22077                                  ;	     |	:
 22078                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 22079                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 22080                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 22081                                  ;	     +-	:
 22082                                  ;
 22083                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 22084                                  ;
 22085                                  ;Note:
 22086                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 22087                                  ;      when no choice lists are provided.
 22088                                  ;
 22089                                  ;    - STRING must consist of upper case characters only because the parser
 22090                                  ;      performs pattern matching after converting input to upper case (by
 22091                                  ;      using the current country upper case table)
 22092                                  ; ----------------------------------------------------------------------------
 22093                                  
 22094                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 22095                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 22096                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 22097                                  _$P_nval_String	   equ	3		;AN000; string list ID
 22098                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 22099                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 22100                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 22101                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 22102                                  
 22103                                  struc _$P_Val_List
 22104 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 22105 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 22106 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 22107 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 22108 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 22109                                  endstruc
 22110                                  
 22111                                  ; ----------------------------------------------------------------------------
 22112                                  ; << Result Buffer Definition  >>
 22113                                  ;
 22114                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 22115                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 22116                                  ;						;	1=NUMBER, 2=LIST INDEX,
 22117                                  ;						;	3=STRING, 4=COMPLEX,
 22118                                  ;						;	5=FILESPEC, 6=DRIVE
 22119                                  ;						;	7=DATE, 8=TIME
 22120                                  ;						;	9=QUOTED STRING
 22121                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 22122                                  ;
 22123                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 22124                                  ;
 22125                                  ;            +-
 22126                                  ;	    | DD	n			; VALUE IF NUMBER
 22127                                  ;	    | or
 22128                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 22129                                  ;	    |					; (ES presents Segment address)
 22130                                  ;	    | or
 22131                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 22132                                  ;	    | or
 22133                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 22134                                  ;	    | or
 22135                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 22136                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 22137                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 22138                                  ;	    | or
 22139                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 22140                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 22141                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 22142                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 22143                                  ;	    +-
 22144                                  ;
 22145                                  ;
 22146                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 22147                                  ;      list.
 22148                                  ;
 22149                                  ;      YEAR: If the input value for the year is less than 100, parser
 22150                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 22151                                  ;	     the year value, he returns 1987.
 22152                                  ; ----------------------------------------------------------------------------
 22153                                  
 22154                                  ;-------------------------------- Result block structure
 22155                                  struc _$P_Result_Blk
 22156 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 22157 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 22158 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 22159 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 22160                                  endstruc
 22161                                  
 22162                                  ;--------------------------------
 22163                                  ;**** values for the type field in the result block
 22164                                  
 22165                                  _$P_EOL		   equ	0		;AN000; End of line
 22166                                  _$P_Number	   equ	1		;AN000; Number
 22167                                  _$P_List_Idx	   equ	2		;AN000; List Index
 22168                                  _$P_String	   equ	3		;AN000; String
 22169                                  _$P_Complex	   equ	4		;AN000; Complex
 22170                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 22171                                  _$P_Drive	   equ	6		;AN000; Drive
 22172                                  _$P_Date_F	   equ	7		;AN000; Date
 22173                                  _$P_Time_F	   equ	8		;AN000; Time
 22174                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 22175                                  
 22176                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 22177                                  
 22178                                  ;**** Return code
 22179                                  ;
 22180                                  ; following return code will be returned in the AX register.
 22181                                  
 22182                                  _$P_No_Error	   equ	0		;AN000; No error
 22183                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 22184                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 22185                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 22186                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 22187                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 22188                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 22189                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 22190                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 22191                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 22192                                  
 22193                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 22194                                  
 22195                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 22196                                  
 22197                                  ;********************** Local Data *************************************
 22198 0000143B 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 22199 0000143D 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 22200 0000143F 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 22201 00001441 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 22202 00001443 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 22203 00001444 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 22204 00001446 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 22205 00001448 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 22206                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 22207                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 22208                                  
 22209                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 22210                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 22211                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 22212                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 22213                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 22214                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 22215                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 22216                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 22217                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 22218                                  
 22219                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 22220                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 22221                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 22222                                  
 22223 0000144A 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 22224 0000144C 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 22225 0000144E 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 22226 00001450 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 22227                                  
 22228 00001452 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 22229                                  _$P_STRING_BUF_END equ	$		;AN000;
 22230                                  
 22231                                  ; 25/10/2022
 22232                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 22233                                  
 22234 000014D2 FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 22235 000014D3 0000                    		   dw	0		;AN000; offset	of char case map table
 22236 000014D5 0000                    		   dw	0		;AN000; segment of char case map table
 22237                                  ; 25/10/2022
 22238                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 22239                                  ;		   dw	0		;AN000; offset	of file case map table
 22240                                  ;		   dw	0		;AN000; segment of file case map table
 22241                                  
 22242                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 22243                                  ;
 22244                                  
 22245                                  ;M029
 22246                                  ;!!!WARNING!!!
 22247                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 22248                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 22249                                  ;changes need to be made in SYSPARSE
 22250                                  
 22251                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 22252                                  
 22253                                  ; 25/10/2022
 22254                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 22255                                  
 22256 000014D7 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 22257                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 22258                                  
 22259                                  ;ENDIF					;AN000;(of FileSW)
 22260                                  
 22261                                  ; delimiter parsing
 22262                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 22263                                  _$P_period_only	   equ	02h		;AN032; check only for period
 22264                                  
 22265                                  ;filespec error flag
 22266 000014E0 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 22267                                  					;AN033;  was detected.
 22268                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 22269                                  
 22270                                  
 22271                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 22272                                  ; ======================================================================
 22273                                  ; 27/03/2019 - Retro DOS v4.0
 22274                                  
 22275                                  ;***********************************************************************
 22276                                  ; SysParse;
 22277                                  ;
 22278                                  ;  Function : Parser Entry
 22279                                  ;
 22280                                  ;  Input: DS:SI -> command line
 22281                                  ;	  ES:DI -> parameter block
 22282                                  ;	  cs -> psdata.inc
 22283                                  ;	  CX = operand ordinal
 22284                                  ;
 22285                                  ;	  Note:  ES is the segment containing all the control blocks defined
 22286                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 22287                                  ;		 is in DS.
 22288                                  ;
 22289                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 22290                                  ;		    invalid value list. But this parser does NOT implement
 22291                                  ;		    this feature. Therefore CY always zero.
 22292                                  ;
 22293                                  ;	   CY = 0   AX = return code
 22294                                  ;		    BL = terminated delimiter code
 22295                                  ;		    CX = new operand ordinal
 22296                                  ;		    SI = set past scaned operand
 22297                                  ;		    DX = selected result buffer
 22298                                  ;
 22299                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 22300                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 22301                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 22302                                  ;
 22303                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 22304                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 22305                                  ;
 22306                                  ;-------- Modification History -----------------------------------------
 22307                                  ;
 22308                                  ;  4/04/87 : Created by K. K,
 22309                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 22310                                  ;	   : JMP SHORT assemble error (tm02)
 22311                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 22312                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 22313                                  ;	     DateSW equ 1)	      (tm04)
 22314                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 22315                                  ;				      (tm05) in PSDATA.INC
 22316                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 22317                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 22318                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 22319                                  ;	     value-list block	      (tm07)
 22320                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 22321                                  ;	     switch (keyword) or not. If there is, backup si for next call
 22322                                  ;	     (tm08)
 22323                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 22324                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 22325                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 22326                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 22327                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 22328                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 22329                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 22330                                  ;					  (tm12)
 22331                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 22332                                  ;					  (tm13)
 22333                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 22334                                  ;					  (tm14)
 22335                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 22336                                  ;					  (tm15)
 22337                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 22338                                  
 22339                                  ;  7/24/87 : Quoted strings being returned with quotes.
 22340                                  
 22341                                  ;  7/28/87 : Kerry S (;AN018;)
 22342                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 22343                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 22344                                  ;	     affected: _$P_Chk_SW_Control.
 22345                                  
 22346                                  ;  7/29/87 : Kerry S (;AN019;)
 22347                                  ;	     Now allow the optional bit in match flags for switches.  This
 22348                                  ;	     allows the switch to be encountered with a value or without a
 22349                                  ;	     value and no error is returned.
 22350                                  ;
 22351                                  
 22352                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 22353                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 22354                                  ;	     within a date response, instead of checking just for the one
 22355                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 22356                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 22357                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 22358                                  
 22359                                  ;  9/1/87  : Kerry S (;AN021)
 22360                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 22361                                  ;	     the command line with the string in the control block the
 22362                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 22363                                  ;	     on the command line and assuming a match.	This allowed a shorter
 22364                                  ;	     string on the command line than in the synonym list in the control
 22365                                  ;	     block.  I put in a test for a null in the control block so the
 22366                                  ;	     string in the control block must be the same length as the string
 22367                                  ;	     preceeding the colon or equal on the command line.
 22368                                  
 22369                                  ;  8/28/87 : Kerry S (;AN022;)
 22370                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 22371                                  ;	     problems for people who included it themselves in a segment other
 22372                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 22373                                  ;	     segment.
 22374                                  
 22375                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 22376                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 22377                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 22378                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 22379                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 22380                                  ;	     BL be used if TIME is being parsed.
 22381                                  
 22382                                  ;  9/24/87 : Ed K
 22383                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 22384                                  ;	     invocations with their normally expanded code; made comments
 22385                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 22386                                  
 22387                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 22388                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 22389                                  ;	     pointed to by non-existant CONTROL.
 22390                                  
 22391                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 22392                                  ;	     A quoted text string can be framed only by double quote.  Remove
 22393                                  ;	     support to frame quoted text string with single quote.
 22394                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 22395                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 22396                                  ;	     single quote in PROC prologues are left as is for history reasons.
 22397                                  
 22398                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 22399                                  ;	     quote chars within a quoted string is supposed to be reported as
 22400                                  ;	     one quote character, but is reported as two quotes.  This changed
 22401                                  ;	     two instructions in PROC _$P_Quoted_Str.
 22402                                  
 22403                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 22404                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 22405                                  
 22406                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 22407                                  
 22408                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 22409                                  ;	     psdata buffer should have cs.
 22410                                  
 22411                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 22412                                  ;	     positional missing.
 22413                                  
 22414                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 22415                                  ;	     as a line delimiter, should use carriage return.
 22416                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 22417                                  
 22418                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 22419                                  
 22420                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 22421                                  ;	     endless loop since SI is returned still pointing to start
 22422                                  ;	     of that parm.
 22423                                  
 22424                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 22425                                  ;	     Vector to returned string has CS instead of cs, but
 22426                                  ;	     when tried to fix it on previous version, changed similar
 22427                                  ;	     but wrong place.
 22428                                  
 22429                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 22430                                  ;	     delimiters between hours, minutes, seconds for time. And period
 22431                                  ;	     and comma are valid delimiters between seconds and 100th second.
 22432                                  
 22433                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 22434                                  ;	     in a filespec, then flag an error.
 22435                                  
 22436                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 22437                                  ;	     indexed off of the cs equate instead of the DS register.
 22438                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 22439                                  ;  -->	     local parser data. Why were some references to local data changed
 22440                                  ;	     to do this before, but not all ?????
 22441                                  
 22442                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 22443                                  
 22444                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 22445                                  ;
 22446                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 22447                                  
 22448                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 22449                                  
 22450                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 22451                                  ;	     separator in TIME before hundredths field.
 22452                                  ;
 22453                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 22454                                  ;			strings as keywords.
 22455                                  ;
 22456                                  ;***********************************************************************
 22457                                  
 22458                                  ;IF FarSW				;AN000;(Check if need far return)
 22459                                  ;SysParse proc far			;AN000;
 22460                                  ;ELSE					;AN000;
 22461                                  ;SysParse proc near			;AN000;
 22462                                  ;ENDIF					;AN000;(of FarSW)
 22463                                  
 22464                                  ; 27/03/2019 - Retro DOS v4.0
 22465                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 22466                                  
 22467                                  ; 25/10/2022 - Retro DOS v4.0
 22468                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 22469                                  
 22470                                  SysParse:
 22471 000014E1 2EC706[4814]0000        	mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 22472 000014E8 FC                      	cld				;AN000; confirm forward direction
 22473 000014E9 2E890E[3B14]            	mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 22474 000014EE 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 22475 000014F5 2EC706[5014]0000        	mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 22476                                  
 22477 000014FC 2EC706[4114]0000        	mov	word [cs:_$P_DX],0	;AC034; (tm15)
 22478                                  
 22479                                  ;M029 -- Begin changes
 22480                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 22481                                  ;entry to SysParse. This is in the non-checksum region and any program that
 22482                                  ;corrupts this table but does not corrupt the checksum region will leave
 22483                                  ;command.com parsing in an inconsistent state.
 22484                                  ; NB: The special characters string has been hardcoded here. If any change
 22485                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 22486                                  
 22487                                  ;IF FileSW + DrvSW
 22488 00001503 2EC706[D714]5D5B        	mov	word [cs:_$P_FileSp_Char], ']['
 22489 0000150A 2EC706[D914]3C7C        	mov	word [cs:_$P_FileSp_Char+2], '<|'
 22490 00001511 2EC706[DB14]2B3E        	mov	word [cs:_$P_FileSp_Char+4], '+>'
 22491 00001518 2EC706[DD14]3B3D        	mov 	word [cs:_$P_FileSp_Char+6], ';='
 22492                                  ;ENDIFtHHH
 22493                                  
 22494                                  ;M029 -- End of changes
 22495                                  
 22496 0000151F E8BC06                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 22497 00001522 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 22498                                  ;--------------------------- End of Line
 22499 00001524 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 22500 00001527 53                      	push	bx			;AN000;
 22501                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 22502                                  					;AN000; Get the PARMSX address to
 22503 00001528 268B1D                  	mov	bx,[es:di]
 22504                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 22505                                  					;AN000; check ORDINAL to see if the minimum
 22506 0000152B 263A0F                  	cmp	cl,[es:bx]	
 22507 0000152E 7303                    	jae	short _$P_Fin		;AN000; positional found.
 22508                                  
 22509 00001530 B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 22510                                  _$P_Fin: 				;AN000;
 22511 00001533 5B                      	pop	bx			;AN000;
 22512 00001534 E92301                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 22513                                  ;---------------------------
 22514                                  _$P_Start:				;AN000;
 22515 00001537 2E8936[4A14]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 22516 0000153C 53                      	push	bx			;AN000; quoted string or file spec.
 22517 0000153D 57                      	push	di			;AN000;
 22518 0000153E 55                      	push	bp			;AN000;
 22519                                  	;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 22520                                  	; 02/11/2022
 22521 0000153F 8D1E[5214]              	lea	bx,[_$P_STRING_BUF]
 22522 00001543 2EF606[4914]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 22523 00001549 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 22524                                  
 22525                                  _$P_Pack_Loop:				;AN000;
 22526 0000154B AC                      	lodsb				;AN000; Pick a operand from buffer
 22527 0000154C E84907                  	call	_$P_Chk_Switch		;AN000; Check switch character
 22528 0000154F 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 22529                                  
 22530 00001551 E8AD06                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 22531 00001554 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 22532                                  
 22533 00001556 E8DE06                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 22534 00001559 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 22535                                  
 22536 0000155B 2EF606[4914]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 22537                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 22538 00001561 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 22539                                  
 22540 00001563 E87806                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 22541 00001566 EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 22542                                  
 22543                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 22544 00001568 2EF606[4914]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 22545 0000156E 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 22546                                  
 22547 00001570 4E                      	dec	si			;AN000; (tm08)
 22548 00001571 EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 22549                                  
 22550                                  _$P_PL01:				;AN000;
 22551 00001573 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 22552 00001576 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 22553 00001578 7506                    	jne	short _$P_PL00 		;AN000; then
 22554                                  
 22555 0000157A 2E800E[4914]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 22556                                  _$P_PL00:				;AN000;
 22557 00001580 43                      	inc	bx			;AN000; ready to see next byte
 22558 00001581 E82E07                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 22559 00001584 73C5                    	jnc	_$P_Pack_Loop		;AN000; if no, process to next byte
 22560                                  
 22561 00001586 AC                      	lodsb				;AN000; if yes, store
 22562 00001587 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 22563 0000158A 43                      	inc	bx			;AN000; update pointer
 22564 0000158B EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 22565                                  
 22566                                  _$P_Pack_End_BY_EOL:			;AN000;
 22567 0000158D 4E                      	dec	si			;AN000; backup si pointer
 22568                                  _$P_Pack_End:				;AN000;
 22569 0000158E 2E8936[3F14]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 22570 00001593 2EC60700                	mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 22571 00001597 2E891E[4E14]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 22572                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 22573 0000159C 268B1D                  	mov	bx,[es:di]
 22574                                  	;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 22575                                  	; 02/11/2022
 22576 0000159F 8D36[5214]              	lea	si,[_$P_STRING_BUF]
 22577 000015A3 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 22578 000015A7 7436                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 22579                                  
 22580 000015A9 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 22581 000015AD 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 22582                                  
 22583 000015AF 2EF606[4914]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 22584 000015B5 7554                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 22585                                  
 22586                                  _$P_Positional_Manager:			;AN000; else process as positional
 22587 000015B7 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22588 000015BB 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22589 000015BD 2E3906[3B14]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 22590 000015C2 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 22591                                  
 22592 000015C4 2EA1[3B14]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 22593 000015C8 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 22594 000015CA 43                      	inc	bx			;AC035; add '2' to
 22595 000015CB 43                      	inc	bx			;AC035;  BX reg
 22596                                  					;AN000; now bx points to 1st CONTROL
 22597 000015CC 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 22598 000015CE 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 22599 000015D1 E88800                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 22600 000015D4 EB69                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22601                                  
 22602                                  _$P_Too_Many_Error:			;AN000;
 22603 000015D6 2EC706[3D14]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 22604 000015DD EB60                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22605                                  
 22606                                  _$P_SW_Manager:				;AN000;
 22607 000015DF 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22608 000015E3 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22609 000015E5 40                      	inc	ax			;AN000;
 22610 000015E6 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22611 000015E8 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22612 000015EA 268A0F                  	mov	cl,[es:bx]		;AN000;
 22613 000015ED 30ED                    	xor	ch,ch			;AN000; cx = maxs
 22614 000015EF 09C9                    	or	cx,cx			;AN000; at least one switch ?
 22615 000015F1 740F                    	jz	short _$P_SW_Not_Found 	;AN000;
 22616                                  
 22617 000015F3 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 22618                                  
 22619                                  _$P_SW_Mgr_Loop: 			;AN000;
 22620 000015F4 53                      	push	bx			;AN000;
 22621 000015F5 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 22622 000015F8 E8C400                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 22623 000015FB 5B                      	pop	bx			;AN000;
 22624 000015FC 7341                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 22625                                  
 22626 000015FE 43                      	inc	bx			;AC035; add '2' to
 22627 000015FF 43                      	inc	bx			;AC035;  BX reg
 22628                                  					;AN000; else bx points to the next CONTROL
 22629 00001600 E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 22630                                  
 22631                                  _$P_SW_Not_Found:			;AN000;
 22632 00001602 2EC706[3D14]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 22633 00001609 EB34                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 22634                                  
 22635                                  _$P_Key_Manager: 			;AN000;
 22636 0000160B 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22637 0000160F 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22638 00001611 40                      	inc	ax			;AN000;
 22639 00001612 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22640 00001614 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22641 00001616 268A07                  	mov	al,[es:bx]		;AN000;
 22642 00001619 30E4                    	xor	ah,ah			;AN000; ax = maxs
 22643 0000161B D1E0                    	shl	ax,1			;AN000;
 22644 0000161D 40                      	inc	ax			;AN000; ax = ax*2+1
 22645 0000161E 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 22646 00001620 268A0F                  	mov	cl,[es:bx]		;AN000;
 22647 00001623 30ED                    	xor	ch,ch			;AN000; cx = maxk
 22648 00001625 09C9                    	or	cx,cx			;AN000; at least one keyword ?
 22649 00001627 740F                    	je	short _$P_Key_Not_Found	;AN000;
 22650                                  
 22651 00001629 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 22652                                  
 22653                                  _$P_Key_Mgr_Loop:			;AN000;
 22654 0000162A 53                      	push	bx			;AN000;
 22655 0000162B 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 22656 0000162E E85B00                  	call	_$P_Chk_Key_Control	;AN000; do process for keyword
 22657 00001631 5B                      	pop	bx			;AN000;
 22658 00001632 730B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 22659                                  
 22660 00001634 43                      	inc	bx			;AC035; add '2' to
 22661 00001635 43                      	inc	bx			;AC035;  BX reg
 22662                                  					;AN000; else bx points to the next CONTROL
 22663 00001636 E2F2                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 22664                                  
 22665                                  _$P_Key_Not_Found:			;AN000;
 22666 00001638 2EC706[3D14]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 22667                                  _$P_Return_to_Caller:			;AN000;
 22668 0000163F 5D                      	pop	bp			;AN000;
 22669 00001640 5F                      	pop	di			;AN000;
 22670 00001641 5B                      	pop	bx			;AN000;
 22671 00001642 2E8B0E[3B14]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 22672 00001647 2EA1[3D14]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 22673 0000164B 2E8B36[3F14]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 22674 00001650 2E8B16[4114]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 22675 00001655 2E8A1E[4314]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 22676                                  _$P_Single_Exit: 			;AN000;
 22677 0000165A F8                      	clc				;AN000;
 22678 0000165B C3                      	retn				;AN000;
 22679                                  
 22680                                  ;***********************************************************************
 22681                                  ; _$P_Chk_Pos_Control
 22682                                  ;
 22683                                  ; Function: Parse CONTROL block for a positional
 22684                                  ;
 22685                                  ; Input:     ES:BX -> CONTROL block
 22686                                  ;	     cs:SI -> _$P_STRING_BUF
 22687                                  ;
 22688                                  ; Output:    None
 22689                                  ;
 22690                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 22691                                  ;
 22692                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 22693                                  ;***********************************************************************
 22694                                  
 22695                                  _$P_Chk_Pos_Control:
 22696 0000165C 50                      	push	ax			;AN000;
 22697                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 22698 0000165D 268B07                  	mov	ax,[es:bx]
 22699                                  	; 12/12/2022
 22700 00001660 A802                    	test	al,_$P_Repeat
 22701                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 22702 00001662 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 22703                                  
 22704 00001664 2EFF06[3B14]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 22705                                  _$P_CPC00:				;AN000;
 22706 00001669 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 22707 0000166D 7518                    	jne	short _$P_CPC01		;AN000;
 22708                                  
 22709                                  	; 12/12/2022
 22710 0000166F A801                    	test	al,_$P_Optional
 22711                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 22712 00001671 7509                    	jnz	short _$P_CPC02		;AN000;
 22713                                  
 22714 00001673 2EC706[3D14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 22715 0000167A EB0E                    	jmp	short _$P_CPC_Exit	;AN000;
 22716                                  
 22717                                  _$P_CPC02:				;AN000;
 22718 0000167C 50                      	push	ax			;AN000;
 22719 0000167D B003                    	mov	al,_$P_String		;AN000; if it is optional return NULL
 22720 0000167F B4FF                    	mov	ah,_$P_No_Tag		;AN000; no item tag indication
 22721 00001681 E89B00                  	call	_$P_Fill_Result		;AN000;
 22722 00001684 58                      	pop	ax			;AN000;
 22723 00001685 EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 22724                                  
 22725                                  _$P_CPC01:				;AN000;
 22726 00001687 E81A01                  	call	_$P_Check_Match_Flags	;AN000;
 22727                                  _$P_CPC_Exit:				;AN000;
 22728 0000168A 58                      	pop	ax			;AN000;
 22729 0000168B C3                      	retn				;AN000;
 22730                                  
 22731                                  ;***********************************************************************
 22732                                  ; _$P_Chk_Key_Control
 22733                                  ;
 22734                                  ; Function: Parse CONTROL block for a keyword
 22735                                  ;
 22736                                  ; Input:     ES:BX -> CONTROL block
 22737                                  ;	     cs:SI -> _$P_STRING_BUF
 22738                                  ;
 22739                                  ; Output:    CY = 1 : not match
 22740                                  ;
 22741                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 22742                                  ;
 22743                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 22744                                  ;***********************************************************************
 22745                                  
 22746                                  _$P_Chk_Key_Control:
 22747 0000168C F9                      	stc				;AN000; this logic works when the KeySW
 22748 0000168D C3                      	retn				;AN000; is reset.
 22749                                  
 22750                                  ;***********************************************************************
 22751                                  ; _$P_Search_KEYorSW:
 22752                                  ;
 22753                                  ; Function: Seach specified keyword or switch from CONTROL
 22754                                  ;
 22755                                  ; Input:     ES:BX -> CONTROL block
 22756                                  ;	     cs:SI -> _$P_STRING_BUF
 22757                                  ;
 22758                                  ; Output:    CY = 1 : not match
 22759                                  ;
 22760                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 22761                                  ;***********************************************************************
 22762                                  
 22763                                  	; 25/10/2022 - Retro DOS v4.0
 22764                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 22765                                  
 22766                                  _$P_Search_KEYorSW:			;AN000;
 22767 0000168E 55                      	push	bp			;AN000;
 22768 0000168F 51                      	push	cx			;AN000;
 22769 00001690 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 22770 00001694 30ED                    	xor	ch,ch			;AN000; and set it to cx
 22771 00001696 09C9                    	or	cx,cx			;AN000; No synonyms specified ?
 22772 00001698 740D                    	jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 22773                                  
 22774                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 22775                                  	; 25/10/2022
 22776 0000169A 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 22777                                  	;lea	bp,[bx+9]
 22778                                  _$P_KEYorSW_Loop:			;AN000;
 22779 0000169D E8D803                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 22780 000016A0 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 22781                                  
 22782 000016A2 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 22783 000016A5 E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 22784                                  _$P_KEYorSW_Not_Found:			;AN000;
 22785 000016A7 F9                      	stc				;AN000; indicate not found in synonym list
 22786 000016A8 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 22787                                  
 22788                                  _$P_KEYorSW_Found:			;AN000;
 22789 000016AA 2E892E[5014]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 22790 000016AF F8                      	clc				;AN000; indicate found
 22791                                  _$P_KEYorSW_Exit:			;AN000;
 22792 000016B0 59                      	pop	cx			;AN000;
 22793 000016B1 5D                      	pop	bp			;AN000;
 22794 000016B2 C3                      	retn				;AN000;
 22795                                   
 22796                                  ;***********************************************************************
 22797                                  ; _$P_MoveBP_NUL
 22798                                  ;***********************************************************************
 22799                                  
 22800                                  _$P_MoveBP_NUL:
 22801                                  _$P_MBP_Loop:				;AN000;
 22802                                  	; 11/12/2022
 22803 000016B3 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 22804                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22805                                  	; (SYSINIT:18DBh)
 22806                                   	;cmp     byte [es:bp+0],0
 22807 000016B8 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 22808                                  
 22809 000016BA 45                      	inc	bp			;AN000; until
 22810 000016BB EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 22811                                  
 22812                                  _$P_MBP_Exit:				;AN000;
 22813 000016BD 45                      	inc	bp			;AN000; bp points to next to NULL
 22814 000016BE C3                      	retn				;AN000;
 22815                                  
 22816                                  ;***********************************************************************
 22817                                  ; _$P_Chk_SW_Control
 22818                                  ;
 22819                                  ; Function: Parse CONTROL block for a switch
 22820                                  ;
 22821                                  ; Input:     ES:BX -> CONTROL block
 22822                                  ;	     cs:SI -> _$P_STRING_BUF
 22823                                  ;
 22824                                  ; Output:    CY = 1 : not match
 22825                                  ;
 22826                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 22827                                  ;
 22828                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 22829                                  ;***********************************************************************
 22830                                  
 22831                                  _$P_Chk_SW_Control:
 22832                                  
 22833                                  ;IF SwSW				;AN000;(Check if switch is supported)
 22834                                  	;or	byte [cs:_$P_Flags+1],10h
 22835 000016BF 2E800E[4914]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 22836 000016C5 E8C6FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 22837 000016C8 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 22838                                  
 22839                                  	;and	[cs:_$P_Flags+],0EFh
 22840 000016CA 2E8026[4914]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 22841                                  					;AC034; reset the indicator previously set
 22842 000016D0 50                      	push	ax			;AN000; 	      /switch:
 22843 000016D1 2EA1[4C14]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 22844 000016D5 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 22845 000016D7 2E0106[4A14]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 22846 000016DC 58                      	pop	ax			;AN000;
 22847                                  
 22848 000016DD 2E8B36[4C14]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 22849 000016E2 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 22850 000016E6 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 22851                                  
 22852 000016E8 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 22853 000016ED 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 22854                                  
 22855 000016EF 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 22856 000016F6 EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 22857                                  
 22858                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 22859                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 22860 000016F8 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 22861 000016FC 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 22862                                  
 22863                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 22864                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 22865                                  	;test	word [es:bx],1
 22866                                  	; 12/12/2022
 22867                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 22868 000016FE 26F60701                	test	byte [es:bx],_$P_Optional
 22869 00001702 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 22870                                  
 22871 00001704 2EC706[3D14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 22872 0000170B EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 22873                                  
 22874                                  _$P_CSW00:				;AN000;
 22875 0000170D E89400                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 22876 00001710 F8                      	clc				;AN000; indicate match
 22877                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 22878                                  	; 12/12/2022
 22879 00001711 C3                      	retn
 22880                                  
 22881                                  _$P_Chk_SW_Err0: 			;AN000;
 22882 00001712 F9                      	stc				;AN000; not found in switch synonym list
 22883                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 22884                                  	; 12/12/2022
 22885 00001713 C3                      	retn	
 22886                                  
 22887                                  _$P_Chk_SW_Exit: 			;AN000;
 22888 00001714 50                      	push	ax			;AN000;
 22889 00001715 B003                    	mov	al,_$P_String		;AN000; set
 22890 00001717 B4FF                    	mov	ah,_$P_No_Tag		;AN000;    result
 22891 00001719 E80300                  	call	_$P_Fill_Result		;AN000; 	 buffer
 22892 0000171C 58                      	pop	ax			;AN000;
 22893 0000171D F8                      	clc				;AN000;
 22894                                  _$P_Chk_SW_Single_Exit:			;AN000;
 22895 0000171E C3                      	retn				;AN000;
 22896                                  ;ELSE					;AN000;(of IF SwSW)
 22897                                  ;	stc				;AN000; this logic works when the SwSW
 22898                                  ;	retn				;AN000; is reset.
 22899                                  
 22900                                  ;***********************************************************************
 22901                                  ; _$P_Fill_Result
 22902                                  ;
 22903                                  ; Function: Fill the result buffer
 22904                                  ;
 22905                                  ; Input:    AH = Item tag
 22906                                  ;	    AL = type
 22907                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 22908                                  ;		  AL = 2: DX has index(offset) into value list
 22909                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 22910                                  ;		  AL = 7: DX has year, CL has month and CH has date
 22911                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 22912                                  ;			  amd CH has hundredths
 22913                                  ;		  AL = else: cs:SI points to returned string buffer
 22914                                  ;	    ES:BX -> CONTROL block
 22915                                  ;
 22916                                  ; Output:   None
 22917                                  ;
 22918                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 22919                                  ;
 22920                                  ; Vars: _$P_DX(W)
 22921                                  ;***********************************************************************
 22922                                  
 22923                                  _$P_Fill_Result:
 22924 0000171F 57                      	push	di			;AN000;
 22925 00001720 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 22926                                  					;AN000; di points to result buffer
 22927 00001724 2E893E[4114]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 22928 00001729 268805                  	mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 22929 0000172C 26886501                	mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 22930 00001730 50                      	push	ax			;AN000;
 22931 00001731 2EA1[5014]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 22932 00001735 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 22933                                  					;AN000;   then set it to the result
 22934 00001739 58                      	pop	ax			;AN000;
 22935                                  _$P_RLT04:				;AN000;
 22936 0000173A 3C01                    	cmp	al,_$P_Number		;AN000; if number
 22937 0000173C 750A                    	jne	short _$P_RLT00		;AN000;
 22938                                  
 22939                                  _$P_RLT02:				;AN000;
 22940 0000173E 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 22941 00001742 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 22942 00001746 EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 22943                                  
 22944                                  _$P_RLT00:				;AN000;
 22945 00001748 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 22946 0000174A 7506                    	jne	short _$P_RLT01		;AN000;
 22947                                  
 22948 0000174C 26895504                	mov	word [es:di+_$P_Result_Blk.Picked_Val],dx 
 22949                                  					;AN000; then store list index
 22950 00001750 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 22951                                  
 22952                                  _$P_RLT01:				;AN000;
 22953 00001752 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 22954 00001754 74E8                    	je	short _$P_RLT02		;AN000;
 22955                                  
 22956 00001756 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 22957 00001758 74E4                    	je	short _$P_RLT02		;AN000;
 22958                                  
 22959 0000175A 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 22960 0000175C 7506                    	jne	short _$P_RLT03		;AN000;
 22961                                  
 22962 0000175E 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 22963 00001762 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 22964                                  
 22965                                  _$P_RLT03:				;AN000;
 22966 00001764 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 22967 00001766 750F                    	jne	short _$P_RLT05		;AN000;
 22968                                  
 22969 00001768 2EA1[4A14]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 22970 0000176C 40                      	inc	ax			;AN000; skip left Parentheses
 22971 0000176D 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 22972 00001771 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 22973 00001775 EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 22974                                  
 22975                                  _$P_RLT05:				;AN000;
 22976                                  ;------------------------  AL = 3, 5, or 9
 22977 00001777 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 22978                                  					;AN000; store offset of STRING_BUF
 22979 0000177B 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 22980                                  					;AN031; store segment of STRING_BUF
 22981 0000177F 50                      	push	ax			;AN000;
 22982 00001780 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 22983                                  					;AN000; need CAPS by file table?
 22984 00001785 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 22985                                  
 22986 00001787 B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 22987 00001789 EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 22988                                  
 22989                                  _$P_RLT_CAP00:				;AN000;
 22990 0000178B 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 22991                                  					;AN000; need CAPS by char table ?
 22992 00001790 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 22993                                  
 22994 00001792 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 22995                                  _$P_RLT_CAP02:				;AN000;
 22996 00001794 E8E000                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 22997                                  _$P_RLT_CAP01:				;AN000;
 22998 00001797 58                      	pop	ax			;AN000;
 22999 00001798 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 23000                                  					;AN000; removing colon at end ?
 23001 0000179D 7403                    	jz	short _$P_RLT_Exit	;AN000;
 23002                                  
 23003 0000179F E8AF00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 23004                                  _$P_RLT_Exit:				;AN000;
 23005 000017A2 5F                      	pop	di			;AN000;
 23006 000017A3 C3                      	retn				;AN000;
 23007                                  
 23008                                  ;***********************************************************************
 23009                                  ; _$P_Check_Match_Flags
 23010                                  ;
 23011                                  ; Function:  Check the mutch_flags and make the exit code and set the
 23012                                  ;	     result buffer
 23013                                  ;
 23014                                  ;	    Check for types in this order:
 23015                                  ;		Complex
 23016                                  ;		Date
 23017                                  ;		Time
 23018                                  ;		Drive
 23019                                  ;		Filespec
 23020                                  ;		Quoted String
 23021                                  ;		Simple String
 23022                                  ;
 23023                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23024                                  ;	     ES:BX -> CONTROL block
 23025                                  ;
 23026                                  ; Output:    None
 23027                                  ;
 23028                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 23029                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 23030                                  ;	     _$P_Drive_Format
 23031                                  ;***********************************************************************
 23032                                  
 23033                                  	; 25/10/2022 - Retro DOS v4.0
 23034                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 23035                                  
 23036                                  	; 12/12/2022
 23037                                  _$P_Check_Match_Flags:
 23038 000017A4 2EC606[E014]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 23039                                  					;AN033;AC034;; clear filespec error flag.
 23040 000017AA 50                      	push	ax			;AN000;
 23041                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 23042 000017AB 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 23043 000017AE 09C0                    	or	ax,ax			;AC035; test ax for zero
 23044 000017B0 7518                    	jnz	short _$P_Mat		;AN000; (tm12)
 23045 000017B2 50                      	push	ax			;AN000; (tm12)
 23046 000017B3 53                      	push	bx			;AN000; (tm12)
 23047 000017B4 52                      	push	dx			;AN000; (tm12)
 23048 000017B5 57                      	push	di			;AN000; (tm12)
 23049 000017B6 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 23050 000017BD B4FF                    	mov	ah,_$P_No_Tag		;AN000; (tm12)
 23051 000017BF B003                    	mov	al,_$P_String		;AN000; (tm12)
 23052 000017C1 E85BFF                  	call	_$P_Fill_Result		;AN000; (tm12)
 23053 000017C4 5F                      	pop	di			;AN000; (tm12)
 23054 000017C5 5A                      	pop	dx			;AN000; (tm12)
 23055 000017C6 5B                      	pop	bx			;AN000; (tm12)
 23056 000017C7 58                      	pop	ax			;AN000; (tm12)
 23057                                  	; 12/12/2022
 23058                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 23059                                  	; 12/12/2022
 23060                                  ;_$P_Mat: 				;AN000; (tm12)
 23061                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 23062                                  _$P_Bridge:
 23063 000017C8 EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 23064                                  	
 23065                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23066                                  	; (SYSINIT:19F9h)
 23067                                  	; 12/12/2022
 23068                                  	;nop	; db 90h
 23069                                  
 23070                                  ; 12/12/2022
 23071                                  _$P_Mat:
 23072                                  _$P_Match03:				;AN000;
 23073 000017CA A90080                  	test	ax,_$P_Num_Val		;AN000; Numeric value
 23074 000017CD 7412                    	jz	short _$P_Match04	;AN000;
 23075                                  
 23076 000017CF 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23077 000017D6 E82601                  	call	_$P_Value		;AN000; do process
 23078 000017D9 2E833E[3D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23079 000017DF 7557                    	jne	short _$P_Match_Exit	;AN000;
 23080                                  _$P_Match04:				;AN000;
 23081 000017E1 A90040                  	test	ax,_$P_SNum_Val		;AN000; Signed numeric value
 23082 000017E4 7412                    	jz	short _$P_Match05	;AN000;
 23083                                  
 23084 000017E6 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23085 000017ED E8EB00                  	call	_$P_SValue		;AN000; do process
 23086 000017F0 2E833E[3D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23087 000017F6 7540                    	jne	short _$P_Match_Exit	;AN000;
 23088                                  _$P_Match05:				;AN000;
 23089 000017F8 A90001                  	test	ax,_$P_Drv_Only		;AN000; Drive only
 23090 000017FB 7415                    	jz	short _$P_Match06	;AN000;
 23091                                  
 23092 000017FD 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23093 00001804 E80F03                  	call	_$P_File_Format		;AN000; 1st, call file format
 23094 00001807 E89103                  	call	_$P_Drive_Format	;AN000; check drive format, next
 23095 0000180A 2E833E[3D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23096 00001810 7526                    	jne	short _$P_Match_Exit	;AN000;
 23097                                  _$P_Match06:				;AN000;
 23098 00001812 A90002                  	test	ax,_$P_File_Spc		;AN000; File spec
 23099 00001815 7412                    	jz	short _$P_Match07	;AN000;
 23100                                  
 23101 00001817 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23102 0000181E E8F502                  	call	_$P_File_Format		;AN000; do process
 23103 00001821 2E833E[3D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23104 00001827 750F                    	jne	short _$P_Match_Exit	;AN000;
 23105                                  _$P_Match07:				;AN000;
 23106 00001829 A90020                  	test	ax,_$P_Simple_S		;AN000; Simple string
 23107 0000182C 740A                    	jz	short _$P_Match09	;AN000;
 23108                                  
 23109 0000182E 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23110 00001835 E8D701                  	call	_$P_Simple_String	;AN000; do process
 23111                                  _$P_Match09:				;AN000;
 23112                                  _$P_Match_Exit:				;AN000;
 23113 00001838 2E833E[E014]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 23114 0000183E 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23115 00001840 2E833E[3D14]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 23116 00001846 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23117 00001848 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 23118                                  _$P_Match2_Exit: 			;AN033;
 23119 0000184F 58                      	pop	ax			;AN000;
 23120 00001850 C3                      	retn				;AN000;
 23121                                  
 23122                                  ;***********************************************************************
 23123                                  ; _$P_Remove_Colon;
 23124                                  ;
 23125                                  ; Function: Remove colon at end
 23126                                  ;
 23127                                  ; Input:    cs:SI points to string buffer to be examineed
 23128                                  ;
 23129                                  ; Output:   None
 23130                                  ;
 23131                                  ; Use:	_$P_Chk_DBCS
 23132                                  ;***********************************************************************
 23133                                  
 23134                                  _$P_Remove_Colon:
 23135 00001851 50                      	push	ax			;AN000;
 23136 00001852 56                      	push	si			;AN000;
 23137                                  _$P_RCOL_Loop:				;AN000;
 23138 00001853 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23139 00001856 08C0                    	or	al,al			;AN000; end of string ?
 23140 00001858 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 23141                                  
 23142 0000185A 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 23143 0000185C 750D                    	jne	short _$P_RCOL00	;AN000;
 23144                                  
 23145 0000185E 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 23146 00001863 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 23147                                  
 23148 00001865 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 23149 00001869 EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 23150                                  
 23151                                  _$P_RCOL00:				;AN000;
 23152 0000186B E84404                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 23153 0000186E 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 23154                                  
 23155 00001870 46                      	inc	si			;AN000; if yes, skip trailing byte
 23156                                  _$P_RCOL01:				;AN000;
 23157 00001871 46                      	inc	si			;AN000; si points to next byte
 23158 00001872 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 23159                                  
 23160                                  _$P_RCOL_Exit:				;AN000;
 23161 00001874 5E                      	pop	si			;AN000;
 23162 00001875 58                      	pop	ax			;AN000;
 23163 00001876 C3                      	retn				;AN000;
 23164                                  
 23165                                  ;***********************************************************************
 23166                                  ; _$P_Do_CAPS_String;
 23167                                  ;
 23168                                  ; Function: Perform capitalization along with the file case map table
 23169                                  ;	    or character case map table.
 23170                                  ;
 23171                                  ; Input:    AL = 2 : Use character table
 23172                                  ;	    AL = 4 : Use file table
 23173                                  ;	    cs:SI points to string buffer to be capitalized
 23174                                  ;
 23175                                  ; Output:   None
 23176                                  ;
 23177                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 23178                                  ;***********************************************************************
 23179                                  
 23180                                  _$P_Do_CAPS_String:
 23181 00001877 56                      	push	si			;AN000;
 23182 00001878 52                      	push	dx			;AN000;
 23183 00001879 88C2                    	mov	dl,al			;AN000; save info id
 23184                                  
 23185                                  _$P_DCS_Loop:				;AN000;
 23186 0000187B 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 23187 0000187E E83104                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 23188 00001881 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 23189                                  
 23190 00001883 08C0                    	or	al,al			;AN000; end of string ?
 23191 00001885 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 23192                                  
 23193 00001887 E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 23194 0000188A 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 23195 0000188D EB01                    	jmp	short _$P_DCS01		;AN000; process next
 23196                                  _$P_DCS00:				;AN000;
 23197 0000188F 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 23198                                  _$P_DCS01:				;AN000;
 23199 00001890 46                      	inc	si			;AN000; si point to next byte
 23200 00001891 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 23201                                  _$P_DCS_Exit:				;AN000;
 23202 00001893 5A                      	pop	dx			;AN000;
 23203 00001894 5E                      	pop	si			;AN000;
 23204 00001895 C3                      	retn
 23205                                  
 23206                                  ;***********************************************************************
 23207                                  ; _$P_Do_CAPS_Char;
 23208                                  ;
 23209                                  ; Function: Perform capitalization along with the file case map table
 23210                                  ;	    or character case map table.
 23211                                  ;
 23212                                  ; Input:    DL = 2 : Use character table
 23213                                  ;	    DL = 4 : Use file table
 23214                                  ;	    AL = character to be capitalized
 23215                                  ;
 23216                                  ; Output:   None
 23217                                  ;
 23218                                  ; Use:	INT 21h /w AH=65h
 23219                                  ;***********************************************************************
 23220                                  
 23221                                  _$P_Do_CAPS_Char:
 23222 00001896 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 23223 00001898 730C                    	jae	short _$P_DCC_Go	;AN000;
 23224                                  
 23225 0000189A 3C61                    	cmp	al,"a"                  ;AN000; if no,
 23226 0000189C 723C                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 23227                                  
 23228 0000189E 3C7A                    	cmp	al,"z"                  ;AN000;
 23229 000018A0 7738                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 23230                                  
 23231 000018A2 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 23232 000018A4 EB34                    	jmp	short _$P_CAPS_Ret	;AN000;
 23233                                  
 23234                                  _$P_DCC_Go:				;AN000;
 23235 000018A6 53                      	push	bx			;AN000;
 23236 000018A7 06                      	push	es			;AN000;
 23237 000018A8 57                      	push	di			;AN000;
 23238                                  
 23239                                  	;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 23240 000018A9 8D3E[D214]              	lea	di,[_$P_Char_CAP_Ptr]
 23241                                  _$P_DCC00:				;AN000;
 23242 000018AD 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 23243 000018B0 7417                    	je	short _$P_DCC01		;AN000; if no,
 23244                                  
 23245                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 23246                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 23247                                  ; call, regardless of what base register is currently be defined as cs.
 23248                                  
 23249 000018B2 50                      	push	ax			;AN000; get CAPS table thru DOS call
 23250 000018B3 51                      	push	cx			;AN000;
 23251 000018B4 52                      	push	dx			;AN000;
 23252                                  
 23253 000018B5 0E                      	push	cs			;AC036; pass current base seg into
 23254                                  					;(Note: this used to push CS.  BUG...
 23255 000018B6 07                      	pop	es			;AN000;   ES reg, required for
 23256                                  					;get extended country information
 23257 000018B7 B465                    	mov	ah,_$P_DOS_Get_TBL	;AN000; get extended CDI
 23258 000018B9 88D0                    	mov	al,dl			;AN000; upper case table
 23259 000018BB BBFFFF                  	mov	bx,_$P_DOSTBL_Def	;AN000; get active CON
 23260 000018BE B90500                  	mov	cx,_$P_DOSTBL_BL 	;AN000; buffer length
 23261 000018C1 BAFFFF                  	mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 23262                                  					;DI already set to point to buffer
 23263 000018C4 CD21                    	int	21h			;AN000; es:di point to buffer that
 23264                                  					;now has been filled in with info
 23265 000018C6 5A                      	pop	dx			;AN000;
 23266 000018C7 59                      	pop	cx			;AN000;
 23267 000018C8 58                      	pop	ax			;AN000;
 23268                                  
 23269                                  _$P_DCC01:				;AN000;
 23270                                  
 23271                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 23272                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 23273                                  ; regardless of which base reg is currently the cs reg.
 23274                                  
 23275 000018C9 2E8B5D01                	mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 23276 000018CD 2E8E4503                	mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 23277 000018D1 43                      	inc	bx			;AC035; add '2' to
 23278 000018D2 43                      	inc	bx			;AC035;  BX reg
 23279                                  					;AN000; skip length field
 23280 000018D3 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 23281                                  	;xlat	es:[bx] 		;AN000; perform case map
 23282 000018D5 26                      	es
 23283 000018D6 D7                      	xlat
 23284 000018D7 5F                      	pop	di			;AN000;
 23285 000018D8 07                      	pop	es			;AN000;
 23286 000018D9 5B                      	pop	bx			;AN000;
 23287                                  _$P_CAPS_Ret:				;AN000;
 23288 000018DA C3                      	retn				;AN000;
 23289                                  
 23290                                  ;***********************************************************************
 23291                                  ; _$P_Value / _$P_SValue
 23292                                  ;
 23293                                  ; Function:  Make 32bit value from cs:SI and see value list
 23294                                  ;	     and make result buffer.
 23295                                  ;	     _$P_SValue is an entry point for the signed value
 23296                                  ;	     and this will simply call _$P_Value after the handling
 23297                                  ;	     of the sign character, "+" or "-"
 23298                                  ;
 23299                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23300                                  ;	     ES:BX -> CONTROL block
 23301                                  ;
 23302                                  ; Output:    None
 23303                                  ;
 23304                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 23305                                  ;
 23306                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 23307                                  ;***********************************************************************
 23308                                  
 23309                                  	; 26/10/2022 - Retro DOS v4.0
 23310                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 23311                                  
 23312                                  _$P_SValue:				;AN000; when signed value here
 23313 000018DB 50                      	push	ax			;AN000;
 23314 000018DC 2E800E[4914]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 23315 000018E2 2E8026[4914]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 23316 000018E8 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 23317 000018EB 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 23318 000018ED 740A                    	je	short _$P_SVal00	;AN000;
 23319                                  
 23320 000018EF 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 23321 000018F1 7507                    	jne	short _$P_Sval01	;AN000; else
 23322                                  
 23323 000018F3 2E800E[4914]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 23324                                  _$P_SVal00:				;AN000;
 23325 000018F9 46                      	inc	si			;AN000; skip sign char
 23326                                  _$P_Sval01:				;AN000;
 23327 000018FA E80200                  	call	_$P_Value		;AN000; and process value
 23328 000018FD 58                      	pop	ax			;AN000;
 23329 000018FE C3                      	retn
 23330                                  
 23331                                  ;***********************************************************************
 23332                                  
 23333                                  	; 26/10/2022
 23334                                  _$P_Value:				;AN000;
 23335 000018FF 50                      	push	ax			;AN000;
 23336 00001900 51                      	push	cx			;AN000;
 23337 00001901 52                      	push	dx			;AN000;
 23338 00001902 56                      	push	si			;AN000;
 23339 00001903 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 23340 00001905 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 23341 00001907 53                      	push	bx			;AN000; save control pointer
 23342                                  _$P_Value_Loop:				;AN000;
 23343 00001908 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23344 0000190B 08C0                    	or	al,al			;AN000; end of line ?
 23345 0000190D 7442                    	jz	short _$P_Value00	;AN000;
 23346                                  
 23347 0000190F E8F000                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 23348 00001912 7239                    	jc	short _$P_Value_Err0	;AN000;
 23349                                  
 23350 00001914 30E4                    	xor	ah,ah			;AN000;
 23351 00001916 89C5                    	mov	bp,ax			;AN000; save binary number
 23352 00001918 D1E2                    	shl	dx,1			;AN000; to have 2*x
 23353 0000191A D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23354 0000191C E8D100                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23355 0000191F 722C                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23356                                  
 23357 00001921 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 23358 00001923 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 23359 00001925 D1E2                    	shl	dx,1			;AN000; to have 4*x
 23360 00001927 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23361 00001929 E8C400                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23362 0000192C 721F                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23363                                  
 23364 0000192E D1E2                    	shl	dx,1			;AN000; to have 8*x
 23365 00001930 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23366 00001932 E8BB00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23367 00001935 7216                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23368                                  
 23369 00001937 01DA                    	add	dx,bx			;AN000; now have 10*x
 23370 00001939 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 23371 0000193B E8B200                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23372 0000193E 720D                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23373                                  
 23374 00001940 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 23375 00001942 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 23376 00001945 E8A800                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23377 00001948 7203                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23378                                  
 23379 0000194A 46                      	inc	si			;AN000; update pointer
 23380 0000194B EBBB                    	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 23381                                  ;
 23382                                  _$P_Value_Err0:				;AN000;
 23383 0000194D 5B                      	pop	bx			;AN000;
 23384 0000194E E98C00                  	jmp	_$P_Value_Err		;AN000; Bridge
 23385                                  ;
 23386                                  _$P_Value00:				;AN000;
 23387 00001951 5B                      	pop	bx			;AN000; restore control pointer
 23388 00001952 2EF606[4914]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 23389 00001958 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 23390                                  
 23391 0000195A F7D1                    	not	cx			;AN000; +
 23392 0000195C F7D2                    	not	dx			;AN000; |- Make 2's complement
 23393 0000195E 83C201                  	add	dx,1			;AN000; |
 23394 00001961 83D100                  	adc	cx,0			;AN000; +
 23395                                  
 23396                                  _$P_Value01:				;AN000; / nval =0
 23397 00001964 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 23398 00001968 268A04                  	mov	al,[es:si]		;AN000; get nval
 23399 0000196B 3C00                    	cmp	al,_$P_nval_None 	;AN000; no value list ?
 23400 0000196D 7506                    	jne	short _$P_Value02	;AN000;
 23401                                  
 23402 0000196F B001                    	mov	al,_$P_Number		;AN000; Set type
 23403 00001971 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23404 00001973 EB73                    	jmp	short _$P_Value_Exit	;AN000;
 23405                                  
 23406                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 23407                                  	; (SYSINIT:1BA5h)
 23408                                  	; 12/12/2022
 23409                                  	;nop	; db  90h
 23410                                  
 23411                                  _$P_Value02:				;AN000; / nval = 1
 23412                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 23413                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 23414                                  ;(tm07) jne	short _$P_Value03	;AN000;
 23415                                  
 23416 00001975 46                      	inc	si			;AN000;
 23417 00001976 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 23418 00001979 3C00                    	cmp	al,_$P_No_nrng		;AN000; (tm07)
 23419 0000197B 7460                    	je	short _$P_Value03	;AN000; (tm07)
 23420                                  
 23421 0000197D 46                      	inc	si			;AN000; si points to 1st item_tag
 23422                                  _$P_Val02_Loop:				;AN000;
 23423 0000197E 2EF606[4914]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 23424 00001984 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 23425                                  
 23426 00001986 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 23427 0000198A 7236                    	jb	short _$P_Val02_Next	;AN000;
 23428 0000198C 7706                    	ja	short _$P_Val_In	;AN000;
 23429                                  
 23430 0000198E 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 23431 00001992 722E                    	jb	short _$P_Val02_Next	;AN000;
 23432                                  
 23433                                  _$P_Val_In:				;AN000;
 23434 00001994 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 23435 00001998 7728                    	ja	short _$P_Val02_Next	;AN000;
 23436 0000199A 723A                    	jb	short _$P_Val_Found	;AN000;
 23437                                  
 23438 0000199C 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 23439 000019A0 7720                    	ja	short _$P_Val02_Next	;AN000;
 23440                                  
 23441 000019A2 EB32                    	jmp	short _$P_Val_Found	;AN000;
 23442                                  
 23443                                  _$P_Val02_Sign:				;AN000;
 23444 000019A4 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 23445 000019A8 7C18                    	jl	short _$P_Val02_Next	;AN000;
 23446 000019AA 7F06                    	jg	short _$P_SVal_In	;AN000;
 23447                                  
 23448 000019AC 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 23449 000019B0 7C10                    	jl	short _$P_Val02_Next	;AN000;
 23450                                  
 23451                                  _$P_SVal_In:				;AN000;
 23452 000019B2 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 23453 000019B6 7F0A                    	jg	short _$P_Val02_Next	;AN000;
 23454                                  
 23455 000019B8 7C1C                    	jl	short _$P_Val_Found	;AN000;
 23456                                  
 23457 000019BA 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 23458 000019BE 7F02                    	jg	short _$P_Val02_Next	;AN000;
 23459                                  
 23460 000019C0 EB14                    	jmp	short _$P_Val_Found	;AN000;
 23461                                  
 23462                                  _$P_Val02_Next:				;AN000;
 23463 000019C2 83C609                  	add	si,_$P_Len_Range 	;AN000;
 23464 000019C5 FEC8                    	dec	al			;AN000; loop nrng times in AL
 23465 000019C7 75B5                    	jne	short _$P_Val02_Loop	;AN000;
 23466                                  					; / Not found
 23467 000019C9 2EC706[3D14]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 23468 000019D0 B001                    	mov	al,_$P_Number		;AN000;
 23469 000019D2 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23470 000019D4 EB12                    	jmp	short _$P_Value_Exit	;AN000;
 23471                                  
 23472                                  _$P_Val_Found:				;AN000;
 23473 000019D6 B001                    	mov	al,_$P_Number		;AN000;
 23474 000019D8 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 23475 000019DB EB0B                    	jmp	short _$P_Value_Exit	;AN000;
 23476                                  
 23477                                  _$P_Value03:				;AN000; / nval = 2
 23478                                  
 23479                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 23480                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 23481                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 23482                                  ;(tm07) inc	si			;AN000;
 23483                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 23484                                  ;	mov	ah,$P_Len_Range 	;AN000;
 23485                                  ;	mul	ah			;AN000;  Skip nrng field
 23486                                  ;	inc	ax			;AN000;
 23487                                  ;	add	si,ax			;AN000; si points to nnval
 23488                                  ;	mov	al,es:[si]		;AN000; get nnval
 23489                                  ;	inc	si			;AN000; si points to 1st item_tag
 23490                                  ;$P_Val03_Loop:				;AN000;
 23491                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 23492                                  ;	jne	$P_Val03_Next		;AN000;
 23493                                  ;
 23494                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 23495                                  ;	je	$P_Val_Found		;AN000;
 23496                                  ;
 23497                                  ;$P_Val03_Next:				;AN000;
 23498                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 23499                                  ;	dec	al			;AN000; loop nval times in AL
 23500                                  ;	jne	$P_Val03_Loop		;AN000;
 23501                                  ;					;AN000; / Not found
 23502                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 23503                                  ;	mov	al,$P_Number		;AN000;
 23504                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 23505                                  ;	jmp	short $P_Value_Exit	;AN000;
 23506                                  ;
 23507                                  ;ENDIF					;AN000;(of Val2SW)
 23508                                  ;$P_Value04:
 23509                                  
 23510                                  _$P_Value_Err:				;AN000;
 23511 000019DD 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23512 000019E4 B003                    	mov	al,_$P_String		;AN000; Set type
 23513 000019E6 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23514                                  _$P_Value_Exit:				;AN000;
 23515 000019E8 E834FD                  	call	_$P_Fill_Result		;AN000;
 23516 000019EB 5E                      	pop	si			;AN000;
 23517 000019EC 5A                      	pop	dx			;AN000;
 23518 000019ED 59                      	pop	cx			;AN000;
 23519 000019EE 58                      	pop	ax			;AN000;
 23520 000019EF C3                      	retn				;AN000;
 23521                                  
 23522                                  ; 28/03/2019 - Retro DOS v4.0
 23523                                  
 23524                                  ;***********************************************************************
 23525                                  ; _$P_Check_OVF
 23526                                  ;
 23527                                  ; Function:  Check if overflow is occurred with consideration of
 23528                                  ;	     signed or un-signed numeric value
 23529                                  ;
 23530                                  ; Input:     Flag register
 23531                                  ;
 23532                                  ; Output:    CY = 1  :	Overflow
 23533                                  ;
 23534                                  ; Vars:     _$P_Flags(R)
 23535                                  ;***********************************************************************
 23536                                  
 23537                                  	; 26/10/2022
 23538                                  _$P_Check_OVF:
 23539 000019F0 9C                      	pushf				;AN000;
 23540 000019F1 2EF606[4914]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 23541 000019F7 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 23542                                  
 23543 000019F9 9D                      	popf				;AN000; by the CY bit
 23544 000019FA C3                      	retn				;AN000;
 23545                                  
 23546                                  _$P_COVF:				;AN000;
 23547 000019FB 9D                      	popf				;AN000; else,
 23548 000019FC 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 23549                                  
 23550 000019FE F8                      	clc				;AN000; indicate it with CY bit
 23551 000019FF C3                      	retn				;AN000; CY=0 means no overflow
 23552                                  
 23553                                  _$P_COVF00:				;AN000;
 23554 00001A00 F9                      	stc				;AN000; and CY=1 means overflow
 23555 00001A01 C3                      	retn				;AN000;
 23556                                  
 23557                                  ;***********************************************************************
 23558                                  ; _$P_0099;
 23559                                  ;
 23560                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 23561                                  ;
 23562                                  ; Input:     AL = character code
 23563                                  ;
 23564                                  ; Output:    CY = 1 : AL is not number
 23565                                  ;	     CY = 0 : AL contains binary value
 23566                                  ;***********************************************************************
 23567                                  
 23568                                  _$P_0099:
 23569 00001A02 3C30                    	cmp	al,"0"                  ;AN000;
 23570                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23571                                  	; 12/12/2022
 23572 00001A04 7208                    	jb	short _$P_0099Err2  ; cf=1
 23573                                  
 23574 00001A06 3C39                    	cmp	al,"9"                  ;AN000;
 23575 00001A08 7703                    	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23576                                  
 23577 00001A0A 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 23578                                  	; 12/12/2022
 23579                                  	; cf=0	
 23580                                  	;clc				;AN000; indicate no error
 23581 00001A0C C3                      	retn				;AN000;
 23582                                  
 23583                                  _$P_0099Err:				;AN000;
 23584 00001A0D F9                      	stc				;AN000; indicate error
 23585                                  _$P_0099Err2: ; 12/12/2022	
 23586 00001A0E C3                      	retn				;AN000;
 23587                                  
 23588                                  ;***********************************************************************
 23589                                  ; _$P_Simple_String
 23590                                  ;
 23591                                  ; Function:  See value list for the simple string
 23592                                  ;	     and make result buffer.
 23593                                  ;
 23594                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23595                                  ;	     ES:BX -> CONTROL block
 23596                                  ;
 23597                                  ; Output:    None
 23598                                  ;
 23599                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 23600                                  ;
 23601                                  ; Vars: _$P_RC(W)
 23602                                  ;***********************************************************************
 23603                                  
 23604                                  _$P_Simple_String:
 23605 00001A0F 50                      	push	ax			;AN000;
 23606 00001A10 53                      	push	bx			;AN000;
 23607 00001A11 52                      	push	dx			;AN000;
 23608 00001A12 57                      	push	di			;AN000;
 23609 00001A13 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 23610 00001A17 268A05                  	mov	al,[es:di]		;AN000; get nval
 23611 00001A1A 08C0                    	or	al,al			;AN000; no value list ?
 23612 00001A1C 7504                    	jnz	short _$P_Sim00		;AN000; then
 23613                                  
 23614 00001A1E B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23615 00001A20 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 23616                                  
 23617                                  _$P_Sim00:				;AN000;
 23618                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 23619 00001A22 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 23620 00001A24 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 23621                                  
 23622 00001A26 47                      	inc	di			;AN000;
 23623 00001A27 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 23624 00001A2A B409                    	mov	ah,_$P_Len_Range 	;AN000;
 23625 00001A2C F6E4                    	mul	ah			;AN000; Skip nrng field
 23626 00001A2E 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 23627 00001A2F 01C7                    	add	di,ax			;AN000; di points to nnval
 23628 00001A31 268A05                  	mov	al,[es:di]		;AN000; get nnval
 23629 00001A34 B405                    	mov	ah,_$P_Len_Value 	;AN000;
 23630 00001A36 F6E4                    	mul	ah			;AN000; Skip nnval field
 23631 00001A38 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 23632 00001A39 01C7                    	add	di,ax			;AN000; di points to nstrval
 23633 00001A3B 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 23634 00001A3E 47                      	inc	di			;AC035; add '2' to
 23635 00001A3F 47                      	inc	di			;AC035;  DI reg
 23636                                  					;AN000; di points to 1st string in list
 23637                                  _$P_Sim_Loop:				;AN000;
 23638 00001A40 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 23639 00001A43 E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 23640 00001A46 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 23641                                  
 23642 00001A48 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 23643 00001A4B FEC8                    	dec	al			;AN000; loop nstval times in AL
 23644 00001A4D 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 23645                                  					;AN000; / Not found
 23646 00001A4F 2EC706[3D14]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 23647 00001A56 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23648 00001A58 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 23649                                  
 23650                                  _$P_Sim_Found:				;AN000;
 23651 00001A5A 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 23652 00001A5E B002                    	mov	al,_$P_List_Idx		;AN000;
 23653 00001A60 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 23654 00001A63 EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 23655                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 23656                                  _$P_Sim01:				;AN000;
 23657 00001A65 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23658 00001A6C B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23659                                  _$P_Sim_Exit:				;AN000;
 23660 00001A6E B003                    	mov	al,_$P_String		;AN000; Set type
 23661                                  _$P_Sim_Exit0:				;AN000;
 23662 00001A70 E8ACFC                  	call	_$P_Fill_Result		;AN000;
 23663 00001A73 5F                      	pop	di			;AN000;
 23664 00001A74 5A                      	pop	dx			;AN000;
 23665 00001A75 5B                      	pop	bx			;AN000;
 23666 00001A76 58                      	pop	ax			;AN000;
 23667 00001A77 C3                      	retn				;AN000;
 23668                                  
 23669                                  ;***********************************************************************
 23670                                  ; _$P_String_Comp:
 23671                                  ;
 23672                                  ; Function:  Compare two string
 23673                                  ;
 23674                                  ; Input:     cs:SI -> 1st string
 23675                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 23676                                  ;	     ES:BX -> CONTROL block
 23677                                  ;
 23678                                  ; Output:    CY = 1 if not match
 23679                                  ;
 23680                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 23681                                  ;
 23682                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 23683                                  ;***********************************************************************
 23684                                  
 23685                                  _$P_String_Comp:
 23686 00001A78 50                      	push	ax			;AN000;
 23687 00001A79 55                      	push	bp			;AN000;
 23688 00001A7A 52                      	push	dx			;AN000;
 23689 00001A7B 56                      	push	si			;AN000;
 23690 00001A7C B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 23691                                  _$P_SCOM_Loop:				;AN000;
 23692 00001A7E 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 23693 00001A81 E82E02                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 23694 00001A84 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 23695                                  
 23696 00001A86 E80DFE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 23697                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 23698 00001A89 2EF606[4914]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 23699 00001A8F 740D                    	jz	short _$P_SCOM04	;AN000;
 23700                                  
 23701 00001A91 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 23702 00001A93 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 23703                                  
 23704 00001A95 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 23705 00001A9A 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 23706                                  
 23707 00001A9C EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 23708                                  
 23709                                  _$P_SCOM04:				;AN000;
 23710 00001A9E 2EF606[4914]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 23711 00001AA4 740E                    	jz	short _$P_SCOM03	;AN000;
 23712                                  
 23713 00001AA6 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 23714 00001AA8 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 23715                                  
 23716                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23717                                  	;cmp	byte [es:bp+0],_$P_NULL
 23718                                  	; 11/12/2022
 23719 00001AAA 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 23720 00001AAF 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 23721                                  
 23722                                  _$P_SCOM05:				;AN000;   found a match
 23723 00001AB1 46                      	inc	si			;AN000; si points to just after "=" or ":"
 23724 00001AB2 EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 23725                                  
 23726                                  _$P_SCOM03:				;AN000;
 23727                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 23728                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23729                                  	;cmp	al,[es:bp+0]
 23730                                  	; 11/12/2022
 23731 00001AB4 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 23732 00001AB8 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 23733                                  
 23734 00001ABA 08C0                    	or	al,al			;AN000; end of line
 23735 00001ABC 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 23736                                  
 23737                                  	; 12/12/2022
 23738                                  	;inc	si			;AN000; update operand pointer
 23739                                  	;inc	bp			;AN000;    and synonym pointer
 23740                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23741 00001ABE EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 23742                                  
 23743                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 23744                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23745                                  	;cmp	al,[es:bp+0]
 23746                                  	; 11/12/2022
 23747 00001AC0 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 23748 00001AC4 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 23749                                  
 23750 00001AC6 46                      	inc	si			;AN000; else, load next byte
 23751 00001AC7 2E8A04                  	mov	al,[cs:si]		;AN000; and
 23752 00001ACA 45                      	inc	bp			;AN000;
 23753                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23754                                  	;cmp	al,[es:bp+0]
 23755                                  	; 11/12/2022
 23756 00001ACB 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 23757 00001ACF 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 23758                                  
 23759                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23760                                  	; 12/12/2022
 23761                                  _$P_SCOM01:
 23762 00001AD1 46                      	inc	si			;AN000; else update operand pointer
 23763 00001AD2 45                      	inc	bp			;AN000; 		and synonym pointer
 23764                                  ;_$P_SCOM01:				;AN000;
 23765 00001AD3 EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 23766                                  
 23767                                  _$P_SCOM_Differ0:			;AN000;
 23768                                  ;IF SwSW				;AN000;(tm10)
 23769 00001AD5 2EF606[4914]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 23770 00001ADB 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 23771                                  
 23772                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23773                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 23774                                  	; 12/12/2022
 23775 00001ADD 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 23776 00001AE2 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 23777                                  
 23778                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23779                                  	;cmp	byte [es:bp+0],_$P_NULL
 23780                                  	; 11/12/2022
 23781 00001AE4 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 23782                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 23783 00001AE9 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 23784                                  
 23785                                  _$P_not_applicable:			;AN000;(tm10)
 23786                                  ;ENDIF					;AN000;(tm10)
 23787                                  
 23788                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 23789                                  					;AN000; ignore colon option specified ?
 23790                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 23791                                  	; 12/12/2022
 23792 00001AEB 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 23793                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23794                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 23795 00001AEF 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 23796                                  
 23797 00001AF1 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 23798 00001AF3 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 23799                                  
 23800                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23801                                  	;cmp	byte [es:bp+0],_$P_NULL
 23802                                  	; 11/12/2022
 23803 00001AF5 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 23804 00001AFA 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 23805                                  
 23806 00001AFC EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 23807                                  
 23808                                  _$P_SCOM02:				;AN000;
 23809 00001AFE 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 23810 00001B00 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 23811                                  
 23812                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23813                                  	;cmp	byte [es:bp+0],_$P_Colon
 23814                                  	; 11/12/2022
 23815 00001B02 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 23816 00001B07 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 23817                                  
 23818                                  _$P_SCOM_Differ: 			;AN000;
 23819 00001B09 F9                      	stc				;AN000; indicate not found
 23820 00001B0A EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 23821                                  
 23822                                  _$P_SCOM_Same:				;AN000;
 23823                                  	; 12/12/2022
 23824                                  	; cf=0
 23825 00001B0C 2E8936[4C14]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 23826                                  	; 12/12/2022
 23827                                  	;clc				;AN000; indicate found
 23828                                  _$P_SCOM_Exit:				;AN000;
 23829 00001B11 5E                      	pop	si			;AN000;
 23830 00001B12 5A                      	pop	dx			;AN000;
 23831 00001B13 5D                      	pop	bp			;AN000;
 23832 00001B14 58                      	pop	ax			;AN000;
 23833 00001B15 C3                      	retn
 23834                                  
 23835                                  ; 30/03/2019
 23836                                  
 23837                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 23838                                  
 23839                                  ;***********************************************************************
 23840                                  ; _$P_File_Format;
 23841                                  ;
 23842                                  ; Function:  Check if the input string is valid file spec format.
 23843                                  ;	     And set the result buffer.
 23844                                  ;
 23845                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23846                                  ;	     ES:BX -> CONTROL block
 23847                                  ;
 23848                                  ; Output:    None
 23849                                  ;
 23850                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 23851                                  ;
 23852                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 23853                                  ;	_$P_SaveSI_Cmpx(R)
 23854                                  ;***********************************************************************
 23855                                  
 23856                                  _$P_File_Format:
 23857 00001B16 50                      	push	ax			;AN000;
 23858 00001B17 57                      	push	di			;AN000;
 23859 00001B18 56                      	push	si			;AN000;
 23860 00001B19 2E8B3E[4A14]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 23861                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 23862 00001B1E 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 23863 00001B21 08C0                    	or	al,al			;AN000; end of line ?
 23864 00001B23 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 23865                                  
 23866 00001B25 E85E00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 23867 00001B28 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 23868                                  
 23869 00001B2A 2EC606[E014]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 23870                                  					;AN033;AC034;; set error flag- bad char.
 23871 00001B30 5E                      	pop	si			;AN033;
 23872 00001B31 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 23873 00001B35 5F                      	pop	di			;AN033;
 23874 00001B36 EB3E                    	jmp	short _$P_FileF02	;AN033;
 23875                                  
 23876                                  _$P_FileF_Err:				;AN000;
 23877 00001B38 5E                      	pop	si			;AN000;
 23878 00001B39 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 23879 00001B3D 5F                      	pop	di			;AN000;
 23880                                  
 23881                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 23882                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 23883                                  	; 12/12/2022
 23884 00001B3E 26F60701                	test	byte [es:bx],_$P_Optional
 23885                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23886                                  	;test	word [es:bx],_$P_Optional
 23887 00001B42 7532                    	jnz	short _$P_FileF02	;AN000;
 23888                                  
 23889 00001B44 2EC706[3D14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 23890 00001B4B EB29                    	jmp	short _$P_FileF02	;AN000;
 23891                                  
 23892                                  _$P_FileF03:				;AN000;
 23893 00001B4D 58                      	pop	ax			;AN000; discard save si
 23894 00001B4E 56                      	push	si			;AN000; save new si
 23895                                  _$P_FileF_Loop1: 			;AN000;
 23896 00001B4F 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 23897 00001B52 08C0                    	or	al,al			;AN000; end of line ?
 23898 00001B54 741E                    	jz	short _$P_FileF_RLT	;AN000;
 23899                                  
 23900 00001B56 E82D00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 23901 00001B59 740B                    	je	short _$P_FileF00	;AN000;
 23902                                  
 23903 00001B5B E85401                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 23904 00001B5E 7302                    	jnc	short _$P_FileF01	;AN000;
 23905 00001B60 47                      	inc	di			;AN000; if yes, skip next byte
 23906 00001B61 46                      	inc	si			;AN000;
 23907                                  _$P_FileF01:				;AN000;
 23908 00001B62 47                      	inc	di			;AN000;
 23909 00001B63 46                      	inc	si			;AN000;
 23910 00001B64 EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 23911                                  ;
 23912                                  _$P_FileF00:				;AN000;
 23913 00001B66 2EA2[4314]              	mov	[cs:_$P_Terminator],al	;AC034;
 23914 00001B6A 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 23915 00001B6E 47                      	inc	di			;AN000;
 23916 00001B6F 2E893E[3F14]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 23917                                  _$P_FileF_RLT:				;AN000;
 23918 00001B74 5E                      	pop	si			;AN000;
 23919 00001B75 5F                      	pop	di			;AN000;
 23920                                  _$P_FileF02:				;AN000;
 23921 00001B76 58                      	pop	ax			;AN000; (tm14)
 23922 00001B77 A90002                  	test	ax,_$P_File_Spc		;AN000; (tm14)
 23923 00001B7A 7409                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 23924                                  
 23925 00001B7C 50                      	push	ax			;AN000;  (tm14)
 23926                                  
 23927 00001B7D B4FF                    	mov	ah,_$P_No_Tag		;AN000; set
 23928 00001B7F B005                    	mov	al,_$P_File_Spec 	;AN000;    result
 23929 00001B81 E89BFB                  	call	_$P_Fill_Result		;AN000; 	 buffer to file spec
 23930 00001B84 58                      	pop	ax			;AN000;
 23931                                  
 23932                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 23933 00001B85 C3                      	retn				;AN000;
 23934                                  
 23935                                  ;***********************************************************************
 23936                                  ; _$P_FileSp_Chk
 23937                                  ;
 23938                                  ; Function:  Check if the input byte is one of file special characters
 23939                                  ;
 23940                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23941                                  ;	     AL = character code to be examineed
 23942                                  ;
 23943                                  ; Output:    ZF = 1 , AL is one of special characters
 23944                                  ;***********************************************************************
 23945                                  
 23946                                  _$P_FileSp_Chk:
 23947 00001B86 53                      	push	bx			;AN000;
 23948 00001B87 51                      	push	cx			;AN000;
 23949                                  	;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 23950 00001B88 8D1E[D714]              	lea	bx,[_$P_FileSp_Char]
 23951 00001B8C B90900                  	mov	cx,_$P_FileSp_Len	;AN000; load length of it
 23952                                  _$P_FileSp_Loop: 			;AN000;
 23953 00001B8F 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 23954 00001B92 7404                    	je	short _$P_FileSp_Exit	;AN000;
 23955                                  
 23956 00001B94 43                      	inc	bx			;AN000;
 23957 00001B95 E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 23958                                  
 23959 00001B97 41                      	inc	cx			;AN000; reset ZF
 23960                                  _$P_FileSp_Exit: 			;AN000;
 23961 00001B98 59                      	pop	cx			;AN000;
 23962 00001B99 5B                      	pop	bx			;AN000;
 23963 00001B9A C3                      	retn
 23964                                  
 23965                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 23966                                  
 23967                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 23968                                  
 23969                                  ;***********************************************************************
 23970                                  ; _$P_Drive_Format;
 23971                                  ;
 23972                                  ; Function:  Check if the input string is valid drive only format.
 23973                                  ;	     And set the result buffer.
 23974                                  ;
 23975                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23976                                  ;	     ES:BX -> CONTROL block
 23977                                  ;
 23978                                  ; Output:    None
 23979                                  ;
 23980                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 23981                                  ;
 23982                                  ; Vars: _$P_RC(W)
 23983                                  ;***********************************************************************
 23984                                  
 23985                                  _$P_Drive_Format:
 23986 00001B9B 50                      	push	ax			;AN000;
 23987 00001B9C 52                      	push	dx			;AN000;
 23988 00001B9D 2E8A04                  	mov	al,[cs:si]		;AN000;
 23989 00001BA0 08C0                    	or	al,al			;AN000; if null string
 23990 00001BA2 7437                    	je	short _$P_Drv_Exit	;AN000; do nothing
 23991                                  
 23992 00001BA4 E80B01                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 23993 00001BA7 722B                    	jc	short _$P_Drv_Err	;AN000;
 23994                                  
 23995 00001BA9 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 23996 00001BAE 740D                    	je	short _$P_DrvF00	;AN000;
 23997                                  
 23998                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 23999                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 24000                                  	; 12/12/2022
 24001 00001BB0 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24002                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24003                                  	;test	word [es:bx],_$P_Ig_Colon
 24004 00001BB4 741E                    	jz	short _$P_Drv_Err	;AN000;
 24005                                  
 24006 00001BB6 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 24007 00001BBB 7517                    	jne	short _$P_Drv_Err	;AN000;
 24008                                  
 24009                                  _$P_DrvF00:				;AN000;
 24010 00001BBD 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 24011 00001BBF 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 24012 00001BC1 7211                    	jb	short _$P_Drv_Err	;AN000; in range of
 24013                                  
 24014 00001BC3 3C7A                    	cmp	al,"z"                  ;AN000; "a" - "z"
 24015 00001BC5 770D                    	ja	short _$P_Drv_Err	;AN000; if no, error
 24016                                  
 24017 00001BC7 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 24018 00001BC9 88C2                    	mov	dl,al			;AN000; set
 24019 00001BCB B4FF                    	mov	ah,_$P_No_Tag		;AN000;    result
 24020 00001BCD B006                    	mov	al,_$P_Drive		;AN000; 	 buffer
 24021 00001BCF E84DFB                  	call	_$P_Fill_Result		;AN000; 	       to drive
 24022 00001BD2 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 24023                                  
 24024                                  _$P_Drv_Err:				;AN000;
 24025 00001BD4 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24026                                  _$P_Drv_Exit:				;AN000;
 24027 00001BDB 5A                      	pop	dx			;AN000;
 24028 00001BDC 58                      	pop	ax			;AN000;
 24029 00001BDD C3                      	retn				;AN000;
 24030                                  
 24031                                  ;ENDIF					;AN000;(of DrvSW)
 24032                                  
 24033                                  ;***********************************************************************
 24034                                  ; _$P_Skip_Delim;
 24035                                  ;
 24036                                  ; Function: Skip delimiters specified in the PARMS list, white space
 24037                                  ;	    and comma.
 24038                                  ;
 24039                                  ; Input:    DS:SI -> Command String
 24040                                  ;	    ES:DI -> Parameter List
 24041                                  ;
 24042                                  ; Output:   CY = 1 if the end of line encounterd
 24043                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 24044                                  ;	    AL = Last examineed character
 24045                                  ;
 24046                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 24047                                  ;
 24048                                  ; Vars:     _$P_Flags(R)
 24049                                  ;***********************************************************************
 24050                                  
 24051                                  _$P_Skip_Delim:
 24052                                  _$P_Skip_Delim_Loop:			;AN000;
 24053 00001BDE AC                      	lodsb				;AN000;
 24054 00001BDF E81F00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 24055 00001BE2 7417                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 24056                                  
 24057 00001BE4 E85000                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 24058 00001BE7 7515                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 24059                                  
 24060 00001BE9 2EF606[4914]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 24061 00001BEF 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 24062                                  
 24063 00001BF1 2EF606[4914]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 24064 00001BF7 7407                    	jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 24065                                  
 24066                                  	;dec	si			;AN000; backup si for next call (tm08)
 24067                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 24068                                  	; 12/12/2022
 24069                                  	; cf=0
 24070 00001BF9 EB04                    	jmp	short _$P_Skip_Delim_Exit
 24071                                  
 24072                                  _$P_Skip_Delim_CY:			;AN000;
 24073 00001BFB F9                      	stc				;AN000; indicate EOL
 24074 00001BFC EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 24075                                  
 24076                                  _$P_Skip_Delim_NCY:			;AN000;
 24077 00001BFE F8                      	clc				;AN000; indicate non delim
 24078                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 24079 00001BFF 4E                      	dec	si			;AN000;  backup index pointer
 24080                                  	; 12/12/2022
 24081                                  _$P_Exit_At_Extra:	 ; cf=0
 24082 00001C00 C3                      	retn				;AN000;
 24083                                  
 24084                                  	; 12/12/2022
 24085                                  ;_$P_Exit_At_Extra:			;AN000;
 24086                                  	;clc				;AN000; indicate extra delim
 24087                                  	;retn				;AN000;
 24088                                  
 24089                                  ;***********************************************************************
 24090                                  ; _$P_Chk_EOL;
 24091                                  ;
 24092                                  ; Function: Check if AL is one of End of Line characters.
 24093                                  ;
 24094                                  ; Input:    AL = character code
 24095                                  ;	    ES:DI -> Parameter List
 24096                                  ;
 24097                                  ; Output:   ZF = 1 if one of End of Line characters
 24098                                  ;**********************************************************************
 24099                                  
 24100                                  _$P_Chk_EOL:
 24101 00001C01 53                      	push	bx			;AN000;
 24102 00001C02 51                      	push	cx			;AN000;
 24103 00001C03 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 24104 00001C05 742D                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24105                                  
 24106 00001C07 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 24107 00001C09 7429                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24108                                  
 24109                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 24110 00001C0B 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 24111 00001C0D 7425                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24112                                  ;ENDIF					;AN028;
 24113                                  
 24114 00001C0F 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 24115                                  					;AN000; EOL character specified ?
 24116 00001C14 721E                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 24117                                  
 24118 00001C16 31DB                    	xor	bx,bx			;AN000;
 24119 00001C18 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 24120                                  					;AN000; get length of delimiter list
 24121 00001C1C 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 24122 00001C1F 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 24123 00001C23 740D                    	je	short _$P_Chk_EOL_NZ	;AN000;
 24124                                  
 24125                                  	;xor	cx,cx			;AN000; Get number of extra character
 24126 00001C25 30ED                    	xor	ch,ch
 24127 00001C27 268A09                  	mov	cl,[es:bx+di]		;AN000;
 24128                                  _$P_Chk_EOL_Loop:			;AN000;
 24129 00001C2A 43                      	inc	bx			;AN000;
 24130 00001C2B 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 24131 00001C2E 7404                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24132                                  
 24133 00001C30 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 24134                                  
 24135                                  _$P_Chk_EOL_NZ:				;AN000;
 24136 00001C32 3C0D                    	cmp	al,_$P_CR		;AN000; reset ZF
 24137                                  _$P_Chk_EOL_Exit:			;AN000;
 24138 00001C34 59                      	pop	cx			;AN000;
 24139 00001C35 5B                      	pop	bx			;AN000;
 24140 00001C36 C3                      	retn
 24141                                  
 24142                                  ;***********************************************************************
 24143                                  ; _$P_Chk_Delim;
 24144                                  ;
 24145                                  ; Function: Check if AL is one of delimiter characters.
 24146                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 24147                                  ;	    blanks.
 24148                                  ;
 24149                                  ; Input:    AL = character code
 24150                                  ;	    DS:SI -> Next Character
 24151                                  ;	    ES:DI -> Parameter List
 24152                                  ;
 24153                                  ; Output:   ZF = 1 if one of delimiter characters
 24154                                  ;	    SI points to the next character
 24155                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 24156                                  ;***********************************************************************
 24157                                  
 24158                                  _$P_Chk_Delim:
 24159 00001C37 53                      	push	bx			;AN000;
 24160 00001C38 51                      	push	cx			;AN000;
 24161 00001C39 2EC606[4314]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 24162                                  					;AC034; Assume terminated by space
 24163                                  	;and	byte [cs:_$P_Flags20,0DFh
 24164 00001C3F 2E8026[4914]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 24165 00001C45 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 24166 00001C47 7436                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24167                                  
 24168 00001C49 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 24169 00001C4B 7432                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24170                                  
 24171 00001C4D 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 24172 00001C4F 7431                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24173                                  
 24174                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24175                                  _$P_Chk_Delim00: 			;AN000;
 24176 00001C51 3C20                    	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 24177 00001C53 750C                    	jne	short _$P_Chk_Delim01	;AN000;
 24178                                  
 24179 00001C55 803C20                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 24180 00001C58 7507                    	jne	short _$P_Chk_Delim01	;AN000;
 24181                                  
 24182 00001C5A B020                    	mov	al,_$P_Space		;AN000;
 24183 00001C5C 46                      	inc	si			;AN000; make si point to next character
 24184 00001C5D 38C0                    	cmp	al,al			;AN000; Set ZF
 24185 00001C5F EB1E                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24186                                  
 24187                                  _$P_Chk_Delim01: 			;AN000;
 24188 00001C61 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 24189                                  					;AN000; delimiter character specified ?
 24190 00001C66 7217                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 24191                                  
 24192                                  	;xor	cx,cx			;AN000;
 24193 00001C68 30ED                    	xor	ch,ch
 24194                                  	;mov	cl,[es:di+3]
 24195 00001C6A 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 24196                                  					;AN000; get length of delimiter list
 24197 00001C6E 09C9                    	or	cx,cx			;AN000; No extra Delim character ?
 24198 00001C70 740B                    	jz	short _$P_Chk_Delim_NZ 	;AN000;
 24199                                  
 24200 00001C72 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 24201                                  _$P_Chk_Delim_Loop:			;AN000;
 24202 00001C75 43                      	inc	bx			;AN000;
 24203 00001C76 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 24204 00001C79 7407                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24205                                  
 24206 00001C7B E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 24207                                  
 24208                                  _$P_Chk_Delim_NZ:			;AN000;
 24209 00001C7D 3C20                    	cmp	al,_$P_Space		;AN000; reset ZF
 24210                                  _$P_Chk_Delim_Exit:			;AN000;
 24211                                  _$P_ChkDfin:				;AN000;
 24212 00001C7F 59                      	pop	cx			;AN000;
 24213 00001C80 5B                      	pop	bx			;AN000;
 24214 00001C81 C3                      	retn				;AN000;
 24215                                  
 24216                                  _$P_Chk_Delim_Exit0:			;AN000;
 24217 00001C82 2EA2[4314]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 24218 00001C86 2EF606[4914]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 24219 00001C8C 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 24220                                  
 24221 00001C8E 2E800E[4914]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 24222                                  					;AC034; flag terminated extra delimiter or comma
 24223                                  _$P_No_Set_Extra:			;AN027;
 24224 00001C94 38C0                    	cmp	al,al			;AN000; set ZF
 24225 00001C96 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24226                                  
 24227                                  
 24228                                  ;***********************************************************************
 24229                                  ; _$P_Chk_Switch;
 24230                                  ;
 24231                                  ; Function: Check if AL is the switch character not in first position of
 24232                                  ;	    _$P_STRING_BUF
 24233                                  ;
 24234                                  ; Input:    AL = character code
 24235                                  ;	    BX = current pointer within _$P_String_Buf
 24236                                  ;	    SI =>next char on command line (following the one in AL)
 24237                                  ;
 24238                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 24239                                  ;		 position, and has no chance of being part of a date string,
 24240                                  ;		 i.e. should be treated as a delimiter.
 24241                                  
 24242                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 24243                                  ;		 position, or is a slash but may be part of a date string, i.e.
 24244                                  ;		 should not be treated as a delimiter.
 24245                                  ;
 24246                                  ; Vars:  _$P_Terminator(W)
 24247                                  
 24248                                  ; Use:	 _$P_0099
 24249                                  ;***********************************************************************
 24250                                  
 24251                                  _$P_Chk_Switch:
 24252                                  	;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 24253 00001C98 8D2E[5214]              	lea	bp,[_$P_STRING_BUF]	; BP=OFFSET of _$P_String_Buf even in group addressing
 24254                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 24255 00001C9C 39EB                    	cmp	bx,bp			;AN000;
 24256 00001C9E 7406                    	je	short _$P_STRUC_L2	;AN000;
 24257                                  
 24258                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 24259 00001CA0 3C2F                    	cmp	al,_$P_Switch		;AN000;
 24260 00001CA2 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 24261                                  
 24262 00001CA4 F9                      	stc				;AN020;not in first position and is slash
 24263                                  	;jmp     short _$P_STRUC_L1	;AN000;
 24264                                  	; 12/12/2022
 24265 00001CA5 C3                      	retn
 24266                                  
 24267                                  ; 12/12/2022
 24268                                  ;_$P_STRUC_L5:				;AN000;
 24269                                  ;	CLC				;AN020;not a slash
 24270                                  ;;	    .ENDIF			;AN020;
 24271                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 24272                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 24273                                  
 24274                                  _$P_STRUC_L2:				;AN000;
 24275                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;
 24276 00001CA6 3C2F                    	cmp     al,_$P_Switch		;AN000;
 24277 00001CA8 7506                    	jne	short _$P_STRUC_L12	;AN000;
 24278                                  
 24279 00001CAA 2E800E[4914]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020;AC034;;could be valid switch, first char and is slash
 24280                                  ;	    .ENDIF			;AN020;
 24281                                  
 24282                                  	; 12/12/2022
 24283                                  	; cf=0
 24284                                  	;retn
 24285                                  
 24286                                  _$P_STRUC_L5:
 24287                                  	; 12/12/2022
 24288                                  _$P_STRUC_L12:				;AN000;
 24289 00001CB0 F8                      	clc				;AN020;CF=0 indicating first char
 24290                                  ;	.ENDIF				;AN020;
 24291                                  _$P_STRUC_L1:				;AN000;
 24292 00001CB1 C3                      	retn				;AN000;
 24293                                  
 24294                                  ;**************************************************************************
 24295                                  ; _$P_Chk_DBCS:
 24296                                  ;
 24297                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 24298                                  ;
 24299                                  ;  Input:
 24300                                  ;	  AL	= Code to be examineed
 24301                                  ;
 24302                                  ;  Output:
 24303                                  ;	  If CF is on then a lead byte of DBCS
 24304                                  ;
 24305                                  ; Use: INT 21h w/AH=63
 24306                                  ;
 24307                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 24308                                  ;***************************************************************************
 24309                                  
 24310                                  _$P_Chk_DBCS:
 24311 00001CB2 1E                      	push	ds			;AN000;
 24312 00001CB3 56                      	push	si			;AN000;
 24313 00001CB4 53                      	push	bx			;AN000; (tm11)
 24314                                  	
 24315 00001CB5 2E833E[4614]00          	cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 24316 00001CBB 7527                    	jne	short _$P_DBCS00	;AN000;
 24317                                  
 24318 00001CBD 50                      	push	ax			;AN000;
 24319 00001CBE 1E                      	push	ds			;AN000; (tm11)
 24320 00001CBF 51                      	push	cx			;AN000;
 24321 00001CC0 52                      	push	dx			;AN000;
 24322 00001CC1 57                      	push	di			;AN000;
 24323 00001CC2 55                      	push	bp			;AN000;
 24324 00001CC3 06                      	push	es			;AN000;
 24325 00001CC4 31F6                    	xor	si,si			;AN000;
 24326 00001CC6 8EDE                    	mov	ds,si			;AN000;
 24327 00001CC8 B80063                  	MOV	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 24328 00001CCB CD21                    	int	21h			;AN000;
 24329                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 24330 00001CCD 8CDB                    	mov	bx,ds			;AN000; (tm11)
 24331 00001CCF 09DB                    	or	bx,bx			;AN000; (tm11)
 24332 00001CD1 07                      	pop	es			;AN000;
 24333 00001CD2 5D                      	pop	bp			;AN000;
 24334 00001CD3 5F                      	pop	di			;AN000;
 24335 00001CD4 5A                      	pop	dx			;AN000;
 24336 00001CD5 59                      	pop	cx			;AN000;
 24337 00001CD6 1F                      	pop	ds			;AN000; (tm11)
 24338 00001CD7 58                      	pop	ax			;AN000;
 24339 00001CD8 7429                    	jz	short _$P_NON_DBCS	;AN000;
 24340                                  
 24341                                  _$P_DBCS02:				;AN000;
 24342 00001CDA 2E8936[4414]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 24343 00001CDF 2E891E[4614]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 24344                                  _$P_DBCS00:				;AN000;
 24345 00001CE4 2E8B36[4414]            	mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 24346 00001CE9 2E8E1E[4614]            	mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 24347                                  
 24348                                  _$P_DBCS_LOOP:				;AN000;
 24349 00001CEE 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 24350 00001CF1 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 24351                                  
 24352 00001CF3 3A04                    	cmp	al,[si] 		;AN000;
 24353 00001CF5 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 24354                                  
 24355 00001CF7 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 24356 00001CFA 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 24357                                  
 24358 00001CFC F9                      	stc				;AN000; if yes, indicate DBCS and exit
 24359 00001CFD EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 24360                                  
 24361                                  _$P_DBCS01:				;AN000;
 24362 00001CFF 46                      	inc	si			;AC035; add '2' to
 24363 00001D00 46                      	inc	si			;AC035;  SI reg
 24364                                  					;AN000; get next vector
 24365 00001D01 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 24366                                  
 24367                                  _$P_NON_DBCS:				;AN000;
 24368                                  	; 12/12/2022
 24369                                  	; cf=0
 24370                                  	;clc				;AN000; indicate SBCS
 24371                                  _$P_DBCS_EXIT:				;AN000;
 24372 00001D03 5B                      	pop	bx			;AN000; (tm11)
 24373 00001D04 5E                      	pop	si			;AN000;
 24374 00001D05 1F                      	pop	ds			;AN000;
 24375 00001D06 C3                      	retn				;AN000;
 24376                                  
 24377                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 24378                                  ; ======================================================================
 24379                                  ; 27/03/2019 - Retro DOS v4.0
 24380                                  
 24381                                  ;control block definitions for parser.
 24382                                  ;-----------------------------------------------------------------------
 24383                                  ; buffer = [n | n,m] {/e}
 24384                                  
 24385                                  ; 30/03/2019
 24386                                  
 24387                                  struc p_parms
 24388 00000000 ????                    	resw	1	; dw ?
 24389 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 24390 00000003 ??                      	resb	1	; db 1	; length is 1
 24391 00000004 ??                      	resb 	1	; db ';' ; delimiter
 24392                                  .size:
 24393                                  endstruc
 24394                                  
 24395                                  struc p_pos
 24396 00000000 ????                    	resw	1	; dw ?	; numeric value??
 24397 00000002 ????                    	resw	1	; dw ?	; function
 24398 00000004 ????                    	resw	1	; dw ?	; result value buffer
 24399                                  
 24400                                  ; note: by defining result_val before this structure, we could remove
 24401                                  ;  the "result_val" from every structure invocation
 24402                                  
 24403 00000006 ????                    	resw	1	; dw ?	; value list
 24404 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 24405                                  .size:
 24406                                  endstruc
 24407                                  
 24408                                  struc	p_range
 24409 00000000 ??                      	resb	1	; db 1	; range definition
 24410 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 24411 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 24412 00000003 ????????                	resd	1	; dd ?	; numeric min
 24413 00000007 ????????                	resd	1	; dd ?	; numeric max
 24414                                  .size:
 24415                                  endstruc
 24416                                  
 24417                                  ;-----------------------------------------------------------------------
 24418                                  
 24419                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24420                                  	; (SYSINIT:1F48h)
 24421                                  
 24422                                  ; buffer = [n | n,m] {/e}
 24423                                  
 24424                                  ;buf_parms p_parms <buf_parmsx>
 24425                                  buf_parms: 
 24426 00001D07 [0C1D]                  	dw	buf_parmsx
 24427 00001D09 01                      	db	1	; an extra delimiter list
 24428 00001D0A 01                      	db	1	; length is 1
 24429 00001D0B 3B                      	db	';'	; delimiter
 24430                                  
 24431                                  buf_parmsx:
 24432 00001D0C 0102[161D][2A1D]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 24433 00001D12 01                      	db	1			; one switch
 24434 00001D13 [3E1D]                  	dw	sw_x_ctrl
 24435 00001D15 00                      	db	0			; no keywords
 24436                                  
 24437                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 24438                                  buf_pos1:
 24439 00001D16 0080                    	dw	8000h	; numeric value??
 24440 00001D18 0000                    	dw	0	; function
 24441 00001D1A [501D]                  	dw	result_val ; result value buffer	
 24442 00001D1C [1F1D]                  	dw	buf_range_1 ; value list
 24443 00001D1E 00                      	db	0  	; no switches/keywords
 24444                                  
 24445                                  ;buf_range_1 p_range <,,,1,99>		; M050
 24446                                  buf_range_1:
 24447 00001D1F 01                      	db	1	; range definition
 24448 00001D20 01                      	db	1	; 1 definition of range
 24449 00001D21 01                      	db	1	; item tag for this range
 24450 00001D22 01000000                	dd	1	; numeric min
 24451 00001D26 63000000                	dd	99	; numeric max
 24452                                  
 24453                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 24454                                  buf_pos2:
 24455 00001D2A 0180                    	dw	8001h
 24456 00001D2C 0000                    	dw	0
 24457 00001D2E [501D]                  	dw	result_val	
 24458 00001D30 [331D]                  	dw	buf_range_2
 24459 00001D32 00                      	db	0
 24460                                  
 24461                                  ;buf_range_2 p_range <,,,0,8>
 24462                                  buf_range_2:
 24463 00001D33 01                      	db	1
 24464 00001D34 01                      	db	1
 24465 00001D35 01                      	db	1
 24466 00001D36 00000000                	dd	0
 24467 00001D3A 08000000                	dd	8
 24468                                  
 24469                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 24470                                  sw_x_ctrl:
 24471 00001D3E 0000                    	dw	0
 24472 00001D40 0000                    	dw	0
 24473 00001D42 [501D]                  	dw	result_val	
 24474 00001D44 [4F1D]                  	dw	noval
 24475 00001D46 01                      	db	1	; 1 switch
 24476                                  	
 24477                                  switch_x:
 24478 00001D47 2F5800                  	db	'/X',0		; M016
 24479                                  
 24480                                  p_buffers:
 24481 00001D4A 0000                    	dw	0	; local variables
 24482                                  p_h_buffers:
 24483 00001D4C 0000                    	dw	0
 24484                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24485                                  p_buffer_slash_x:
 24486 00001D4E 00                      	db	0 ; 31/03/2019
 24487                                  
 24488                                  ;-- common definitions -------------------------------------------------
 24489                                  
 24490 00001D4F 00                      noval:	db	0
 24491                                  
 24492                                  result_val: 	;label	byte
 24493 00001D50 00                      	db	0		; type returned
 24494                                  result_val_itag:
 24495 00001D51 00                      	db	0		; item tag returned
 24496                                  result_val_swoff:
 24497 00001D52 0000                    	dw	0		; es:offset of the switch defined
 24498                                  rv_byte:	;label	byte
 24499 00001D54 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 24500                                  
 24501                                  ;-----------------------------------------------------------------------
 24502                                  
 24503                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24504                                  	; (SYSINIT:1F99h)
 24505                                  
 24506                                  ; break = [ on | off ]
 24507                                  
 24508                                  ;brk_parms p_parms  <brk_parmsx>
 24509                                  brk_parms:
 24510 00001D58 [5D1D]                  	dw	brk_parmsx
 24511 00001D5A 01                      	db	1	; an extra delimiter list
 24512 00001D5B 01                      	db	1	; length is 1
 24513 00001D5C 3B                      	db	';'	; delimiter
 24514                                  
 24515                                  brk_parmsx:
 24516 00001D5D 0101[631D]              	dw	101h,brk_pos	; min,max = 1 positional
 24517 00001D61 00                      	db	0		; no switches
 24518 00001D62 00                      	db	0		; no keywords
 24519                                  
 24520                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 24521                                  brk_pos:
 24522 00001D63 0020                    	dw	2000h
 24523 00001D65 0000                    	dw	0
 24524 00001D67 [501D]                  	dw	result_val	
 24525 00001D69 [6C1D]                  	dw	on_off_string
 24526 00001D6B 00                      	db	0
 24527                                  
 24528                                  on_off_string:	;label	byte
 24529 00001D6C 03                      	db	3		; signals that there is a string choice
 24530 00001D6D 00                      	db	0		; no range definition
 24531 00001D6E 00                      	db	0		; no numeric values choice
 24532 00001D6F 02                      	db	2		; 2 strings for choice
 24533 00001D70 01                      	db	1		; the 1st string tag
 24534 00001D71 [761D]                  	dw	on_string
 24535 00001D73 02                      	db	2		; the 2nd string tag
 24536 00001D74 [791D]                  	dw	off_string
 24537                                  
 24538                                  on_string:
 24539 00001D76 4F4E00                  	db	"ON",0
 24540                                  off_string:
 24541 00001D79 4F464600                	db	"OFF",0
 24542                                  
 24543                                  p_ctrl_break:
 24544 00001D7D 00                      	db	0	; local variable
 24545                                  
 24546                                  ;-----------------------------------------------------------------------
 24547                                  
 24548                                  	; 27/10/2022
 24549                                  
 24550                                  ; country = n {m {path}}
 24551                                  ; or
 24552                                  ; country = n,,path
 24553                                  
 24554                                  ;cntry_parms p_parms <cntry_parmsx>
 24555                                  cntry_parms:
 24556 00001D7E [831D]                  	dw	cntry_parmsx
 24557 00001D80 01                      	db	1
 24558 00001D81 01                      	db	1
 24559 00001D82 3B                      	db	';'
 24560                                  	
 24561                                  cntry_parmsx:
 24562 00001D83 0103[8D1D][A11D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 24562 00001D89 [AA1D]             
 24563 00001D8B 00                      	db	0		; no switches
 24564 00001D8C 00                      	db	0		; no keywords
 24565                                  
 24566                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 24567                                  cntry_pos1:
 24568 00001D8D 0080                    	dw	8000h
 24569 00001D8F 0000                    	dw	0
 24570 00001D91 [501D]                  	dw	result_val	
 24571 00001D93 [961D]                  	dw	cc_range
 24572 00001D95 00                      	db	0
 24573                                  
 24574                                  ;cc_range p_range <,,,1,999>
 24575                                  cc_range:
 24576 00001D96 01                      	db	1
 24577 00001D97 01                      	db	1
 24578 00001D98 01                      	db	1
 24579 00001D99 01000000                	dd	1
 24580 00001D9D E7030000                	dd	999
 24581                                  
 24582                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 24583                                  cntry_pos2:
 24584 00001DA1 0180                    	dw	8001h
 24585 00001DA3 0000                    	dw	0
 24586 00001DA5 [501D]                  	dw	result_val	
 24587 00001DA7 [961D]                  	dw	cc_range
 24588 00001DA9 00                      	db	0
 24589                                  
 24590                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 24591                                  cntry_pos3:
 24592 00001DAA 0102                    	dw	201h
 24593 00001DAC 0000                    	dw	0
 24594 00001DAE [501D]                  	dw	result_val	
 24595 00001DB0 [4F1D]                  	dw	noval
 24596 00001DB2 00                      	db	0	
 24597                                  
 24598                                  p_cntry_code:
 24599 00001DB3 0000                    	dw	0	; local variable
 24600                                  p_code_page:
 24601 00001DB5 0000                    	dw	0	; local variable
 24602                                  
 24603                                  ;-----------------------------------------------------------------------
 24604                                  
 24605                                  	; 27/10/2022
 24606                                  
 24607                                  ; files = n
 24608                                  
 24609                                  ;files_parms p_parms <files_parmsx>
 24610                                  files_parms:
 24611 00001DB7 [BC1D]                  	dw	files_parmsx
 24612 00001DB9 01                      	db	1
 24613 00001DBA 01                      	db	1
 24614 00001DBB 3B                      	db	';'
 24615                                  
 24616                                  files_parmsx:
 24617 00001DBC 0101[C21D]              	dw	101h,files_pos	; min,max 1 positional
 24618 00001DC0 00                      	db	0		; no switches
 24619 00001DC1 00                      	db	0		; no keywords
 24620                                  
 24621                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 24622                                  files_pos:
 24623 00001DC2 0080                    	dw	8000h
 24624 00001DC4 0000                    	dw	0
 24625 00001DC6 [501D]                  	dw	result_val	
 24626 00001DC8 [CB1D]                  	dw	files_range
 24627 00001DCA 00                      	db	0
 24628                                  
 24629                                  ;files_range p_range <,,,8,255>
 24630                                  files_range:
 24631 00001DCB 01                      	db	1
 24632 00001DCC 01                      	db	1
 24633 00001DCD 01                      	db	1
 24634 00001DCE 08000000                	dd	8
 24635 00001DD2 FF000000                	dd	255
 24636                                  
 24637                                  p_files:
 24638 00001DD6 00                      	db	0		; local variable
 24639                                  
 24640                                  ;-----------------------------------------------------------------------
 24641                                  
 24642                                  	; 27/10/2022
 24643                                  
 24644                                  ; fcbs = n,m
 24645                                  
 24646                                  ;fcbs_parms p_parms <fcbs_parmsx>
 24647                                  fcbs_parms:
 24648 00001DD7 [DC1D]                  	dw	fcbs_parmsx
 24649 00001DD9 01                      	db	1
 24650 00001DDA 01                      	db	1
 24651 00001DDB 3B                      	db	';'
 24652                                  
 24653                                  fcbs_parmsx:
 24654 00001DDC 0102[E41D][F81D]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 24655 00001DE2 00                      	db	0		; no switches
 24656 00001DE3 00                      	db	0		; no keywords
 24657                                  
 24658                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 24659                                  fcbs_pos_1:
 24660 00001DE4 0080                    	dw	8000h
 24661 00001DE6 0000                    	dw	0
 24662 00001DE8 [501D]                  	dw	result_val	
 24663 00001DEA [ED1D]                  	dw	fcbs_range
 24664 00001DEC 00                      	db	0
 24665                                  
 24666                                  ;fcbs_range p_range <,,,1,255>
 24667                                  fcbs_range:
 24668 00001DED 01                      	db	1
 24669 00001DEE 01                      	db	1
 24670 00001DEF 01                      	db	1
 24671 00001DF0 01000000                	dd	1
 24672 00001DF4 FF000000                	dd	255
 24673                                  
 24674                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 24675                                  fcbs_pos_2:
 24676 00001DF8 0080                    	dw	8000h
 24677 00001DFA 0000                    	dw	0
 24678 00001DFC [501D]                  	dw	result_val	
 24679 00001DFE [011E]                  	dw	fcbs_keep_range
 24680 00001E00 00                      	db	0
 24681                                  
 24682                                  ;fcbs_keep_range p_range <,,,0,255>
 24683                                  fcbs_keep_range:
 24684 00001E01 01                      	db	1
 24685 00001E02 01                      	db	1
 24686 00001E03 01                      	db	1
 24687 00001E04 00000000                	dd	0
 24688 00001E08 FF000000                	dd	255
 24689                                  
 24690 00001E0C 00                      p_fcbs:	db	0		; local variable
 24691 00001E0D 00                      p_keep:	db	0		; local variable
 24692                                  
 24693                                  ;-----------------------------------------------------------------------
 24694                                  
 24695                                  	; 27/10/2022
 24696                                  
 24697                                  ; lastdrive = x
 24698                                  
 24699                                  ;ldrv_parms p_parms <ldrv_parmsx>
 24700                                  ldrv_parms:
 24701 00001E0E [131E]                  	dw	ldrv_parmsx
 24702 00001E10 01                      	db	1
 24703 00001E11 01                      	db	1
 24704 00001E12 3B                      	db	';'
 24705                                  
 24706                                  ldrv_parmsx:
 24707 00001E13 0101[191E]              	dw	101h,ldrv_pos	; min,max = 1 positional
 24708 00001E17 00                      	db	0		; no switches
 24709 00001E18 00                      	db	0		; no keywords
 24710                                  
 24711                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 24712                                  ldrv_pos:				    ; remove colon at end
 24713 00001E19 1001                    	dw	110h
 24714 00001E1B 1000                    	dw	10h
 24715 00001E1D [501D]                  	dw	result_val	
 24716 00001E1F [4F1D]                  	dw	noval
 24717 00001E21 00                      	db	0
 24718                                  	
 24719 00001E22 00                      p_ldrv:	db	0		; local variable
 24720                                  
 24721                                  ;-----------------------------------------------------------------------
 24722                                  
 24723                                  	; 27/10/2022
 24724                                  
 24725                                  ; stacks = n,m
 24726                                  
 24727                                  ;stks_parms p_parms <stks_parmsx>
 24728                                  stks_parms:
 24729 00001E23 [281E]                  	dw	stks_parmsx
 24730 00001E25 01                      	db	1
 24731 00001E26 01                      	db	1
 24732 00001E27 3B                      	db	';'
 24733                                  
 24734                                  stks_parmsx:
 24735 00001E28 0202[301E][441E]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 24736 00001E2E 00                      	db	0		; no switches
 24737 00001E2F 00                      	db	0		; no keywords
 24738                                  
 24739                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 24740                                  stks_pos_1:
 24741 00001E30 0080                    	dw	8000h
 24742 00001E32 0000                    	dw	0
 24743 00001E34 [501D]                  	dw	result_val	
 24744 00001E36 [391E]                  	dw	stks_range
 24745 00001E38 00                      	db	0
 24746                                  
 24747                                  ;stks_range p_range <,,,0,64>
 24748                                  stks_range:
 24749 00001E39 01                      	db	1
 24750 00001E3A 01                      	db	1
 24751 00001E3B 01                      	db	1
 24752 00001E3C 00000000                	dd	0
 24753 00001E40 40000000                	dd	64
 24754                                  
 24755                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 24756                                  stks_pos_2:
 24757 00001E44 0080                    	dw	8000h
 24758 00001E46 0000                    	dw	0
 24759 00001E48 [501D]                  	dw	result_val	
 24760 00001E4A [4D1E]                  	dw	stk_size_range
 24761 00001E4C 00                      	db	0
 24762                                  
 24763                                  ;stk_size_range p_range <,,,0,512>
 24764                                  stk_size_range:
 24765 00001E4D 01                      	db	1
 24766 00001E4E 01                      	db	1
 24767 00001E4F 01                      	db	1
 24768 00001E50 00000000                	dd	0
 24769 00001E54 00020000                	dd	512	
 24770                                  
 24771                                  p_stack_count:
 24772 00001E58 0000                    	dw	0	; local variable
 24773                                  p_stack_size:
 24774 00001E5A 0000                    	dw	0	; local variable
 24775                                  
 24776                                  ;-----------------------------------------------------------------------
 24777                                  
 24778                                  	; 27/10/2022
 24779                                  
 24780                                  ; multitrack = [ on | off ]
 24781                                  
 24782                                  ;mtrk_parms p_parms <mtrk_parmsx>
 24783                                  mtrk_parms:
 24784 00001E5C [611E]                  	dw	mtrk_parmsx
 24785 00001E5E 01                      	db	1
 24786 00001E5F 01                      	db	1
 24787 00001E60 3B                      	db	';'
 24788                                  
 24789                                  mtrk_parmsx:
 24790 00001E61 0101[671E]              	dw	101h,mtrk_pos	; min,max = 1 positional
 24791 00001E65 00                      	db	0		; no switches
 24792 00001E66 00                      	db	0		; no keywords
 24793                                  
 24794                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 24795                                  mtrk_pos:
 24796 00001E67 0020                    	dw	2000h
 24797 00001E69 0000                    	dw	0
 24798 00001E6B [501D]                  	dw	result_val	
 24799 00001E6D [6C1D]                  	dw	on_off_string
 24800 00001E6F 00                      	db	0
 24801                                  
 24802 00001E70 00                      p_mtrk:	db	0		; local variable
 24803                                  
 24804                                  ;-----------------------------------------------------------------------
 24805                                  
 24806                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24807                                  	; (SYSINIT:20B2h)
 24808                                  
 24809                                  ; switches=/k
 24810                                  
 24811                                  ;swit_parms p_parms <swit_parmsx>
 24812                                  swit_parms:
 24813 00001E71 [761E]                  	dw	swit_parmsx
 24814 00001E73 01                      	db	1
 24815 00001E74 01                      	db	1
 24816 00001E75 3B                      	db	';'
 24817                                  
 24818                                  swit_parmsx:
 24819 00001E76 0000                    	dw	0		; no positionals
 24820                                  	;db	5               ; # of switches
 24821                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 24822 00001E78 03                      	db	3
 24823 00001E79 [801E]                  	dw	swit_k_ctrl	; /k control
 24824                                  	;dw	swit_n_ctrl     ; /n control (for MULTI_CONFIG only)
 24825                                  	;dw	swit_f_ctrl     ; /f control (for MULTI_CONFIG only)
 24826 00001E7B [8C1E]                  	dw	swit_t_ctrl     ; /t control
 24827 00001E7D [981E]                  	dw	swit_w_ctrl     ; /w control
 24828 00001E7F 00                      	db	0		; no keywords
 24829                                  
 24830                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 24831                                  swit_k_ctrl:
 24832 00001E80 00000000[501D]-         	dw	0,0,result_val,noval
 24832 00001E86 [4F1D]             
 24833 00001E88 01                      	db	1
 24834 00001E89 2F4B00                  swit_k:	db	'/K',0
 24835                                  
 24836                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 24837                                  ;
 24838                                  ;;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 24839                                  ;swit_n_ctrl:
 24840                                  ;	dw	0,0,result_val,noval
 24841                                  ;	db	1
 24842                                  ;swit_n: db	'/N',0
 24843                                  ;
 24844                                  ;;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 24845                                  ;swit_f_ctrl:
 24846                                  ;	dw	0,0,result_val,noval
 24847                                  ;	db	1
 24848                                  ;swit_f: db 	'/F',0
 24849                                  
 24850                                  	; 27/10/2022
 24851                                  
 24852                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 24853                                  swit_t_ctrl:
 24854 00001E8C 00000000[501D]-         	dw	0,0,result_val,noval
 24854 00001E92 [4F1D]             
 24855 00001E94 01                      	db	1
 24856 00001E95 2F5400                  swit_t:	db	'/T',0			   ;				M059
 24857                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 24858                                  swit_w_ctrl:
 24859 00001E98 00000000[501D]-         	dw	0,0,result_val,noval
 24859 00001E9E [4F1D]             
 24860 00001EA0 01                      	db	1
 24861 00001EA1 2F5700                  swit_w:	db	'/W',0			   ;				M063
 24862                                  
 24863                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 24864                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 24865                                  ;   in the above table to prevent the parsing code from complaining about them
 24866                                  
 24867 00001EA4 00                      p_swit_k:	db     0	; local variable
 24868 00001EA5 00                      p_swit_t:	db     0	; local variable			M059
 24869 00001EA6 00                      p_swit_w:	db     0	; local variable			M063
 24870                                  
 24871                                  ;-----------------------------------------------------------------------
 24872                                  
 24873                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24874                                  	; (SYSINIT:20E8h)
 24875                                  
 24876                                  ; DOS = [ high | low ]
 24877                                  
 24878                                  ;dos_parms p_parms  <dos_parmsx>
 24879                                  dos_parms:
 24880 00001EA7 [AC1E]                  	dw	dos_parmsx
 24881 00001EA9 01                      	db	1
 24882 00001EAA 01                      	db	1
 24883 00001EAB 3B                      	db	';'
 24884                                  dos_parmsx:
 24885 00001EAC 01                      	db	1		; min parameters
 24886 00001EAD 02                      	db	2		; max parameters
 24887 00001EAE [B41E]                  	dw	dos_pos		; 
 24888 00001EB0 [B41E]                  	dw	dos_pos		; 
 24889 00001EB2 00                      	db	0		; no switches
 24890 00001EB3 00                      	db	0		; no keywords
 24891                                  
 24892                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 24893                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 24894                                  dos_pos:
 24895 00001EB4 00200000[501D]-         	dw	2000h,0,result_val,dos_strings
 24895 00001EBA [C61E]             
 24896 00001EBC 00                      	db	0
 24897 00001EBD 00200000[501D]-         	dw	2000h,0,result_val,dos_strings
 24897 00001EC3 [C61E]             
 24898 00001EC5 00                      	db	0	
 24899                                  
 24900                                  dos_strings:	;label	byte
 24901 00001EC6 03                      	db	3		; signals that there is a string choice
 24902 00001EC7 00                      	db	0		; no range definition
 24903 00001EC8 00                      	db	0		; no numeric values choice
 24904 00001EC9 04                      	db	4		; 4 strings for choice
 24905 00001ECA 01                      	db	1		; the 1st string tag
 24906 00001ECB [D61E]                  	dw	hi_string
 24907 00001ECD 02                      	db	2		; the 2nd string tag
 24908 00001ECE [DB1E]                  	dw	lo_string
 24909 00001ED0 03                      	db	3
 24910 00001ED1 [DF1E]                  	dw	umb_string
 24911 00001ED3 04                      	db	4
 24912 00001ED4 [E31E]                  	dw	noumb_string
 24913                                  
 24914 00001ED6 4849474800              hi_string:	db	"HIGH",0
 24915 00001EDB 4C4F5700                lo_string:	db	"LOW",0
 24916 00001EDF 554D4200                umb_string:	db	"UMB",0
 24917 00001EE3 4E4F554D4200            noumb_string:	db	"NOUMB",0
 24918                                  
 24919 00001EE9 00                      p_dos_hi:	db	0	; local variable
 24920                                  				; BUGBUG : I dont know whether PARSER uses
 24921                                  				;          this variable or not
 24922                                  
 24923                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24924                                  
 24925                                  %if 0
 24926                                  
 24927                                  ;****************************************************************** RICHID ****
 24928                                  
 24929                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 24930                                  
 24931                                  ; 30/03/2019 - Retro DOS v4.0
 24932                                  ;------------------------------------------------------------------------------
 24933                                  
 24934                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 24935                                  ;
 24936                                  ;   Date:     May 14, 1992
 24937                                  ;
 24938                                  ;******************************************************************************
 24939                                  ;
 24940                                  ;   Modification log:
 24941                                  ;
 24942                                  ;     DATE    WHO      DESCRIPTION
 24943                                  ;   --------  -------  --------------------------------------------------------
 24944                                  ;   05/14/92  t-richj  Original
 24945                                  ;   06/21/92  t-richj  Final revisions before check-in
 24946                                  ;
 24947                                  ;******************************************************************************
 24948                                  ;
 24949                                  ; There are two primary definitions which need to be made, selectively, before
 24950                                  ; this include file should be used.  These are:
 24951                                  ;    HV_Extern - If this has been defined, variables for this module will be
 24952                                  ;                declared as external.  Otherwise, variables will be declared
 24953                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 24954                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 24955                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 24956                                  ;                (as only one module, sysconf.asm, includes this file).
 24957                                  ;    HV_LoadHigh - This should be defined when this module is going into
 24958                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 24959                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 24960                                  ;
 24961                                  ;******************************************************************************
 24962                                  
 24963                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 24964                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 24965                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 24966                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 24967                                  ; space problem (it's just such a nice round number, eh?).
 24968                                  
 24969                                  MAXUMB	equ	16
 24970                                  
 24971                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 24972                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 24973                                  
 24974                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 24975                                  SystemPSPOwner	equ	8
 24976                                  ;JapanPSPOwner	equ	9
 24977                                  
 24978                                  ; for LoadHigh and DeviceHigh:
 24979                                  ;
 24980                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 24981                                  ;	          UnHideUMBs().
 24982                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 24983                                  ;	           line.
 24984                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 24985                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 24986                                  ;	          given a command-line like "/L:3,500;4"
 24987                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 24988                                  ;	          matching its index number was specified on the command-line;
 24989                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 24990                                  ;	          will be set to 1.  All others will be set to 0.
 24991                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 24992                                  ;	          specified by the user for a UMB (in the above example, all
 24993                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 24994                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 24995                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 24996                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 24997                                  ;	           for details).
 24998                                  
 24999                                  fInHigh:  db	0
 25000                                  fUmbTiny: db	0
 25001                                  SegLoad:  dw	0
 25002                                  UmbLoad:  db	0
 25003                                  UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 25004                                  UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 25005                                  fm_umb:   db	0
 25006                                  fm_strat: db	0
 25007                                  fm_argc:  db	0	
 25008                                  
 25009                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 25010                                  ; UmbLoad is set to the UMB number given.
 25011                                  
 25012                                  UNSPECIFIED	equ	-1
 25013                                  
 25014                                  %endif
 25015                                  
 25016                                  ;****************************************************************** RICHID ****
 25017                                  
 25018                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 25019                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 25020                                  
 25021                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25022                                  ; (SYSINIT:212Bh)	
 25023                                  
 25024                                  		;public	DevEntry
 25025                                  
 25026 00001EEA 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 25027 00001EEC 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 25028 00001EEE 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 25029 00001EF0 00000000                DevEntry:	dd	0	; Entry point to the device driver
 25030 00001EF4 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 25031                                  ; 27/10/2022 
 25032                                  ;ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 25033                                  ;
 25034 00001EF8 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 25035 00001EF9 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 25036 00001EFB 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 25037 00001EFD 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 25038                                  ;
 25039 00001EFF 00000000                DevXMSAddr:	dd	0
 25040                                  ;
 25041 00001F03 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 25042 00001F05 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 25043                                  ;
 25044 00001F07 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 25045                                  				;  is being loaded into UMB
 25046 00001F08 0000                    DevSizeOption:	dw	0	; SIZE= option
 25047                                  ;
 25048 00001F0A 00                      Int12Lied:	db	0	; did we trap int 12 ?
 25049 00001F0B 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 25050 00001F0D 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 25051                                  ;
 25052 00001F15 00                      FirstUMBLinked:	db	0
 25053 00001F16 0000                    DevDOSData:	dw	0	; segment of DOS Data
 25054 00001F18 00000000                DevCmdLine:	dd	0	; Current Command line
 25055 00001F1C 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 25056                                  				; to use the file name in the command line
 25057                                  ;
 25058                                  ;	ifdef	dblspace_hooks
 25059                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 25060                                  ;	endif
 25061                                  
 25062                                  ; ===========================================================================
 25063                                  
 25064                                  ; 31/03/2019 - Retro DOS v4.0
 25065                                  
 25066                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25067                                  ; (SYSINIT:215Eh)
 25068                                  
 25069                                  ;----------------------------------------------------------------------------
 25070                                  ;
 25071                                  ; procedure : doconf
 25072                                  ;
 25073                                  ;             Config file is parsed initially with this routine. For the
 25074                                  ;             Subsequent passes 'multi_pass' entry is used .
 25075                                  ;
 25076                                  ;----------------------------------------------------------------------------
 25077                                  
 25078                                  	; 27/10/2022
 25079                                  doconf:
 25080 00001F1D 0E                      	push	cs
 25081 00001F1E 1F                      	pop	ds
 25082                                  
 25083 00001F1F B80037                  	mov	ax,3700h
 25084                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 25085 00001F22 CD21                    	int	21h
 25086 00001F24 8816[AA02]              	mov	[command_line+1],dl	; set in default command line
 25087                                  
 25088                                  ; 27/10/2022
 25089                                  ;;ifdef	MULTI_CONFIG
 25090                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 25091                                  ;	mov	[def_swchr],dl ; 31/03/2019 
 25092                                  ;;endif	;MULTI_CONFIG
 25093                                  
 25094 00001F28 BA[0534]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 25095 00001F2B B8003D                  	mov	ax,3D00h
 25096                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 25097 00001F2E F9                      	stc				;in case of int 24
 25098 00001F2F CD21                    	int	21h			;function request
 25099 00001F31 7306                    	jnc	short noprob		; brif opened okay
 25100                                  
 25101                                  ; 27/10/2022
 25102                                  ;;ifdef	MULTI_CONFIG
 25103                                  ;      	call	kbd_read		; we still want to give the guy
 25104                                  ;					; a chance to select clean boot!
 25105                                  ;;endif					; (ie, no autoexec.bat processing)
 25106 00001F33 C606[4903]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 25107 00001F38 C3                      	retn
 25108                                  noprob: 				;get file size (note < 64k!!)
 25109 00001F39 89C3                    	mov	bx,ax  ; File handle
 25110 00001F3B 31C9                    	xor	cx,cx
 25111 00001F3D 31D2                    	xor	dx,dx
 25112                                  	;mov	ax,4202h
 25113 00001F3F B80242                  	mov	ax,(LSEEK<<8)|2
 25114 00001F42 CD21                    	int	21h
 25115 00001F44 A3[D203]                	mov	[count],ax
 25116                                  
 25117 00001F47 31D2                    	xor	dx,dx
 25118                                  	;mov	ax,4200h
 25119 00001F49 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 25120 00001F4C CD21                    	int	21h
 25121                                  
 25122                                  	;mov	dx,[ALLOCLIM]		;use current alloclim value
 25123                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25124 00001F4E 8B16[A102]              	mov	dx,[top_of_cdss] 
 25125                                  
 25126 00001F52 A1[D203]                	mov	ax,[count]
 25127 00001F55 A3[4C03]                	mov	[config_size],ax	;save the size of config.sys file.
 25128 00001F58 E866F1                  	call	ParaRound
 25129 00001F5B 29C2                    	sub	dx,ax
 25130                                  
 25131                                  ; 27/10/2022
 25132                                  ;;ifdef	MULTI_CONFIG
 25133                                  ;;
 25134                                  ;;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 25135                                  ;;  CONFIG.SYS image, and later for building the initial environment) need
 25136                                  ;;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 25137                                  ;;  we (may) add a variable to the environment that does not explicity appear
 25138                                  ;;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 25139                                  ;;  The default setting for CONFIG cannot result in more than 1 paragraph
 25140                                  ;;  of extra space, so here we account for it (the worst case of course is
 25141                                  ;;  when CONFIG.SYS is some very small size, like 0 -JTP)
 25142                                  ;;
 25143                                  ;       dec     dx                      ;reserve 1 additional paragraph
 25144                                  ;       mov     [config_wrkseg],dx      ;this is the segment to be used for
 25145                                  ;       sub     dx,ax                   ;rebuilding the config.sys memory image
 25146                                  ;;endif	;MULTI_CONFIG
 25147                                  
 25148 00001F5D 83EA11                  	sub	dx,11h			;room for header
 25149                                  	
 25150                                  	;mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 25151                                  	;mov	[CONFBOT],dx
 25152                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25153 00001F60 8916[A102]              	mov	[top_of_cdss],dx
 25154 00001F64 E870EC                  	call    TempCDS 
 25155                                  	; 11/12/2022
 25156                                  	; ds <> cs 
 25157 00001F67 2E8B16[A102]            	mov	dx,[cs:top_of_cdss]
 25158                                   
 25159 00001F6C 8EDA                    	mov	ds,dx
 25160 00001F6E 8EC2                    	mov	es,dx
 25161                                  
 25162 00001F70 31D2                    	xor	dx,dx
 25163 00001F72 2E8B0E[D203]            	mov	cx,[cs:count]
 25164 00001F77 B43F                    	mov	ah,3Fh
 25165                                  	;mov	ah,READ  ; 3Fh
 25166 00001F79 F9                      	stc				;in case of int 24
 25167 00001F7A CD21                    	int	21h			;function request
 25168 00001F7C 9C                      	pushf
 25169                                  
 25170                                  ; find the eof mark in the file. if present,then trim length.
 25171                                  
 25172 00001F7D 50                      	push	ax
 25173 00001F7E 57                      	push	di
 25174 00001F7F 51                      	push	cx
 25175 00001F80 B01A                    	mov	al,1Ah			; eof mark
 25176 00001F82 89D7                    	mov	di,dx			; point to buffer
 25177 00001F84 E305                    	jcxz	puteol			; no chars
 25178 00001F86 F2AE                    	repnz	scasb			; find end
 25179 00001F88 7501                    	jnz	short puteol		; none found and count exhausted
 25180                                  
 25181                                  ; we found a 1a. back up
 25182                                  
 25183 00001F8A 4F                      	dec	di			; backup past 1Ah
 25184                                  
 25185                                  ;  just for the halibut, stick in an extra eol
 25186                                  
 25187                                  puteol:
 25188 00001F8B B00D                    	mov	al,cr ; 0Dh
 25189 00001F8D AA                      	stosb
 25190 00001F8E B00A                    	mov	al,lf  ;0Ah
 25191 00001F90 AA                      	stosb
 25192 00001F91 29D7                    	sub	di,dx			; difference moved
 25193                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25194                                  	;mov	[cs:count],di		; new count
 25195                                  
 25196                                  	; 11/12/2022	
 25197                                  	; 31/03/2019 - Retro DOS v4.0
 25198 00001F93 0E                      	push	cs
 25199 00001F94 1F                      	pop	ds
 25200                                  
 25201 00001F95 893E[D203]              	mov	[count],di		; new count
 25202                                  
 25203 00001F99 59                      	pop	cx
 25204 00001F9A 5F                      	pop	di
 25205 00001F9B 58                      	pop	ax
 25206                                  
 25207                                  	; 11/12/2022
 25208                                  	; 27/10/2022
 25209                                  	;push	cs
 25210                                  	;pop	ds
 25211                                  
 25212 00001F9C 50                      	push	ax
 25213                                  	;mov	ah,CLOSE
 25214 00001F9D B43E                    	mov	ah,3Eh
 25215 00001F9F CD21                    	int	21h
 25216 00001FA1 58                      	pop	ax
 25217 00001FA2 9D                      	popf
 25218 00001FA3 7204                    	jc	short conferr 		;if not we've got a problem
 25219 00001FA5 39C1                    	cmp	cx,ax
 25220 00001FA7 742C                    	jz	short getcom		;couldn't read the file
 25221                                  conferr:
 25222 00001FA9 BA[0534]                	mov	dx,config		;want to print config error
 25223 00001FAC E8AD13                  	call	badfil
 25224                                  endconv:
 25225 00001FAF C3                      	retn
 25226                                  
 25227                                  ;----------------------------------------------------------------------------
 25228                                  ;
 25229                                  ; entry : multi_pass
 25230                                  ;
 25231                                  ;             called to execute device=,install= commands
 25232                                  ;
 25233                                  ;----------------------------------------------------------------------------
 25234                                  
 25235                                  	; 27/10/2022
 25236                                  multi_pass:
 25237 00001FB0 0E                      	push	cs
 25238 00001FB1 1F                      	pop	ds
 25239                                  
 25240 00001FB2 803E[4903]0A            	cmp	byte [multi_pass_id],10
 25241                                  ;jae_endconv:
 25242 00001FB7 73F6                    	jae	short endconv 		; do nothing. just return.
 25243                                  
 25244                                  	;push	word [CONFBOT]
 25245                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25246 00001FB9 FF36[A102]              	push	word [top_of_cdss]
 25247 00001FBD 07                      	pop	es			; es -> confbot
 25248                                  
 25249 00001FBE 8B36[D403]              	mov	si,[org_count]
 25250 00001FC2 8936[D203]              	mov	[count],si		; set count
 25251 00001FC6 31F6                    	xor	si,si ; 0
 25252 00001FC8 8936[D603]                      mov     [chrptr],si		; reset chrptr
 25253 00001FCC 8936[2B03]                      mov     [linecount],si		; reset linecount
 25254                                  
 25255 00001FD0 E86807                  	call	getchr
 25256 00001FD3 EB06                    	jmp	short conflp
 25257                                  
 25258                                  getcom:
 25259 00001FD5 E8B20E                          call    organize                ; organize the file
 25260 00001FD8 E86007                  	call	getchr
 25261                                  conflp: 
 25262 00001FDB 72D2                    	jc	short endconv
 25263                                  
 25264 00001FDD FF06[2B03]                      inc     word [linecount]	; increase linecount
 25265                                  
 25266 00001FE1 C606[3314]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 25267 00001FE6 C606[3614]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 25268 00001FEB 3C0A                    	cmp	al,lf			; linefeed?
 25269 00001FED 7416                    	je	short blank_line	;  then ignore this line.
 25270                                  
 25271                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25272                                  %if 0
 25273                                  
 25274                                  ;ifdef	MULTI_CONFIG
 25275                                  
 25276                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 25277                                  ;   number immediately following it....
 25278                                  
 25279                                          mov     [config_cmd],al         ; save original command code
 25280                                  	;and	al,NOT CONFIG_OPTION_QUERY
 25281                                  	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 25282                                          cmp     byte [config_multi],0	; is this a multi-config config.sys?
 25283                                          je      short not_final		; no, line number is not embedded
 25284                                  
 25285                                          push    ax                      ;
 25286                                          call    getchr                  ; ignore end-of-image errors,
 25287                                          mov     ah,al                   ; because if there's an error
 25288                                          call    getchr                  ; fetching the line number that's
 25289                                          xchg    al,ah                   ; supposed to be there, the next
 25290                                          mov     [linecount],ax          ; getchr call will get the same error
 25291                                          pop     ax
 25292                                  ;
 25293                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 25294                                  ;   which to obtain its original program name, it grovels through all of
 25295                                  ;   memory to find the filename that was used to exec it; it wants to find
 25296                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 25297                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 25298                                  ;   immediately before the filename, but since we are now storing line # info
 25299                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 25300                                  ;   spot.
 25301                                  ;
 25302                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 25303                                  ;   over the line number info, since we no longer need that info anyway. This
 25304                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 25305                                  ;   retrieved.
 25306                                  ;
 25307                                          cmp	byte [multi_pass_id],2	; final pass?
 25308                                          jb	short not_final		; no
 25309                                          ;test	word [install_flag],have_install_cmd
 25310                                  	test	byte [install_flag],have_install_cmd ; 1
 25311                                          jz	short final		; no install cmds, so yes it is
 25312                                          cmp	byte [multi_pass_id],3	; final pass?
 25313                                          jb	short not_final		; no
 25314                                  final:                                  ;
 25315                                  	mov	[es:si],al		; save backward-compatible command code
 25316                                  not_final:                              ;
 25317                                  ;endif
 25318                                  
 25319                                  %endif
 25320 00001FEF 88C4                    	mov	ah,al
 25321 00001FF1 E84707                  	call	getchr
 25322 00001FF4 7314                    	jnc	short tryi
 25323                                  
 25324 00001FF6 803E[4903]02            	cmp	byte [multi_pass_id],2
 25325                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 25326                                  	; 27/10/2022
 25327 00001FFB 73B2                    	jnb	short endconv	
 25328 00001FFD E90707                  	jmp	badop
 25329                                  	
 25330                                  coff:	
 25331                                  	; 11/12/2022
 25332                                  	; ds = cs
 25333                                  	;push	cs
 25334                                  	;pop	ds
 25335 00002000 E89E10                  	call	newline
 25336 00002003 EBD6                    	jmp	short conflp	; 13/05/2019
 25337                                  
 25338                                  blank_line:
 25339 00002005 E83307                  	call	getchr
 25340 00002008 EBD1                    	jmp	short conflp
 25341                                  
 25342                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25343                                  ; 11/12/2022
 25344                                  ; (there is not a jump or call to here from anywhere!)
 25345                                  ;coff_p:
 25346                                  	;push	cs
 25347                                  	;pop	ds
 25348                                  
 25349                                  ;to handle install= commands,we are going to use multi-pass.
 25350                                  ;the first pass handles the other commands and only set install_flag when
 25351                                  ;it finds any install command. the second pass will only handle the
 25352                                  ;install= command.
 25353                                  
 25354                                  ;------------------------------------------------------------------------------
 25355                                  ;install command
 25356                                  ;------------------------------------------------------------------------------
 25357                                  
 25358                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25359                                  	; (SYSINIT:2250h)
 25360                                  tryi:
 25361 0000200A 803E[4903]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 25362 0000200F 7503                    	jne	short not_init_pass
 25363 00002011 E92301                  	jmp	multi_try_doshi
 25364                                  not_init_pass:
 25365 00002014 803E[4903]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 25366                                          ; 11/12/2022
 25367                                  	;je	short multi_pass_coff2	; now it is NOPs
 25368 00002019 74E5                    	je	short coff
 25369                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25370                                  	;je	short multi_pass_coff	
 25371                                  					; This pass can be made use of if
 25372                                  					; we want do some config.sys process
 25373                                  					; after device drivers are loaded
 25374                                  					; and before install= commands
 25375                                  					; are processed
 25376                                  
 25377 0000201B 803E[4903]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 25378 00002020 7411                    	je	short multi_try_i
 25379 00002022 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 25380                                  	; 11/12/2022
 25381                                  	;je	short multi_pass_coff2
 25382 00002025 74D9                    	je	short coff
 25383                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25384                                  	;je	short multi_pass_coff	
 25385                                  
 25386                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 25387                                  ;       but don't process them now.        
 25388                                          
 25389 00002027 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 25390                                  	;jne	short precheck_installhigh ; the first pass is for normal operation.
 25391                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25392 0000202A 752A                    	jne	short tryb	
 25393                                  	
 25394                                  	;or	word [install_flag],have_install_cmd ; set the flag
 25395 0000202C 800E[4A03]01            	or	byte [install_flag],have_install_cmd ; 1
 25396                                  multi_pass_coff2:
 25397 00002031 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 25398                                  
 25399                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25400                                  ;precheck_installhigh:
 25401                                  ;       cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 25402                                  ;       jne     short tryb		; carry on with normal processing
 25403                                  ;	;or	word [install_flag],have_install_cmd
 25404                                  ;	or	byte [install_flag],have_install_cmd ; 1
 25405                                  ;       jmp	short coff
 25406                                  
 25407                                  multi_try_i:
 25408 00002033 80FC49                          cmp     ah, CONFIG_INSTALL ; 'I' ; install= command?
 25409                                  	;jne	short multi_try_n	; no, check for installhigh
 25410                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25411 00002036 7505                    	jne	short multi_pass_filter
 25412                                  
 25413                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25414                                  ;;ifdef	MULTI_CONFIG
 25415                                  ;       call    query_user              ; query the user if config_cmd
 25416                                  ;       jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25417                                  ;;endif
 25418                                  
 25419 00002038 E806F0                  	call	do_install_exec 	;install it.
 25420 0000203B EBC3                    	jmp	short coff		;to handle next install= command.
 25421                                  
 25422                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25423                                  %if 0
 25424                                  
 25425                                  multi_try_n:
 25426                                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 25427                                          jne	short multi_pass_filter	; no. ignore this.
 25428                                  ;ifdef	MULTI_CONFIG
 25429                                          call    query_user              ; query the user if config_cmd
 25430                                          jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25431                                  ;endif
 25432                                  
 25433                                  ;       The memory environment is in its normal DOS state, so do
 25434                                  ;       the standard calls to set the alloc strategy for loading high
 25435                                  
 25436                                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 25437                                  	int	21h			;get alloc strategy
 25438                                  	mov	bx,ax
 25439                                          push    bx                      ; save for the return
 25440                                  
 25441                                          or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 25442                                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 25443                                  	int	21h			;set alloc strategy
 25444                                  
 25445                                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 25446                                          int     21h                     ; get link state
 25447                                          xor     ah,ah                   ; clear top byte
 25448                                          push    ax                      ; save for return
 25449                                  
 25450                                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 25451                                  	mov	bx,1
 25452                                  	int	21h			;link in UMBs
 25453                                  
 25454                                  	call	do_install_exec 	;install it.
 25455                                  
 25456                                          mov     ax,(ALLOCOPER<<8)|3
 25457                                          pop     bx                      ; recover original link state
 25458                                          int     21h
 25459                                          pop     bx                      ; recover original alloc strategy
 25460                                          mov     ax,(ALLOCOPER<<8)|1
 25461                                          int     21h
 25462                                  
 25463                                  	jmp	coff			;to handle next install= command.
 25464                                  
 25465                                  %endif
 25466                                  
 25467                                  multi_pass_filter:
 25468 0000203D 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 25469 00002040 740A                    	je	short multi_pass_adjust
 25470 00002042 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 25471 00002045 7405                    	je	short multi_pass_adjust
 25472 00002047 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 25473 0000204A 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 25474                                  
 25475                                  multi_pass_adjust:			; these commands need to
 25476 0000204C FF0E[D603]              	dec	word [chrptr]		;  adjust chrptr,count
 25477 00002050 FF06[D203]              	inc	word [count]		;  for newline proc.
 25478                                  
 25479                                  multi_pass_coff:
 25480                                  	; 11/12/2022
 25481 00002054 EBAA                    	jmp	short coff		; to handle next install= commands.
 25482                                  
 25483                                  ;------------------------------------------------------------------------------
 25484                                  ; buffer command
 25485                                  ;------------------------------------------------------------------------------
 25486                                  
 25487                                  ;******************************************************************************
 25488                                  ;									      *
 25489                                  ; function: parse the parameters of buffers= command.			      *
 25490                                  ;									      *
 25491                                  ; input :								      *
 25492                                  ;	es:si -> parameters in command line.				      *
 25493                                  ; output:								      *
 25494                                  ;	buffers set							      *
 25495                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 25496                                  ;	h_buffers set if secondary buffer cache specified.		      *
 25497                                  ;									      *
 25498                                  ; subroutines to be called:						      *
 25499                                  ;	sysinit_parse							      *
 25500                                  ; logic:								      *
 25501                                  ; {									      *
 25502                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 25503                                  ;	set dx,cx to 0; 						      *
 25504                                  ;	reset buffer_slash_x;						      *
 25505                                  ;	while (end of command line)					      *
 25506                                  ;	{ sysinit_parse;						      *
 25507                                  ;	  if (no error) then						      *
 25508                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 25509                                  ;		    buffer_slash_x = 1					      *
 25510                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 25511                                  ;			  buffers = result_val._$P_picked_val;		      *
 25512                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 25513                                  ;	  else	{show error message;error exit} 			      *
 25514                                  ;	};								      *
 25515                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 25516                                  ; };									      *
 25517                                  ;									      *
 25518                                  ;******************************************************************************
 25519                                  
 25520                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25521                                  	; (SYSINIT:229Ch)
 25522                                  tryb:
 25523 00002056 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 25524 00002059 7557                    	jne	short tryc
 25525                                  
 25526                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25527                                  ;;ifdef	MULTI_CONFIG
 25528                                  ;       call    query_user              ; query the user if config_cmd
 25529                                  ;       jc      short tryc		; has the CONFIG_OPTION_QUERY bit set
 25530                                  ;;endif
 25531                                  
 25532                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25533                                  	; 18/12/2022
 25534 0000205B 31C9                    	xor	cx,cx
 25535                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 25536 0000205D 880E[4E1D]              	mov	[p_buffer_slash_x],cl ; 0
 25537                                  
 25538 00002061 BF[071D]                	mov	di,buf_parms
 25539                                  	;xor	cx,cx	; 18/12/2022
 25540                                  	; 04/01/2023
 25541                                  	;mov	dx,cx
 25542                                  do7:
 25543 00002064 E87D06                  	call	sysinit_parse
 25544 00002067 7303                    	jnc	short if7		; parse error,
 25545                                  	; 04/01/2023
 25546                                  	;call	badparm_p		;  and show messages and end the search loop.
 25547                                  	;;jmp	short sr7
 25548                                  	; 31/12/2022
 25549                                  ;sr7:
 25550                                  	;jmp	coff
 25551                                  	; 04/01/2023
 25552 00002069 E9F605                  	jmp	badparm_p_coff
 25553                                  if7:
 25554 0000206C 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 25555 0000206F 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 25556                                  	;cmp	word [result_val_swoff],switch_x
 25557 00002071 813E[521D][471D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 25558                                  	;jne	short if11
 25559                                  	; 31/12/2022
 25560 00002077 74EB                    	je	short do7 ;je short en11
 25561                                  
 25562                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 25563                                  	;jmp	short en11 ; 31/12/2022
 25564                                  if11:
 25565                                  	;mov	ax,[rv_dword]
 25566 00002079 A1[541D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 25567 0000207C 83F901                  	cmp	cx,1
 25568 0000207F 7505                    	jne	short if13
 25569                                  
 25570 00002081 A3[4A1D]                	mov	[p_buffers],ax
 25571                                  	;jmp	short en11
 25572                                  	; 31/12/2022
 25573 00002084 EBDE                    	jmp	short do7
 25574                                  if13:
 25575 00002086 A3[4C1D]                	mov	[p_h_buffers],ax
 25576                                  en11:
 25577 00002089 EBD9                    	jmp	short do7
 25578                                  en7:
 25579 0000208B 833E[4A1D]63            	cmp	word [p_buffers],99
 25580 00002090 760B                    	jbe	short if18
 25581                                  
 25582                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 25583                                  ;	jne	short if18
 25584                                  
 25585 00002092 E87E06                  	call	badparm_p
 25586 00002095 C706[4C1D]0000          	mov	word [p_h_buffers],0
 25587 0000209B EB12                    	jmp	short sr7
 25588                                  if18:
 25589 0000209D A1[4A1D]                	mov	ax,[p_buffers]	; we don't have any problem.
 25590 000020A0 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 25591                                  
 25592 000020A3 A1[4C1D]                	mov	ax,[p_h_buffers]
 25593 000020A6 A3[9902]                	mov	[h_buffers],ax
 25594                                  
 25595                                  ;	mov	al,[p_buffer_slash_x]	; M016
 25596                                  ;	mov	[buffer_slash_x],al
 25597                                  
 25598 000020A9 A1[2B03]                	mov	ax,[linecount]
 25599 000020AC A3[3503]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 25600                                  	; 31/12/2022
 25601                                  	;jmp	short sr7
 25602                                  	; 04/01/2023
 25603                                  sr7:
 25604 000020AF E94EFF                  	jmp	coff
 25605                                  
 25606                                  ;------------------------------------------------------------------------------
 25607                                  ; break command
 25608                                  ;------------------------------------------------------------------------------
 25609                                  
 25610                                  ;****************************************************************************
 25611                                  ;									    *
 25612                                  ; function: parse the parameters of break = command.			    *
 25613                                  ;									    *
 25614                                  ; input :								    *
 25615                                  ;	es:si -> parameters in command line.				    *
 25616                                  ; output:								    *
 25617                                  ;	turn the control-c check on or off.				    *
 25618                                  ;									    *
 25619                                  ; subroutines to be called:						    *
 25620                                  ;	sysinit_parse							    *
 25621                                  ; logic:								    *
 25622                                  ; {									    *
 25623                                  ;	set di to brk_parms;						    *
 25624                                  ;	set dx,cx to 0; 						    *
 25625                                  ;	while (end of command line)					    *
 25626                                  ;	{ sysinit_parse;						    *
 25627                                  ;	  if (no error) then						    *
 25628                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 25629                                  ;		   set p_ctrl_break,on;					    *
 25630                                  ;	       else					  /*off 	 */ *
 25631                                  ;		   set p_ctrl_break,off;				    *
 25632                                  ;	  else {show message;error_exit};				    *
 25633                                  ;	};								    *
 25634                                  ;	if (no error) then						    *
 25635                                  ;	   dos function call to set ctrl_break check according to	    *
 25636                                  ; };									    *
 25637                                  ;									    *
 25638                                  ;****************************************************************************
 25639                                  
 25640                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25641                                  	; (SYSINIT:22FFh)
 25642                                  tryc:
 25643 000020B2 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 25644 000020B5 7534                    	jne	short trym
 25645                                  
 25646                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25647                                  ;;ifdef MULTI_CONFIG
 25648                                  ;       call    query_user              ; query the user if config_cmd
 25649                                  ;       jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 25650                                  ;;endif
 25651 000020B7 BF[581D]                	mov	di,brk_parms
 25652 000020BA 31C9                    	xor	cx,cx
 25653                                  	; 04/01/2023
 25654                                  	;mov	dx,cx
 25655                                  do22:
 25656 000020BC E82506                  	call	sysinit_parse
 25657 000020BF 7303                    	jnc	short if22		; parse error
 25658                                  	;call	badparm_p		;  show message and end the search loop.
 25659                                  	;;jmp	short sr22
 25660                                  	; 31/12/2022
 25661                                  ;sr22:
 25662                                  	;jmp	coff
 25663                                  	; 04/01/2023
 25664 000020C1 E99E05                  	jmp	badparm_p_coff
 25665                                  if22:
 25666 000020C4 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 25667 000020C7 7415                    	je	short en22		; then end the $endloop
 25668                                  
 25669                                  	;cmp	byte [result_val_itag],1
 25670 000020C9 803E[511D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 25671 000020CE 7507                    	jne	short if26
 25672                                  
 25673 000020D0 C606[7D1D]01            	mov	byte [p_ctrl_break],1	; turn it on
 25674                                  	;jmp	short en26
 25675                                  	; 31/12/2022
 25676 000020D5 EBE5                    	jmp	short do22
 25677                                  if26:
 25678 000020D7 C606[7D1D]00            	mov	byte [p_ctrl_break],0	; turn it off
 25679                                  en26:
 25680 000020DC EBDE                    	jmp	short do22		; we actually set the ctrl break
 25681                                  en22:
 25682 000020DE B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 25683 000020E0 B001                    	mov	al,1
 25684 000020E2 8A16[7D1D]              	mov	dl,[p_ctrl_break]
 25685 000020E6 CD21                    	int	21h
 25686                                  	; 31/12/2022
 25687                                  	;jmp	short sr22
 25688                                  	; 04/01/2023
 25689                                  sr22:
 25690 000020E8 E915FF                  	jmp	coff
 25691                                  
 25692                                  ;------------------------------------------------------------------------------
 25693                                  ; multitrack command
 25694                                  ;------------------------------------------------------------------------------
 25695                                  
 25696                                  ;******************************************************************************
 25697                                  ;									      *
 25698                                  ; function: parse the parameters of multitrack= command.		      *
 25699                                  ;									      *
 25700                                  ; input :								      *
 25701                                  ;	es:si -> parameters in command line.				      *
 25702                                  ; output:								      *
 25703                                  ;	turn multrk_flag on or off.					      *
 25704                                  ;									      *
 25705                                  ; subroutines to be called:						      *
 25706                                  ;	sysinit_parse							      *
 25707                                  ; logic:								      *
 25708                                  ; {									      *
 25709                                  ;	set di to brk_parms;						      *
 25710                                  ;	set dx,cx to 0; 						      *
 25711                                  ;	while (end of command line)					      *
 25712                                  ;	{ sysinit_parse;						      *
 25713                                  ;	  if (no error) then						      *
 25714                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 25715                                  ;		   set p_mtrk,on;					      *
 25716                                  ;	       else					  /*off 	 */   *
 25717                                  ;		   set p_mtrk,off;					      *
 25718                                  ;	  else {show message;error_exit};				      *
 25719                                  ;	};								      *
 25720                                  ;	if (no error) then						      *
 25721                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 25722                                  ;									      *
 25723                                  ; };									      *
 25724                                  ;									      *
 25725                                  ;******************************************************************************
 25726                                  
 25727                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25728                                  trym:
 25729 000020EB 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 25730 000020EE 7569                    	jne	short tryu
 25731                                  
 25732                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25733                                  ;;ifdef	MULTI_CONFIG
 25734                                  ;       call    query_user      ; query the user if config_cmd
 25735                                  ;       jc      short tryu	; has the CONFIG_OPTION_QUERY bit set
 25736                                  ;;endif
 25737 000020F0 BF[5C1E]                	mov	di,mtrk_parms
 25738 000020F3 31C9                    	xor	cx,cx
 25739                                  	; 04/01/2023
 25740                                  	;mov	dx,cx
 25741                                  do31:
 25742 000020F5 E8EC05                  	call	sysinit_parse
 25743 000020F8 7303                    	jnc	short if31	; parse error
 25744                                  	;call	badparm_p	;  show message and end the search loop.
 25745                                  	;;jmp	short sr31
 25746                                  	; 31/12/2022
 25747                                  ;sr31:
 25748                                  	;jmp	coff
 25749                                  	; 04/01/2023
 25750 000020FA E96505                  	jmp	badparm_p_coff
 25751                                  if31:
 25752 000020FD 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 25753 00002100 7415                    	je	short en31	; then end the $endloop
 25754                                  
 25755                                  	;cmp	byte [result_val_itag],1
 25756 00002102 803E[511D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 25757 00002107 7507                    	jne	short if35
 25758                                  
 25759 00002109 C606[701E]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 25760                                  	;jmp	short en35
 25761                                  	; 31/12/2022
 25762 0000210E EBE5                    	jmp	short do31
 25763                                  if35:
 25764 00002110 C606[701E]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 25765                                  en35:
 25766 00002115 EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 25767                                  en31:
 25768 00002117 1E                      	push	ds
 25769                                  	;;mov	ax,Bios_Data ; 70h
 25770                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 25771                                  	; 21/10/2022
 25772 00002118 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 25773 0000211B 8ED8                    	mov	ds,ax
 25774                                  
 25775 0000211D 2E803E[701E]00          	cmp	byte [cs:p_mtrk],0
 25776 00002123 7508                    	jne	short if39
 25777                                  
 25778 00002125 C706[2F05]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 25779 0000212B EB06                    	jmp	short en39
 25780                                  if39:
 25781 0000212D C706[2F05]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 25782                                  en39:
 25783 00002133 1F                      	pop	ds
 25784                                  	; 31/12/2022
 25785                                  	;jmp	short sr31
 25786                                  	; 04/01/2023
 25787                                  sr31:
 25788 00002134 E9C9FE                  	jmp	coff
 25789                                  
 25790                                  ;----------------------------------------------------------------------------
 25791                                  ; DOS=HIGH/LOW command
 25792                                  ;----------------------------------------------------------------------------
 25793                                  
 25794                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25795                                  multi_try_doshi:
 25796 00002137 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 25797 0000213A 7403                    	je	short it_is_h
 25798                                  skip_it:
 25799 0000213C E9FEFE                  	jmp	multi_pass_filter
 25800                                  it_is_h:				; M003 - removed initing DevUMB
 25801                                  					;	 & runhigh
 25802                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25803                                  ;;ifdef	MULTI_CONFIG
 25804                                  ;       call    query_user              ; query the user if config_cmd
 25805                                  ;       jc      short skip_it		; has the CONFIG_OPTION_QUERY bit set
 25806                                  ;;endif
 25807 0000213F BF[A71E]                	mov	di,dos_parms
 25808 00002142 31C9                    	xor	cx,cx
 25809                                  	; 04/01/2023
 25810                                  	;mov	dx,cx
 25811                                  h_do_parse:
 25812 00002144 E89D05                  	call	sysinit_parse
 25813 00002147 7303                    	jnc	short h_parse_ok	; parse error
 25814                                  h_badparm:
 25815                                  	; 04/01/2023
 25816                                  	;call	badparm_p		; show message and end the search loop.
 25817                                  	;;jmp	short h_end
 25818                                  	; 11/12/2022
 25819                                  ;h_end:
 25820                                  	;jmp	coff
 25821                                  	; 04/01/2023
 25822 00002149 E91605                  	jmp	badparm_p_coff	
 25823                                  h_parse_ok:
 25824 0000214C 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 25825 0000214F 7405                    	je	short h_end		; then end the $endloop
 25826 00002151 E82D06                  	call	ProcDOS
 25827 00002154 EBEE                    	jmp	short h_do_parse
 25828                                  	; 11/12/2022
 25829                                  	; 04/01/2023
 25830                                  h_end:
 25831 00002156 E9A7FE                  	jmp	coff
 25832                                  
 25833                                  ;-----------------------------------------------------------------------------
 25834                                  ; devicehigh command
 25835                                  ;-----------------------------------------------------------------------------
 25836                                  
 25837                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25838                                  tryu:
 25839 00002159 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 25840 0000215C 7539                    	jne	short tryd
 25841                                  
 25842                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25843                                  ;;ifdef	MULTI_CONFIG
 25844                                  ;       call    query_user              ; query the user if config_cmd
 25845                                  ;       jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 25846                                  ;;endif
 25847                                  
 25848                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25849                                  ;	call	InitVar
 25850                                  ;	call	ParseSize		; process the size= option
 25851                                  ;	;jnc	short tryu_0
 25852                                  	
 25853                                  	;jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 25854                                  
 25855                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25856                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 25857                                  	;mov	[cs:badparm_seg], es
 25858                                  	; 11/12/2022
 25859                                  	; ds = cs
 25860 0000215E 8936[3714]              	mov	[badparm_off], si
 25861 00002162 8C06[3914]              	mov	[badparm_seg], es
 25862                                  	;
 25863 00002166 E88A08                  	call	ParseSize
 25864 00002169 7303                    	jnc	short tryu_2	; 28/10/2022
 25865                                  
 25866                                  	;call	badparm_p
 25867                                  	;jmp	coff
 25868                                  	; 04/01/2023
 25869 0000216B E9F404                  	jmp	badparm_p_coff
 25870                                  
 25871                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25872                                  ;tryu_0:
 25873                                  ;	mov	ax,[cs:DevSizeOption]
 25874                                  ;	or	ax,ax
 25875                                  ;	jnz	short tryu_2
 25876                                  ;
 25877                                  ;	call	ParseVar
 25878                                  ;	jnc	short tryu_2
 25879                                  ;tryu_1:
 25880                                  ;	mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 25881                                  ;	mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 25882                                  ;	call	badparm_p		; so all we have to do is choke and
 25883                                  ;	jmp	coff			; die, rather verbosely.
 25884                                  
 25885                                  tryu_2:	
 25886 0000216E 56                      	push	si
 25887 0000216F 06                      	push	es
 25888                                  tryu_3:
 25889 00002170 268A04                  	mov	al,[es:si]
 25890 00002173 3C0D                    	cmp	al,cr
 25891 00002175 740C                    	je	short tryu_4
 25892 00002177 3C0A                    	cmp	al,lf
 25893 00002179 7408                    	je	short tryu_4
 25894 0000217B E8080F                  	call	delim
 25895 0000217E 7403                    	jz	short tryu_4
 25896 00002180 46                      	inc	si
 25897 00002181 EBED                    	jmp	short tryu_3
 25898                                  tryu_4:	
 25899                                  	; 11/12/2022
 25900                                  	; ds = cs
 25901 00002183 A2[1C1F]                	mov	[DevSavedDelim],al
 25902                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 25903                                  					;  it with null
 25904                                  	; 18/12/2022
 25905 00002186 29DB                    	sub	bx,bx
 25906 00002188 26881C                  	mov	[es:si],bl ; 0
 25907                                   	;mov	byte [es:si],0
 25908                                  
 25909 0000218B 07                      	pop	es
 25910 0000218C 5E                      	pop	si
 25911                                  
 25912                                  ;------------------------------------------------------------------------------
 25913                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 25914                                  ;------------------------------------------------------------------------------
 25915                                  
 25916                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25917                                  ;
 25918                                  ;	call	UmbTest			; See if UMBs are around...
 25919                                  ;	jnc	short NrmTst		; ...yep. So do that normal thang.
 25920                                  ;
 25921                                  ;	mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 25922                                  ;	jmp	short LoadDevice
 25923                                  
 25924                                  ;------------------------------------------------------------------------------
 25925                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 25926                                  ;------------------------------------------------------------------------------
 25927                                  
 25928                                  NrmTst:
 25929                                  	; 11/12/2022
 25930                                  	; ds = cs
 25931                                  	;;mov	byte [cs:DeviceHi],0
 25932                                  	;mov	byte [DeviceHi],0
 25933                                  	; 18/12/2022
 25934                                  	; bx = 0
 25935 0000218D 381E[F81E]              	cmp	[DevUMB],bl ; 0
 25936                                  	;cmp	byte [DevUMB],0
 25937                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 25938 00002191 7417                    	je	short LoadDevice	; no, we don't
 25939                                  	;mov	byte [cs:DeviceHi],1
 25940                                  	; 11/12/2022
 25941                                  	;mov	byte [DeviceHi],1
 25942                                  	; 18/12/2022
 25943 00002193 FEC3                    	inc	bl ; mov bl,1 ; (*)
 25944                                  	; 11/12/2022
 25945                                  	;jmp	short LoadDevice2	; 11/12/2022
 25946 00002195 EB13                    	jmp	short LoadDevice
 25947                                  
 25948                                  ;------------------------------------------------------------------------------
 25949                                  ; device command
 25950                                  ;------------------------------------------------------------------------------
 25951                                  
 25952                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25953                                  	; (SYSINIT:2401h)
 25954                                  tryd:
 25955                                  	; 11/12/2022
 25956 00002197 31DB                    	xor 	bx, bx
 25957                                  	;
 25958 00002199 80FC44                          cmp     ah,CONFIG_DEVICE ;  'D'
 25959 0000219C 7403                    	je	short gotd
 25960                                  skip_it2:
 25961 0000219E E93502                  	jmp	tryq
 25962                                  gotd:
 25963                                  
 25964                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25965                                  ;;ifdef	MULTI_CONFIG
 25966                                  ;       call    query_user              ; query the user if config_cmd
 25967                                  ;       jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 25968                                  ;;endif
 25969                                  	; 11/12/2022
 25970                                  	; ds = cs
 25971                                  	;mov	byte [DeviceHi],0
 25972                                  	;mov	word [DevSizeOption],0
 25973 000021A1 891E[081F]              	mov	[DevSizeOption],bx ; 0
 25974 000021A5 C606[1C1F]20            	mov	byte [DevSavedDelim],' '
 25975                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 25976                                  	;mov	word [cs:DevSizeOption],0
 25977                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 25978                                  					;  be replaced with a ' '
 25979                                  LoadDevice:                             ; device= or devicehigh= command.
 25980                                  	; 11/12/2022
 25981                                  	;mov	byte [DeviceHi],0
 25982 000021AA 881E[071F]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 25983                                  LoadDevice2:
 25984                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 25985                                  	;
 25986                                  	;push    cs
 25987                                          ;pop     ds
 25988                                  	;
 25989                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 25990                                  	;mov	[bpb_addr+2],es
 25991                                  	;
 25992                                  	;mov	[DevCmdLine],si		; save it for ourself
 25993                                  	;mov	[DevCmdLine+2],es
 25994                                  	;
 25995                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 25996                                  
 25997                                  	; 11/12/2022
 25998                                  	; ds = cs
 25999                                  	;mov	bx,cs
 26000                                  	;mov	ds,bx
 26001                                  
 26002                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 26003 000021AE 8936[F803]              	mov	[bpb_addr],si
 26004                                  	;mov	[cs:bpb_addr+2],es
 26005 000021B2 8C06[FA03]              	mov	[bpb_addr+2],es
 26006                                  
 26007                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 26008 000021B6 8936[181F]              	mov	[DevCmdLine],si
 26009                                  	;mov	[cs:DevCmdLine+2],es	
 26010 000021BA 8C06[1A1F]              	mov	[DevCmdLine+2],es	
 26011                                  
 26012 000021BE E8080F                  	call	round
 26013                                  	
 26014 000021C1 E83F07                  	call	SizeDevice
 26015 000021C4 7215                    	jc	short BadFile
 26016                                  
 26017                                  	; 11/12/2022
 26018                                  	; ds = cs
 26019                                  
 26020                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 26021                                  
 26022                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26023                                  ;
 26024                                  ;	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 26025                                  ;
 26026                                  ;	mov	al,[DeviceHi]		; If not using upper memory,
 26027                                  ;	or	byte [DeviceHi],0	; Skip all this and go on to
 26028                                  ;	jz	short DevConvLoad	; the actual load.
 26029                                  ;
 26030                                  ;	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 26031                                  ;	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 26032                                  ;
 26033                                  ;	cmp	al,-1			; If umb0 not specified, it's old style
 26034                                  ;	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 26035                                  ;
 26036                                  ;	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 26037                                  ;
 26038                                  ;	call	GetLoadSize		; Returns size of first UMB specified
 26039                                  ;	or	ax,ax
 26040                                  ;	jz	short tryd_1		; If size1 not specified, nada to do:
 26041                                  ;
 26042                                  ;	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 26043                                  ;	jge	short DevConvLoad
 26044                                  ;
 26045                                  ;tryd_1: mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 26046                                  ;	call	StoLoadSize		; minsize for load UMB.
 26047                                  
 26048                                  ; - End DeviceHigh primary logic changes --------------------------------------
 26049                                  
 26050                                  DevConvLoad:
 26051                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26052 000021C6 E84F06                  	call	InitDevLoad
 26053                                  
 26054                                  	; 11/12/2022
 26055                                  	; ds = cs
 26056 000021C9 A1[EC1E]                	mov	ax,[DevLoadAddr]
 26057 000021CC 0306[EA1E]              	add	ax,[DevSize]
 26058 000021D0 7206                    	jc	short NoMem
 26059 000021D2 3906[EE1E]              	cmp	[DevLoadEnd],ax
 26060 000021D6 7312                    	jae	short LoadDev
 26061                                  	
 26062                                  	; 11/12/2022
 26063                                  	;mov	ax,[cs:DevLoadAddr]
 26064                                  	;add	ax,[cs:DevSize]
 26065                                  	;jc	short NoMem
 26066                                  	;cmp	[cs:DevLoadEnd],ax
 26067                                  	;jae	short LoadDev
 26068                                  NoMem:
 26069                                  	; 11/12/2022
 26070                                  	; ds = cs
 26071                                  	;jmp	mem_err
 26072 000021D8 E9310F                  	jmp	mem_err2
 26073                                  
 26074                                  BadFile:
 26075                                  	;28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26076                                  	;call	RetFromUM		; Does nothing if didn't call HideUMBs
 26077                                  	;cmp    byte [es:si],' '
 26078                                          ;jae	short tryd_2
 26079 000021DB 26803C0D                	cmp	byte [es:si],0Dh	; cr
 26080 000021DF 7503                            jne	short tryd_2
 26081 000021E1 E92305                  	jmp	badop
 26082                                  tryd_2:
 26083 000021E4 E87911                  	call	badload
 26084 000021E7 E916FE                  	jmp	coff
 26085                                  
 26086                                  LoadDev:
 26087 000021EA 06                      	push	es
 26088 000021EB 1F                      	pop	ds
 26089                                  
 26090 000021EC 89F2                    	mov	dx,si			;ds:dx points to file name
 26091 000021EE E86307                  	call	ExecDev			; load device driver using exec call
 26092                                  badldreset:
 26093 000021F1 1E                      	push	ds
 26094 000021F2 07                      	pop	es			;es:si back to config.sys
 26095 000021F3 0E                      	push	cs
 26096 000021F4 1F                      	pop	ds			;ds back to sysinit
 26097 000021F5 72E4                    	jc	short BadFile
 26098                                  goodld:
 26099                                  	; 11/12/2022
 26100                                  	; ds = cs
 26101                                  
 26102 000021F7 06                      	push	es
 26103 000021F8 56                      	push	si
 26104 000021F9 E87507                  	call	RemoveNull
 26105 000021FC 06                      	push	es
 26106 000021FD 56                      	push	si
 26107                                  
 26108 000021FE 0E                      	push	cs
 26109 000021FF 07                      	pop	es
 26110                                  
 26111 00002200 1E                      	push	ds
 26112 00002201 56                      	push	si
 26113                                  
 26114                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 26115                                  	; 31/12/2022
 26116                                  	; ds = cs
 26117 00002202 C536[F01E]              	lds	si,[DevEntry]
 26118                                  	
 26119                                  	;test	word [si+4],8000h
 26120                                  	; 11/12/2022
 26121 00002206 F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 26122                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 26123 0000220A 7511                    	jnz	short got_device_com_cont   ; no.
 26124                                  
 26125 0000220C 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 26126                                  	;cmp	byte [si+32],26
 26127 00002211 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 26128 00002215 7206                    	jb	short got_device_com_cont
 26129                                  
 26130 00002217 5E                      	pop	si
 26131 00002218 1F                      	pop	ds
 26132                                  
 26133 00002219 5E                      	pop	si			; clear the stack
 26134 0000221A 07                      	pop	es
 26135                                  
 26136                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26137                                  	;call	RetFromUM		; Do this before we leave
 26138                                  
 26139 0000221B EB57                    	jmp	short badnumblock
 26140                                  
 26141                                  got_device_com_cont:
 26142 0000221D 5E                      	pop	si
 26143 0000221E 1F                      	pop	ds
 26144                                  
 26145                                  	; 11/12/2022
 26146                                  	; ds = cs
 26147                                  
 26148 0000221F E88205                  	call	LieInt12Mem
 26149 00002222 E8E105                  	call	UpdatePDB		; update the PSP:2 value M020
 26150                                  
 26151                                  	; 11/12/2022
 26152                                  	; ds = cs
 26153 00002225 803E[3314]00            	cmp	byte [multdeviceflag],0
 26154                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 26155                                  					;  driver in the file ; M027
 26156 0000222A 750E                    	jne	short skip_pass_limit	;		      ; M027
 26157                                  
 26158                                  	; 11/12/2022
 26159                                  	; ds = cs
 26160                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 26161                                  	;mov	bx,[cs:DevLoadEnd]
 26162                                  	;mov	[cs:break_addr+2],bx
 26163                                  
 26164 0000222C C706[F403]0000          	mov	word [break_addr],0
 26165 00002232 8B1E[EE1E]              	mov	bx,[DevLoadEnd]
 26166 00002236 891E[F603]              	mov	[break_addr+2],bx
 26167                                  
 26168                                  skip_pass_limit:
 26169                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 26170                                  ;	number of installed devices (including DblSpace drives) where
 26171                                  ;	"drivenumber" is the number that the next block device will
 26172                                  ;	be assigned to. Because some naughty device drivers (like
 26173                                  ;	interlnk) look at the internal DOS variable instead of the
 26174                                  ;	value we pass it, we'll temporarily stick our value into
 26175                                  ;	DOS DATA while we're initializing the device drivers.
 26176                                  ;
 26177                                  ;	Note that this will make it impossible for this device
 26178                                  ;	driver to access the DblSpace drive letters, whether
 26179                                  ;	they are swapped-hosts or unswapped compressed drives,
 26180                                  ;	during its initialization phase.
 26181                                  
 26182                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26183                                  	;push	ds
 26184                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26185                                  	;
 26186                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 26187                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 26188                                  	;mov	ah,al
 26189                                  	;
 26190                                  	;xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 26191                                  	;pop	ds
 26192                                  	;
 26193                                  	;push	ax			; save real sysi_numio/ncds in ax
 26194                                  
 26195                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26196                                  	; (SYSINIT:24B9h)
 26197                                  
 26198 0000223A BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 26199 0000223D E8D50E                  	call	calldev 		; calldev (sdevstrat);
 26200 00002240 BB0800                  	mov	bx,SYSDEV.INT ; 8
 26201 00002243 E8CF0E                  	call	calldev 		; calldev (sdevint);
 26202                                  
 26203                                  	; 11/12/2022
 26204                                  	; ds <> cs
 26205                                  
 26206                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26207                                  	;pop	ax			; get real sysi_numio value
 26208                                  	;push	ds
 26209                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26210                                  	;mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 26211                                  	;pop	ds
 26212                                  
 26213                                  	; 11/12/2022
 26214 00002246 0E                      	push	cs
 26215 00002247 1F                      	pop	ds
 26216                                  
 26217 00002248 E88905                  	call	TrueInt12Mem
 26218                                  
 26219                                  	; 11/12/2022
 26220                                  	; ds = cs
 26221                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 26222                                  	;mov	[cs:DevBrkAddr],ax
 26223                                  	;mov	ax,[cs:break_addr+2]
 26224                                  	;mov	[cs:DevBrkAddr+2],ax
 26225 0000224B A1[F403]                	mov	ax,[break_addr]	
 26226 0000224E A3[F41E]                	mov	[DevBrkAddr],ax
 26227 00002251 A1[F603]                	mov	ax,[break_addr+2]
 26228 00002254 A3[F61E]                	mov	[DevBrkAddr+2],ax
 26229                                  
 26230                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26231                                  	;call	RetFromUM		; There we go... all done.
 26232                                  
 26233                                  	; 11/12/2022
 26234 00002257 803E[F81E]00            	cmp	byte [DevUMB],0	
 26235                                  	;cmp	byte [cs:DevUMB],0
 26236 0000225C 7403                    	je	short tryd_3
 26237 0000225E E83708                  	call	AllocUMB
 26238                                  	; 31/12/2022
 26239                                  	; ds= cs
 26240                                  tryd_3:
 26241                                  
 26242                                  ;ifndef ROMDOS
 26243                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 26244                                  
 26245                                  	; 11/12/2022
 26246                                  	; ds = cs
 26247                                  	
 26248                                  	;cmp	byte [cs:runhigh],0FFh
 26249 00002261 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 26250 00002266 7503                    	jne	short tryd_4
 26251                                  	
 26252                                  	; 11/12/2022
 26253                                  	; ds = cs
 26254 00002268 E872E6                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 26255                                  tryd_4:
 26256                                  ;endif ; ROMDOS
 26257                                  
 26258 0000226B 5E                      	pop	si
 26259 0000226C 1F                      	pop	ds
 26260 0000226D C60400                  	mov	byte [si],0		; *p = 0;
 26261                                  
 26262 00002270 0E                      	push	cs
 26263 00002271 1F                      	pop	ds
 26264                                  
 26265 00002272 EB1F                    	jmp	short was_device_com
 26266                                  
 26267                                  ;----------------------------------------------------------------------------
 26268                                  
 26269                                  ;02/04/2019 - Retro DOS v4.0
 26270                                  
 26271                                  badnumblock:
 26272 00002274 0E                      	push	cs
 26273 00002275 1F                      	pop	ds
 26274 00002276 BA[5A38]                	mov	dx,badblock
 26275 00002279 E80C11                  	call	print
 26276                                  
 26277                                  ;------ fall thru -----------------------------------------------------------
 26278                                  
 26279                                  erase_dev_do:				; modified to show message "error in config.sys..."
 26280                                  	
 26281                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 26282                                  	
 26283 0000227C 5E                      	pop	si
 26284 0000227D 07                      	pop	es
 26285                                  
 26286 0000227E 0E                      	push	cs
 26287 0000227F 1F                      	pop	ds
 26288                                  
 26289                                  skip1_resetmemhi:
 26290                                  	; 11/12/2022
 26291                                  	; ds = cs
 26292 00002280 833E[FD03]00            	cmp	word [configmsgflag],0
 26293                                  	;cmp	word [cs:configmsgflag],0
 26294 00002285 7409                    	je	short no_error_line_msg
 26295                                  
 26296 00002287 E8C804                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 26297                                  	; 11/12/2022
 26298                                  	; ds = cs
 26299                                  	;mov	word [cs:configmsgflag],0
 26300 0000228A C706[FD03]0000          	mov	word [configmsgflag],0	; set the default value again.
 26301                                  
 26302                                  no_error_line_msg:
 26303 00002290 E96DFD                  	jmp	coff
 26304                                  
 26305                                  ;----------------------------------------------------------------------------
 26306                                  
 26307                                  was_device_com:
 26308                                  	; 14/12/2022
 26309                                  	; ds = cs
 26310 00002293 A1[F61E]                	mov	ax,[DevBrkAddr+2]
 26311                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 26312 00002296 3B06[EE1E]              	cmp	ax,[DevLoadEnd]
 26313                                  	;cmp	ax,[cs:DevLoadEnd]
 26314 0000229A 7605                    	jbe	short breakok
 26315                                  
 26316 0000229C 5E                      	pop	si
 26317 0000229D 07                      	pop	es
 26318 0000229E E93AFF                  	jmp	BadFile
 26319                                  
 26320                                  breakok:
 26321                                  	; 14/12/2022
 26322                                  	; ds = cs
 26323 000022A1 C43E[6B02]              	les	di,[DOSINFO] 
 26324 000022A5 C516[F01E]              	lds	dx,[DevEntry]
 26325                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 26326 000022A9 89D6                    	mov	si,dx
 26327                                  
 26328                                  	; 14/11/2022
 26329                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 26330                                  
 26331                                  	; 14/12/2022
 26332                                  	; ds <> cs
 26333                                  	
 26334                                  	;mov	ax,[si+4]
 26335 000022AB 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 26336                                  	; 12/12/2022
 26337 000022AE F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 26338                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 26339 000022B1 7426                    	jz	short isblock
 26340                                  
 26341                                  ;------ lets deal with character devices
 26342                                  
 26343 000022B3 2E800E[3614]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26344 000022B9 E8E806                  	call	DevSetBreak		;go ahead and alloc mem for device
 26345                                  jc_edd:
 26346 000022BC 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 26347                                  
 26348                                  	; 12/12/2022
 26349 000022BE A801                    	test	al,ISCIN
 26350                                  	;test	ax,ISCIN ; 1		;is it a console in?
 26351 000022C0 7408                    	jz	short tryclk
 26352                                  
 26353 000022C2 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 26354 000022C6 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 26355                                  tryclk: 
 26356                                  	; 12/12/2022
 26357 000022CA A808                    	test	al,ISCLOCK
 26358                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 26359 000022CC 7408                    	jz	short golink
 26360                                  
 26361 000022CE 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 26362 000022D2 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 26363                                  golink: 
 26364 000022D6 E9B000                  	jmp	linkit
 26365                                  
 26366                                  ;------ deal with block device drivers
 26367                                  
 26368                                  isblock:
 26369 000022D9 2EA0[F303]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 26370 000022DD 08C0                    	or	al,al
 26371 000022DF 749B                    	jz	short erase_dev_do
 26372                                  	;mov	[si+10],al
 26373 000022E1 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 26374                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26375                                  	;add	[cs:driver_units],al	; keep total for all drivers in file
 26376                                  perdrv:
 26377 000022E4 98                      	cbw				; warning no device > 127 units
 26378 000022E5 89C1                    	mov	cx,ax
 26379 000022E7 88E6                    	mov	dh,ah
 26380                                  	;mov	dl,[es:di+32]
 26381 000022E9 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 26382 000022ED 88D4                    	mov	ah,dl
 26383 000022EF 00C4                    	add	ah,al			; check for too many devices
 26384 000022F1 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 26385 000022F4 7603                    	jbe	short ok_block
 26386 000022F6 E97BFF                  	jmp	badnumblock
 26387                                  
 26388                                  ok_block:
 26389 000022F9 2E800E[3614]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26390 000022FF E8A206                  	call	DevSetBreak		; alloc the device
 26391 00002302 72B8                    	jc	short jc_edd
 26392 00002304 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 26393                                  
 26394 00002308 2E0006[FC03]            	add	[cs:drivenumber],al	; remember amount for next device
 26395 0000230D 2EC51E[F803]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 26396                                  perunit:
 26397 00002312 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 26398                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 26399                                  	; 11/12/2022
 26400 00002317 26C46E00                	les	bp,[es:bp]
 26401                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26402                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 26403                                  scandpb:
 26404                                  	;cmp	word [es:bp+25],-1
 26405 0000231B 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 26406 00002320 7406                    	je	short foundpb
 26407                                  	;les	bp,[es:bp+25]
 26408 00002322 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 26409 00002326 EBF3                    	jmp	short scandpb
 26410                                  foundpb:
 26411 00002328 2EA1[F41E]              	mov	ax,[cs:DevBrkAddr]
 26412 0000232C 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 26413 00002330 2EA1[F61E]              	mov	ax,[cs:DevBrkAddr+2]
 26414 00002334 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 26415                                  
 26416 00002338 2EC42E[F41E]            	les	bp,[cs:DevBrkAddr]
 26417 0000233D 2E8306[F41E]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 26418                                  
 26419 00002343 E83D06                  	call	RoundBreakAddr
 26420                                  
 26421 00002346 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 26422 0000234C 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 26423                                  
 26424 00002351 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 26425 00002353 43                      	inc	bx
 26426 00002354 43                      	inc	bx			;point to next guy
 26427                                  	;mov	[es:bp+DPB.DRIVE],dx
 26428                                  	; 11/12/2022
 26429 00002355 26895600                	mov	[es:bp],dx ; 13/05/2019
 26430                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26431                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 26432                                  	
 26433 00002359 B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 26434 0000235B CD21                    	int	21h
 26435                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 26436                                  			; DS:SI -> BPB (BIOS Parameter Block)
 26437                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 26438                                  
 26439                                  	;mov	ax,[es:bp+2]
 26440 0000235D 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 26441 00002361 06                      	push	es
 26442 00002362 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 26443                                  	;cmp	ax,[es:di+10h]
 26444 00002367 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 26445 0000236B 07                      	pop	es
 26446                                  	;jna	short iblk_1
 26447                                  	;jmp	short bad_bpb_size_sector
 26448                                  	; 29/10/2022
 26449 0000236C 775A                    	ja	short bad_bpb_size_sector
 26450                                  iblk_1:
 26451 0000236E 1E                      	push	ds
 26452 0000236F 52                      	push	dx
 26453                                  
 26454 00002370 2EC516[F01E]            	lds	dx,[cs:DevEntry]
 26455                                  	;mov	[es:bp+13h],dx
 26456 00002375 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 26457                                  	;mov	[es:bp+15h],ds
 26458 00002379 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 26459                                  
 26460 0000237D 5A                      	pop	dx
 26461 0000237E 1F                      	pop	ds
 26462                                  
 26463 0000237F 42                      	inc	dx
 26464 00002380 FEC6                    	inc	dh
 26465 00002382 E28E                    	loop	perunit
 26466                                  
 26467 00002384 0E                      	push	cs
 26468 00002385 1F                      	pop	ds
 26469                                  
 26470 00002386 E84EE8                  	call	TempCDS 		; set cds for new drives
 26471                                  linkit:
 26472 00002389 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 26473 0000238E 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 26474 00002392 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 26475                                  
 26476 00002396 2EC536[F01E]            	lds	si,[cs:DevEntry]	;ds:si = device location
 26477 0000239B 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 26478 0000239F 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 26479 000023A3 8B04                    	mov	ax,[si]			;get pointer to next device
 26480 000023A5 2EA3[F01E]              	mov	[cs:DevEntry],ax	;and save it
 26481                                  
 26482 000023A9 890C                    	mov	[si],cx			;link in the driver
 26483 000023AB 895402                  	mov	[si+2],dx
 26484                                  enddev:
 26485 000023AE 5E                      	pop	si
 26486 000023AF 07                      	pop	es
 26487 000023B0 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 26488 000023B1 740B                    	jz	short coffj3
 26489                                  
 26490 000023B3 2EFE06[3314]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 26491 000023B8 E80B06                  	call	DevBreak		; M009
 26492                                  	; 11/12/2022
 26493                                  	; ds = cs (DevBreak)
 26494                                  
 26495                                  	; 03/04/2019 - Retro DOS v4.0
 26496                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 26497 000023BB E939FE                  	jmp	goodld			; otherwise pretend we loaded it in
 26498                                  coffj3: 
 26499                                  	; 18/12/2022
 26500                                  	; ax = 0
 26501 000023BE 2EA2[3314]              	mov	[cs:multdeviceflag],al ; 0
 26502                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 26503 000023C2 E80106                  	call	DevBreak
 26504                                  	; 11/12/2022
 26505                                  	; ds = cs (DevBreak)
 26506                                  	
 26507                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 26508                                  	;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 26509                                  ;					;  created a bogus arena to try
 26510                                  ;					;  to protect some of its resident-
 26511                                  ;					;  init code.
 26512                                  	;call	CheckDoubleSpace
 26513 000023C5 E938FC                  	jmp	coff
 26514                                  
 26515                                  ;----------------------------------------------------------------------------
 26516                                  
 26517                                  ;CheckDoubleSpace:
 26518                                  ;;;;	ifdef	dblspace_hooks
 26519                                  ;
 26520                                  ;;	Now check for two special MagicDrv cases:
 26521                                  ;;
 26522                                  ;;       a) the last driver load was MagicDrv final placement:
 26523                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 26524                                  ;;
 26525                                  ;;       b) MagicDrv is currently in temporary home:
 26526                                  ;;          -> call it to give it a chance to mount and shuffle drives
 26527                                  ;
 26528                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 26529                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 26530                                  ;
 26531                                  ;;	Now inquire of driver whether it is present, and final located
 26532                                  ;
 26533                                  ;	mov	ax,multMagicdrv ; 4A11h
 26534                                  ;	mov	bx,MD_VERSION ; 0
 26535                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 26536                                  ;	or	ax,ax			; is it there?
 26537                                  ;	jnz	short no_more_magic_calls ; done if not
 26538                                  ;
 26539                                  ;	test	dx,8000h		; is it final placed?
 26540                                  ;	jnz	short magic_not_yet_home ;  skip if not
 26541                                  ;
 26542                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 26543                                  ;;	don't keep checking it, and add its number of drive letters
 26544                                  ;;	to drivenumber.
 26545                                  ;
 26546                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 26547                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 26548                                  ;;					;  the drive number we'll pass to the
 26549                                  ;;					;  next loadable block device.
 26550                                  ;
 26551                                  ;	jmp	short no_more_magic_calls ; and finished.
 26552                                  ;
 26553                                  ;magic_not_yet_home:
 26554                                  ;	push	es
 26555                                  ;	push	si
 26556                                  ;
 26557                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 26558                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 26559                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 26560                                  ;
 26561                                  ;	mov	bx,2
 26562                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 26563                                  ;;					;   by this many units
 26564                                  ;
 26565                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 26566                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 26567                                  ;;					;  sees this, to prevent bad things
 26568                                  ;;					;  from happening if people run the
 26569                                  ;;					;  new driver with an old BIOS
 26570                                  ;	call	far [cs:MagicBackdoor]
 26571                                  ;
 26572                                  ;	pop	si
 26573                                  ;	pop	es
 26574                                  ;
 26575                                  ;no_more_magic_calls:
 26576                                  ;
 26577                                  ;;;;	endif
 26578                                  ;	retn
 26579                                  
 26580                                  ; 03/04/2019 - Retro DOS v4.0
 26581                                  
 26582                                  bad_bpb_size_sector:
 26583 000023C8 5E                      	pop	si
 26584 000023C9 07                      	pop	es
 26585 000023CA BA[7C37]                	mov	dx,badsiz_pre
 26586 000023CD BB[5A37]                	mov	bx,crlfm
 26587 000023D0 E8930F                  	call	prnerr
 26588                                  
 26589 000023D3 E92AFC                  	jmp	coff
 26590                                  
 26591                                  ;------------------------------------------------------------------------------
 26592                                  ; country command
 26593                                  ;      the syntax is:
 26594                                  ;	country=country id {,codepage {,path}}
 26595                                  ;	country=country id {,,path}	:default codepage id in dos
 26596                                  ;------------------------------------------------------------------------------
 26597                                  
 26598                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26599                                  	; (SYSINIT:2663h)
 26600                                  tryq:
 26601 000023D6 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 26602 000023D9 7403                    	je	short tryq_cont
 26603                                  skip_it3:
 26604 000023DB E90801                  	jmp	tryf
 26605                                  tryq_cont:
 26606                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26607                                  ;;ifdef	MULTI_CONFIG
 26608                                  ;       call    query_user		; query the user if config_cmd
 26609                                  ;       jc      short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 26610                                  ;;endif
 26611                                  	; 14/12/2022
 26612                                  	; ds = cs
 26613                                  	; bx = 0
 26614                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 26615                                  	;mov	word [cs:p_code_page],0
 26616 000023DE 881E[1134]              	mov	[cntry_drv],bl ; 0
 26617 000023E2 891E[B51D]              	mov	[p_code_page],bx ; 0
 26618                                  	
 26619 000023E6 BF[7E1D]                	mov	di,cntry_parms
 26620 000023E9 31C9                    	xor	cx,cx
 26621                                  	; 04/01/2023
 26622                                  	;mov	dx,cx
 26623                                  do52:
 26624 000023EB E8F602                  	call	sysinit_parse
 26625 000023EE 730B                    	jnc	short if52		; parse error,check error code and
 26626                                  
 26627 000023F0 E8E000                  	call	cntry_error		; show message and end the search loop.
 26628                                  	; 14/12/2022
 26629                                  	; ds = cs
 26630 000023F3 C706[B31D]FFFF          	mov	word [p_cntry_code],-1
 26631                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 26632 000023F9 EB34                    	jmp	short sr52
 26633                                  if52:
 26634 000023FB 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 26635 000023FE 742F                    	jz	short sr52		; then end the search loop
 26636                                  
 26637                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 26638                                  	; 14/12/2022
 26639                                  	; ds = cs
 26640 00002400 803E[501D]01            	cmp	byte [result_val],_$P_Number	
 26641                                  	;cmp	byte [cs:result_val],_$P_Number
 26642 00002405 7512                    	jnz	short if56
 26643                                  
 26644                                  	;;mov	ax,[cs:rw_dword]
 26645                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 26646                                  	; 14/12/2022
 26647 00002407 A1[541D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 26648 0000240A 83F901                  	cmp	cx,1
 26649 0000240D 7505                    	jne	short if57
 26650                                  
 26651                                  	;mov	[cs:p_cntry_code],ax
 26652                                  	; 14/12/2022
 26653 0000240F A3[B31D]                	mov	[p_cntry_code],ax
 26654                                  
 26655                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26656                                  	;jmp	short en57
 26657                                  	; 12/12/2022
 26658                                  	;jmp	short en56
 26659 00002412 EBD7                    	jmp	short do52
 26660                                  
 26661                                  if57:
 26662                                  	;mov	[cs:p_code_page],ax
 26663                                  	; 14/12/2022
 26664                                  	; ds = cs
 26665 00002414 A3[B51D]                	mov	[p_code_page],ax
 26666                                  en57:
 26667                                  	;jmp	short en56		; path entered
 26668                                  	; 12/12/2022
 26669 00002417 EBD2                    	jmp	short do52
 26670                                  
 26671                                  if56:
 26672 00002419 1E                      	push	ds
 26673 0000241A 06                      	push	es
 26674 0000241B 56                      	push	si
 26675 0000241C 57                      	push	di
 26676                                  
 26677 0000241D 0E                      	push	cs
 26678 0000241E 07                      	pop	es
 26679                                  
 26680                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 26681                                  	; 14/12/2022
 26682 0000241F C536[541D]              	lds	si,[rv_dword]
 26683 00002423 BF[1134]                	mov	di,cntry_drv
 26684 00002426 E82B0F                  	call	move_asciiz
 26685                                  
 26686 00002429 5F                      	pop	di
 26687 0000242A 5E                      	pop	si
 26688 0000242B 07                      	pop	es
 26689 0000242C 1F                      	pop	ds
 26690                                  
 26691                                  en56:
 26692 0000242D EBBC                    	jmp	short do52
 26693                                  
 26694                                  sr52:
 26695                                  	; 14/12/2022
 26696                                  	; ds = cs
 26697 0000242F 833E[B31D]FF            	cmp	word [p_cntry_code],-1
 26698                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 26699 00002434 7509                    	jne	short tryq_open
 26700 00002436 E9C7FB                  	jmp	coff
 26701                                  
 26702                                  tryqbad:				;"invalid country code or code page"
 26703 00002439 F9                      	stc
 26704 0000243A BA[C337]                	mov     dx,badcountry
 26705 0000243D EB79                    	jmp     tryqchkerr
 26706                                  
 26707                                  tryq_open:
 26708                                  	; 14/12/2022
 26709                                  	; ds = cs
 26710 0000243F 803E[1134]00            	cmp	byte [cntry_drv],0
 26711                                  	;cmp	byte [cs:cntry_drv],0
 26712 00002444 7405                    	je	short tryq_def
 26713 00002446 BA[1134]                	mov	dx,cntry_drv
 26714 00002449 EB03                    	jmp	short tryq_openit
 26715                                  
 26716                                  tryq_def:
 26717 0000244B BA[1334]                	mov	dx,cntry_root
 26718                                  tryq_openit:
 26719 0000244E B8003D                  	mov	ax,3D00h		;open a file
 26720 00002451 F9                      	stc
 26721 00002452 CD21                    	int	21h
 26722 00002454 7242                    	jc	short tryqfilebad	;open failure
 26723                                  
 26724                                  	; 14/12/2022
 26725                                  	; ds = cs
 26726 00002456 A3[D803]                	mov	[cntryfilehandle],ax
 26727                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 26728 00002459 89C3                    	mov	bx,ax
 26729 0000245B A1[B31D]                	mov	ax,[p_cntry_code]
 26730 0000245E 8B16[B51D]              	mov	dx,[p_code_page]
 26731                                  	;mov	ax,[cs:p_cntry_code]
 26732                                  	;mov	dx,[cs:p_code_page]	; now,ax=country id,bx=filehandle
 26733                                  	;mov	cx,[cs:memhi]
 26734 00002462 8B0E[E003]              	mov	cx,[memhi]
 26735 00002466 81C18001                	add	cx,384			; need 6k buffer to handle country.sys
 26736                                  					; M023
 26737                                  	; 14/12/2022
 26738                                  	; ds = cs
 26739 0000246A 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 26740                                  	;cmp	cx,[cs:ALLOCLIM]
 26741 0000246E 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 26742                                  
 26743 00002470 BE[1134]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 26744 00002473 803C00                  	cmp	byte [si],0 		;default path?
 26745 00002476 7502                    	jne	short tryq_set_for_dos
 26746                                  
 26747 00002478 46                      	inc	si
 26748 00002479 46                      	inc	si			;ds:si -> cntry_root
 26749                                  
 26750                                  tryq_set_for_dos:
 26751                                  	; 14/12/2022
 26752                                  	; ds = cs
 26753 0000247A C43E[7702]              	les	di,[sysi_country]
 26754                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 26755 0000247E 57                      	push	di			;save di
 26756                                  	;add	di,8
 26757 0000247F 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 26758 00002482 E8CF0E                  	call	move_asciiz		;set the path to country.sys in dos.
 26759 00002485 5F                      	pop	di			;es:di -> country info tab again.
 26760                                  
 26761                                  	; 14/12/2022	
 26762 00002486 8B0E[E003]              	mov	cx,[memhi]
 26763                                  	;mov	cx,[cs:memhi]
 26764 0000248A 8ED9                    	mov	ds,cx
 26765 0000248C 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 26766 0000248E E8070D                  	call	setdoscountryinfo	;now do the job!!!
 26767                                  	; ds <> cs ; 14/12/2022
 26768 00002491 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 26769                                  
 26770 00002493 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 26771 00002496 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 26772                                  
 26773                                  tryqfilebad:
 26774 00002498 0E                      	push	cs
 26775 00002499 07                      	pop	es
 26776 0000249A 2E803E[1134]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 26777 000024A0 7405                    	je	short tryqdefbad
 26778                                  
 26779 000024A2 BE[1134]                	mov	si,cntry_drv
 26780 000024A5 EB03                    	jmp	short tryqbadload
 26781                                  
 26782                                  tryqdefbad:				;default file has been used.
 26783 000024A7 BE[1334]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 26784                                  tryqbadload:
 26785 000024AA E8B30E                  	call	badload 		;ds will be restored to sysinit_seg
 26786                                  	;mov	cx,[cs:CONFBOT]
 26787                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26788                                  	;mov	cx,[cs:top_of_cdss]
 26789                                  	; 11/12/2022
 26790                                  	; ds = cs
 26791 000024AD 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 26792 000024B1 8EC1                    	mov	es,cx			;restore es -> confbot.
 26793 000024B3 EB13                    	jmp	short coffj4
 26794                                  
 26795                                  tryqmemory:
 26796 000024B5 BA[0638]                	mov	dx,insufmemory
 26797                                  tryqchkerr:
 26798                                  	;mov	cx,[cs:CONFBOT]
 26799                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26800                                  	;mov	cx,[cs:top_of_cdss]
 26801                                  	; 12/12/2022
 26802 000024B8 0E                      	push	cs
 26803 000024B9 1F                      	pop	ds
 26804 000024BA 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 26805 000024BE 8EC1                    	mov	es,cx			;restore es -> confbot seg
 26806                                  	;push	cs
 26807                                  	;pop	ds			;restore ds to sysinit_seg
 26808 000024C0 7306                    	jnc	short coffj4		;if no error,then exit
 26809                                  
 26810 000024C2 E8C30E                  	call	print			;else show error message
 26811 000024C5 E88A02                  	call	error_line
 26812                                  coffj4:
 26813                                  	;mov	bx,[cs:cntryfilehandle]
 26814                                  	; 11/12/2022
 26815                                  	; ds = cs
 26816 000024C8 8B1E[D803]              	mov	bx,[cntryfilehandle]
 26817 000024CC B43E                    	mov	ah,3Eh
 26818 000024CE CD21                    	int	21h			;close a file. don't care even if it fails.
 26819 000024D0 E92DFB                  	jmp	coff
 26820                                  
 26821                                  ;--------------------------------------------
 26822                                  
 26823                                  cntry_error:
 26824                                  
 26825                                  ;function: show "invalid country code or code page" messages,or
 26826                                  ;		"error in country command" depending on the error code
 26827                                  ;		in ax returned by sysparse;
 26828                                  ;in:	ax - error code
 26829                                  ;	ds - sysinitseg
 26830                                  ;	es - confbot
 26831                                  ;out:	show message.  dx destroyed.
 26832                                  
 26833 000024D3 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 26834 000024D6 7505                    	jne	short if64
 26835 000024D8 BA[C337]                	mov	dx,badcountry		;"invalid country code or code page"
 26836 000024DB EB03                    	jmp	short en64
 26837                                  if64:
 26838 000024DD BA[E937]                	mov	dx,badcountrycom	;"error in contry command"
 26839                                  en64:
 26840 000024E0 E8A50E                  	call	print
 26841                                  	;call	error_line
 26842                                  	;retn
 26843                                  	; 11/12/2022
 26844 000024E3 E96C02                  	jmp	error_line
 26845                                  
 26846                                  ;------------------------------------------------------------------------------
 26847                                  ; files command
 26848                                  ;------------------------------------------------------------------------------
 26849                                  
 26850                                  ;******************************************************************************
 26851                                  ; function: parse the parameters of files= command.			      *
 26852                                  ;									      *
 26853                                  ; input :								      *
 26854                                  ;	es:si -> parameters in command line.				      *
 26855                                  ; output:								      *
 26856                                  ;	variable files set.						      *
 26857                                  ;									      *
 26858                                  ; subroutines to be called:						      *
 26859                                  ;	sysinit_parse							      *
 26860                                  ; logic:								      *
 26861                                  ; {									      *
 26862                                  ;	set di points to files_parms;					      *
 26863                                  ;	set dx,cx to 0; 						      *
 26864                                  ;	while (end of command line)					      *
 26865                                  ;	{ sysinit_parse;						      *
 26866                                  ;	  if (no error) then						      *
 26867                                  ;	     files = result_val._$P_picked_val				      *
 26868                                  ;	  else								      *
 26869                                  ;	     error exit;						      *
 26870                                  ;	};								      *
 26871                                  ; };									      *
 26872                                  ;									      *
 26873                                  ;******************************************************************************
 26874                                  
 26875                                  tryf:
 26876 000024E6 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 26877 000024E9 7523                    	jne	short tryl
 26878                                  
 26879                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26880                                  ;;ifdef	MULTI_CONFIG
 26881                                  ;       call    query_user              ; query the user if config_cmd
 26882                                  ;       jc      short tryl		; has the CONFIG_OPTION_QUERY bit set
 26883                                  ;;endif
 26884                                  
 26885                                  	; 14/12/2022
 26886                                  	; ds = cs
 26887                                  
 26888 000024EB BF[B71D]                	mov	di,files_parms
 26889 000024EE 31C9                    	xor	cx,cx
 26890                                  	; 04/01/2023
 26891                                  	;mov	dx,cx
 26892                                  do67:
 26893 000024F0 E8F101                  	call	sysinit_parse
 26894 000024F3 7303                    	jnc	short if67		; parse error
 26895                                  	;call	badparm_p		;  and show messages and end the search loop.
 26896                                  	;jmp	short sr67
 26897                                  	; 04/01/2023
 26898 000024F5 E96A01                  	jmp	badparm_p_coff
 26899                                  if67:
 26900 000024F8 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26901 000024FB 7408                    	je	short en67		; then end the $endloop
 26902                                  
 26903                                  	; 14/12/2022
 26904                                  	; ds = cs
 26905                                  	;;mov	al,[cs:rv_dword]
 26906                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 26907                                  	;mov	[cs:p_files],al		; save it temporarily
 26908                                  	;mov	al,[rv_dword]
 26909 000024FD A0[541D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 26910 00002500 A2[D61D]                	mov	[p_files],al
 26911                                  
 26912 00002503 EBEB                    	jmp	short do67
 26913                                  en67:
 26914                                  	; 14/12/2022
 26915                                  	; ds = cs
 26916 00002505 A0[D61D]                	mov	al,[p_files]
 26917 00002508 A2[9D02]                	mov	[FILES],al	
 26918                                  	;mov	al,[cs:p_files]
 26919                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 26920                                  sr67:
 26921 0000250B E9F2FA                  	jmp	coff
 26922                                  
 26923                                  ; 04/04/2019 - Retro DOS v4.0
 26924                                  
 26925                                  ;------------------------------------------------------------------------------
 26926                                  ; lastdrive command
 26927                                  ;------------------------------------------------------------------------------
 26928                                  
 26929                                  ;******************************************************************************
 26930                                  ; function: parse the parameters of lastdrive= command. 		      *
 26931                                  ;									      *
 26932                                  ; input :								      *
 26933                                  ;	es:si -> parameters in command line.				      *
 26934                                  ; output:								      *
 26935                                  ;	set the variable num_cds.					      *
 26936                                  ;									      *
 26937                                  ; subroutines to be called:						      *
 26938                                  ;	sysinit_parse							      *
 26939                                  ; logic:								      *
 26940                                  ; {									      *
 26941                                  ;	set di points to ldrv_parms;					      *
 26942                                  ;	set dx,cx to 0; 						      *
 26943                                  ;	while (end of command line)					      *
 26944                                  ;	{ sysinit_parse;						      *
 26945                                  ;	  if (no error) then						      *
 26946                                  ;	     set num_cds to the returned value; 			      *
 26947                                  ;	  else	/*error exit*/						      *
 26948                                  ;	     error exit;						      *
 26949                                  ;	};								      *
 26950                                  ; };									      *
 26951                                  ;									      *
 26952                                  ;******************************************************************************
 26953                                  
 26954                                  tryl:
 26955 0000250E 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 26956 00002511 7523                    	jne	short tryp
 26957                                  
 26958                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26959                                  ;;ifdef	MULTI_CONFIG
 26960                                  ;       call    query_user      ; query the user if config_cmd
 26961                                  ;       jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 26962                                  ;;endif
 26963                                  	; 14/12/2022
 26964                                  	; ds = cs
 26965                                  
 26966 00002513 BF[0E1E]                	mov	di,ldrv_parms
 26967 00002516 31C9                    	xor	cx,cx
 26968                                  	; 04/01/2023
 26969                                  	;mov	dx,cx
 26970                                  do73:
 26971 00002518 E8C901                  	call	sysinit_parse
 26972 0000251B 7303                    	jnc	short if73	; parse error
 26973                                  	;call	badparm_p	;  and show messages and end the search loop.
 26974                                  	;jmp	short sr73
 26975                                  	; 04/01/2023
 26976 0000251D E94201                  	jmp	badparm_p_coff
 26977                                  if73:
 26978 00002520 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 26979 00002523 7408                    	je	short en73	; then end the $endloop
 26980                                  
 26981                                  	; 14/12/2022
 26982                                  	; ds = cs
 26983                                  	;;mov	al,[cs:rv_dword]
 26984                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 26985                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 26986                                  
 26987                                  	;mov	al,[rv_dword]
 26988 00002525 A0[541D]                	mov	al,[rv_byte]
 26989 00002528 A2[221E]                	mov	[p_ldrv],al
 26990                                  
 26991 0000252B EBEB                    	jmp	short do73
 26992                                  en73:
 26993                                  	; 14/12/2022
 26994                                  	; ds = cs
 26995 0000252D A0[221E]                	mov	al,[p_ldrv]
 26996 00002530 A2[A002]                	mov	[NUM_CDS],al
 26997                                  	;mov	al,[cs:p_ldrv]
 26998                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 26999                                  sr73:
 27000 00002533 E9CAFA                  	jmp	coff
 27001                                  
 27002                                  ;--------------------------------------------------------------------------
 27003                                  ; setting drive parameters
 27004                                  ;--------------------------------------------------------------------------
 27005                                  
 27006                                  tryp:
 27007 00002536 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 27008 00002539 7511                    	jne	short tryk
 27009                                  
 27010                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27011                                  ;;ifdef	MULTI_CONFIG
 27012                                  ;       call    query_user      ; query the user if config_cmd
 27013                                  ;       jc      short tryk	; has the CONFIG_OPTION_QUERY bit set
 27014                                  ;;endif
 27015                                  
 27016 0000253B E86A08                  	call	parseline
 27017 0000253E 7209                    	jc	short trypbad
 27018 00002540 E88A07                  	call	setparms
 27019 00002543 E8C007                  	call	diddleback
 27020                                  
 27021                                  ; No error check here, because setparms and diddleback have no error 
 27022                                  ; returns, and setparms as coded now can return with carry set. 
 27023                                  ;       jc	short trypbad
 27024                                  
 27025                                  	; 12/12/2022
 27026                                  	; cf = 0
 27027                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27028                                  	;jc	short trypbad
 27029                                  	
 27030 00002546 E9B7FA                  	jmp	coff
 27031                                  trypbad:
 27032 00002549 E9BB01                  	jmp	badop
 27033                                  
 27034                                  ;--------------------------------------------------------------------------
 27035                                  ; setting internal stack parameters
 27036                                  ; stacks=m,n where
 27037                                  ;	m is the number of stacks (range 8 to 64,default 9)
 27038                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 27039                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 27040                                  ;	any combinations that are not within the specified limits will
 27041                                  ;	result in "unrecognized command" error.
 27042                                  ;--------------------------------------------------------------------------
 27043                                  
 27044                                  ;**************************************************************************
 27045                                  ;									  *
 27046                                  ; function: parse the parameters of stacks= command.			  *
 27047                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 27048                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 27049                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 27050                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 27051                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 27052                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 27053                                  ;	    (or if "0,0" pair has been entered.)			  *
 27054                                  ; input :								  *
 27055                                  ;	es:si -> parameters in command line.				  *
 27056                                  ; output:								  *
 27057                                  ;	set the variables stack_count,stack_size.			  *
 27058                                  ;									  *
 27059                                  ; subroutines to be called:						  *
 27060                                  ;	sysinit_parse							  *
 27061                                  ; logic:								  *
 27062                                  ; {									  *
 27063                                  ;	set di points to stks_parms;					  *
 27064                                  ;	set dx,cx to 0; 						  *
 27065                                  ;	while (end of command line)					  *
 27066                                  ;	{ sysinit_parse;						  *
 27067                                  ;	  if (no error) then						  *
 27068                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 27069                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 27070                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 27071                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 27072                                  ;	     }								  *
 27073                                  ;	  else	/*error exit*/						  *
 27074                                  ;	     error exit;						  *
 27075                                  ;	};								  *
 27076                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 27077                                  ;	if o.k.,then set stack_count,stack_size;			  *
 27078                                  ;	 else error_exit;						  *
 27079                                  ; };									  *
 27080                                  ;**************************************************************************
 27081                                  
 27082                                  tryk:
 27083                                          ;if      stacksw
 27084                                  
 27085 0000254C 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 27086 0000254F 7402                    	je	short do_tryk
 27087                                  skip_it4:
 27088 00002551 EB74                    	jmp	short trys	; 15/12/2022
 27089                                  do_tryk:
 27090                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27091                                  ;;ifdef	MULTI_CONFIG
 27092                                  ;       call    query_user              ; query the user if config_cmd
 27093                                  ;       jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 27094                                  ;;endif
 27095                                  	; 14/12/2022
 27096                                  	; ds = cs
 27097                                  
 27098 00002553 BF[231E]                	mov	di,stks_parms
 27099 00002556 31C9                    	xor	cx,cx
 27100                                  	; 04/01/2023
 27101                                  	;mov	dx,cx
 27102                                  do79:
 27103 00002558 E88901                  	call	sysinit_parse
 27104 0000255B 730B                    	jnc	short if79		; parse error
 27105                                  
 27106 0000255D BA[7538]                	mov	dx,badstack		; "invalid stack parameter"
 27107 00002560 E8250E                  	call	print			;  and show messages and end the search loop.
 27108 00002563 E8EC01                  	call	error_line
 27109                                  	;jmp	sr79
 27110                                  	; 11/12/2022
 27111 00002566 EB39                    	jmp	short sr79
 27112                                  if79:
 27113 00002568 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27114 0000256B 7412                    	je	short en79		; then end the $endloop
 27115                                  
 27116                                  	; 14/12/2022
 27117                                  	; ds = cs
 27118                                  
 27119                                  	;;mov	ax,[cs:rv_dword]
 27120                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27121                                  	;mov	ax,[rv_dword]
 27122 0000256D A1[541D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27123                                  
 27124 00002570 83F901                  	cmp	cx,1
 27125 00002573 7505                    	jne	short if83
 27126                                  
 27127                                  	; 14/12/2022
 27128                                  	;mov	[cs:p_stack_count],ax
 27129                                  	;jmp	short en83
 27130 00002575 A3[581E]                	mov	[p_stack_count],ax
 27131 00002578 EBDE                    	jmp	short do79
 27132                                  if83:
 27133                                  	; 14/12/2022
 27134                                  	;mov	[cs:p_stack_size],ax
 27135 0000257A A3[5A1E]                	mov	[p_stack_size],ax
 27136                                  en83:
 27137 0000257D EBD9                    	jmp	short do79
 27138                                  en79:
 27139                                  	; 14/12/2022
 27140                                  	; ds = cs
 27141 0000257F A1[581E]                	mov	ax,[p_stack_count]
 27142 00002582 09C0                    	or	ax,ax
 27143 00002584 741E                    	jz	short if87		
 27144                                  
 27145                                  	; 14/12/2022
 27146                                  	;cmp	word [p_stack_count],0
 27147                                  	;;cmp	word [cs:p_stack_count],0
 27148                                  	;je	short if87
 27149                                  
 27150                                  	; 14/12/2022
 27151 00002586 83F808                  	cmp	ax, mincount ; 8
 27152                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 27153                                  	; 15/12/2022
 27154 00002589 721F                    	jb	short en87
 27155 0000258B 833E[5A1E]20            	cmp	word [p_stack_size],minsize ; 32
 27156                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 27157                                  	; 15/12/2022
 27158 00002590 7218                    	jb	short en87
 27159                                  if94:
 27160                                  	; 14/12/2022
 27161                                  	; ds = cs
 27162                                  	; ax = [p_stack_count]
 27163                                  	;mov	ax,[p_stack_count]
 27164                                  	;;mov	ax,[cs:p_stack_count]
 27165 00002592 A3[8A02]                	mov	[stack_count],ax
 27166                                  	;mov	[cs:stack_count],ax
 27167                                  	;mov	ax,[cs:p_stack_size]
 27168 00002595 A1[5A1E]                	mov	ax,[p_stack_size]
 27169                                  	;mov	[cs:stack_size],ax
 27170 00002598 A3[8C02]                	mov	[stack_size],ax
 27171                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27172 0000259B C706[8E02]FFFF          	mov	word [stack_addr],-1
 27173                                  sr79:
 27174 000025A1 E95CFA                  	jmp	coff
 27175                                  
 27176                                  if87:
 27177                                  	; 14/12/2022
 27178 000025A4 3906[5A1E]              	cmp	[p_stack_size],ax ; 0
 27179 000025A8 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 27180                                  	;cmp	word [cs:p_stack_size],0
 27181                                  	;je	short if94
 27182                                  en87:
 27183                                  	; 15/12/2022
 27184                                  	; ([p_stack_count] is invalid, use default values)
 27185                                  	; 14/12/2022
 27186                                  	; ds = cs
 27187 000025AA C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 27188 000025B0 C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 27189 000025B6 C706[8E02]0000          	mov	word [stack_addr],0
 27190                                  	;mov	word [cs:stack_count],defaultcount ; 9
 27191                                  	;				; reset to default value.
 27192                                  	;mov	word [cs:stack_size],defaultsize ; 128
 27193                                  	;mov	word [cs:stack_addr],0
 27194                                  
 27195 000025BC BA[7538]                	mov	dx,badstack
 27196 000025BF E8C60D                  	call	print
 27197 000025C2 E88D01                  	call	error_line
 27198 000025C5 EBDA                    	jmp	short sr79
 27199                                  
 27200                                  ; 15/12/2022
 27201                                  %if 0
 27202                                  	mov	di,stks_parms
 27203                                  	xor	cx,cx
 27204                                  	; 04/01/2023
 27205                                  	;mov	dx,cx
 27206                                  do79:
 27207                                  	call	sysinit_parse
 27208                                  	jnc	short if79		; parse error
 27209                                  
 27210                                  	mov	dx,badstack		; "invalid stack parameter"
 27211                                  	call	print			;  and show messages and end the search loop.
 27212                                  	call	error_line
 27213                                  	;jmp	sr79
 27214                                  	; 11/12/2022
 27215                                  	jmp	short sr79
 27216                                  if79:
 27217                                  	cmp	ax,_$P_RC_EOL		; end of line?
 27218                                  	je	short en79		; then end the $endloop
 27219                                  
 27220                                  	;mov	ax,[cs:rv_dword]
 27221                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27222                                  	cmp	cx,1
 27223                                  	jne	short if83
 27224                                  
 27225                                  	mov	[cs:p_stack_count],ax
 27226                                  	jmp	short en83
 27227                                  if83:
 27228                                  	mov	[cs:p_stack_size],ax
 27229                                  en83:
 27230                                  	jmp	short do79
 27231                                  en79:
 27232                                  	cmp	word [cs:p_stack_count],0
 27233                                  	je	short if87
 27234                                  
 27235                                  	cmp	word [cs:p_stack_count],mincount ; 8
 27236                                  	jb	short ll88
 27237                                  	cmp	word [cs:p_stack_size],minsize ; 32
 27238                                  	jnb	short if88
 27239                                  ll88:
 27240                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27241                                  if88:
 27242                                  	jmp	short en87
 27243                                  
 27244                                  	; 11/12/2022
 27245                                  if94:
 27246                                  	mov	ax,[cs:p_stack_count]
 27247                                  	mov	[cs:stack_count],ax
 27248                                  	mov	ax,[cs:p_stack_size]
 27249                                  	mov	[cs:stack_size],ax
 27250                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27251                                  sr79:
 27252                                  	jmp	coff
 27253                                  
 27254                                  if87:
 27255                                  	cmp	word [cs:p_stack_size],0
 27256                                  	je	short en87
 27257                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27258                                  en87:
 27259                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 27260                                  	jne	short if94
 27261                                  
 27262                                  	mov	word [cs:stack_count],defaultcount ; 9
 27263                                  					; reset to default value.
 27264                                  	mov	word [cs:stack_size],defaultsize ; 128
 27265                                  	mov	word [cs:stack_addr],0
 27266                                  
 27267                                  	mov	dx,badstack
 27268                                  	call	print
 27269                                  	call	error_line
 27270                                  	jmp	short sr79
 27271                                  
 27272                                  %endif
 27273                                  
 27274                                  ; 11/12/2022
 27275                                  %if 0 
 27276                                  
 27277                                  if94:
 27278                                  	mov	ax,[cs:p_stack_count]
 27279                                  	mov	[cs:stack_count],ax
 27280                                  	mov	ax,[cs:p_stack_size]
 27281                                  	mov	[cs:stack_size],ax
 27282                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27283                                  sr79:
 27284                                  	jmp	coff
 27285                                  
 27286                                  %endif
 27287                                  
 27288                                  	;endif
 27289                                  
 27290                                  ;------------------------------------------------------------------------
 27291                                  ; shell command
 27292                                  ;------------------------------------------------------------------------
 27293                                  
 27294                                  trys:
 27295 000025C7 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 27296 000025CA 753C                    	jne	short tryx
 27297                                  
 27298                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27299                                  ;;ifdef	MULTI_CONFIG
 27300                                  ;       call    query_user              ; query the user if config_cmd
 27301                                  ;       jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 27302                                  ;       mov	byte [cs:newcmd],1
 27303                                  ;;endif
 27304                                  
 27305                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 27306                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27307                                  	;mov	byte [cs:command_line+1],0
 27308                                  	; 15/12/2022
 27309                                  	; ds = cs
 27310 000025CC C606[AA02]00            	mov	byte [command_line+1],0
 27311                                  
 27312 000025D1 BF[5F34]                        mov     di,commnd+1		; we already have the first char
 27313 000025D4 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 27314                                  storeshell:
 27315 000025D7 E86101                  	call	getchr
 27316 000025DA 08C0                            or      al,al                   ; this is the normal case: "organize"
 27317 000025DC 7419                            jz	short getshparms	; put a ZERO right after the filename
 27318                                  
 27319 000025DE 3C20                            cmp     al," "                  ; this may happen if there are no args
 27320 000025E0 7205                            jb	short endofshell	; I suppose...
 27321 000025E2 8805                    	mov	[di],al
 27322 000025E4 47                      	inc	di
 27323                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 27324                                          ;jb	short storeshell	; commnd (the filename)
 27325                                          ;jmp	short endofshell
 27326                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27327 000025E5 EBF0                    	jmp	short storeshell
 27328                                  
 27329                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27330                                  ;getshparms:
 27331                                  ;	mov     byte [di],0		; zero-terminate the filename
 27332                                  ;	mov     di,command_line+1	; prepare to process the command-line
 27333                                  ;
 27334                                  ;parmloop:
 27335                                  ;	call	getchr
 27336                                  ;	cmp	al," "
 27337                                  ;	jb	short endofparms
 27338                                  ;	mov	[di],al
 27339                                  ;	inc	di
 27340                                  ;	cmp     di,command_line+126
 27341                                  ;	jb	short parmloop
 27342                                  ;endofparms:
 27343                                  ;	mov     cx,di
 27344                                  ;	sub     cx,command_line+1
 27345                                  ;	mov     [cs:command_line],cl
 27346                                  ;
 27347                                  ;endofshell:
 27348                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 27349                                  ;					; the command-line as the case may be)
 27350                                  ;skipline:
 27351                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27352                                  ;       je	short endofline		; the line: watch for ever-present LF
 27353                                  ;call	getchr
 27354                                  ;       jnc	short skipline		; keep it up as long as there are chars
 27355                                  ;
 27356                                  ;endofline:
 27357                                  ;       jmp     conflp
 27358                                  
 27359                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27360                                  endofshell:
 27361 000025E7 C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 27362                                  					; the command-line as the case may be)
 27363 000025EA E84E01                  	call	getchr
 27364                                  skipline:
 27365 000025ED 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27366 000025EF 7403                    	je	short endofline		; the line: watch for ever-present LF
 27367 000025F1 E84701                  	call	getchr
 27368                                  endofline:
 27369 000025F4 E9E4F9                  	jmp     conflp
 27370                                  
 27371                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27372                                  getshparms:
 27373                                  	; 18/12/2022
 27374                                  	; al = 0
 27375 000025F7 8805                    	mov	[di],al ; 0
 27376                                  	;mov	byte [di],0		; zero-terminate the filename
 27377 000025F9 BF[AA02]                	mov     di,command_line+1	; prepare to process the command-line
 27378                                  parmloop:
 27379 000025FC E83C01                  	call	getchr
 27380 000025FF 3C20                    	cmp	al," " ; 20h
 27381 00002601 72E4                    	jb	short endofshell
 27382 00002603 8805                    	mov	[di],al
 27383 00002605 47                      	inc	di
 27384 00002606 EBF4                    	jmp	short parmloop
 27385                                  
 27386                                  ;------------------------------------------------------------------------
 27387                                  ; fcbs command
 27388                                  ;------------------------------------------------------------------------
 27389                                  
 27390                                  ;************************************************************************
 27391                                  ; function: parse the parameters of fcbs= command.			*
 27392                                  ;									*
 27393                                  ; input :								*
 27394                                  ;	es:si -> parameters in command line.				*
 27395                                  ; output:								*
 27396                                  ;	set the variables fcbs,keep.					*
 27397                                  ;									*
 27398                                  ; subroutines to be called:						*
 27399                                  ;	sysinit_parse							*
 27400                                  ; logic:								*
 27401                                  ; {									*
 27402                                  ;	set di points to fcbs_parms;					*
 27403                                  ;	set dx,cx to 0; 						*
 27404                                  ;	while (end of command line)					*
 27405                                  ;	{ sysparse;							*
 27406                                  ;	  if (no error) then						*
 27407                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 27408                                  ;		   fcbs = result_val._$P_picked_val;			*
 27409                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 27410                                  ;		   keep = result_val._$P_picked_val;			*
 27411                                  ;	     }								*
 27412                                  ;	  else	/*error exit*/						*
 27413                                  ;	     error exit;						*
 27414                                  ;	};								*
 27415                                  ; };									*
 27416                                  ;************************************************************************
 27417                                  
 27418                                  tryx:
 27419 00002608 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 27420                                          ;jne	short try1
 27421                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27422 0000260B 752F                    	jne	short tryy	; comment command
 27423                                  
 27424                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27425                                  ;;ifdef	MULTI_CONFIG
 27426                                  ;       call    query_user      ; query the user if config_cmd
 27427                                  ;       jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 27428                                  ;;endif
 27429                                  
 27430 0000260D BF[D71D]                	mov	di,fcbs_parms
 27431 00002610 31C9                    	xor	cx,cx
 27432                                  	; 04/01/2023
 27433                                  	;mov	dx,cx
 27434                                  do98:
 27435 00002612 E8CF00                  	call	sysinit_parse
 27436                                          ; 04/01/2023
 27437                                  	;jnc	short if98	; parse error
 27438                                          ;call	badparm_p	;  and show messages and end the search loop.
 27439                                  	;jmp	short sr98
 27440                                  	;------------------------
 27441                                  	; 04/01/2023
 27442 00002615 724B                    	jc	short badparm_p_coff
 27443                                  if98:
 27444 00002617 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27445 0000261A 7412                    	je	short en98	; then end the $endloop
 27446                                  
 27447                                  	;;mov	al,[cs:rv_dword]
 27448                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27449                                  	; 15/12/2022
 27450                                  	; ds = cs
 27451 0000261C A0[541D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27452 0000261F 83F901                  	cmp	cx,1		; the first positional?
 27453 00002622 7505                    	jne	short if102
 27454                                  	;mov	[cs:p_fcbs],al
 27455                                  	; 15/12/2022
 27456 00002624 A2[0C1E]                	mov	[p_fcbs],al
 27457                                  	;jmp	short en102
 27458 00002627 EBE9                    	jmp	short do98
 27459                                  if102:
 27460                                  	;mov	[cs:p_keep],al
 27461                                  	; 15/12/2022
 27462 00002629 A2[0D1E]                	mov	[p_keep],al
 27463                                  en102:
 27464 0000262C EBE4                    	jmp	short do98
 27465                                  en98:
 27466                                  	; 15/12/2022
 27467                                  	; ds = cs
 27468 0000262E A0[0C1E]                	mov	al,[p_fcbs]
 27469 00002631 A2[9E02]                	mov	[FCBS],al
 27470 00002634 C606[9F02]00            	mov	byte [KEEP],0
 27471                                  	;mov	al,[cs:p_fcbs]	 ; M017
 27472                                  	;mov	[cs:FCBS],al	 ; M017
 27473                                  	;mov	byte [cs:KEEP],0 ; M017
 27474                                  sr98:
 27475 00002639 E9C4F9                  	jmp	coff
 27476                                  
 27477                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27478                                  ;-------------------------------------------------------------------------
 27479                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 27480                                  ;		line number
 27481                                  ;-------------------------------------------------------------------------
 27482                                  
 27483                                  tryy:
 27484 0000263C 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 27485 0000263F 750B                    	jne	short try0
 27486                                  
 27487                                  donothing:
 27488                                  	; 15/12/2022
 27489                                  	; ds = cs
 27490 00002641 FF0E[D603]              	dec	word [chrptr]
 27491 00002645 FF06[D203]              	inc	word [count]
 27492                                  	; 02/11/2022
 27493                                  	;dec	word [cs:chrptr]
 27494                                  	;inc	word [cs:count]
 27495                                  
 27496 00002649 E9B4F9                  	jmp	coff
 27497                                  
 27498                                  ;------------------------------------------------------------------------
 27499                                  ; rem command
 27500                                  ;------------------------------------------------------------------------
 27501                                  
 27502                                  try0:				; do nothing with this line.
 27503 0000264C 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 27504 0000264F 74F0                    	je	short donothing
 27505                                  
 27506                                  ; 07/04/2019 - Retro DOS v4.0
 27507                                  
 27508                                  ;-----------------------------------------------------------------------
 27509                                  ; switches command
 27510                                  ;-----------------------------------------------------------------------
 27511                                  
 27512                                  ;***********************************************************************
 27513                                  ;								       *
 27514                                  ; function: parse the option switches specified.		       *
 27515                                  ; note - this command is intended for the future use also.	       *
 27516                                  ; when we need to set system data flag,use this command.	       *
 27517                                  ;								       *
 27518                                  ; input :							       *
 27519                                  ;	es:si -> parameters in command line.			       *
 27520                                  ; output:							       *
 27521                                  ;	p_swit_k set if /k option chosen.			       *
 27522                                  ;								       *
 27523                                  ; subroutines to be called:					       *
 27524                                  ;	sysinit_parse						       *
 27525                                  ; logic:							       *
 27526                                  ; {								       *
 27527                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 27528                                  ;	set dx,cx to 0; 					       *
 27529                                  ;	while (end of command line)				       *
 27530                                  ;	{ sysinit_parse;					       *
 27531                                  ;	  if (no error) then					       *
 27532                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 27533                                  ;		    p_swit_k = 1				       *
 27534                                  ;	       endif						       *
 27535                                  ;	  else {show error message;error exit}			       *
 27536                                  ;	};							       *
 27537                                  ; };								       *
 27538                                  ;								       *
 27539                                  ;***********************************************************************
 27540                                  
 27541                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 27542                                  
 27543                                  try1:
 27544 00002651 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 27545 00002654 7402                    	je	short do_try1	; switches= command entered?
 27546                                  skip_it5:
 27547                                  	;jmp	tryv
 27548                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27549 00002656 EB7A                    	jmp	tryz
 27550                                  
 27551                                  do_try1:
 27552                                  
 27553                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27554                                  ;;ifdef	MULTI_CONFIG
 27555                                  ;       call    query_user      ; query the user if config_cmd
 27556                                  ;       jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 27557                                  ;;endif
 27558                                  
 27559 00002658 BF[711E]                	mov	di,swit_parms
 27560 0000265B 31C9                    	xor	cx,cx
 27561                                  	; 04/01/2023
 27562                                  	;mov	dx,cx
 27563                                  do110:
 27564 0000265D E88400                  	call	sysinit_parse
 27565 00002660 7306                    	jnc	short if110	; parse error
 27566                                  	;call	badparm_p	;  and show messages and end the search loop.
 27567                                  	;jmp	short sr110
 27568                                  	; -----------------------
 27569                                  	; 04/01/2023
 27570                                  badparm_p_coff:
 27571 00002662 E8AE00                  	call	badparm_p
 27572 00002665 E998F9                  	jmp	coff
 27573                                  	;------------------------
 27574                                  if110:
 27575 00002668 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27576 0000266B 742D                    	je	short en110	; then jmp to $endloop for semantic check
 27577                                  
 27578                                  	; 15/12/2022
 27579                                  	; ds = cs
 27580                                  	;;cmp	word [cs:result_val_swoff],swit_k
 27581                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 27582 0000266D 813E[521D][891E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 27583 00002673 7507                    	jne	short if115	;				;M059
 27584                                  	; 15/12/2022
 27585 00002675 C606[A41E]01            	mov	byte [p_swit_k],1
 27586                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 27587 0000267A EBE1                    	jmp	short do110
 27588                                  if115:	
 27589                                  	; 15/12/2022							;M059
 27590                                  	;;cmp	word [cs:result_val_swoff],swit_t
 27591                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 27592 0000267C 813E[521D][951E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 27593 00002682 7507                    	jne	short if116					;M059 M063
 27594                                  	; 15/12/2022
 27595 00002684 C606[A51E]01            	mov	byte [p_swit_t],1
 27596                                  	;mov	byte [cs:p_swit_t],1				;M059
 27597 00002689 EBD2                    	jmp	short do110					;M059
 27598                                  if116:
 27599                                  	; 15/12/2022
 27600                                  	;;cmp	word [cs:result_val_swoff],swit_w
 27601                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 27602 0000268B 813E[521D][A11E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 27603 00002691 75CA                    	jne	short do110					;M063
 27604                                  	; 15/12/2022
 27605 00002693 C606[A61E]01            	mov	byte [p_swit_w],1
 27606                                  	;mov	byte [cs:p_swit_w],1				;M063
 27607 00002698 EBC3                    	jmp	short do110					;M063
 27608                                  en110:
 27609                                  	; 15/12/2022
 27610                                  	; ds = cs
 27611 0000269A 803E[A41E]01            	cmp	byte [p_swit_k],1
 27612                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 27613 0000269F 1E                      	push	ds
 27614                                  	;;mov	ax,Bios_Data
 27615                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 27616                                  	; 21/10/2022
 27617 000026A0 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27618 000026A3 8ED8                    	mov	ds,ax
 27619 000026A5 750A                    	jne	short if117
 27620 000026A7 C606[E504]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 27621 000026AC C606[E604]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 27622                                  if117:
 27623                                  	; 15/12/2022
 27624                                  	; ds <> cs
 27625 000026B1 2EA0[A51E]              	mov	al,[cs:p_swit_t]				;M059
 27626 000026B5 A2[F204]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 27627                                  
 27628 000026B8 2E803E[A61E]00          	cmp	byte [cs:p_swit_w],0				;M063
 27629 000026BE 740E                    	je	short skip_dos_flag				;M063
 27630 000026C0 06                      	push	es
 27631 000026C1 53                      	push	bx
 27632 000026C2 B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 27633 000026C4 CD21                    	int	21h						;M063
 27634                                  			; DOS - 2+ internal - GET LIST OF LISTS
 27635                                  			; Return: ES:BX -> DOS list of lists
 27636                                  	;or	bytes [es:86h],2
 27637 000026C6 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 27638 000026CC 5B                      	pop	bx
 27639 000026CD 07                      	pop	es
 27640                                  skip_dos_flag:							;M063
 27641 000026CE 1F                      	pop	ds
 27642                                  sr110:
 27643 000026CF E92EF9                  	jmp	coff
 27644                                  
 27645                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27646                                  ;
 27647                                  ;tryv:
 27648                                  ;
 27649                                  ;;ifdef	MULTI_CONFIG
 27650                                  ;;------------------------------------------------------------------------
 27651                                  ;; set command (as in "set var=value<cr/lf>")
 27652                                  ;;------------------------------------------------------------------------
 27653                                  ;
 27654                                  ;       cmp     ah,CONFIG_SET  ; 'V'
 27655                                  ;       jne	short tryn
 27656                                  ;       call    query_user      ; query the user if config_cmd
 27657                                  ;       jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 27658                                  ;       call    copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 27659                                  ;       jnc	short sr110	; no error
 27660                                  ;err:    
 27661                                  ;	call    error_line      ; whoops, display error in line XXX
 27662                                  ;       jmp     short sr110     ; jump to coff (to skip to next line)
 27663                                  ;
 27664                                  ;;------------------------------------------------------------------------
 27665                                  ;; numlock command (as in "numlock=on|off")
 27666                                  ;;------------------------------------------------------------------------
 27667                                  ;tryn:
 27668                                  ;       cmp     ah,CONFIG_NUMLOCK  ;'N'
 27669                                  ;       jne	short tryy            ;
 27670                                  ;       call    query_user      ; query thye user if config_cmd
 27671                                  ;       jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 27672                                  ;       call    set_numlock
 27673                                  ;       jc	short err
 27674                                  ;       jmp	short sr110	; all done
 27675                                  ;
 27676                                  ;;endif	;MULTI_CONFIG
 27677                                  
 27678                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27679                                  ;;-------------------------------------------------------------------------
 27680                                  ;; comment= do nothing. just decrese chrptr,and increase count for correct
 27681                                  ;;		line number
 27682                                  ;;-------------------------------------------------------------------------
 27683                                  ;
 27684                                  ;tryy:
 27685                                  ;       cmp     ah,CONFIG_COMMENT ; 'Y'
 27686                                  ;	jne	short try0
 27687                                  ;donothing:
 27688                                  ;	dec	word [chrptr]
 27689                                  ;	inc	word [count]
 27690                                  ;	jmp	coff
 27691                                  ;
 27692                                  ;;------------------------------------------------------------------------
 27693                                  ;; rem command
 27694                                  ;;------------------------------------------------------------------------
 27695                                  ;
 27696                                  ;try0:				;do nothing with this line.
 27697                                  ;	cmp     ah,CONFIG_REM ; '0'
 27698                                  ;	je	short donothing
 27699                                  
 27700                                  ; 30/10/2022
 27701                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 27702                                  
 27703                                  ;------------------------------------------------------------------------
 27704                                  ; bogus command
 27705                                  ;------------------------------------------------------------------------
 27706                                  
 27707                                  tryz:
 27708 000026D2 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 27709                                  	;je	short donothing
 27710                                  	; 02/11/2022
 27711 000026D5 740A                    	je	short tryz_donothing
 27712                                  
 27713 000026D7 FF0E[D603]              	dec	word [chrptr]
 27714 000026DB FF06[D203]              	inc	word [count]
 27715 000026DF EB26                    	jmp	short badop
 27716                                  
 27717                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27718                                  tryz_donothing:
 27719 000026E1 E95DFF                  	jmp	donothing
 27720                                  
 27721                                  ; 07/04/2019 - Retro DOS v4.0
 27722                                  
 27723                                  ;------------------------------------------------------------------------------
 27724                                  
 27725                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27726                                  ;
 27727                                  ;
 27728                                  ;;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 27729                                  ;;
 27730                                  ;;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 27731                                  ;
 27732                                  ;CheckProtmanArena:
 27733                                  ;	push	es
 27734                                  ;	mov	ax,[cs:area]	; get our arena header
 27735                                  ;	dec	ax
 27736                                  ;	mov	es,ax
 27737                                  ;	add	ax,[es:3]	; find end of arena
 27738                                  ;	inc	ax
 27739                                  ;	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 27740                                  ;	ja	short CheckProtmanDone
 27741                                  ;
 27742                                  ;	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 27743                                  ;CheckProtmanDone:
 27744                                  ;	pop	es
 27745                                  ;	retn
 27746                                  
 27747                                  ;------------------------------------------------------------------------------
 27748                                  
 27749                                  sysinit_parse:
 27750                                  
 27751                                  ;------------------------------------------------------------------------------
 27752                                  ;set up registers for sysparse
 27753                                  ;in)	es:si -> command line in confbot
 27754                                  ;	di -> offset of the parse control definition.
 27755                                  ;
 27756                                  ;out)	calls sysparse.
 27757                                  ;	carry will set if parse error.
 27758                                  ;	*** the caller should check the eol condition by looking at ax
 27759                                  ;	*** after each call.
 27760                                  ;	*** if no parameters are found,then ax will contain a error code.
 27761                                  ;	*** if the caller needs to look at the synomym@ of the result,
 27762                                  ;	***  the caller should use cs:@ instead of es:@.
 27763                                  ;	cx register should be set to 0 at the first time the caller calls this
 27764                                  ;	 procedure.
 27765                                  ;	ax - exit code
 27766                                  ;	bl - terminated delimeter code
 27767                                  ;	cx - new positional ordinal
 27768                                  ;	si - set to pase scanned operand
 27769                                  ;	dx - selected result buffer
 27770                                  ;------------------------------------------------------------------------------
 27771                                  
 27772                                  	; 24/10/2022
 27773 000026E4 06                      	push	es			;save es,ds
 27774 000026E5 1E                      	push	ds
 27775                                  
 27776 000026E6 06                      	push	es
 27777 000026E7 1F                      	pop	ds			;now ds:si -> command line
 27778                                  
 27779 000026E8 0E                      	push	cs
 27780 000026E9 07                      	pop	es			;now es:di -> control definition
 27781                                  
 27782 000026EA 2E8C1E[3914]            	mov	[cs:badparm_seg],ds	;save the pointer to the parm
 27783 000026EF 2E8936[3714]            	mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 27784                                  	;mov	dx,0
 27785                                  	; 04/01/2023
 27786 000026F4 29D2                    	sub	dx,dx ; 0
 27787 000026F6 E8E8ED                  	call	SysParse
 27788 000026F9 83F800                  	cmp	ax,_$P_No_Error	; 0	;no error
 27789                                  
 27790                                  ;**cas note:  when zero true after cmp, carry clear
 27791                                  
 27792                                  	;je	short ll4
 27793                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 27794                                  	; 12/12/2022
 27795 000026FC 7406                    	je	short en4 ; cf=0
 27796 000026FE 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 27797                                  	;jne	short if4
 27798                                  	; 12/12/2022
 27799 00002701 7401                    	je	short en4 ; cf=0
 27800                                  
 27801                                  ; 12/12/2022
 27802                                  ;ll4:
 27803                                  ;	; 12/12/2022
 27804                                  ;	; cf=0
 27805                                  ;	;clc
 27806                                  ;	jmp	short en4
 27807                                  
 27808                                  if4:
 27809                                  	; 24/10/2022
 27810 00002703 F9                      	stc
 27811                                  en4:
 27812 00002704 1F                      	pop	ds
 27813 00002705 07                      	pop	es
 27814 00002706 C3                      	retn
 27815                                  
 27816                                  ; 11/12/2022
 27817                                  %if 0
 27818                                  
 27819                                  ;----------------------------------------------------------------------------
 27820                                  ;
 27821                                  ; procedure : badop_p
 27822                                  ;
 27823                                  ;             same thing as badop,but will make sure to set ds register back
 27824                                  ;             to sysinitseg and return back to the caller.
 27825                                  ;
 27826                                  ;----------------------------------------------------------------------------
 27827                                  
 27828                                  badop_p:
 27829                                  	push	cs
 27830                                  	pop	ds		;set ds to configsys seg.
 27831                                  	mov	dx,badopm
 27832                                  	call	print
 27833                                          ;call	error_line
 27834                                  	;retn
 27835                                  	; 11/12/2022
 27836                                  	jmp	error_line
 27837                                  
 27838                                  %endif
 27839                                  
 27840                                  ;----------------------------------------------------------------------------
 27841                                  ;
 27842                                  ; label : badop
 27843                                  ;
 27844                                  ;----------------------------------------------------------------------------
 27845                                  
 27846                                  badop:	
 27847 00002707 BA[3637]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 27848 0000270A E87B0C                  	call	print
 27849 0000270D E84200                  	call	error_line	;show "error in config.sys ..." .
 27850 00002710 E9EDF8                  	jmp	coff
 27851                                  
 27852                                  ;----------------------------------------------------------------------------
 27853                                  ;
 27854                                  ; procedure : badparm_p
 27855                                  ;
 27856                                  ;             show "bad command or parameters - xxxxxx"
 27857                                  ;             in badparm_seg,badparm_off -> xxxxx
 27858                                  ;
 27859                                  ;----------------------------------------------------------------------------
 27860                                  
 27861                                  	; 24/10/2022
 27862                                  badparm_p:
 27863                                  	; 11/12/2022
 27864                                  	; ds = cs
 27865                                  	; 11/12/2022
 27866                                  	;push	ds ; *
 27867 00002713 52                      	push	dx
 27868 00002714 56                      	push	si
 27869                                  
 27870                                  	; 11/12/2022
 27871                                  	; ds = cs
 27872                                  	;push	cs
 27873                                  	;pop	ds
 27874                                  
 27875 00002715 BA[5D37]                	mov	dx,badparm
 27876 00002718 E86D0C                  	call	print			; "bad command or parameters - "
 27877 0000271B C536[3714]              	lds	si,[badparm_ptr]
 27878                                  
 27879                                  ;	print "xxxx" until cr.
 27880                                  
 27881                                  do1:
 27882 0000271F 8A14                    	mov	dl,[si]			; get next character
 27883 00002721 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 27884 00002724 7407                    	je	short en1		; exit loop if so
 27885                                  
 27886 00002726 B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 27887 00002728 CD21                    	int	21h			; display character
 27888 0000272A 46                      	inc	si			; next character
 27889 0000272B EBF2                    	jmp	short do1
 27890                                  en1:
 27891 0000272D 0E                      	push	cs
 27892 0000272E 1F                      	pop	ds
 27893                                  
 27894 0000272F BA[5A37]                	mov	dx,crlfm
 27895 00002732 E8530C                  	call	print
 27896 00002735 E81A00                  	call	error_line
 27897                                  
 27898 00002738 5E                      	pop	si
 27899 00002739 5A                      	pop	dx
 27900                                  	; 11/12/2022
 27901                                  	;pop	ds ; *
 27902                                  badparmp_ret:
 27903 0000273A C3                      	retn
 27904                                  
 27905                                  ;----------------------------------------------------------------------------
 27906                                  ;
 27907                                  ; procedure : getchr
 27908                                  ;
 27909                                  ;----------------------------------------------------------------------------
 27910                                  
 27911                                  	; 24/10/2022
 27912                                  getchr:
 27913                                  	; 12/12/2022
 27914                                  	;push	cx
 27915                                  	;mov	cx,[count]
 27916                                  	;jcxz	nochar
 27917                                  	; 12/12/2022
 27918 0000273B 833E[D203]01            	cmp	word [count],1 
 27919 00002740 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 27920                                  	
 27921 00002742 8B36[D603]              	mov	si,[chrptr]
 27922 00002746 268A04                  	mov	al,[es:si]
 27923 00002749 FF0E[D203]              	dec	word [count]
 27924 0000274D FF06[D603]              	inc	word [chrptr]
 27925                                  	; 12/12/202
 27926                                  	; cf=0
 27927                                  	;clc
 27928                                  ;get_ret:
 27929                                  	;pop	cx
 27930                                  	;retn
 27931                                  nochar: 
 27932                                  	; 12/12/2022
 27933                                  	; cf=1
 27934                                  	;stc
 27935                                  	;jmp	short get_ret
 27936                                  	
 27937 00002751 C3                      	retn
 27938                                  
 27939                                  ; 11/12/2022
 27940                                  %if 0
 27941                                  
 27942                                  ;----------------------------------------------------------------------------
 27943                                  ;
 27944                                  ; procedure : incorrect_order
 27945                                  ;
 27946                                  ;             show "incorrect order in config.sys ..." message.
 27947                                  ;
 27948                                  ;----------------------------------------------------------------------------
 27949                                  
 27950                                  incorrect_order:
 27951                                  	mov	dx,badorder
 27952                                  	call	print
 27953                                  	call	showlinenum
 27954                                  	retn
 27955                                  
 27956                                  %endif
 27957                                  
 27958                                  ;----------------------------------------------------------------------------
 27959                                  ;
 27960                                  ; procedure : error_line
 27961                                  ;
 27962                                  ;             show "error in config.sys ..." message.
 27963                                  ;
 27964                                  ;----------------------------------------------------------------------------
 27965                                  
 27966                                  	; 11/12/2022
 27967                                  	; 24/10/2022
 27968                                  error_line:
 27969                                  	; 11/12/2022
 27970                                  	; ds = cs
 27971                                  	;push	cs
 27972                                  	;pop	ds
 27973                                  
 27974 00002752 BA[9238]                	mov	dx,errorcmd
 27975 00002755 E8300C                  	call	print
 27976                                  	;call	showlinenum
 27977                                  	;retn
 27978                                  	; 11/12/2022
 27979                                  	;jmp	short shortlinemum
 27980                                  
 27981                                  ;----------------------------------------------------------------------------
 27982                                  ;
 27983                                  ; procedure : showlinenum
 27984                                  ;
 27985                                  ; convert the binary linecount to decimal ascii string in showcount
 27986                                  ; and display showcount at the current curser position.
 27987                                  ; in.) linecount
 27988                                  ;
 27989                                  ; out) the number is printed.
 27990                                  ;
 27991                                  ;----------------------------------------------------------------------------
 27992                                  
 27993                                  	; 11/12/2022
 27994                                  	; ds = cs
 27995                                  	; 24/10/2022
 27996                                  showlinenum:
 27997 00002758 06                      	push	es
 27998                                  	; 11/12/2022
 27999                                  	;push	ds
 28000 00002759 57                      	push	di
 28001                                  
 28002 0000275A 0E                      	push	cs
 28003 0000275B 07                      	pop	es		; es=cs
 28004                                  
 28005                                  	; 11/12/2022
 28006                                  	;push	cs
 28007                                  	;pop	ds
 28008                                  
 28009 0000275C BF[3103]                	mov	di,showcount+4	; di -> the least significant decimal field.
 28010 0000275F B90A00                  	mov	cx,10		; decimal divide factor
 28011                                  	;mov	ax,[cs:linecount]
 28012                                  	; 11/12/2022
 28013 00002762 A1[2B03]                	mov	ax,[linecount]
 28014                                  sln_loop:
 28015                                  	; 11/12/2022
 28016 00002765 39C8                    	cmp	ax,cx ; < 10 ?
 28017                                  	;cmp	ax,10		; < 10?
 28018 00002767 720C                    	jb	short sln_last
 28019                                  
 28020 00002769 31D2                    	xor	dx,dx
 28021 0000276B F7F1                    	div	cx	; cx = 10
 28022 0000276D 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 28023 00002770 8815                    	mov	[di],dl
 28024 00002772 4F                      	dec	di
 28025 00002773 EBF0                    	jmp	short sln_loop
 28026                                  
 28027                                  sln_last:
 28028 00002775 0C30                    	or	al,30h	; "0"
 28029 00002777 8805                    	mov	[di],al
 28030 00002779 89FA                    	mov	dx,di
 28031 0000277B E80A0C                  	call	print		; show it.
 28032 0000277E 5F                      	pop	di
 28033                                  	; 11/12/2022
 28034                                  	;pop	ds
 28035 0000277F 07                      	pop	es
 28036 00002780 C3                      	retn
 28037                                  
 28038                                  ; 07/04/2019 - Retro DOS v4.0
 28039                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 28040                                  
 28041                                  ;----------------------------------------------------------------------------
 28042                                  ;
 28043                                  ; procedure : ProcDOS
 28044                                  ;
 28045                                  ;	Process the result of DOS= parsing
 28046                                  ;
 28047                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 28048                                  ;				= 2 for DOS=LOW
 28049                                  ;				= 3 for DOS=UMB
 28050                                  ;				= 4 for DOS=NOUMB
 28051                                  ;----------------------------------------------------------------------------
 28052                                  
 28053                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 28054                                  	; (SYTSINIT:2AB5h)
 28055                                  ProcDOS:
 28056                                  	; 01/01/2023
 28057                                  	; ds = cs
 28058 00002781 30E4                    	xor	ah,ah
 28059                                  	;;mov	al,[cs:result_val_itag]
 28060                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 28061                                  	; 04/01/2023
 28062 00002783 A0[511D]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 28063 00002786 48                      	dec	ax
 28064 00002787 7415                    	jz	short pd_hi
 28065 00002789 48                      	dec	ax
 28066 0000278A 740E                    	jz	short pd_lo
 28067 0000278C 48                      	dec	ax
 28068 0000278D 7405                    	jz	short pd_umb
 28069                                  	;;mov	byte [cs:DevUMB],0
 28070                                  	; 18/12/2022
 28071                                  	;mov	byte [cs:DevUMB],ah ; 0
 28072                                  	; 01/01/2023
 28073 0000278F 8826[F81E]              	mov	byte [DevUMB],ah ; 0
 28074 00002793 C3                      	retn
 28075                                  pd_umb:
 28076                                  	; 04/01/2023
 28077 00002794 C606[F81E]FF            	mov	byte [DevUMB],0FFh
 28078                                  	;mov	byte [cs:DevUMB],0FFh
 28079 00002799 C3                      	retn
 28080                                  pd_lo:
 28081                                  	; 04/01/2023
 28082 0000279A A2[6A02]                	mov	[runhigh],al ; 0
 28083                                  	; 18/12/2022
 28084                                  	;mov	[cs:runhigh],al ; 0
 28085                                  	;;mov	byte [cs:runhigh],0
 28086 0000279D C3                      	retn
 28087                                  pd_hi:
 28088                                  	; 04/01/2023
 28089 0000279E C606[6A02]FF            	mov	byte [runhigh],0FFh
 28090                                  	;mov	byte [cs:runhigh],0FFh
 28091                                  limx:	; 11/12/2022
 28092 000027A3 C3                      	retn
 28093                                  
 28094                                  ;----------------------------------------------------------------------------
 28095                                  ;
 28096                                  ; procedure : LieInt12Mem
 28097                                  ;
 28098                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 28099                                  ;		alloclim set to the limit of low memory.
 28100                                  ;
 28101                                  ;	Output : none
 28102                                  ;
 28103                                  ;	Changes the ROM BIOS variable which stores the total low memory
 28104                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 28105                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 28106                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 28107                                  ;	converted into Ks and stored in 40:13h
 28108                                  ;
 28109                                  ;----------------------------------------------------------------------------
 28110                                  
 28111                                  LieInt12Mem:
 28112                                  	; 11/12/2022
 28113                                  	; ds = cs
 28114 000027A4 A1[A302]                	mov	ax,[ALLOCLIM]
 28115                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 28116                                  					; assuming that it is 3Com
 28117 000027A7 E84400                  	call	IsIt3Com		; Is it 3Com driver?
 28118 000027AA 740A                    	jz	short lim_set		; yes, lie to him differently
 28119                                  	; 13/05/2019
 28120                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 28121                                  	;je	short limx		; no, don't lie
 28122                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 28123                                  	; 11/12/2022
 28124                                  	; ds = cs
 28125 000027AC 803E[071F]00            	cmp	byte [DeviceHi],0
 28126 000027B1 74F0                    	je	short limx
 28127 000027B3 A1[EE1E]                	mov	ax,[DevLoadEnd]
 28128                                  lim_set:
 28129                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28130                                  	; 11/12/2022
 28131                                  	;call	SetInt12Mem
 28132                                  ;limx:
 28133                                  	;retn
 28134                                  	
 28135                                  	;jmp	short SetInt12Mem 
 28136                                  
 28137                                  ;----------------------------------------------------------------------------
 28138                                  ;
 28139                                  ; procedure : SetInt12Mem
 28140                                  ;
 28141                                  ;	Input : AX = Memory size to be set (in paras)
 28142                                  ;	Output : none
 28143                                  ;
 28144                                  ;	Sets the variable 40:13 to the memory size passed in AX
 28145                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 28146                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 28147                                  ;	restoring the value of 40:13
 28148                                  ;
 28149                                  ;----------------------------------------------------------------------------
 28150                                  
 28151                                  	; 01/11/2022
 28152                                  SetInt12Mem:
 28153 000027B6 1E                      	push	ds
 28154 000027B7 BB4000                  	mov	bx,40h
 28155 000027BA 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 28156 000027BC 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 28157 000027C0 2E891E[0B1F]            	mov	[cs:OldInt12Mem],bx	; save it
 28158 000027C5 B106                    	mov	cl,6
 28159 000027C7 D3E8                    	shr	ax,cl			; convert paras into Ks
 28160 000027C9 A31300                  	mov	[13h],ax		; Lie
 28161 000027CC 2EC606[0A1F]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 28162 000027D2 1F                      	pop	ds
 28163                                  ;limx:
 28164 000027D3 C3                      	retn
 28165                                  
 28166                                  ;----------------------------------------------------------------------------
 28167                                  ;
 28168                                  ; procedure : TrueInt12Mem
 28169                                  ;
 28170                                  ;	Input : Int12Lied = 0 if we are not lying currently
 28171                                  ;			  = 0ffh if we are lying
 28172                                  ;		OldInt12Mem = Saved value of 40:13h
 28173                                  ;
 28174                                  ;	Output : none
 28175                                  ;
 28176                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 28177                                  ;	and resets the flag which indicates that we were lying
 28178                                  ;
 28179                                  ;----------------------------------------------------------------------------
 28180                                  
 28181                                  TrueInt12Mem:
 28182                                  	; 11/12/2022
 28183                                  	; ds = cs
 28184 000027D4 803E[0A1F]00            	cmp	byte [Int12Lied],0
 28185                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 28186                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 28187                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 28188 000027D9 7412                    	je	short timx		; no, we weren't
 28189                                  	; 18/12/2022
 28190 000027DB B84000                  	mov	ax,40h
 28191 000027DE 8826[0A1F]              	mov	[Int12Lied],ah ; 0
 28192                                  	;mov	byte [Int12Lied],0
 28193                                  	;mov	byte [cs:Int12Lied],0
 28194 000027E2 1E                      	push	ds
 28195                                  	;mov	ax,40h
 28196 000027E3 8ED8                    	mov	ds,ax
 28197 000027E5 2EA1[0B1F]              	mov	ax,[cs:OldInt12Mem]
 28198 000027E9 A31300                  	mov	[13h],ax		; restore INT 12 memory
 28199 000027EC 1F                      	pop	ds
 28200                                  timx:
 28201 000027ED C3                      	retn
 28202                                  
 28203                                  ;----------------------------------------------------------------------------
 28204                                  ;
 28205                                  ; procedure : IsIt3Com?
 28206                                  ;
 28207                                  ;	Input : DevEntry = Seg:0 of device driver
 28208                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 28209                                  ;		 else Zero flag is reset
 28210                                  ;
 28211                                  ;----------------------------------------------------------------------------
 28212                                  
 28213                                  IsIt3Com:
 28214                                  	; 11/12/2022
 28215                                  	; ds = cs
 28216 000027EE 1E                      	push	ds
 28217 000027EF 06                      	push	es
 28218 000027F0 56                      	push	si
 28219                                  	; 11/12/2022
 28220 000027F1 C536[F01E]              	lds	si,[DevEntry]
 28221                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 28222 000027F5 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 28223 000027F8 0E                      	push	cs
 28224 000027F9 07                      	pop	es
 28225 000027FA BF[0D1F]                	mov	di,ThreeComName
 28226 000027FD B90800                  	mov	cx,8			; name length
 28227 00002800 F3A6                    	rep	cmpsb
 28228 00002802 5E                      	pop	si
 28229 00002803 07                      	pop	es
 28230 00002804 1F                      	pop	ds
 28231 00002805 C3                      	retn
 28232                                  
 28233                                  ;M020 : BEGIN
 28234                                  ;----------------------------------------------------------------------------
 28235                                  
 28236                                  UpdatePDB:
 28237 00002806 1E                      	push	ds
 28238 00002807 B462                    	mov	ah,62h
 28239 00002809 CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 28240 0000280B 8EDB                    	mov	ds,bx
 28241 0000280D 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 28242                                  	;mov	[2],bx
 28243 00002812 891E0200                	mov	[PDB.BLOCK_LEN],bx
 28244 00002816 1F                      	pop	ds
 28245 00002817 C3                      	retn
 28246                                  
 28247                                  ; M020 : END
 28248                                  
 28249                                  ;----------------------------------------------------------------------------
 28250                                  
 28251                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28252                                  
 28253                                  %if 0
 28254                                  
 28255                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 28256                                  ;include highexit.inc	; umb's, etc
 28257                                  
 28258                                  ; ----------------------------------------------------------------------
 28259                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 28260                                  ; ----------------------------------------------------------------------
 28261                                  ; 07/04/2019 - Retro DOS v4.0
 28262                                  
 28263                                  ;******************************************************************************
 28264                                  ;
 28265                                  ; This file contains routines needed to parse and implement user-given
 28266                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 28267                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 28268                                  ; the variables in highvar.inc, for use by the rest of the routines.
 28269                                  ;
 28270                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 28271                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 28272                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 28273                                  ;    DH/LH module opts
 28274                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 28275                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 28276                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 28277                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 28278                                  ; available during the load.
 28279                                  ;
 28280                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 28281                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 28282                                  ; upper-memory block which was not specified by the user... in addition, if
 28283                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 28284                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 28285                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 28286                                  ; free any UMBs so allocated.
 28287                                  ;
 28288                                  ; When a device driver loads, there is the additional problem of allocating its
 28289                                  ; initial load site; this should be restricted to the first UMB specified on
 28290                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 28291                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 28292                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 28293                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 28294                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 28295                                  ;
 28296                                  ;******************************************************************************
 28297                                  
 28298                                  SWTCH	equ	'/'		; Switch character
 28299                                  
 28300                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 28301                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 28302                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 28303                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 28304                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 28305                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 28306                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 28307                                  
 28308                                  CR	equ	0Dh		; Carriage Return
 28309                                  LF	equ	0Ah		; Line Feed
 28310                                  TAB	equ	09h		; Tab character (^I)
 28311                                  
 28312                                  ; -----------------------------------------------------------------------------
 28313                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 28314                                  ; -----------------------------------------------------------------------------
 28315                                  ; ENTRY:       None
 28316                                  ; EXIT:        Variables listed in highvar.inc are initialized
 28317                                  ; ERROR EXIT:  None
 28318                                  ; USES:        Flags, variables in highvar.inc
 28319                                  ; -----------------------------------------------------------------------------
 28320                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 28321                                  ; are largely ignored, but it is initialized nonetheless.
 28322                                  ; -----------------------------------------------------------------------------
 28323                                  
 28324                                  InitVar:
 28325                                  	;pushreg <ax, cx, di, es>
 28326                                  	push	ax
 28327                                  	push	cx
 28328                                  	push	di
 28329                                  	push	es
 28330                                  
 28331                                  	;dataseg es			;Point ES into appropriate data segment
 28332                                  	push	cs
 28333                                  	pop	es
 28334                                  
 28335                                  	xor	ax,ax
 28336                                  	mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 28337                                  	mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 28338                                  	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 28339                                  	mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 28340                                  					;Later is the # of the 1st spec'd UMB
 28341                                  	mov	[es:fm_argc], al	;Start with zero args having been read
 28342                                  
 28343                                  	cld
 28344                                  
 28345                                  	mov	cx,MAXUMB ; 16		;For each entry
 28346                                  	mov	di,UmbUsed		;on the UmbUsed array,
 28347                                  	rep	stosb			;	Store 0
 28348                                  
 28349                                  	mov	cx,MAXUMB ; 16		;Okay... for each entry
 28350                                  	mov	di,UmbSize		;on the UmbSize array,
 28351                                  	rep	stosw			;	Store 0
 28352                                  
 28353                                  	;normseg es			; Return ES
 28354                                  
 28355                                  	;popreg	<es, di, cx, ax>
 28356                                  	pop	es
 28357                                  	pop	di
 28358                                  	pop	cx
 28359                                  	pop	ax	 	
 28360                                  
 28361                                  	retn
 28362                                  
 28363                                  ; -----------------------------------------------------------------------------
 28364                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 28365                                  ; -----------------------------------------------------------------------------
 28366                                  ; ENTRY   : None
 28367                                  ; EXIT    : None
 28368                                  ; ERROR   : None
 28369                                  ; USES    : Flags, fm_umb, fm_strat
 28370                                  ; -----------------------------------------------------------------------------
 28371                                  
 28372                                  FixMem:
 28373                                  	push	ax
 28374                                  	push	bx
 28375                                  	push	cx
 28376                                  	push	dx
 28377                                  	push	es
 28378                                  
 28379                                  	call	fm_link		; Link in UMBs
 28380                                  
 28381                                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 28382                                  	jc	short fmX	; (if couldn't get it, leave now).
 28383                                  
 28384                                  	mov	es,ax		; It returns in AX, so move it to ES.
 28385                                  
 28386                                  ; - Walk MCB Chain ------------------------------------------------------------
 28387                                  
 28388                                  	xor	dx,dx		; We're keeping the address of the last MCB
 28389                                  	mov 	cx,dx		; in CX... and the last owner
 28390                                  	inc	dx		; in dx as we go through the loop:
 28391                                  
 28392                                  ; ------------------------------------------
 28393                                  ; FM10--DX  = last MCB's owner's PSP address
 28394                                  ;       CX  = last MCB's address (segment)
 28395                                  ; ------------------------------------------
 28396                                  
 28397                                  fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 28398                                  	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 28399                                  	or	bx,dx			; dx was owner of previous MCB
 28400                                  	jnz	short fm30		; If not both zero, don't cat.
 28401                                  
 28402                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 28403                                  
 28404                                  fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 28405                                  	mov	es,cx			; Go back to prev MCB's address
 28406                                  	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 28407                                  
 28408                                  	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 28409                                  	add	bx,1			; And add one for the header
 28410                                  	mov	[es:ARENA.SIZE],bx	; Write the size
 28411                                  
 28412                                  	; ---------------------------------------------------------------------
 28413                                  
 28414                                  fm30:	mov	cx,es			; Put this address on the stack
 28415                                  	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 28416                                  
 28417                                  	mov	bx,es			; Move to the next MCB
 28418                                  	add	bx,[es:ARENA.SIZE]
 28419                                  	inc	bx
 28420                                  	mov	es,bx
 28421                                  
 28422                                  	;cmp	al,'Z'
 28423                                  	cmp	al,arena_signature_end
 28424                                  	jne	short fm10		; If signature != 'Z', there are more.
 28425                                  fmX:	
 28426                                  	call	fm_unlink		; Unlink UMBs
 28427                                  
 28428                                  	pop	es
 28429                                  	pop	dx
 28430                                  	pop	cx
 28431                                  	pop	bx
 28432                                  	pop	ax
 28433                                  
 28434                                  	retn
 28435                                  
 28436                                  ; -----------------------------------------------------------------------------
 28437                                  ;*** fm_link - links UMBs not already linked in
 28438                                  ; -----------------------------------------------------------------------------
 28439                                  ; ENTRY:    None
 28440                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 28441                                  ; ERROR:    None
 28442                                  ; USES:     AX, BX, fm_umb
 28443                                  ; -----------------------------------------------------------------------------
 28444                                  
 28445                                  fm_link:
 28446                                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 28447                                  	int	21h			; Current link-state is now in al
 28448                                  
 28449                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 28450                                  	;
 28451                                  	;push	es
 28452                                  	;push	cs
 28453                                  	;pop	es
 28454                                  	;mov	[es:fm_umb],al
 28455                                  	;pop	es
 28456                                  	
 28457                                  	mov	[cs:fm_umb],al
 28458                                  
 28459                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28460                                  	mov	bx,1
 28461                                  	int	21h
 28462                                  	retn
 28463                                  
 28464                                  ; -----------------------------------------------------------------------------
 28465                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 28466                                  ; -----------------------------------------------------------------------------
 28467                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 28468                                  ; EXIT:     None
 28469                                  ; ERROR:    None
 28470                                  ; USES:     AX, BX
 28471                                  ; -----------------------------------------------------------------------------
 28472                                  
 28473                                  fm_unlink:
 28474                                  	xor	bx,bx
 28475                                  	
 28476                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 28477                                  	;
 28478                                  	;push	ds
 28479                                  	;push	cs
 28480                                  	;pop	ds
 28481                                  	;mov	bl,[fm_umb]	
 28482                                  	;pop	ds
 28483                                  	
 28484                                  	mov	bl,[cs:fm_umb]
 28485                                  
 28486                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28487                                  	int	21h			; so just use that, and call int 21h
 28488                                  	retn
 28489                                  
 28490                                  ; 08/04/2019 - Retro DOS v4.0
 28491                                  
 28492                                  ; -----------------------------------------------------------------------------
 28493                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 28494                                  ; laid out in highvar.inc
 28495                                  ; -----------------------------------------------------------------------------
 28496                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 28497                                  ; EXIT:     ES:SI points to first character in child program name
 28498                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 28499                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 28500                                  ; -----------------------------------------------------------------------------
 28501                                  ; Error codes (in AX if carry set on return):
 28502                                  ;
 28503                                  PV_InvArg	equ	1	; Invalid argument passed
 28504                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 28505                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 28506                                  ;
 28507                                  ; This routine exects ES:SI to point to a string much like the following:
 28508                                  ;    "/S/L:1,200;2 module options"
 28509                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 28510                                  ; required, though that's what this routine is supposed to parse.
 28511                                  ;
 28512                                  optS		equ	'S'	; /S
 28513                                  optL		equ	'L'	; /L:...
 28514                                  ;
 28515                                  ; -----------------------------------------------------------------------------
 28516                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 28517                                  ; a command-line for spawning a child process. For a typical LH command, say,
 28518                                  ;     lh /l:1,1000;2 print/d:lpt2
 28519                                  ; the arguments would look like (one per line):
 28520                                  ;     lh
 28521                                  ;     /l
 28522                                  ;     1
 28523                                  ;     1000
 28524                                  ;     2
 28525                                  ;     print
 28526                                  ;     /d
 28527                                  ;     :lpt2
 28528                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 28529                                  ; arg was the filename. So, inside this routine, we keep a running counter
 28530                                  ; of the number of arguments LH will need to skip in order to get to the
 28531                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 28532                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 28533                                  ; for:
 28534                                  ;    Each /L
 28535                                  ;    Each /S (there should be only one)
 28536                                  ;    Each UMB number (they follow ":" or ";")
 28537                                  ;    Each UMB size   (they follow ",")
 28538                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 28539                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 28540                                  ; -----------------------------------------------------------------------------
 28541                                  
 28542                                  ParseVar:
 28543                                  	;pushreg <di, ds, es>
 28544                                  	push	di
 28545                                  	push	ds
 28546                                  	push	es
 28547                                  
 28548                                  	push	es		; Make DS:SI point to it, as well as ES:SI
 28549                                  	pop	ds		; (regardless if we're in devhigh or loadhigh)
 28550                                  	cld
 28551                                  
 28552                                  ; ------------------------------------------------
 28553                                  ; PV10--ES:SI = any whitespace on the command-line
 28554                                  ; ------------------------------------------------
 28555                                  
 28556                                  pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 28557                                  	call	isWhite
 28558                                  	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 28559                                  	;cmp	al,'/'
 28560                                  	cmp	al,SWTCH
 28561                                  	je	short pv20	;       ES:SI=="/L..."--go process a switch
 28562                                  
 28563                                  	dec	si		; Backup--it's now "odule options", and we need
 28564                                  	clc			; that "m" we just read (or whatever it is).
 28565                                  	jmp	short pvX	; Then return with carry clear == we're done.
 28566                                  
 28567                                  pv20:	lodsb			; Just read 'S' or 'L', hopefully
 28568                                  	;toUpper al		; So we make it upper-case, and...
 28569                                  	and	al,0DFh
 28570                                  	;cmp	al,'S'
 28571                                  	cmp	al,optS		; just read 'S'?
 28572                                  	jne	short pv30
 28573                                  
 28574                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 28575                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 28576                                  
 28577                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 28578                                  	;
 28579                                  	;push	es
 28580                                  	;push	cs
 28581                                  	;pop	es
 28582                                  	;mov	[es:fUmbTiny],1	
 28583                                  	;pop	es
 28584                                  
 28585                                  	mov	byte [cs:fUmbTiny],1
 28586                                  
 28587                                  	jmp	short pv10	; possibly even "/L...".
 28588                                  
 28589                                  pv30:	;cmp	al,'L'
 28590                                  	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 28591                                  	jne	short pvE1		; switch!
 28592                                  
 28593                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 28594                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 28595                                  
 28596                                  	call	parseL
 28597                                  	jnc	short pv10	; If no carry, go back and look for more
 28598                                  
 28599                                  	dec	si		; Else, back up and exit.
 28600                                  	jmp	short pvErr	; AX has already been set by parseL
 28601                                  
 28602                                  pvE1:	;mov	ax,3
 28603                                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 28604                                  pvErr:	dec	si
 28605                                  	dec	si
 28606                                  	stc
 28607                                  pvX:	;popreg	<es, ds, di>
 28608                                  	pop	es
 28609                                  	pop	ds
 28610                                  	pop	di
 28611                                  	retn
 28612                                  
 28613                                  ; -----------------------------------------------------------------------------
 28614                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 28615                                  ; -----------------------------------------------------------------------------
 28616                                  ; ENTRY:    ES:SI points to colon
 28617                                  ; EXIT:     ES:SI points to first character not parsed
 28618                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 28619                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 28620                                  ; -----------------------------------------------------------------------------
 28621                                  ; If the string here is terminated with anything other than whitespace or a
 28622                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 28623                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 28624                                  ; makes sure the app /L: is reported as being the culprit.
 28625                                  ; -----------------------------------------------------------------------------
 28626                                  
 28627                                  parseL:
 28628                                  	lodsb
 28629                                  	cmp	al,':'		; Make sure they did /L:
 28630                                  	jne	short plE1	; If they didn't, return with carry set.
 28631                                  
 28632                                  ; ------------------------------------------
 28633                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 28634                                  ; ------------------------------------------
 28635                                  
 28636                                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 28637                                  	jc	short plE2	; And error if it's a bad number.
 28638                                  	call	convUMB		; Convert any address to a UMB number
 28639                                  
 28640                                  	mov	cl,al		; Remember the UMB number
 28641                                  	call	stowUMB		; Mark this UMB # as used;
 28642                                  	jc	short plE2	; If it was already marked, it'll error
 28643                                  
 28644                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 28645                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 28646                                  
 28647                                  	lodsb
 28648                                  	cmp	al,';'		; Did "umb;" ?
 28649                                  	je	short pl10	; Yep: go back and get another UMB.
 28650                                  
 28651                                  	call	isWhite		; Did "umb " ?
 28652                                  	jz	short plX	; Yep: return (it'll go back to whitespace)
 28653                                  
 28654                                  	call	isEOL		; Did "umb" ?
 28655                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 28656                                  
 28657                                  	;cmp	al,'/'
 28658                                  	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 28659                                  	je	short plSwX	; If so, back up ES:SI one character and return
 28660                                  
 28661                                  	cmp	al,','		; Did "umb," ?
 28662                                  	jne	short plE1	; Just what the heck DID they do? Return error.
 28663                                  
 28664                                  ; --- Read a size -------------------------------------------------------------
 28665                                  
 28666                                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 28667                                  	jc	short plE1	; And error if it's a bad size.
 28668                                  
 28669                                  	call	toPara		; Convert from bytes to paragraphs
 28670                                  
 28671                                  	call	stowSiz		; CL still has the UMB number for this routine
 28672                                  
 28673                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 28674                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 28675                                  
 28676                                  	lodsb
 28677                                  	cmp	al,';'		; They did "umb,size;", so get another UMB.
 28678                                  	je	short pl10	;
 28679                                  
 28680                                  	call	isWhite		; Did it end with whitespace?
 28681                                  	jz	short plX	; If so, we're done here--go back.
 28682                                  
 28683                                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 28684                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 28685                                  
 28686                                  	;cmp	al,'/'
 28687                                  	cmp	al,SWTCH	; Did they do "umb,size/" ?
 28688                                  	je	short plSwX	; If so, again, we're done here.
 28689                                  plE1:	
 28690                                  	;mov	ax,1
 28691                                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 28692                                  	dec	si
 28693                                  	stc
 28694                                  	retn
 28695                                  
 28696                                  plE2:	;mov	ax,2
 28697                                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 28698                                  	; 12/12/2022
 28699                                  	; cf=1
 28700                                  	;stc
 28701                                  	retn
 28702                                  plSwX:	
 28703                                  	dec	si		; If we hit a '/' character, back up one char
 28704                                  				; so the whitespace checker will see it too.
 28705                                  plX:	; 12/12/2022
 28706                                  	; cf=0
 28707                                  	;clc			; Then just return with carry clear, so
 28708                                  	retn			; ParseVar will go about its business.
 28709                                  
 28710                                  ; -----------------------------------------------------------------------------
 28711                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 28712                                  ; -----------------------------------------------------------------------------
 28713                                  ; ENTRY:    None
 28714                                  ; EXIT:     None
 28715                                  ; ERROR:    None
 28716                                  ; USES:     fm_argc, flags
 28717                                  ; -----------------------------------------------------------------------------
 28718                                  
 28719                                  ;incArgc:
 28720                                  	;push	ax
 28721                                  
 28722                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 28723                                  
 28724                                  	;mov	al,[cs:fm_argc]
 28725                                  
 28726                                  	;inc	al		; Increment it,
 28727                                  
 28728                                  	;;putdata fm_argc, al	; And store it right back.
 28729                                  
 28730                                  	;mov	[cs:fm_argc],al
 28731                                  
 28732                                  	;pop	ax
 28733                                  	;retn
 28734                                  
 28735                                  ; -----------------------------------------------------------------------------
 28736                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 28737                                  ; -----------------------------------------------------------------------------
 28738                                  ; ENTRY:    AL contains character to test
 28739                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 28740                                  ; ERROR:    None
 28741                                  ; USES:     ZF
 28742                                  ; -----------------------------------------------------------------------------
 28743                                  
 28744                                  isEOL:
 28745                                  	cmp	al,0		; Null-terminator
 28746                                  	je	short ieX
 28747                                  	cmp	al,CR ; 0Dh	; Carriage Return
 28748                                  	je	short ieX
 28749                                  	cmp	al,LF ; 0Ah	; LineFeed
 28750                                  ieX:	
 28751                                  	retn
 28752                                  
 28753                                  ; -----------------------------------------------------------------------------
 28754                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 28755                                  ; -----------------------------------------------------------------------------
 28756                                  ; ENTRY:    AL contains character to test
 28757                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 28758                                  ; ERROR:    None
 28759                                  ; USES:     ZF
 28760                                  ; -----------------------------------------------------------------------------
 28761                                  
 28762                                  isWhite:
 28763                                  	cmp	al,' '		; Space
 28764                                  	je	short iwX
 28765                                  	cmp	al,'='		; Equals (treat as whitespace)
 28766                                  	je	short iwX
 28767                                  	cmp	al,tab ; 9	; Tab
 28768                                  iwX:	
 28769                                  	retn
 28770                                  
 28771                                  ; -----------------------------------------------------------------------------
 28772                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 28773                                  ; -----------------------------------------------------------------------------
 28774                                  ; ENTRY:    AL contains UMB number
 28775                                  ; EXIT:     None
 28776                                  ; ERROR:    None
 28777                                  ; USES:     Flags, variables in highvar.inc
 28778                                  ; -----------------------------------------------------------------------------
 28779                                  
 28780                                  unMarkUMB:
 28781                                  	push	ax
 28782                                  	push	bx
 28783                                  	push	di
 28784                                  	push	es
 28785                                  
 28786                                  	push	cs
 28787                                  	pop	es
 28788                                  
 28789                                  	xor	ah,ah
 28790                                  	mov	bx,ax
 28791                                  
 28792                                  	; 19/04/2019
 28793                                  	
 28794                                  	;mov	byte [es:bx+UmbUsed],0
 28795                                  	mov	[es:bx+UmbUsed],ah ; 0
 28796                                  
 28797                                  	cmp	[es:UmbLoad],al
 28798                                  	jne	short umu10
 28799                                  
 28800                                  	;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 28801                                  	mov	[es:UmbLoad],ah ; 0
 28802                                  umu10:	
 28803                                  	pop	es
 28804                                  	pop	di
 28805                                  	pop	bx
 28806                                  	pop	ax
 28807                                  	retn
 28808                                  
 28809                                  ; -----------------------------------------------------------------------------
 28810                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 28811                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 28812                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 28813                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 28814                                  ; -----------------------------------------------------------------------------
 28815                                  ; ENTRY:    AL contains UMB number, as specified by the user
 28816                                  ; EXIT:     None
 28817                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 28818                                  ; USES:     AX, Flags, variables in highvar.inc
 28819                                  ; -----------------------------------------------------------------------------
 28820                                  
 28821                                  stowUMB:
 28822                                  	cmp	al,MAXUMB ; 16
 28823                                  	jb	short su10
 28824                                  	stc
 28825                                  	retn			; Ooops-- UMB>=MAXUMB
 28826                                  su10:	
 28827                                  	push	bx
 28828                                  	push	di
 28829                                  	push	si
 28830                                  	push	ds
 28831                                  	push	es
 28832                                  	push	cs
 28833                                  	pop	es
 28834                                  	push	cs
 28835                                  	pop	ds
 28836                                  	
 28837                                  	;cmp	byte [UmbLoad],0FFh
 28838                                  	cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 28839                                  	jne	short su20
 28840                                  	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 28841                                  su20:	
 28842                                  	or	al,al		; If they gave UMB 0, there's really nothing
 28843                                  	jz	short su30	; that we should do here.
 28844                                  
 28845                                  	mov	bl,al
 28846                                  	xor	bh,bh
 28847                                  	mov	ax,1		; Now, AX = 1, and BX = UMB Number
 28848                                  
 28849                                  	xchg	[es:bx+UmbUsed],al
 28850                                  
 28851                                  	or	al,al		; If it was already 1, then al==1... and that
 28852                                  	jz	short su30	; means an error.
 28853                                  
 28854                                  	stc			; OOOPS!  This one's been used before.  :(
 28855                                  su30:	
 28856                                  	pop	es
 28857                                  	pop	ds
 28858                                  	pop	si
 28859                                  	pop	di
 28860                                  	pop	bx
 28861                                  	retn
 28862                                  
 28863                                  ; -----------------------------------------------------------------------------
 28864                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 28865                                  ; -----------------------------------------------------------------------------
 28866                                  ; ENTRY:    CL contains UMB number, AX contains size
 28867                                  ; EXIT:     None
 28868                                  ; ERROR:    None
 28869                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 28870                                  ; -----------------------------------------------------------------------------
 28871                                  
 28872                                  ; 13/05/2019
 28873                                  
 28874                                  stowSiz:
 28875                                  	push	bx
 28876                                  	;push	di ; ?
 28877                                  	push	es
 28878                                  
 28879                                  	push	cs
 28880                                  	pop	es	
 28881                                  
 28882                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 28883                                  	mov	bh,0			;     bx==UMB number, AX==size
 28884                                  	shl	bl,1			;     bx==offset into array, AX=size
 28885                                  	mov	[es:bx+UmbSize],ax	; Store the size
 28886                                  	
 28887                                  	pop	es
 28888                                  	;pop	di ; ?
 28889                                  	pop	bx
 28890                                  
 28891                                  	retn
 28892                                  
 28893                                  ; -----------------------------------------------------------------------------
 28894                                  ;*** toDigit - converts a character-digit to its binary counterpart
 28895                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 28896                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 28897                                  ; A-F are considered valid iff gnradix is 16.
 28898                                  ; -----------------------------------------------------------------------------
 28899                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 28900                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 28901                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 28902                                  ; USES:     CL, Flags
 28903                                  ; -----------------------------------------------------------------------------
 28904                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 28905                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 28906                                  ; will be 10 or 16.
 28907                                  ; -----------------------------------------------------------------------------
 28908                                  
 28909                                  gnradix:
 28910                                  	dw	0		; Must be a word--16x16 multiplication
 28911                                  
 28912                                  toDigit:
 28913                                  	cmp	word [cs:gnradix],16
 28914                                  	jne	short td20	; Don't check hex digits if radix isn't 16
 28915                                  
 28916                                  toDigit_hex:
 28917                                  	cmp	cl,'a'	; 61h
 28918                                  	jb	short td10
 28919                                  	cmp	cl,'f'	; 66h
 28920                                  	ja	short tdE	; Nothing valid above 'z' at all...
 28921                                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 28922                                  	;clc			; <- CLC is implicit from last SUB
 28923                                  	retn
 28924                                  td10:	
 28925                                  	cmp	cl,'A'  ; 41h
 28926                                  	jb	short td20	; Below 'A'?  Not a letter...
 28927                                  	cmp	cl,'F'	; 46h
 28928                                  	ja	short tdE	; Above 'F'?  Not a digit.
 28929                                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 28930                                  	;clc			; <- CLC is implicit from last SUB
 28931                                  	retn
 28932                                  toDigit_dec:
 28933                                  td20:	
 28934                                  	cmp	cl,'0'		; If less than zero,
 28935                                  	;jb	short tdE	; Done.
 28936                                  	jb	short tdEr ; 08/04/2019
 28937                                  	cmp	cl,'9'		; Or, if greater than nine,
 28938                                  	ja	short tdE	; Done.
 28939                                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 28940                                  	;clc			; <- CLC is implicit from last SUB
 28941                                  	retn
 28942                                  tdE:	
 28943                                  	stc
 28944                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 28945                                  	retn
 28946                                  
 28947                                  ; -----------------------------------------------------------------------------
 28948                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 28949                                  ; -----------------------------------------------------------------------------
 28950                                  ; ENTRY:    ES:SI points to an ascii string to scan
 28951                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 28952                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 28953                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 28954                                  ; -----------------------------------------------------------------------------
 28955                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 28956                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 28957                                  ; will be 10 or 16.
 28958                                  ; -----------------------------------------------------------------------------
 28959                                  
 28960                                  ; 08/04/2019 - Retro DOS v4.0
 28961                                  
 28962                                  GetXNum:
 28963                                  	;pushreg <bx, cx, ds>
 28964                                  	push	bx
 28965                                  	push	cx
 28966                                  	push	ds
 28967                                  
 28968                                  	cld
 28969                                  	xor	ax,ax
 28970                                  	xor	bx,bx
 28971                                  	xor	cx,cx
 28972                                  	xor	dx,dx			; Start with 0 (makes sense)
 28973                                  
 28974                                  	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 28975                                  
 28976                                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 28977                                  	;call	toDigit
 28978                                  	call	toDigit_dec
 28979                                  	jc	short gxnE		; If it's not a digit, leave now.
 28980                                  
 28981                                  	or	cl,cl
 28982                                  	jnz	short gxn20		; Doesn't have '0x'
 28983                                  	mov	cl,[es:si+1]
 28984                                  	cmp	cl,'x'			; Either 'x'...
 28985                                  	je	short gxn10
 28986                                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 28987                                  	jne	short gxn20
 28988                                  
 28989                                  gxn10:	
 28990                                  	mov	word [cs:gnradix], 16
 28991                                  	inc	si			; Since we read "0x", march over it.
 28992                                  	inc	si
 28993                                  
 28994                                  ; ------------------------------------------------------
 28995                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 28996                                  ;        DX:AX = current total
 28997                                  ;        BX    = 0
 28998                                  ;        CH    = 0
 28999                                  ; ------------------------------------------------------
 29000                                  
 29001                                  gxn20:	
 29002                                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 29003                                  	inc	si
 29004                                  
 29005                                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 29006                                  	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 29007                                  
 29008                                  	call	mul32		; Multiply DX:AX by gnradix
 29009                                  	jc	short gxnX	; (if it's too big, error out)
 29010                                  
 29011                                  	add	ax,cx		; Add the digit
 29012                                  	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 29013                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 29014                                  	;jmp	short gxn20
 29015                                  	jnc	short gxn20
 29016                                  gxnE:	
 29017                                  	;stc			; In this case, we need to set the carry
 29018                                  	jmp	short gxnX	; and leave--there were no digits given.
 29019                                  gxnQ:	
 29020                                  	dec	si		; Don't read in the offensive character.
 29021                                  	clc			; And clear carry, so they know it's okay.
 29022                                  gxnX:	
 29023                                  	pop	ds
 29024                                  	pop	cx
 29025                                  	pop	bx
 29026                                  	retn
 29027                                  
 29028                                  ; -----------------------------------------------------------------------------
 29029                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 29030                                  ; -----------------------------------------------------------------------------
 29031                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 29032                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 29033                                  ; ERROR:   Carry set if number was too large
 29034                                  ; USES:    Flags, AX, DX
 29035                                  ; -----------------------------------------------------------------------------
 29036                                  
 29037                                  mul32:
 29038                                  	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 29039                                  	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 29040                                  	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 29041                                  	jc	short m32E	; Too big?
 29042                                  
 29043                                  	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 29044                                  	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 29045                                  
 29046                                  	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 29047                                  	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 29048                                  	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29049                                  	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29050                                  	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 29051                                  	retn
 29052                                  m32E:	
 29053                                  	pop	ax
 29054                                  	retn
 29055                                  
 29056                                  ; -----------------------------------------------------------------------------
 29057                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 29058                                  ; -----------------------------------------------------------------------------
 29059                                  ; ENTRY:   DX:AX = the number to be divided
 29060                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 29061                                  ; ERROR:   None
 29062                                  ; USES:    Flags, AX, DX
 29063                                  ; -----------------------------------------------------------------------------
 29064                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 29065                                  ;       can't ensure a 386 host machine. Sorry.
 29066                                  ; -----------------------------------------------------------------------------
 29067                                  
 29068                                  toPara:
 29069                                  	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 29070                                  
 29071                                  	mov	cl,4		;
 29072                                  	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 29073                                  	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 29074                                  	mov	cl,12
 29075                                  	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 29076                                  	or	ax,dx		;    AX=hhhh LLLL llll llll
 29077                                  
 29078                                  	pop	cx
 29079                                  	retn
 29080                                  
 29081                                  ; -----------------------------------------------------------------------------
 29082                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 29083                                  ; -----------------------------------------------------------------------------
 29084                                  ; ENTRY:  Nothing
 29085                                  ; EXIT:   AX contains 0x9FFF for most systems
 29086                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 29087                                  ; USES:   Flags, AX
 29088                                  ; -----------------------------------------------------------------------------
 29089                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 29090                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 29091                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 29092                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 29093                                  ; -----------------------------------------------------------------------------
 29094                                  
 29095                                  UmbHead:
 29096                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 29097                                  
 29098                                  	;push	si ; ?
 29099                                  	;push	ds ; ? 
 29100                                  	;push	es
 29101                                  	;push	bx ; *	
 29102                                  
 29103                                  	; 09/04/2019
 29104                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 29105                                  
 29106                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 29107                                  	int	21h
 29108                                  
 29109                                  	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 29110                                  	cmp	ax,0FFFFh
 29111                                  	je	short uhE		; If it's 0xFFFF, it's an error...
 29112                                  
 29113                                  	clc				; Else, it isn't (CLC done by prev cmp)
 29114                                  	;jmp	short uhX
 29115                                  	; 12/12/2022
 29116                                  	retn
 29117                                  uhE:	
 29118                                  	stc
 29119                                  uhX:	
 29120                                  	;pop	bx ; *
 29121                                  	;pop	es
 29122                                  	;pop	ds ; ?
 29123                                  	;pop	si ; ?
 29124                                  	retn
 29125                                  
 29126                                  ; -----------------------------------------------------------------------------
 29127                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 29128                                  ; -----------------------------------------------------------------------------
 29129                                  ; ENTRY:  ES:0 should point to a valid MCB
 29130                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 29131                                  ; USES:   Flags
 29132                                  ; -----------------------------------------------------------------------------
 29133                                  
 29134                                  isSysMCB:
 29135                                  	;push	ax
 29136                                  
 29137                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 29138                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 29139                                  	;je	short ism10
 29140                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 29141                                  	;;je	short ism10
 29142                                  	;;jmp	short ismX		; Anything else isn't.
 29143                                  	;jne	short ismX
 29144                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 29145                                  	jne	short ismX 
 29146                                  ism10:	
 29147                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 29148                                  	;cmp	ax,'SC' ; 4353h
 29149                                  	cmp	word [es:ARENA.NAME],'SC'
 29150                                  ismX:	
 29151                                  	;pop	ax
 29152                                  	retn
 29153                                  
 29154                                  ; 09/04/2019 - Retro DOS v4.0
 29155                                  
 29156                                  ; -----------------------------------------------------------------------------
 29157                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 29158                                  ; -----------------------------------------------------------------------------
 29159                                  ; ENTRY:  AX contains a segment address
 29160                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 29161                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 29162                                  ; USES:   Flags, AX
 29163                                  ; -----------------------------------------------------------------------------
 29164                                  ; An address in the following areas is treated as:
 29165                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 29166                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 29167                                  ;      ...
 29168                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 29169                                  ; -----------------------------------------------------------------------------
 29170                                  
 29171                                  AddrToUmb:
 29172                                  	push	cx
 29173                                  	push	dx
 29174                                  	push	es
 29175                                  
 29176                                  	mov	dx,ax		; DX = address to search for
 29177                                  
 29178                                  	call	UmbHead		; AX = first segment
 29179                                  	jc	short atuE	; If it couldn't get it, error out.
 29180                                  
 29181                                  	mov	es,ax		; ES = first UMB segment
 29182                                  	xor	cx,cx		; Pretend we're on UMB 0 for now... (cx = UMB#)
 29183                                  
 29184                                  ; ----------------------------------------
 29185                                  ; ATU10--ES - Current MCB address
 29186                                  ;        DX - Address given for conversion
 29187                                  ;        CX - Current UMB #
 29188                                  ; ----------------------------------------
 29189                                  
 29190                                  atu10:	mov	ax,es
 29191                                          cmp	ax,dx		; Present segment >= given segment?
 29192                                  	jae	short atuX	; Yep--done.
 29193                                  
 29194                                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 29195                                  	jnz	short atu20
 29196                                  
 29197                                  	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 29198                                  atu20:	
 29199                                  	mov	al,[es:ARENA.SIGNATURE]
 29200                                  	cmp	al,arena_signature_end  ; 'Z'
 29201                                  	je	short atu30		; 'Z' means this was the last MCB... that's it.
 29202                                  
 29203                                  	;NextMCB es, ax
 29204                                  
 29205                                  	mov     ax,es
 29206                                  	;add	ax,[es:3]
 29207                                  	add     ax,[es:ARENA.SIZE]
 29208                                  	inc     ax
 29209                                  	mov     es,ax
 29210                                  	
 29211                                  	jmp	short atu10
 29212                                  
 29213                                  ; -----------------------------------------------------------------------------
 29214                                  ; if we get to atu30, they specified a number that was past the last MCB.
 29215                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 29216                                  ; -----------------------------------------------------------------------------
 29217                                  
 29218                                  atu30:	
 29219                                  	mov	ax,es
 29220                                  	add	ax,[es:ARENA.SIZE]
 29221                                  	cmp	ax,dx		; Present >= given?
 29222                                  	jae	short atuX	; Yep! It _was_ inside.
 29223                                  atuE:	
 29224                                  	xor	cx,cx		; Else, fall through with UMB # == -1
 29225                                  	dec	cx		; (that makes it return 0xFFFF and sets CF)
 29226                                  atuX:	
 29227                                  	mov	ax, cx		; Return the UMB number in AX
 29228                                  	
 29229                                  	pop	es	
 29230                                  	pop	dx
 29231                                  	pop	cx
 29232                                  	retn
 29233                                  
 29234                                  ; -----------------------------------------------------------------------------
 29235                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 29236                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 29237                                  ; address rather than a UMB number... and use that address to look up a UMB.
 29238                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 29239                                  ; -----------------------------------------------------------------------------
 29240                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 29241                                  ; EXIT:   AX will contain a UMB number
 29242                                  ; ERROR:  None
 29243                                  ; USES:   Flags, AX
 29244                                  ; -----------------------------------------------------------------------------
 29245                                  
 29246                                  convUMB:
 29247                                  	cmp	word [cs:gnradix],16
 29248                                  	jne	short cu10	; If it didn't read in hex, it's not an address
 29249                                  	call	AddrToUmb	; Else, convert the address to a UMB number
 29250                                  	cmp	ax,0FFFFh
 29251                                  	jne	short cu10
 29252                                  	inc	ax		; If too high, ignore it (make it conventional)
 29253                                  cu10:	
 29254                                  	retn
 29255                                  
 29256                                  ; -----------------------------------------------------------------------------
 29257                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 29258                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 29259                                  ; of the usual HIGH_FIRST.  See the code.
 29260                                  ; -----------------------------------------------------------------------------
 29261                                  ; ENTRY:  None
 29262                                  ; EXIT:   None
 29263                                  ; ERROR:  None
 29264                                  ; USES:   Flags, fm_umb, fm_strat
 29265                                  ; -----------------------------------------------------------------------------
 29266                                  
 29267                                  setUMBs:
 29268                                  	push	ax
 29269                                  	push	bx
 29270                                  	call	fm_link
 29271                                  	pop	bx
 29272                                  	pop	ax
 29273                                  	retn
 29274                                  
 29275                                  ; -----------------------------------------------------------------------------
 29276                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 29277                                  ; -----------------------------------------------------------------------------
 29278                                  ; ENTRY:  None
 29279                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 29280                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 29281                                  ; ERROR:  None
 29282                                  ; USES:   Flags, fm_strat, fm_umb
 29283                                  ; -----------------------------------------------------------------------------
 29284                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 29285                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 29286                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 29287                                  ; such that the load UMB is too small, and shouldn't be used.
 29288                                  ; -----------------------------------------------------------------------------
 29289                                  
 29290                                  loadLow:
 29291                                  	;push	ds
 29292                                  	;push	cs		; Point DS into appropriate data segment
 29293                                  	;pop	ds	
 29294                                  
 29295                                  	;mov	al,[UmbLoad]
 29296                                  	mov	al,[cs:UmbLoad]
 29297                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 29298                                  	jne	short ll10
 29299                                  
 29300                                  	stc
 29301                                  ll15:
 29302                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 29303                                  	;stc
 29304                                  	;jmp	short llX
 29305                                  	retn
 29306                                  ll10:	
 29307                                  	or	al,al		; AL=the load UMB: Is it == 0?
 29308                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 29309                                  
 29310                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 29311                                  	retn
 29312                                  
 29313                                  	;mov	al,1
 29314                                  	;clc
 29315                                  ;llX:
 29316                                  	;pop	ds		; Return DS to where it was
 29317                                  	;retn
 29318                                  
 29319                                  ; -----------------------------------------------------------------------------
 29320                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 29321                                  ; -----------------------------------------------------------------------------
 29322                                  ; ENTRY:  None
 29323                                  ; EXIT:   None
 29324                                  ; ERROR:  None
 29325                                  ; USES:   Flags, fm_strat, fm_umb
 29326                                  ; -----------------------------------------------------------------------------
 29327                                  
 29328                                  HideUMBs:
 29329                                  	push	ax
 29330                                  	push	cx
 29331                                  	push	ds
 29332                                  	push	es
 29333                                  
 29334                                  	call	UmbTest		; See if we REALLY linked in anything...
 29335                                  	jc	short husX	; ...if not, there's nothing for us to do.
 29336                                  
 29337                                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 29338                                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 29339                                  
 29340                                  	;putdata fInHigh,1	; Remember that we're now running high
 29341                                  	mov	byte [cs:fInHigh],1
 29342                                  
 29343                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 29344                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 29345                                  
 29346                                  	cmp	al,UNSPECIFIED	; If they didn't,
 29347                                  	je	short husX	; then we shouldn't do this loop:
 29348                                  
 29349                                  	xor	cx,cx
 29350                                  
 29351                                  ; -----------------------------------------------
 29352                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 29353                                  ; -----------------------------------------------
 29354                                  
 29355                                  hus10:	inc	cx		; For each UMB:
 29356                                  	cmp	cx,MAXUMB ; 16
 29357                                  	jae	short hus20
 29358                                  
 29359                                  	mov	al,cl		; (stopping as soon as we're outside of the
 29360                                  	push	es
 29361                                  	call	findUMB		; valid range of UMBs)
 29362                                  	pop	es		; push/pop: trash what findumb finds.  :-)
 29363                                  	jc	short hus20
 29364                                  
 29365                                  	call	_hideUMB_	; hide what we need to hide.
 29366                                  
 29367                                  	jmp	short hus10
 29368                                  hus20:	
 29369                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 29370                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 29371                                  
 29372                                  	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 29373                                  	jnz	short husX	; If not, we're done.
 29374                                  
 29375                                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 29376                                  husX:	
 29377                                  	pop	es
 29378                                  	pop	ds
 29379                                  	pop	cx
 29380                                  	pop	ax
 29381                                  	retn
 29382                                  
 29383                                  ; -----------------------------------------------------------------------------
 29384                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 29385                                  ; -----------------------------------------------------------------------------
 29386                                  ; ENTRY:  None
 29387                                  ; EXIT:   AL == load UMB
 29388                                  ; ERROR:  None
 29389                                  ; USES:   Flags, AX
 29390                                  ; -----------------------------------------------------------------------------
 29391                                  
 29392                                  ;GetLoadUMB:
 29393                                  ;	;getdata al, UmbLoad
 29394                                  ;	push	ds
 29395                                  ;	push	cs
 29396                                  ;	pop	ds
 29397                                  ;	mov	al,[UmLoad]
 29398                                  ;	pop	ds
 29399                                  ;	retn
 29400                                  
 29401                                  ; -----------------------------------------------------------------------------
 29402                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 29403                                  ; -----------------------------------------------------------------------------
 29404                                  ; ENTRY:  None
 29405                                  ; EXIT:   AX == load UMB minimum size
 29406                                  ; ERROR:  None
 29407                                  ; USES:   Flags, AX
 29408                                  ; -----------------------------------------------------------------------------
 29409                                  
 29410                                  GetLoadSize:
 29411                                  	; 09/04/2019 - Retro DOS v4.0
 29412                                  	mov	al,[cs:UmbLoad]
 29413                                  	jmp	short GetSize
 29414                                  
 29415                                  	;push	bx
 29416                                  	;;push	si
 29417                                  	;push	ds
 29418                                  	;push	cs
 29419                                  	;pop	ds
 29420                                  
 29421                                  	;mov	al,[UmbLoad]
 29422                                  
 29423                                  	;xor	ah,ah			;    ax==UMB
 29424                                  	;mov	bx,UmbSize		;    bx==array
 29425                                  	;shl	al,1	                ;    ax==offset
 29426                                  	;;add	ax,bx			;    ax==element index
 29427                                  	;;mov	si,ax			; ds:si==element index
 29428                                  
 29429                                  	;;lodsw				;    ax==size
 29430                                  
 29431                                  	;add	bx,ax
 29432                                  	;mov	ax,[bx]
 29433                                  
 29434                                  	;pop	ds
 29435                                  	;;pop	si
 29436                                  	;pop	bx
 29437                                  	;retn
 29438                                  
 29439                                  ; -----------------------------------------------------------------------------
 29440                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 29441                                  ; -----------------------------------------------------------------------------
 29442                                  ; ENTRY:  AL == a UMB number
 29443                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 29444                                  ; ERROR:  None
 29445                                  ; USES:   Flags, AX
 29446                                  ; -----------------------------------------------------------------------------
 29447                                  
 29448                                  GetSize:
 29449                                  	; 09/04/2019 - Retro DOS v4.0
 29450                                  
 29451                                  	push	bx
 29452                                  	;push	si
 29453                                  	;push	ds
 29454                                  	;push	cs
 29455                                  	;pop	ds
 29456                                  
 29457                                  	xor	ah,ah			;    ax==UMB
 29458                                  	mov	bx,UmbSize		;    bx==array
 29459                                  	shl	al,1	                ;    ax==offset
 29460                                  	;add	ax,bx			;    ax==element index
 29461                                  	;mov	si,ax			; ds:si==element index
 29462                                  
 29463                                  	;lodsw				;    ax==size
 29464                                  
 29465                                  	add	bx,ax
 29466                                  	;mov	ax,[bx]
 29467                                  	mov	ax,[cs:bx]
 29468                                  
 29469                                  	;pop	ds
 29470                                  	;pop	si
 29471                                  	pop	bx
 29472                                  	retn
 29473                                  
 29474                                  ; -----------------------------------------------------------------------------
 29475                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 29476                                  ; -----------------------------------------------------------------------------
 29477                                  ; ENTRY:   AL == new load UMB
 29478                                  ; EXIT:    None
 29479                                  ; ERROR:   None
 29480                                  ; USES:    Flags, AX
 29481                                  ; -----------------------------------------------------------------------------
 29482                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 29483                                  ;          time you would ever need this, so that's okay.
 29484                                  ; -----------------------------------------------------------------------------
 29485                                  
 29486                                  ;StoLoadUMB:
 29487                                  ;	;putdata UmbLoad, al
 29488                                  ;	push	es
 29489                                  ;	push	cs
 29490                                  ;	pop	es
 29491                                  ;	mov	[es:UmbLoad],al
 29492                                  ;	pop	es
 29493                                  ;	retn
 29494                                  
 29495                                  ; -----------------------------------------------------------------------------
 29496                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 29497                                  ; -----------------------------------------------------------------------------
 29498                                  ; ENTRY:  AL == new load size
 29499                                  ; EXIT:   None
 29500                                  ; ERROR:  None
 29501                                  ; USES:   Flags, AX
 29502                                  ; -----------------------------------------------------------------------------
 29503                                  
 29504                                  StoLoadSize:
 29505                                  	push	dx
 29506                                  
 29507                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 29508                                  	;
 29509                                  	;push	ds
 29510                                  	;push	cs
 29511                                  	;pop	ds
 29512                                  	;mov	dl,[UmbLoad]
 29513                                  	;pop	ds	
 29514                                  
 29515                                  	mov	dl,[cs:UmbLoad]
 29516                                  
 29517                                  	cmp	dl,UNSPECIFIED ; 0FFh
 29518                                  	je	short sls10
 29519                                  
 29520                                  	call	stowSiz			; We've got a function to do just this
 29521                                  sls10:	
 29522                                  	pop	dx
 29523                                  	retn
 29524                                  
 29525                                  ; -----------------------------------------------------------------------------
 29526                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 29527                                  ; -----------------------------------------------------------------------------
 29528                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 29529                                  ; EXIT:     None; free elements in UMB marked as hidden
 29530                                  ; ERROR:    None
 29531                                  ; USES:     Flags
 29532                                  ; -----------------------------------------------------------------------------
 29533                                  
 29534                                  hideUMB:
 29535                                  	push	ax
 29536                                  	push	es
 29537                                  
 29538                                  	call	findUMB		; Returns with carry if err, else ES == MCB
 29539                                  	jc	short huX
 29540                                  
 29541                                  ; ------------------------------------------------
 29542                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 29543                                  ;            we're not in the same UMB, so exit.
 29544                                  ; ------------------------------------------------
 29545                                  
 29546                                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 29547                                  	jz	short huX	; If it is, we've finished the UMB.
 29548                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 29549                                  	or	word [es:ARENA.OWNER],0
 29550                                  	jnz	short hu20
 29551                                  
 29552                                  	call	hideMCB
 29553                                  hu20:	
 29554                                  	mov	al,[es:ARENA.SIGNATURE]
 29555                                  	cmp	al,arena_signature_end  ;'Z'
 29556                                  	jz	short huX	; 'Z' means this was the last MCB... that's it.
 29557                                  
 29558                                  	;NextMCB es, ax		; Go on forward.
 29559                                  	mov     ax,es
 29560                                  	;add	ax,[es:3]
 29561                                  	add     ax,[es:ARENA.SIZE]
 29562                                  	inc     ax
 29563                                  	mov     es,ax
 29564                                  
 29565                                  	jmp	short hu10
 29566                                  huX:	
 29567                                  	pop	es
 29568                                  	pop	ax
 29569                                  	retn
 29570                                  
 29571                                  ; -----------------------------------------------------------------------------
 29572                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 29573                                  ; -----------------------------------------------------------------------------
 29574                                  ; ENTRY:    None
 29575                                  ; EXIT:     ZF set if user DIDN'T specify /S
 29576                                  ; ERROR:    None
 29577                                  ; USES:     Flags
 29578                                  ; -----------------------------------------------------------------------------
 29579                                  
 29580                                  isTiny:
 29581                                  	push	ax
 29582                                  
 29583                                  	;getdata al, fUmbTiny
 29584                                  	;
 29585                                  	;push	ds
 29586                                  	;push	cs
 29587                                  	;pop	ds
 29588                                  	;mov	al,[fUmbTiny]
 29589                                  	;pop	ds
 29590                                  
 29591                                  	mov	al,[cs:fUmbTiny]		
 29592                                  
 29593                                  	or	al,al
 29594                                  	pop	ax
 29595                                  	retn
 29596                                  
 29597                                  ; -----------------------------------------------------------------------------
 29598                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 29599                                  ; -----------------------------------------------------------------------------
 29600                                  ; ENTRY:    ES:0 should point to an MCB
 29601                                  ; EXIT:     ZF set if MCB is free, else !ZF
 29602                                  ; ERROR:    None
 29603                                  ; USES:     Flags
 29604                                  ; -----------------------------------------------------------------------------
 29605                                  
 29606                                  ;isFreeMCB:
 29607                                  ;	or	word [es:ARENA.OWNER],0
 29608                                  ;	retn
 29609                                  
 29610                                  ; -----------------------------------------------------------------------------
 29611                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 29612                                  ; -----------------------------------------------------------------------------
 29613                                  ; ENTRY:    ES:0 should point to an MCB
 29614                                  ; EXIT:     None; MCB marked as HIDDEN
 29615                                  ; ERROR:    None
 29616                                  ; USES:     None
 29617                                  ; -----------------------------------------------------------------------------
 29618                                  
 29619                                  hideMCB:
 29620                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 29621                                  	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 29622                                  	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 29623                                  	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 29624                                  	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 29625                                  	retn
 29626                                  
 29627                                  ; -----------------------------------------------------------------------------
 29628                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 29629                                  ; -----------------------------------------------------------------------------
 29630                                  ; ENTRY:    ES:0 should point to an MCB
 29631                                  ; EXIT:     None; MCB marked as FREE
 29632                                  ; ERROR:    None
 29633                                  ; USES:     None
 29634                                  ; -----------------------------------------------------------------------------
 29635                                  
 29636                                  unHideMCB:
 29637                                  	push	ax
 29638                                  	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 29639                                  	mov	ax,'  ' ; 2020h
 29640                                  	mov	[es:ARENA.NAME+0],ax
 29641                                  	mov	[es:ARENA.NAME+2],ax
 29642                                  	mov	[es:ARENA.NAME+4],ax
 29643                                  	mov	[es:ARENA.NAME+6],ax
 29644                                  	pop	ax
 29645                                  	retn
 29646                                  
 29647                                  ; -----------------------------------------------------------------------------
 29648                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 29649                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 29650                                  ; -----------------------------------------------------------------------------
 29651                                  ; ENTRY:    AL should be to a valid UMB number
 29652                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 29653                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 29654                                  ; USES:     Flags, ES
 29655                                  ; -----------------------------------------------------------------------------
 29656                                  
 29657                                  findUMB:
 29658                                  	push	ax
 29659                                  	push	cx
 29660                                  	push	dx
 29661                                  
 29662                                  	xor	ah,ah		; Zap ah, so al==ax
 29663                                  
 29664                                  	mov	dx,ax		; Store the to-be-found UMB number in DX
 29665                                  
 29666                                  	call	UmbHead		; Returns first UMB segment in AX
 29667                                  	mov	es,ax
 29668                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 29669                                  
 29670                                  ; ---------------------------------------------
 29671                                  ; FU10--CX - This UMB number; 0 == conventional
 29672                                  ;       DX - The UMB number they're looking for
 29673                                  ;       ES - The current MCB address
 29674                                  ; ---------------------------------------------
 29675                                  
 29676                                  fu10:	
 29677                                  	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 29678                                  	je	short fuX	; searching for--so exit.
 29679                                  
 29680                                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 29681                                  	jnz	short fu20
 29682                                  
 29683                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 29684                                  fu20:	
 29685                                  	mov	al,[es:ARENA.SIGNATURE]
 29686                                  	cmp	al,arena_signature_end ; 'Z'
 29687                                  	je	short fuE	; 'Z' means this was the last MCB... that's it.
 29688                                  
 29689                                  	;NextMCB es, ax		; Go on forward.
 29690                                  	mov     ax,es
 29691                                  	;add	ax,[es:3]
 29692                                  	add     ax,[es:ARENA.SIZE]
 29693                                  	inc     ax
 29694                                  	mov     es,ax
 29695                                  
 29696                                  	jmp	short fu10
 29697                                  fuE:	
 29698                                  	stc
 29699                                  fuX:
 29700                                  	pop	dx
 29701                                  	pop	cx
 29702                                  	pop	ax		; The address is already in ES.
 29703                                  	retn
 29704                                  
 29705                                  ; -----------------------------------------------------------------------------
 29706                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 29707                                  ; -----------------------------------------------------------------------------
 29708                                  ; ENTRY:    AL should be to a valid UMB number
 29709                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 29710                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 29711                                  ; USES:     Flags, ES
 29712                                  ; -----------------------------------------------------------------------------
 29713                                  
 29714                                  BigFree:
 29715                                  	push	bx
 29716                                  	push	cx
 29717                                  
 29718                                  	call	findUMB			; Returns with CF if err, else ES==MCB
 29719                                  	jc	short bfX		; (would be "jc bfE"; it just does stc)
 29720                                  
 29721                                  	xor	bx,bx			; Segment address of largest free MCB
 29722                                  	xor	cx,cx			; Size of largest free MCB
 29723                                  
 29724                                  ; ---------------------------------------------
 29725                                  ; BF10--ES - Current MCB address
 29726                                  ;       BX - Address of largest free MCB so far
 29727                                  ;       CX - Size of largest free MCB so far
 29728                                  ; ---------------------------------------------
 29729                                  
 29730                                  bf10:	
 29731                                  	call	isSysMCB		; If we've left the MCB, we're done.
 29732                                  	jz	short bf30
 29733                                  
 29734                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 29735                                  	or	word [es:ARENA.OWNER],0
 29736                                  	jnz	short bf20
 29737                                  
 29738                                  	mov	ax,[es:ARENA.SIZE]
 29739                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 29740                                  	cmp	cx,ax
 29741                                  	jg	short bf20		; Unless we're bigger,
 29742                                  
 29743                                  	mov	bx,es			; Store this new element's address,
 29744                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 29745                                  	mov	cx,ax
 29746                                  
 29747                                  bf20:	mov	al,[es:ARENA.SIGNATURE]
 29748                                  	cmp	al,arena_signature_end	; 'Z'
 29749                                  	jz	short bf30		; 'Z' means this was the last MCB.
 29750                                  
 29751                                  	;NextMCB es,ax		; Go on forward.
 29752                                  	mov     ax,es
 29753                                  	;add	ax,[es:3]
 29754                                  	add     ax,[es:ARENA.SIZE]
 29755                                  	inc     ax
 29756                                  	mov     es,ax
 29757                                  
 29758                                  	jmp	short bf10
 29759                                  
 29760                                  bf30:	mov	es,bx			; Return the address
 29761                                  	mov	ax,cx			; Return the size
 29762                                  	or	bx,bx
 29763                                  	jnz	short bfX		; (if size==0, there's nothing free)
 29764                                  bfE:	
 29765                                  	stc
 29766                                  bfX:
 29767                                  	pop	cx
 29768                                  	pop	bx
 29769                                  	retn
 29770                                  
 29771                                  ; -----------------------------------------------------------------------------
 29772                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 29773                                  ; -----------------------------------------------------------------------------
 29774                                  ; ENTRY:    AL should be to a valid UMB number
 29775                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 29776                                  ; ERROR:    None
 29777                                  ; USES:     Flags
 29778                                  ; -----------------------------------------------------------------------------
 29779                                  
 29780                                  isSpecified:
 29781                                  	push	ax
 29782                                  
 29783                                  	xor	bh,bh
 29784                                  	mov	bl,al
 29785                                  
 29786                                  	;getdata al, DS:UmbUsed[bx]
 29787                                  	;
 29788                                  	;push	ds
 29789                                  	;push	cs
 29790                                  	;pop	ds
 29791                                  	;mov	al,[bx+UmbUsed]
 29792                                  	;pop	ds
 29793                                  	
 29794                                  	mov	al,[cs:bx+UmbUsed]
 29795                                  	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 29796                                  
 29797                                  	pop	ax
 29798                                  	retn
 29799                                  
 29800                                  ; -----------------------------------------------------------------------------
 29801                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 29802                                  ; -----------------------------------------------------------------------------
 29803                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 29804                                  ; EXIT:     None; MCB broken if carry clear
 29805                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 29806                                  ; USES:     Flags
 29807                                  ; -----------------------------------------------------------------------------
 29808                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 29809                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 29810                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 29811                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 29812                                  ; minimum for performing a split.
 29813                                  ; -----------------------------------------------------------------------------
 29814                                  
 29815                                  MIN_SPLIT_SIZE	equ	20h
 29816                                  
 29817                                  shrinkMCB:
 29818                                  	;pushreg <bx, cx, es>
 29819                                  	push	bx
 29820                                  	push	cx
 29821                                  	push	es
 29822                                  
 29823                                  	mov	bx,ax			; Move things around... and
 29824                                  	mov	ax,es			; save this one for later.
 29825                                  
 29826                                  	mov	cx,[es:ARENA.SIZE]
 29827                                  	sub	cx,MIN_SPLIT_SIZE ; 32
 29828                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 29829                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 29830                                  	; 18/12/2022
 29831                                  	cmp	cx,bx
 29832                                  	jb	short smE ; (*)
 29833                                  
 29834                                  	mov	dl,[es:ARENA.SIGNATURE]
 29835                                  	mov	cx,[es:ARENA.SIZE]
 29836                                  
 29837                                  	mov	[es:ARENA.SIZE],bx
 29838                                  	mov	byte [es:ARENA.SIGNATURE],'M'
 29839                                  
 29840                                  	add	ax,bx
 29841                                  	inc	ax
 29842                                  	mov	es,ax			; Move to new arena area
 29843                                  
 29844                                  	mov	ax,cx
 29845                                  	sub	ax,bx
 29846                                  	; 12/12/2022
 29847                                  	; ax > 0
 29848                                  	dec	ax			; And prepare the new size
 29849                                  
 29850                                  	; 18/12/2022
 29851                                  	mov	[es:ARENA.SIGNATURE],dl
 29852                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 29853                                  	mov	[es:ARENA.SIZE],ax
 29854                                  	;mov	ax,'  ' ; 2020h
 29855                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 29856                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 29857                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 29858                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 29859                                  
 29860                                  	; 18/12/2022
 29861                                  	call	freeMCB	; (**)
 29862                                  
 29863                                  	; 12/12/2022
 29864                                  	; cf=0
 29865                                  	;clc
 29866                                  	; 18/12/2022
 29867                                  	;jmp	short smX
 29868                                  smE:	
 29869                                  	; 18/12/2022
 29870                                  	; cf=1 (*)
 29871                                  	;stc
 29872                                  smX:	
 29873                                  	;popreg	<es, cx, bx>
 29874                                  	pop	es
 29875                                  	pop	cx
 29876                                  	pop	bx
 29877                                  	retn
 29878                                  
 29879                                  ; -----------------------------------------------------------------------------
 29880                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 29881                                  ; -----------------------------------------------------------------------------
 29882                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 29883                                  ; EXIT:     None; UMB is hidden as necessary
 29884                                  ; ERROR:    None
 29885                                  ; USES:     Flags, AX, CX
 29886                                  ; -----------------------------------------------------------------------------
 29887                                  ; PRIMARY LOGIC:
 29888                                  ;
 29889                                  ; If the UMB is specified in the DH/LH statement, then:
 29890                                  ;    If the largest free segment is too small (check specified size), then:
 29891                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 29892                                  ;    Else, if largest free segment is LARGER than specified size, then:
 29893                                  ;       If /S was given on the command-line, then:
 29894                                  ;          Break that element into two pieces
 29895                                  ;          Set a flag that we're shrinking
 29896                                  ;       Endif
 29897                                  ;    Endif
 29898                                  ; Endif
 29899                                  ; If the UMB is NOT specified (or was removed by the above):
 29900                                  ;    Hide all free elements in the UMB
 29901                                  ;    If the flag that we're shrinking was set, then:
 29902                                  ;       UN-hide the lower portion of the shrunken UMB
 29903                                  ;    ENDIF
 29904                                  ; ENDIF
 29905                                  ; -----------------------------------------------------------------------------
 29906                                  
 29907                                  _hideUMB_:
 29908                                  	push	bx
 29909                                  	push	dx
 29910                                  	push	es
 29911                                  
 29912                                  	mov	al,cl
 29913                                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 29914                                  	jz	short hu_20
 29915                                  
 29916                                  	mov	al,cl		; Retrieve the size of the largest
 29917                                  	call	BigFree		; free element in AX; put its address in ES
 29918                                  	jc	short hu_20	; Oops. Errors mean skip this part.
 29919                                  
 29920                                  	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 29921                                  	mov	al,cl		; Retrieve the user's specified
 29922                                  	call	GetSize		; minimum size for this umb (into AX)
 29923                                  	pop	bx		; Now BX==BigFree, AX==Specified Size
 29924                                  
 29925                                  	or	ax,ax		; If they didn't specify one,
 29926                                  	jz	short hu_20	; Skip over all this.
 29927                                  
 29928                                  	cmp	ax,bx		; Ah... if (specified > max free)
 29929                                  	jbe	short hu_10
 29930                                  
 29931                                  	mov	al,cl		;   Then mark that UMB as unused. Nya nya.
 29932                                  	call	unMarkUMB
 29933                                  	jmp	short hu_20
 29934                                  hu_10:	
 29935                                  	call	isTiny		; Returns ZF clear if user specified /S
 29936                                  	jz	short hu_20
 29937                                  
 29938                                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 29939                                  	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 29940                                  
 29941                                  	mov	dx,es
 29942                                  	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 29943                                  
 29944                                  hu_20:	mov	ax,cx
 29945                                  	call	isSpecified	; If they specified this UMB, we're done...
 29946                                  	jnz	short hu_X	; so leave.
 29947                                  
 29948                                  	xor	dx,dx
 29949                                  hu_30:	
 29950                                  	mov	al,cl
 29951                                  
 29952                                  	call	hideUMB		; Hides everything in UMB #al
 29953                                  
 29954                                  	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 29955                                  	jz	short hu_X	; So we should leave.
 29956                                  
 29957                                  	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 29958                                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 29959                                  hu_X:	
 29960                                  	pop	es
 29961                                  	pop	dx
 29962                                  	pop	bx
 29963                                  	retn
 29964                                  
 29965                                  ; -----------------------------------------------------------------------------
 29966                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 29967                                  ; -----------------------------------------------------------------------------
 29968                                  ; Entry:  None
 29969                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 29970                                  ; Error:  None
 29971                                  ; Uses:   Flags
 29972                                  ; -----------------------------------------------------------------------------
 29973                                  
 29974                                  UnFreeze:
 29975                                  	push	ax
 29976                                  	push	es
 29977                                  
 29978                                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 29979                                  	jc	short ufX
 29980                                  
 29981                                  	mov	es,ax
 29982                                  
 29983                                  ; ------------------------------
 29984                                  ; UF10--ES - Current MCB address
 29985                                  ; ------------------------------
 29986                                  
 29987                                  uf10:	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 29988                                  	jnz	short uf20
 29989                                  	call	unHideMCB
 29990                                  uf20:	
 29991                                  	mov	al,[es:ARENA.SIGNATURE]
 29992                                  
 29993                                  	cmp	al,arena_signature_end ; 'Z'
 29994                                  	jz	short ufX	; 'Z' means this was the last MCB... that's it.
 29995                                  
 29996                                  	;NextMCB es, ax		; Go on forward.
 29997                                  	mov     ax,es
 29998                                  	;add	ax,[es:3]
 29999                                  	add     ax,[es:ARENA.SIZE]
 30000                                  	inc     ax
 30001                                  	mov     es,ax
 30002                                  
 30003                                  	jmp	short uf10
 30004                                  ufX:	
 30005                                  	pop	es
 30006                                  	pop	ax
 30007                                  	retn
 30008                                  
 30009                                  ; -----------------------------------------------------------------------------
 30010                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 30011                                  ; -----------------------------------------------------------------------------
 30012                                  ; ENTRY:    ES:0 should point to an MCB
 30013                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 30014                                  ; ERROR:    None
 30015                                  ; USES:     Flags
 30016                                  ; -----------------------------------------------------------------------------
 30017                                  
 30018                                  isFrozMCB:
 30019                                  	;push	ax
 30020                                  
 30021                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30022                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30023                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 30024                                  	jne	short ifmX
 30025                                  
 30026                                  	;mov	ax,[es:ARENA.NAME+0]
 30027                                  	;cmp	ax,'FR' ; 5246h
 30028                                  	cmp	word [es:ARENA.NAME+0],'FR'
 30029                                  	jne	short ifmX
 30030                                  	;mov	ax,[es:ARENA.NAME+2]
 30031                                  	;cmp	ax,'OZ' ; 5A4Fh
 30032                                  	cmp	word [es:ARENA.NAME+2],'OZ'
 30033                                  	jne	short ifmX
 30034                                  	;mov	ax,[es:ARENA.NAME+4]
 30035                                  	;cmp	ax,'EN' ; 4E45h
 30036                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30037                                  	jne	short ifmX
 30038                                  	;mov	ax,[es:ARENA.NAME+6]
 30039                                  	;cmp	ax,'  ' ; 2020h
 30040                                  	cmp	word [es:ARENA.NAME+6],'  '
 30041                                  ifmX:	
 30042                                  	;pop	ax
 30043                                  	retn
 30044                                  
 30045                                  ; -----------------------------------------------------------------------------
 30046                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 30047                                  ; -----------------------------------------------------------------------------
 30048                                  ; ENTRY:    ES:0 should point to an MCB
 30049                                  ; EXIT:     None; MCB frozen
 30050                                  ; ERROR:    None
 30051                                  ; USES:     None
 30052                                  ; -----------------------------------------------------------------------------
 30053                                  
 30054                                  frezMCB:
 30055                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30056                                  	mov	word [es:ARENA.NAME+0],'FR'
 30057                                  	mov	word [es:ARENA.NAME+2],'OZ'
 30058                                  	mov	word [es:ARENA.NAME+4],'EN'
 30059                                  	mov	word [es:ARENA.NAME+6],'  '
 30060                                  	retn
 30061                                  
 30062                                  ; -----------------------------------------------------------------------------
 30063                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 30064                                  ; -----------------------------------------------------------------------------
 30065                                  ; Entry:  None
 30066                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 30067                                  ; Error:  None
 30068                                  ; Uses:   Flags
 30069                                  ; -----------------------------------------------------------------------------
 30070                                  
 30071                                  FreezeUM:
 30072                                  	push	ax
 30073                                  	push	cx
 30074                                  	push	dx
 30075                                  	push	es
 30076                                  
 30077                                  	;call	GetLoadUMB
 30078                                  	mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 30079                                  
 30080                                  	xor	ah,ah		; Zap ah, so al==ax
 30081                                  	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 30082                                  
 30083                                  	call	UmbHead		; Returns first UMB segment in AX
 30084                                  	mov	es,ax
 30085                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30086                                  
 30087                                  ; -----------------------------------------
 30088                                  ; FUM10--ES - Current MCB address
 30089                                  ;        CX - Current UMB number
 30090                                  ;        DX - UMB number to skip (load UMB)
 30091                                  ; -----------------------------------------
 30092                                  
 30093                                  fum10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30094                                  	jnz	short fum20
 30095                                  
 30096                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30097                                  fum20:	
 30098                                  	cmp	cx,dx		; If this is the load UMB, we don't want to
 30099                                  	je	short fum30	; freeze anything... so skip that section.
 30100                                  
 30101                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 30102                                  	or	word [es:ARENA.OWNER],0
 30103                                  	jnz	short fum30	; either.
 30104                                  
 30105                                  	call	frezMCB
 30106                                  fum30:	
 30107                                  	mov	al,[es:ARENA.SIGNATURE]
 30108                                  	cmp	al,arena_signature_end ; 'Z'
 30109                                  	je	short fumX	; 'Z' means this was the last MCB... that's it.
 30110                                  
 30111                                  	;NextMCB es, ax		; Go on forward.
 30112                                  	mov     ax,es
 30113                                  	;add	ax,[es:3]
 30114                                  	add     ax,[es:ARENA.SIZE]
 30115                                  	inc     ax
 30116                                  	mov     es,ax
 30117                                  	
 30118                                  	jmp	short fum10
 30119                                  
 30120                                  fumX:	pop	es
 30121                                  	pop	dx
 30122                                  	pop	cx
 30123                                  	pop	ax
 30124                                  	retn
 30125                                  
 30126                                  ; -----------------------------------------------------------------------------
 30127                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 30128                                  ; -----------------------------------------------------------------------------
 30129                                  ; ENTRY:    None
 30130                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 30131                                  ; ERROR:    None
 30132                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 30133                                  ; -----------------------------------------------------------------------------
 30134                                  
 30135                                  UmbTest:
 30136                                  	push	ax
 30137                                  	push	bx
 30138                                  	push	ds
 30139                                  	push	es
 30140                                  
 30141                                  	call	fm_link			; Link in UMBs (if not already linked)
 30142                                  	call	WalkMem			; Check to see if they're really linked
 30143                                  	pushf				; And remember what we found out
 30144                                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 30145                                  	popf				; And restore what we found out.
 30146                                  
 30147                                  	pop	es
 30148                                  	pop	ds
 30149                                  	pop	bx
 30150                                  	pop	ax
 30151                                  	retn
 30152                                  
 30153                                  ; -----------------------------------------------------------------------------
 30154                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 30155                                  ; -----------------------------------------------------------------------------
 30156                                  ; ENTRY:    None
 30157                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 30158                                  ; ERROR:    None
 30159                                  ; USES:     Flags
 30160                                  ; -----------------------------------------------------------------------------
 30161                                  
 30162                                  WalkMem:
 30163                                  	push	ax ; ?
 30164                                  	push	bx ; ?
 30165                                  	push	es ; ? no need to save contents of these registers ?
 30166                                  		   	
 30167                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30168                                  	int	21h
 30169                                  
 30170                                  	mov	ax,[es:bx-2]
 30171                                  	mov	es,ax
 30172                                  
 30173                                  ; ------------------------------
 30174                                  ; UM10: ES = Current MCB pointer
 30175                                  ; ------------------------------
 30176                                  
 30177                                  um10:	mov	al,[es:ARENA.SIGNATURE]
 30178                                  	cmp	al,arena_signature_end ;  'Z'
 30179                                  	je	short um20		; If signature == 'Z', hay no more.
 30180                                  
 30181                                  	;NextMCB es, bx			; Move to the next MCB
 30182                                  
 30183                                  	mov     bx,es
 30184                                  	;add	bx,[es:3]
 30185                                  	add     bx,[es:ARENA.SIZE]
 30186                                  	inc     bx
 30187                                  	mov     es,bx
 30188                                  		
 30189                                  	jmp	short um10		; And restart the loop.
 30190                                  um20:	
 30191                                  	mov	ax,es
 30192                                  
 30193                                  	cmp	ax,9FFFh		; This sets CF iff ax < 9FFF.
 30194                                  
 30195                                  	pop	es ; ?
 30196                                  	pop	bx ; ?
 30197                                  	pop	ax ; ?
 30198                                  	retn
 30199                                  
 30200                                  ; -----------------------------------------------------------------------------
 30201                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 30202                                  ; -----------------------------------------------------------------------------
 30203                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30204                                  ; EXIT:     None
 30205                                  ; ERROR:    None
 30206                                  ; USES:     AX, BX
 30207                                  ; -----------------------------------------------------------------------------
 30208                                  
 30209                                  hl_unlink:
 30210                                  	xor	bh,bh
 30211                                  
 30212                                  	;getdata bl,fm_umb		; Restore original link-state
 30213                                  	;
 30214                                  	;push	ds
 30215                                  	;push	cs
 30216                                  	;pop	ds
 30217                                  	;mov	bl,[fm_umb]
 30218                                  	;pop	ds
 30219                                  
 30220                                  	mov	bl,[cs:fm_umb]
 30221                                  
 30222                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30223                                  	int	21h
 30224                                  	retn
 30225                                  
 30226                                  ; ----------------------------------------------------------------------
 30227                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 30228                                  ; ----------------------------------------------------------------------
 30229                                  ; 09/04/2019 - Retro DOS v4.0
 30230                                  
 30231                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 30232                                  ;   Date:     May 14, 1992
 30233                                  
 30234                                  ;   Modification log:
 30235                                  ;
 30236                                  ;     DATE    WHO      DESCRIPTION
 30237                                  ;   --------  -------  --------------------------------------------------------
 30238                                  ;   05/14/92  t-richj  Original
 30239                                  ;   06/21/92  t-richj  Final revisions before check-in
 30240                                  
 30241                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 30242                                  
 30243                                  ; -----------------------------------------------------------------------------
 30244                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 30245                                  ; -----------------------------------------------------------------------------
 30246                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 30247                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 30248                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 30249                                  ; ERROR:  None
 30250                                  ; USES:   fInHigh (from highvar.inc), carry flag
 30251                                  ; -----------------------------------------------------------------------------
 30252                                  
 30253                                  UnHideUMBs:
 30254                                  	push	ax		; Save ax for what we're about to do
 30255                                  
 30256                                  ; -----------------------------------------------------------------------------
 30257                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 30258                                  ;    length of time. Those six constitute a check of whether or not we should
 30259                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 30260                                  ;    will destroy the current link-state and memory-allocation strategy after
 30261                                  ;    every command execution.
 30262                                  ; -----------------------------------------------------------------------------
 30263                                  
 30264                                  	;getdata al,fInHigh	; Get InHigh from data segment
 30265                                  	;
 30266                                  	;push	ds
 30267                                  	;push	cs
 30268                                  	;pop	ds
 30269                                  	;mov	al,[fInHigh]
 30270                                  	;pop	ds	
 30271                                  
 30272                                  	mov	al,[cs:fInHigh]
 30273                                  
 30274                                  	or	al,al
 30275                                  	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 30276                                  
 30277                                  	pop	ax		; then there's nothing to do here... so
 30278                                  	stc			; restore everything and return. Just like
 30279                                  	retn			; that.
 30280                                  uhu10:	
 30281                                  	call	linkumb		; Make sure UMBs are linked in.
 30282                                  	call	FreeUMBs
 30283                                  
 30284                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 30285                                  	;
 30286                                  	;push	es
 30287                                  	;push	cs
 30288                                  	;pop	es
 30289                                  	;mov	byte [es:fInHigh],0
 30290                                  	;pop	ds	
 30291                                  
 30292                                  	mov	byte [cs:fInHigh],0	
 30293                                  
 30294                                  	call	he_unlink	; Unlink UMBs
 30295                                  
 30296                                  	pop	ax
 30297                                  	; 12/12/2022
 30298                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 30299                                  	retn
 30300                                  
 30301                                  ; -----------------------------------------------------------------------------
 30302                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 30303                                  ; -----------------------------------------------------------------------------
 30304                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30305                                  ; EXIT:     None
 30306                                  ; ERROR:    None
 30307                                  ; USES:     AX, BX
 30308                                  ; -----------------------------------------------------------------------------
 30309                                  
 30310                                  he_unlink:
 30311                                  	xor	bh, bh
 30312                                  
 30313                                  	;getdata bl, fm_umb	; Restore original link-state
 30314                                  	mov	bl,[cs:fm_umb]	
 30315                                  
 30316                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30317                                  	int	21h
 30318                                  	retn
 30319                                  
 30320                                  ; -----------------------------------------------------------------------------
 30321                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 30322                                  ; -----------------------------------------------------------------------------
 30323                                  ; ENTRY:    None
 30324                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 30325                                  ; ERROR:    None (ignore CF)
 30326                                  ; USES:     Flags
 30327                                  ; -----------------------------------------------------------------------------
 30328                                  
 30329                                  FreeUMBs:
 30330                                  	push	ax
 30331                                  	push	es
 30332                                  
 30333                                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 30334                                  	jc	short fusX
 30335                                  
 30336                                  	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 30337                                  fus10:	
 30338                                  	call	isHideMCB	; Returns with ZF set if owner is 0
 30339                                  	jnz	short fus20
 30340                                  	call	freeMCB
 30341                                  fus20:	   
 30342                                  	mov	al,[es:ARENA.SIGNATURE]
 30343                                  	cmp	al,arena_signature_end ; 'Z'
 30344                                  	jz	short fusX	; That means this was the last MCB--that's it.
 30345                                  
 30346                                  	mov	ax,es
 30347                                  	add	ax,[es:ARENA.SIZE]
 30348                                  	inc	ax
 30349                                  	mov	es,ax		; Go on forward.
 30350                                  
 30351                                  	jmp	short fus10
 30352                                  fusX:	
 30353                                  	pop	es
 30354                                  	pop	ax
 30355                                  	retn
 30356                                  
 30357                                  ; -----------------------------------------------------------------------------
 30358                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 30359                                  ; -----------------------------------------------------------------------------
 30360                                  ; ENTRY:    ES:0 should point to an MCB
 30361                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 30362                                  ; ERROR:    None
 30363                                  ; USES:     Flags
 30364                                  ; -----------------------------------------------------------------------------
 30365                                  
 30366                                  isHideMCB:
 30367                                  	;push	ax
 30368                                  
 30369                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 30370                                  	jne	short ihm_x				; then check for HIDDEN
 30371                                  
 30372                                  	;mov	ax,[es:ARENA.NAME]
 30373                                  	;cmp	ax,'HI' ; 4948h
 30374                                  	cmp	word [es:ARENA.NAME+0],'HI'
 30375                                  	jne	short ihm_x
 30376                                  	;mov	ax,[es:ARENA.NAME+2]
 30377                                  	;cmp	ax,'DD' ; 4444h
 30378                                  	cmp	word [es:ARENA.NAME+2],'DD'
 30379                                  	jne	short ihm_x
 30380                                  	;mov	ax,[es:ARENA.NAME+4]
 30381                                  	;cmp	ax,'EN' ; 4E45h
 30382                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30383                                  	jne	short ihm_x
 30384                                  	;mov	ax,[es:ARENA.NAME+6]
 30385                                  	;cmp	ax,'  ' ; 2020h
 30386                                  	cmp	word [es:ARENA.NAME+6],'  '
 30387                                  ihm_x:	
 30388                                  	;pop	ax
 30389                                  	retn
 30390                                  
 30391                                  ; -----------------------------------------------------------------------------
 30392                                  ;*** freeMCB - marks as free the MCB at ES:0
 30393                                  ; -----------------------------------------------------------------------------
 30394                                  ; ENTRY:    ES:0 should point to an MCB
 30395                                  ; EXIT:     None; MCB free'd
 30396                                  ; ERROR:    None
 30397                                  ; USES:     AX
 30398                                  ; -----------------------------------------------------------------------------
 30399                                  
 30400                                  freeMCB:
 30401                                  	mov	word [es:ARENA.OWNER],0
 30402                                  	mov	ax,'  '
 30403                                  	mov	[es:ARENA.NAME+0],ax
 30404                                  	mov	[es:ARENA.NAME+2],ax
 30405                                  	mov	[es:ARENA.NAME+4],ax
 30406                                  	mov	[es:ARENA.NAME+6],ax
 30407                                  	retn
 30408                                  
 30409                                  ; -----------------------------------------------------------------------------
 30410                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 30411                                  ; -----------------------------------------------------------------------------
 30412                                  ; ENTRY:  Nothing
 30413                                  ; EXIT:   AX contains 0x9FFF for most systems
 30414                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 30415                                  ; USES:   Flags, AX
 30416                                  ; -----------------------------------------------------------------------------
 30417                                  
 30418                                  HeadUmb:
 30419                                  	; 13/05/2019
 30420                                  
 30421                                  	;push	si ; ?
 30422                                  	;push	ds ; ?
 30423                                  	;push	es
 30424                                  	;push	bx ; *
 30425                                  
 30426                                  	; 09/04/2019
 30427                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 30428                                  
 30429                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30430                                  	int	21h
 30431                                  			; DOS - 2+ internal - GET LIST OF LISTS
 30432                                  			; Return: ES:BX -> DOS list of lists
 30433                                  	;mov	ax,[es:8Ch]
 30434                                  	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 30435                                  	cmp	ax,0FFFFh
 30436                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 30437                                  
 30438                                  	;clc				; Else, it isn't.
 30439                                  	;jmp	short xhu_x
 30440                                  xhu_e:	
 30441                                  	;stc
 30442                                  	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 30443                                  xhu_x:	
 30444                                  	;pop	bx ; *
 30445                                  	;pop	es	
 30446                                  	;pop	ds ; ?
 30447                                  	;pop	si ; ?
 30448                                  	retn
 30449                                  
 30450                                  ; -----------------------------------------------------------------------------
 30451                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 30452                                  ; -----------------------------------------------------------------------------
 30453                                  ; ENTRY:    None
 30454                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 30455                                  ; ERROR:    None
 30456                                  ; USES:     AX, BX, fm_umb
 30457                                  ; -----------------------------------------------------------------------------
 30458                                  
 30459                                  linkumb:
 30460                                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 30461                                  	int	21h			; Current link-state is now in al
 30462                                  
 30463                                  	or	al,al			; BUGBUG: proper check?
 30464                                  	jnz	short lumbX		; Jumps if UMBs already linked in
 30465                                  
 30466                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30467                                  	mov	bx,1
 30468                                  	int	21h
 30469                                  lumbX:
 30470                                  	retn
 30471                                  
 30472                                  %endif
 30473                                  
 30474                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30475                                  ; (SYSINIT:2B5Fh)
 30476                                  
 30477                                  ; ----------------------------------------------------------------------
 30478                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 30479                                  ; ----------------------------------------------------------------------
 30480                                  ; 09/04/2019 - Retro DOS v4.0
 30481                                  
 30482                                  ;----------------------------------------------------------------------------
 30483                                  ;
 30484                                  ; procedure : InitDevLoad
 30485                                  ;
 30486                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 30487                                  ;			 = 1 indicates load in UMB:
 30488                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 30489                                  ;		                    = 1 indicates a DOS 5-style load
 30490                                  ;		DevSize  = Size of the device driver file in paras
 30491                                  ;
 30492                                  ;	Output : none
 30493                                  ;
 30494                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 30495                                  ;	Also sets up a header for the Device driver entry for mem utility
 30496                                  ;
 30497                                  ;----------------------------------------------------------------------------
 30498                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 30499                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 30500                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 30501                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 30502                                  ;----------------------------------------------------------------------------
 30503                                  
 30504                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30505                                  InitDevLoad:
 30506                                  	; 11/12/2022
 30507                                  	; ds = cs
 30508 00002818 803E[071F]00            	cmp	byte [DeviceHi],0
 30509                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 30510                                  	;je	short InitForLo		; no, init for lo mem
 30511 0000281D 741F                    	je	short initforlo_x ; 09/04/2019
 30512                                  
 30513                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30514                                  ;	cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 30515                                  ;	je	short InitForConv
 30516                                  ;
 30517                                  ;; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 30518                                  ;; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 30519                                  ;; any areas left in upper-memory, except for elements in the load UMB...
 30520                                  ;; we then malloc space as per Dos-5 style, and mark as free any spaces which
 30521                                  ;; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 30522                                  ;; and UnHideUMBs later on marks all 8+HIDDEN as free.
 30523                                  ;
 30524                                  ;	call	ShrinkUMB		; Stop using the old device arena
 30525                                  ;
 30526                                  ;	call	HideUMBs		; Mark up the UM area as we see fit
 30527                                  ;	call	FreezeUM		; Hide everything BUT the load area
 30528                                  ;	call	GetUMBForDev		; And grab that load area as needed
 30529                                  ;	pushf
 30530                                  ;	call	UnFreeze		; Then unhide everything frozen
 30531                                  ;	popf
 30532                                  ;
 30533                                  ;	jc	short InitForLo		; (if carry, it's loading low)
 30534                                  ;
 30535                                  ;	jmp	short InitForHi
 30536                                  
 30537                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30538                                  	; (SYSINIT:2B67h)
 30539                                  InitForConv:
 30540                                  	; 11/12/2022
 30541                                  	; ds = cs
 30542 0000281F E83700                  	call	SpaceInUMB		; Do we have space left in the
 30543                                  					;  current UMB ?
 30544 00002822 7308                    	jnc	short InitForHi		; yes, we have
 30545 00002824 E85004                  	call	ShrinkUMB		; shrink the current UMB in use
 30546 00002827 E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 30547 0000282A 720D                    	jc	short InitForLo		; we didn't succeed, so load
 30548                                  					;  in low memory
 30549                                  InitForHi:
 30550                                  	; 11/12/2022
 30551                                  	; ds = cs
 30552                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 30553                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 30554                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 30555 0000282C A1[FD1E]                	mov	ax,[DevUMBFree]
 30556 0000282F 8B16[F91E]              	mov	dx,[DevUMBAddr]
 30557 00002833 0316[FB1E]              	add	dx,[DevUMBSize]
 30558 00002837 EB0C                    	jmp	short idl1
 30559                                  
 30560                                  InitForLo:
 30561                                  	; 11/12/2022
 30562                                  	; ds = cs
 30563                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 30564 00002839 C606[071F]00            	mov	byte [DeviceHi],0
 30565                                  initforlo_x:
 30566                                  	; 11/12/2022
 30567                                  	; ds = cs
 30568                                  					;  into UMB indicate that
 30569                                  					;  we are loading low
 30570                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 30571                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 30572 0000283E A1[E003]                	mov	ax,[memhi]
 30573 00002841 8B16[A302]              	mov	dx,[ALLOCLIM]
 30574                                  idl1:
 30575 00002845 E86C00                  	call	DevSetMark		; setup a sub-arena for DD
 30576                                  	; 11/12/2022
 30577                                  	; ds = cs
 30578                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 30579                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 30580                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 30581                                  	;mov	[cs:DevEntry+2],ax
 30582 00002848 A3[EC1E]                	mov	[DevLoadAddr],ax
 30583 0000284B 8916[EE1E]              	mov	[DevLoadEnd],dx
 30584 0000284F C706[F01E]0000          	mov	word [DevEntry],0
 30585 00002855 A3[F21E]                	mov	[DevEntry+2],ax
 30586 00002858 C3                      	retn
 30587                                  
 30588                                  ;----------------------------------------------------------------------------
 30589                                  ;
 30590                                  ; procedure : SpaceInUMB?
 30591                                  ;
 30592                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 30593                                  ;	Output : Carry set if no space in UMB
 30594                                  ;		 Carry clear if Space is available for the device in
 30595                                  ;		   current UMB
 30596                                  ;
 30597                                  ;----------------------------------------------------------------------------
 30598                                  
 30599                                  SpaceInUMB:
 30600                                  	; 11/12/2022
 30601                                  	; ds = cs
 30602                                  	;mov	ax,[cs:DevUMBSize]
 30603                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 30604                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 30605 00002859 A1[FB1E]                	mov	ax,[DevUMBSize]
 30606 0000285C 0306[F91E]              	add	ax,[DevUMBAddr]		; End of UMB
 30607 00002860 2B06[FD1E]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 30608                                  	; 11/12/2022
 30609                                  	;or	ax,ax			; Nospace ?
 30610                                  	;jnz	short spcinumb1
 30611                                  	;stc
 30612                                  	;retn
 30613                                  	; 11/12/2022
 30614 00002864 83F801                  	cmp	ax,1
 30615 00002867 7205                    	jb	short spcinumb2	; cf=1
 30616                                  spcinumb1:
 30617 00002869 48                      	dec	ax			; space for sub-arena
 30618                                  	; 11/12/2022
 30619                                  	; ds = cs
 30620 0000286A 3B06[EA1E]              	cmp	ax,[DevSize]
 30621                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 30622                                  spcinumb2:
 30623 0000286E C3                      	retn
 30624                                  
 30625                                  ;----------------------------------------------------------------------------
 30626                                  ;
 30627                                  ; procedure : PrepareMark
 30628                                  ;
 30629                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 30630                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 30631                                  ;
 30632                                  ;----------------------------------------------------------------------------
 30633                                  
 30634                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30635                                  ;
 30636                                  ;PrepareMark:
 30637                                  ;	push	ds
 30638                                  ;	mov	ds,ax
 30639                                  ;	mov	word [ARENA.OWNER],8
 30640                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 30641                                  ;	pop	ds
 30642                                  ;
 30643                                  ;	inc	ax
 30644                                  ;	mov	[cs:DevUMBAddr],ax
 30645                                  ;	mov	[cs:DevUMBFree],ax
 30646                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 30647                                  ;	retn
 30648                                  
 30649                                  ;----------------------------------------------------------------------------
 30650                                  ;
 30651                                  ; procedure : GetUMBForDev
 30652                                  ;
 30653                                  ;	Input : DevSize
 30654                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 30655                                  ;		 the device.
 30656                                  ;		 If success carry clear
 30657                                  ;
 30658                                  ;	Allocates the biggest UMB for loading devices and updates
 30659                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 30660                                  ;	UMB.
 30661                                  ;
 30662                                  ;	This routine relies on the fact that all of the low memory
 30663                                  ;	is allocated, and any DOS alloc calls should return memory
 30664                                  ;	from the UMB pool.
 30665                                  ;
 30666                                  ;----------------------------------------------------------------------------
 30667                                  
 30668                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30669                                  	; (SYSINIT:2BC6h)
 30670                                  
 30671                                  GetUMBForDev:
 30672                                  	; 11/12/2022
 30673                                  	; ds = cs
 30674 0000286F BBFFFF                  	mov	bx,0FFFFh
 30675 00002872 B80048                  	mov	ax,4800h
 30676 00002875 CD21                    	int	21h
 30677                                  		; DOS - 2+ - ALLOCATE MEMORY
 30678                                  		; BX = number of 16-byte paragraphs desired
 30679                                  
 30680 00002877 09DB                    	or	bx,bx
 30681 00002879 742C                    	jz	short gufd_err
 30682                                  
 30683 0000287B 4B                      	dec	bx
 30684                                  	; 11/12/2022
 30685                                  	; ds = cs
 30686 0000287C 391E[EA1E]              	cmp	[DevSize],bx
 30687                                  	;cmp	[cs:DevSize],bx
 30688 00002880 7725                    	ja	short gufd_err
 30689 00002882 43                      	inc	bx
 30690                                  
 30691 00002883 B80048                  	mov	ax,4800h
 30692 00002886 CD21                    	int	21h
 30693 00002888 721D                    	jc	short gufd_err
 30694                                  
 30695                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30696                                  	;dec	ax
 30697                                  	;call	PrepareMark
 30698                                  	;
 30699                                  PrepareMark:
 30700 0000288A 1E                      	push	ds
 30701 0000288B 48                      	dec	ax
 30702 0000288C 8ED8                    	mov	ds,ax
 30703 0000288E C70601000800            	mov	word [ARENA.OWNER],8
 30704 00002894 C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 30705 0000289A 40                      	inc	ax
 30706 0000289B 1F                      	pop	ds
 30707                                  	; 11/12/2022
 30708                                  	; ds = cs
 30709                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 30710                                  	;mov	[cs:DevUMBAddr],ax
 30711                                  	;mov	[cs:DevUMBFree],ax
 30712 0000289C 891E[FB1E]              	mov	[DevUMBSize],bx		; update the UMB Variables
 30713 000028A0 A3[F91E]                	mov	[DevUMBAddr],ax
 30714 000028A3 A3[FD1E]                	mov	[DevUMBFree],ax
 30715                                  	;
 30716                                  	; 11/12/2022
 30717                                  	; cf=0
 30718                                  	;clc				; mark no error
 30719 000028A6 C3                      	retn
 30720                                  gufd_err:
 30721 000028A7 31C0                    	xor	ax,ax ; 0
 30722                                  	; 11/12/2022
 30723                                  	; ds = cs
 30724                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 30725                                  	;mov	[cs:DevUMBAddr],ax
 30726                                  	;mov	[cs:DevUMBFree],ax
 30727 000028A9 A3[FB1E]                	mov	[DevUMBSize],ax		; erase the previous values
 30728 000028AC A3[F91E]                	mov	[DevUMBAddr],ax
 30729 000028AF A3[FD1E]                	mov	[DevUMBFree],ax
 30730 000028B2 F9                      	stc
 30731 000028B3 C3                      	retn
 30732                                  
 30733                                  ;----------------------------------------------------------------------------
 30734                                  ;
 30735                                  ; procedure : DevSetMark
 30736                                  ;
 30737                                  ;	Input : AX - Free segment were device is going to be loaded
 30738                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 30739                                  ;
 30740                                  ;	Creates a sub-arena for the device driver
 30741                                  ;	puts 'D' marker in the sub-arena
 30742                                  ;	Put the owner of the sub-arena as (AX+1)
 30743                                  ;	Copies the file name into sub-arena name field
 30744                                  ;
 30745                                  ;	Size field of the sub-arena will be set only at succesful
 30746                                  ;	completion of Device load.
 30747                                  ;
 30748                                  ;----------------------------------------------------------------------------
 30749                                  
 30750                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30751                                  	; (SYSINIT:2C13h)
 30752                                  
 30753                                  DevSetMark:
 30754 000028B4 06                      	push	es
 30755 000028B5 57                      	push	di
 30756 000028B6 1E                      	push	ds
 30757 000028B7 56                      	push	si
 30758 000028B8 8EC0                    	mov	es,ax
 30759 000028BA 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 30760 000028C0 40                      	inc	ax
 30761 000028C1 26A30100                	mov	[es:devmark.seg],ax
 30762                                  
 30763                                  ;-------------- Copy file name
 30764                                  
 30765 000028C5 50                      	push	ax			; save load addr
 30766 000028C6 2EC536[F803]            	lds	si,[cs:bpb_addr]	; command line is still there
 30767                                  
 30768 000028CB 89F7                    	mov	di,si
 30769 000028CD FC                      	cld
 30770                                  dsm_again:
 30771 000028CE AC                      	lodsb
 30772 000028CF 3C3A                    	cmp	al,':'
 30773 000028D1 7504                    	jne	short isit_slash
 30774 000028D3 89F7                    	mov	di,si
 30775 000028D5 EBF7                    	jmp	short dsm_again
 30776                                  isit_slash:
 30777 000028D7 3C5C                    	cmp	al, '\'
 30778 000028D9 7504                    	jne	short isit_null
 30779 000028DB 89F7                    	mov	di,si
 30780 000028DD EBEF                    	jmp	short dsm_again
 30781                                  isit_null:
 30782 000028DF 08C0                    	or	al,al
 30783 000028E1 75EB                    	jnz	short dsm_again
 30784 000028E3 89FE                    	mov	si,di
 30785                                  
 30786 000028E5 BF0800                  	mov	di,devmark.filename ; 8
 30787 000028E8 B90800                  	mov	cx,8			; maximum 8 characters
 30788                                  dsm_next_char:
 30789 000028EB AC                      	lodsb
 30790 000028EC 08C0                    	or	al, al
 30791 000028EE 7407                    	jz	short blankout
 30792 000028F0 3C2E                    	cmp	al, '.'
 30793 000028F2 7403                    	je	short blankout
 30794 000028F4 AA                      	stosb
 30795 000028F5 E2F4                    	loop	dsm_next_char
 30796                                  blankout:
 30797 000028F7 E304                    	jcxz	dsm_exit
 30798 000028F9 B020                    	mov	al, ' '
 30799 000028FB F3AA                    	rep	stosb			; blank out the rest
 30800                                  dsm_exit:
 30801 000028FD 58                      	pop	ax			; restore load addr
 30802 000028FE 5E                      	pop	si
 30803 000028FF 1F                      	pop	ds
 30804 00002900 5F                      	pop	di
 30805 00002901 07                      	pop	es
 30806 00002902 C3                      	retn
 30807                                  
 30808                                  ;----------------------------------------------------------------------------
 30809                                  ;
 30810                                  ; procedure : SizeDevice
 30811                                  ;
 30812                                  ;	Input : ES:SI - points to device file to be sized
 30813                                  ;
 30814                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 30815                                  ;
 30816                                  ;	Calculates the size of the device file in paras and stores it
 30817                                  ;	in DevSize
 30818                                  ;
 30819                                  ;----------------------------------------------------------------------------
 30820                                  
 30821                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30822                                  SizeDevice:
 30823                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30824                                  	; 11/12/2022 ; *
 30825 00002903 1E                      	push	ds ; *
 30826 00002904 06                      	push	es
 30827 00002905 1F                      	pop	ds
 30828 00002906 89F2                    	mov	dx,si			; ds:dx -> file name
 30829 00002908 B8003D                  	mov	ax,3D00h		; open
 30830 0000290B CD21                    	int	21h
 30831 0000290D 7243                    	jc	short sd_err		; open failed
 30832                                  
 30833 0000290F 89C3                    	mov	bx,ax			; BX - file handle
 30834 00002911 B80242                  	mov	ax,4202h		; seek
 30835 00002914 31C9                    	xor	cx,cx
 30836 00002916 89CA                    	mov	dx,cx			; to end of file
 30837 00002918 CD21                    	int	21h
 30838 0000291A 722F                    	jc	short sd_close		; did seek fail (impossible)
 30839 0000291C 83C00F                  	add	ax,15			; para convert
 30840 0000291F 83D200                  	adc	dx,0
 30841 00002922 F7C2F0FF                	test	dx,0FFF0h		; size > 0ffff paras ?
 30842 00002926 7409                    	jz	short szdev1		; no
 30843 00002928 2EC706[EA1E]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 30844                                  					; assuming that we fail later
 30845 0000292F EB1A                    	jmp	short sd_close
 30846                                  szdev1:
 30847 00002931 B104                    	mov	cl,4			; convert it to paras
 30848 00002933 D3E8                    	shr	ax,cl
 30849 00002935 B10C                    	mov	cl,12
 30850 00002937 D3E2                    	shl	dx,cl
 30851 00002939 09D0                    	or	ax,dx
 30852                                  	;
 30853                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30854 0000293B 2E3B06[081F]            	cmp     ax,[cs:DevSizeOption]
 30855 00002940 7705                    	ja      short szdev2
 30856 00002942 2EA1[081F]              	mov     ax,[cs:DevSizeOption]
 30857                                  	; 12/12/2022
 30858 00002946 F8                      	clc
 30859                                  szdev2:
 30860 00002947 2EA3[EA1E]              	mov	[cs:DevSize],ax		; save file size
 30861                                  
 30862                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30863                                  	; 12/12/2022
 30864                                  	; cf=0
 30865                                  	;clc
 30866                                  sd_close:
 30867 0000294B 9C                      	pushf				; let close not spoil our
 30868                                  					;  carry flag
 30869 0000294C B8003E                  	mov	ax,3E00h		; close
 30870 0000294F CD21                    	int	21h			; we are not checking for err
 30871 00002951 9D                      	popf
 30872                                  sd_err:
 30873                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30874                                  	; 11/12/2022 ; *
 30875 00002952 1F                      	pop     ds ; *
 30876 00002953 C3                      	retn
 30877                                  
 30878                                  ;----------------------------------------------------------------------------
 30879                                  ;
 30880                                  ; procedure : ExecDev
 30881                                  ;
 30882                                  ;	Input : ds:dx -> device to be executed
 30883                                  ;		DevLoadAddr - contains where device has to be loaded
 30884                                  ;
 30885                                  ;	Output : Carry if error
 30886                                  ;		 Carry clear if no error
 30887                                  ;
 30888                                  ;	Loads a device driver using the 4b03h function call
 30889                                  ;
 30890                                  ;----------------------------------------------------------------------------
 30891                                  
 30892                                  	; 01/11/2022
 30893                                  ExecDev:
 30894 00002954 2E8B1E[EC1E]            	mov	bx,[cs:DevLoadAddr]
 30895 00002959 2E891E[031F]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 30896                                  					;  block for exec with
 30897                                  					;  Load address
 30898 0000295E 2E891E[051F]            	mov	[cs:DevExecReloc],bx
 30899 00002963 8CCB                    	mov	bx,cs
 30900 00002965 8EC3                    	mov	es,bx
 30901 00002967 BB[031F]                	mov	bx,DevExecAddr		;es:bx points to parameters
 30902 0000296A B003                    	mov	al,3	; (load program only)
 30903 0000296C B44B                    	mov	ah,EXEC ; 4Bh
 30904 0000296E CD21                    	int	21h			;load in the device driver
 30905                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 30906                                  		; DS:DX -> ASCIZ filename
 30907                                  		; ES:BX -> parameter block
 30908                                  		; AL = subfunction 
 30909 00002970 C3                      	retn
 30910                                  
 30911                                  ;----------------------------------------------------------------------------
 30912                                  ;
 30913                                  ; procedure : RetFromUM
 30914                                  ;
 30915                                  ;	Input : None
 30916                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 30917                                  ;		 ConvLoad clear if did.
 30918                                  ;
 30919                                  ;	Prepares memory for more devices after returning from loading one
 30920                                  ;	using the DOS 6 options (/L:... etc).
 30921                                  ;
 30922                                  ;----------------------------------------------------------------------------
 30923                                  
 30924                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30925                                  ;RetFromUM:
 30926                                  ;	pushf
 30927                                  ;	mov	byte [cs:ConvLoad],1
 30928                                  ;	call	UnHideUMBs
 30929                                  ;	jc	short rfUM1		; Skip this if didn't HideUMBs
 30930                                  ;	mov	byte [cs:ConvLoad],0
 30931                                  ;rfUM1:	
 30932                                  ;	popf
 30933                                  ;	retn
 30934                                  
 30935                                  ;----------------------------------------------------------------------------
 30936                                  ;
 30937                                  ; procedure : RemoveNull
 30938                                  ;
 30939                                  ;	Input : ES:SI points to a null terminated string
 30940                                  ;
 30941                                  ;	Output : none
 30942                                  ;
 30943                                  ;	Replaces the null at the end of a string with blank
 30944                                  ;
 30945                                  ;----------------------------------------------------------------------------
 30946                                  
 30947                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30948                                  	; (SYSINIT:2CCEh)
 30949                                  RemoveNull:
 30950                                  	; 11/12/2022
 30951                                  	; ds = cs
 30952                                  rn_next:
 30953 00002971 268A1C                  	mov	bl,[es:si]
 30954 00002974 08DB                    	or	bl,bl			; null ?
 30955 00002976 7403                    	jz	short rn_gotnull
 30956 00002978 46                      	inc	si			; advance the pointer
 30957 00002979 EBF6                    	jmp	short rn_next
 30958                                  rn_gotnull:
 30959                                  	; 11/12/2022
 30960 0000297B 8A1E[1C1F]              	mov	bl,[DevSavedDelim]
 30961                                  	;mov	bl,[cs:DevSavedDelim]
 30962 0000297F 26881C                  	mov	[es:si],bl		; replace null with blank
 30963                                  	; 02/11/2022
 30964                                  ; 11/12/2022
 30965                                  rba_ok:		; 10/04/2019
 30966 00002982 C3                      	retn
 30967                                  
 30968                                  ;----------------------------------------------------------------------------
 30969                                  ;
 30970                                  ; procedure : RoundBreakAddr
 30971                                  ;
 30972                                  ;	Input : DevBrkAddr
 30973                                  ;	Output : DevBrkAddr
 30974                                  ;
 30975                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 30976                                  ;
 30977                                  ;----------------------------------------------------------------------------
 30978                                  
 30979                                  RoundBreakAddr:
 30980 00002983 2EA1[F41E]              	mov	ax,[cs:DevBrkAddr]
 30981 00002987 E837E7                  	call	ParaRound
 30982 0000298A 2E0106[F61E]            	add	[cs:DevBrkAddr+2],ax
 30983 0000298F 2EC706[F41E]0000        	mov	word [cs:DevBrkAddr],0
 30984 00002996 2EA1[EE1E]              	mov	ax,[cs:DevLoadEnd]
 30985 0000299A 2E3906[F61E]            	cmp	[cs:DevBrkAddr+2],ax
 30986 0000299F 76E1                    	jbe	short rba_ok
 30987 000029A1 E96607                  	jmp	mem_err
 30988                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30989                                  	; 11/12/2022
 30990                                  ;rba_ok:
 30991                                  ;	retn
 30992                                  
 30993                                  ;----------------------------------------------------------------------------
 30994                                  ;
 30995                                  ; procedure : DevSetBreak
 30996                                  ;
 30997                                  ;	Input : DevBrkAddr
 30998                                  ;	Output : Carry set if Device returned Init failed
 30999                                  ;		 Else carry clear
 31000                                  ;
 31001                                  ;----------------------------------------------------------------------------
 31002                                  
 31003                                  DevSetBreak:
 31004 000029A4 50                      	push	ax
 31005                                  
 31006 000029A5 2EA1[F61E]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 31007 000029A9 2E803E[3314]00          	cmp	byte [cs:multdeviceflag],0
 31008 000029AF 750F                    	jne	short set_break_continue ;do not check it.
 31009 000029B1 2E3B06[EC1E]            	cmp	ax,[cs:DevLoadAddr]
 31010 000029B6 7508                    	jne	short set_break_continue ;if not same, then o.k.
 31011                                  
 31012                                  	;cmp	word [cs:DevBrkAddr],0
 31013                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 31014                                  	; 12/12/2022
 31015 000029B8 2E833E[F41E]01          	cmp	word [cs:DevBrkAddr],1
 31016 000029BE 7204                    	jb	short break_failed
 31017                                  
 31018                                  set_break_continue:
 31019 000029C0 E8C0FF                  	call	RoundBreakAddr
 31020                                  	; 12/12/2022
 31021 000029C3 F8                      	clc
 31022                                  break_failed:
 31023 000029C4 58                      	pop	ax
 31024                                  	;clc
 31025 000029C5 C3                      	retn
 31026                                  
 31027                                  	; 12/12/2022
 31028                                  ;break_failed:
 31029                                  	;pop	ax
 31030                                  	;stc
 31031                                  	;retn
 31032                                  
 31033                                  ;----------------------------------------------------------------------------
 31034                                  ;
 31035                                  ; procedure : DevBreak
 31036                                  ;
 31037                                  ;	Input : DevLoadAddr & DevBrkAddr
 31038                                  ;	Output : none
 31039                                  ;
 31040                                  ;	Marks a succesful install of a device driver
 31041                                  ;	Sets device size field in sub-arena &
 31042                                  ;	Updates Free ptr in UMB or adjusts memhi
 31043                                  ;
 31044                                  ;----------------------------------------------------------------------------
 31045                                  
 31046                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31047                                  DevBreak:
 31048                                  	;push	ds ; 11/12/2022
 31049                                  
 31050                                  	; 11/12/2022
 31051 000029C6 0E                      	push	cs
 31052 000029C7 1F                      	pop	ds
 31053                                  	;mov	ax,[cs:DevLoadAddr]
 31054                                  	;mov	bx,[cs:DevBrkAddr+2]
 31055 000029C8 A1[EC1E]                	mov	ax,[DevLoadAddr]
 31056 000029CB 8B1E[F61E]              	mov	bx,[DevBrkAddr+2]
 31057                                  	; 11/12/2022
 31058 000029CF 1E                      	push	ds
 31059                                  
 31060 000029D0 48                      	dec	ax			; seg of sub-arena
 31061 000029D1 8ED8                    	mov	ds,ax
 31062 000029D3 40                      	inc	ax			; Back to Device segment
 31063 000029D4 29D8                    	sub	ax,bx
 31064 000029D6 F7D8                    	neg	ax			; size of device in paras
 31065 000029D8 A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 31066                                  	
 31067                                  	; 11/12/2022
 31068 000029DB 1F                      	pop	ds
 31069                                  	; ds = cs
 31070                                   	
 31071 000029DC 803E[071F]00            	cmp	byte [DeviceHi],0
 31072                                  	;cmp	byte [cs:DeviceHi],0
 31073 000029E1 7405                    	je	short db_lo
 31074                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 31075                                  	;jmp	short db_exit
 31076                                  	; 11/12/2022
 31077 000029E3 891E[FD1E]              	mov	[DevUMBFree],bx
 31078 000029E7 C3                      	retn	
 31079                                  db_lo:
 31080                                  	; 11/12/2022
 31081                                  	; ds = cs
 31082                                  	;mov	[cs:memhi],bx
 31083                                  	;mov	word [cs:memlo],0
 31084 000029E8 891E[E003]              	mov	[memhi],bx
 31085 000029EC C706[DE03]0000          	mov	word [memlo],0 ; 18/12/2022
 31086                                  db_exit:
 31087                                  	;pop	ds ; 11/12/2022
 31088 000029F2 C3                      	retn
 31089                                  
 31090                                  ; 10/04/2019 - Retro DOS v4.0
 31091                                  
 31092                                  ;----------------------------------------------------------------------------
 31093                                  ;
 31094                                  ; procedure : ParseSize
 31095                                  ;
 31096                                  ;	Parses the command line for SIZE= command
 31097                                  ;
 31098                                  ;	ES:SI = command line to parsed
 31099                                  ;
 31100                                  ;	returns ptr to command line after SIZE= option in ES:SI
 31101                                  ;	updates the DevSizeOption variable with value supplied
 31102                                  ;	in SIZE=option
 31103                                  ;	Returns carry if the SIZE option was invalid
 31104                                  ;
 31105                                  ;----------------------------------------------------------------------------
 31106                                  
 31107                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31108                                  	; (SYSINIT:2D5Ah)
 31109                                  ParseSize:
 31110                                  	;push	bx
 31111                                  	;mov	bx,si
 31112                                  
 31113                                  	; 11/12/2022
 31114                                  	; ds = cs
 31115                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 31116                                  	;mov	[cs:DevCmdLine],si
 31117                                  	;mov	[cs:DevCmdLine+2],es
 31118 000029F3 C706[081F]0000          	mov	word [DevSizeOption],0 ; init the value
 31119 000029F9 8936[181F]              	mov	[DevCmdLine],si
 31120 000029FD 8C06[1A1F]              	mov	[DevCmdLine+2],es	
 31121 00002A01 E82900                  	call	SkipDelim
 31122 00002A04 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 31123 00002A09 751F                    	jne	short ps_no_size
 31124 00002A0B 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 31125 00002A11 7517                    	jne	short ps_no_size
 31126 00002A13 268A4404                	mov	al,[es:si+4]
 31127 00002A17 E86C06                  	call	delim
 31128 00002A1A 750E                    	jne	short ps_no_size
 31129 00002A1C 83C605                  	add	si,5
 31130 00002A1F E81600                  	call	GetHexNum
 31131 00002A22 7207                    	jc	short ps_err
 31132                                  	; 11/12/2022
 31133                                  	; ds = cs
 31134                                  	;mov	[cs:DevSizeOption],ax
 31135 00002A24 A3[081F]                	mov	[DevSizeOption],ax
 31136 00002A27 E80300                  	call	SkipDelim
 31137                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31138                                  	;mov	bx,si
 31139                                  ps_no_size:	
 31140                                  	;mov	si,bx
 31141                                  	;pop	bx
 31142 00002A2A F8                      	clc	; cf=0
 31143                                  	;retn
 31144                                  	; 11/12/2022
 31145                                  ps_err:		; cf=1
 31146                                  sd_ret:		; cf=?
 31147 00002A2B C3                      	retn
 31148                                  ;ps_err:
 31149                                  	; 02/11/2022
 31150                                  	;pop	bx
 31151                                  	;stc
 31152                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31153                                  	; 11/12/2022
 31154                                  	; cf=1
 31155                                  	;stc
 31156                                  	; 11/12/2022
 31157                                  ;sd_ret: 
 31158                                  	; 12/04/2019
 31159 00002A2C C3                      	retn
 31160                                  
 31161                                  ; 12/04/2019 - Retro DOS v4.0
 31162                                  
 31163                                  ;----------------------------------------------------------------------------
 31164                                  ;
 31165                                  ; procedure : SkipDelim
 31166                                  ;
 31167                                  ;	Skips delimiters in the string pointed to by ES:SI
 31168                                  ;	Returns ptr to first non-delimiter character in ES:SI
 31169                                  ;
 31170                                  ;----------------------------------------------------------------------------
 31171                                  	
 31172                                  	; 01/11/2022
 31173                                  SkipDelim:
 31174                                  sd_next_char:
 31175 00002A2D 268A04                  	mov	al,[es:si]
 31176 00002A30 E85306                  	call	delim
 31177 00002A33 75F6                    	jnz	short sd_ret
 31178 00002A35 46                      	inc	si
 31179 00002A36 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 31180                                  	; 11/12/2022
 31181                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31182                                  ;sd_ret:
 31183                                  	;retn
 31184                                  
 31185                                  ;----------------------------------------------------------------------------
 31186                                  ;
 31187                                  ; procedure : GetHexNum
 31188                                  ;
 31189                                  ;	Converts an ascii string terminated by a delimiter into binary.
 31190                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 31191                                  ;
 31192                                  ;	Returns in AX the number number of paras equivalent to the
 31193                                  ;	hex number of bytes specified by the hexadecimal string.
 31194                                  ;
 31195                                  ;	Returns carry in case it encountered a non-hex character or
 31196                                  ;	if it encountered crlf
 31197                                  ;
 31198                                  ;----------------------------------------------------------------------------
 31199                                  
 31200                                  ; 13/05/2019
 31201                                  
 31202                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31203                                  	; (SYSINIT:2DA5h)
 31204                                  GetHexNum:
 31205 00002A38 31C0                    	xor	ax,ax
 31206 00002A3A 31D2                    	xor	dx,dx
 31207                                  ghn_next:
 31208 00002A3C 268A1C                  	mov	bl,[es:si]
 31209 00002A3F 80FB0D                  	cmp	bl,cr  ; 0Dh
 31210 00002A42 7436                    	je	short ghn_err
 31211 00002A44 80FB0A                  	cmp	bl,lf  ; 0Ah
 31212 00002A47 7431                    	je	short ghn_err
 31213 00002A49 50                      	push	ax
 31214 00002A4A 88D8                    	mov	al,bl
 31215 00002A4C E83706                  	call	delim
 31216 00002A4F 58                      	pop	ax
 31217                                  	; 04/01/2023
 31218 00002A50 B90400                  	mov	cx, 4
 31219 00002A53 7410                    	jz	short ghn_into_paras
 31220 00002A55 E82400                  	call	GetNibble
 31221                                  	;jc	short ghn_err
 31222                                  	; 11/12/2022
 31223 00002A58 7221                    	jc	short ghn_ret ; cf=1
 31224                                  	; 04/01/2023
 31225                                  	;mov	cx,4
 31226                                  ghn_shift1:
 31227 00002A5A D1E0                    	shl	ax,1
 31228 00002A5C D1D2                    	rcl	dx,1
 31229 00002A5E E2FA                    	loop	ghn_shift1
 31230 00002A60 08D8                    	or	al,bl
 31231 00002A62 46                      	inc	si
 31232 00002A63 EBD7                    	jmp	short ghn_next
 31233                                  ghn_into_paras:
 31234 00002A65 83C00F                  	add	ax,15
 31235 00002A68 83D200                  	adc	dx,0
 31236 00002A6B F7C2F0FF                	test	dx,0FFF0h
 31237 00002A6F 7509                    	jnz	short ghn_err
 31238                                  	; 04/01/2023
 31239                                  	;mov	cx,4
 31240                                  ghn_shift2:
 31241 00002A71 F8                      	clc
 31242 00002A72 D1DA                    	rcr	dx,1
 31243 00002A74 D1D8                    	rcr	ax,1
 31244 00002A76 E2F9                    	loop	ghn_shift2
 31245 00002A78 F8                      	clc
 31246 00002A79 C3                      	retn
 31247                                  	; 11/12/2022
 31248                                  ghn_err:
 31249                                  gnib_err:
 31250 00002A7A F9                      	stc
 31251                                  ghn_ret:
 31252                                  gnib_ret:
 31253 00002A7B C3                      	retn
 31254                                  
 31255                                  ;----------------------------------------------------------------------------
 31256                                  ;
 31257                                  ; procedure : GetNibble
 31258                                  ;
 31259                                  ;	Convert one nibble (hex digit) in BL into binary
 31260                                  ;
 31261                                  ;	Retruns binary value in BL
 31262                                  ;
 31263                                  ;	Returns carry if BL contains non-hex digit
 31264                                  ;
 31265                                  ;----------------------------------------------------------------------------
 31266                                  
 31267                                  GetNibble:
 31268 00002A7C 80FB30                  	cmp	bl,'0'
 31269                                  	;jb	short gnib_err
 31270                                  	; 11/12/2022
 31271 00002A7F 72FA                    	jb	short gnib_ret ; cf=1
 31272 00002A81 80FB39                  	cmp	bl,'9'
 31273 00002A84 7704                    	ja	short is_it_hex
 31274 00002A86 80EB30                  	sub	bl,'0'		; clc
 31275 00002A89 C3                      	retn
 31276                                  is_it_hex:
 31277 00002A8A 80FB41                  	cmp	bl,'A'
 31278                                  	;jb	short gnib_err
 31279                                  	; 11/12/2022
 31280 00002A8D 72EC                    	jb	short gnib_ret ; cf=1
 31281 00002A8F 80FB46                  	cmp	bl,'F'
 31282 00002A92 77E6                    	ja	short gnib_err ; 11/12/2022
 31283 00002A94 80EB37                  	sub	bl,'A'- 10	; clc
 31284 00002A97 C3                      	retn
 31285                                  	; 11/12/2022
 31286                                  ;gnib_err:
 31287                                  ;	stc
 31288                                  ;gnib_ret:
 31289                                  ;	retn
 31290                                  
 31291                                  ;============================================================================
 31292                                  
 31293                                  ; 12/04/2019 - Retro DOS v4.0
 31294                                  
 31295                                  ; umb.inc (MSDOS 6.0, 1991)
 31296                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 31297                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 31298                                  
 31299                                  XMM_REQUEST_UMB	equ 10h
 31300                                  XMM_RELEASE_UMB	equ 11h
 31301                                  
 31302                                  ;----------------------------------------------------------------------------
 31303                                  ;
 31304                                  ; procedure : AllocUMB
 31305                                  ;
 31306                                  ;	Allocate all UMBs and link it to DOS arena chain
 31307                                  ;
 31308                                  ;----------------------------------------------------------------------------
 31309                                  
 31310                                  AllocUMB:
 31311                                  	; 31/12/2022
 31312                                  	; ds = cs
 31313 00002A98 E81000                  	call	InitAllocUMB		; link in the first UMB
 31314 00002A9B 720D                    	jc	short au_exit		; quit on error
 31315                                  au_next:
 31316 00002A9D E83900                  	call	umb_allocate		; allocate
 31317 00002AA0 7205                    	jc	short au_coalesce
 31318 00002AA2 E85200                  	call	umb_insert		; & insert till no UMBs
 31319 00002AA5 EBF6                    	jmp	short au_next
 31320                                  au_coalesce:
 31321 00002AA7 E80B01                  	call	umb_coalesce		; coalesce all UMBs
 31322                                  au_exit:
 31323                                  	; 31/12/2022
 31324                                  	; ds = cs
 31325 00002AAA C3                      	retn
 31326                                  
 31327                                  ;----------------------------------------------------------------------------
 31328                                  ;
 31329                                  ; procedure : InitAllocUMB
 31330                                  ;
 31331                                  ;----------------------------------------------------------------------------
 31332                                  
 31333                                  InitAllocUMB:
 31334                                  	; 31/12/2022
 31335                                  	; ds = cs
 31336 00002AAB E873DF                  	call	IsXMSLoaded
 31337 00002AAE 7527                    	jnz	short iau_err		; quit on no XMS driver
 31338 00002AB0 B452                    	mov	ah,52h
 31339 00002AB2 CD21                    	int	21h			; get DOS DATA seg
 31340                                  	; 31/12/2022
 31341                                  	; ds = cs
 31342                                  	;mov	[cs:DevDOSData],es	; & save it for later
 31343 00002AB4 8C06[161F]              	mov	[DevDOSData],es		; & save it for later
 31344 00002AB8 B81043                  	mov	ax,4310h
 31345 00002ABB CD2F                    	int	2Fh
 31346                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 31347                                  	;mov	[cs:DevXMSAddr+2],es
 31348 00002ABD 891E[FF1E]              	mov	[DevXMSAddr],bx		; get XMS driver address
 31349 00002AC1 8C06[011F]              	mov	[DevXMSAddr+2],es	
 31350                                  	; 31/12/2022
 31351 00002AC5 803E[151F]00            	cmp	byte [FirstUMBLinked],0 
 31352                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 31353                                  	;jne	short ia_1		; quit if we already did it
 31354                                  	; 12/12/2022
 31355 00002ACA 770A                    	ja	short ia_1 ; cf=0
 31356 00002ACC E83401                  	call	LinkFirstUMB		; else link the first UMB
 31357                                  	;jc	short iau_err
 31358                                  	; 12/12/2022
 31359 00002ACF 7207                    	jc	short iau_err2  ; cf=1
 31360                                  	; 31/12/2022
 31361                                  	; ds = cs
 31362 00002AD1 C606[151F]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31363                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31364                                  ia_1:
 31365                                  	; 12/12/2022
 31366                                  	; cf=0
 31367                                  	;clc
 31368 00002AD6 C3                      	retn
 31369                                  iau_err:
 31370 00002AD7 F9                      	stc
 31371                                  iau_err2:
 31372 00002AD8 C3                      	retn
 31373                                  
 31374                                  ;-------------------------------------------------------------------------
 31375                                  ;
 31376                                  ; Procedure Name	: umb_allocate
 31377                                  ;
 31378                                  ; Inputs		: DS = data
 31379                                  ;
 31380                                  ; Outputs		: if UMB available
 31381                                  ;				Allocates the largest available UMB and 
 31382                                  ;			  	BX = segment of allocated block
 31383                                  ;				DX = size of allocated block
 31384                                  ;				NC
 31385                                  ;			  else 
 31386                                  ;				CY
 31387                                  ;
 31388                                  ; Uses			: BX, DX
 31389                                  ;
 31390                                  ;-------------------------------------------------------------------------
 31391                                  
 31392                                  umb_allocate:
 31393                                  	; 31/12/2022
 31394                                  	; ds = cs
 31395 00002AD9 50                      	push	ax
 31396 00002ADA B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31397 00002ADC BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 31398                                  					;   possible
 31399                                  	; 31/12/2022
 31400 00002ADF FF1E[FF1E]              	call	far [DevXMSAddr]
 31401                                  	;call	far [cs:DevXMSAddr]
 31402                                  					; dx now contains the size of
 31403                                  					; the largest UMB
 31404 00002AE3 09D2                    	or	dx,dx
 31405 00002AE5 740D                    	jz	short ua_err
 31406                                  	
 31407 00002AE7 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31408                                  
 31409                                  	; 31/12/2022
 31410 00002AE9 FF1E[FF1E]              	call	far [DevXMSAddr]
 31411                                  	;call	far [cs:DevXMSAddr]
 31412                                  
 31413 00002AED 83F801                  	cmp	ax,1			; Q: was the reqst successful
 31414 00002AF0 7502                    	jne	short ua_err		; N: error
 31415                                  	;clc
 31416                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31417                                  	; 12/12/2022
 31418                                  	; cf=0
 31419                                  	;clc 
 31420                                  ua_done:
 31421 00002AF2 58                      	pop	ax
 31422 00002AF3 C3                      	retn
 31423                                  ua_err:
 31424 00002AF4 F9                      	stc
 31425 00002AF5 EBFB                    	jmp	short ua_done
 31426                                  
 31427                                  ;---------------------------------------------------------------------------
 31428                                  ;
 31429                                  ; Procedure Name	: umb_insert
 31430                                  ;
 31431                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 31432                                  ;			: BX = seg address of UMB to be linked in
 31433                                  ;			: DX = size of UMB to be linked in paras
 31434                                  ;			; DS = data
 31435                                  ;
 31436                                  ; Outputs		: links the UMB into the arena chain
 31437                                  ;
 31438                                  ; Uses			: AX, CX, ES, DX, BX
 31439                                  ;
 31440                                  ;---------------------------------------------------------------------------
 31441                                  
 31442                                  umb_insert:
 31443 00002AF7 1E                      	push	ds
 31444                                  
 31445                                  	; 31/12/2022
 31446                                  	; ds = cs
 31447                                  
 31448                                  	;mov	ds,[cs:DevDOSData]
 31449 00002AF8 8E1E[161F]              	mov	ds,[DevDOSData] ; 31/12/2022 
 31450                                  	;mov	ds,[8Ch]
 31451 00002AFC 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 31452 00002B00 8CD8                    	mov	ax,ds
 31453 00002B02 8EC0                    	mov	es,ax
 31454                                  ui_next:
 31455 00002B04 39D8                    	cmp	ax,bx			; Q: is current block above
 31456                                  					;    new block
 31457 00002B06 770F                    	ja	short ui_insert		; Y: insert it
 31458                                  					; Q: is current block the
 31459                                  					;    last
 31460 00002B08 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31461 00002B0E 745C                    	je	short ui_append		; Y: append new block to chain
 31462                                  					; N: get next block
 31463 00002B10 8ED8                    	mov	ds,ax			; M005
 31464                                  	;call	get_next		; ax = es = next block
 31465 00002B12 E8E200                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 31466 00002B15 EBED                    	jmp	short ui_next
 31467                                  
 31468                                  ui_insert:
 31469 00002B17 8CD9                    	mov	cx,ds			; ds = previous arena
 31470 00002B19 41                      	inc	cx			; top of previous block
 31471                                  
 31472 00002B1A 29D9                    	sub	cx,bx
 31473 00002B1C F7D9                    	neg	cx			; cx = size of used block
 31474                                  	;mov	byte [0],'M'
 31475 00002B1E C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31476                                  	;mov	word [1],8
 31477 00002B23 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 31478                                  	;mov	[3],cx
 31479 00002B29 890E0300                	mov	[ARENA.SIZE],cx	
 31480                                  	;mov	word [8],4353h ; 'SC'
 31481 00002B2D C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 31482                                  
 31483                                  ; prepare the arena at start of new block
 31484                                  
 31485 00002B33 8EC3                    	mov	es,bx
 31486 00002B35 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31487 00002B3B 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 31488                                  					; mark as free
 31489 00002B42 83EA02                  	sub	dx,2			; make room for arena at
 31490                                  					; start & end of new block
 31491 00002B45 2689160300              	mov	[es:ARENA.SIZE],dx
 31492                                  
 31493                                  ; prepare arena at end of new block
 31494                                  	
 31495 00002B4A 01D3                    	add	bx,dx
 31496 00002B4C 43                      	inc	bx
 31497 00002B4D 8EC3                    	mov	es,bx			; es=arena at top of new block
 31498 00002B4F 43                      	inc	bx			; bx=top of new block
 31499                                  
 31500                                  					; ax contains arena just above
 31501                                  					; this block
 31502 00002B50 29D8                    	sub	ax,bx			; ax = size of used block
 31503                                  	
 31504 00002B52 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31505 00002B58 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31506 00002B5F 26A30300                	mov	[es:ARENA.SIZE],ax	
 31507 00002B63 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 31508                                  
 31509 00002B6A EB47                    	jmp	short ui_done
 31510                                  
 31511                                  ui_append:
 31512                                  					; es = arena of last block	
 31513 00002B6C 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 31514 00002B71 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 31515                                  					; going to rsrv on top of this 
 31516                                  					; block for the next arena.
 31517                                  	; 13/05/2019
 31518 00002B77 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31519                                  
 31520 00002B7D 89C1                    	mov	cx,ax			; cx=top of prev block-1
 31521 00002B7F 40                      	inc	ax
 31522 00002B80 29D8                    	sub	ax,bx			; ax=top of prev block - 
 31523                                  					;    seg. address of new block
 31524 00002B82 F7D8                    	neg	ax
 31525                                  
 31526 00002B84 8EC1                    	mov	es,cx			; ds = arena of unused block
 31527                                  
 31528 00002B86 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31529 00002B8C 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31530 00002B93 26A30300                	mov	[es:ARENA.SIZE],ax	
 31531 00002B97 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 31532                                  
 31533                                  ; prepare the arena at start of new block
 31534 00002B9E 8EC3                    	mov	es,bx
 31535 00002BA0 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 31536 00002BA6 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 31537                                  					; mark as free
 31538 00002BAD 4A                      	dec	dx			; make room for arena
 31539 00002BAE 2689160300              	mov	[es:ARENA.SIZE],dx	
 31540                                  ui_done:
 31541                                  uc_done: ; 31/12/2022 ; *!
 31542 00002BB3 1F                      	pop	ds
 31543                                  	; ds = cs ; 31/12/2022
 31544                                  ;uc_done:	; 18/12/2022
 31545 00002BB4 C3                      	retn
 31546                                  
 31547                                  ; 13/04/2019 - Retro DOS v4.0
 31548                                  
 31549                                  ;----------------------------------------------------------------------------
 31550                                  ;
 31551                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 31552                                  ;
 31553                                  ;	Coalesce adds the block following the argument to the argument block,
 31554                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 31555                                  ;	some callers (such as $setblock) use it to join a free block to it's
 31556                                  ;	preceeding allocated block.
 31557                                  ;
 31558                                  ;	EXIT	'C' clear if OK
 31559                                  ;		  (ds) unchanged, this block updated
 31560                                  ;		  (ax) = address of next block, IFF not at end
 31561                                  ;		'C' set if arena trashed
 31562                                  ;	USES	cx, di, ds, es
 31563                                  ;
 31564                                  ;----------------------------------------------------------------------------
 31565                                  
 31566                                  umb_coalesce:
 31567                                  	; 31/12/2022
 31568                                  	; ds = cs
 31569 00002BB5 1E                      	push	ds ; *!
 31570                                  
 31571 00002BB6 31FF                    	xor	di, di
 31572                                  
 31573                                  	;mov	es,[cs:DevDOSData]
 31574                                  	; 31/12/2022
 31575 00002BB8 8E06[161F]              	mov	es,[DevDOSData]
 31576 00002BBC 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 31577                                  uc_nextfree:
 31578 00002BC1 8CC0                    	mov	ax,es
 31579 00002BC3 8ED8                    	mov	ds,ax
 31580                                  	;cmp	[es:1],di
 31581 00002BC5 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 31582 00002BCA 7407                    	je	short uc_again		; Y: try to coalesce with next block
 31583                                  					; N: get next arena
 31584 00002BCC E82100                  	call	get_next		; es, ax = next arena
 31585 00002BCF 72E2                    	jc	short uc_done	; *!
 31586 00002BD1 EBEE                    	jmp	short uc_nextfree
 31587                                  uc_again:
 31588 00002BD3 E81A00                  	call	get_next		; ES, AX <- next block
 31589 00002BD6 72DB                    	jc	short uc_done	; *!
 31590                                  uc_check:
 31591 00002BD8 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 31592 00002BDD 75E2                    	jne	short uc_nextfree	; N: get next free arena
 31593                                  					; Y: coalesce
 31594 00002BDF 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 31595 00002BE4 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 31596                                  	;add	[3],cx
 31597 00002BE5 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 31598 00002BE9 268A0D                  	mov     cl,[es:di]              ; move up signature
 31599 00002BEC 880D                    	mov     [di],cl
 31600 00002BEE EBE3                    	jmp     short uc_again		; try again
 31601                                  
 31602                                  	; 18/12/2022
 31603                                  ;uc_done:
 31604                                  	;retn
 31605                                  
 31606                                  ;----------------------------------------------------------------------------
 31607                                  ;
 31608                                  ;**	get_next - Find Next item in Arena
 31609                                  ;
 31610                                  ;	ENTRY	dS - pointer to block head
 31611                                  ;	EXIT	AX,ES - pointers to next head
 31612                                  ;		'C' set if arena damaged
 31613                                  ;
 31614                                  ;----------------------------------------------------------------------------
 31615                                  
 31616                                  	; 01/11/2022
 31617                                  get_next:
 31618 00002BF0 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 31619 00002BF5 740A                    	je	short gn_err
 31620                                  _get_next_:
 31621 00002BF7 8CD8                    	mov     ax,ds                   ; ax=current block
 31622 00002BF9 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 31623 00002BFD 40                      	inc     ax                      ; remember that header!
 31624 00002BFE 8EC0                    	mov	es,ax
 31625                                  	;clc
 31626                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31627                                  	; 11/12/2022
 31628                                  	; cf=0
 31629                                  	;clc
 31630 00002C00 C3                      	retn
 31631                                  gn_err:
 31632 00002C01 F9                      	stc
 31633                                  	; 11/12/2022	
 31634                                  lfu_err:	 ; cf=1
 31635 00002C02 C3                      	retn
 31636                                  
 31637                                  ;----------------------------------------------------------------------------
 31638                                  ;
 31639                                  ; procedure : LinkFirstUMB
 31640                                  ;
 31641                                  ;----------------------------------------------------------------------------
 31642                                  
 31643                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31644                                  	; (SYSINIT:2F81h)
 31645                                  LinkFirstUMB:
 31646                                  	; 31/12/2022
 31647                                  	; ds = cs
 31648 00002C03 E8D3FE                  	call	umb_allocate
 31649 00002C06 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 31650                                  
 31651                                  ; bx = segment of allocated UMB
 31652                                  ; dx = size of UMB
 31653                                  
 31654                                  	; 31/12/2022
 31655                                  	; ds = cs
 31656                                  
 31657 00002C08 CD12                    	int	12h			; ax = size of memory
 31658 00002C0A B106                    	mov	cl,6
 31659 00002C0C D3E0                    	shl	ax,cl			; ax = size in paragraphs
 31660                                  
 31661 00002C0E 89C1                    	mov	cx,ax			; cx = size in paras
 31662 00002C10 29D8                    	sub	ax,bx			; ax = - size of unused block
 31663                                  
 31664 00002C12 F7D8                    	neg	ax
 31665                                  
 31666 00002C14 83E901                  	sub	cx,1			; cx = first umb_arena
 31667 00002C17 8EC1                    	mov	es,cx			; es = first umb_arena
 31668                                  	
 31669 00002C19 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31670 00002C1F 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31671                                  					
 31672 00002C26 26A30300                	mov	[es:ARENA.SIZE],ax	
 31673 00002C2A 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 31674                                  
 31675                                  ; put in the arena for the first UMB
 31676                                  
 31677 00002C31 8EC3                    	mov	es,bx			; es has first free umb seg
 31678 00002C33 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31679 00002C39 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 31680                                  					; mark as free 
 31681 00002C40 4A                      	dec	dx			; make room for arena
 31682 00002C41 2689160300              	mov	[es:ARENA.SIZE],dx	
 31683                                  
 31684                                  	;mov	es,[cs:DevDOSData]
 31685                                  	; 31/12/2022
 31686 00002C46 8E06[161F]              	mov	es,[DevDOSData] ; ds = cs
 31687 00002C4A BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 31688 00002C4D 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 31689                                  					;  data segment with the arena
 31690                                  					;  just below Top of Mem
 31691                                  
 31692                                  ; we must now scan the arena chain and update the size of the last arena
 31693                                  
 31694 00002C50 BF2400                  	mov	di,DOS_ARENA ; 24h
 31695 00002C53 268E05                  	mov	es,[es:di]		; es = start arena
 31696 00002C56 31FF                    	xor	di,di
 31697                                  ;scan_next
 31698                                  ; 09/12/2022
 31699                                  scannext:
 31700 00002C58 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 31701 00002C5C 740C                    	je	short got_last
 31702                                  	
 31703 00002C5E 8CC0                    	mov	ax,es
 31704 00002C60 2603060300              	add	ax,[es:ARENA.SIZE]
 31705 00002C65 40                      	inc	ax
 31706 00002C66 8EC0                    	mov	es,ax
 31707                                  	;jmp	short scan_next
 31708                                  	; 09/12/2022
 31709 00002C68 EBEE                    	jmp	short scannext
 31710                                  got_last:
 31711 00002C6A 26832E030001            	sub	word [es:ARENA.SIZE],1
 31712 00002C70 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31713                                  	;clc
 31714                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31715                                  	; 11/12/2022
 31716                                  	; cf=0
 31717                                  	;clc
 31718 00002C76 C3                      	retn
 31719                                  
 31720                                  ; 11/12/2022
 31721                                  ;;lfu_err:
 31722                                  ;	;stc
 31723                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31724                                  ;	; 11/12/2022
 31725                                  ;	; cf=1
 31726                                  ;	;stc
 31727                                  ;	retn
 31728                                  
 31729                                  ;----------------------------------------------------------------------------
 31730                                  ;
 31731                                  ; procedure : ShrinkUMB
 31732                                  ;
 31733                                  ;	Shrinks the current UMB in use, so that the unused portions
 31734                                  ;	of the UMB is given back to the DOS free mem pool
 31735                                  ;
 31736                                  ;----------------------------------------------------------------------------
 31737                                  
 31738                                  ShrinkUMB:
 31739                                  	; 12/12/2022
 31740                                  	; ds = cs
 31741 00002C77 833E[F91E]00            	cmp	word [DevUMBAddr],0
 31742                                  	;cmp	word [cs:DevUMBAddr],0
 31743 00002C7C 7421                    	je	short su_exit
 31744 00002C7E 06                      	push	es
 31745 00002C7F 53                      	push	bx
 31746                                  	; 12/12/2022
 31747                                  	;mov	bx,[cs:DevUMBFree]
 31748                                  	;sub	bx,[cs:DevUMBAddr]
 31749                                  	;mov	es,[cs:DevUMBAddr]
 31750 00002C80 8B1E[FD1E]              	mov	bx,[DevUMBFree]
 31751 00002C84 2B1E[F91E]              	sub	bx,[DevUMBAddr]
 31752 00002C88 8E06[F91E]              	mov	es,[DevUMBAddr]
 31753                                  	
 31754 00002C8C B8004A                  	mov	ax,4A00h
 31755 00002C8F CD21                    	int	21h
 31756                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 31757                                  		; ES = segment address of block to change
 31758                                  		; BX = new size in paragraphs
 31759 00002C91 8CC0                    	mov	ax,es
 31760 00002C93 48                      	dec	ax
 31761 00002C94 8EC0                    	mov	es,ax
 31762 00002C96 26C70601000800          	mov	word [es:ARENA.OWNER],8
 31763 00002C9D 5B                      	pop	bx
 31764 00002C9E 07                      	pop	es
 31765                                  su_exit:
 31766 00002C9F C3                      	retn
 31767                                  
 31768                                  ;----------------------------------------------------------------------------
 31769                                  ;
 31770                                  ; procedure : UnlinkUMB
 31771                                  ;
 31772                                  ;	Unlinks the UMBs from the DOS arena chain
 31773                                  ;
 31774                                  ;----------------------------------------------------------------------------
 31775                                  
 31776                                  UnlinkUMB:
 31777                                  	; 12/12/2022
 31778                                  	; ds = cs
 31779 00002CA0 1E                      	push	ds
 31780 00002CA1 06                      	push	es
 31781                                  	; 12/12/2022
 31782 00002CA2 803E[151F]00            	cmp	byte [FirstUMBLinked],0
 31783                                  	;cmp	byte [cs:FirstUMBLinked],0
 31784 00002CA7 7420                    	je	short ulu_x		; nothing to unlink
 31785                                  	; 12/12/2022
 31786 00002CA9 8E06[161F]              	mov	es,[DevDOSData]
 31787                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 31788 00002CAD 268E1E2400              	mov	ds,[es:DOS_ARENA]
 31789 00002CB2 268B3E8C00              	mov	di,[es:UMB_ARENA]
 31790                                  ulu_next:
 31791 00002CB7 E836FF                  	call	get_next
 31792 00002CBA 720D                    	jc	short ulu_x
 31793 00002CBC 39C7                    	cmp	di,ax			; is the next one UMB ?
 31794 00002CBE 7404                    	je	short ulu_found
 31795 00002CC0 8ED8                    	mov	ds,ax
 31796 00002CC2 EBF3                    	jmp	short ulu_next
 31797                                  ulu_found:
 31798                                  	;mov	byte [0],'Z'
 31799 00002CC4 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31800                                  ulu_x:
 31801 00002CC9 07                      	pop	es
 31802 00002CCA 1F                      	pop	ds
 31803 00002CCB C3                      	retn
 31804                                  
 31805                                  ; ----------------------------------------------------------------------
 31806                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 31807                                  ; ----------------------------------------------------------------------
 31808                                  ; 14/04/2019 - Retro DOS v4.0
 31809                                  
 31810                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 31811                                  ;
 31812                                  ; Summary:
 31813                                  ;
 31814                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 31815                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 31816                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 31817                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 31818                                  ;   and/or config.inc for the full list.
 31819                                  ;
 31820                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 31821                                  ;   configuration support. blockname is either MENU, which contains one
 31822                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 31823                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 31824                                  ;   INCLUDE allows the current block to name another block for inclusion
 31825                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 31826                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 31827                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 31828                                  ;
 31829                                  ; Example:
 31830                                  ;
 31831                                  ;   [menu]
 31832                                  ;   menuitem=misc,Miscellaneous
 31833                                  ;   menuitem=network,Network Configuration
 31834                                  ;   menudefault=network,15
 31835                                  ;
 31836                                  ;   [network]
 31837                                  ;   include misc
 31838                                  ;   device=foo
 31839                                  ;
 31840                                  ;   [misc]
 31841                                  ;   device=bar
 31842                                  ;   include alternate
 31843                                  ;
 31844                                  ;   [alternate]
 31845                                  ;   device=tar
 31846                                  ;
 31847                                  ;
 31848                                  ;   When the menu is displayed
 31849                                  ;
 31850                                  ;    1. Miscellaneous
 31851                                  ;    2. Network Configuration
 31852                                  ;
 31853                                  ;   #2 is highlighted as the default option, and will be automatically
 31854                                  ;   selected after 15 seconds. It will invoke the following lines in the
 31855                                  ;   following order:
 31856                                  ;
 31857                                  ;       DEVICE=BAR
 31858                                  ;       DEVICE=TAR
 31859                                  ;       DEVICE=FOO
 31860                                  ;
 31861                                  
 31862                                  ;MULTI_CONFIG equ 1
 31863                                  
 31864                                  ; the following depend on the positions of the various letters in switchlist
 31865                                  
 31866                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 31867                                  
 31868                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 31869                                  flagdrive	equ 00001000b ; 8 
 31870                                  flagcyln	equ 00010000b ; 16
 31871                                  flagseclim	equ 00100000b ; 32
 31872                                  flagheads	equ 01000000b ; 64
 31873                                  flagff		equ 10000000b ; 128
 31874                                  
 31875                                  ;----------------------------------------------------------------------------
 31876                                  ; 19/04/2019 - Retro DOS v4.0
 31877                                  
 31878                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 31879                                  
 31880                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31881                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 31882                                  
 31883 00002CCC 00                      insert_blank:	db 	0
 31884                                  
 31885                                  ;----------------------------------------------------------------------------
 31886                                  ;
 31887                                  ; procedure : setparms
 31888                                  ;
 31889                                  ; the following set of routines is used to parse the drivparm = command in
 31890                                  ; the config.sys file to change the default drive parameters.
 31891                                  ;
 31892                                  ;----------------------------------------------------------------------------
 31893                                  
 31894                                  setparms:
 31895 00002CCD 1E                      	push	ds
 31896 00002CCE 50                      	push	ax
 31897 00002CCF 53                      	push	bx
 31898 00002CD0 51                      	push	cx
 31899 00002CD1 52                      	push	dx
 31900                                  
 31901 00002CD2 0E                      	push	cs
 31902 00002CD3 1F                      	pop	ds
 31903                                  
 31904 00002CD4 31DB                    	xor	bx,bx
 31905 00002CD6 8A1E[9736]              	mov	bl,[drive]
 31906                                  	; 18/12/2022
 31907 00002CDA 43                      	inc	bx
 31908                                  	;inc	bl			; get it correct for ioctl call
 31909                                  					; (1=a,2=b...)
 31910 00002CDB BA[6F35]                	mov	dx,deviceparameters
 31911 00002CDE B444                    	mov	ah,IOCTL ; 44h
 31912 00002CE0 B00D                    	mov	al,GENERIC_IOCTL ; 0Dh
 31913 00002CE2 B508                    	mov	ch,RAWIO ; 8
 31914 00002CE4 B140                    	mov	cl,SET_DEVICE_PARAMETERS ; 40h
 31915 00002CE6 CD21                    	int	21h
 31916                                  
 31917                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31918                                  ;
 31919                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 31920                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 31921                                  ;	; 21/10/2022
 31922                                  ;	mov	ax,DOSBIODATASEG ; 0070h	
 31923                                  ;	mov	ds,ax			; set Bios_Data segment
 31924                                  ;
 31925                                  ;	test	word [cs:switches],flagec35 ; 4
 31926                                  ;	jz	short not_ec35
 31927                                  
 31928                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31929                                  	;test	word [switches],flagec35 ; 4
 31930                                  	; 12/12/2022
 31931 00002CE8 F606[9836]04            	test	byte [switches],flagec35 ; 4
 31932 00002CED 7411                    	jz	short eot_ok
 31933                                  
 31934                                  	;mov	cl,[cs:drive]		; which drive was this for?
 31935                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31936 00002CEF 8A0E[9736]              	mov	cl,[drive]
 31937 00002CF3 B87000                  	mov	ax,DOSBIODATASEG ; 0070h	
 31938 00002CF6 8ED8                    	mov	ds,ax	
 31939                                  
 31940 00002CF8 B001                    	mov	al,1			; assume drive 0
 31941 00002CFA D2E0                    	shl	al,cl			; set proper bit depending on drive
 31942                                  	;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 31943 00002CFC 0806[3105]              	or	[ec35_flag],al		; set the bit in the permanent flags
 31944                                  
 31945                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31946                                  ;
 31947                                  ;not_ec35:
 31948                                  ;;	Now adjust the BIOS's EOT variable if our new drive has more
 31949                                  ;;	sectors per track than any old ones.
 31950                                  ;
 31951                                  ;	;mov	al,[cs:deviceparameters+20]
 31952                                  ;	mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 31953                                  ;	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 31954                                  ;	cmp	al,[EOT]
 31955                                  ;	jbe	short eot_ok
 31956                                  ;	mov	[EOT],al
 31957                                  
 31958                                  eot_ok:
 31959 00002D00 5A                      	pop	dx			; fix up all the registers
 31960 00002D01 59                      	pop	cx
 31961 00002D02 5B                      	pop	bx
 31962 00002D03 58                      	pop	ax
 31963 00002D04 1F                      	pop	ds ; 13/05/2019
 31964 00002D05 C3                      	retn
 31965                                  
 31966                                  ;----------------------------------------------------------------------------
 31967                                  ;
 31968                                  ; procedure : diddleback
 31969                                  ;
 31970                                  ; replace default values for further drivparm commands
 31971                                  ;
 31972                                  ;----------------------------------------------------------------------------
 31973                                  
 31974                                  diddleback:
 31975 00002D06 1E                      	push	ds
 31976 00002D07 0E                      	push	cs
 31977 00002D08 1F                      	pop	ds
 31978                                  	;mov	word [deviceparameters+4],80
 31979 00002D09 C706[7335]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 31980                                  	;mov	byte [deviceparameters+1],2
 31981 00002D0F C606[7035]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 31982                                  	;mov	word [deviceparameters+2],0
 31983 00002D14 C706[7135]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 31984 00002D1A C706[9836]0000          	mov	word [switches],0	    ; zero all switches
 31985 00002D20 1F                      	pop	ds
 31986 00002D21 C3                      	retn
 31987                                  
 31988                                  ; 04/01/2023
 31989                                  %if 0
 31990                                  
 31991                                  ; 15/04/2019 - Retro DOS v4.0
 31992                                  
 31993                                  ;----------------------------------------------------------------------------
 31994                                  ;
 31995                                  ; procedure : parseline
 31996                                  ;
 31997                                  ; entry point is parseline. al contains the first character in command line.
 31998                                  ;
 31999                                  ;----------------------------------------------------------------------------
 32000                                  
 32001                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32002                                  	; (SYSINIT:30ACh)
 32003                                  
 32004                                  parseline:
 32005                                  	push	ds
 32006                                  
 32007                                  	push	cs
 32008                                  	pop	ds
 32009                                  
 32010                                  nextswtch:
 32011                                  	cmp	al,cr			; carriage return?
 32012                                  	je	short done_line
 32013                                  	cmp	al,lf			; linefeed?
 32014                                  	je	short put_back		; put it back and done
 32015                                  
 32016                                  ; anything less or equal to a space is ignored.
 32017                                  
 32018                                  	cmp	al,' '                  ; space?
 32019                                  	jbe	short getnext		; skip over space
 32020                                  	cmp	al,'/'
 32021                                  	je	short getparm
 32022                                  	stc				; mark error invalid-character-in-input
 32023                                  	jmp	short exitpl
 32024                                  
 32025                                  getparm:
 32026                                  	call	check_switch
 32027                                  	mov	[switches],bx		; save switches read so far
 32028                                  	jc	short swterr
 32029                                  getnext:
 32030                                  	call	getchr
 32031                                  	jc	short done_line
 32032                                  	jmp	short nextswtch
 32033                                  swterr:
 32034                                  	jmp	short exitpl		; exit if error
 32035                                  
 32036                                  done_line:
 32037                                  	; 12/12/2022
 32038                                  	test	byte [switches],flagdrive ; 8
 32039                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32040                                  	jnz	short okay
 32041                                  	stc				; mark error no-drive-specified
 32042                                  	jmp	short exitpl
 32043                                  
 32044                                  okay:
 32045                                  	mov	ax,[switches]
 32046                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32047                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32048                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32049                                  	;clc			    ; everything is fine
 32050                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32051                                  	; 12/12/2022
 32052                                  	; cf=0
 32053                                  	;clc
 32054                                  	call	setdeviceparameters
 32055                                  exitpl:
 32056                                  	pop	ds
 32057                                  	retn
 32058                                  put_back:
 32059                                  	inc	word [count]		; one more char to scan
 32060                                  	dec	word [chrptr]		; back up over linefeed
 32061                                  	jmp	short done_line
 32062                                  
 32063                                  %endif
 32064                                  
 32065                                  ;----------------------------------------------------------------------------
 32066                                  ;
 32067                                  ; procedure : check_switch
 32068                                  ;
 32069                                  ; processes a switch in the input. it ensures that the switch is valid, and
 32070                                  ; gets the number, if any required, following the switch. the switch and the
 32071                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 32072                                  ; error.
 32073                                  ;
 32074                                  ;----------------------------------------------------------------------------
 32075                                  
 32076                                  check_switch:
 32077 00002D22 E816FA                  	call	getchr
 32078                                  	;jc	short err_check
 32079 00002D25 724E                    	jc	short err_chk
 32080 00002D27 24DF                            and     al,0DFh                 ; convert it to upper case
 32081 00002D29 3C41                    	cmp	al,'A'
 32082                                  	;jb	short err_check
 32083 00002D2B 7248                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 32084 00002D2D 3C5A                    	cmp	al,'Z'
 32085 00002D2F 7743                    	ja	short err_check
 32086                                  
 32087 00002D31 06                      	push	es
 32088                                  
 32089 00002D32 0E                      	push	cs
 32090 00002D33 07                      	pop	es
 32091                                  
 32092 00002D34 8A0E[2C37]              	mov	cl,[switchlist]		; get number of valid switches
 32093 00002D38 B500                    	mov	ch,0
 32094 00002D3A BF[2D37]                	mov	di,1+switchlist		; point to string of valid switches
 32095 00002D3D F2AE                    	repne	scasb
 32096                                  
 32097 00002D3F 07                      	pop	es
 32098 00002D40 7532                    	jnz	short err_check
 32099                                  
 32100 00002D42 B80100                  	mov	ax,1
 32101 00002D45 D3E0                    	shl	ax,cl			; set bit to indicate switch
 32102 00002D47 8B1E[9836]              	mov	bx,[switches]		; get switches so far
 32103 00002D4B 09C3                    	or	bx,ax			; save this with other switches
 32104 00002D4D 89C1                    	mov	cx,ax
 32105                                  	; 12/12/2022
 32106 00002D4F A8F8                    	test	al,switchnum ; 0F8h
 32107                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 32108 00002D51 741E                    	jz	short done_swtch
 32109                                  
 32110 00002D53 E8E5F9                  	call	getchr
 32111 00002D56 721A                    	jc	short err_swtch
 32112                                  
 32113 00002D58 3C3A                    	cmp	al,':'
 32114 00002D5A 7516                    	jne	short err_swtch
 32115                                  
 32116 00002D5C E8DCF9                  	call	getchr
 32117 00002D5F 53                      	push	bx			; preserve switches
 32118                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32119                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 32120                                  	; 12/12/2022
 32121                                  	; ds = cs
 32122 00002D60 C606[2A03]20            	mov	byte [sepchr],' '
 32123 00002D65 E8D803                  	call	getnum
 32124                                  	;mov	byte [cs:sepchr],0
 32125                                  	; 12/12/2022
 32126 00002D68 C606[2A03]00            	mov	byte [sepchr],0
 32127 00002D6D 5B                      	pop	bx			; restore switches
 32128                                  
 32129                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 32130                                  ; not check for carry set here. if there is an error, it will be detected
 32131                                  ; further on (hopefully).
 32132                                  
 32133 00002D6E E80500                  	call	process_num
 32134                                  
 32135                                  done_swtch:
 32136                                  	;clc
 32137                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32138                                  	; 12/12/2022
 32139                                  	; cf=0
 32140                                  	;clc
 32141 00002D71 C3                      	retn
 32142                                  
 32143                                  err_swtch:
 32144 00002D72 31CB                    	xor	bx,cx			; remove this switch from the records
 32145                                  err_check:
 32146 00002D74 F9                      	stc
 32147                                  err_chk:
 32148 00002D75 C3                      	retn
 32149                                  
 32150                                  ;----------------------------------------------------------------------------
 32151                                  ;
 32152                                  ; procedure : process_num
 32153                                  ;
 32154                                  ; this routine takes the switch just input, and the number following (if any),
 32155                                  ; and sets the value in the appropriate variable. if the number input is zero
 32156                                  ; then it does nothing - it assumes the default value that is present in the
 32157                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 32158                                  ;
 32159                                  ;----------------------------------------------------------------------------
 32160                                  
 32161                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32162                                  	; (SYSINIT:3156h)
 32163                                  process_num:
 32164 00002D76 850E[9836]              	test	[switches],cx		; if this switch has been done before,
 32165 00002D7A 752B                    	jnz	short done_ret		; ignore this one.
 32166                                  	; 12/12/2022
 32167 00002D7C F6C108                  	test	cl,flagdrive ; 8
 32168                                  	;test	cx,flagdrive ; 8
 32169 00002D7F 7404                    	jz	short try_f
 32170 00002D81 A2[9736]                	mov	byte [drive],al
 32171                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32172                                  	;jmp	short done_ret
 32173                                  	; 12/12/2022
 32174                                  	; cf=0
 32175 00002D84 C3                      	retn	; 13/05/2019
 32176                                  try_f:
 32177                                  	; 12/12/2022
 32178 00002D85 F6C180                  	test	cl,flagff ; 80h
 32179                                  	;test	cx,flagff ; 80h
 32180 00002D88 7404                    	jz	short try_t
 32181                                  
 32182                                  ; ensure that we do not get bogus form factors that are not supported
 32183                                  
 32184                                  	;mov	[deviceparameters+1],al
 32185 00002D8A A2[7035]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 32186                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32187                                  	;jmp	short done_ret
 32188                                  	; 12/12/2022
 32189                                  	; cf=0
 32190 00002D8D C3                      	retn	; 13/05/2019
 32191                                  try_t:
 32192 00002D8E 09C0                    	or	ax,ax
 32193 00002D90 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 32194                                  	; 12/12/2022
 32195 00002D92 F6C110                  	test	cl,flagcyln ; 10h
 32196                                  	;test	cx,flagcyln ; 10h
 32197 00002D95 7404                    	jz	short try_s
 32198                                  
 32199                                  	;mov	[deviceparameters+4],ax
 32200 00002D97 A3[7335]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 32201                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32202                                  	;jmp	short done_ret
 32203                                  	; 12/12/2022
 32204                                  	; cf=0
 32205 00002D9A C3                      	retn	; 13/05/2019
 32206                                  try_s:
 32207                                  	; 12/12/2022
 32208 00002D9B F6C120                  	test	cl,flagseclim ; 20h
 32209                                  	;test	cx,flagseclim ; 20h
 32210 00002D9E 7404                    	jz	short try_h
 32211 00002DA0 A3[9536]                	mov	[slim],ax
 32212                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32213                                  	;jmp	short done_ret
 32214                                  	; 12/12/2022
 32215                                  	; cf=0
 32216 00002DA3 C3                      	retn	; 13/05/2019
 32217                                  
 32218                                  ; must be for number of heads
 32219                                  
 32220                                  try_h:
 32221 00002DA4 A3[9336]                	mov	[hlim],ax
 32222                                  done_ret:
 32223                                  	;clc
 32224                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32225                                  	; 12/12/2022
 32226                                  	; cf=0 (test instruction resets cf)
 32227                                  	;clc
 32228 00002DA7 C3                      	retn
 32229                                  
 32230                                  ; 04/01/2023 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32231                                  %if 1
 32232                                  
 32233                                  ; 15/04/2019 - Retro DOS v4.0
 32234                                  
 32235                                  ;----------------------------------------------------------------------------
 32236                                  ;
 32237                                  ; procedure : parseline
 32238                                  ;
 32239                                  ; entry point is parseline. al contains the first character in command line.
 32240                                  ;
 32241                                  ;----------------------------------------------------------------------------
 32242                                  
 32243                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32244                                  	; (SYSINIT:30ACh)
 32245                                  parseline:
 32246                                  	; 04/01/2023
 32247                                  	; ds = cs ; *
 32248                                  
 32249                                  	;push	ds ; *
 32250                                  
 32251                                  	;push	cs ; *
 32252                                  	;pop	ds ; *
 32253                                  
 32254                                  nextswtch:
 32255 00002DA8 3C0D                    	cmp	al,cr			; carriage return?
 32256 00002DAA 741C                    	je	short done_line
 32257 00002DAC 3C0A                    	cmp	al,lf			; linefeed?
 32258 00002DAE 7421                    	je	short put_back		; put it back and done
 32259                                  
 32260                                  ; anything less or equal to a space is ignored.
 32261                                  
 32262 00002DB0 3C20                    	cmp	al,' '                  ; space?
 32263 00002DB2 760F                    	jbe	short getnext		; skip over space
 32264 00002DB4 3C2F                    	cmp	al,'/'
 32265 00002DB6 7402                    	je	short getparm
 32266 00002DB8 F9                      	stc				; mark error invalid-character-in-input
 32267                                  	;jmp	short exitpl
 32268                                  	; 04/01/2023
 32269                                  swterr:
 32270 00002DB9 C3                      	retn
 32271                                  
 32272                                  getparm:
 32273 00002DBA E865FF                  	call	check_switch
 32274 00002DBD 891E[9836]              	mov	[switches],bx		; save switches read so far
 32275 00002DC1 72F6                    	jc	short swterr
 32276                                  getnext:
 32277 00002DC3 E875F9                  	call	getchr
 32278                                  	;jc	short done_line
 32279                                  	;jmp	short nextswtch
 32280                                  	; 04/01/2023
 32281 00002DC6 73E0                    	jnc	short nextswtch
 32282                                  ;swterr:
 32283                                  	;jmp	short exitpl		; exit if error
 32284                                  
 32285                                  done_line:
 32286                                  	; 12/12/2022
 32287 00002DC8 F606[9836]08            	test	byte [switches],flagdrive ; 8
 32288                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32289 00002DCD 750C                    	jnz	short okay
 32290 00002DCF F9                      	stc				; mark error no-drive-specified
 32291                                  	;jmp	short exitpl
 32292                                  	; 04/01/2023
 32293 00002DD0 C3                      	retn
 32294                                  
 32295                                  ;exitpl:
 32296                                  	; 04/01/2023
 32297                                  	; ds = cs
 32298                                  	;;pop	ds ; *
 32299                                  	;retn
 32300                                  
 32301                                  put_back:
 32302 00002DD1 FF06[D203]              	inc	word [count]		; one more char to scan
 32303 00002DD5 FF0E[D603]              	dec	word [chrptr]		; back up over linefeed
 32304 00002DD9 EBED                    	jmp	short done_line
 32305                                  
 32306                                  okay:
 32307 00002DDB A1[9836]                	mov	ax,[switches]
 32308 00002DDE 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32309 00002DE1 A3[7135]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32310 00002DE4 C706[9535]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32311                                  	;clc			    ; everything is fine
 32312                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32313                                  	; 12/12/2022
 32314                                  	; cf=0
 32315                                  	;clc
 32316                                  	;call	setdeviceparameters
 32317                                  	; 04/01/2023
 32318                                  	;jmp	short setdeviceparameters
 32319                                  
 32320                                  %endif
 32321                                  
 32322                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 32323                                  
 32324                                  ;----------------------------------------------------------------------------
 32325                                  ;
 32326                                  ; procedure : setdeviceparameters
 32327                                  ;
 32328                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 32329                                  ; system based on the form factor. it is assumed that the bpbs for the
 32330                                  ; various form factors are present in the bpbtable. for hard files,
 32331                                  ; the recommended bpb is the same as the bpb on the drive.
 32332                                  ; no attempt is made to preserve registers since we are going to jump to
 32333                                  ; sysinit straight after this routine.
 32334                                  ;
 32335                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 32336                                  ;	  we always return no carry
 32337                                  ;
 32338                                  ;	note:  there is a routine by the same name in msdioctl.asm
 32339                                  ;
 32340                                  ;----------------------------------------------------------------------------
 32341                                  
 32342                                  ; 15/04/2019 - Retro DOS v4.0
 32343                                  
 32344                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32345                                  setdeviceparameters:
 32346                                  	; 04/01/2023
 32347                                  	; ds = cs
 32348                                  	
 32349 00002DEA 06                      	push	es
 32350                                  
 32351 00002DEB 0E                      	push	cs
 32352 00002DEC 07                      	pop	es
 32353                                  
 32354 00002DED 31DB                    	xor	bx,bx
 32355 00002DEF 8A1E[7035]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 32356 00002DF3 80FB00                  	cmp	bl,DEV_5INCH ; 0
 32357 00002DF6 7506                    	jne	short got_80
 32358                                  
 32359 00002DF8 C706[7335]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32360                                  							; 48 tpi=40 cyl
 32361                                  got_80:
 32362 00002DFE D1E3                    	shl	bx,1			; get index into bpb table
 32363 00002E00 8BB7[1837]              	mov	si,[bpbtable+bx]	; get address of bpb
 32364                                  
 32365                                  	;mov	di,deviceparameters+7	
 32366                                  	; 02/11/2022
 32367 00002E04 BF[7635]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 32368 00002E07 B91F00                  	mov	cx,A_BPB.size ; 31
 32369 00002E0A FC                      	cld
 32370                                  	;repe	movsb
 32371                                  	; 02/11/2022
 32372 00002E0B F3A4                    	rep	movsb
 32373                                  
 32374 00002E0D 07                      	pop	es
 32375                                  
 32376                                  	; 12/12/2022
 32377 00002E0E F606[9836]20            	test	byte [switches],flagseclim ; 20h
 32378                                  	;test	word [switches],flagseclim ; 20h
 32379 00002E13 7406                    	jz	short see_heads
 32380                                  
 32381 00002E15 A1[9536]                	mov	ax,[slim]
 32382                                  	;mov	[deviceparameters+20],ax
 32383 00002E18 A3[8335]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 32384                                  
 32385                                  see_heads:
 32386                                  	; 12/12/2022
 32387 00002E1B F606[9836]40            	test	byte [switches],flagheads ; 40h
 32388                                  	;test	word [switches],flagheads ; 40h
 32389 00002E20 7406                    	jz	short heads_not_altered
 32390                                  
 32391 00002E22 A1[9336]                	mov	ax,[hlim]
 32392                                  	;mov	[deviceparameters+22],ax	
 32393 00002E25 A3[8535]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 32394                                  
 32395                                  heads_not_altered:
 32396                                  
 32397                                  ; set up correct media descriptor byte and sectors/cluster
 32398                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 32399                                  
 32400                                  	;mov	byte [deviceparameters+9],2
 32401                                  	; 02/11/2022
 32402                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 32403                                  	; 04/01/2023
 32404 00002E28 B80200                  	mov	ax,2	
 32405 00002E2B A2[7835]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 32406                                  
 32407 00002E2E B3F0                    	mov	bl,0F0h			; get default mediabyte
 32408                                  
 32409                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 32410                                  
 32411                                  	;mov	bh,[deviceparameters+17]
 32412                                  	; 02/11/2022
 32413 00002E30 8A3E[8035]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 32414                                  
 32415                                  	; 04/01/2023
 32416                                  	; ax = 2
 32417 00002E34 3906[8535]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 32418                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 32419 00002E38 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 32420                                  
 32421 00002E3A 7524                    	jne	short only_one_head	; one head, do one head stuff
 32422                                  
 32423                                  ;	two head drives will use the mediadescriptor from the bpb
 32424                                  
 32425 00002E3C 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 32426                                  
 32427                                  ;	two sided drives have two special cases to look for. One is
 32428                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 32429                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 32430                                  ;	   one sector/cluster.
 32431                                  
 32432                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 32433                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 32434                                  ;	   type of 2 headed drive is all set.
 32435                                  
 32436 00002E3E 833E[8335]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 32437 00002E43 7509                    	jne	short not_144m
 32438 00002E45 833E[7335]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32439 00002E4A 7502                    	jne	short not_144m
 32440                                  
 32441                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 32442                                  
 32443 00002E4C EB24                    	jmp	short got_one_secperclus_drive
 32444                                  
 32445                                  ;	check for 320K
 32446                                  
 32447                                  not_144m:
 32448 00002E4E 833E[7335]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32449 00002E53 7521                    	jne	short got_correct_mediad
 32450 00002E55 833E[8335]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32451 00002E5A 751A                    	jne	short got_correct_mediad
 32452                                  
 32453 00002E5C B3FC                    	mov	bl,0FCh
 32454 00002E5E EB16                    	jmp	short got_correct_mediad
 32455                                  
 32456                                  only_one_head:
 32457                                  
 32458                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 32459                                  
 32460 00002E60 803E[7035]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 32461 00002E65 740B                    	je	short got_one_secperclus_drive
 32462                                  
 32463                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 32464                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 32465                                  ;	  besides 8 will be considered 0fch
 32466                                  
 32467 00002E67 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 32468 00002E69 833E[8335]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32469                                  	; 12/12/2022
 32470 00002E6E 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 32471                                  
 32472 00002E70 B3FE                    	mov	bl,0FEh			; 160K mediaid
 32473                                  
 32474                                  ;	we've either got a one sided drive, or a 1.44M drive
 32475                                  ;	  either case we'll use 1 sector per cluster instead of 2
 32476                                  
 32477                                  got_one_secperclus_drive:
 32478                                  	; 04/01/2023
 32479                                  	; ax = 2
 32480 00002E72 48                      	dec	ax  ; ax = 1
 32481 00002E73 A2[7835]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 32482                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 32483                                  
 32484                                  got_correct_mediad:
 32485 00002E76 881E[8035]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 32486                                  
 32487                                  ;	 Calculate the correct number of Total Sectors on medium
 32488                                  
 32489 00002E7A A1[7335]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 32490 00002E7D F726[8535]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 32491 00002E81 F726[8335]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32492 00002E85 A3[7E35]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 32493 00002E88 F8                      	clc				; we currently return no errors
 32494                                  
 32495 00002E89 C3                      	retn
 32496                                  
 32497                                  ;	M047 -- end rewritten routine
 32498                                  
 32499                                  ;----------------------------------------------------------------------------
 32500                                  ;
 32501                                  ; procedure : organize
 32502                                  ;
 32503                                  ;----------------------------------------------------------------------------
 32504                                  
 32505                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32506                                  	; (SYSINIT:3234h)
 32507                                  
 32508                                  organize:
 32509                                  	; 04/01/2023
 32510                                  	; ds = cs
 32511 00002E8A 8B0E[D203]              	mov	cx,[count]
 32512                                  	;mov	cx,[cs:count]
 32513 00002E8E E326                    	jcxz	nochar1
 32514                                  
 32515                                  ;ifndef	MULTI_CONFIG
 32516                                  ;
 32517                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 32518                                  ;;   because we the case of values in SET commands preserved
 32519                                  ;
 32520                                  ;	call	mapcase
 32521                                  ;endif
 32522                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32523 00002E90 E81B02                  	call	mapcase
 32524                                  
 32525 00002E93 31F6                    	xor	si,si
 32526 00002E95 89F7                    	mov	di,si
 32527 00002E97 31C0                    	xor	ax,ax
 32528                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32529                                  	;;mov	byte [cs:com_level],0
 32530                                  	; 12/12/2022
 32531                                  	;mov	[cs:com_level],al ; 0
 32532                                  	; 04/01/2023
 32533                                  	; ds = cs
 32534 00002E99 A2[CC03]                	mov	[com_level],al ; 0
 32535                                  org1:
 32536 00002E9C E8B101                  	call	skip_comment
 32537 00002E9F 740D                    	jz	short end_commd_line	; found a comment string and skipped.
 32538 00002EA1 E89601                  	call	get2			; not a comment string. then get a char.
 32539 00002EA4 3C0A                    	cmp	al,lf ; 0Ah
 32540 00002EA6 7406                    	je	short end_commd_line	; starts with a blank line.
 32541 00002EA8 3C20                    	cmp	al,' ' ; 20h
 32542 00002EAA 76F0                    	jbe	short org1		; skip leading control characters
 32543 00002EAC EB0A                    	jmp	short findit
 32544                                  
 32545                                  end_commd_line:
 32546 00002EAE AA                      	stosb				; store line feed char in buffer for the linecount.
 32547                                  	;mov	byte [cs:com_level],0	; reset the command level.
 32548                                  	; 04/01/2023
 32549                                  	; ds = cs
 32550 00002EAF C606[CC03]00            	mov	byte [com_level],0
 32551 00002EB4 EBE6                    	jmp	short org1
 32552                                  
 32553                                  nochar1:
 32554 00002EB6 F9                      	stc
 32555 00002EB7 C3                      	retn
 32556                                  
 32557                                  findit:
 32558 00002EB8 51                      	push	cx
 32559 00002EB9 56                      	push	si
 32560 00002EBA 57                      	push	di
 32561 00002EBB 89F5                    	mov	bp,si
 32562 00002EBD 4D                      	dec	bp
 32563 00002EBE BE[DE34]                        mov     si,comtab		; prepare to search command table
 32564 00002EC1 B500                    	mov	ch,0
 32565                                  findcom:
 32566 00002EC3 89EF                    	mov	di,bp
 32567 00002EC5 8A0C                    	mov	cl,[si]
 32568 00002EC7 46                      	inc	si
 32569 00002EC8 E324                    	jcxz	nocom
 32570                                  
 32571                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32572                                  
 32573                                  ;ifdef	MULTI_CONFIG
 32574                                  ;
 32575                                  ;;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 32576                                  ;;   time skip the upcoming delimiter test (since ";" need not be followed by
 32577                                  ;;   anything in particular)
 32578                                  ;
 32579                                  ;       cmp     byte [es:di],CONFIG_SEMICOLON  ; ';'
 32580                                  ;       je	short semicolon
 32581                                  ;loopcom:
 32582                                  ;       mov     al,[es:di]
 32583                                  ;       inc     di
 32584                                  ;       and     al,~20h ; 0DFh		; force upper case
 32585                                  ;       inc     si                      ; compare to byte @es:di
 32586                                  ;       cmp     al,[si-1]
 32587                                  ;       loope   loopcom
 32588                                  ;;else
 32589                                  ;;	repe	cmpsb
 32590                                  ;endif
 32591                                  	; 02/11/2022
 32592 00002ECA F3A6                    	repe	cmpsb
 32593                                  
 32594 00002ECC 9F                      	lahf
 32595 00002ECD 01CE                            add     si,cx                   ; bump to next position without affecting flags
 32596 00002ECF 9E                      	sahf
 32597 00002ED0 AC                              lodsb                           ; get indicator letter
 32598 00002ED1 75F0                    	jnz	short findcom
 32599 00002ED3 26803D0D                        cmp     byte [es:di],cr		; the next char might be cr,lf
 32600 00002ED7 7410                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 32601 00002ED9 26803D0A                	cmp	byte [es:di],lf
 32602 00002EDD 740A                    	je	short gotcom0
 32603                                  
 32604                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32605                                  ;
 32606                                  ;;ifdef	MULTI_CONFIG
 32607                                  ;
 32608                                  ;;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 32609                                  ;
 32610                                  ;       cmp     al,CONFIG_BEGIN  ; '['
 32611                                  ;       je	short gotcom0
 32612                                  ;;endif
 32613                                  ;	push	ax
 32614                                  ;       mov     al,[es:di]		; now the next char. should be a delim.
 32615                                  ;
 32616                                  ;;ifdef	MULTI_CONFIG
 32617                                  ;
 32618                                  ;;   If keyword is *immediately* followed by a question mark (?), then
 32619                                  ;;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 32620                                  ;;   stored in the CONFIG.SYS memory image.
 32621                                  ;
 32622                                  ;       cmp     al,'?'                  ; explicit interactive command?
 32623                                  ;       jne	short no_query		; no
 32624                                  ;       pop     ax                      ; yes, so retrieve the original code
 32625                                  ;       or      al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 32626                                  ;       jmp     short gotcom0           ;
 32627                                  ;semicolon:
 32628                                  ;       mov     al,CONFIG_REM
 32629                                  ;       jmp     short gotcom0
 32630                                  ;no_query:
 32631                                  ;;endif  ;MULTI_CONFIG
 32632                                  
 32633                                  	; 02/11/2022
 32634 00002EDF 50                      	push	ax
 32635 00002EE0 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 32636                                  
 32637 00002EE3 E8A001                  	call	delim
 32638                                  no_delim:
 32639 00002EE6 58                      	pop	ax
 32640 00002EE7 75DA                    	jnz	short findcom
 32641                                  gotcom0:
 32642 00002EE9 5F                      	pop	di
 32643 00002EEA 5E                      	pop	si
 32644 00002EEB 59                      	pop	cx
 32645 00002EEC EB0F                    	jmp	short gotcom
 32646                                  nocom:
 32647 00002EEE 5F                      	pop	di
 32648 00002EEF 5E                      	pop	si
 32649 00002EF0 59                      	pop	cx
 32650 00002EF1 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 32651 00002EF3 AA                      	stosb				; save indicator char.
 32652                                  _skipline:
 32653 00002EF4 E84301                  	call	get2
 32654 00002EF7 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 32655 00002EF9 75F9                            jne     short _skipline
 32656 00002EFB EBB1                    	jmp	short end_commd_line	; handle next command line
 32657                                  gotcom:
 32658 00002EFD AA                              stosb                           ; save indicator char in buffer
 32659                                  
 32660                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32661                                  ;;ifdef	MULTI_CONFIG
 32662                                  ;
 32663                                  ;;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 32664                                  ;;   it screws up the direct comparisons below.
 32665                                  ;
 32666                                  ;       and     al,~CONFIG_OPTION_QUERY ; 7Fh
 32667                                  ;;endif
 32668                                  ;	mov	[cs:cmd_indicator],al	; save it for the future use.
 32669                                  ;
 32670                                  ;;ifdef	MULTI_CONFIG
 32671                                  ;
 32672                                  ;;   There is no whitespace/delimiter between the "begin block" character
 32673                                  ;;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 32674                                  ;;   skipping code
 32675                                  ;
 32676                                  ;       cmp     al,CONFIG_BEGIN
 32677                                  ;       je	short org31
 32678                                  ;       cmp     al,CONFIG_SUBMENU ; 'O'
 32679                                  ;       je      short no_mapcase
 32680                                  ;       cmp     al,CONFIG_MENUITEM ; 'E'
 32681                                  ;       je      short no_mapcase
 32682                                  ;       cmp     al,CONFIG_MENUDEFAULT ; 'A'
 32683                                  ;       je      short no_mapcase
 32684                                  ;       cmp     al,CONFIG_INCLUDE ; 'J'
 32685                                  ;       je      short no_mapcase
 32686                                  ;       call    mapcase                 ; map case of rest of line to UPPER
 32687                                  ;no_mapcase:
 32688                                  ;;endif
 32689                                  
 32690                                  	; 02/11/2022
 32691                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 32692                                  	; 04/01/2023
 32693                                  	; ds = cs
 32694 00002EFE A2[D003]                	mov	[cmd_indicator],al
 32695                                  org2:	
 32696 00002F01 E83601                  	call    get2                    ; skip the command name until delimiter
 32697 00002F04 3C0A                            cmp     al,lf
 32698 00002F06 740B                    	je	short org21
 32699 00002F08 3C0D                    	cmp	al,cr
 32700 00002F0A 7407                    	je	short org21
 32701                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32702                                  	;cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 32703                                  	;je	short org21		; T-RICHJ: to be parsed properly.
 32704                                  
 32705 00002F0C E87701                  	call	delim
 32706 00002F0F 75F0                            jnz	short org2
 32707 00002F11 EB02                    	jmp	short org3
 32708                                  org21:					;if cr or lf then
 32709 00002F13 4E                      	dec	si			; undo si, cx register
 32710 00002F14 41                      	inc	cx			;  and continue
 32711                                  org3:	
 32712                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 32713                                  	;je	short get_cmt_token
 32714                                  	;; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32715                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 32716                                  	;;je	short org_file
 32717                                          ;cmp     byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 32718                                  	;je	short org_file
 32719                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 32720                                          ;;je	short org_file
 32721                                  	;; 02/11/2022
 32722                                  	;cmp     byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 32723                                  	;je	short org_file
 32724                                          ;cmp     byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 32725                                  	;je	short org_file
 32726                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 32727                                  	;je	short org_switch
 32728                                  
 32729                                  	; 04/01/2023
 32730                                  	; ds = cs
 32731                                  
 32732 00002F15 803E[D003]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 32733 00002F1A 7456                    	je	short get_cmt_token
 32734                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32735                                          ;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 32736                                  	;je	short org_file
 32737 00002F1C 803E[D003]49                    cmp     byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 32738 00002F21 7429                    	je	short org_file
 32739                                          ;cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 32740                                          ;je	short org_file
 32741                                  	; 02/11/2022
 32742 00002F23 803E[D003]44            	cmp     byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 32743 00002F28 7422                    	je	short org_file
 32744 00002F2A 803E[D003]53                    cmp     byte [cmd_indicator],CONFIG_SHELL ; 'S'
 32745 00002F2F 741B                    	je	short org_file
 32746 00002F31 803E[D003]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 32747 00002F36 7403                    	je	short org_switch
 32748                                  	
 32749                                  org31:
 32750 00002F38 E99500                  	jmp	org4
 32751                                  
 32752                                  org_switch:
 32753 00002F3B E81201                  	call	skip_comment
 32754 00002F3E 7472                    	jz	short end_commd_line_brdg
 32755                                  
 32756 00002F40 E8F700                  	call	get2
 32757 00002F43 E84801                  	call	org_delim
 32758 00002F46 74F3                    	jz	short org_switch
 32759                                  
 32760 00002F48 AA                      	stosb
 32761 00002F49 E99300                  	jmp	org5
 32762                                  
 32763                                  org_file:			; get the filename and put 0 at end
 32764 00002F4C E80101                  	call	skip_comment
 32765 00002F4F 7464                    	jz	short org_put_zero
 32766                                  
 32767 00002F51 E8E600                  	call	get2		; not a comment
 32768 00002F54 E82F01                  	call	delim
 32769 00002F57 74F3                    	jz	short org_file	; skip the possible delimiters
 32770                                  
 32771 00002F59 AA                      	stosb			; copy the first non delim char found in buffer
 32772                                  
 32773                                  org_copy_file:
 32774 00002F5A E8F300                  	call	skip_comment	; comment char in the filename?
 32775 00002F5D 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 32776                                  
 32777 00002F5F E8D800                  	call	get2
 32778 00002F62 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 32779 00002F64 7457                    	je	short end_file_slash ; this will be the special case.
 32780                                  
 32781 00002F66 AA                      	stosb			; save the char. in buffer
 32782 00002F67 E81C01                  	call	delim
 32783 00002F6A 7459                    	jz	short end_copy_file
 32784                                  
 32785 00002F6C 3C20                    	cmp	al, ' '
 32786 00002F6E 77EA                    	ja	short org_copy_file ; keep copying
 32787 00002F70 EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 32788                                  
 32789                                  get_cmt_token:			; get the token. just max. 2 char.
 32790 00002F72 E8C500                  	call	get2
 32791 00002F75 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 32792 00002F77 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 32793 00002F79 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 32794 00002F7B 74F5                    	je	short get_cmt_token ;  character.)
 32795 00002F7D 3C3D                    	cmp	al,'='		; = is special in this case.
 32796 00002F7F 74F1                    	je	short get_cmt_token
 32797 00002F81 3C0D                    	cmp	al,cr
 32798 00002F83 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 32799 00002F85 3C0A                    	cmp	al,lf
 32800 00002F87 7422                    	je	short get_cmt_end
 32801                                  
 32802                                  	; 04/01/2023
 32803                                  	; ds = cs
 32804                                  	;mov	[cs:cmmt1],al	; store it
 32805                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 32806 00002F89 A2[CE03]                	mov	[cmmt1],al	; store it
 32807 00002F8C C606[CD03]01            	mov	byte [cmmt],1 ; 1 char. so far.
 32808 00002F91 E8A600                  	call	get2
 32809 00002F94 3C20                    	cmp	al,' ' ; 20h
 32810 00002F96 7413                    	je	short get_cmt_end
 32811 00002F98 3C09                    	cmp	al,tab ; 9
 32812 00002F9A 740F                    	je	short get_cmt_end
 32813 00002F9C 3C0D                    	cmp	al,cr  ; 0Dh
 32814 00002F9E 740B                    	je	short get_cmt_end
 32815 00002FA0 3C0A                    	cmp	al,lf  ; 0Ah
 32816 00002FA2 740E                    	je	short end_commd_line_brdg
 32817                                  
 32818                                  	;mov	[cs:cmmt2],al
 32819                                  	;inc	byte [cs:cmmt]
 32820                                  	; 04/01/2023
 32821 00002FA4 A2[CF03]                	mov	[cmmt2],al
 32822 00002FA7 FE06[CD03]              	inc	byte [cmmt]
 32823                                  
 32824                                  get_cmt_end:
 32825 00002FAB E88C00                  	call	get2
 32826 00002FAE 3C0A                    	cmp	al,lf
 32827 00002FB0 75F9                    	jne	short get_cmt_end	; skip it.
 32828                                  end_commd_line_brdg: 
 32829 00002FB2 E9F9FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 32830                                  
 32831                                  org_put_zero:				; make the filename in front of
 32832 00002FB5 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 32833 00002FB9 47                      	inc	di
 32834 00002FBA E9F1FE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 32835                                  
 32836                                  end_file_slash: 			; al = "/" option char.
 32837 00002FBD 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 32838 00002FC1 47                      	inc	di			; and
 32839 00002FC2 AA                      	stosb				; store "/" after that.
 32840 00002FC3 EB1A                    	jmp	short org5		; continue with the rest of the line
 32841                                  
 32842                                  end_copy_file:
 32843 00002FC5 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 32844 00002FCA 3C0A                    	cmp	al,lf
 32845 00002FCC 74E4                    	je	short end_commd_line_brdg
 32846 00002FCE EB0F                    	jmp	short org5
 32847                                  
 32848                                  org4:					; org4 skips all delimiters after the command name except for '/'
 32849 00002FD0 E87D00                  	call	skip_comment
 32850 00002FD3 74DD                    	jz	short end_commd_line_brdg
 32851                                  
 32852 00002FD5 E86200                  	call	get2
 32853 00002FD8 E8B300                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 32854 00002FDB 74F3                    	jz	short org4
 32855 00002FDD EB08                    	jmp	short org51
 32856                                  
 32857                                  org5:					; rest of the line
 32858 00002FDF E86E00                  	call	skip_comment		; comment?
 32859 00002FE2 74CE                    	jz	short end_commd_line_brdg
 32860 00002FE4 E85300                  	call	get2			; not a comment.
 32861                                  
 32862                                  org51:
 32863 00002FE7 AA                      	stosb				; copy the character
 32864 00002FE8 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 32865 00002FEA 743A                    	je	short at_quote
 32866 00002FEC 3C20                    	cmp	al,' '  ; 20h
 32867 00002FEE 77EF                    	ja	short org5
 32868                                  					; M051 - Start
 32869                                  	; 04/01/2023
 32870                                  	; ds = cs
 32871 00002FF0 803E[D003]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 32872                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 32873 00002FF5 7514                    	jne	short not_dh		; N: 
 32874 00002FF7 3C0A                    	cmp	al,lf			; Q: is this line feed
 32875 00002FF9 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 32876 00002FFB 3C0D                    	cmp	al,cr			; Q: is this a cr
 32877 00002FFD 75E0                    	jne	short org5		; N: 
 32878 00002FFF 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 32879 00003004 AA                      	stosb				; put cr after blank
 32880 00003005 FE06[CC2C]              	inc	byte [insert_blank]
 32881                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 32882                                  					; inserted
 32883 00003009 EBD4                    	jmp	short org5
 32884                                  not_dh:					; M051 - End
 32885                                  
 32886 0000300B 3C0A                    	cmp	al,lf			; line feed?
 32887 0000300D 740F                    	je	short org1_brdg		; handles the next command line.
 32888 0000300F EBCE                    	jmp	short org5		; handles next char in this line.
 32889                                  
 32890                                  org_dhlf:				; M051 - Start
 32891                                  	; 04/01/2023
 32892                                  	; ds = cs
 32893 00003011 803E[CC2C]01            	cmp	byte [insert_blank],1
 32894                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 32895 00003016 7406                    	je	short org1_brdg		; Y:
 32896 00003018 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 32897 0000301D AA                      	stosb				; put lf after blank
 32898                                  					; M051 - End
 32899                                  org1_brdg:
 32900 0000301E C606[CC2C]00            	mov	byte [insert_blank],0 
 32901                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 32902                                  					; M051: devicehigh
 32903 00003023 E976FE                  	jmp	org1
 32904                                  
 32905                                  at_quote:
 32906 00003026 803E[CC03]00            	cmp	byte [com_level],0
 32907                                  	;cmp	byte [cs:com_level],0
 32908 0000302B 7407                    	je	short up_level
 32909                                  	;mov	byte [cs:com_level],0	; reset it.
 32910 0000302D C606[CC03]00            	mov	byte [com_level],0
 32911 00003032 EBAB                    	jmp	short org5
 32912                                  
 32913                                  up_level:
 32914                                  	;inc	byte [cs:com_level]	; set it.
 32915 00003034 FE06[CC03]              	inc	byte [com_level]
 32916 00003038 EBA5                    	jmp	short org5
 32917                                  
 32918                                  ;----------------------------------------------------------------------------
 32919                                  ;
 32920                                  ; procedure : get2
 32921                                  ;
 32922                                  ;----------------------------------------------------------------------------
 32923                                  
 32924                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32925                                  	; (SYSINIT:33FAh)
 32926                                  	; 04/01/2023
 32927                                  get2:
 32928 0000303A E304                    	jcxz	noget
 32929                                  	;
 32930                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32931                                  	;;lods	byte ptr es:[si]
 32932                                  	; 12/12/2022
 32933 0000303C 26                      	es	
 32934 0000303D AC                      	lodsb
 32935                                  	;mov	al, [es:si]
 32936                                  	;inc	si
 32937                                  	;
 32938 0000303E 49                      	dec	cx
 32939 0000303F C3                      	retn
 32940                                  noget:
 32941 00003040 59                      	pop	cx
 32942                                  	; 04/01/2023
 32943                                  	; ds = cs
 32944                                  	;mov	[cs:count],di ; 13/05/2019
 32945                                  	;mov	[cs:org_count],di
 32946 00003041 893E[D203]              	mov	[count],di
 32947 00003045 893E[D403]              	mov	[org_count],di
 32948 00003049 31F6                    	xor	si,si
 32949                                  	;mov	[cs:chrptr],si
 32950 0000304B 8936[D603]              	mov	[chrptr],si
 32951                                  
 32952                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32953                                  ;;ifndef MULTI_CONFIG
 32954                                  ;;	retn
 32955                                  ;;else
 32956                                  ;
 32957                                  ;;   This was the rather kludgy way out of procedure "organize", but instead
 32958                                  ;;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 32959                                  ;;   and the new boot menu stuff...
 32960                                  ;
 32961                                  ;	mov     cx,di
 32962                                  ;	jmp     menu_check
 32963                                  ;;endif
 32964                                  
 32965                                  	; 02/11/2022
 32966 0000304F C3                      	retn
 32967                                  
 32968                                  ;----------------------------------------------------------------------------
 32969                                  ;
 32970                                  ; procedure : skip_comment
 32971                                  ;
 32972                                  ;skip the commented string until lf, if current es:si-> a comment string.
 32973                                  ;in) es:si-> string
 32974                                  ;	 cx -> length.
 32975                                  ;out) zero flag not set if not found a comment string.
 32976                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 32977                                  ;	  the line feed character at this moment when return.
 32978                                  ;	  ax register destroyed.
 32979                                  ;	  if found, si, cx register adjusted accordingly.
 32980                                  ;
 32981                                  ;----------------------------------------------------------------------------
 32982                                  
 32983                                  	; 04/01/2023 - Retro DOS v4.0
 32984                                  
 32985                                  skip_comment:
 32986 00003050 E3EE                    	jcxz	noget		; get out of the organize routine.
 32987                                  
 32988                                  	; 04/01/2023
 32989                                  	; ds = cs	
 32990                                  
 32991 00003052 803E[CC03]00            	cmp	byte [com_level],0
 32992                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 32993 00003057 752C                    	jne	short no_commt	 ; (not inside quotations)
 32994                                  
 32995 00003059 803E[CD03]01            	cmp	byte [cmmt],1
 32996                                  	;cmp	byte [cs:cmmt],1
 32997 0000305E 7225                    	jb	short no_commt
 32998                                  
 32999 00003060 268A04                  	mov	al,[es:si]
 33000                                  	
 33001 00003063 3806[CE03]              	cmp	[cmmt1],al
 33002                                  	;cmp	[cs:cmmt1],al
 33003 00003067 751C                    	jne	short no_commt
 33004                                  
 33005 00003069 803E[CD03]02            	cmp	byte [cmmt],2
 33006                                  	;cmp	byte [cs:cmmt],2
 33007 0000306E 750A                    	jne	short skip_cmmt
 33008                                  
 33009 00003070 268A4401                	mov	al,[es:si+1]
 33010                                  	
 33011 00003074 3806[CF03]              	cmp	[cmmt2],al
 33012                                  	;cmp	[cs:cmmt2],al
 33013 00003078 750B                    	jne	short no_commt
 33014                                  skip_cmmt:
 33015 0000307A E3C4                    	jcxz	noget		; get out of organize routine.
 33016 0000307C 268A04                  	mov	al,[es:si]
 33017 0000307F 46                      	inc	si
 33018 00003080 49                      	dec	cx
 33019 00003081 3C0A                    	cmp	al,lf		; line feed?
 33020 00003083 75F5                    	jne	short skip_cmmt
 33021                                  no_commt:
 33022 00003085 C3                      	retn
 33023                                  
 33024                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33025                                  %if 0
 33026                                  
 33027                                  ;ifdef	MULTI_CONFIG
 33028                                  
 33029                                  ;----------------------------------------------------------------------------
 33030                                  ;
 33031                                  ;   kbd_read: wait for keystroke
 33032                                  ;
 33033                                  ;   INPUT
 33034                                  ;       DS == CS == sysinitseg
 33035                                  ;
 33036                                  ;   OUTPUT
 33037                                  ;       Carry SET to clean boot, CLEAR otherwise
 33038                                  ;
 33039                                  ;   OTHER REGS USED
 33040                                  ;       All
 33041                                  ;
 33042                                  ;   HISTORY
 33043                                  ;       Created 16-Nov-1992 by JeffPar
 33044                                  ;
 33045                                  ;----------------------------------------------------------------------------
 33046                                  
 33047                                  kbd_read:
 33048                                          test    byte [bDisableUI],2
 33049                                          jnz     short kbd_nodelay
 33050                                  
 33051                                          push    ds              ; the bios timer tick count is incremented
 33052                                          sub     ax,ax           ; 18.2 times per second;
 33053                                          mov     ds,ax           ; watch the timer tick count for 37 transitions
 33054                                  	;mov	dx,[046Ch]	; get initial value
 33055                                  kbd_loop:
 33056                                          mov     ah,1            ;
 33057                                          int     16h             ; peek the keyboard
 33058                                          jnz	short kbd_loopdone ; something's there, get out
 33059                                          mov     ah,2            ; peek the shift states
 33060                                          int     16h             ;
 33061                                          test    al,03h          ; either right or left shift key bits set?
 33062                                          jnz	short kbd_loopdone ; yes
 33063                                          mov     ax,[046Ch]	;
 33064                                  	;sub	ax,dx           ; get difference
 33065                                  	; 15/04/2019 - Retro DOS v4.0
 33066                                  	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 33067                                  
 33068                                  	cmp     al,37           ; reached limit?
 33069                                          jb	short kbd_loop	; not yet
 33070                                  kbd_loopdone:
 33071                                          pop     ds              ; delay complete!
 33072                                  kbd_nodelay:
 33073                                          sub     bx,bx           ; assume clean boot
 33074                                          mov     ah,2            ; peek the shift states
 33075                                          int     16h             ;
 33076                                          test    al,03h          ; either right or left shift key bits set?
 33077                                          jz      short kbd_notshift ; no
 33078                                          inc     bx              ; yes
 33079                                          inc     bx
 33080                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 33081                                  	or	byte [bQueryOpt],4
 33082                                  kbd_notshift:                   ;
 33083                                          mov     ah,1            ; peek the keyboard
 33084                                          int     16h             ;
 33085                                          jz	short kbd_test	; no key present
 33086                                          or      al,al           ; is it a function key?
 33087                                          jnz	short kbd_test	; no
 33088                                  
 33089                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 33090                                          cmp     ah,62h          ; CTRL F5
 33091                                          je	short kbd_cfg_bypass
 33092                                  	
 33093                                          cmp     ah,3Fh          ; F5 function key?
 33094                                          jne	short kbd_notf5	; no
 33095                                  kbd_cfg_bypass:
 33096                                          mov     dx,_$CleanMsg
 33097                                          call    print
 33098                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 33099                                  	or	byte [bQueryOpt],4           ;
 33100                                          jmp     short kbd_eat   ; yes, clean boot selected
 33101                                  kbd_notf5:
 33102                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 33103                                          cmp     ah,65h          ; CTRL F8
 33104                                          je	short kbd_cfg_confirm
 33105                                  
 33106                                          cmp     ah,42h          ; F8 function key?
 33107                                          jne	short kbd_exit	; no
 33108                                  kbd_cfg_confirm:
 33109                                          mov     dx,_$InterMsg
 33110                                          call    print           ;
 33111                                          mov     bl,1            ; yes, interactive-boot option enabled
 33112                                          mov     [bQueryOpt],bl  ; change default setting
 33113                                  kbd_eat:                        ;
 33114                                          mov     ah,0            ;
 33115                                          int     16h             ; eat the key we assumed was a signal
 33116                                          mov	byte [secElapsed],-1
 33117                                          or      bx,bx           ;
 33118                                          jz	short kbd_clean	;
 33119                                  kbd_test:                       ;
 33120                                          cmp     bl,2            ;
 33121                                          jb	short kbd_exit	;
 33122                                  kbd_clean:                      ;
 33123                                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 33124                                          stc                     ; set carry to indicate abort
 33125                                          retn			;
 33126                                  kbd_exit:                       ;
 33127                                          clc                     ; clear carry to indicate success
 33128                                          retn			;
 33129                                  
 33130                                  ;----------------------------------------------------------------------------
 33131                                  ;
 33132                                  ;   set_numlock: set numlock LED
 33133                                  ;
 33134                                  ;   INPUT
 33135                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 33136                                  ;
 33137                                  ;   OUTPUT
 33138                                  ;       None
 33139                                  ;
 33140                                  ;   OTHER REGS USED
 33141                                  ;       None
 33142                                  ;
 33143                                  ;   HISTORY
 33144                                  ;       Created 16-Nov-1992 by JeffPar
 33145                                  ;
 33146                                  ;----------------------------------------------------------------------------
 33147                                  
 33148                                  set_numlock:
 33149                                          push    ax
 33150                                          push    ds
 33151                                          sub     ax,ax
 33152                                          mov     ds,ax
 33153                                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 33154                                          cmp     ax,[cs:OnOff+2]	; should we turn it off?
 33155                                          jne	short not_off	; no
 33156                                          and     byte [0417h],~20h ; 0DFh
 33157                                          jmp     short set_done
 33158                                  not_off:
 33159                                          cmp     ax,[cs:OnOff]	; should we turn it on?
 33160                                          stc
 33161                                          jne	short set_done	; no
 33162                                          or      byte [0417h],20h
 33163                                  set_done:
 33164                                          pop     ds
 33165                                          pop     ax
 33166                                          retn
 33167                                  
 33168                                  ; 16/04/2019 - Retro DOS v4.0
 33169                                  
 33170                                  ;----------------------------------------------------------------------------
 33171                                  ;
 33172                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 33173                                  ;
 33174                                  ;   INPUT
 33175                                  ;       CX == "organized" config.sys memory image length
 33176                                  ;    ES:SI -> "organized" config.sys memory image
 33177                                  ;       DS == CS == sysinitseg
 33178                                  ;
 33179                                  ;   OUTPUT
 33180                                  ;       Same as above;  the idea is that menu_check simply transforms
 33181                                  ;       a block-structured config.sys image into a conventional image,
 33182                                  ;       based on the user's block selection and any other boot-time options
 33183                                  ;       the user may have employed...
 33184                                  ;
 33185                                  ;   OTHER REGS USED
 33186                                  ;       All
 33187                                  ;
 33188                                  ;   NOTES
 33189                                  ;       [count] and [org_count] are set to the new config.sys image length
 33190                                  ;
 33191                                  ;   HISTORY
 33192                                  ;       Created 16-Mar-1992 by JeffPar
 33193                                  ;
 33194                                  ;----------------------------------------------------------------------------
 33195                                  
 33196                                  menu_check:
 33197                                  
 33198                                  ;   Search for SWITCHES, determine if /N or /F are present;  if so, then
 33199                                  ;   disable clean/interactive boot options
 33200                                  
 33201                                          push    cx              ;
 33202                                          push    si              ;
 33203                                          sub     bx,bx           ; remains ZERO until first block
 33204                                  swchk_loop:                     ;
 33205                                          call    get_char        ; get first char of current line
 33206                                          jc	short swchk_end	; hit eof
 33207                                          cmp     al,CONFIG_BEGIN ;
 33208                                          jne	short swchk_next1 ;
 33209                                          inc     bx              ; remember that we've seen a block
 33210                                          jmp     short swchk_nextline
 33211                                  swchk_next1:                    ;
 33212                                          cmp     al,CONFIG_NUMLOCK
 33213                                          jne	short swchk_next2 ;
 33214                                          or      bx,bx           ; only do NUMLOCK commands that exist
 33215                                          jnz	short swchk_nextline ; before the first block
 33216                                          call    set_numlock     ; REM it out so we don't act on it later, too
 33217                                          mov     byte [es:si-1],CONFIG_REM
 33218                                          jmp     short swchk_nextline
 33219                                  swchk_next2:                    ;
 33220                                          cmp     al,CONFIG_SWITCHES
 33221                                          jne	short swchk_nextline ; this line ain't it
 33222                                  swchk_scan:                     ;
 33223                                          call    get_char        ; look for /N or /F
 33224                                  swchk_scan1:                    ;
 33225                                          cmp     al,LF           ; end of line?
 33226                                          je	short swchk_nextline ; yes
 33227                                          cmp     al,'/'          ; switch-char?
 33228                                          jne	short swchk_scan ; no
 33229                                          call    get_char        ;
 33230                                          and     al,~20h ; 0DFh	; convert to upper case
 33231                                          cmp     al,[swit_n+1]
 33232                                          jne	short swchk_scan2 ; no
 33233                                          or      byte [bDisableUI],1
 33234                                          jmp	short swchk_scan ; continue looking for switches of interest
 33235                                  swchk_scan2:                    ;
 33236                                          cmp     al,[swit_f+1]
 33237                                          jne	short swchk_scan1 ; no
 33238                                          or      byte [bDisableUI],2
 33239                                          jmp     short swchk_scan ; continue looking for switches of interest
 33240                                  swchk_nextline:                 ;
 33241                                          call    skip_opt_line   ;
 33242                                          jmp     short swchk_loop ;
 33243                                  swchk_end:                      ;
 33244                                          pop     si              ;
 33245                                          pop     cx              ;
 33246                                  
 33247                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 33248                                  ;   the DisableUI flag is still clear
 33249                                  
 33250                                          test    byte [bDisableUI],1
 33251                                          jnz	short menu_search
 33252                                  ;
 33253                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 33254                                  ;   there is anything at all in the keyboard buffer
 33255                                  ;
 33256                                          call    kbd_read
 33257                                          jnc	short menu_search
 33258                                          jmp	menu_abort
 33259                                  
 33260                                  ;   Search for MENU block;  it is allowed to be anywhere in config.sys
 33261                                  
 33262                                  menu_search:
 33263                                          sub     bx,bx           ; if no MENU, default to zero for no_selection
 33264                                          mov     di,szMenu	;
 33265                                          call    find_block      ; find the MENU block
 33266                                          jnc	short menu_found ;
 33267                                          mov     byte [szBoot],0
 33268                                          jmp	no_selection ; not found
 33269                                  
 33270                                  ;   Process the requested menu color(s)
 33271                                  
 33272                                  menu_color:
 33273                                          push    cx              ;
 33274                                          push    dx              ;
 33275                                          mov     dx,0007h        ; default color setting
 33276                                          call    get_number	; get first number
 33277                                          and     bl,0Fh		; first # is foreground color (for low nibble)
 33278                                          mov     ch,bl           ; save it in CH
 33279                                          and     dl,0F0h         ;
 33280                                          or      dl,bl           ;
 33281                                          call    delim           ; did we hit a delimiter
 33282                                          jne	short check_color ; no, all done
 33283                                          call    get_number	; get next number
 33284                                          and     bl,0Fh		; second # is background color (for high nibble)
 33285                                          mov     dh,bl           ; save it in DH
 33286                                          and     dl,0Fh		;
 33287                                          mov     cl,4            ;
 33288                                          shl     bl,cl           ;
 33289                                          or      dl,bl           ;
 33290                                  check_color:                    ;
 33291                                          cmp     ch,dh           ; are foreground/background the same?
 33292                                          jne	short set_color	; no
 33293                                          xor     dl,08h          ; yes, so modify the fgnd intensity
 33294                                  set_color:
 33295                                          mov     [bMenuColor],dl ;
 33296                                          pop     dx              ;
 33297                                          pop     cx              ;
 33298                                          jmp	menu_nextitem
 33299                                  
 33300                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 33301                                  ;   above is there simply to alleviate short jump problems)
 33302                                  
 33303                                  menu_found:
 33304                                          mov     byte [bDefBlock],1
 33305                                          mov     word [offDefBlock],0
 33306                                          mov     byte [secTimeOut],-1
 33307                                          and     byte [bQueryOpt],~2 ; 0FDh
 33308                                  
 33309                                          call    skip_opt_line   ; skip to next line
 33310                                          sub     dx,dx           ; initialize total block count (0 => none yet)
 33311                                  
 33312                                  ;   Process the menu block now
 33313                                  
 33314                                  menu_process:
 33315                                          call    get_char        ; get first char of current line
 33316                                          jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 33317                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33318                                          cmp     al,CONFIG_BEGIN ; BEGIN implies END
 33319                                          je	short to_menu_getdefault
 33320                                          cmp     al,CONFIG_SUBMENU
 33321                                          je	short menu_item	; go process sub-menu
 33322                                          cmp     al,CONFIG_MENUITEM
 33323                                          je	short menu_item	; go process menu item
 33324                                          cmp     al,CONFIG_MENUDEFAULT
 33325                                          je	short menu_default ; go process menu default
 33326                                          cmp     al,CONFIG_MENUCOLOR
 33327                                          je	short menu_color ; go process menu color
 33328                                          cmp     al,CONFIG_NUMLOCK
 33329                                          je	short menu_numlock ;
 33330                                          cmp     al,CONFIG_REM   ; allow remarks in menu block
 33331                                          je	short menu_nextitem ;
 33332                                          call    any_delim       ; allow blank lines and such
 33333                                          je	short menu_nextitem ;
 33334                                          stc                     ;
 33335                                          call    print_error     ; non-MENU command!
 33336                                          jmp     short menu_nextitem
 33337                                  menu_numlock:
 33338                                          call    set_numlock
 33339                                          jmp     short menu_nextitem
 33340                                  to_menu_getdefault:
 33341                                          jmp     short menu_getdefault
 33342                                  
 33343                                  ;   Save the offset of the default block name, we'll need it later
 33344                                  
 33345                                  menu_default:
 33346                                          mov     [offDefBlock],si; save address of default block name
 33347                                          cmp     byte [secElapsed],0
 33348                                          jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 33349                                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 33350                                          jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 33351                                          call    skip_delim      ; something is typed
 33352                                          jc	short menu_nextitem ;
 33353                                          mov     si,bx           ;
 33354                                          call    get_number      ; get number (of seconds for timeout)
 33355                                          cmp     bl,90           ; limit it to a reasonable number
 33356                                          jb	short timeout_ok ; (besides, 99 is the largest # my simple
 33357                                          mov     bl,90           ;  display function can handle)
 33358                                  timeout_ok:                     ;
 33359                                          mov     [secTimeOut],bl ;
 33360                                  timeout_skip:
 33361                                          jmp     short menu_nextitem
 33362                                  
 33363                                  ;   Verify that this is a valid menu item by searching for the named block
 33364                                  
 33365                                  menu_item:
 33366                                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 33367                                          jae	short menu_nextitem ;
 33368                                          mov     di,si           ; DS:DI -> block name to search for
 33369                                          call    srch_block      ;
 33370                                          je	short menu_itemfound ;
 33371                                          stc                     ;
 33372                                          call    print_error     ; print error and pause
 33373                                          jmp     short menu_nextitem ; if not found, ignore this menu item
 33374                                  
 33375                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 33376                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 33377                                  ;   and CX are unmodified
 33378                                  
 33379                                  menu_itemfound:
 33380                                          inc     dx              ; otherwise, increment total block count
 33381                                          mov     bx,dx           ; and use it to index the arrays of offsets
 33382                                          mov	[abBlockType+bx],al
 33383                                          add     bx,bx           ; of recorded block names and descriptions
 33384                                  
 33385                                  ;   There should be a description immediately following the block name on
 33386                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 33387                                  ;   description...
 33388                                  
 33389                                          mov     [aoffBlockName+bx],si
 33390                                          mov     [aoffBlockDesc+bx],si
 33391                                          mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 33392                                          call    skip_token      ;
 33393                                          jc	short menu_nextitem ; hit eol/eof
 33394                                          call    skip_delim      ;
 33395                                          jc	short menu_nextitem ; hit eol/eof
 33396                                          xchg    bx,di           ;
 33397                                          mov     [aoffBlockDesc+bx],di
 33398                                  
 33399                                  menu_nextitem:
 33400                                          call    skip_opt_line   ;
 33401                                          jmp     menu_process    ; go back for more lines
 33402                                  
 33403                                  ;   Display menu items now, after determining which one is default
 33404                                  
 33405                                  menu_getdefault:
 33406                                          or      dl,dl           ; where there any valid blocks at all?
 33407                                          jnz	short menu_valid ; yes
 33408                                          sub     bx,bx           ; no, so force autoselect of 0
 33409                                          jmp     menu_autoselect ; (meaning: process common blocks only)
 33410                                  menu_valid:
 33411                                          sub     bx,bx           ;
 33412                                          mov     [bMaxBlock],dl  ; first, record how many blocks we found
 33413                                          mov     di,[offDefBlock];
 33414                                          or      di,di           ; does a default block exist?
 33415                                          jz	short menu_nodefault ; no
 33416                                          inc     bx              ; yes, walk name table, looking for default
 33417                                  menu_chkdefault:
 33418                                          push    bx              ;
 33419                                          add     bx,bx           ;
 33420                                          mov     si,[aoffBlockName+bx]
 33421                                          mov     cx,128          ; arbitrary maximum length of a name
 33422                                          push    ds              ;
 33423                                          push    es              ;
 33424                                          pop     ds              ;
 33425                                          call    comp_names      ; is this block the same as the default?
 33426                                          pop     ds              ;
 33427                                          pop     bx              ;
 33428                                          je	short menu_setdefault ; yes
 33429                                          inc     bx              ;
 33430                                          cmp     bl,[bMaxBlock]  ; all done searching?
 33431                                          jbe	short menu_chkdefault ; not yet
 33432                                  menu_nodefault:
 33433                                          mov     bl,1            ; if no default, force default to #1
 33434                                  menu_setdefault:
 33435                                          mov     [bDefBlock],bl  ; yes, this will be the initial current block
 33436                                  
 33437                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 33438                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 33439                                  ;   supposed to skip menu display and run with the specified default block;
 33440                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 33441                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 33442                                  ;   with no timeout)
 33443                                  
 33444                                          cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 33445                                          jne	short menu_display ; no
 33446                                          test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 33447                                          jnz	short menu_display ; yes, so *don't* assume default after all
 33448                                          jmp     not_topmenu	;
 33449                                  
 33450                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 33451                                  
 33452                                  menu_display:
 33453                                          mov     ah,0Fh          ; get current video mode
 33454                                          int     10h             ;
 33455                                          mov     ah,00h          ; just re-select that mode
 33456                                          int     10h             ;
 33457                                          push    es              ;
 33458                                          mov     ax,40h          ; reach down into the ROM BIOS data area
 33459                                          mov     es,ax           ; and save the current (default) video page
 33460                                          mov     ax,[es:004Eh]   ; start address and page #, in case the
 33461                                          mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 33462                                          mov     al,[es:0062h]   ;
 33463                                          mov     [bCRTPage],al   ;
 33464                                          mov     ax,[bMenuPage]	; select new page for menu
 33465                                          int     10h             ;
 33466                                          mov     ax,0600h        ; clear entire screen
 33467                                          mov     bh,[bMenuColor] ; using this color
 33468                                          sub     cx,cx           ; upper left row/col
 33469                                          ;mov	dl,[es:CRT_Cols] 
 33470                                          mov	dl,[es:4Ah]
 33471                                  	dec     dl              ;
 33472                                          ;mov	dh,[es:CRT_Rows];
 33473                                          mov	dh,[es:84h]
 33474                                  	or      dh,dh           ; # of rows valid?
 33475                                          jnz	short menu_clear ; hopefully
 33476                                          mov     dh,[bLastRow]   ; no, use a default
 33477                                  menu_clear:
 33478                                          int     10h             ; clear the screen using the req. attribute
 33479                                          pop     es              ;
 33480                                          mov     [bLastRow],dh   ; save DH
 33481                                          mov     dx,_$MenuHeader
 33482                                          call    print           ; cursor now on row 3 (numbered from 0)
 33483                                  
 33484                                          test    byte [bDisableUI],1
 33485                                          jnz     short menu_nostatus
 33486                                          mov     bh,[bMenuPage]  ;
 33487                                          mov     dh,[bLastRow]   ; restore DH
 33488                                          mov     dl,0            ; print the status line on row DH, col 0,
 33489                                          mov     ah,02h          ; now that we can trash the cursor position
 33490                                          int     10h             ;
 33491                                          mov     dx,_$StatusLine
 33492                                          call    print           ;
 33493                                          mov     ah,3            ; get cursor position
 33494                                          int     10h             ;
 33495                                          sub     dl,2            ;
 33496                                          mov     [bLastCol],dl   ; save column where status char will go
 33497                                  
 33498                                  menu_nostatus:
 33499                                          mov     bx,1            ; now prepare to display all the menu items
 33500                                  menu_disploop:
 33501                                          call    print_item	; print item #BL
 33502                                          inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 33503                                          cmp     bl,[bMaxBlock]  ; all done?
 33504                                          jbe	short menu_disploop ; not yet
 33505                                  
 33506                                  ;   Set cursor position to just below the menu items
 33507                                  
 33508                                          mov     dl,0            ; select column
 33509                                          mov     dh,bl           ;
 33510                                          add     dh,4            ; select row below menu
 33511                                          mov     bh,[bMenuPage]  ;
 33512                                          mov     ah,02h          ; set cursor position beneath the block list
 33513                                          int     10h             ;
 33514                                  
 33515                                          mov     dx,_$MenuPrmpt
 33516                                          call    print           ;
 33517                                          call    select_item     ; make a selection, return # in BX
 33518                                          mov     dx,crlfm	
 33519                                          call    print           ;
 33520                                          push    word [bDisableUI]
 33521                                          or      byte [bDisableUI],1
 33522                                          call    show_status     ; clear the status line now
 33523                                          pop     word [bDisableUI]
 33524                                  
 33525                                  ;   Now begins the "re-organization" process...
 33526                                  
 33527                                  menu_autoselect:
 33528                                          cmp     bx,-1           ; clean boot requested?
 33529                                          jne	short normal_boot ; no
 33530                                          call    disable_autoexec; basically, add a /D to the command.com line
 33531                                  menu_abort:
 33532                                          sub     cx,cx           ; then immediately exit with 0 config.sys image
 33533                                          jmp	menu_exit	;
 33534                                  
 33535                                  normal_boot:
 33536                                          cmp     bx,-2           ; back to top-level menu?
 33537                                          jne	short not_topmenu ; no
 33538                                          mov     cx,[count]      ; yes, start all over
 33539                                          sub     si,si           ;
 33540                                          jmp     menu_search
 33541                                  
 33542                                  not_topmenu:
 33543                                          cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 33544                                          jne	short not_submenu
 33545                                          add     bx,bx           ;
 33546                                          mov     di,[aoffBlockName+bx]
 33547                                          call    srch_block      ; THIS CANNOT FAIL!
 33548                                          mov     si,di           ;
 33549                                          mov     cx,bx           ; ES:SI and CX are ready for another round
 33550                                          jmp     menu_found
 33551                                  
 33552                                  not_submenu:
 33553                                          add     bx,bx           ; get BX -> name of selected block
 33554                                          mov     bx,[aoffBlockName+bx]
 33555                                  
 33556                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 33557                                  ;   the offset relative to ES of the block name to be processed (along with
 33558                                  ;   all the "common" lines of course)
 33559                                  
 33560                                  no_selection:
 33561                                          mov     [offDefBlock],bx; save selection
 33562                                          mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 33563                                          sub     si,si           ;
 33564                                          push    ds              ;
 33565                                          mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 33566                                          sub     di,di           ;
 33567                                  
 33568                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 33569                                  ;
 33570                                  ;   Work our way through the config.sys image again, this time copying
 33571                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 33572                                  ;   within the requested block.  Lines inside INCLUDEd blocks are transparently
 33573                                  ;   copied by copy_block in a recursive fashion;  the amount of recursion is
 33574                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 33575                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 33576                                  ;
 33577                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 33578                                  ;   stack we're running on, then we should check it inside copy_block
 33579                                  
 33580                                  copyblock_loop:
 33581                                          push    bx              ; save selected block name
 33582                                          call    copy_block      ; process (named or common) block
 33583                                          pop     bx              ;
 33584                                          jc	short move_config ; hit eof
 33585                                  
 33586                                  ;   copy_block can only return for two reasons:  it hit eof or a new block
 33587                                  
 33588                                  copyblock_begin:
 33589                                          push    ax              ;
 33590                                          push    cx              ;
 33591                                          push    si              ;
 33592                                          push    di              ; always do "common" blocks
 33593                                          mov     di,szCommon
 33594                                          push    ds              ;
 33595                                          push    cs              ;
 33596                                          pop     ds              ;
 33597                                          call    comp_names      ;
 33598                                          pop     ds              ;
 33599                                          pop     di              ;
 33600                                          pop     si              ;
 33601                                          pop     cx              ;
 33602                                          pop     ax              ;
 33603                                          je	short copyblock_check
 33604                                          or      bx,bx           ; is there a block name to check?
 33605                                          jz	short copyblock_skip ; no
 33606                                          push    di              ;
 33607                                          mov     di,bx           ; check block against given block name
 33608                                          push    ds              ;
 33609                                          push    es              ;
 33610                                          pop     ds              ;
 33611                                          call    comp_names      ; is this the block we really want to do?
 33612                                          pop     ds              ;
 33613                                          pop     di              ;
 33614                                  copyblock_check:
 33615                                          jc	short move_config ; hit eof
 33616                                          jne	short copyblock_skip  ;
 33617                                          call    skip_opt_line   ;
 33618                                          jmp	short copyblock_loop 
 33619                                  
 33620                                  copyblock_skip:                 ;
 33621                                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 33622                                          call    get_char        ;
 33623                                          jc	short move_config ; hit eof
 33624                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33625                                          cmp     al,CONFIG_BEGIN ;
 33626                                          je	short copyblock_begin
 33627                                          jmp     short copyblock_skip ; anything else is just skipped
 33628                                  ;
 33629                                  ;   To create as little risk to the rest of SysInit as little as possible,
 33630                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 33631                                  ;   copy the new config.sys image to "confbot"
 33632                                  ;
 33633                                  move_config:
 33634                                          mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 33635                                          push    cx              ;
 33636                                  ;
 33637                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 33638                                  ;   since the configuration name only currently exists in the "confbot" area
 33639                                  ;
 33640                                   	;mov	cx,7
 33641                                  	mov     cx,szMenu-szBoot-1
 33642                                          mov     si,szBoot	; first copy the CONFIG= part
 33643                                          inc     di              ; skip a byte, in case absolutely nothing
 33644                                                                  ; was copied to the workspace, because we always
 33645                                                                  ; zero the first byte of the workspace (below)
 33646                                  copy_boot: 
 33647                                  	;lods    byte ptr cs:[si];
 33648                                          cs
 33649                                  	lodsb
 33650                                  	mov     [di],al         ;
 33651                                          inc     di              ;
 33652                                          loop    copy_boot       ;
 33653                                  
 33654                                          push    es              ; then copy the configuration name
 33655                                          mov     cx,128-7        ; put an upper limit on the name, to be safe
 33656                                          mov     si,[cs:offDefBlock]; ES:SI -> default block name
 33657                                          or      si,si           ; valid?
 33658                                          jnz	short l1	; yes
 33659                                          push    cs              ;
 33660                                          pop     es              ;
 33661                                          mov     si,szCommon
 33662                                  l1:     mov     al,[es:si]      ;
 33663                                          call    any_delim       ;
 33664                                          je	short l2	;
 33665                                          mov     [di],al         ;
 33666                                          inc     si              ;
 33667                                          inc     di              ;
 33668                                          loop    l1              ;
 33669                                  l2:     mov     byte [di],lf	; terminate the configuration string
 33670                                          pop     es              ;
 33671                                  
 33672                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 33673                                  
 33674                                          sub     di,di           ;
 33675                                          mov     [cs:config_envlen],di
 33676                                          sub     si,si           ;
 33677                                          pop     cx              ; recover the size of "config_wrkseg"
 33678                                  
 33679                                          push    cx              ;
 33680                                          rep     movsb           ; moved!
 33681                                          pop     cx              ;
 33682                                          mov     ax,ds           ;
 33683                                          pop     ds              ;
 33684                                  
 33685                                  ;   Now that the config_wrkseg is available once again, we shall
 33686                                  ;   use it to create an environment. The first thing to go in will be
 33687                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 33688                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 33689                                  ;   is empty.
 33690                                  
 33691                                          push    es              ;
 33692                                          mov     es,ax           ;
 33693                                          inc     si              ; ES:SI -> "CONFIG=configuration"
 33694                                          mov     byte [es:0],0	;empty the environment block
 33695                                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 33696                                          pop     es
 33697                                  
 33698                                  ;   Before returning, restore the default video page setting but do NOT
 33699                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 33700                                  ;   displayed on a different page, then it's because we don't want to see
 33701                                  ;   all the device driver/TSR goop (which goes to the default page)
 33702                                  
 33703                                  menu_done:
 33704                                          cmp     byte [bMenuPage],0
 33705                                          je	short menu_exit	;
 33706                                          push    es              ;
 33707                                          mov     ax,40h          ;
 33708                                          mov     es,ax           ;
 33709                                          mov     ax,[wCRTStart]  ;
 33710                                          mov     [es:004Eh],ax   ;
 33711                                          mov     al,[bCRTPage]   ;
 33712                                          mov     [es:0062h],al   ;
 33713                                          pop     es              ;
 33714                                  menu_exit:
 33715                                          mov     [count],cx      ; set new counts
 33716                                          mov     [org_count],cx  ;
 33717                                          sub     si,si           ; always return ES:SI pointing to config.sys
 33718                                          retn
 33719                                  
 33720                                  ;----------------------------------------------------------------------------
 33721                                  ;
 33722                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 33723                                  ;
 33724                                  ;   INPUT
 33725                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 33726                                  ;
 33727                                  ;   OUTPUT
 33728                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 33729                                  ;       carry set if error (eg, missing =); clear otherwise
 33730                                  ;
 33731                                  ;   OTHER REGS USED
 33732                                  ;       None
 33733                                  ;
 33734                                  ;   NOTES
 33735                                  ;       None
 33736                                  ;
 33737                                  ;   HISTORY
 33738                                  ;       Created 29-Mar-1992 by JeffPar
 33739                                  ;
 33740                                  ;----------------------------------------------------------------------------
 33741                                  
 33742                                  copy_envvar:
 33743                                          push    cx              ;
 33744                                          push    si              ;
 33745                                          push    ds              ;
 33746                                          push    es              ;
 33747                                          push    es              ;
 33748                                          mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 33749                                          pop     ds                 ; DS:SI to point to envvar
 33750                                  
 33751                                  ;   Have to calculate the length of the variable name (and if we hit
 33752                                  ;   the end of the line before we hit '=', then it's curtains for this
 33753                                  ;   config.sys line)
 33754                                  ;
 33755                                  ;   The check for NULL is important because copy_envvar is also used to copy
 33756                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 33757                                  ;   menu block existed (in order to prevent the creation of an environment)
 33758                                  
 33759                                          sub     cx,cx           ;
 33760                                  copy_varlen:                    ;
 33761                                          lodsb                   ;
 33762                                          or      al,al           ; NULL?
 33763                                          stc                     ;
 33764                                          jz	short copy_envexit ; yes, abort
 33765                                          cmp     al,cr          ;
 33766                                          stc                     ;
 33767                                          je	short copy_envexit
 33768                                          cmp     al,lf          ;
 33769                                          stc                     ;
 33770                                          je	short copy_envexit
 33771                                          inc     cx              ;
 33772                                          cmp     al,'='          ;
 33773                                          jne	short copy_varlen
 33774                                          mov     al,0            ;
 33775                                          mov     ah,[si]         ; save char after '='
 33776                                          sub     si,cx           ; back up to given varname
 33777                                          dec     cx              ; CX == # of bytes in varname
 33778                                          sub     di,di           ; start looking for DS:SI at ES:0
 33779                                  copy_varsrch:
 33780                                          cmp     byte [es:di],al
 33781                                          je	short copy_envprep ; search failed, just copy var
 33782                                          mov     bx,di           ; ES:BX -> start of this varname
 33783                                          push    cx              ;
 33784                                          push    si              ;
 33785                                          repe    cmpsb           ;
 33786                                          pop     si              ;
 33787                                          pop     cx              ;
 33788                                          jne	short copy_varnext ; no match, skip to next varname
 33789                                          cmp     byte [es:di],'='
 33790                                          jne     short copy_varnext ; no match, there's more characters
 33791                                  
 33792                                  ;   Previous occurrence of variable has been found; determine the
 33793                                  ;   entire length and then destroy it
 33794                                  
 33795                                          mov     cx,-1           ;
 33796                                          repne   scasb           ; guaranteed to get null (since we put it there)
 33797                                          push    si              ;
 33798                                          mov     si,di           ;
 33799                                          mov     di,bx           ;
 33800                                          mov     cx,[cs:config_envlen]
 33801                                          sub     cx,si           ; destroy variable now
 33802                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 33803                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO:SYS - SYSINIT:4724h
 33804                                  
 33805                                  	rep	; 0F3h
 33806                                  	es	; 26h
 33807                                  	movsb	; 0A4h
 33808                                  
 33809                                  	pop     si
 33810                                  copy_envprep:
 33811                                          cmp     ah,cr          ; if there is nothing after the '='
 33812                                          je	short copy_envdel ; then just exit with variable deleted
 33813                                          cmp     ah,lf           ;
 33814                                          je	short copy_envdel
 33815                                          jmp     short copy_envloop
 33816                                  
 33817                                  copy_varnext:                   ;
 33818                                          push    cx              ;
 33819                                          mov     cx,-1           ;
 33820                                          repne   scasb           ;
 33821                                          pop     cx              ;
 33822                                          jmp	short copy_varsrch
 33823                                  
 33824                                  copy_envloop:                   ;
 33825                                          lodsb                   ;
 33826                                          cmp     al,cr           ;
 33827                                          je	short copy_envdone
 33828                                          cmp     al,lf           ;
 33829                                          je	short copy_envdone
 33830                                          stosb                   ;
 33831                                          jmp     short copy_envloop
 33832                                  
 33833                                  copy_envdone:                   ;
 33834                                          sub     al,al           ; do SUB to clear carry as well
 33835                                          stosb                   ; always null-terminate these puppies
 33836                                  copy_envdel:                    ;
 33837                                          mov     [es:di],al      ; and stick another null to terminate the env.
 33838                                          mov     [cs:config_envlen],di
 33839                                  
 33840                                  copy_envexit:                   ;
 33841                                          pop     es              ;
 33842                                          pop     ds              ;
 33843                                          pop     si              ;
 33844                                          pop     cx              ;
 33845                                  
 33846                                  copy_done:	; 18/12/2022
 33847                                          retn
 33848                                  
 33849                                  ;----------------------------------------------------------------------------
 33850                                  ;
 33851                                  ;   copy_block:  copy the current block to the new config.sys workspace
 33852                                  ;
 33853                                  ;   INPUT
 33854                                  ;       CX == remaining bytes in "organized" config.sys memory image
 33855                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 33856                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 33857                                  ;             config.sys image) where the current block is to be copied
 33858                                  ;
 33859                                  ;   OUTPUT
 33860                                  ;       Same as above
 33861                                  ;       AL also equals the last character read from the organized image
 33862                                  ;
 33863                                  ;   OTHER REGS USED
 33864                                  ;       All
 33865                                  ;
 33866                                  ;   NOTES
 33867                                  ;       None
 33868                                  ;
 33869                                  ;   HISTORY
 33870                                  ;       Created 16-Mar-1992 by JeffPar
 33871                                  ;
 33872                                  ;----------------------------------------------------------------------------
 33873                                  
 33874                                  copy_block:
 33875                                          call    get_char        ; check for include
 33876                                          jc	short copy_done	;
 33877                                  	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33878                                  	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 33879                                          je	short copy_done ;
 33880                                  
 33881                                          cmp     al,CONFIG_INCLUDE ; 'J'
 33882                                          mov     al,ah           ; AL == the original line code
 33883                                          jne	short copy_line	; not an "include" line
 33884                                  
 33885                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 33886                                  ;   never try to include the block again (no infinite include loops please),
 33887                                  ;   then search for the named block and call copy_block again.
 33888                                  
 33889                                          mov     byte [es:si-1],CONFIG_REM ; '0'
 33890                                          push    di              ;
 33891                                  
 33892                                          mov     di,szMenu
 33893                                          call    comp_names_safe ; don't allow INCLUDE MENU
 33894                                          je	short copy_skip	;
 33895                                  
 33896                                          mov     di,szCommon
 33897                                          call    comp_names_safe ; don't allow INCLUDE COMMON
 33898                                          je	short copy_skip	;
 33899                                  
 33900                                          mov     di,si           ; try to find the block
 33901                                          call    srch_block      ;
 33902                                          mov     dx,di           ;
 33903                                          pop     di              ;
 33904                                          jne	short copy_error ; no such block
 33905                                          push    cx              ;
 33906                                          mov     cx,bx           ;
 33907                                          push    si              ;
 33908                                          dec     dx              ;
 33909                                          mov     si,dx           ;
 33910                                          call    skip_line       ; skip the rest of the "block name" line
 33911                                          call    copy_block      ; and copy in the rest of that block
 33912                                          pop     si              ;
 33913                                          pop     cx              ;
 33914                                          sub     al,al           ; force skip_opt_line to skip...
 33915                                          jmp     short copy_nextline
 33916                                  
 33917                                  copy_skip:
 33918                                          pop     di
 33919                                  copy_error:
 33920                                          clc                     ;
 33921                                          call    print_error     ; note that carry is clear, no pause
 33922                                          jmp     short copy_nextline
 33923                                  
 33924                                  ;   Copy the line at ES:SI to the current location at DS:DI
 33925                                  
 33926                                  copy_line:
 33927                                          mov     [di],al         ;
 33928                                          inc     di              ;
 33929                                          cmp     al,' '          ; is this is a "real" line with a "real" code?
 33930                                          jb	short copy_nextline ; no
 33931                                          cmp     byte [cs:config_multi],0
 33932                                          je	short copy_loop	; not a multi-config config.sys, don't embed #s
 33933                                          call    get_linenum	; BX == line # of line @ES:SI
 33934                                          mov     [di],bx         ; stash it immediately following the line code
 33935                                          inc     di              ;
 33936                                          inc     di              ;
 33937                                          jmp     short copy_next ;
 33938                                  copy_loop:                      ;
 33939                                          call    get_char        ;
 33940                                          jc	short copy_done ; end of file
 33941                                          mov     [di],al         ;
 33942                                          inc     di              ;
 33943                                  copy_next:
 33944                                          cmp     al,lf ; 0Ah	; done with line?
 33945                                          jne	short copy_loop	; nope
 33946                                  
 33947                                  copy_nextline:
 33948                                          call    skip_opt_line   ;
 33949                                          jmp     short copy_block
 33950                                  
 33951                                  	; 18/12/2022
 33952                                  ;copy_done:
 33953                                          ;retn
 33954                                  
 33955                                  ;----------------------------------------------------------------------------
 33956                                  ;
 33957                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 33958                                  ;
 33959                                  ;   INPUT
 33960                                  ;    ES:SI -> some line in the config.sys memory image
 33961                                  ;
 33962                                  ;   OUTPUT
 33963                                  ;       BX == line # (relative to 1)
 33964                                  ;
 33965                                  ;   OTHER REGS USED
 33966                                  ;       DX
 33967                                  ;
 33968                                  ;   NOTES
 33969                                  ;       None
 33970                                  ;
 33971                                  ;   HISTORY
 33972                                  ;       Created 16-Mar-1992 by JeffPar
 33973                                  ;
 33974                                  ;----------------------------------------------------------------------------
 33975                                  
 33976                                  get_linenum:
 33977                                          push    ax              ;
 33978                                          sub     bx,bx           ; BX == line # (to be returned)
 33979                                          push    cx              ;
 33980                                          mov     dx,si           ; DX == the offset we're looking for
 33981                                          push    si              ;
 33982                                          mov     cx,[cs:count]   ;
 33983                                          sub     si,si           ; prepare to scan entire file
 33984                                  get_linenum_loop:               ;
 33985                                          call    skip_line       ;
 33986                                          jc	short get_linenum_done
 33987                                          inc     bx              ;
 33988                                          cmp     si,dx           ; have we exceeded the desired offset yet?
 33989                                          jb	short get_linenum_loop ; no
 33990                                  get_linenum_done:               ;
 33991                                          pop     si              ;
 33992                                          pop     cx              ;
 33993                                          pop     ax              ;
 33994                                          retn
 33995                                  
 33996                                  ;----------------------------------------------------------------------------
 33997                                  ;
 33998                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 33999                                  ;
 34000                                  ;   INPUT
 34001                                  ;       ES -> config.sys image
 34002                                  ;    ES:DI -> block name to find
 34003                                  ;
 34004                                  ;   OUTPUT
 34005                                  ;       ZF flag set, if found
 34006                                  ;    ES:DI -> just past the name in the block heading, if found
 34007                                  ;       BX == # bytes remaining from that point, if found
 34008                                  ;
 34009                                  ;   OTHER REGS USED
 34010                                  ;       None
 34011                                  ;
 34012                                  ;   NOTES
 34013                                  ;       This differs from "find_block" in that it searches the ENTIRE
 34014                                  ;       config.sys image, not merely the remaining portion, and that it
 34015                                  ;       takes a pointer to block name that is *elsewhere* in the image
 34016                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 34017                                  ;
 34018                                  ;   HISTORY
 34019                                  ;       Created 16-Mar-1992 by JeffPar
 34020                                  ;
 34021                                  ;----------------------------------------------------------------------------
 34022                                  
 34023                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 34024                                          push    ax              ;
 34025                                          push    cx              ;
 34026                                          mov     cx,[cs:count]   ;
 34027                                          push    si              ;
 34028                                          sub     si,si           ;
 34029                                          push    ds              ;
 34030                                          push    es              ;
 34031                                          pop     ds              ;
 34032                                          call    find_block      ;
 34033                                          mov     di,si           ;
 34034                                          mov     bx,cx           ;
 34035                                          pop     ds              ;
 34036                                          pop     si              ;
 34037                                          pop     cx              ;
 34038                                          pop     ax              ;
 34039                                  find_exit: ; 16/04/2019
 34040                                          retn			;
 34041                                  
 34042                                  ;----------------------------------------------------------------------------
 34043                                  ;
 34044                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 34045                                  ;
 34046                                  ;   INPUT
 34047                                  ;    DS:DI -> block name to find
 34048                                  ;    ES:SI -> remainder of config.sys image
 34049                                  ;       CX == remaining size of config.sys image
 34050                                  ;
 34051                                  ;   OUTPUT
 34052                                  ;       ZF flag set, if found (also, CF set if EOF)
 34053                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 34054                                  ;       CX == # bytes remaining from that point
 34055                                  ;
 34056                                  ;   OTHER REGS USED
 34057                                  ;       AX
 34058                                  ;
 34059                                  ;   NOTES
 34060                                  ;       This differs from "srch_block" in that it searches only the
 34061                                  ;       remaining portion of the config.sys image and leaves SI and CX
 34062                                  ;       pointing to where the search left off, and that it takes a pointer
 34063                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 34064                                  ;
 34065                                  ;   HISTORY
 34066                                  ;       Created 16-Mar-1992 by JeffPar
 34067                                  ;
 34068                                  ;----------------------------------------------------------------------------
 34069                                  
 34070                                  find_block:
 34071                                          call    get_char        ; get line code
 34072                                          jc	short find_exit	; end of file
 34073                                          and     al,~CONFIG_OPTION_QUERY
 34074                                          cmp     al,CONFIG_BEGIN ; beginning of a block?
 34075                                          je	short check_line ; no
 34076                                          cmp     al,CONFIG_INCLUDE
 34077                                          jne	short next_line	;
 34078                                          or	byte [cs:config_multi],1
 34079                                          jmp     short next_line ;
 34080                                  check_line:
 34081                                          or      byte [cs:config_multi],1
 34082                                          call    comp_names      ; compare block names
 34083                                          jbe	short find_exit	; end of file, or names matched
 34084                                  next_line:
 34085                                          call    skip_opt_line   ; no, so skip to next line
 34086                                          jmp	short find_block  ;
 34087                                  ;find_exit:
 34088                                  ;	retn
 34089                                  
 34090                                  ;----------------------------------------------------------------------------
 34091                                  ;
 34092                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 34093                                  ;
 34094                                  ;   INPUT
 34095                                  ;    DS:DI -> keyword to compare
 34096                                  ;    ES:SI -> position in config.sys
 34097                                  ;       CX == remaining bytes in config.sys
 34098                                  ;
 34099                                  ;   OUTPUT
 34100                                  ;       ZF flag set, if match (also, CF set if EOF)
 34101                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 34102                                  ;       CX == # bytes remaining from that point
 34103                                  ;
 34104                                  ;   OTHER REGS USED
 34105                                  ;       AX
 34106                                  ;
 34107                                  ;   NOTES
 34108                                  ;       None
 34109                                  ;
 34110                                  ;   HISTORY
 34111                                  ;       Created 16-Mar-1992 by JeffPar
 34112                                  ;
 34113                                  ;----------------------------------------------------------------------------
 34114                                  
 34115                                  comp_names:
 34116                                          push    di              ;
 34117                                  comp_loop:                      ;
 34118                                          call    get_char        ;
 34119                                          jc	short comp_exit	;
 34120                                          call    any_delim       ; is next character a delimiter?
 34121                                          mov     ah,[di]         ; (get next character we're supposed to match)
 34122                                          je	short comp_almost ; yes, it *could* be a match
 34123                                          inc     di              ;
 34124                                          and     ax,~2020h ; 0DFDFh 
 34125                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 34126                                          cmp     al,ah           ; match?
 34127                                          je	short comp_loop ; yes, keep looking at the characters
 34128                                          clc                     ; prevent erroneous eof indication: clear carry
 34129                                  comp_exit:                      ;
 34130                                          pop     di              ;
 34131                                          retn			;
 34132                                  comp_almost:                    ;
 34133                                          xchg    al,ah           ; we don't know for sure if it's a match
 34134                                          call    any_delim       ; until we verify that the second string has
 34135                                          xchg    al,ah           ; been exhausted also...
 34136                                          jmp     comp_exit       ; if we are, this call to any_delim will tell...
 34137                                  
 34138                                  ;----------------------------------------------------------------------------
 34139                                  
 34140                                  comp_names_safe:
 34141                                          push    ax
 34142                                          push    cx
 34143                                          push	si
 34144                                          push    ds
 34145                                          push    cs
 34146                                          pop     ds
 34147                                          call    comp_names
 34148                                          pop     ds
 34149                                  	pop	si
 34150                                          pop     cx
 34151                                          pop     ax
 34152                                          retn
 34153                                  
 34154                                  ;----------------------------------------------------------------------------
 34155                                  ;
 34156                                  ;   print_item:  display menu item #BL
 34157                                  ;
 34158                                  ;   INPUT
 34159                                  ;       BL == menu item # to display
 34160                                  ;
 34161                                  ;   OUTPUT
 34162                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 34163                                  ;
 34164                                  ;   OTHER REGS USED
 34165                                  ;       None
 34166                                  ;
 34167                                  ;   NOTES
 34168                                  ;       This function saves/restores the current cursor position, so you
 34169                                  ;       needn't worry about it.
 34170                                  ;
 34171                                  ;   HISTORY
 34172                                  ;       Created 16-Mar-1992 by JeffPar
 34173                                  ;
 34174                                  ;----------------------------------------------------------------------------
 34175                                  
 34176                                  print_item:		; prints menu item #BL (1 to N)
 34177                                          push    ax              ;
 34178                                          push    bx              ;
 34179                                          push    cx              ;
 34180                                          push    dx              ;
 34181                                          push    si              ;
 34182                                          mov     ah,03h          ; get cursor position
 34183                                          mov     bh,[bMenuPage]  ; always page zero
 34184                                          int     10h             ; DH/DL = row/column
 34185                                          push    dx              ; save it
 34186                                          mov     ah,02h          ; set cursor position
 34187                                          mov     dh,bl           ;
 34188                                          add     dh,3            ;
 34189                                          mov     dl,5            ;
 34190                                          int     10h             ; set cursor position for correct row/col
 34191                                          mov     al,bl           ;
 34192                                          add     al,'0'          ; convert menu item # to ASCII digit
 34193                                          mov     ah,[bMenuColor] ; normal attribute
 34194                                          cmp     bl,[bDefBlock]  ; are we printing the current block?
 34195                                          jne	short print_other ; no
 34196                                          or      ah,70h          ; yes, set bgnd color to white
 34197                                          mov     ch,ah           ;
 34198                                          mov     cl,4            ;
 34199                                          rol     ch,cl           ;
 34200                                          cmp     ch,ah           ; are fgnd/bgnd the same?
 34201                                          jne	short print_other ; no
 34202                                          xor     ah,08h          ; yes, so modify the fgnd intensity
 34203                                  print_other:                    ;
 34204                                          mov     bh,0            ;
 34205                                          add     bx,bx           ;
 34206                                          mov     di,[aoffBlockDesc+bx]
 34207                                          mov     bl,ah           ; put the attribute in the correct register now
 34208                                          mov     bh,[bMenuPage]  ; get correct video page #
 34209                                          mov     ah,09h          ; write char/attr
 34210                                          mov     cx,1            ;
 34211                                          int     10h             ;
 34212                                          inc     dl              ; increment column
 34213                                          mov     ah,02h          ;
 34214                                          int     10h             ;
 34215                                          ;mov	ax,0900h+'.'    ;
 34216                                          mov	ax,092Eh
 34217                                  	int     10h             ; display '.'
 34218                                          inc     dl              ; increment column
 34219                                          mov     ah,02h          ;
 34220                                          int     10h             ;
 34221                                          ;mov	ax,0900h+' '    ;
 34222                                          mov	ax,0920h
 34223                                  	int     10h             ; display ' '
 34224                                          inc     dl              ; increment column
 34225                                          mov     ah,02h          ;
 34226                                          int     10h             ;
 34227                                          push    es              ;
 34228                                  print_loop:                     ;
 34229                                          mov     al,[es:di]	; get a character of the description
 34230                                          inc     di              ;
 34231                                          cmp     al,TAB ; 9	; substitute spaces for tabs
 34232                                          jne	short print_nontab ;
 34233                                          mov     al,' '          ;
 34234                                  print_nontab:                   ;
 34235                                          cmp     al,' '          ;
 34236                                          jb	short print_done ; stop at the 1st character < space
 34237                                          cmp     al,'$'          ;
 34238                                          je	short print_done ; also stop on $
 34239                                          mov     ah,09h          ; display function #
 34240                                          int     10h             ;
 34241                                          inc     dl              ; increment column
 34242                                          cmp     dl,78           ; far enough?
 34243                                          jae	short print_done ; yes
 34244                                          mov     ah,02h          ;
 34245                                          int     10h             ;
 34246                                          jmp     print_loop      ;
 34247                                  print_done:                     ;
 34248                                          pop     es              ;
 34249                                          pop     dx              ;
 34250                                          mov     ah,02h          ;
 34251                                          int     10h             ; restore previous row/col
 34252                                          pop     si              ;
 34253                                          pop     dx              ;
 34254                                          pop     cx              ;
 34255                                          pop     bx              ;
 34256                                          pop     ax              ;
 34257                                          retn			;
 34258                                  
 34259                                  ;----------------------------------------------------------------------------
 34260                                  ;
 34261                                  ;   select_item:  wait for user to select menu item, with time-out
 34262                                  ;
 34263                                  ;   INPUT
 34264                                  ;       None
 34265                                  ;
 34266                                  ;   OUTPUT
 34267                                  ;       BX == menu item # (1-N), or -1 for clean boot
 34268                                  ;       Selected menu item highlighted
 34269                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 34270                                  ;
 34271                                  ;   OTHER REGS USED
 34272                                  ;       None
 34273                                  ;
 34274                                  ;   NOTES
 34275                                  ;       None
 34276                                  ;
 34277                                  ;   HISTORY
 34278                                  ;       Created 16-Mar-1992 by JeffPar
 34279                                  ;
 34280                                  ;----------------------------------------------------------------------------
 34281                                  
 34282                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 34283                                          mov     bl,[bDefBlock]  ; BL will be the default block #
 34284                                          mov     al,bl           ;
 34285                                          call    disp_num        ;
 34286                                          call    show_status     ; display current interactive status
 34287                                          cmp     byte [secTimeOut],-1
 34288                                          je	short input_key	; no time-out, just go to input
 34289                                          mov     ah,GET_TIME ; 2Ch
 34290                                          int     21h             ;
 34291                                          mov     bh,dh           ; BH = initial # of seconds
 34292                                  check_time:
 34293                                          mov     al,[secTimeOut] ;
 34294                                          sub     al,[secElapsed] ;
 34295                                          jae	short show_time	;
 34296                                          or      byte [bQueryOpt],2  ; disable all further prompting
 34297                                          mov     byte [secElapsed],0
 34298                                          jmp	select_done	; time's up!
 34299                                  show_time:
 34300                                          push    bx              ;
 34301                                          mov     bl,al           ; save # in BL
 34302                                          mov     bh,[bMenuPage]  ;
 34303                                          mov     ah,03h          ; get cursor position
 34304                                          int     10h             ;
 34305                                          push    dx              ;
 34306                                  	add	dl,8		; move cursor to the right
 34307                                          mov     ah,02h          ; set cursor position
 34308                                          int     10h             ;
 34309                                          mov     dx,_$TimeOut
 34310                                          call    print           ; print the "Time remaining: " prompt
 34311                                          mov     al,bl           ; recover # from BL
 34312                                          cbw                     ; this works because AL is always <= 90
 34313                                          mov     cl,10           ;
 34314                                          div     cl              ; AL = tens digit, AH = ones digit
 34315                                          mov     cl,ah           ;
 34316                                          add     al,'0'          ;
 34317                                          mov     ah,0Eh          ;
 34318                                          int     10h             ; write TTY tens digit
 34319                                          mov     al,cl           ;
 34320                                          add     al,'0'          ;
 34321                                          mov     ah,0Eh          ;
 34322                                          int     10h             ; write TTY ones digit
 34323                                          pop     dx
 34324                                          mov     ah,02h          ; set cursor position back to where it was
 34325                                          int     10h             ;
 34326                                          pop     bx              ;
 34327                                  input_key:
 34328                                          mov     ah,RAW_CON_IO ; 6
 34329                                          mov     dl,0FFh         ; input request
 34330                                          int     21h             ;
 34331                                          jnz	short got_key	;
 34332                                          cmp     byte [secTimeOut],-1; is there a time-out?
 34333                                          je	short input_key	; no, just go back to input
 34334                                          mov     ah,GET_TIME     ;
 34335                                          int     21h             ; DH = seconds
 34336                                          mov     ah,dh           ;
 34337                                          sub     dh,bh           ; should generally be zero or one
 34338                                          mov     bh,ah           ;
 34339                                          jnc	short got_time	;
 34340                                          mov     dh,1            ; it wrapped back to zero, so assume one
 34341                                  got_time:
 34342                                          or      dh,dh           ; any change?
 34343                                          jz	short input_key	; no
 34344                                          add     [secElapsed],dh ;
 34345                                          jmp	short check_time ;
 34346                                  got_key:
 34347                                          push    ax              ;
 34348                                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 34349                                          xchg    [secTimeOut],ax
 34350                                          cmp     al,-1           ; was time-out already disabled?
 34351                                          je	short timeout_disabled ; yes
 34352                                          push    bx              ; let's disable # seconds display
 34353                                          mov     ax,0A20h        ; write multiple spaces
 34354                                          mov     bx,[bMenuColor]
 34355                                          mov     cx,80           ; 80 of them, to be safe
 34356                                          int     10h             ; to completely obliterate # seconds display
 34357                                          pop     bx   		;
 34358                                  
 34359                                  timeout_disabled:
 34360                                          pop     ax              ;
 34361                                          or      al,al           ; extended key pressed?
 34362                                          jnz	short normal_key ; no
 34363                                          int     21h             ; get the next part of the key then
 34364                                          jz	short input_key	; hmmm, what happened to the second part?
 34365                                  
 34366                                          cmp     al,48h          ; up arrow?
 34367                                          jne	short not_up	; no
 34368                                          cmp     bl,1            ; are we as up as up can get?
 34369                                          jbe	short input_key	; yes, ignore it
 34370                                          dec     byte [bDefBlock] ;
 34371                                          call    print_item      ; re-print the current item
 34372                                          dec     bl              ; and then print the new current item
 34373                                          jmp     short print1
 34374                                  not_up:
 34375                                          cmp     al,50h          ; down arrow?
 34376                                          jne	short not_down	; no
 34377                                          cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 34378                                          jae	short to_input_key ; yes, ignore it
 34379                                          inc     byte [bDefBlock] ;
 34380                                          call    print_item      ; re-print the current item
 34381                                          inc     bx              ; and then print the new current item
 34382                                  print1: 
 34383                                  	mov     al,bl           ;
 34384                                  print2: 
 34385                                  	call    print_item      ;
 34386                                          call    disp_num        ;
 34387                                  to_input_key:
 34388                                          jmp     input_key       ;
 34389                                  not_down:
 34390                                          test    byte [bDisableUI],1
 34391                                          jnz	short to_input_key ; don't allow F8 or F5
 34392                                          cmp     al,42h          ; F8 function key?
 34393                                          jne	short not_f8	; no
 34394                                          xor     byte [bQueryOpt],1
 34395                                          call    show_status     ;
 34396                                          jmp     input_key	;
 34397                                  not_f8:
 34398                                          cmp     al,3Fh          ; F5 function key?
 34399                                          jne	short to_input_key ; no
 34400                                          mov     bx,-1           ; special return code (-1) indicating clean boot
 34401                                          mov     al,' '          ; don't want to display anything really;
 34402                                          jmp     short disp_input; just want to display the cr/lf sequence...
 34403                                  
 34404                                  normal_key:
 34405                                          cmp     al,0Dh          ; Enter?
 34406                                          je	short select_done ; yes
 34407                                          cmp     al,08h          ; backspace?
 34408                                          jne	short not_backspace ; no
 34409                                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 34410                                          retn			;
 34411                                  not_backspace:
 34412                                          sub     al,'0'          ; is greater than '0'?
 34413                                          jbe	short to_input_key ; no
 34414                                          cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 34415                                          ja	short to_input_key ; no
 34416                                          mov	[bDefBlock],al  ;
 34417                                          call    print_item      ; redisplay the current selection
 34418                                          mov     bl,al           ; set new selection
 34419                                          jmp	short print2
 34420                                  
 34421                                  select_done:
 34422                                          mov     bh,0            ; return a full 16-bit value (for indexing)
 34423                                          mov     al,bl           ;
 34424                                          add     al,'0'          ; convert it into a digit, then display it
 34425                                  
 34426                                  	; fall into disp_input
 34427                                  
 34428                                  ; 16/04/2019 - Retro DOS v4.0
 34429                                  
 34430                                  ;----------------------------------------------------------------------------
 34431                                  ;
 34432                                  ;   disp_input:  display a single character + cr/lf
 34433                                  ;
 34434                                  ;   INPUT
 34435                                  ;       AL == character to display
 34436                                  ;
 34437                                  ;   OUTPUT
 34438                                  ;       None
 34439                                  ;
 34440                                  ;   OTHER REGS USED
 34441                                  ;       None
 34442                                  ;
 34443                                  ;   NOTES
 34444                                  ;       This function is used not only for the menu input selection but
 34445                                  ;       also for the interactive line prompting (the y/n/a thing).
 34446                                  ;
 34447                                  ;   HISTORY
 34448                                  ;       Created 16-Mar-1992 by JeffPar
 34449                                  ;
 34450                                  ;----------------------------------------------------------------------------
 34451                                  
 34452                                  disp_input:
 34453                                          push    ax
 34454                                          cmp     al,' '
 34455                                          jae	short disp_ok
 34456                                          mov     al,' '
 34457                                  disp_ok:
 34458                                          mov     dl,al
 34459                                          mov     ah,STD_CON_OUTPUT ; 2
 34460                                          int     21h
 34461                                          mov     dx,crlfm
 34462                                          call    print
 34463                                          pop     ax
 34464                                          retn
 34465                                  
 34466                                  ;----------------------------------------------------------------------------
 34467                                  
 34468                                  disp_num:
 34469                                          push    bx
 34470                                          add     al,'0'
 34471                                          mov     ah,0Ah
 34472                                          mov     bx,[bMenuColor]
 34473                                          mov     cx,1
 34474                                          int     10h
 34475                                          pop     bx
 34476                                          retn
 34477                                  
 34478                                  ;----------------------------------------------------------------------------
 34479                                  ;
 34480                                  ;   show_status:  display current interactive mode setting (on/off/none)
 34481                                  ;
 34482                                  ;   INPUT
 34483                                  ;       None
 34484                                  ;
 34485                                  ;   OUTPUT
 34486                                  ;       None
 34487                                  ;
 34488                                  ;   OTHER REGS USED
 34489                                  ;       None
 34490                                  ;
 34491                                  ;   NOTES
 34492                                  ;       None
 34493                                  ;
 34494                                  ;   HISTORY
 34495                                  ;       Created 16-Mar-1992 by JeffPar
 34496                                  ;
 34497                                  ;----------------------------------------------------------------------------
 34498                                  
 34499                                  show_status:
 34500                                          push    bx              ; BL = video page #
 34501                                          mov     bx,[bMenuColor]
 34502                                          mov     ah,03h          ; get cursor position
 34503                                          int     10h             ;
 34504                                          push    dx              ; save it
 34505                                          mov     ah,02h          ; set cursor position
 34506                                          mov     dx,[bLastCol]   ; set correct row/col
 34507                                          test    byte [bDisableUI],1
 34508                                          jz	short show_onoff ; just show on/off
 34509                                          mov     dl,0            ;
 34510                                          int     10h             ;
 34511                                          mov     ax,0A20h        ; write multiple spaces
 34512                                          mov     cx,80           ; 80 of them, to be exact
 34513                                          int     10h             ; to obliterate the status line
 34514                                          jmp     short show_done ;
 34515                                  show_onoff: 
 34516                                          int     10h
 34517                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 34518                                  		; AL = character, BH = display page - alpha mode
 34519                                  		; BL = color of character (graphics mode, PCjr only)
 34520                                  		; CX = number of times to write character
 34521                                  
 34522                                          mov     al,[_$NO]	; assume OFF
 34523                                          cmp     byte [bQueryOpt],1 ; is interactive mode on?
 34524                                          jne	short show_noton ; no
 34525                                          mov     al,[_$YES]	; yes
 34526                                  show_noton:                     ;
 34527                                          mov     ah,0Eh          ; write TTY
 34528                                          int     10h             ;
 34529                                  show_done:                      ;
 34530                                          pop     dx              ;
 34531                                          mov     ah,02h          ;
 34532                                          int     10h             ; restore original cursor position
 34533                                          pop     bx              ;
 34534                                          retn			;
 34535                                  
 34536                                  ; 16/04/2019 - Retro DOS v4.0
 34537                                  
 34538                                  ;----------------------------------------------------------------------------
 34539                                  ;
 34540                                  ;   skip_token: advances ES:SI/CX past the current token
 34541                                  ;
 34542                                  ;   INPUT
 34543                                  ;    ES:SI -> position in config.sys
 34544                                  ;       CX == remaining bytes in config.sys
 34545                                  ;
 34546                                  ;   OUTPUT
 34547                                  ;       CF set if EOL/EOF hit
 34548                                  ;       AL == 1st char of delimiter
 34549                                  ;    ES:SI -> just past the delimiter
 34550                                  ;       CX == # bytes remaining from that point
 34551                                  ;
 34552                                  ;   OTHER REGS USED
 34553                                  ;       AX
 34554                                  ;
 34555                                  ;   NOTES
 34556                                  ;       None
 34557                                  ;
 34558                                  ;   HISTORY
 34559                                  ;       Created 16-Mar-1992 by JeffPar
 34560                                  ;
 34561                                  ;----------------------------------------------------------------------------
 34562                                  
 34563                                  skip_token:
 34564                                          call    get_char
 34565                                          jc	short skip_token_done
 34566                                          call    any_delim
 34567                                          jne	short skip_token
 34568                                  skip_check_eol:
 34569                                          cmp     al,cr ; 0Dh
 34570                                          je	short skip_token_eol
 34571                                          cmp     al,lf ; 0Ah
 34572                                          je	short skip_token_eol
 34573                                          clc
 34574                                          ;jmp	short skip_token_done
 34575                                  	retn
 34576                                  skip_token_eol:
 34577                                          stc
 34578                                  skip_token_done:
 34579                                          retn
 34580                                  
 34581                                  ;----------------------------------------------------------------------------
 34582                                  ;
 34583                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 34584                                  ;
 34585                                  ;   INPUT
 34586                                  ;    ES:SI -> position in config.sys
 34587                                  ;       CX == remaining bytes in config.sys
 34588                                  ;
 34589                                  ;   OUTPUT
 34590                                  ;       CF set if EOF hit
 34591                                  ;       AL == 1st char of token
 34592                                  ;    ES:SI -> just past the token
 34593                                  ;       CX == # bytes remaining from that point
 34594                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 34595                                  ;
 34596                                  ;   OTHER REGS USED
 34597                                  ;       AX
 34598                                  ;
 34599                                  ;   NOTES
 34600                                  ;       None
 34601                                  ;
 34602                                  ;   HISTORY
 34603                                  ;       Created 16-Mar-1992 by JeffPar
 34604                                  ;
 34605                                  ;----------------------------------------------------------------------------
 34606                                  
 34607                                  skip_delim:       ; returns carry set if eol/eof
 34608                                          call    get_char        ;
 34609                                          lea     bx,[si-1]       ; also returns BX -> next token
 34610                                          jc	short skip_token_done ;
 34611                                          call    delim           ;
 34612                                          je	short skip_delim ;
 34613                                          jmp	short skip_check_eol  ; 13/05/2019
 34614                                  
 34615                                  ;----------------------------------------------------------------------------
 34616                                  ;
 34617                                  ;   skip_opt_line: same as skip_line provided AL != LF
 34618                                  ;
 34619                                  ;   INPUT
 34620                                  ;       AL == last character read
 34621                                  ;    ES:SI -> position in config.sys
 34622                                  ;       CX == remaining bytes in config.sys
 34623                                  ;
 34624                                  ;   OUTPUT
 34625                                  ;       CF set if EOF hit
 34626                                  ;       AL == 1st char of new line
 34627                                  ;    ES:SI -> just past 1st char of new line
 34628                                  ;       CX == # bytes remaining from that point
 34629                                  ;
 34630                                  ;   OTHER REGS USED
 34631                                  ;       AX
 34632                                  ;
 34633                                  ;   NOTES
 34634                                  ;       In other words, the purpose here is to skip to the next line,
 34635                                  ;       unless ES:SI is already sitting at the front of the next line (which
 34636                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 34637                                  ;
 34638                                  ;   HISTORY
 34639                                  ;       Created 16-Mar-1992 by JeffPar
 34640                                  ;
 34641                                  ;----------------------------------------------------------------------------
 34642                                  
 34643                                  skip_opt_line:
 34644                                          cmp     al,lf ; 0Ah
 34645                                          je	short skip_line_done
 34646                                       
 34647                                  	; fall into skip_line
 34648                                  
 34649                                  ;----------------------------------------------------------------------------
 34650                                  ;
 34651                                  ;   skip_line: skip to the next line
 34652                                  ;
 34653                                  ;   INPUT
 34654                                  ;    ES:SI -> position in config.sys
 34655                                  ;       CX == remaining bytes in config.sys
 34656                                  ;
 34657                                  ;   OUTPUT
 34658                                  ;       CF set if EOF hit
 34659                                  ;    ES:SI -> just past 1st char of new line
 34660                                  ;       CX == # bytes remaining from that point
 34661                                  ;
 34662                                  ;   OTHER REGS USED
 34663                                  ;       AX
 34664                                  ;
 34665                                  ;   NOTES
 34666                                  ;       None
 34667                                  ;
 34668                                  ;   HISTORY
 34669                                  ;       Created 16-Mar-1992 by JeffPar
 34670                                  ;
 34671                                  ;----------------------------------------------------------------------------
 34672                                  
 34673                                  skip_line:
 34674                                          call    get_char
 34675                                          jc	short skip_line_done
 34676                                          cmp     al,lf ; 0Ah
 34677                                          jne	short skip_line
 34678                                  skip_line_done:
 34679                                  num_done:	; 18/12/2022
 34680                                          retn
 34681                                  
 34682                                  ;----------------------------------------------------------------------------
 34683                                  ;
 34684                                  ;   get_number: return binary equivalent of numeric string
 34685                                  ;
 34686                                  ;   INPUT
 34687                                  ;    ES:SI -> position in config.sys
 34688                                  ;       CX == remaining bytes in config.sys
 34689                                  ;
 34690                                  ;   OUTPUT
 34691                                  ;       AL == non-digit encountered
 34692                                  ;       BX == binary #
 34693                                  ;    ES:SI -> just past 1st non-digit
 34694                                  ;       CX == # bytes remaining from that point
 34695                                  ;
 34696                                  ;   OTHER REGS USED
 34697                                  ;       AX
 34698                                  ;
 34699                                  ;   NOTES
 34700                                  ;       None
 34701                                  ;
 34702                                  ;   HISTORY
 34703                                  ;       Created 16-Mar-1992 by JeffPar
 34704                                  ;
 34705                                  ;----------------------------------------------------------------------------
 34706                                  
 34707                                  ; 13/05/2019
 34708                                  
 34709                                  get_number:
 34710                                          sub     bx,bx           ; BX = result
 34711                                  num_loop:
 34712                                          call    get_char        ;
 34713                                          jc	short num_done	;
 34714                                          cmp     al,'0'          ; convert to value
 34715                                          jb	short num_done	; no more number
 34716                                          cmp     al,'9'          ;
 34717                                          ja	short num_done	;
 34718                                          push    ax              ;
 34719                                          mov     ax,10           ;
 34720                                          push    dx              ;
 34721                                          mul     bx              ;
 34722                                          pop     dx              ;
 34723                                          mov     bx,ax           ;
 34724                                          pop     ax              ;
 34725                                          sub     al,'0'          ;
 34726                                          cbw                     ;
 34727                                          add     bx,ax           ;
 34728                                          jmp	short num_loop	;
 34729                                  
 34730                                  	; 18/12/2022
 34731                                  ;num_done:
 34732                                          ;retn
 34733                                  
 34734                                  ;----------------------------------------------------------------------------
 34735                                  ;
 34736                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 34737                                  ;
 34738                                  ;   INPUT
 34739                                  ;    ES:SI -> position in config.sys
 34740                                  ;       CX == remaining bytes in config.sys
 34741                                  ;
 34742                                  ;   OUTPUT
 34743                                  ;       AL == next character
 34744                                  ;    ES:SI -> just past next character
 34745                                  ;       CX == # bytes remaining from that point
 34746                                  ;
 34747                                  ;   OTHER REGS USED
 34748                                  ;       AX
 34749                                  ;
 34750                                  ;   NOTES
 34751                                  ;       None
 34752                                  ;
 34753                                  ;   HISTORY
 34754                                  ;       Created 16-Mar-1992 by JeffPar
 34755                                  ;
 34756                                  ;----------------------------------------------------------------------------
 34757                                  
 34758                                  get_char:
 34759                                          sub     cx,1            ; use SUB to set carry,zero
 34760                                          jb	short get_fail	; out of data
 34761                                          ;lods	byte ptr es:[si] ;
 34762                                  	es	
 34763                                  	lodsb
 34764                                          mov     ah,al           ;
 34765                                          retn			;
 34766                                  get_fail:                       ; restore CX to zero
 34767                                          mov     cx,0            ; leave carry set, zero not set
 34768                                  nearby_ret:
 34769                                          retn
 34770                                  
 34771                                  ;----------------------------------------------------------------------------
 34772                                  ;
 34773                                  ;   query_user: ask user whether to execute current config.sys command
 34774                                  ;
 34775                                  ;   INPUT
 34776                                  ;       AL == current command code
 34777                                  ;    ES:SI -> current command line in config.sys
 34778                                  ;    config_cmd == current command code, but with QUERY bit intact
 34779                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 34780                                  ;
 34781                                  ;   OUTPUT
 34782                                  ;       CF set if command should be ignored (it is also REM'ed out)
 34783                                  ;
 34784                                  ;   OTHER REGS USED
 34785                                  ;       BX, CX, DX, DI
 34786                                  ;
 34787                                  ;   NOTES
 34788                                  ;       None
 34789                                  ;
 34790                                  ;   HISTORY
 34791                                  ;       Created 16-Mar-1992 by JeffPar
 34792                                  ;
 34793                                  ;----------------------------------------------------------------------------
 34794                                  
 34795                                  	; 12/12/2022
 34796                                  query_user:
 34797                                          test    byte [bQueryOpt],4	; answer no to everything?
 34798                                          ;jz	short qu_1		;
 34799                                          ; 12/12/2022
 34800                                  	;jmp	short skip_all		;
 34801                                  	jnz	short skip_all
 34802                                  qu_1:
 34803                                  	test    byte [bQueryOpt],2	; answer yes to everything?
 34804                                          jnz	short nearby_ret	; yes (and return carry clear!)
 34805                                          push    ax                      ;
 34806                                          mov     al,[config_cmd]         ;
 34807                                          test    byte [bQueryOpt],1	; query every command?
 34808                                          jnz	short query_all		; yes
 34809                                          test    al,CONFIG_OPTION_QUERY  ;
 34810                                          ;jnz	short query_all		;
 34811                                          ; 12/12/2022
 34812                                  	;jmp	short do_cmd		;
 34813                                  	jz	short do_cmd ; cf=0
 34814                                  query_all:
 34815                                  
 34816                                  ;   Search for the command code (AL) in "comtab", and then print
 34817                                  ;   out the corresponding keyword, followed by the rest of the actual
 34818                                  ;   line pointed to by ES:SI
 34819                                  
 34820                                          push    si                      ; save pointer to rest of CONFIG.SYS line
 34821                                          mov     dx,_$AutoPrmpt    	;
 34822                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34823                                          jz	short generic_prompt	; config_cmd must have been 0
 34824                                  
 34825                                          mov     dh,al                   ; save config_cmd in DH
 34826                                          sub     bx,bx                   ;
 34827                                          mov     di,comtab		;
 34828                                  find_match:                             ;
 34829                                          mov     bl,[di]                 ; get size of current keyword
 34830                                          or      bl,bl                   ;
 34831                                          jz	short line_print	; end of table
 34832                                          inc     di                      ;
 34833                                          cmp     al,[di+bx]              ; match?
 34834                                          je	short cmd_match		; yes
 34835                                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 34836                                  	; 13/05/2019	
 34837                                          jmp	short find_match	; loop
 34838                                  cmd_match:                              ;
 34839                                          mov     cl,[di-1]               ;
 34840                                          mov     ch,0                    ;
 34841                                          mov     ah,STD_CON_OUTPUT ; 2
 34842                                  cmd_print:                              ;
 34843                                          mov     al,[di]                 ;
 34844                                          inc     di                      ;
 34845                                          mov     dl,al                   ;
 34846                                          int     21h                     ;
 34847                                          loop    cmd_print               ;
 34848                                          mov     dl,'='                  ;
 34849                                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 34850                                          jne	short cmd_notset	;
 34851                                          mov     dl,' '                  ;
 34852                                  cmd_notset:
 34853                                          int     21h                     ; '=' looks funny on SET commands
 34854                                  line_print:                             ;
 34855                                  	;lods	byte ptr es:[si]        ;
 34856                                          es
 34857                                  	lodsb
 34858                                  	or      al,al                   ;
 34859                                          jnz	short non_null		;
 34860                                          mov     al,' '                  ;
 34861                                  non_null:                               ;
 34862                                          cmp     al,' '                  ; control code?
 34863                                          jb	short prompt_user	; yes, assume end of line
 34864                                          jne	short non_space		;
 34865                                          cmp     byte [es:si],' '	;
 34866                                          jb	short prompt_user	;
 34867                                  non_space:                              ;
 34868                                          mov     dl,al                   ;
 34869                                          mov     ah,STD_CON_OUTPUT ; 2	;
 34870                                          int     21h                     ;
 34871                                          jmp	short line_print	;
 34872                                  prompt_user:                            ;
 34873                                          mov     dx,_$InterPrmpt		;
 34874                                  
 34875                                  generic_prompt:
 34876                                          call    print                   ;
 34877                                  input_loop:                             ;
 34878                                          mov     ah,0                    ; read a key
 34879                                          int     16h                     ;
 34880                                          or      al,al                   ; is it a function key?
 34881                                          jnz	short not_func		; no
 34882                                          cmp     ah,3Fh                  ; F5 function key?
 34883                                          jne	short input_loop	; no
 34884                                          mov     al,[_$NO]                  ;
 34885                                          or      byte [bQueryOpt],4	; no more queries
 34886                                          jmp     short legal_char        ;
 34887                                  not_func:
 34888                                          and     al,~20h ; 0DFh		; converting to upper case
 34889                                          cmp     al,[_$NO]		; verify character is legal
 34890                                          je	short legal_char	;
 34891                                          cmp     al,[_$YES]		;
 34892                                          je	short legal_char	;
 34893                                          cmp     byte [config_cmd],0	;
 34894                                          je	short input_loop	; don't allow Esc on this query
 34895                                          cmp     al,1Bh                  ; Esc?
 34896                                          jne	short input_loop	;
 34897                                          or      byte [bQueryOpt],2	; no more interactive boot prompts
 34898                                          mov     al,[_$YES]
 34899                                  legal_char:                             ;
 34900                                          call    disp_input              ;
 34901                                          pop     si                      ; restore pointer to rest of CONFIG.SYS line
 34902                                  
 34903                                          cmp     al,[_$NO]		; process line?
 34904                                          je	short skip_cmd		; no
 34905                                  	; 12/12/2022
 34906                                  	clc
 34907                                  do_cmd:
 34908                                  	pop     ax			;
 34909                                  	; 12/12/2022
 34910                                  	; cf=0
 34911                                  	;clc				; just do the command
 34912                                  	retn
 34913                                  
 34914                                  skip_cmd:
 34915                                  	pop     ax			;
 34916                                  skip_all:
 34917                                  	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 34918                                  	stc
 34919                                  	retn
 34920                                  
 34921                                  ;----------------------------------------------------------------------------
 34922                                  ;
 34923                                  ;   print_error: displays multi-config error conditions
 34924                                  ;
 34925                                  ;   INPUT
 34926                                  ;    Carry set to pause, clear to not
 34927                                  ;    ES:SI -> current command line in config.sys
 34928                                  ;
 34929                                  ;   OUTPUT
 34930                                  ;       None
 34931                                  ;
 34932                                  ;   OTHER REGS USED
 34933                                  ;       None
 34934                                  ;
 34935                                  ;   NOTES
 34936                                  ;       None
 34937                                  ;
 34938                                  ;   HISTORY
 34939                                  ;       Created 16-Mar-1992 by JeffPar
 34940                                  ;
 34941                                  ;----------------------------------------------------------------------------
 34942                                  
 34943                                  print_error:
 34944                                          push    ax
 34945                                          push    bx
 34946                                          push    cx
 34947                                          push    dx
 34948                                          push    ds
 34949                                          push    cs
 34950                                          pop     ds
 34951                                          pushf
 34952                                          call    get_linenum
 34953                                          mov     [linecount],bx
 34954                                          call    error_line
 34955                                          popf
 34956                                          jnc	short pe_ret
 34957                                          mov     dx,_$PauseMsg
 34958                                          call    print
 34959                                          mov     ax,0C07h		; flush input buffer, then wait for key
 34960                                          int     21h			; wait for a key
 34961                                          or      al,al			; extended key?
 34962                                          jnz	short pe_1		; no
 34963                                          mov     ah,07h			; yes
 34964                                          int     21h			; eat it too
 34965                                  pe_1:     
 34966                                  	mov     dx,crlfm
 34967                                          call    print
 34968                                  pe_ret: 
 34969                                  	pop     ds
 34970                                          pop     dx
 34971                                          pop     cx
 34972                                          pop     bx
 34973                                          pop     ax
 34974                                  	retn
 34975                                  
 34976                                  ;----------------------------------------------------------------------------
 34977                                  
 34978                                  ;   This function is very simple:  it merely prepends a "/D" to the
 34979                                  ;   command-line for the shell;  this (undocumented) switch disables
 34980                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 34981                                  ;   displayed when there's no AUTOEXEC.BAT.
 34982                                  
 34983                                  disable_autoexec:
 34984                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 34985                                  	; 17/04/2019 - Retro DOS v4.0
 34986                                  
 34987                                  	test	byte [bQueryOpt],4
 34988                                  	jz	short disable_exit
 34989                                  	test	byte [dae_flag],1
 34990                                  	jnz	short disable_exit
 34991                                  	or	byte [dae_flag],1
 34992                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 34993                                  	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 34994                                  	mov     dx,'D ' ; 2044h
 34995                                  dae_1:
 34996                                          ;mov	al,[def_swchr]
 34997                                  	mov     al,[command_line-1]     ; get default switchchar
 34998                                          or      al,al                   ; anything there?
 34999                                          jz	short disable_exit	; no, disable_autoexec already called
 35000                                          mov     bl,[command_line]       ;
 35001                                          mov     bh,0                    ; BX == command-line length
 35002                                          mov     cx,bx                   ;
 35003                                          add     bl,3                    ;
 35004                                          cmp     bl,126                  ;
 35005                                          ja	short disable_exit	;
 35006                                          mov     [command_line],bl       ; update length
 35007                                          add     bx,command_line+1	; make sure we move the NULL too
 35008                                          inc     cx                      ; (just for consistency sake)
 35009                                  disable_loop:                           ;
 35010                                          mov     ah,[bx-3]               ;
 35011                                          mov     [bx],ah                 ;
 35012                                          dec     bx                      ;
 35013                                          loop    disable_loop            ;
 35014                                          mov     [bx-2],al               ;
 35015                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 35016                                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 35017                                          ;mov	byte [command_line-1],0 ;
 35018                                  disable_exit:                           ;
 35019                                          retn
 35020                                  
 35021                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 35022                                  	cmp     byte [bQueryOpt],1
 35023                                  	jnz     short disable_exit
 35024                                  	test	byte [dae_flag],2
 35025                                  	jnz     short disable_exit
 35026                                  	or      byte [dae_flag],2
 35027                                  	mov     dx,' Y'
 35028                                  	jmp     short dae_1
 35029                                  
 35030                                  ;endif  ;MULTI_CONFIG
 35031                                  
 35032                                  %endif	; 02/11/2022
 35033                                  
 35034                                  
 35035                                  ; 19/04/2019 - Retro DOS v4.0
 35036                                  
 35037                                  ;----------------------------------------------------------------------------
 35038                                  ;
 35039                                  ; procedure : delim
 35040                                  ;
 35041                                  ;----------------------------------------------------------------------------
 35042                                  
 35043                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35044                                  ;
 35045                                  ;;ifdef	MULTI_CONFIG
 35046                                  ;
 35047                                  ;any_delim:
 35048                                  ;       cmp     al,cr
 35049                                  ;       je	short delim_ret
 35050                                  ;       cmp     al,lf
 35051                                  ;       je	short delim_ret
 35052                                  ;       cmp     al,'['
 35053                                  ;       je	short delim_ret
 35054                                  ;       cmp     al,']'
 35055                                  ;       je	short delim_ret
 35056                                  ;
 35057                                  ;;endif  ;MULTI_CONFIG
 35058                                  
 35059                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35060                                  	; (SYSINIT:3450h)	
 35061                                  delim:
 35062 00003086 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 35063 00003088 7416                    	je	short delim_ret
 35064                                  
 35065 0000308A 3C00                    	cmp	al,0		; special case for sysinit!!!
 35066 0000308C 7412                    	je	short delim_ret
 35067                                  
 35068                                  org_delim:			; used by organize routine except for getting
 35069 0000308E 3C20                    	cmp	al,' '          ; the filename.
 35070 00003090 740E                    	je	short delim_ret
 35071 00003092 3C09                            cmp     al,tab ; 9
 35072 00003094 740A                    	je	short delim_ret
 35073 00003096 3C3D                    	cmp	al,'='
 35074 00003098 7406                    	je	short delim_ret
 35075 0000309A 3C2C                    	cmp	al,','
 35076 0000309C 7402                    	je	short delim_ret
 35077 0000309E 3C3B                    	cmp	al,';'
 35078                                  
 35079                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35080                                  ;;ifdef	MULTI_CONFIG
 35081                                  ;;   Make sure there's no chance of a false EOF indication
 35082                                  ;	clc
 35083                                  ;;endif
 35084                                  
 35085                                  	; 02/11/2022
 35086                                  delim_ret:
 35087 000030A0 C3                      	retn
 35088                                  
 35089                                  ;----------------------------------------------------------------------------
 35090                                  ;
 35091                                  ; procedure : newline
 35092                                  ;
 35093                                  ;  newline returns with first character of next line
 35094                                  ;
 35095                                  ;----------------------------------------------------------------------------
 35096                                  
 35097                                  newline:
 35098 000030A1 E897F6                  	call	getchr			;skip non-control characters
 35099 000030A4 7207                    	jc	short nl_ret
 35100 000030A6 3C0A                    	cmp	al,lf			;look for line feed
 35101 000030A8 75F7                    	jne	short newline
 35102 000030AA E88EF6                  	call	getchr
 35103                                  nl_ret:
 35104 000030AD C3                      	retn
 35105                                  
 35106                                  ;----------------------------------------------------------------------------
 35107                                  ; 
 35108                                  ; procedure : mapcase
 35109                                  ;
 35110                                  ;----------------------------------------------------------------------------
 35111                                  
 35112                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 35113                                  mapcase:
 35114 000030AE 51                      	push	cx
 35115 000030AF 56                      	push	si
 35116 000030B0 1E                      	push	ds
 35117                                  
 35118 000030B1 06                      	push	es
 35119 000030B2 1F                      	pop	ds
 35120                                  
 35121                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35122                                  ;;ifdef	MULTI_CONFIG
 35123                                  ;
 35124                                  ;	mov	bl,al                   ; same cmd code this line
 35125                                  ;;else
 35126                                  ;;	xor	si,si
 35127                                  ;;endif
 35128                                  	; 02/11/2022
 35129 000030B3 31F6                    	xor	si, si
 35130                                  
 35131                                  convloop:
 35132 000030B5 AC                      	lodsb
 35133 000030B6 3C61                    	cmp	al,'a'
 35134 000030B8 7209                    	jb	short noconv
 35135 000030BA 3C7A                    	cmp	al,'z'
 35136 000030BC 7705                    	ja	short noconv
 35137 000030BE 2C20                    	sub	al,20h
 35138 000030C0 8844FF                  	mov	[si-1],al
 35139                                  noconv:
 35140                                  
 35141                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35142                                  ;;ifdef	MULTI_CONFIG
 35143                                  ;;
 35144                                  ;;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 35145                                  ;;   upper-case a line at a time, after we've been able to figure out whether
 35146                                  ;;   the line is a SET command or not (since we don't want to upper-case
 35147                                  ;;   anything after the "=" in a SET)
 35148                                  ;;
 35149                                  ;       cmp     bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 35150                                  ;       jne	short check_eol		; no, just check for end-of-line
 35151                                  ;       cmp     al,'='                  ; separator between SET var and value?
 35152                                  ;       je	short convdone		; yes
 35153                                  ;check_eol:
 35154                                  ;       cmp     al,cr
 35155                                  ;       je	short convdone
 35156                                  ;       cmp     al,lf
 35157                                  ;       je	short convdone
 35158                                  ;;endif
 35159                                  	
 35160                                  	; 02/11/2022
 35161 000030C3 E2F0                    	loop	convloop
 35162                                  convdone:
 35163 000030C5 1F                      	pop	ds
 35164 000030C6 5E                      	pop	si
 35165 000030C7 59                      	pop	cx
 35166 000030C8 C3                      	retn
 35167                                  
 35168                                  ;----------------------------------------------------------------------------
 35169                                  ;
 35170                                  ; procedure : round
 35171                                  ;
 35172                                  ; round the values in memlo and memhi to paragraph boundary.
 35173                                  ; perform bounds check.
 35174                                  ;
 35175                                  ;----------------------------------------------------------------------------
 35176                                  
 35177                                  round:
 35178 000030C9 50                      	push	ax
 35179 000030CA 2EA1[DE03]              	mov	ax,[cs:memlo]
 35180                                  
 35181 000030CE E8F0DF                  	call	ParaRound		; para round up
 35182                                  
 35183 000030D1 2E0106[E003]            	add	[cs:memhi],ax
 35184 000030D6 2EC706[DE03]0000        	mov	word [cs:memlo],0
 35185 000030DD 2EA1[E003]              	mov	ax,[cs:memhi]		; ax = new memhi
 35186 000030E1 2E3B06[A302]            	cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 35187 000030E6 7322                    	jae	short mem_err
 35188 000030E8 2EF606[3614]02          	test	byte [cs:setdevmarkflag],for_devmark ; 2
 35189 000030EE 7418                    	jz	short skip_set_devmarksize
 35190 000030F0 06                      	push	es
 35191 000030F1 56                      	push	si
 35192 000030F2 2E8B36[3414]            	mov	si,[cs:devmark_addr]
 35193 000030F7 8EC6                    	mov	es,si
 35194 000030F9 29F0                    	sub	ax,si
 35195 000030FB 48                      	dec	ax
 35196                                  	;mov	[es:3],ax
 35197 000030FC 26A30300                	mov	[es:devmark.size],ax	; paragraph
 35198 00003100 2E8026[3614]FD          	and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 35199 00003106 5E                      	pop	si
 35200 00003107 07                      	pop	es
 35201                                  skip_set_devmarksize:
 35202 00003108 58                      	pop	ax
 35203                                  	; 11/12/2022
 35204                                  	; cf = 0
 35205                                  	; 02/11/2022
 35206                                  	;clc	; ? (not needed here)	; clear carry
 35207 00003109 C3                      	retn
 35208                                  
 35209                                  ;----------------------------------------------------------------------------
 35210                                  
 35211                                  mem_err:
 35212                                  	; 11/12/2022
 35213 0000310A 0E                      	push	cs
 35214 0000310B 1F                      	pop	ds
 35215                                  mem_err2:
 35216 0000310C BA[3338]                	mov	dx,badmem
 35217                                  	;push	cs
 35218                                  	;pop	ds
 35219 0000310F E87602                  	call	print
 35220 00003112 E93FD7                  	jmp	stall
 35221                                  
 35222                                  ;----------------------------------------------------------------------------
 35223                                  ;
 35224                                  ; procedure : calldev
 35225                                  ;
 35226                                  ;----------------------------------------------------------------------------
 35227                                  
 35228                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35229                                  	; (SYSINIT:34E0h)
 35230                                  calldev:
 35231 00003115 2E8E1E[F21E]            	mov	ds,[cs:DevEntry+2]
 35232 0000311A 2E031E[F01E]            	add	bx,[cs:DevEntry]	; do a little relocation
 35233 0000311F 8B07                    	mov	ax,[bx]
 35234                                  
 35235 00003121 2EFF36[F01E]            	push	word [cs:DevEntry]
 35236 00003126 2EA3[F01E]              	mov	word [cs:DevEntry],ax
 35237 0000312A BB[E603]                	mov	bx,packet
 35238 0000312D 2EFF1E[F01E]            	call	far [cs:DevEntry]
 35239 00003132 2E8F06[F01E]            	pop	word [cs:DevEntry]
 35240 00003137 C3                      	retn
 35241                                  
 35242                                  ;----------------------------------------------------------------------------
 35243                                  ;
 35244                                  ; procedure : todigit
 35245                                  ;
 35246                                  ;----------------------------------------------------------------------------
 35247                                  
 35248                                  todigit:
 35249 00003138 2C30                    	sub	al,'0'
 35250                                  	;jb	short notdig  ; 02/11/2022
 35251                                  	; 12/12/2022
 35252 0000313A 7203                    	jb	short notdig2
 35253                                  	;cmp	al,9
 35254                                  	;ja	short notdig
 35255                                  	;clc
 35256                                  	;retn
 35257                                  	; 12/12/2022
 35258 0000313C 3C0A                    	cmp	al,10
 35259 0000313E F5                      	cmc
 35260                                  notdig:
 35261                                  	;stc
 35262                                  notdig2:
 35263 0000313F C3                      	retn
 35264                                  
 35265                                  ;----------------------------------------------------------------------------
 35266                                  ;
 35267                                  ; procedure : getnum
 35268                                  ;
 35269                                  ; getnum parses a decimal number.
 35270                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 35271                                  ; error), if number is bad carry is set, zero is set, ax=0.
 35272                                  ;
 35273                                  ;----------------------------------------------------------------------------
 35274                                  
 35275                                  getnum:
 35276 00003140 53                      	push	bx
 35277 00003141 31DB                    	xor	bx,bx			; running count is zero
 35278                                  b2:
 35279 00003143 E8F2FF                  	call	todigit 		; do we have a digit ?
 35280 00003146 7247                    	jc	short badnum		; no, bomb
 35281                                  
 35282 00003148 93                      	xchg	ax,bx			; put total in ax
 35283 00003149 53                      	push	bx			; save digit (0 to 9)
 35284                                  	;mov	bx,10			; base of arithmetic
 35285                                  	; 12/12/2022
 35286 0000314A B30A                    	mov	bl,10
 35287 0000314C F7E3                    	mul	bx			; shift by one decimal digit
 35288 0000314E 5B                      	pop	bx			; get back digit (0 to 9)
 35289 0000314F 00D8                    	add	al,bl			; get total
 35290 00003151 80D400                  	adc	ah,0			; make that 16 bits
 35291 00003154 7239                    	jc	short badnum		; too big a number
 35292                                  
 35293 00003156 93                      	xchg	ax,bx			; stash total
 35294                                  
 35295 00003157 E8E1F5                  	call	getchr			;get next digit
 35296 0000315A 722D                    	jc	short b1		; no more characters
 35297 0000315C 3C20                    	cmp	al,' ' 			; space?
 35298 0000315E 741F                    	je	short b15		; then end of digits
 35299 00003160 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 35300 00003162 741B                    	je	short b15		; then end of digits.
 35301 00003164 3C09                    	cmp	al, tab ; 9		; tab
 35302 00003166 7417                    	je	short b15
 35303 00003168 2E3A06[2A03]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 35304 0000316D 7410                    	je	short b15
 35305 0000316F 3C2F                    	cmp	al,'/'			; see if another switch follows
 35306                                  	;nop				; cas - remnant of old bad code
 35307                                  	;nop
 35308                                  	; 12/12/2022
 35309                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35310                                  	;nop
 35311                                  	;nop
 35312 00003171 740C                    	je	short b15
 35313 00003173 3C0A                    	cmp	al,lf			; line-feed?
 35314 00003175 7408                    	je	short b15
 35315 00003177 3C0D                    	cmp	al,cr			; carriage return?
 35316 00003179 7404                    	je	short b15
 35317 0000317B 08C0                    	or	al,al			; end of line separator?
 35318 0000317D 75C4                    	jnz	short b2		; no, try as a valid char...
 35319                                  b15:
 35320 0000317F 2EFF06[D203]            	inc	word [cs:count]		; one more character to s...
 35321 00003184 2EFF0E[D603]            	dec	word [cs:chrptr]	; back up over separator
 35322                                  b1:
 35323 00003189 89D8                    	mov	ax,bx			; get proper count
 35324 0000318B 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 35325 0000318D 5B                      	pop	bx
 35326 0000318E C3                      	retn
 35327                                  badnum:
 35328                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35329                                  	;mov	byte [cs:sepchr],0
 35330 0000318F 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 35331                                  	; 12 /12/2022
 35332 00003191 2EA2[2A03]              	mov	[cs:sepchr],al ; 0
 35333 00003195 5B                      	pop	bx
 35334 00003196 F9                      	stc				; and carry set
 35335 00003197 C3                      	retn
 35336                                  
 35337                                  ;****************************************************************************
 35338                                  
 35339                                  setdoscountryinfo:
 35340                                  
 35341                                  ;----------------------------------------------------------------------------
 35342                                  ;input: es:di -> pointer to dos_country_cdpg_info
 35343                                  ;	ds:0  -> buffer.
 35344                                  ;	si = 0
 35345                                  ;	ax = country id
 35346                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 35347                                  ;	bx = file handle
 35348                                  ;	this routine can handle maximum 438 country_data entries.
 35349                                  ;
 35350                                  ;output: dos_country_cdpg_info set.
 35351                                  ;	 carry set if any file read failure or wrong information in the file.
 35352                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 35353                                  ;	 codepage_id in the file.
 35354                                  ;----------------------------------------------------------------------------
 35355                                  
 35356 00003198 57                      	push	di
 35357 00003199 50                      	push	ax
 35358 0000319A 52                      	push	dx
 35359                                  
 35360 0000319B 31C9                    	xor	cx,cx
 35361 0000319D 31D2                    	xor	dx,dx
 35362 0000319F B80002                  	mov	ax,512			;read 512 bytes
 35363 000031A2 E84F01                  	call	readincontrolbuffer	;read the file header
 35364 000031A5 724D                    	jc	short setdosdata_fail
 35365                                  
 35366 000031A7 06                      	push	es
 35367 000031A8 56                      	push	si
 35368                                  
 35369 000031A9 0E                      	push	cs
 35370 000031AA 07                      	pop	es
 35371                                  
 35372 000031AB BF[5434]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 35373 000031AE B90800                  	mov	cx,8			;length of the signature
 35374 000031B1 F3A6                    	repz	cmpsb
 35375                                  
 35376 000031B3 5E                      	pop	si
 35377 000031B4 07                      	pop	es
 35378 000031B5 753D                    	jnz	short setdosdata_fail 	;signature mismatch
 35379                                  
 35380 000031B7 83C612                  	add	si,18			;si -> county info type
 35381 000031BA 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 35382 000031BD 7535                    	jne	short setdosdata_fail 	;cannot proceed. error return
 35383                                  
 35384 000031BF 46                      	inc	si			;si -> file offset
 35385 000031C0 8B14                    	mov	dx,[si]			;get the info file offset.
 35386 000031C2 8B4C02                  	mov	cx,[si+2]
 35387 000031C5 B80018                  	mov	ax,6144			;read 6144 bytes.
 35388 000031C8 E82901                  	call	readincontrolbuffer	;read info
 35389 000031CB 7227                    	jc	short setdosdata_fail
 35390                                  
 35391 000031CD 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 35392 000031CF 81F9B601                	cmp	cx, 438			;cannot handle more than 438 entries.
 35393 000031D3 771F                    	ja	short setdosdata_fail
 35394                                  
 35395 000031D5 46                      	inc	si
 35396 000031D6 46                      	inc	si			;si -> entry information packet
 35397 000031D7 5A                      	pop	dx			;restore code page id
 35398 000031D8 58                      	pop	ax			;restore country id
 35399 000031D9 5F                      	pop	di
 35400                                  
 35401                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 35402 000031DA 3B4402                  	cmp	ax,[si+2]		;compare country_id
 35403 000031DD 750A                    	jne	short setdoscntry_next
 35404                                  
 35405 000031DF 83FA00                  	cmp	dx,0			;no user specified code page ?
 35406 000031E2 7415                    	je	short setdoscntry_any_codepage ;then no need to match code page id.
 35407 000031E4 3B5404                  	cmp	dx,[si+4]		;compare code page id
 35408 000031E7 7413                    	je	short setdoscntry_got_it
 35409                                  
 35410                                  setdoscntry_next:
 35411 000031E9 0334                    	add	si,[si]			;next entry
 35412 000031EB 46                      	inc	si
 35413 000031EC 46                      	inc	si			;take a word for size of entry itself
 35414 000031ED E2EB                    	loop	setdoscntry_find
 35415                                  
 35416 000031EF B9FFFF                  	mov	cx,-1			;signals that bad country id entered.
 35417                                  setdoscntry_fail:
 35418 000031F2 F9                      	stc
 35419 000031F3 C3                      	retn
 35420                                  
 35421                                  setdosdata_fail:
 35422 000031F4 5E                      	pop	si
 35423 000031F5 59                      	pop	cx
 35424 000031F6 5F                      	pop	di
 35425 000031F7 EBF9                    	jmp	short setdoscntry_fail
 35426                                  
 35427                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 35428 000031F9 8B5404                  	mov	dx,[si+4]
 35429                                  
 35430                                  setdoscntry_got_it:			;found the matching entry
 35431 000031FC 2E8916[5C34]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 35432 00003201 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 35433 00003204 8B4C0C                  	mov	cx,[si+12]
 35434 00003207 B80002                  	mov	ax,512 			;read 512 bytes
 35435 0000320A E8E700                  	call	readincontrolbuffer
 35436 0000320D 72E3                    	jc	short setdoscntry_fail
 35437                                  
 35438 0000320F 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 35439 00003211 46                      	inc	si
 35440 00003212 46                      	inc	si			;si -> first entry
 35441                                  
 35442                                  setdoscntry_data:
 35443 00003213 57                      	push	di			;es:di -> dos_country_cdpg_info
 35444 00003214 51                      	push	cx			;save # of entry left
 35445 00003215 56                      	push	si			;si -> current entry in control buffer
 35446                                  
 35447 00003216 8A4402                  	mov	al,[si+2]		;get data entry id
 35448 00003219 E8AA00                  	call	getcountrydestination	;get the address of destination in es:di
 35449 0000321C 727D                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 35450                                  
 35451 0000321E 8B5404                  	mov	dx,[si+4]		;get offset of data
 35452 00003221 8B4C06                  	mov	cx,[si+6]
 35453 00003224 B80042                  	mov	ax,4200h
 35454 00003227 F9                      	stc
 35455 00003228 CD21                    	int	21h			;move pointer
 35456 0000322A 72C8                    	jc	short setdosdata_fail
 35457                                  
 35458 0000322C BA0002                  	mov	dx,512			;start of data buffer
 35459 0000322F B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 35460 00003232 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 35461 00003234 F9                      	stc
 35462 00003235 CD21                    	int	21h			;read the country.sys data
 35463 00003237 72BB                    	jc	short setdosdata_fail 	;read failure
 35464                                  
 35465 00003239 39C8                    	cmp	ax,cx
 35466 0000323B 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 35467                                  
 35468 0000323D 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 35469 00003240 8B4C06                  	mov	cx,[si+6]
 35470 00003243 B80042                  	mov	ax,4200h
 35471 00003246 F9                      	stc
 35472 00003247 CD21                    	int	21h			;move pointer back again
 35473 00003249 72A9                    	jc	short setdosdata_fail
 35474                                  
 35475 0000324B 56                      	push	si
 35476 0000324C BE0802                  	mov	si,(512+8)		;get length of the data from the file
 35477 0000324F 8B0C                    	mov	cx,[si]
 35478 00003251 5E                      	pop	si
 35479 00003252 BA0002                  	mov	dx,512			;start of data buffer
 35480 00003255 83C10A                  	add	cx,10			;signature + a word for the length itself
 35481 00003258 B43F                    	mov	ah,3Fh			;read the data from the file.
 35482 0000325A F9                      	stc
 35483 0000325B CD21                    	int	21h
 35484 0000325D 7295                    	jc	short setdosdata_fail
 35485                                  
 35486 0000325F 39C8                    	cmp	ax,cx
 35487 00003261 7591                    	jne	short setdosdata_fail
 35488                                  
 35489 00003263 8A4402                  	mov	al,[si+2]		;save data id for future use.
 35490 00003266 BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 35491 00003269 8B0C                    	mov	cx,[si]			;get the length of the file
 35492 0000326B 41                      	inc	cx			;take care of a word for lenght of tab
 35493 0000326C 41                      	inc	cx			;itself.
 35494 0000326D 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 35495 00003271 7781                    	ja	short setdosdata_fail
 35496                                  
 35497                                  	;if	bugfix
 35498 00003273 E83500                  	call	setdbcs_before_copy
 35499                                  	;endif
 35500                                  
 35501 00003276 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 35502 00003278 7512                    	jne	short setdoscntry_mov 	;no, don't worry
 35503                                  
 35504 0000327A 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 35505                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 35506 0000327E 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 35507                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 35508                                  	
 35509 00003282 57                      	push	di			;save di
 35510                                  
 35511 00003283 50                      	push	ax
 35512 00003284 2EA1[5C34]              	mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 35513 00003288 894404                  	mov	[si+4],ax		;use the saved one for this !!!!
 35514 0000328B 58                      	pop	ax
 35515                                  
 35516                                  setdoscntry_mov:
 35517 0000328C F3A4                    	rep	movsb			;copy the table into dos
 35518 0000328E 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 35519 00003290 7509                    	jne	short setdoscntry_data_next
 35520                                  
 35521 00003292 5F                      	pop	di			;restore di
 35522 00003293 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 35523                                  	;pop	word [es:di+26]		;restore
 35524 00003297 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 35525                                  	;pop	word [es:di+24]
 35526                                  
 35527                                  setdoscntry_data_next:
 35528 0000329B 5E                      	pop	si			;restore control buffer pointer
 35529 0000329C 59                      	pop	cx			;restore # of entries left
 35530 0000329D 5F                      	pop	di			;restore pointer to dso_country_cdpg
 35531 0000329E 0334                    	add	si,[si]			;try to get the next entry
 35532 000032A0 46                      	inc	si
 35533 000032A1 46                      	inc	si			;take a word of entry length itself
 35534 000032A2 49                      	dec	cx
 35535 000032A3 83F900                  	cmp	cx,0
 35536 000032A6 741D                    	je	short setdoscntry_ok
 35537 000032A8 E968FF                  	jmp	setdoscntry_data
 35538                                  
 35539                                  	; 18/12/2022
 35540                                  ;setdoscntry_ok:
 35541                                  	;retn
 35542                                  
 35543                                  ;----------------------------------------------------------------------------
 35544                                  
 35545                                  	;if	bugfix
 35546                                  
 35547                                  setdbcs_before_copy:
 35548 000032AB 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 35549 000032AD 7516                    	jne	short sdbcsbc		; jump if not
 35550 000032AF 26833D00                	cmp	word [es:di],0		; zero byte data block?
 35551 000032B3 7410                    	je	short sdbcsbc		; jump if so
 35552                                  
 35553 000032B5 57                      	push	di
 35554 000032B6 50                      	push	ax
 35555 000032B7 51                      	push	cx
 35556 000032B8 268B0D                  	mov	cx,[es:di]		; load block length
 35557 000032BB 83C702                  	add	di,2			; points actual data
 35558 000032BE 30C0                    	xor	al,al			; fill bytes
 35559 000032C0 F3AA                    	rep	stosb			; clear data block
 35560 000032C2 59                      	pop	cx
 35561 000032C3 58                      	pop	ax
 35562 000032C4 5F                      	pop	di
 35563                                  sdbcsbc:
 35564                                  setdoscntry_ok:	; 18/12/2022	
 35565 000032C5 C3                      	retn
 35566                                  
 35567                                  	;endif
 35568                                  
 35569                                  ;----------------------------------------------------------------------------
 35570                                  
 35571                                  getcountrydestination:
 35572                                  
 35573                                  ;get the destination address in the dos country info table.
 35574                                  ;input: al - data id
 35575                                  ;	es:di -> dos_country_cdpg_info
 35576                                  ;on return:
 35577                                  ;	es:di -> destination address of the matching data id
 35578                                  ;	carry set if no matching data id found in dos.
 35579                                  
 35580 000032C6 51                      	push	cx
 35581                                  	;add	di,74
 35582 000032C7 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 35583                                  					;skip the reserved area, syscodepage etc.
 35584 000032CA 268B0D                  	mov	cx,[es:di]		;get the number of entries
 35585 000032CD 47                      	inc	di
 35586 000032CE 47                      	inc	di			;si -> the first start entry id
 35587                                  
 35588                                  getcntrydest:
 35589 000032CF 263805                  	cmp	byte [es:di],al
 35590 000032D2 7413                    	je	short getcntrydest_ok
 35591 000032D4 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 35592 000032D8 7405                    	je	short getcntrydest_1
 35593                                  
 35594 000032DA 83C705                  	add	di,5			;next data id
 35595 000032DD EB03                    	jmp	short getcntrydest_loop
 35596                                  
 35597                                  getcntrydest_1:
 35598                                  	;add	di,41
 35599 000032DF 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 35600                                  getcntrydest_loop:
 35601 000032E2 E2EB                    	loop	getcntrydest
 35602 000032E4 F9                      	stc
 35603 000032E5 EB0B                    	jmp	short getcntrydest_exit
 35604                                  
 35605                                  getcntrydest_ok:
 35606 000032E7 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 35607 000032E9 7503                    	jne	short getcntrydest_ok1
 35608                                  
 35609 000032EB 47                      	inc	di			;now di -> cccountryinfolen
 35610 000032EC EB04                    	jmp	short getcntrydest_exit
 35611                                  
 35612                                  getcntrydest_ok1:
 35613 000032EE 26C47D01                	les	di,[es:di+1]		;get the destination in es:di
 35614                                  
 35615                                  getcntrydest_exit:
 35616 000032F2 59                      	pop	cx
 35617 000032F3 C3                      	retn
 35618                                  
 35619                                  ;----------------------------------------------------------------------------
 35620                                  
 35621                                  readincontrolbuffer:
 35622                                  
 35623                                  ;move file pointer to cx:dx
 35624                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 35625                                  ;si will be set to 0 hence ds:si points to the control buffer.
 35626                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 35627                                  ;	 be moved.
 35628                                  ;	 ax - # of bytes to read
 35629                                  ;	 bx - file handle
 35630                                  ;	 ds - buffer seg.
 35631                                  ;return: the control data information is read into ds:0 - ds:0200.
 35632                                  ;	 cx,dx value destroyed.
 35633                                  ;	 carry set if error in reading file.
 35634                                  
 35635 000032F4 50                      	push	ax			;# of bytes to read
 35636 000032F5 B80042                  	mov	ax,4200h
 35637 000032F8 F9                      	stc
 35638 000032F9 CD21                    	int	21h			;move pointer
 35639 000032FB 59                      	pop	cx			;# of bytes to read
 35640 000032FC 7209                    	jc	short ricb_exit
 35641                                  
 35642 000032FE 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 35643 00003300 31F6                    	xor	si,si
 35644 00003302 B43F                    	mov	ah,3Fh			;read into the buffer
 35645 00003304 F9                      	stc
 35646 00003305 CD21                    	int	21h			;should be less than 1024 bytes.
 35647                                  ricb_exit:
 35648 00003307 C3                      	retn
 35649                                  
 35650                                  ;----------------------------------------------------------------------------
 35651                                  
 35652                                  set_country_path:
 35653                                  
 35654                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 35655                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 35656                                  ;     assumes current directory is the root directory.
 35657                                  ;out: ds:di -> full path (cntry_drv).
 35658                                  ;     set the cntry_drv string from the country=,,path command.
 35659                                  ;     ds, es, si value saved.
 35660                                  
 35661 00003308 56                      	push	si
 35662                                  
 35663 00003309 1E                      	push	ds			;switch ds, es
 35664 0000330A 06                      	push	es
 35665 0000330B 1F                      	pop	ds
 35666 0000330C 07                      	pop	es			;now ds -> confbot, es -> sysinitseg
 35667                                  
 35668 0000330D E82E00                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 35669 00003310 7206                    	jc	short scp_default_drv 	;no, use current default drive.
 35670                                  
 35671 00003312 8A04                    	mov	al,[si]
 35672 00003314 46                      	inc	si
 35673 00003315 46                      	inc	si			;si -> next char after ":"
 35674 00003316 EB06                    	jmp	short scp_setdrv
 35675                                  
 35676                                  scp_default_drv:
 35677 00003318 B419                    	mov	ah,19h
 35678 0000331A CD21                    	int	21h
 35679 0000331C 0441                    	add	al,"A"			;convert it to a character.
 35680                                  
 35681                                  scp_setdrv:
 35682 0000331E 2EA2[1134]              	mov	[cs:cntry_drv],al	;set the drive letter.
 35683 00003322 BF[1434]                	mov	di,cntry_path
 35684 00003325 8A04                    	mov	al,[si]
 35685 00003327 3C5C                    	cmp	al, "\"
 35686 00003329 7406                    	je	short scp_root_dir
 35687                                  
 35688 0000332B 3C2F                    	cmp	al,"/"			;let's accept "/" as an directory delim
 35689 0000332D 7402                    	je	short scp_root_dir
 35690                                  
 35691 0000332F EB01                    	jmp	short scp_path
 35692                                  
 35693                                  scp_root_dir:
 35694 00003331 4F                      	dec	di			;di -> cntry_root
 35695                                  scp_path:
 35696 00003332 E81F00                  	call	move_asciiz		;copy it
 35697                                  
 35698 00003335 BF[1134]                	mov	di,cntry_drv
 35699                                  scpath_exit:
 35700                                  
 35701 00003338 1E                      	push	ds			;switch ds, es
 35702 00003339 06                      	push	es
 35703 0000333A 1F                      	pop	ds
 35704 0000333B 07                      	pop	es			;ds, es value restored
 35705                                  
 35706 0000333C 5E                      	pop	si
 35707 0000333D C3                      	retn
 35708                                  
 35709                                  ;----------------------------------------------------------------------------
 35710                                  
 35711                                  chk_drive_letter:
 35712                                  
 35713                                  ;check if ds:[si] is a drive letter followed by ":".
 35714                                  ;assume that every alpha character is already converted to upper case.
 35715                                  ;carry set if not.
 35716                                  
 35717 0000333E 50                      	push	ax
 35718 0000333F 803C41                  	cmp	byte [si],"A"
 35719                                  	;jb	short cdletter_no
 35720 00003342 720E                    	jb	short cdletter_exit
 35721 00003344 803C5A                  	cmp	byte [si],"Z"
 35722 00003347 7708                    	ja	short cdletter_no
 35723 00003349 807C013A                	cmp	byte [si+1],":"
 35724 0000334D 7502                    	jne	short cdletter_no
 35725                                  
 35726 0000334F EB01                    	jmp	short cdletter_exit
 35727                                  
 35728                                  cdletter_no:
 35729 00003351 F9                      	stc
 35730                                  cdletter_exit:
 35731 00003352 58                      	pop	ax
 35732 00003353 C3                      	retn
 35733                                  
 35734                                  ;----------------------------------------------------------------------------
 35735                                  
 35736                                  move_asciiz:
 35737                                  
 35738                                  ;in: ds:si -> source es:di -> target
 35739                                  ;out: copy the string until 0.
 35740                                  ;assumes there exists a 0.
 35741                                  
 35742                                  masciiz_loop:
 35743 00003354 A4                      	movsb
 35744 00003355 807CFF00                	cmp	byte [si-1],0	; was it 0?
 35745 00003359 75F9                    	jne	short masciiz_loop
 35746 0000335B C3                      	retn
 35747                                  
 35748                                  ;----------------------------------------------------------------------------
 35749                                  
 35750                                  ;	ds:dx points to string to output (asciz)
 35751                                  ;
 35752                                  ;	prints <badld_pre> <string> <badld_post>
 35753                                  
 35754                                  badfil:
 35755 0000335C 0E                      	push	cs
 35756 0000335D 07                      	pop	es
 35757                                  
 35758 0000335E 89D6                    	mov	si,dx
 35759                                  badload:
 35760 00003360 BA[9D37]                	mov	dx,badld_pre	; want to print config error
 35761 00003363 BB[5A37]                	mov	bx,crlfm
 35762                                  prnerr:
 35763 00003366 0E                      	push	cs
 35764 00003367 1F                      	pop	ds ; *
 35765 00003368 E81D00                  	call	print
 35766                                  prn1:
 35767 0000336B 268A14                  	mov	dl,[es:si]
 35768 0000336E 08D2                    	or	dl,dl
 35769 00003370 7407                    	jz	short prn2
 35770 00003372 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 35771 00003374 CD21                    	int	21h
 35772 00003376 46                      	inc	si
 35773 00003377 EBF2                    	jmp	short prn1
 35774                                  prn2:
 35775 00003379 89DA                    	mov	dx,bx
 35776 0000337B E80A00                  	call	print
 35777                                  	; 11/12/2022
 35778                                  	; ds = cs ; *
 35779 0000337E 803E[D103]01            	cmp	byte [donotshownum],1 ; suppress line number when handling command.com
 35780                                  	;cmp	byte [cs:donotshownum],1 
 35781 00003383 7407                    	je	short prnexit
 35782                                  	
 35783                                  	; 18/12/2022
 35784                                  	;call	error_line
 35785 00003385 E9CAF3                  	jmp	error_line
 35786                                  ;prnexit:
 35787                                  	;retn
 35788                                  
 35789                                  ;----------------------------------------------------------------------------
 35790                                  
 35791                                  print:
 35792 00003388 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 35793 0000338A CD21                    	int	21h
 35794                                  prnexit:	; 18/12/2022
 35795 0000338C C3                      	retn
 35796                                  
 35797                                  ;----------------------------------------------------------------------------
 35798                                  
 35799                                  ;  open device pointed to by dx, al has access code
 35800                                  ;   if unable to open do a device open null device instead
 35801                                  
 35802                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35803                                  	; (SYSINIT:3764h)
 35804                                  open_dev:
 35805 0000338D E80500                  	call	open_file
 35806 00003390 7309                    	jnc	short open_dev3
 35807                                  
 35808                                  open_dev1:
 35809 00003392 BA[F533]                	mov	dx,nuldev
 35810                                  	; 18/12/2022
 35811                                  	;call	open_file
 35812                                  ;of_retn:
 35813                                  	;retn
 35814                                  	; 18/12/2022
 35815                                  	;jmp	short open_file
 35816                                  open_file:
 35817 00003395 B43D                    	mov	ah,OPEN	; 3Dh
 35818 00003397 F9                      	stc
 35819 00003398 CD21                    	int	21h
 35820                                  of_retn:	; 18/12/2022
 35821 0000339A C3                      	retn
 35822                                  
 35823                                  open_dev3:
 35824 0000339B 89C3                    	mov	bx,ax			; handle from open to bx
 35825                                  	;;xor	ax,ax			; get device info
 35826                                  	;;mov	ah,IOCTL ; 44h
 35827                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 35828                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35829                                  	;xor	ax,ax
 35830                                  	;mov	ah,44h	; IOCTL
 35831                                  	; 11/12/2022
 35832 0000339D B80044                  	mov	ax,4400h ; IOCTL<<8 
 35833                                  
 35834 000033A0 CD21                    	int	21h
 35835                                  
 35836 000033A2 F6C280                  	test	dl,10000000b ; 80h
 35837 000033A5 75F3                    	jnz	short of_retn
 35838                                  
 35839 000033A7 B43E                    	mov	ah,CLOSE ; 3Eh
 35840 000033A9 CD21                    	int	21h
 35841 000033AB EBE5                    	jmp	short open_dev1
 35842                                  
 35843                                  ;----------------------------------------------------------------------------
 35844                                  
 35845                                  ; 18/12/2022
 35846                                  %if 0
 35847                                  open_file:
 35848                                  	mov	ah,OPEN	; 3Dh
 35849                                  	stc
 35850                                  	int	21h
 35851                                  	retn
 35852                                  %endif
 35853                                  
 35854                                  ;----------------------------------------------------------------------------
 35855                                  
 35856                                  ; test int24. return back to dos with the fake user response of "fail"
 35857                                  
 35858                                  int24:
 35859 000033AD B003                    	mov	al,3			; fail the system call
 35860 000033AF CF                      	iret				; return back to dos.
 35861                                  
 35862                                  ; 19/04/2019 - Retro DOS v4.0
 35863                                  
 35864                                  ;----------------------------------------------------------------------------
 35865                                  ; DATA
 35866                                  ;----------------------------------------------------------------------------
 35867                                  
 35868                                  ;include copyrigh.inc			; copyright statement
 35869                                  
 35870                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 35871                                  
 35872                                  ;MsDosVersion6Copyr:
 35873                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 35874                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 35875                                  
 35876                                  ; 22/10/2022
 35877                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 35878                                  
 35879                                  ; 28/12/2022
 35880                                  %if 0
 35881                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35882                                  MsDosVersion5Copyr:
 35883                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 35884                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 35885                                  %endif
 35886                                  
 35887                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35888                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 35889                                  ; 20/04/2019 - Retro DOS v4.0
 35890                                  ;BOOTMES:
 35891                                  ;	db      13
 35892                                  ;	db      10
 35893                                  ;	db      "MS-DOS version "
 35894                                  ;	db      MAJOR_VERSION + "0"
 35895                                  ;	db      "."
 35896                                  ;	db      (MINOR_VERSION / 10) + "0"
 35897                                  ;	db      (MINOR_VERSION % 10) + "0"
 35898                                  ;	db      13,10
 35899                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 35900                                  ;	; 22/10/2022
 35901                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 35902                                  ;	;
 35903                                  ;	db	0
 35904                                  
 35905                                  	; 12/12/2022
 35906 000033B0 00                      	db	0
 35907                                  ; 12/12/2022
 35908                                  BOOTMES:
 35909 000033B1 0D0A                    	db	13,10
 35910                                  	;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 35911                                  	; 28/12/2022
 35912 000033B3 526574726F20444F53-     	db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 35912 000033BC 2076342E3120284D6F-
 35912 000033C5 646966696564204D53-
 35912 000033CE 444F5320352E302920 
 35913 000033D7 0D0A                    	db	13,10
 35914                                  	;db	"by Erdogan Tan [2022] "
 35915 000033D9 6279204572646F6761-     	db	"by Erdogan Tan [2023] " ; 04/01/2023
 35915 000033E2 6E2054616E205B3230-
 35915 000033EB 32335D20           
 35916 000033EF 0D0A                    	db	13,10
 35917 000033F1 0D0A2400                	db	13,10,"$",0
 35918                                  
 35919 000033F5 4E554C00                nuldev:	db	"NUL",0
 35920 000033F9 434F4E00                condev:	db	"CON",0
 35921 000033FD 41555800                auxdev:	db	"AUX",0
 35922 00003401 50524E00                prndev:	db	"PRN",0
 35923                                  
 35924                                  ;IFDEF	CONFIGPROC
 35925 00003405 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 35925 0000340E 595300             
 35926                                  
 35927 00003411 413A                    cntry_drv:  db	"A:"
 35928 00003413 5C                      cntry_root: db	"\"
 35929 00003414 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 35929 0000341D 595300             
 35930                                  	    ;db	52 dup (0)
 35931 00003420 00<rep 34h>             	    times 52 db 0	
 35932                                  
 35933                                  country_file_signature:
 35934 00003454 FF434F554E545259        	db	0FFh,'COUNTRY'
 35935                                  
 35936                                  cntrycodepage_id: 
 35937 0000345C 0000                    	dw	0 	
 35938                                  
 35939                                  ;ENDIF ; CONFIGPROC
 35940                                  
 35941                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35942                                  ;;ifdef	MULTI_CONFIG
 35943                                  ;newcmd:  db	0			; non-zero if non-std shell specified
 35944                                  ;tmplate: db	64                      ; must precede commnd
 35945                                  ;;endif
 35946                                  	; 02/11/2022
 35947                                  	;db	12                      ; size of commnd line (excl. null)
 35948                                  
 35949 0000345E 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 35949 00003467 434F4D00           
 35950                                  	;db	51 dup (0)
 35951 0000346B 00<rep 33h>             	times	51 db 0
 35952                                  ;endif
 35953                                  
 35954                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35955                                  ;;ifdef	MULTI_CONFIG
 35956                                  ;commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 35957                                  ;	 db	2,"/P",0 		; followed by their respective alternate
 35958                                  ;commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 35959                                  ;	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 35960                                  ;commnd4: db	"\DOS\COMMAND.COM",0 	;
 35961                                  ;	 db	9,"A:\DOS /P",0		;
 35962                                  ;def_swchr:	
 35963                                  ;	 db	0			; default switchchar (referenced as command_line-1)
 35964                                  ;;endif
 35965                                  
 35966                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35967                                  ;command_line:
 35968                                  ;	db	2,"/P"			; default command.com args
 35969                                  ;	;db	125 dup (0)
 35970                                  ;	times	125 db 0
 35971                                  
 35972                                  pathstring:
 35973                                  	;db	64 dup (0)
 35974 0000349E 00<rep 40h>             	times	64 db 0
 35975                                  
 35976                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35977                                  %if 0
 35978                                  
 35979                                  dae_flag:
 35980                                  	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 35981                                  
 35982                                  ;ifdef	MULTI_CONFIG
 35983                                  
 35984                                  MAX_MULTI_CONFIG equ 10
 35985                                  
 35986                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 35987                                  
 35988                                  bMenuColor:	db      07h ;1Fh        ; default fgnd/bgnd color
 35989                                  bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 35990                                  		db      5               ; video page function # (KEEP AFTER bMenuPage)
 35991                                  bLastCol:	db      0               ; ending column on status line
 35992                                  bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 35993                                  bDisableUI:	db      0               ; 1=disable clean/interactive
 35994                                                                          ; 2=disable default 2-second delay
 35995                                  bCRTPage:	db      0               ; value saved from BIOS data area
 35996                                  wCRTStart:	dw      0               ; value saved from BIOS data area
 35997                                  bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 35998                                  bDefBlock:	db      1               ; default block #
 35999                                  bMaxBlock:	db      0               ; maxmimum block #
 36000                                  offDefBlock:	dw      0               ; offset of name of default block (if any)
 36001                                  secTimeOut:	db      -1              ; # of seconds for timeout (-1 == indefinite)
 36002                                  secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 36003                                  abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 36004                                  aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 36005                                  aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 36006                                  
 36007                                  szBoot:		db      "CONFIG=",0
 36008                                  szMenu:		db      "MENU",0
 36009                                  szCommon:	db      "COMMON",0
 36010                                  
 36011                                  ;endif	;MULTI_CONFIG
 36012                                  
 36013                                  comtab:	 ; label byte
 36014                                  
 36015                                  ;            cmd len    command         cmd code
 36016                                  ;            -------    -------         --------
 36017                                  
 36018                                  ;ifdef MULTI_CONFIG
 36019                                          db      1,      "[",            CONFIG_BEGIN
 36020                                  ;endif
 36021                                          db      5,      "BREAK",        CONFIG_BREAK
 36022                                          db      7,      "BUFFERS",      CONFIG_BUFFERS
 36023                                          db      7,      "COMMENT",      CONFIG_COMMENT
 36024                                          db      7,      "COUNTRY",      CONFIG_COUNTRY
 36025                                          db      6,      "DEVICE",       CONFIG_DEVICE
 36026                                          db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36027                                          db      3,      "DOS",          CONFIG_DOS
 36028                                          db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36029                                          db      4,      "FCBS",         CONFIG_FCBS
 36030                                          db      5,      "FILES",        CONFIG_FILES
 36031                                  ;ifdef MULTI_CONFIG
 36032                                          db      7,      "INCLUDE",      CONFIG_INCLUDE
 36033                                  ;endif
 36034                                          db      7,      "INSTALL",      CONFIG_INSTALL
 36035                                          db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 36036                                          db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36037                                  ;ifdef MULTI_CONFIG
 36038                                          db      7,      "SUBMENU",      CONFIG_SUBMENU
 36039                                          db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 36040                                          db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 36041                                          db      8,      "MENUITEM",     CONFIG_MENUITEM
 36042                                  ;endif
 36043                                          db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36044                                  ;ifdef MULTI_CONFIG
 36045                                          db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 36046                                  ;endif
 36047                                          db      3,      "REM",          CONFIG_REM
 36048                                  ;ifdef MULTI_CONFIG
 36049                                          db      3,      "SET",          CONFIG_SET
 36050                                  ;endif
 36051                                          db      5,      "SHELL",        CONFIG_SHELL
 36052                                  ;if    STACKSW
 36053                                          db      6,      "STACKS",       CONFIG_STACKS
 36054                                  ;endif
 36055                                          db      8,      "SWITCHES",     CONFIG_SWITCHES
 36056                                  	db	0
 36057                                  %endif
 36058                                  
 36059                                  comtab:
 36060                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36061                                  	; (SYSINIT:38EDh)
 36062 000034DE 074255464645525342      	db      7,      "BUFFERS",      CONFIG_BUFFERS
 36063 000034E7 05425245414B43          	db      5,      "BREAK",        CONFIG_BREAK
 36064 000034EE 0644455649434544        	db      6,      "DEVICE",       CONFIG_DEVICE
 36065 000034F6 0A4445564943454849-     	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36065 000034FF 474855             
 36066 00003502 0546494C455346          	db      5,      "FILES",        CONFIG_FILES
 36067 00003509 044643425358            	db      4,      "FCBS",         CONFIG_FCBS
 36068 0000350F 094C41535444524956-     	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36068 00003518 454C               
 36069 0000351A 0A4D554C5449545241-     	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36069 00003523 434B4D             
 36070 00003526 08445249565041524D-     	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36070 0000352F 50                 
 36071 00003530 06535441434B534B        	db      6,      "STACKS",       CONFIG_STACKS
 36072 00003538 07434F554E54525951      	db      7,      "COUNTRY",      CONFIG_COUNTRY
 36073 00003541 055348454C4C53          	db      5,      "SHELL",        CONFIG_SHELL
 36074 00003548 07494E5354414C4C49      	db      7,      "INSTALL",      CONFIG_INSTALL
 36075 00003551 07434F4D4D454E5459      	db      7,      "COMMENT",      CONFIG_COMMENT
 36076 0000355A 0352454D30              	db      3,      "REM",          CONFIG_REM
 36077 0000355F 085357495443484553-     	db      8,      "SWITCHES",     CONFIG_SWITCHES
 36077 00003568 31                 
 36078 00003569 03444F5348              	db      3,      "DOS",          CONFIG_DOS
 36079 0000356E 00                      	db	0
 36080                                  
 36081                                  deviceparameters:	
 36082                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 36083                                  devp.specialfunc:	; deviceparameters +
 36084 0000356F 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 36085                                  devp.devtype:
 36086 00003570 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 36087                                  devp.devattr:
 36088 00003571 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 36089                                  devp.cylinders:
 36090 00003573 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 36091                                  
 36092 00003575 00<rep 11Eh>            	times	286	db 0
 36093                                  	
 36094 00003693 0200                    hlim:	dw	2
 36095 00003695 0900                    slim:	dw	9
 36096                                  
 36097 00003697 00                      drive:	db	0
 36098                                  
 36099                                  switches:
 36100 00003698 0000                    	dw	0
 36101                                  
 36102                                  ; the following are the recommended bpbs for the media that
 36103                                  ; we know of so far.
 36104                                  
 36105                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36106                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 36107                                  
 36108                                  ; 48 tpi diskettes
 36109                                  
 36110 0000369A 0002                    bpb48t	dw	512
 36111 0000369C 02                      	db	2
 36112 0000369D 0100                    	dw	1
 36113 0000369F 02                      	db	2
 36114 000036A0 7000                    	dw	112
 36115 000036A2 D002                    	dw	2*9*40 ; 720
 36116 000036A4 FD                      	db	0FDh
 36117 000036A5 0200                    	dw	2
 36118 000036A7 0900                    	dw	9
 36119 000036A9 0200                    	dw	2
 36120 000036AB 00000000                	dd	0
 36121 000036AF 00000000                        dd      0
 36122                                  
 36123                                  ; 96tpi diskettes
 36124                                  
 36125 000036B3 0002                    bpb96t:	dw	512
 36126 000036B5 01                      	db	1
 36127 000036B6 0100                    	dw	1
 36128 000036B8 02                      	db	2
 36129 000036B9 E000                    	dw	224
 36130 000036BB 6009                    	dw	2*15*80 ; 2400
 36131 000036BD F9                      	db	0F9h
 36132 000036BE 0700                    	dw	7
 36133 000036C0 0F00                    	dw	15
 36134 000036C2 0200                    	dw	2
 36135 000036C4 00000000                	dd	0
 36136 000036C8 00000000                        dd      0
 36137                                  
 36138                                  ; 3 1/2 inch diskette bpb
 36139                                  
 36140 000036CC 0002                    bpb35:	dw	512
 36141 000036CE 02                      	db	2
 36142 000036CF 0100                    	dw	1
 36143 000036D1 02                      	db	2
 36144 000036D2 7000                    	dw	112
 36145 000036D4 A005                    	dw	2*9*80 ; 1440
 36146 000036D6 F9                      	db	0F9h
 36147 000036D7 0300                    	dw	3
 36148 000036D9 0900                    	dw	9
 36149 000036DB 0200                    	dw	2
 36150 000036DD 00000000                	dd	0
 36151 000036E1 00000000                        dd      0
 36152                                        
 36153 000036E5 0002                    bpb35h:	dw	512
 36154 000036E7 01                      	db	1
 36155 000036E8 0100                    	dw	1
 36156 000036EA 02                      	db	2
 36157 000036EB E000                    	dw	224
 36158 000036ED 400B                    	dw	2*18*80 ; 2880
 36159 000036EF F0                      	db	0F0h
 36160 000036F0 0900                    	dw	9
 36161 000036F2 1200                    	dw	18
 36162 000036F4 0200                    	dw	2
 36163 000036F6 00000000                	dd	0
 36164 000036FA 00000000                        dd      0
 36165                                  
 36166                                  ; m037 - BEGIN
 36167                                  
 36168 000036FE 0002                    bpb288:	dw	512
 36169 00003700 02                      	db	2
 36170 00003701 0100                    	dw	1
 36171 00003703 02                      	db	2
 36172 00003704 F000                    	dw	240
 36173 00003706 8016                    	dw	2*36*80 ; 5760
 36174 00003708 F0                      	db	0F0h
 36175 00003709 0900                    	dw	9
 36176 0000370B 2400                    	dw	36
 36177 0000370D 0200                    	dw	2
 36178 0000370F 00000000                	dd	0
 36179 00003713 00000000                        dd      0
 36180                                  
 36181                                  ; m037 - END
 36182                                  
 36183                                  ; 12/05/2019
 36184                                  
 36185 00003717 90                      align 2
 36186                                  
 36187                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36188                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 36189                                  
 36190 00003718 [9A36]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 36191 0000371A [B336]                  	    dw	    bpb96t		; 96tpi drives
 36192 0000371C [CC36]                  	    dw	    bpb35		; 3.5" drives
 36193                                  ; the following are not supported, so default to 3.5" media layout
 36194 0000371E [CC36]                  	    dw	    bpb35		; not used - 8" drives
 36195 00003720 [CC36]                  	    dw	    bpb35		; not used - 8" drives
 36196 00003722 [CC36]                  	    dw	    bpb35		; not used - hard files
 36197 00003724 [CC36]                  	    dw	    bpb35		; not used - tape drives
 36198 00003726 [E536]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 36199 00003728 [CC36]                  	    dw	    bpb35		; ERIMO				m037
 36200 0000372A [FE36]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 36201                                  
 36202                                  switchlist: 
 36203 0000372C 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 36204                                  
 36205                                  ;----------------------------------------------------------------------------
 36206                                  ; Messages
 36207                                  ;----------------------------------------------------------------------------
 36208                                  
 36209                                  ; 19/04/2019 - Retro DOS v4.0
 36210                                  
 36211                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 36212                                  
 36213 00003735 00                      	db 	0
 36214                                  
 36215                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36216                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 36217                                  
 36218                                  badopm:
 36219 00003736 0D0A                    	db	0Dh,0Ah 
 36220 00003738 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 36220 00003741 7A656420636F6D6D61-
 36220 0000374A 6E6420696E20434F4E-
 36220 00003753 4649472E535953     
 36221                                  crlfm:
 36222 0000375A 0D0A24                  	db	0Dh,0Ah,'$'
 36223                                  badparm:
 36224 0000375D 0D0A                    	db	0Dh,0Ah
 36225 0000375F 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 36225 00003768 6E64206F7220706172-
 36225 00003771 616D6574657273202D-
 36225 0000377A 2024               
 36226                                  badsiz_pre:
 36227 0000377C 0D0A                    	db	0Dh,0Ah
 36228 0000377E 536563746F72207369-     	db	'Sector size too large in file $'
 36228 00003787 7A6520746F6F206C61-
 36228 00003790 72676520696E206669-
 36228 00003799 6C652024           
 36229                                  badld_pre:
 36230 0000379D 0D0A                    	db	0Dh,0Ah
 36231 0000379F 426164206F72206D69-     	db	'Bad or missing $'
 36231 000037A8 7373696E672024     
 36232                                  badcom:
 36233 000037AF 436F6D6D616E642049-     	db	'Command Interpreter',0
 36233 000037B8 6E7465727072657465-
 36233 000037C1 7200               
 36234                                  badcountry:
 36235 000037C3 0D0A                    	db	0Dh,0Ah
 36236 000037C5 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 36236 000037CE 6F756E74727920636F-
 36236 000037D7 6465206F7220636F64-
 36236 000037E0 6520706167650D0A24 
 36237                                  badcountrycom:
 36238 000037E9 0D0A                    	db	0Dh,0Ah
 36239 000037EB 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 36239 000037F4 434F554E5452592063-
 36239 000037FD 6F6D6D616E640D0A24 
 36240                                  insufmemory:
 36241 00003806 0D0A                    	db	0Dh,0Ah
 36242 00003808 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 36242 00003811 656E74206D656D6F72-
 36242 0000381A 7920666F7220434F55-
 36242 00003823 4E5452592E53595320-
 36242 0000382C 66696C650D0A24     
 36243                                  badmem:
 36244 00003833 0D0A                    	db	0Dh,0Ah
 36245 00003835 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 36245 0000383E 74696F6E20746F6F20-
 36245 00003847 6C6172676520666F72-
 36245 00003850 206D656D6F72790D0A-
 36245 00003859 24                 
 36246                                  badblock:
 36247 0000385A 0D0A                    	db	0Dh,0Ah
 36248 0000385C 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 36248 00003865 626C6F636B20646576-
 36248 0000386E 696365730D0A24     
 36249                                  badstack:
 36250 00003875 0D0A                    	db	0Dh,0Ah
 36251 00003877 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 36251 00003880 5441434B2070617261-
 36251 00003889 6D65746572730D0A24 
 36252                                  	; 18/12/2022
 36253                                  ;badorder:
 36254                                  	;db	0Dh,0Ah
 36255                                  	;db	'Incorrect order in CONFIG.SYS line $'
 36256                                  errorcmd:
 36257 00003892 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 36257 0000389B 434F4E4649472E5359-
 36257 000038A4 53206C696E652024   
 36258                                  
 36259                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36260                                  %if 0
 36261                                  
 36262                                  OnOff:	db	'ON'
 36263                                  OnOff2:	db	'OFF'
 36264                                  
 36265                                  StartMsg:
 36266                                  	db	'Starting MS-DOS...',0Dh,0Ah
 36267                                  	db	0Ah,0
 36268                                  _$PauseMsg:
 36269                                  	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 36270                                  _$CleanMsg:
 36271                                  	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 36272                                  _$InterMsg:
 36273                                  	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 36274                                  _$MenuHeader:
 36275                                  	db	0Dh,0Ah
 36276                                  	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 36277                                  	db	'  =======================',0Dh,0Ah,'$'
 36278                                  _$MenuPrmpt:
 36279                                  	db	'  Enter a choice: $'
 36280                                  _$StatusLine:
 36281                                  	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS'
 36282                                  	db	'and AUTOEXEC.BAT [ ]$'
 36283                                  _$InterPrmpt:
 36284                                  	db	' [Y,N]?$'
 36285                                  _$YES:	db	'YES$'
 36286                                  _$NO:	db	'NO $'
 36287                                  _$TimeOut:
 36288                                  	db	'Time remaining: $'
 36289                                  badcomprmpt:
 36290                                  	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 36291                                  	db	0Dh,0Ah,'$'
 36292                                  _$AutoPrmpt:
 36293                                  	db	'Process AUTOEXEC.BAT [Y,N]?$'
 36294                                  
 36295                                  %endif
 36296                                  
 36297                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36298                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 36299                                  
 36300                                  TooManyDrivesMsg:
 36301 000038AC 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 36301 000038B5 4C6F676963616C2064-
 36301 000038BE 726976657320706173-
 36301 000038C7 74205A3A2065786973-
 36301 000038D0 7420616E642077696C-
 36301 000038D9 6C2062652069676E6F-
 36301 000038E2 7265640D0A24       
 36302                                  
 36303                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 36304                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 36305                                  	;db	7 dup(0)
 36306                                  
 36307                                  	;times	7 db 0
 36308                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36309                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 36310                                  	; 09/12/2022
 36311                                  	;times 4 db 0
 36312                                  
 36313                                  ;----------------------------------------------------------------------------
 36314                                  		; 09/12/2022
 36315                                  		;db 0
 36316                                  
 36317                                  number3div	equ ($-SYSINIT$)
 36318                                  number3mod	equ (number3div % 16)
 36319                                  
 36320                                  %if number3mod>0 & number3mod<16
 36321 000038E8 00<rep 8h>              		times (16-number3mod) db 0
 36322                                  %endif
 36323                                  
 36324                                  ;----------------------------------------------------------------------------
 36325                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 36326                                  ;----------------------------------------------------------------------------
 36327                                  
 36328                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 36329                                  
 36330                                  ;----------------------------------------------------------------------------
 36331                                  ; 20/04/2019 - Retro DOS v4.0
 36332                                  
 36333                                  ; 09/12/2022
 36334                                  ;
 36335                                  ;bss_start:
 36336                                  ;
 36337                                  ;ABSOLUTE bss_start
 36338                                  ;
 36339                                  ;alignb 16
 36340                                  
 36341                                  SI_end:  ; SI_end equ $
 36342                                  
 36343                                  ;----------------------------------------------------------------------------
 36344                                  
 36345                                  ;sysinitseg	ends
 36346                                  
 36347                                  ; ***************************************************************************
 36348                                  
 36349                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 36350                                  
 36351                                  SYSINITSIZE	equ SI_end - SYSINIT$
 36352                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 36353                                  
 36354                                  ;----------------------------------------------------------------------------
 36355                                  ; End of Retro DOS v4.0 (MSDOS 5.0) IO.SYS source by Erdogan Tan - 09/12/2022
 36356                                  ;----------------------------------------------------------------------------
 36357                                  
 36358                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 36359                                  ;----------------------------------------------------------------------------
 36360                                  ;----------------------------------------------------------------------------
 36361                                  
 36362                                  ; ----------------------------------------------------------------------------
 36363                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 36364                                  ; ----------------------------------------------------------------------------
 36365                                  ; 18/03/2019 - Retro DOS v4.0 
 36366                                  ; 11/06/2018 - Retro DOS v3.0 
 36367                                  
 36368                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 36369                                  		;; 28/06/2019 ('msdos6.s') 
 36370                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 36371                                  		
 36372                                  		; 29/12/2022
 36373 000038F0 <bin 8EFAh>             		incbin	'MSDOS51.BIN' ; Retro DOS 4.1 - MSDOS 5.0+ KERNEL
 36374                                  		
 36375                                  		;; 28/12/2022 (BugFix)
 36376                                  		;; 22/12/2022
 36377                                  		;; 21/12/2022 ('msdos5.s')
 36378                                  		;incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 36379                                  	
 36380                                  msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 36381                                  
 36382                                  align 2
 36383                                  
 36384                                  ; 21/12/2022
 36385                                  ;END_OF_KERNEL:
 36386                                  END_OF_KERNEL equ $
 36387                                  
 36388                                  ;=============================================================================
 36389                                  ;	END
 36390                                  ;=============================================================================
 36391                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 36392                                  ; ------------------------------
 36393                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
